//****************************************************************************//
// システム         : .NSシリーズ
// プログラム名称   : 仕入先電子元帳
// プログラム概要   : 仕入先電子元帳 フォームクラス
//----------------------------------------------------------------------------//
//                (c)Copyright  2008 Broadleaf Co.,Ltd.
//============================================================================//
// 履歴
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 徳永 俊詞
// 作 成 日  2008/09/02  修正内容 : 新規作成
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 鈴木 正臣
// 修 正 日              修正内容 : 全体的に修正
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 忍 幸史
// 修 正 日              修正内容 : 障害ID:7882対応　入力日のチェック方法を変更
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 上野 俊治
// 修 正 日  2009/05/11  修正内容 : 障害ID:13265対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 工藤 恵優
// 修 正 日  2010/01/14  修正内容 : 障害ID:14664対応 列サイズの自動調整の初期設定を修正
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 工藤 恵優
// 修 正 日  2010/01/27  修正内容 : 障害ID:14545対応 得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30517 夏野 駿希
// 修 正 日  2010/04/05  修正内容 : Mantis.15249　テキスト出力・Excel出力のオプション化
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : chenyd
// 修 正 日  2010/07/20  修正内容 : テキスト出力・Excel出力対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 朱 猛
// 修 正 日  2010/09/08  修正内容 : 障害ID:14441対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : tianjw
// 修 正 日  2010/09/14  修正内容 : テキスト出力対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 曹文傑
// 修 正 日  2010/09/21  修正内容 : redmine#14876
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 許培珠
// 修 正 日  2011/11/18  修正内容 : redmine#7871　仕入先電子元帳／抽出条件のメーカーがクリアされる場合がある
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 葛中華
// 修 正 日  2011/11/24  修正内容 : redmine#8078　仕入先電子元帳/標準価格の並び順はおかしい
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : x_chenjm
// 修 正 日  2011/11/30  修正内容 : 障害報告 #8364
//----------------------------------------------------------------------------//
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 20008 伊藤 豊
// 修 正 日  2012/06/26  修正内容 : 電話対応No.1027 第1次改良 件数オーバー時にメッセージを出力
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : FSI上北田 秀樹
// 修 正 日  2012/09/13  修正内容 : 仕入先総括対応の追加
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 鄧潘ハン
// 修 正 日  2012/09/19  修正内容 : 2012/10/17配信分、redmine #32371:仕入先電子元帳も、各種ボタンを得意先電子元帳同様にファンクションの対応
//----------------------------------------------------------------------------//	
// 管理番号  10801804-00 作成担当 : 鄧潘ハン
// 修 正 日  2012/10/12  修正内容 : 2012/10/17配信分、redmine #32371:検索ボタンとクリアボタンの位置も得意先電子元帳同様の対応
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 田建委
// 修 正 日  2012/10/15  修正内容 : 2012/11/14配信分、Redmine#32862 価格変更した明細、色を変えるように修正
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 田建委
// 修 正 日  2012/10/30  修正内容 : 2012/11/14配信分、Redmine#32862
//                                  #20 仕入データに入力区分「合計」で作成して、それを検索対象にした場合、システムエラーとなる修正
//----------------------------------------------------------------------------//
// 管理番号 10806793-00  作成担当 : 田建委
// 修 正 日  2013/01/11  修正内容 : 2013/03/13配信分  Redmine#33833
//                                  初期起動時の伝票区分のデフォルト値を「仕入／仕入返品」にするように修正
//----------------------------------------------------------------------------//
// 管理番号  10806793-00 作成担当 : FSI冨樫 紗由里
// 修 正 日  2013/01/21  修正内容 : 返品計上機能追加
//                                   1.検索処理に返品予定データ検索(仕入形式=3)追加
//                                   2.返品予定データ削除機能追加
//                                   3.返品計上タブ追加
//                                   4.伝票表示タブ・明細表示タブに選択チェックボックス追加
//                                   5.明細選択(F3),伝票選択(F4),返品計上(F5),削除(F11)ボタン追加
//                                   6.行検索に返品予定明細グリッド分を追加
//                                   7.設定画面(PMKOU04004U)に返品計上タブの設定クリアを追加
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 西 毅
// 修 正 日  2013/01/21  修正内容 : 伝票区分の初期値を修正
//----------------------------------------------------------------------------//
// 管理番号  10806793-00 作成担当 : FSI冨樫 紗由里
// 修 正 日  2013/02/27  修正内容 : システムテスト障害No206対応
//                                   1.伝票表示タブ・明細表示タブで選択された返品予定データの
//                                     備考1、備考2を返品計上タブに引継ぎ表示する
//                                   2.複数明細選択されたときは、返品明細1行目の備考を表示する
//----------------------------------------------------------------------------//
// 管理番号  10901273-00 作成担当 : gezh
// 修 正 日  2013/04/16  修正内容 : 2013/05/15配信分 Redmine#35309
//                                  №1871_仕入先電子元帳のテキスト出力の障害対応
//----------------------------------------------------------------------------//
// 管理番号  10902175-00    作成担当 : liusy
// 修 正 日  2013/06/12     修正内容 : Redmine#35640 
//                                     仕入先電子元帳 テキスト出力 消費税が出力されないの修正(#18の件)
//----------------------------------------------------------------------------//
// 管理番号  10801804-00    作成担当 : 譚洪
// 修 正 日  2013/09/04     修正内容 : Redmine#40258 
//                                     仕入先電子元帳 明細行のフィルターが保持されない
//----------------------------------------------------------------------------//
// 管理番号  11070091-00    作成担当 : zhujw
// 作 成 日  2014/06/11     修正内容 : RedMine#42650 Windows8.1動作検証結果_得意先電子元帳から起動した他機能が前面表示される 修正
//----------------------------------------------------------------------------//
// 管理番号  11070091-00 作成担当 : 宮本 利明
// 作 成 日  2014/08/08  修正内容 : Windows8.1対応での障害対応
//                                  検索後に拠点コードがゼロカットされる障害を修正
//----------------------------------------------------------------------------//
// 管理番号  11070149-00    作成担当 : 時シン
// 修 正 日  2014/10/29     修正内容 : 仕掛一覧№2556 Redmine#43871 
//                                     仕入伝票入力にて合計で登録した場合に仕入先電子元帳でチェックを付ける時エラーの対応
//----------------------------------------------------------------------------//
// 管理番号  11170170-00    作成担当 : 田建委
// 修 正 日  2015/09/17     修正内容 : Redmine#47006 仕入先電子元帳の障害対応
//                                     テキスト出力の時、返品金額などをマイナスで出力する対応
//----------------------------------------------------------------------------//
// 管理番号  11570163-00    作成担当 : 陳艶丹
// 修 正 日  2019/08/19     修正内容 : PMKOBETSU-1379 テキスト出力操作ログおよび出力時アラートメッセージ追加対応
//----------------------------------------------------------------------------//
// 管理番号  11570208-00    作成担当 : 時シン
// 修 正 日  2020/03/11     修正内容 : PMKOBETSU-2912 軽減税率対応
//----------------------------------------------------------------------------//
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Collections;
using System.Reflection;

using Broadleaf.Library.Windows.Forms;
using Broadleaf.Library.Resources;      // ConstantManagementの使用に必要(SFCMN00006C)
using Broadleaf.Library.Collections;
using Broadleaf.Windows.Forms;
using Broadleaf.Application.Common;
using Broadleaf.Application.Resources;
using Broadleaf.Application.Remoting;
using Broadleaf.Application.Remoting.ParamData;
using Broadleaf.Application.Remoting.Adapter;
using Broadleaf.Application.Controller;
using Broadleaf.Application.UIData;

using Infragistics.Win;
using Broadleaf.Application.Controller.Facade;
using Infragistics.Excel;
using Infragistics.Win.UltraWinGrid;  // ADD 2013/01/21 [仕入返品計上] 

namespace Broadleaf.Windows.Forms
{
    /// <summary>
    /// 仕入先電子元帳 フォームクラス
    /// </summary>
    /// <remarks>
    /// <br>Note       : 仕入先電子元帳のフォームクラスです。</br>
    /// <br>Programmer : 30418 徳永 俊詞</br>
    /// <br>Date       : 2008.09.02</br>
    /// <br></br>
    /// <br>UpdateNote : 22018 鈴木 正臣</br>
    /// <br>           　全体的に修正。</br>
    /// <br>UpdateNote : 30414 忍 幸史</br>
    /// <br>           　障害ID:7882対応　入力日のチェック方法を変更</br>
    /// <br>UpdateNote : 2009/05/11 30452 上野 俊治</br>
    /// <br>           　障害ID:13265対応</br>
    /// <br>UpdateNote : 2010/01/14 30434 工藤 恵優</br>
    /// <br>           　障害ID:14664対応 列サイズの自動調整の初期設定を修正</br>
    /// <br>UpdateNote : 2010/01/27 30434 工藤 恵優</br>
    /// <br>           　障害ID:14545対応 得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み</br>
    /// <br>UpdateNote : 2010/07/20 chenyd</br>
    /// <br>           　テキスト出力対応</br>
    /// <br>UpdateNote : 2010/09/21 曹文傑</br>
    /// <br>            ・redmine#14876</br>
    /// <br>UpdateNote : 2011/11/24 葛中華</br>
    /// <br>             redmine#8078　仕入先電子元帳/標準価格の並び順はおかしい</br>
    /// <br>UpdateNote : 2012/06/26 20008 伊藤 豊</br>
    /// <br>             電話問合対応No.1027 件数オーバー時にメッセージを表示</br>
    /// <br>UpdateNote : 2012/09/19 鄧潘ハン</br>
    /// <br>管理番号   : 10801804-00 2012/10/17配信分</br>
    /// <br>             redmine #32371:仕入先電子元帳も、各種ボタンを得意先電子元帳同様にファンクションの対応</br>
    /// <br>UpdateNote : 2012/10/12 鄧潘ハン</br>
    /// <br>管理番号   : 10801804-00 2012/10/17配信分</br>
    /// <br>             redmine #32371:検索ボタンとクリアボタンの位置も得意先電子元帳同様の対応</br>
    /// <br>Update Note: 2012/10/15 田建委</br>
    /// <br>管理番号   : 10801804-00、2012/11/14配信分</br>
    /// <br>             Redmine#32862 価格変更した明細、色を変えるように修正</br>
    /// <br>Update Note: 2012/10/30 田建委</br>
    /// <br>管理番号   : 10801804-00、2012/11/14配信分</br>
    /// <br>             Redmine#32862#20 仕入データに入力区分「合計」で作成して、それを検索対象にした場合、システムエラーとなる修正</br>
    /// <br>Update Note: 2013/01/11 田建委</br>
    /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
    /// <br>             Redmine#33833 初期起動時の伝票区分のデフォルト値を「仕入／仕入返品」にするように修正</br>
    /// <br>Update Note: 2013/04/16 gezh</br>
    /// <br>管理番号   : 10901273-00 2013/05/15配信分</br>
    /// <br>             Redmine#35309 №1871_仕入先電子元帳のテキスト出力の障害対応</br>
    /// <br>Update Note: 2013/06/12 liusy</br>
    /// <br>管理番号   : 10902175-00 2013/06/18配信分</br>
    /// <br>             Redmine#35640 仕入先電子元帳 テキスト出力 消費税が出力されないの修正(#18の件)</br>
    /// <br>Update Note: 2015/09/17 田建委</br>
    /// <br>管理番号   : 11170170-00</br>
    /// <br>           : Redmine#47006 テキスト出力の時、返品金額などをマイナスで出力する対応</br>
    /// <br>Update Note: 2019/08/19 陳艶丹</br>
    /// <br>管理番号   : 11570163-00</br>
    /// <br>           : PMKOBETSU-1379 テキスト出力操作ログおよび出力時アラートメッセージ追加対応</br>
    /// <br>Update Note: 2020/03/11 時シン</br>
    /// <br>管理番号   : 11570208-00</br>
    /// <br>           : PMKOBETSU-2912 軽減税率対応</br>
    /// <br>           : 伝票タブ、明細タブに「消費税率」項目を追加</br>
    /// </remarks>
    public partial class PMKOU04001UA : Form
    {

        #region プライベート変数

        // **** アプリケーション共通変数 ****
        private string _enterpriseCode = string.Empty;	    	// 企業コード
        private string _invokerPgId = string.Empty;             // 呼び出し元プログラムID

        // **** ログインユーザーデータ保存 ****
        private string _loginSectionCode = string.Empty;		// 自拠点コード
        //private string _loginSectionGuideNm = "";				// 自拠点名称

        private string _loginUserCd = string.Empty;             // ログインユーザー
        private string _loginUserName = string.Empty;           // ログインユーザー名

        // 2010/04/05 Add >>>
        /// <summary>テキスト出力オプション情報</summary>
        private int _opt_TextOutput;
        // 2010/04/05 Add <<<
        // --- ADD 2012/09/13 ---------->>>>>
        // 仕入総括オプションフラグ
        private int _opt_SupplierSummary;
        // --- ADD 2012/09/13 ----------<<<<<

        // **** 表示用 ****
        //private int _characterSize = 11;						// 文字サイズ
        //private int _defaultOpenTabNo = 1;						// 初期表示タブ（明細表示）
        //private int _currentTabNo = 1;							// 現在の表示タブ

        /// <summary>伝票表示タブ 列サイズ自動調整値</summary>
        private bool _columnWidthAutoAdjust_Slip = false;
        /// <summary>明細表示タブ 列サイズ自動調整値</summary>
        private bool _columnWidthAutoAdjust_Detail = false;
        /// <summary>残高一覧表示タブ 列サイズ自動調整値</summary>
        private bool _columnWidthAutoAdjust_Balance = true;
        /// <summary>残高一覧表示タブ 列サイズ自動調整値</summary>
        private bool _columnWidthAutoAdjust_RedSlip = true;  // ADD 2013/01/21 [仕入返品計上]

        //private long _detailRowCount = 0;						// 明細結果行数
        //private long _balanceRowCount = 0;						// 残高一覧行数
        // ----------UPD 2013/01/21 [仕入返品計上]----------->>>>>
        /// <summary>伝票一覧グリッド選択行数</summary>
        private int _selectedRowCountSlip = 0;
        /// <summary>明細グリッド選択行数</summary>
        private int _selectedRowCountDetail = 0;
        /// <summary>明細グリッド選択仕入先コード</summary>
        private int _selectedSupplierCd = 0;
        /// <summary>明細グリッド選択拠点コード</summary>
        private string _selectedSectionCd = string.Empty;
        /// <summary>明細グリッド選択伝票区分コード</summary>
        private int _selectedSupplierSlipCd = 0;
        /// <summary>返品理由コード</summary>
        private int _retGoodsReasonDiv = 0;
        /// <summary>保存返品理由ガイド選択した値</summary>
        private string _retGoodsReason = string.Empty;
        /// <summary>処理区分コンボボックス変更後の値</summary>
        private int _retGdsPlnFlagValueChanged = 0;
        /// <summary>検索時の処理区分の値</summary>
        private int _searchedStockRetGdsPln = 0;
        //抽出条件に変更があったかどうかの判断用(前回検索時と今回検索直前の値を比較)
        /// <summary>処理区分(今回検索前)</summary>
        private int _stockRetGdsPlnFlag = 0;
        /// <summary>処理区分(前回検索時)</summary>
        private int _stockRetGdsPlnFlagBackup = 0;

        /// <summary>返品計上ボタン表示フラグ</summary>
        private bool _redSlipBottonFlag = false;

        // *** 返品計上タブ内で使用
        /// <summary>返品伝票合計金額(手数料算出用)</summary>
        private long _redSlipTotalPrice;
        /// <summary>返品手数料率(前回入力値)</summary>
        private double _feePercent01;
        /// <summary>返品手数料額(前回入力値)</summary>
        private long _feeAmount01;

        /// <summary>返品計上グリッド前回セル</summary>
        private Infragistics.Win.UltraWinGrid.UltraGridCell _prevCellInRedSlip = null;
        /// <summary>返品計上グリッド前回入力倉庫コード</summary>
        private string _prevWarehouseCodeOfRedSlip = string.Empty;
        /// <summary>返品計上グリッド前回入力返品数</summary>
        private double _prevReturnCntOfRedSlip;

        /// <summary>返品計上グリッド倉庫未取得エラーフラグ</summary>
        private bool _cannotWarehouseCodeOfRedSlipRead = false;
        /// <summary>返品計上グリッド返品数入力エラーフラグ</summary>
        private bool _cannotReturnCntOfRedSlipInput = false;
        /// <summary>返品計上グリッド返品伝票番号入力エラーフラグ</summary>
        private bool _cannotRetGdsSlipNum = false;

        /// <summary>返品グリッド明細行金額の保存</summary>
        private Dictionary<int, long> redMoney = new Dictionary<int, long>();
        // ----------UPD 2013/01/21 [仕入返品計上]-----------<<<<<

        // **** アクセスクラス ****
        /// <summary>PMKHN04005UA)得意先ガイドフォーム</summary>
        //private PMKHN04005UA _customerGuideForm;
        /// <summary>PMKHN09012A)得意先</summary>
        private CustomerInfoAcs _customerInfoAcs;
        /// <summary>SFKTN09002A)拠点</summary>
        private SecInfoSetAcs _secInfoSetAcs;

        /// <summary>SFTOK09382A)従業員</summary>
        private EmployeeAcs _employeeAcs;
        /// <summary>MAKHN09112A)メーカー</summary>
        private MakerAcs _makerAcs;
        /// <summary>MAKHN04112A)BLコード・品番検索</summary>
        private GoodsAcs _goodsAcs;
        /// <summary>DCKHN09092A)BLコード</summary>
        private BLGoodsCdAcs _blGoodsCdAcs;
        /// <summary>PMKHN09062A)BLグループ</summary>
        private BLGroupUAcs _blGroupUAcs;
        /// <summary>SFCMN09062A)ユーザーガイド</summary>
        private UserGuideAcs _userGuideAcs;
        /// <summary>MAKHN09332A)倉庫</summary>
        private WarehouseAcs _warehouseAcs;
        /// <summary>PMKHN09022A)仕入先</summary>
        private SupplierAcs _supplierAcs;
        /// <summary>DCKHN09212A)売上全体設定</summary>
        private SalesTtlStAcs _salesTtlStAcs;
        /// <summary>SFTOK9402)備考設定</summary>
        private NoteGuidAcs _noteGuidAcs;// ADD 2013/01/21 [返品計上]

        //private IIOWriteControlDB _iIOWriteControlDB;

        // **** 仕入先電子元帳プロジェクトクラス ****
        /// <summary>PMKOU04003A)仕入先電子元帳+残高一覧</summary>
        private SuppPrtSlipSearchAcs _suppPtrSearchAcs;
        /// <summary>PMKOU04003AB)仕入先電子元帳</summary>
        private SuppPtrStockDetailAcs _suppPtrStcDetailAcs;// ADD 2013/01/21 [仕入返品計上]
        //private CustPtrSalesDetailRedSlipAcs _custPtrRedSlipAcs;
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>PMKAU04004UA)設定フォーム</summary>
        private PMKOU04004UA _settingForm;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        // **** 抽出条件クラス ****
        /// <summary>検索条件クラス 残高・伝票・明細(PMKOU04002EA)</summary>
        private SuppPrtPpr _suppPrtPpr = null;
        /// <summary>検索条件クラス 残高一覧(PMKOU04002EB)</summary>
        private SuppPrtPprBlnce _suppPrtPprBlnce = null;
        /// <summary>残高一覧タブをセレクトできるか（仕入先または支払先が入力されるまではFalse)</summary>
        private bool _remainTabSelectable = false;

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        //抽出条件に変更があったかどうかの判断用(前回検索時と今回検索直前の値を比較)
        /// <summary>前回検索時抽出条件クラス 残高・伝票・明細(PMKAU04002EA)</summary>
        private SuppPrtPpr _custPrtPprBackUp = null;
        /// <summary>前回検索時抽出条件クラス 残高一覧(PMKAU04002EB)</summary>
        private SuppPrtPprBlnce _custPrtPprBlnceBackUp = null;
        private string _rl_RemainTypeBackup = string.Empty;
        private int _logicalDelDivBackUp = -1;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        // **** 明細データ格納データセットオブジェクト **** 
        /// <summary>明細データ格納データセット</summary>
        private SuppPtrStcDetailDataSet _detailDataSet;

        // **** 締め日関連 ****
        /// <summary>締め日取得用クラス</summary>
        TotalDayCalculator _tCalcAcs = null;
        /// <summary>今回締処理日</summary>
        private DateTime _currentTotalDay;
        /// <summary>今回締処理月</summary>
        private DateTime _currentTotalMonth;
        /// <summary>前回締処理日</summary>
        private DateTime _prevTotalDay;
        /// <summary>前回締処理月</summary>
        private DateTime _prevTotalMonth;
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>日付取得部品</summary>
        private DateGetAcs _dateGetAcs;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
        
        // **** 画面設定用 ****

        // **** 文字サイズ ****
        /// <summary>文字サイズ</summary>
        private readonly int[] _fontpitchSize = new int[] { 6, 8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24 };

        // **** タブコントロール用 ****
        /// <summary>選択されたメインタブのキー</summary>
        private string _selectedMainTabKey = string.Empty;
        /// <summary>選択された残高一覧のタブキー</summary>
        private string _selectedRemainTabKey = string.Empty;

        // **** ボタン用イメージリスト ****
        private ImageList _imageList16 = null;                  // イメージリスト

        // **** スキン設定用クラス ****
        private ControlScreenSkin _controlScreenSkin;

        // **** 抽出条件機能（スライダー）でのみ使用 ****
        //int _conditionCount_Numeric = 0;						// 数値項目表示数
        //int _conditionCount_Combo = 0;							// コンボボックス表示数
        //int _conditionCount_String = 0;							// 文字列項目表示数
        //int _conditionCount_String_Guide = 0;                   // ガイドボタン付き文字列項目

        /// <summary>現在のコントロール位置X (スライダー)</summary>
        int _currentLocationX = 0;
        /// <summary>現在のコントロール位置Y (スライダー)</summary>
        int _currentLocationY = 0;

        //// **** 赤伝発行タブ内でのみ使用 ****
        //bool _editableSupplierSlipNo = true;					// 仕入伝票番号欄の編集制御
        //bool _editableWarehouseCode = true;						// 倉庫コード欄の編集制御
        //bool _editablePartySalesSlipCd = true;                  // 得意先注番の編集制御（表示制御）売上全体設定に準じる
        //bool _editableSlipNote2 = true;                         // 備考２の編集制御（売上全体設定より取得
        //bool _editableSlipNote3 = true;                         // 備考３の編集制御（売上全体設定より取得
        //bool _editableFeeFields = true;                         // 手数料欄の編集制御

        // **** テキスト出力用 ****
        private string _txtexp_FileName = string.Empty;         // 出力ファイル名
        private SuppPtrStcUserConst _userSetting;             // 出力設定XMLからの取得設定
        private string[] _patternSetting;                       // 設定値
        private List<String> _exportColumnNameList;             // 出力カラム名

        // **** あいまい検索を行う項目用 ****
        /// <summary>伝票番号</summary>
        private string _srPartySalesSlipNum = string.Empty;
        /// <summary>伝票番号(*抜き文字列)</summary>
        private string _srRvPartySalesSlipNum = string.Empty;
        /// <summary>備考１</summary>
        private string _srSupplierSlipNote1 = string.Empty;
        /// <summary>備考１(*抜き文字列)</summary>
        private string _srRvSupplierSlipNote1 = string.Empty;
        /// <summary>備考２</summary>
        private string _srSupplierSlipNote2 = string.Empty;
        /// <summary>備考２(*抜き文字列)</summary>
        private string _srRvSupplierSlipNote2 = string.Empty;
        /// <summary>UOEリマーク1</summary>
        private string _srUOERemark1 = string.Empty;
        /// <summary>UOEリマーク1(*抜き文字列)</summary>
        private string _srRvUOERemark1 = string.Empty;
        /// <summary>UOEリマーク2</summary>
        private string _srUOERemark2 = string.Empty;
        /// <summary>UOEリマーク2(*抜き文字列)</summary>
        private string _srRvUOERemark2 = string.Empty;
        /// <summary>品名</summary>
        private string _srGoodsName = string.Empty;
        /// <summary>品名(*抜き文字列)</summary>
        private string _srRvGoodsName = string.Empty;
        /// <summary>品番</summary>
        private string _srGoodsNo = string.Empty;
        /// <summary>品番(*抜き文字列)</summary>
        private string _srRvGoodsNo = string.Empty;

        // **** コード←→名称を切り替える項目用 ****
        /// <summary>担当者コード</summary>
        private string _swStockAgentCode = string.Empty;
        /// <summary>担当者名</summary>
        private string _swStockAgentName = string.Empty;
        /// <summary>発行者コード</summary>
        private string _swStockInputCode = string.Empty;
        /// <summary>発行者名</summary>
        private string _swStockInputName = string.Empty;
        /// <summary>BLグループコード</summary>
        private int _swBLGroupCode = 0;
        /// <summary>BLグループ名</summary>
        private string _swBLGroupName = string.Empty;
        /// <summary>BLコード</summary>
        private int _swBLGoodsCode = 0;
        /// <summary>BLコード名</summary>
        private string _swBLGoodsName = string.Empty;
        /// <summary>メーカーコード</summary>
        private int _swGoodsMakerCd = 0;
        /// <summary>メーカー名</summary>
        private string _swGoodsMakerName = string.Empty;
        /// <summary>倉庫コード</summary>
        private string _swWarehouseCd = string.Empty;
        /// <summary>倉庫名</summary>
        private string _swWarehouseName = string.Empty;

        /// <summary>削除指定区分</summary>
        private int _logicalDelDiv = 0;

        private bool isError = false; // ADD 2010/09/26

        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
        /// <summary>売上全体設定</summary>
        private SalesTtlSt _salesTtlSt;
        /// <summary>マウスで赤伝タブに移動した、エラーの場合、フォーカス設定用</summary>
        private Control _control = null;
        /// <summary>伝票表示タブから明細表示タブ・返品計上タブへデータ引継ぎする際に使用</summary>
        private bool tabFlg = true;
        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

        // ADD 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ---------->>>>>
        /// <summary>中断ダイアログ</summary>
        private SFCMN00299CA _processingDialog;
        // ADD 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ----------<<<<<

        // **** コントロール ****
        private Control _prevControl;
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        // グリッドからの戻り先コントロール(詳細条件の中のControl)
        private Control _gridUpKeyBackControl;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        // **** グリッド表示用 ****
        // 結合セルの表示設定
        private Infragistics.Win.Appearance _margedCellAppearance;
        // 伝票グリッドカラム制御
        private GridColPosFixController _slipGridColPosCtrl;
        // 明細グリッドカラム制御
        private GridColPosFixController _detailGridColPosCtrl;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>前回入力値</summary>
        private PrevInputValue _prevInputValue;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 ADD
        /// <summary>グリッドカラムチューザ制御</summary>
        private GridColumnChooserControl _gridColumnChooserControl;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 ADD
        private IOperationAuthority _operationAuthority;    // 操作権限の制御オブジェクト// ADD 2010/07/20
        private Dictionary<OperationCode, bool> _operationAuthorityList;  // 操作権限の制御リスト // ADD 2010/07/20

        private PMKOU04001UC prtSetForm = null;           // 出力条件設定画面 // ADD 2010/10/09

        private bool _searchFlg = false;  // ADD 2013/01/21 [仕入返品計上]

        private TextOutPutOprtnHisLogAcs TextOutPutOprtnHisLogAcsObj = null; // ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応

        // 2010/04/05 Add >>>
        #region 列挙体
        /// <summary>
        /// オプション有効有無
        /// </summary>
        public enum Option : int
        {
            /// <summary>無効</summary>
            OFF = 0,
            /// <summary>有効</summary>
            ON = 1,
        }
        // ---------------------- ADD 2010/07/20 --------------------------------->>>>>
        /// <summary>
        /// オペレーションコード
        /// </summary>
        public enum OperationCode : int
        {
            /// <summary>テキスト出力</summary>
            TextOut = 1,
            /// <summary>エクセル出力</summary>
            ExcelOut = 2
        }
        // ---------------------- ADD 2010/07/20 ---------------------------------<<<<<
        #endregion // 列挙体

        /// <summary>
        /// テキスト出力オプション情報
        /// </summary>
        public int Opt_TextOutput
        {
            get { return this._opt_TextOutput; }
            set { this._opt_TextOutput = value; }
        }

        // 2010/04/05 Add <<<

        #endregion // プライベート変数

        #region プライベート定数

        /// <summary>あいまい検索「と一致」ステータス</summary>
        private const int CT_FUZZY_MATCHWITH = 0;
        /// <summary>あいまい検索「で始る」ステータス</summary>
        private const int CT_FUZZY_STARTWITH = 1;
        /// <summary>あいまい検索「を含む」ステータス</summary>
        private const int CT_FUZZY_INCLUDEWITH = 2;
        /// <summary>あいまい検索「で終る」ステータス</summary>
        private const int CT_FUZZY_ENDWITH = 3;

        /// <summary>仕入先電子元帳PGID</summary>
        private const string CT_SUPPLIER_ERECNOTE_PGID = "PMKOU04001U";
        /// <summary>得意先電子元帳PGID</summary>
        private const string CT_CUSTOMER_ERECNOTE_PGID = "PMKAU04001U";
        /// <summary>得意先電子元帳フォームID</summary>
        private const string CT_CUSTOMER_ERECNOTE_FORMID = "PMKAU04001UA";
        /// <summary>呼出アセンブリクラスルート</summary>
        private const string CT_COMMON_CLASS_NAME = "Broadleaf.Windows.Forms.";
        /// <summary>表示列数</summary>
        private const int CT_INITIAL_ROW_COUNT = 3;
        /// <summary>初期表示位置 左上X</summary>
        private const int CT_INITIAL_FIELD_POSITION_X = 13;
        /// <summary>初期表示位置 左上Y</summary>
        private const int CT_INITIAL_FIELD_POSITION_Y = 3;
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
        ///// <summary>表示間隔 余白</summary>
        //private const int CT_FIELD_INTERVAL_X = 10;
        ///// <summary>表示間隔：ラベル</summary>
        //private const int CT_INTERVAL_LABEL = 106;
        ///// <summary>表示間隔：コンボボックス</summary>
        //private const int CT_INTERVAL_COMBOBOX = 200;
        ///// <summary>表示間隔：入力域(tNedit/tEdit)(付属コントロールなし)</summary>
        //private const int CT_INTERVAL_EDIT = 200;
        ///// <summary>表示間隔：入力域(tNedit/tEdit)(ボタンあり)</summary>
        //private const int CT_INTERVAL_EDIT_WITHBUTTON = 166;
        ///// <summary>表示間隔：入力域(tNedit/tEdit)(あいまい検索あり)</summary>
        //private const int CT_INTERVAL_EDIT_WITHCOMBO = 106;
        ///// <summary>表示間隔：入力域(tNedit/tEdit)(あいまい検索/ボタンあり)備考専用</summary>
        //private const int CT_INTERVAL_EDIT_WITHCOMBOBUTTON = 72;
        ///// <summary>表示間隔：ボタン</summary>
        //private const int CT_INTERVAL_BUTTON = 34;
        ///// <summary>表示間隔：あいまい検索用コンボボックス</summary>
        //private const int CT_INTERVAL_FUZZYCOMBO = 94;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>表示間隔 余白</summary>
        private const int CT_FIELD_INTERVAL_X = 10;
        /// <summary>表示間隔：ラベル</summary>
        private const int CT_INTERVAL_LABEL = 115;//106;
        /// <summary>表示間隔：コンボボックス</summary>
        private const int CT_INTERVAL_COMBOBOX = 200;
        /// <summary>表示間隔：入力域(tNedit/tEdit)(付属コントロールなし)</summary>
        private const int CT_INTERVAL_EDIT = 200;
        /// <summary>表示間隔：入力域(tNedit/tEdit)(ボタンあり)</summary>
        private const int CT_INTERVAL_EDIT_WITHBUTTON = 175;
        /// <summary>表示間隔：入力域(tNedit/tEdit)(あいまい検索あり)</summary>
        private const int CT_INTERVAL_EDIT_WITHCOMBO = 124;
        /// <summary>表示間隔：ボタン</summary>
        private const int CT_INTERVAL_BUTTON = 25;
        /// <summary>表示間隔：あいまい検索用コンボボックス</summary>
        private const int CT_INTERVAL_FUZZYCOMBO = 76;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
        /// <summary>表示間隔：行</summary>
        private const int CT_INTERVAL_HEIGHT = 26;
        /// <summary>表示：初期フォントサイズ</summary>
        private const int CT_DEF_FONT_SIZE = 11;

        /// <summary>備考ガイド区分コード１</summary>
        private static readonly int CT_DIVCODE_NoteGuideDivCd_1 = 103;//伝票備考１
        /// <summary>備考ガイド区分コード２</summary>
        private static readonly int CT_DIVCODE_NoteGuideDivCd_2 = 104;//伝票備考２

        //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 ----->>>>>
        // 最初から
        private const string StartStr = "最初から";
        // 最後まで
        private const string EndStr = "最後まで";
        // アセンブリ名
        private const string AssemblyNm = "仕入先電子元帳";
        // メソッド名
        private const string MethodNm = "exportIntoTextFile";
        private const string MethodNm2 = "outputTextData";
        private const string MethodNm3 = "outputExcelData";
        private const string MethodNm4 = "exportIntoExcelData";
        // 画面条件
        private const string MenuCon = "ファイル名:{0},出力パターン選択:{1}";
        // 元帳残高一覧テキスト出力条件
        private const string BalanceCon = "残高種別:{0},拠点:{1} ～ {2},仕入先:{3} ～ {4},対象年月:{5} ～ {6},出力ファイル名:{7}";

        private const string Conditions = "拠点:{0},処理区分:{1},仕入先:{2},仕入日:{3} ～ {4},入力日:{5} ～ {6}";
        // Excel出力条件
        private const string ExcelCon = "ファイル名:{0}";
        // コンマ
        private const string Comma = ",";
        // 出力件数
        private const string CountNumStr = "データ出力件数:{0},";
        //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 -----<<<<<

        #endregion // プライベート定数

        #region メッセージ定数

        /// <summary>検索時メッセージ「仕入データの取得に失敗しました。」</summary>
        private const string MSG_FAILED2GET_SLIP_DATA = "仕入データの取得に失敗しました。";

        /// <summary>検索時メッセージ「残高データの取得に失敗しました。」</summary>
        private const string MSG_FAILED2GET_BALANCE_DATA = "残高データの取得に失敗しました。";

        /// <summary>検索時メッセージ「条件に合致するデータが存在しません。」</summary>
        private const string MSG_MATCHED_DATA_NOT_FOUND = "条件に合致するデータが存在しません。";

        /// <summary>検索時メッセージ「指定された仕入先は存在しません。」</summary>
        private const string MSG_SUPPLIER_NOT_FOUND = "指定された仕入先は存在しません。";

        /// <summary>検索時メッセージ「指定された支払先は存在しません。」</summary>
        private const string MSG_PAYEE_NOT_FOUND = "指定された支払先は存在しません。";

        /// <summary>検索時メッセージ「指定された仕入先の締め日が取得できません。」</summary>
        private const string MSG_TOTAL_DAY_NOT_FOUND_SUPPLIER = "指定された仕入先の締め日が取得できません。";

        /// <summary>検索時メッセージ「指定された支払先の締め日が取得できません。」</summary>
        private const string MSG_TOTAL_DAY_NOT_FOUND_PAYEE = "指定された支払先の締め日が取得できません。";

        /// <summary>チェック時メッセージ「……は入力必須項目です。」</summary>
        private const string MSG_ITEM_MUST_BE_INPUT = " は入力必須項目です。";

        /// <summary>チェック時メッセージ「……は入力することをお勧めします。」</summary>
        private const string MSG_ITEM_SHOULD_BE_INPUT = " は入力することをお勧めします。";

        /// <summary>チェック時メッセージ「開始日を終了日よりも後にすることはできません。」</summary>
        private const string MSG_MUST_BE_CORRECT_CALENDER = "開始日を終了日よりも後にすることはできません。";

        /// <summary>チェック時メッセージ「一年以上の期間を指定することはできません。」</summary>
        private const string MSG_MUST_BE_IN_A_YEAR = "一年以上の期間を指定することはできません。";

        /// <summary>確認メッセージ「処理を続行しますか？」</summary>
        private const string MSG_SHALL_WE_CONTINUE = "処理を続行しますか？";

        /// <summary>チェック時メッセージ「赤伝発行では同一拠点かつ同一得意先の明細以外は同時に選択できません。」</summary>
        private const string MSG_RS_CANNOT_SELECT_NOT_SAME_TARGET = "赤伝発行では同一拠点かつ同一得意先の明細以外は同時に選択できません。";

        /// <summary>チェック時メッセージ「仕入月次締日取得の初期処理でエラーが発生しました。」</summary>
        private const string MSG_TOTALDAY_INITIALIE_FAILED = "仕入月次締日取得の初期処理でエラーが発生しました。";

        /// <summary>確認時メッセージ「表示内容をテキスト出力します。よろしいですか？」</summary>
        private const string MSG_CONFIRM_OUTPUTFILE = "表示内容をテキスト出力します。\r\nよろしいですか？";

        /// <summary>チェック時メッセージ「出力ファイル名が指定されていません。設定ボタンから設定を行ってください。」</summary>
        private const string MSG_OUTPUTFILENAME_NOTFOUND = "出力ファイル名が指定されていません。設定ボタンから設定を行ってください。";

        /// <summary>チェック時メッセージ「ファイルへの出力に失敗しました。」</summary>
        private const string MSG_OUTPUTFILE_FAILED = "ファイルへの出力に失敗しました。";

        /// <summary>テキストエクスポート成功時メッセージ「 行のデータをファイルへ出力しました。」</summary>
        private const string MSG_OUTPUTFILE_SUCCEEDED = "行のデータをファイルへ出力しました。";

        /// <summary>チェック時メッセージ「出力ファイル名が指定されていません。」</summary>
        private const string MSG_OUTPUTEXCEL_NOFILENAME = "出力ファイル名が指定されていません。";

        /// <summary>EXCELエクスポート成功時メッセージ「EXCELデータを出力しました。」</summary>
        private const string MSG_OUTPUTEXCEL_SUCCEEDED = "EXCELデータを出力しました。";

        /// <summary>検索時メッセージ「指定された文字列が存在する行はありません。」</summary>
        private const string MSG_ROWSEARCH_NOT_FOUND = "指定された文字列が存在する行はありません。";

        /// <summary>印刷時メッセージ「印刷対象となる明細が存在しません。」</summary>
        private const string MSG_NO_SELECTED_DATA = "印刷対象となる明細が存在しません。";

        // 2008.11.27 add start [8261]
        /// <summary>チェック時メッセージ「欄に入力された日付が不正です。」</summary>
        private const string MSG_SHOULD_NOT_DATE = "欄に入力された日付が不正です。";
        // 2008.11.27 add start [8261]

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>チェック時メッセージ「開始仕入日が不正です」</summary>
        private const string MSG_ST_STOCKDATE_ERROR = "開始仕入日が不正です。";
        /// <summary>チェック時メッセージ「終了仕入日が不正です」</summary>
        private const string MSG_ED_STOCKDATE_ERROR = "終了仕入日が不正です。";
        /// <summary>チェック時メッセージ「仕入日は３ヶ月の範囲内で入力して下さい。」</summary>
        private const string MSG_STOCKDATE_RANGE_ERROR = "仕入日は３ヶ月の範囲内で入力して下さい。";
        /// <summary>チェック時メッセージ「開始入力日が不正です」</summary>
        private const string MSG_ST_INPUTDATE_ERROR = "開始入力日が不正です。";
        /// <summary>チェック時メッセージ「終了入力日が不正です」</summary>
        private const string MSG_ED_INPUTDATE_ERROR = "終了入力日が不正です。";

        /// <summary>チェック時メッセージ「開始年月が不正です」</summary>
        private const string MSG_ST_YM_ERROR = "開始年月が不正です。";
        /// <summary>チェック時メッセージ「終了年月が不正です」</summary>
        private const string MSG_ED_YM_ERROR = "終了年月が不正です。";
        /// <summary>赤伝発行時確認メッセージ「赤伝発行してよろしいですか？」</summary>
        //private const string MSG_CONFIRM_REDSLIP = "赤伝発行してよろしいですか？"; // DEL 2013/01/21 [返品計上]
        /// <summary>クリア確認メッセージ「表示内容を初期化してよろしいですか？」</summary>
        private const string MSG_CONFIRM_CLEARINPUT = "表示内容を初期化してよろしいですか？";
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
        /// <summary>返品計上確認メッセージ「返品計上してよろしいですか？」</summary>
        private const string MSG_CONFIRM_REDSLIP = "返品計上してよろしいですか？";
        /// <summary>伝票削除確認メッセージ「選択中の仕入伝票を削除します。よろしいですか？」</summary>
        private const string MSG_CONFIRM_SLIPDELETE = "選択中の仕入伝票を削除します。\r\nよろしいですか？";
        /// <summary>対象伝票チェックエラーメッセージ「削除対象伝票が選択されていません。」</summary>
        private const string MSG_SLIPDELETE_NOT_SELECTED = "削除対象伝票が選択されていません。";
        /// <summary>対象伝票チェックエラーメッセージ「仕入返品以外の伝票は削除できません。」</summary>
        private const string MSG_SLIPDELETE_NOT_STOCK_RET_GOODS_PLAN = "仕入返品予定以外の伝票は削除できません。";

        /// <summary>チェック時メッセージ「返品計上対象となる明細が存在しません。」</summary>
        private const string MSG_RS_NO_SELECTED_DATA = "返品計上対象となる明細が存在しません。";
        /// <summary>チェック時メッセージ「返品日付が前回仕入締処理日以前となっている為、発行できません。」</summary>
        private const string MSG_RS_SALESDATE_DMDSUP_ERROR = "返品日付が前回仕入締処理日以前となっている為、発行できません。";
        /// <summary>チェック時メッセージ「返品日付が前回仕入月次更新日以前になっている為、発行できません。」</summary>
        private const string MSG_RS_SALESDATE_MONTHLYSUP_ERROR = "返品日付が前回仕入月次処理日以前になっている為、発行できません。";
        /// <summary>チェック時メッセージ「返品伝票番号と倉庫コードのどちらかしか入力できません。」</summary>
        private const string MSG_RS_RETGDS_WAREHOUSE_ERROR = "返品伝票番号と倉庫コードのどちらかしか入力できません。";
        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

        #endregion // メッセージ定数

        #region ガイド用定数

        /// <summary>備考ガイド区分コード１</summary>
        public static readonly int CT_DIVCODE_NOTEGUIDEDIVCD_1 = 101;   //伝票備考１
        /// <summary>備考ガイド区分コード２</summary>
        public static readonly int CT_DIVCODE_NOTEGUIDEDIVCD_2 = 102;   //伝票備考２

        /// <summary>ユーザーガイド区分コード（返品理由）</summary>
        public static readonly int CT_DIVCODE_USERGUIDEDIVCD_RETGOODSREASON = 91;
        /// <summary>ユーザーガイド区分コード（納品区分）</summary>
        public static readonly int CT_DIVCODE_USERGUIDEDIVCD_DELIVEREDGOODSDIV = 48;

        #endregion // ガイド用定数

        #region 各種設定値

        #region 検索数上限値

        /// <summary>検索数上限値 [20000]</summary>
        private const int CT_LIMIT_ROW = 20000;

        #endregion // 検索数上限値

        #region 仕入区分名表示文字列

        /// <summary>仕入区分名表示文字列 [全て]</summary>
        private const string CT_SUPPLIERSLIPCD_NAME_00 = "全て";

        /// <summary>仕入区分名表示文字列 [仕入]</summary>
        private const string CT_SUPPLIERSLIPCD_NAME_01 = "仕入";

        /// <summary>仕入区分名表示文字列 [仕入返品]</summary>
        private const string CT_SUPPLIERSLIPCD_NAME_02 = "仕入返品";

        /// <summary>仕入区分名表示文字列 [発注]</summary>
        private const string CT_SUPPLIERSLIPCD_NAME_03 = "発注";

        /// <summary>仕入区分名表示文字列 [入荷]</summary>
        private const string CT_SUPPLIERSLIPCD_NAME_04 = "入荷";

        /// <summary>仕入区分名表示文字列 [支払]</summary>
        private const string CT_SUPPLIERSLIPCD_NAME_05 = "支払";

        /// <summary>仕入区分名表示文字列 [仕入／仕入返品]</summary>
        private const string CT_SUPPLIERSLIPCD_NAME_06 = "仕入／仕入返品";

        /// <summary>仕入区分名表示文字列 [入荷返品]</summary>
        private const string CT_SUPPLIERSLIPCD_NAME_07 = "入荷返品";

        /// <summary>仕入区分名表示文字列 [入荷／入荷返品]</summary>
        private const string CT_SUPPLIERSLIPCD_NAME_08 = "入荷／入荷返品";


        #endregion // 仕入区分名表示文字列

        #region 色設定

        /// <summary>伝票一覧グリッド 選択行カラー(グラデーションcolor1)</summary>
        private readonly Color _selectedRowBackColor_Slip = Color.FromArgb(216, 235, 253);

        /// <summary>伝票一覧グリッド 選択行カラー(グラデーションcolor2)</summary>
        private readonly Color _selectedRowBackColor2_Slip = Color.FromArgb(101, 144, 218);

        /// <summary>明細グリッド 選択行カラー(グラデーションcolor1)</summary>
        private readonly Color _selectedRowBackColor_Detail = Color.FromArgb(253, 235, 216);

        /// <summary>明細グリッド 選択行カラー(グラデーションcolor2)</summary>
        private readonly Color _selectedRowBackColor2_Detail = Color.FromArgb(218, 144, 101);

        /// <summary>グリッド 赤伝返品 前景カラー</summary>
        private readonly Color _RedSlipRowForeColor = Color.FromArgb(255, 0, 0);

        /// <summary>グリッド 赤伝返品 背景カラー</summary>
        /// <remarks>明細の背景色と全く同じ色だと自動判定ができないので、1だけずらす</remarks>
        private readonly Color _RedSlipRowBackColor = Color.FromArgb(253, 235, 215);
        //private readonly Color _RedSlipRowBackColor = Color.FromArgb(253, 235, 216);

        /// <summary>グリッド 受注 前景カラー</summary>
        private readonly Color _OrdersRowForeColor = Color.FromArgb(0, 150, 0);

        /// <summary>グリッド 受注 背景カラー</summary>
        private readonly Color _OrdersRowBackColor = Color.FromArgb(150, 255, 150);

        /// <summary>グリッド 出荷 前景カラー</summary>
        private readonly Color _ShippingRowForeColor = Color.FromArgb(0, 0, 255);

        /// <summary>グリッド 出荷 背景カラー</summary>
        private readonly Color _ShippingRowBackColor = Color.FromArgb(216, 235, 253);

        /// <summary>グリッド 入金 前景カラー</summary>
        private readonly Color _DepositRowForeColor = Color.FromArgb(0, 0, 150);

        /// <summary>グリッド 入金 背景カラー</summary>
        private readonly Color _DepositRowBackColor = Color.FromArgb(200, 200, 253);

        /// <summary>選択タブ 背景カラー</summary>
        private readonly Color _SelectedTabBackColor1 = Color.FromArgb(198, 219, 255);

        /// <summary>選択タブ 背景カラー2</summary>
        private readonly Color _SelectedTabBackColor2 = Color.CornflowerBlue;

        /// <summary>非選択タブ 背景カラー</summary>
        private readonly Color _UnSelectedTabBackColor1 = Color.FromArgb(222, 239, 255);

        /// <summary>非選択タブ 背景カラー2</summary>
        private readonly Color _UnSelectedTabBackColor2 = Color.LightSteelBlue;

        /// <summary>単価、原価背景色</summary>
        private static readonly Color _CellReadOnlyColor2 = Color.FromArgb(210, 255, 210); // ADD 2012/10/15 田建委 Redmine#32862

        /// <summary>赤伝グリッド入力不可セル背景色</summary>
        private readonly Color _CellReadOnlyColor = Color.FromArgb(255, 255, 220); // ADD 2013/01/21

        #endregion // 色設定

        #endregion // 各種設定値

        #region 赤伝関係

        /// <summary>入力モード（赤伝）</summary>
        public static readonly int ctINPUTMODE_SalesSlip_Red = 2;

        /// <summary>売上伝票番号初期値</summary>
        public static readonly string ctDefaultSalesSlipNum = "".PadLeft(9, '0');

        #endregion // 赤伝関係

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        # region 構造体
        # region [前回値保持]
        /// <summary>
        /// 前回値保持
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 伝票区分追加</br>
        /// </remarks>
        private struct PrevInputValue
        {
            /// <summary>拠点コード</summary>
            private string _sectionCode;
            /// <summary>得意先コード</summary>
            private int _supplierCode;
            /// <summary>請求先コード</summary>
            private int _payeeCode;
            /// <summary>伝票区分</summary>
            private int _retGdsSalesSlipCd;   // ADD 2013/01/21 [仕入返品計上]

			// ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            /// <summary>返品計上入力担当者コード</summary>
            private string _retGdsInputEmployeeCd;
            /// <summary>赤伝備考コード1</summary>
            private int _slipNoteCd1;
            /// <summary>赤伝備考1名称</summary>
            private string _slipNoteName1;
            /// <summary>赤伝備考コード2</summary>
            private int _slipNoteCd2;
            /// <summary>赤伝備考2名称</summary>
            private string _slipNoteName2;
            /// <summary>返品理由コード</summary>
            private int _retGoodsReasonCd;
            /// <summary>返品理由名称</summary>
            private string _retGoodsReasonName;
            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

            /// <summary>
            /// 拠点コード
            /// </summary>
            public string SectionCode
            {
                get { return _sectionCode; }
                set { _sectionCode = value; }
            }
            /// <summary>
            /// 仕入先コード
            /// </summary>
            public int SupplierCode
            {
                get { return _supplierCode; }
                set { _supplierCode = value; }
            }
            /// <summary>
            /// 支払先コード
            /// </summary>
            public int PayeeCode
            {
                get { return _payeeCode; }
                set { _payeeCode = value; }
            }
            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            /// <summary>
            /// 伝票区分
            /// </summary>
            public int RetGdsSalesSlipCd
            {
                get { return _retGdsSalesSlipCd; }
                set { _retGdsSalesSlipCd = value; }
            }
            /// <summary>
            /// 返品計上入力担当者コード
            /// </summary>
            public string RetGdsInputEmployeeCd
            {
                get { return _retGdsInputEmployeeCd; }
                set { _retGdsInputEmployeeCd = value; }
            }
            /// <summary>
            /// 返品計上備考コード1
            /// </summary>
            public int SlipNoteCd1
            {
                get { return _slipNoteCd1; }
                set { _slipNoteCd1 = value; }
            }
            /// <summary>
            /// 返品計上備考1名称
            /// </summary>
            public string SlipNoteName1
            {
                get { return _slipNoteName1; }
                set { _slipNoteName1 = value; }
            }
            /// <summary>
            /// 返品計上備考コード2
            /// </summary>
            public int SlipNoteCd2
            {
                get { return _slipNoteCd2; }
                set { _slipNoteCd2 = value; }
            }
            /// <summary>
            /// 返品計上備考2名称
            /// </summary>
            public string SlipNoteName2
            {
                get { return _slipNoteName2; }
                set { _slipNoteName2 = value; }
            }
            /// <summary>
            /// 返品理由コード
            /// </summary>
            public int RetGoodsReasonCd
            {
                get { return _retGoodsReasonCd; }
                set { _retGoodsReasonCd = value; }
            }
            /// <summary>
            /// 返品理由名称
            /// </summary>
            public string RetGoodsReasonName
            {
                get { return _retGoodsReasonName; }
                set { _retGoodsReasonName = value; }
            }
            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
        }
        # endregion
        # endregion
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        #region プロパティ
        // ---------------------- ADD 2010/07/20 --------------------------------->>>>>
        /// <summary>操作権限の制御オブジェクト</summary>
        private IOperationAuthority MyOpeCtrl
        {
            get
            {
                if (_operationAuthority == null)
                {
                    _operationAuthority = OpeAuthCtrlFacade.CreateReferenceOperationAuthority("PMKOU04000U", this);
                }
                return _operationAuthority;
            }
        }

        /// <summary>操作権限の制御リスト</summary>
        private Dictionary<OperationCode, bool> OpeAuthDictionary
        {
            get
            {
                if (_operationAuthorityList == null)
                {
                    _operationAuthorityList = new Dictionary<OperationCode, bool>();
                    _operationAuthorityList.Add(OperationCode.TextOut, !MyOpeCtrl.Disabled((int)OperationCode.TextOut));
                    _operationAuthorityList.Add(OperationCode.ExcelOut, !MyOpeCtrl.Disabled((int)OperationCode.ExcelOut));
                }
                return _operationAuthorityList;
            }
        }
        // ---------------------- ADD 2010/07/20 ---------------------------------<<<<<
        #endregion

        #region コンストラクタ

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 DEL
        # region // DEL
        ///// <summary>
        ///// コンストラクタ
        ///// </summary>
        //public PMKOU04001UA()
        //{
        //    InitializeComponent();

        //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        //    // 設定フォーム生成
        //    _settingForm = new PMKOU04004UA();
        //    _settingForm.ClearSettingSlipGrid += new EventHandler( SettingForm_ClearSettingSlipGrid );
        //    _settingForm.ClearSettingDetailGrid += new EventHandler( SettingForm_ClearSettingDetailGrid );
        //    _settingForm.ClearSettingBalanceGrid += new EventHandler( SettingForm_ClearSettingBalanceGrid );

        //    // 設定読み込み
        //    _settingForm.Deserialize();

        //    // グリッド内の結合セル設定
        //    _margedCellAppearance = new Infragistics.Win.Appearance();
        //    _margedCellAppearance.BackColor = Color.Lavender;
        //    _margedCellAppearance.BackColorAlpha = Alpha.Opaque;
        //    _margedCellAppearance.ForeColor = Color.Black;

        //    // tRetKeyControl
        //    // グリッド内でReturnキー押下時の処理を実装する為Circulate=trueにする。
        //    tRetKeyControl.Circulate = true;
        //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
        //}

        ///// <summary>
        ///// 呼び出し元プログラムID込みのコンストラクタ
        ///// </summary>
        ///// <param name="invokerPgId">呼び出し元プログラムID</param>
        //public PMKOU04001UA(string invokerPgId)
        //{
        //    InitializeComponent();

        //    // プライベートレベルでPGIDを保存
        //    this._invokerPgId = invokerPgId;

        //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        //    // 設定フォーム生成
        //    _settingForm = new PMKOU04004UA();
        //    _settingForm.ClearSettingSlipGrid += new EventHandler( SettingForm_ClearSettingSlipGrid );
        //    _settingForm.ClearSettingDetailGrid += new EventHandler( SettingForm_ClearSettingDetailGrid );
        //    _settingForm.ClearSettingBalanceGrid += new EventHandler( SettingForm_ClearSettingBalanceGrid );

        //    // 設定読み込み
        //    _settingForm.Deserialize();

        //    // グリッド内の結合セル設定
        //    _margedCellAppearance = new Infragistics.Win.Appearance();
        //    _margedCellAppearance.BackColor = Color.Lavender;
        //    _margedCellAppearance.BackColorAlpha = Alpha.Opaque;
        //    _margedCellAppearance.ForeColor = Color.Black;

        //    // tRetKeyControl
        //    // グリッド内でReturnキー押下時の処理を実装する為Circulate=trueにする。
        //    tRetKeyControl.Circulate = true;
        //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        //}

        ///// <summary>
        ///// 呼び出し元プログラムID込みのコンストラクタ
        ///// </summary>
        ///// <param name="parameters">呼び出し元プログラムIDを含むパラメータ</param>
        //public PMKOU04001UA(object[] parameters)
        //{
        //    InitializeComponent();

        //    string invokerPgId;
        //    if (parameters.Length > 0)
        //    {
        //        invokerPgId = parameters[0].ToString();

        //        // プライベートレベルでPGIDを保存
        //        this._invokerPgId = invokerPgId;
        //    }

        //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        //    // 設定フォーム生成
        //    _settingForm = new PMKOU04004UA();
        //    _settingForm.ClearSettingSlipGrid += new EventHandler( SettingForm_ClearSettingSlipGrid );
        //    _settingForm.ClearSettingDetailGrid += new EventHandler( SettingForm_ClearSettingDetailGrid );
        //    _settingForm.ClearSettingBalanceGrid += new EventHandler( SettingForm_ClearSettingBalanceGrid );

        //    // 設定読み込み
        //    _settingForm.Deserialize();

        //    // グリッド内の結合セル設定
        //    _margedCellAppearance = new Infragistics.Win.Appearance();
        //    _margedCellAppearance.BackColor = Color.Lavender;
        //    _margedCellAppearance.BackColorAlpha = Alpha.Opaque;
        //    _margedCellAppearance.ForeColor = Color.Black;

        //    // tRetKeyControl
        //    // グリッド内でReturnキー押下時の処理を実装する為Circulate=trueにする。
        //    tRetKeyControl.Circulate = true;
        //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
        //}
        # endregion
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 ADD
        /// <summary>
        /// コンストラクタ
        /// </summary>
        public PMKOU04001UA()
        {
            InitializeComponent();

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            // 設定フォーム生成
            _settingForm = new PMKOU04004UA();
            _settingForm.ClearSettingSlipGrid += new EventHandler( SettingForm_ClearSettingSlipGrid );
            _settingForm.ClearSettingDetailGrid += new EventHandler( SettingForm_ClearSettingDetailGrid );
            _settingForm.ClearSettingBalanceGrid += new EventHandler( SettingForm_ClearSettingBalanceGrid );
            _settingForm.ClearSettinRetGoodsAddUpInpGrid += new EventHandler(SettingForm_ClearSettinRetGoodsAddUpInpGrid);  // ADD  2013/01/21

            // 設定読み込み
            _settingForm.Deserialize();

            // グリッド内の結合セル設定
            _margedCellAppearance = new Infragistics.Win.Appearance();
            _margedCellAppearance.BackColor = Color.Lavender;
            _margedCellAppearance.BackColorAlpha = Alpha.Opaque;
            _margedCellAppearance.ForeColor = Color.Black;

            // tRetKeyControl
            // グリッド内でReturnキー押下時の処理を実装する為Circulate=trueにする。
            tRetKeyControl.Circulate = true;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 ADD
            _gridColumnChooserControl = new GridColumnChooserControl();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 ADD

            this.CacheOptionInfo(); // 2010/04/05 Add
            TextOutPutOprtnHisLogAcsObj = new TextOutPutOprtnHisLogAcs();// ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応
        }

        /// <summary>
        /// 呼び出し元プログラムID込みのコンストラクタ
        /// </summary>
        /// <param name="invokerPgId">呼び出し元プログラムID</param>
        public PMKOU04001UA( string invokerPgId )
            : this()
        {
            // プライベートレベルでPGIDを保存
            this._invokerPgId = invokerPgId;
        }

        /// <summary>
        /// 呼び出し元プログラムID込みのコンストラクタ
        /// </summary>
        /// <param name="parameters">呼び出し元プログラムIDを含むパラメータ</param>
        public PMKOU04001UA( object[] parameters )
            : this()
        {
            string invokerPgId;
            if ( parameters.Length > 0 )
            {
                invokerPgId = parameters[0].ToString();

                // プライベートレベルでPGIDを保存
                this._invokerPgId = invokerPgId;
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 ADD

        /// <summary>Form.Load イベント</summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>フォーム読み込み時の設定取得など</br>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品予定機能]返品計上入力タブ初期化</br>
        /// </remarks>
        private void PMKOU04001UA_Load(object sender, System.EventArgs e)
        {
            // 変数などを初期化
            InitializeVariable();

            // ----------ADD 2013/01/21----------->>>>>
            // 赤伝タブ初期表示
            ClearRedSlipInput();
            // Gridキーマッピング
            MakeKeyMappingForGrid(this.uGrid_RedSlip);
            // ----------ADD 2013/01/21-----------<<<<<

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            // グループ展開状態の復元
            # region [グループ展開状態の復元]
            uExGroupBox_BalanceChart.Expanded = _settingForm.UserSetting.BalanceChartExpanded;
            uExGroupBox_ExtraCondition.Expanded = _settingForm.UserSetting.ExtraConditionExpanded;
            # endregion

            // 詳細条件の復元
            # region [前回使用時の詳細条件を復元]
            if ( _settingForm.UserSetting.EnabledConditionList != null )
            {
                // チェック状態の復元
                foreach ( Control control in panel_SelectItem.Controls )
                {
                    if ( control is Infragistics.Win.UltraWinEditors.UltraCheckEditor )
                    {
                        // チェックが付いているチェックボックスの名称をリストに追加
                        if ( _settingForm.UserSetting.EnabledConditionList.Contains( control.Name ) )
                        {
                            // リストに名前があれば、チェックする
                            (control as Infragistics.Win.UltraWinEditors.UltraCheckEditor).Checked = true;
                        }
                        else
                        {
                            // 名前がなければ、チェックしない
                            (control as Infragistics.Win.UltraWinEditors.UltraCheckEditor).Checked = false;
                        }
                    }
                }
                // 表示内容に反映
                ultraDockManager_PaneHidden( sender, null );
            }
            # endregion

            // グリッドカラム情報の復元
            # region [グリッドカラム情報の復元]
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 DEL
            //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 ADD
            //// カラムの並び順が変わる前にCreateする
            //SettingForm_ClearSettingSlipGrid( this, new EventArgs() );
            //CreateColumnChooser( ref _chooserForSlip, uGrid_Slip );
            //CreateColumnChooser( ref _chooserForDetail, uGrid_Detail );
            //CreateColumnChooser( ref _chooserForBalanceList, uGrid_BalanceList );
            //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 ADD
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 DEL

            // 伝票グリッド
            this.LoadGridColumnsSetting( ref uGrid_Slip, _settingForm.UserSetting.SlipColumnsList );
            // 明細グリッド
            this.LoadGridColumnsSetting( ref uGrid_Detail, _settingForm.UserSetting.DetailColumnsList );
            // 残高グリッド
            this.LoadGridColumnsSetting( ref uGrid_BalanceList, _settingForm.UserSetting.BalanceColumnsList );
            // 返品計上グリッド
            this.LoadGridColumnsSetting(ref uGrid_RedSlip, _settingForm.UserSetting.RetGoodsAddUpInpColumnsList);// ADD 2013/01/21 [返品計上]
            # endregion

            // グリッドカラムサイズ自動調整チェックの復元
            # region [グリッドカラムサイズ自動調整の復元]
            _columnWidthAutoAdjust_Slip = _settingForm.UserSetting.AutoAdjustSlip;
            _columnWidthAutoAdjust_Detail = _settingForm.UserSetting.AutoAdjustDetail;
            _columnWidthAutoAdjust_Balance = _settingForm.UserSetting.AutoAdjustBalance;
            _columnWidthAutoAdjust_RedSlip = _settingForm.UserSetting.AutoAdjustRetGoodsAddUpInp; // ADD 2013/01/21 [返品計上]


            // ADD 2010/01/14 MANTIS対応[14664]：列サイズの自動調整の初期設定を修正 ---------->>>>>
            // グリッドカラムサイズ自動調整チェックの初期値を設定
            if (_selectedMainTabKey.Equals("uTab_SlipList"))
            {
                this.uCheckEditor_StatusBar_AutoFillToGridColumn.Checked = _columnWidthAutoAdjust_Slip;
            }
            if (_selectedMainTabKey.Equals("uTab_SlipDetail"))
            {
                this.uCheckEditor_StatusBar_AutoFillToGridColumn.Checked = _columnWidthAutoAdjust_Detail;
            }
            if (_selectedMainTabKey.Equals("uTab_RemainList"))
            {
                this.uCheckEditor_StatusBar_AutoFillToGridColumn.Checked = _columnWidthAutoAdjust_Balance;
            }
            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            if (_selectedMainTabKey.Equals("uTab_RedSlip"))
            {
                this.uCheckEditor_StatusBar_AutoFillToGridColumn.Checked = _columnWidthAutoAdjust_RedSlip;
            }
            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
            // ADD 2010/01/14 MANTIS対応[14664]：列サイズの自動調整の初期設定を修正 ----------<<<<<

            # endregion

            // 設定フォームへのカラム一覧渡し
            _settingForm.SlipColCollection = uGrid_Slip.DisplayLayout.Bands[0].Columns;
            _settingForm.DetailColCollection = uGrid_Detail.DisplayLayout.Bands[0].Columns;
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 ADD
            _settingForm.BalanceColCollection = uGrid_BalanceList.DisplayLayout.Bands[0].Columns;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 ADD
            //_settingForm.RedSlipColCollection = uGrid_RedSlip.DisplayLayout.Bands[0].Columns; // ADD 2013/01/21 [返品計上]

            // グリッドカラム制御
            _slipGridColPosCtrl = new GridColPosFixController( uGrid_Slip );
            _detailGridColPosCtrl = new GridColPosFixController( uGrid_Detail );
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

            // 画面を使用可能に
            this.Enabled = true;
        }

        /// <summary>
        /// フォーム表示後のイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void PMKOU04001UA_Shown(object sender, System.EventArgs e)
        {
            //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 ADD
            //// グリッドカラム情報の復元
            //# region [グリッドカラム情報の復元]
            //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 ADD
            //// カラムの並び順が変わる前にCreateする
            //SettingForm_ClearSettingSlipGrid( this, new EventArgs() );
            //CreateColumnChooser( ref _chooserForSlip, uGrid_Slip );
            //CreateColumnChooser( ref _chooserForDetail, uGrid_Detail );
            //CreateColumnChooser( ref _chooserForBalanceList, uGrid_BalanceList );
            //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 ADD

            //// 伝票グリッド
            //this.LoadGridColumnsSetting( ref uGrid_Slip, _settingForm.UserSetting.SlipColumnsList );
            //// 明細グリッド
            //this.LoadGridColumnsSetting( ref uGrid_Detail, _settingForm.UserSetting.DetailColumnsList );
            //// 残高グリッド
            //this.LoadGridColumnsSetting( ref uGrid_BalanceList, _settingForm.UserSetting.BalanceColumnsList );
            //# endregion

            //// グリッドカラムサイズ自動調整チェックの復元
            //# region [グリッドカラムサイズ自動調整の復元]
            //_columnWidthAutoAdjust_Slip = _settingForm.UserSetting.AutoAdjustSlip;
            //_columnWidthAutoAdjust_Detail = _settingForm.UserSetting.AutoAdjustDetail;
            //_columnWidthAutoAdjust_Balance = _settingForm.UserSetting.AutoAdjustBalance;
            //# endregion

            //// 設定フォームへのカラム一覧渡し
            //_settingForm.SlipColCollection = uGrid_Slip.DisplayLayout.Bands[0].Columns;
            //_settingForm.DetailColCollection = uGrid_Detail.DisplayLayout.Bands[0].Columns;

            //// グリッドカラム制御
            //_slipGridColPosCtrl = new GridColPosFixController( uGrid_Slip );
            //_detailGridColPosCtrl = new GridColPosFixController( uGrid_Detail );
            //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 ADD

            // 初期フォーカス
            this.tNedit_SupplierCd.Focus();

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
            // 拠点コードが正しくゼロ詰めされない場合がある為、(起動の度、結果異なる)
            // 強制的にゼロ詰めする。

            tEdit_SectionCodeAllowZero.Text = uiSetControl1.GetZeroPaddedText( tEdit_SectionCodeAllowZero.Name, tEdit_SectionCodeAllowZero.Text );
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

        }

        /// <summary>
        /// プライベートレベルの変数などを初期化および初期取得
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              仕入返品予定機能追加</br>
        /// <br>              ボタンイメージ追加(明細選択,伝票選択,返品計上,削除)、返品計上タブ処理追加</br>
        /// </remarks>
        private void InitializeVariable()
        {
            //int status;

            #region セッション初期値取得

            // アプリケーションに必要となる値を設定する
            // 企業コード
            this._enterpriseCode = LoginInfoAcquisition.EnterpriseCode;

            // 自拠点コード
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //this._loginSectionCode = LoginInfoAcquisition.Employee.BelongSectionCode;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            this._loginSectionCode = LoginInfoAcquisition.Employee.BelongSectionCode.Trim();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

            // ログインユーザーコード
            this._loginUserCd = LoginInfoAcquisition.Employee.EmployeeCode;

            // ログインユーザー名
            this._loginUserName = LoginInfoAcquisition.Employee.Name;

            #endregion // セッション初期値取得

            #region アクセスクラス初期化

            // アクセスクラスを初期化
            this._customerInfoAcs = new CustomerInfoAcs();
            this._secInfoSetAcs = new SecInfoSetAcs();

            this._employeeAcs = new EmployeeAcs();
            this._makerAcs = new MakerAcs();
            this._goodsAcs = new GoodsAcs();
            this._blGoodsCdAcs = new BLGoodsCdAcs();
            this._blGroupUAcs = new BLGroupUAcs();
            this._userGuideAcs = new UserGuideAcs();
            this._warehouseAcs = new WarehouseAcs();
            this._supplierAcs = new SupplierAcs();

            this._salesTtlStAcs = new SalesTtlStAcs();

            //this._iIOWriteControlDB = (IIOWriteControlDB)MediationIOWriteControlDB.GetIOWriteControlDB();

            #endregion // アクセスクラス初期化

            // 検索条件クラスを初期化
            this._suppPrtPpr = new SuppPrtPpr();
            //this._custPtrRedSlipAcs = new CustPtrSalesDetailRedSlipAcs();
            this._suppPtrStcDetailAcs = new SuppPtrStockDetailAcs();  // ADD 2013/01/21 [仕入返品計上]
            this._noteGuidAcs = new NoteGuidAcs();  // ADD 2013/01/21 [仕入返品計上]

            // 残高一覧検索条件クラス
            this._suppPrtPprBlnce = new SuppPrtPprBlnce();

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            // 前回検索時抽出条件クラス
            this._custPrtPprBackUp = null;
            this._custPrtPprBlnceBackUp = null;
            this._rl_RemainTypeBackup = string.Empty;
            this._logicalDelDivBackUp = -1;
            this._stockRetGdsPlnFlagBackup = -1; // ADD 2013/01/21 [仕入返品計上]
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

            //--------------------------
            // 画面のセッティング
            //--------------------------

            #region ボタンイメージ設定

            // イメージリストを指定(16x16)
            this._imageList16 = IconResourceManagement.ImageList16;

            // ボタンイメージを設定
            // 共通部分
            this.uButton_SectionGuide.ImageList = this._imageList16;
            this.uButton_SectionGuide.Appearance.Image = (int)Size16_Index.STAR1;

            this.uButton_PayeeGuide.ImageList = this._imageList16;
            this.uButton_PayeeGuide.Appearance.Image = (int)Size16_Index.STAR1;

            this.uButton_SupplierGuide.ImageList = this._imageList16;
            this.uButton_SupplierGuide.Appearance.Image = (int)Size16_Index.STAR1;

            // ----------ADD 2013/01/21----------->>>>>
            // 赤伝発行タブ
            this.uButton_rs_StockAgent.ImageList = this._imageList16;
            this.uButton_rs_StockAgent.Appearance.Image = (int)Size16_Index.STAR1;

            this.uButton_rs_SlipNote.ImageList = this._imageList16;
            this.uButton_rs_SlipNote.Appearance.Image = (int)Size16_Index.STAR1;

            this.uButton_rs_SlipNote2.ImageList = this._imageList16;
            this.uButton_rs_SlipNote2.Appearance.Image = (int)Size16_Index.STAR1;

            this.uButton_rs_ReturnReason.ImageList = this._imageList16;
            this.uButton_rs_ReturnReason.Appearance.Image = (int)Size16_Index.STAR1;
            // ----------ADD 2013/01/21-----------<<<<<

            this.tToolbarsManager.ImageListSmall = this._imageList16;
            this.tToolbarsManager.Tools["LabelTool_RowSearchTitle"].SharedProps.AppearancesSmall.Appearance.Image = (int)Size16_Index.SEARCH;
            this.tToolbarsManager.Tools["ButtonTool_Close"].SharedProps.AppearancesSmall.Appearance.Image = (int)Size16_Index.CLOSE;
            this.tToolbarsManager.Tools["ButtonTool_Search"].SharedProps.AppearancesSmall.Appearance.Image = (int)Size16_Index.SEARCH;
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            this.tToolbarsManager.Tools["ButtonTool_Clear"].SharedProps.AppearancesSmall.Appearance.Image = (int)Size16_Index.ALLCANCEL;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
            this.tToolbarsManager.Tools["ButtonTool_Print"].SharedProps.AppearancesSmall.Appearance.Image = (int)Size16_Index.PRINT;
            this.tToolbarsManager.Tools["ButtonTool_PDF"].SharedProps.AppearancesSmall.Appearance.Image = (int)Size16_Index.PREVIEW;
            this.tToolbarsManager.Tools["ButtonTool_ExtractText"].SharedProps.AppearancesSmall.Appearance.Image = (int)Size16_Index.CSVOUTPUT;
            this.tToolbarsManager.Tools["ButtonTool_ExtractExcel"].SharedProps.AppearancesSmall.Appearance.Image = (int)Size16_Index.CSVOUTPUT;
            this.tToolbarsManager.Tools["ButtonTool_ReissueSlip"].SharedProps.AppearancesSmall.Appearance.Image = (int)Size16_Index.SLIP;
            this.tToolbarsManager.Tools["ButtonTool_IssueRedSlip"].SharedProps.AppearancesSmall.Appearance.Image = (int)Size16_Index.SLIP;
            this.tToolbarsManager.Tools["ButtonTool_Configuration"].SharedProps.AppearancesSmall.Appearance.Image = (int)Size16_Index.SETUP1;
            this.tToolbarsManager.Tools["ButtonTool_RowSelect"].SharedProps.AppearancesSmall.Appearance.Image = (int)Size16_Index.DETAILS;
            // ----------ADD 2013/01/21----------->>>>>
            this.tToolbarsManager.Tools["ButtonTool_DetailSelect"].SharedProps.AppearancesSmall.Appearance.Image = (int)Size16_Index.DECISION;
            this.tToolbarsManager.Tools["ButtonTool_StockSlipSelect"].SharedProps.AppearancesSmall.Appearance.Image = (int)Size16_Index.DECISION;
            this.tToolbarsManager.Tools["ButtonTool_SlipDelete"].SharedProps.AppearancesSmall.Appearance.Image = (int)Size16_Index.DELETE;
            // ----------ADD 2013/01/21-----------<<<<<

            // 詳細検索条件エリアのボタンイメージを設定
            InitializeExtraConditionFields();

            #endregion // ボタンイメージ設定

            // 全ての詳細検索条件を非表示にし、拡張検索条件の拡張可能グループボックスを不可視に
            SetAllDetailSearchCondition2Hidden();
            this.uExGroupBox_ExtraCondition.Visible = false;

            #region [旧・売上全体設定取得]
            //#region 売上全体設定取得

            //// 売上全体設定を取得
            //// TODO このSearchAllは将来的にSearchメソッドに変わる可能性あり。
            //ArrayList retSalesTtlSt;
            //status = this._salesTtlStAcs.SearchAll(out retSalesTtlSt, this._enterpriseCode);
            //if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            //{
            //    foreach (SalesTtlSt salesTtlSt in retSalesTtlSt)
            //    {
            //        // 自拠点コードと同じものをピックアップ
            //        if (salesTtlSt.SectionCode.Trim() == this._loginSectionCode.Trim())
            //        {
            //            // 伝票備考２表示区分
            //            switch (salesTtlSt.BrSlipNote2DispDiv)
            //            {
            //                // 0:有り　1:無し　（無しの場合、画面項目を非表示)
            //                case 0: this._editableSlipNote2 = true; break;
            //                case 1: this._editableSlipNote2 = false; break;
            //                default: this._editableSlipNote2 = true; break;
            //            }

            //            // 伝票備考３表示区分
            //            switch (salesTtlSt.BrSlipNote3DispDiv)
            //            {
            //                // 0:する　1:しない　（無しの場合、画面項目を非表示)
            //                case 0: this._editableSlipNote3 = true; break;
            //                case 1: this._editableSlipNote3 = false; break;
            //                default: this._editableSlipNote3 = true; break;
            //            }

            //            // 得意先注番表示区分
            //            switch (salesTtlSt.CustOrderNoDispDiv)
            //            {
            //                // 0:しない　1:する　**** 備考とは逆なので注意 ****
            //                case 0: this._editablePartySalesSlipCd = false; break;
            //                case 1: this._editablePartySalesSlipCd = true; break;
            //                default: this._editablePartySalesSlipCd = true; break;
            //            }

            //            break;
            //        }
            //    }

            //    // 赤伝発行入力タブ表示領域調整
            //    setupRedSlipTabControls();
            //}

            //#endregion // 売上全体設定取得
            #endregion [旧・売上全体設定取得]

            // ----------ADD 2013/01/21----------->>>>>
            #region 売上全体設定取得
            // 売上全体設定を取得
            ArrayList retSalesTtlSt;
            int status = this._salesTtlStAcs.Search(out retSalesTtlSt, this._enterpriseCode);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                // 売上全体設定
                # region [売上全体設定 取得]
                _salesTtlSt = null;
                SalesTtlSt allSalesTtlSt = null;
                foreach (SalesTtlSt salesTtlSt in retSalesTtlSt)
                {
                    if (salesTtlSt.SectionCode.Trim() == this._loginSectionCode.Trim())
                    {
                        // 拠点別設定
                        _salesTtlSt = salesTtlSt;
                        break;
                    }
                    else if (salesTtlSt.SectionCode.Trim() == string.Empty || salesTtlSt.SectionCode.Trim() == "00")
                    {
                        // 全社設定
                        allSalesTtlSt = salesTtlSt;
                        continue;
                    }
                }
                // 拠点別設定が無ければ全社設定を使用
                if (_salesTtlSt == null)
                {
                    _salesTtlSt = allSalesTtlSt;
                }
                # endregion

                // 拠点別設定も全社設定も無ければ終了
                if (_salesTtlSt == null)
                {
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                        "売上全体設定が設定されていません。終了します",
                        status, MessageBoxButtons.OK);
                    return;
                }

                // 売上全体設定による項目表示・非表示設定と
                // 返品計上入力タブ表示領域調整
                setupRedSlipTabControls();
            }
            #endregion 売上全体設定取得

            // 処理区分の表示・非表示
            if (this._salesTtlSt.StockRetGoodsPlnDiv == 0)
            {
                this.uLabel_StockRetGdsPlnTitle.Visible = false;
                this.tComboEditor_StockRetGdsPlnFlag.Visible = false;
            }
            else
            {
                this.uLabel_StockRetGdsPlnTitle.Visible = true;
                this.tComboEditor_StockRetGdsPlnFlag.Visible = true;
            }
            // 返品計上ボタンの非表示
            this.tToolbarsManager.Tools["ButtonTool_IssueRedSlip"].SharedProps.Enabled = false;
            // ----------ADD 2013/01/21-----------<<<<<

            #region 締め日取得

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/11/11 ADD
            // 日付取得部品
            _dateGetAcs = DateGetAcs.GetInstance();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/11/11 ADD

            _tCalcAcs = TotalDayCalculator.GetInstance();

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //// 締日取得前初期処理
            //status = _tCalcAcs.InitializeHisMonthlyAccPay();    // 仕入月次取得用初期処理

            //if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            //{
            //    // 今回および前回の仕入締め日/月を取得(月と日は異なる場合がある)
            //    status = _tCalcAcs.GetHisTotalDayMonthlyAccPay(this._loginSectionCode, out this._prevTotalDay, out this._currentTotalDay, out this._prevTotalMonth, out this._currentTotalMonth);
            //}
            //else
            //{
            //    // 初期処理失敗
            //    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
            //        MSG_TOTALDAY_INITIALIE_FAILED, -1, MessageBoxButtons.OK);
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL

            #endregion // 締め日取得

            #region グリッド設定
            // アクセスクラスを初期化し、データセットを取得
            this._suppPtrSearchAcs = new SuppPrtSlipSearchAcs();
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            _suppPtrSearchAcs.UpdateSection += new SuppPrtSlipSearchAcs.UpdateSectionEventHandler( _suppPtrSearchAcs_UpdateSection );
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
            this._detailDataSet = this._suppPtrSearchAcs.DataSet;

            // グリッド毎に使用するデータビューを作成
            DataView dViewSlip = new DataView(this._detailDataSet.StcList);
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/12/03 ADD
            dViewSlip.Sort = this.GetSlipSortString();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/12/03 ADD
            DataView dViewDetail = new DataView(this._detailDataSet.StcDetail);
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/12/03 ADD
            dViewDetail.Sort = this.GetDetailSortString();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/12/03 ADD
            DataView dViewBalanceList = new DataView(this._detailDataSet.BalanceList);
            DataView dViewRedSlip = new DataView(this._detailDataSet.RedSlipDetail);  // ADD 2013/01/21

            // データソースとしてデータビューを指定
            this.uGrid_Slip.DataSource = dViewSlip;
            this.uGrid_Detail.DataSource = dViewDetail;
            this.uGrid_BalanceList.DataSource = dViewBalanceList;
            this.uGrid_RedSlip.DataSource = dViewRedSlip;  // ADD 2013/01/21

            // グリッドを作成
            // グリッド列初期設定処理
            InitializeGridColumns(this.uGrid_Slip.DisplayLayout.Bands[0].Columns, 0);
            InitializeGridColumns(this.uGrid_Detail.DisplayLayout.Bands[0].Columns, 1);
            InitializeGridColumns(this.uGrid_BalanceList.DisplayLayout.Bands[0].Columns, 2);
            InitializeGridColumns(this.uGrid_RedSlip.DisplayLayout.Bands[0].Columns, 4);  // ADD 2013/01/21

            // 全てのグリッドの自動調整
            autoColumnAdjust(this._columnWidthAutoAdjust_Slip, 0);
            autoColumnAdjust(this._columnWidthAutoAdjust_Detail, 1);
            autoColumnAdjust(this._columnWidthAutoAdjust_Balance, 2);
            autoColumnAdjust(this._columnWidthAutoAdjust_RedSlip, 3);  // ADD 2013/01/21

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/01/14 ADD
            // テキスト出力で使用する為、テーブルカラムのCaptionをグリッドカラムCaptionで書きかえる
            SettingTableColCaption( _detailDataSet.StcList, uGrid_Slip );
            SettingTableColCaption( _detailDataSet.StcDetail, uGrid_Detail );
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/01/14 ADD
            #endregion グリッド設定

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //// 初期表示タブ
            //this._selectedMainTabKey = "uTab_SlipDetail";
            //this.uTabControl.Tabs["uTab_SlipDetail"].Selected = true;
            //this.uCheckEditor_StatusBar_AutoFillToGridColumn.Checked = this._columnWidthAutoAdjust_Detail;
            //autoColumnAdjust(this._columnWidthAutoAdjust_Detail, 0);
            //adjustButtonEnable(1);
            //adjustStatusBarCellExample(true);
            //setToolbarSearchSurface();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL

            // 行選択ボタンOFF
            this.tToolbarsManager.Tools["ButtonTool_RowSelect"].SharedProps.Enabled = false;

            // スキンをロード
            this._controlScreenSkin = new ControlScreenSkin();
            List<string> controlNameList = new List<string>();
            controlNameList.Add(this.uExGroupBox_CommonCondition.Name);
            controlNameList.Add(this.uExGroupBox_ExtraCondition.Name);
            controlNameList.Add(this.uExGroupBox_BalanceChart.Name);
            this._controlScreenSkin.SetExceptionCtrl(controlNameList);
            this._controlScreenSkin.LoadSkin();
            this._controlScreenSkin.SettingScreenSkin(this);

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //// 画面をクリア
            //ClearAllField();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL

            // 文字サイズ設定
            for (int i = 0; i < this._fontpitchSize.Length; i++)
            {
                this.tComboEditor_StatusBar_FontSize.Items.Add(this._fontpitchSize[i], this._fontpitchSize[i].ToString());
            }
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //this.tComboEditor_StatusBar_FontSize.Text = CT_DEF_FONT_SIZE.ToString();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            this.tComboEditor_StatusBar_FontSize.ValueChanged -= tComboEditor_StatusBar_FontSize_ValueChanged;
            this.tComboEditor_StatusBar_FontSize.Text = CT_DEF_FONT_SIZE.ToString();
            this.tComboEditor_StatusBar_FontSize.ValueChanged += tComboEditor_StatusBar_FontSize_ValueChanged;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //// 画面の初期値をセット
            //this.tEdit_SectionCodeAllowZero.Text = this._loginSectionCode;
            //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            ////this.tEdit_SectionCodeAllowZero_Leave(null, null);
            //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
            //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            //SecInfoSet secInfoSet;
            //_secInfoSetAcs.Read( out secInfoSet, this._enterpriseCode, this._loginSectionCode.Trim() );
            //uLabel_SectionNm.Text = secInfoSet.SectionGuideNm;
            //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

            //// 初期値では仕入先が入っていないので仕入日の初期はシステム日付
            //this.tDateEdit_StockDateSt.SetDateTime(DateTime.Today);
            //this.tDateEdit_StockDateEd.SetDateTime(DateTime.Today);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL

            // ログイン名を表示
            this.tToolbarsManager.Tools["LabelTool_LoginCharge"].SharedProps.Caption = this._loginUserName;

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //// 締め日
            //if (_prevTotalDay == DateTime.MinValue)
            //{
            //    // 画面へセット
            //    // 2008.12.04 modify start [8713]
            //    //this.tDateEdit_rl_TargetYMSt.Clear();
            //    //this.tDateEdit_rl_TargetYMEd.Clear();
            //    this.tDateEdit_rl_TargetYMSt.SetDateTime(DateTime.Today);
            //    this.tDateEdit_rl_TargetYMEd.SetDateTime(DateTime.Today);
            //    // 2008.12.04 modify end [8713]
            //}
            //else
            //{
            //    // 画面へセット
            //    this.tDateEdit_rl_TargetYMSt.SetDateTime(this._prevTotalMonth); // 前回締処理月
            //    this.tDateEdit_rl_TargetYMEd.SetDateTime(this._prevTotalMonth); // 前回締処理月
            //}
            //// 展開処理
            //if ( !this.uExGroupBox_CommonCondition.Expanded )
            //{
            //    this.uExGroupBox_CommonCondition.Expanded = true;
            //}
            //if (this.uExGroupBox_ExtraCondition.Expanded)
            //{
            //    this.uExGroupBox_ExtraCondition.Expanded = false;
            //}
            //if (this.uExGroupBox_BalanceChart.Expanded)
            //{
            //    this.uExGroupBox_BalanceChart.Expanded = false;
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL

            // リフレクションで指定した各種機能呼び出しを設定

            // 得意先電子元帳から呼び出された場合は、得意先電子元帳へのリンクを削除
            if (this._invokerPgId.Equals(CT_CUSTOMER_ERECNOTE_PGID))
            {
                this.tToolbarsManager.Tools["ButtonTools_Denshi"].SharedProps.Visible = false;
            }

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            // 初期化
            ClearInputProc();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        }
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>
        /// データテーブルカラムタイトル設定
        /// </summary>
        /// <param name="salesListDataTable"></param>
        /// <param name="uGrid_Slip"></param>
        private void SettingTableColCaption( DataTable table, Infragistics.Win.UltraWinGrid.UltraGrid grid )
        {
            foreach ( Infragistics.Win.UltraWinGrid.UltraGridColumn gridCol in grid.DisplayLayout.Bands[0].Columns )
            {
                try
                {
                    table.Columns[gridCol.Key].Caption = gridCol.Header.Caption;
                }
                catch
                {
                }
            }
        }
        /// <summary>
        /// 伝票表示グリッド・ソート順
        /// </summary>
        /// <returns></returns>
        private string GetSlipSortString()
        {
            return string.Format( "{0}, {1}, {2}, {3}, {4}",
                                    _detailDataSet.StcList.StockDateColumn.ColumnName,
                                    _detailDataSet.StcList.PartySaleSlipNumColumn.ColumnName,
                                    _detailDataSet.StcList.DataDivColumn.ColumnName,
                                    _detailDataSet.StcList.SupplierFormalColumn.ColumnName,
                                    _detailDataSet.StcList.SupplierSlipCdColumn );
        }
        /// <summary>
        /// 明細表示グリッド・ソート順
        /// </summary>
        /// <returns></returns>
        private string GetDetailSortString()
        {
            return string.Format( "{0}, {1}, {2}, {3}, {4}, {5}",
                                    _detailDataSet.StcDetail.StockDateColumn.ColumnName,
                                    _detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName,
                                    _detailDataSet.StcDetail.StockRowNoColumn.ColumnName,
                                    _detailDataSet.StcDetail.DataDivColumn.ColumnName,
                                    _detailDataSet.StcDetail.SupplierFormalColumn.ColumnName,
                                    _detailDataSet.StcDetail.SupplierSlipCdColumn.ColumnName );
        }
        /// <summary>
        /// 拠点更新イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="sectionCode"></param>
        /// <param name="sectionName"></param>
        void _suppPtrSearchAcs_UpdateSection( object sender, string sectionCode, string sectionName )
        {
            // 表示更新
            this.tEdit_SectionCodeAllowZero.Text = sectionCode.Trim();
            this.uLabel_SectionNm.Text = sectionName.Trim();

            // 前回値
            _prevInputValue.SectionCode = sectionCode.Trim();
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
        #endregion // コンストラクタ

        //#region パブリックインターフェース

        ///// <summary>
        ///// フォームのShowメソッドを実装したインターフェース
        ///// </summary>
        //public interface IFormInvoker
        //{
        //    void show();
        //}

        //#endregion // パブリックインターフェース

        #region プライベートメソッド

        #region 全ての入力欄をクリア

        /// <summary>
        /// 全ての入力欄をクリアします
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 返品計上タブ項目追加</br>
        /// </remarks>
        private void ClearAllField()
        {
            // 共通条件エリア
            this.tEdit_SectionCodeAllowZero.Clear();
            this.uLabel_SectionNm.Text = string.Empty;
            this.tNedit_SupplierCd.Clear();
            this.uLabel_SupplierName.Text = string.Empty;
            this.tNedit_PayeeCode.Clear();
            this.uLabel_PayeeName.Text = string.Empty;
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
            //this.tDateEdit_StockDateSt.SetDateTime(DateTime.Today);
            //this.tDateEdit_StockDateEd.SetDateTime(DateTime.Today);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL
            this.tDateEdit_AddUpADateSt.Clear();
            this.tDateEdit_AddUpADateEd.Clear();
            
            // 詳細検索条件エリア

            // 残高照会エリア
            this.uLabel_AddUpYearMonth.Text = string.Empty;
            this.uLabel_SuppCTaxationCd.Text = string.Empty;

            this.uLabel_StockTtl2TmBfBlPay.Text = string.Empty;
            this.uLabel_LastTimePayment.Text = string.Empty;
            this.uLabel_PaymentRemain.Text = string.Empty;
            this.uLabel_StockTotalPayBalance.Text = string.Empty;
            this.uLabel_OfsThisStockTax.Text = string.Empty;
            this.uLabel_ThisStockPriceTotal.Text = string.Empty;
            this.uLabel_ThisTimePayNrml.Text = string.Empty;

            this.uLabel_StandardPrice_Total.Text = string.Empty;
            this.uLabel_StandardPrice_Avg.Text = string.Empty;
            this.uLabel_StockAmount_Total.Text = string.Empty;
            this.uLabel_StockAmount_Avg.Text = string.Empty;

            this.uLabel_SlipCount.Text = string.Empty;
            this.uLabel_DetailCount.Text = string.Empty;
            this.uLabel_Amount.Text = string.Empty;
            this.uLabel_ConsumeTaxAmount.Text = string.Empty;

            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            // 返品計上タブ
            this.uLabel_rs_SectionName.Text = string.Empty;
            this.uLabel_rs_SupplierName.Text = string.Empty;
            this.tEdit_rs_StockAgentCd.Clear();
            this.uLabel_rs_StockAgentName.Text = string.Empty;
            this.tEdit_rs_ReturnReason.Clear();
            this.tEdit_rs_SlipNote.Clear();
            this.tEdit_rs_SlipNote2.Clear();
            this.tNedit_rs_FeeAmount01.Clear();
            this.tNedit_rs_FeePercent01.Clear();
            this.tNedit_rs_ReturnAmountTotal.Clear();
            this.tNedit_RetGoodsReason.Clear();
            this.tNedit_SlipNoteCode.Clear();
            this.tNedit_SlipNote2Code.Clear();
            _feePercent01 = 0;
            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

        }

        #endregion // 全ての入力欄をクリア

        #region 詳細検索条件エリア

        /// <summary>
        /// 詳細検索条件エリアのフィールドを初期化、ボタンイメージを設定
        /// </summary>
        private void InitializeExtraConditionFields()
        {
            // 検索条件部分
            this.uButton_BlGoodsCode.ImageList = this._imageList16;
            this.uButton_BlGoodsCode.Appearance.Image = (int)Size16_Index.STAR1;

            this.uButton_BlGroupCode.ImageList = this._imageList16;
            this.uButton_BlGroupCode.Appearance.Image = (int)Size16_Index.STAR1;

            this.uButton_MakerCd.ImageList = this._imageList16;
            this.uButton_MakerCd.Appearance.Image = (int)Size16_Index.STAR1;

            this.uButton_StockAgentCode.ImageList = this._imageList16;
            this.uButton_StockAgentCode.Appearance.Image = (int)Size16_Index.STAR1;

            // 2008.12.05 del [8726]
            //this.uButton_StockInputCode.ImageList = this._imageList16;
            //this.uButton_StockInputCode.Appearance.Image = (int)Size16_Index.STAR1;
            // 2008.12.05 del [8726]

            this.uButton_WarehouseCd.ImageList = this._imageList16;
            this.uButton_WarehouseCd.Appearance.Image = (int)Size16_Index.STAR1;

            this.uButton_WarehouseCd.ImageList = this._imageList16;
            this.uButton_WarehouseCd.Appearance.Image = (int)Size16_Index.STAR1;

            this.uButton_SupplierSlipNote1.ImageList = this._imageList16;
            this.uButton_SupplierSlipNote1.Appearance.Image = (int)Size16_Index.STAR1;

            this.uButton_SupplierSlipNote2.ImageList = this._imageList16;
            this.uButton_SupplierSlipNote2.Appearance.Image = (int)Size16_Index.STAR1;
        }

        #endregion // 詳細検索条件エリア

        #region 検索条件クラス→画面
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 DEL
        ///// <summary>
        ///// 検索条件クラスの値を画面上に配置
        ///// </summary>
        ///// <returns>成功:true 失敗:false</returns>
        //private bool SetSearchConditionClass2Display()
        //{
        //    // プライベートレベルに保存された検索条件クラス(SuppPrtPPr)から画面を作成

        //    // **** 基本条件エリア ****

        //    // 拠点コード
        //    this.tEdit_SectionCodeAllowZero.Text = this._suppPrtPpr.SectionCode[0].Trim();
        //    //this.tEdit_SectionCodeAllowZero_Leave(null, null); // 名称変換

        //    // 仕入先コード
        //    this.tNedit_SupplierCd.SetInt(this._suppPrtPpr.SupplierCd);
        //    //this.tNedit_SupplierCd_Leave(null, null); // 名称変換

        //    // 支払先コード
        //    this.tNedit_PayeeCode.SetInt(this._suppPrtPpr.PayeeCode);
        //    //this.tNedit_PayeeCode_Leave(null, null); // 名称変換

        //    // 売上日
        //    this.tDateEdit_StockDateSt.SetDateTime(this._suppPrtPpr.St_StockDate);
        //    this.tDateEdit_StockDateEd.SetDateTime(this._suppPrtPpr.Ed_StockDate);

        //    // 入力日
        //    this.tDateEdit_AddUpADateSt.SetDateTime(this._suppPrtPpr.St_InputDay);
        //    this.tDateEdit_AddUpADateEd.SetDateTime(this._suppPrtPpr.Ed_InputDay);

        //    // 詳細検索条件エリア
        //    // 検索条件がセットされている項目はチェックボックスもONにする

        //    // 伝票区分
        //    if (this._suppPrtPpr.SearchType == 0)
        //    {
        //        // 全て
        //        this.tComboEditor_StockSlipCd.Value = CT_SUPPLIERSLIPCD_NAME_00;
        //    }
        //    else if (this._suppPrtPpr.SearchType == 1)
        //    {
        //        if (this._suppPrtPpr.SupplierFormal[0] == 2)
        //        {
        //            // 発注
        //            this.tComboEditor_StockSlipCd.Value = CT_SUPPLIERSLIPCD_NAME_03;
        //        }
        //        else if (this._suppPrtPpr.SupplierFormal[0] == 1)
        //        {
        //            // 入荷
        //            if (this._suppPrtPpr.SupplierSlipCd.Length > 1)
        //            {
        //                // 入荷／入荷返品
        //                this.tComboEditor_StockSlipCd.Value = CT_SUPPLIERSLIPCD_NAME_08;
        //            }
        //            else
        //            {
        //                if (this._suppPrtPpr.SupplierSlipCd[0] == 10)
        //                {
        //                    // 入荷
        //                    this.tComboEditor_StockSlipCd.Value = CT_SUPPLIERSLIPCD_NAME_04;
        //                }
        //                else
        //                {
        //                    // 入荷返品
        //                    this.tComboEditor_StockSlipCd.Value = CT_SUPPLIERSLIPCD_NAME_07;
        //                }
        //            }
        //        }
        //        else
        //        {
        //            // 仕入
        //            if (this._suppPrtPpr.SupplierSlipCd.Length > 1)
        //            {
        //                // 仕入／仕入返品
        //                this.tComboEditor_StockSlipCd.Value = CT_SUPPLIERSLIPCD_NAME_06;
        //            }
        //            else
        //            {
        //                if (this._suppPrtPpr.SupplierSlipCd[0] == 10)
        //                {
        //                    // 仕入
        //                    this.tComboEditor_StockSlipCd.Value = CT_SUPPLIERSLIPCD_NAME_01;
        //                }
        //                else
        //                {
        //                    // 仕入返品
        //                    this.tComboEditor_StockSlipCd.Value = CT_SUPPLIERSLIPCD_NAME_02;
        //                }
        //            }
        //        }
        //    }
        //    else if (this._suppPrtPpr.SearchType == 2)
        //    {
        //        // 支払
        //        this.tComboEditor_StockSlipCd.Value = CT_SUPPLIERSLIPCD_NAME_05;
        //    }
        //    else
        //    {
        //        // そういう値はない
        //    }

        //    // 伝票番号
        //    if (!String.IsNullOrEmpty(this._suppPrtPpr.PartySaleSlipNum))
        //    {
        //        this.tEdit_PartySalesSlipNum.Text = this._suppPrtPpr.PartySaleSlipNum.Trim();
        //        this.uCheckPartySalesSlipNum.Checked = true;
        //    }

        //    // 仕入SEQ/支払No
        //    if (this._suppPrtPpr.PaymentSlipNo > 0)
        //    {
        //        this.tNedit_PaymentSlipNo.SetInt(this._suppPrtPpr.PaymentSlipNo);
        //        this.uCheckPaymentSlipNo.Checked = true;
        //    }

        //    // 担当者コード
        //    if (!String.IsNullOrEmpty(this._suppPrtPpr.StockAgentCode))
        //    {
        //        this.tEdit_StockAgentCodeInput.Text = this._suppPrtPpr.StockAgentCode.Trim();
        //        this.uCheckSalesEmployeeCd.Checked = true;
        //        this.tEdit_StockAgentCodeInput_Leave(null, null); // 担当者名保存/名称取得
        //    }

        //    // 2008.12.05 del start [8726]
        //    // 発行者コード
        //    //if (!String.IsNullOrEmpty(this._suppPrtPpr.StockInputCode))
        //    //{
        //    //    this.tEdit_StockInputCode.Text = this._suppPrtPpr.StockInputCode.Trim();
        //    //    this.uCheckSalesInputCode.Checked = true;
        //    //    this.tEdit_StockInputCode_Leave(null, null); // 発行者名保存/名称取得
        //    //}
        //    // 2008.12.05 del end [8726]

        //    // UOE発注
        //    //if (this._suppPrtPpr.WayToOrder = 0)
        //    //{
        //    this.tComboEditor_DataSendCode.Value = this._suppPrtPpr.WayToOrder;
        //    this.uCheckDataSendCode.Checked = true;
        //    //}

        //    // 備考１
        //    if (!String.IsNullOrEmpty(this._suppPrtPpr.SupplierSlipNote1))
        //    {
        //        this.tEdit_SupplierSlipNote1.Text = this._suppPrtPpr.SupplierSlipNote1.Trim();
        //        this.uCheckSlipNote.Checked = true;
        //    }

        //    // 備考２
        //    if (!String.IsNullOrEmpty(this._suppPrtPpr.SupplierSlipNote2))
        //    {
        //        this.tEdit_SupplierSlipNote2.Text = this._suppPrtPpr.SupplierSlipNote2.Trim();
        //        this.uCheckSlipNote2.Checked = true;
        //    }

        //    // UOEリマーク1
        //    if (!String.IsNullOrEmpty(this._suppPrtPpr.UoeRemark1))
        //    {
        //        this.tEdit_UoeRemark1.Text = this._suppPrtPpr.UoeRemark1.Trim();
        //        this.uCheckUoeRemark1.Checked = true;
        //    }

        //    // UOEリマーク2
        //    if (!String.IsNullOrEmpty(this._suppPrtPpr.UoeRemark2))
        //    {
        //        this.tEdit_UoeRemark2.Text = this._suppPrtPpr.UoeRemark2.Trim();
        //        this.uCheckUoeRemark2.Checked = true;
        //    }

        //    // BLグループ
        //    if (this._suppPrtPpr.BLGroupCode > 0)
        //    {
        //        this.tEdit_BlGroupCodeInput.Text = this._suppPrtPpr.BLGroupCode.ToString();
        //        this.uCheckBLGroupCode.Checked = true;
        //    }

        //    // BLコード
        //    if (this._suppPrtPpr.BLGoodsCode > 0)
        //    {
        //        this.tEdit_BlGoodsCodeInput.Text = this._suppPrtPpr.BLGoodsCode.ToString();
        //        this.uCheckBLGoodsCode.Checked = true;
        //    }

        //    // 品名
        //    if (!String.IsNullOrEmpty(this._suppPrtPpr.GoodsName))
        //    {
        //        this.tEdit_GoodsName.Text = this._suppPrtPpr.GoodsName.Trim();
        //        this.uCheckGoodsName.Checked = true;
        //    }

        //    // 品番
        //    if (!String.IsNullOrEmpty(this._suppPrtPpr.GoodsNo))
        //    {
        //        this.tEdit_GoodsNo.Text = this._suppPrtPpr.GoodsNo.Trim();
        //        this.uCheckGoodsNo.Checked = true;
        //    }

        //    // メーカーコード
        //    if (this._suppPrtPpr.GoodsMakerCd > 0)
        //    {
        //        this.tEdit_MakerCdInput.Text = this._suppPrtPpr.GoodsMakerCd.ToString();
        //        this.uCheckGoodsMakerCd.Checked = true;
        //    }

        //    // 在庫取寄せ区分
        //    this.tComboEditor_StockOrderDivCd.Value = (object)this._suppPrtPpr.StockOrderDivCd;

        //    // 倉庫コード
        //    if (!String.IsNullOrEmpty(this._suppPrtPpr.WarehouseCode))
        //    {
        //        this.tEdit_WarehouseCdInput.Text = this._suppPrtPpr.WarehouseCode.Trim();
        //        this.uCheckWarehouseCode.Checked = true;
        //    }

        //    // 削除区分
        //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD

        //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

        //    return true;
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 DEL
        #endregion // 検索条件クラス→画面

        #region 画面→検索条件クラス

        /// <summary>
        /// 画面の値を検索条件クラスに保存
        /// </summary>
        /// <returns>正常に変換 true, 値が不正 false</returns>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 処理区分と伝票区分の条件追加</br>
        /// </remarks>
        private bool SetDisplay2SearchConditionClass()
        {
            //int comboValue = 0; // DEL 2013/01/21

            // 検索上限
            this._suppPrtPpr.SearchCnt = CT_LIMIT_ROW + 1;

            // 拠点コード
            string [] secCode; //  = new string[1];
            // 入力されていないまたは"00"(全社)の場合はnullでセット
            if (String.IsNullOrEmpty(this.tEdit_SectionCodeAllowZero.Text.Trim()) || this.tEdit_SectionCodeAllowZero.Text.Trim() == "00")
            {
                secCode = null;
            }
            else
            {
                secCode = new string[1];
                secCode[0] = this.tEdit_SectionCodeAllowZero.Text;//.Trim();
            }
            this._suppPrtPpr.SectionCode = secCode;

            // 企業コード
            this._suppPrtPpr.EnterpriseCode = this._enterpriseCode;

            // 仕入先コード
            this._suppPrtPpr.SupplierCd = this.tNedit_SupplierCd.GetInt();

            // 支払先コード
            this._suppPrtPpr.PayeeCode = this.tNedit_PayeeCode.GetInt();

            // 開始仕入日付
            this._suppPrtPpr.St_StockDate = this.tDateEdit_StockDateSt.GetDateTime();

            // 終了仕入日付
            this._suppPrtPpr.Ed_StockDate = this.tDateEdit_StockDateEd.GetDateTime();

            // 開始入力日付
            this._suppPrtPpr.St_InputDay = this.tDateEdit_AddUpADateSt.GetDateTime();

            // 終了入力日付
            this._suppPrtPpr.Ed_InputDay = this.tDateEdit_AddUpADateEd.GetDateTime();

            // 以下は詳細条件のため、チェックボックスをチェック

            // 受注ステータス
            // 仕入伝票区分
            // 伝票検索区分
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
            //if (this.uCheckSalesSlipCd.Checked)
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 DEL
                //if (this.tComboEditor_StockSlipCd.SelectedIndex > 0)
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( this.tComboEditor_StockSlipCd.SelectedIndex >= 0 )
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD
                {
                    int[] sSupplierFormal = new int[1];
                    int[] sSupplierSlipCd;
                    int iSearchType = 0;

                    // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                    // [仕入情報表示(返品予定は対象外)]のときはいままで通りの検索
                    if ((int)this.tComboEditor_StockRetGdsPlnFlag.SelectedItem.DataValue == 0)
                    {
                    // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                        switch ((int)this.tComboEditor_StockSlipCd.SelectedItem.DataValue)
                        {
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                            default:
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD
                            case 0: // 全て
                                {
                                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 DEL
                                    //sSupplierSlipCd = new int[1];
                                    //iSearchType = 0;
                                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 DEL
                                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                                    sSupplierFormal = new int[] { 0, 1, 2 };
                                    sSupplierSlipCd = new int[] { 10, 20 };
                                    iSearchType = 0;
                                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD
                                    break;
                                }
                            case 1: // 仕入／仕入返品
                                {
                                    sSupplierFormal[0] = 0;
                                    sSupplierSlipCd = new int[2];
                                    sSupplierSlipCd[0] = 10;
                                    sSupplierSlipCd[1] = 20;
                                    iSearchType = 1;
                                    break;
                                }
                            case 2: // 仕入
                                {
                                    sSupplierFormal[0] = 0;
                                    sSupplierSlipCd = new int[1];
                                    sSupplierSlipCd[0] = 10;
                                    iSearchType = 1;
                                    break;
                                }
                            case 3: // 仕入返品
                                {
                                    sSupplierFormal[0] = 0;
                                    sSupplierSlipCd = new int[1];
                                    sSupplierSlipCd[0] = 20;
                                    iSearchType = 1;
                                    break;
                                }
                            case 4: // 発注
                                {
                                    sSupplierFormal[0] = 2;
                                    sSupplierSlipCd = new int[2];
                                    sSupplierSlipCd[0] = 10;
                                    sSupplierSlipCd[1] = 20;
                                    iSearchType = 1;
                                    break;
                                }
                            case 5: // 入荷／入荷返品
                                {
                                    sSupplierFormal[0] = 1;
                                    sSupplierSlipCd = new int[2];
                                    sSupplierSlipCd[0] = 10;
                                    sSupplierSlipCd[1] = 20;
                                    iSearchType = 1;
                                    break;
                                }
                            case 6: // 入荷
                                {
                                    sSupplierFormal[0] = 1;
                                    sSupplierSlipCd = new int[1];
                                    sSupplierSlipCd[0] = 10;
                                    iSearchType = 1;
                                    break;
                                }
                            case 7: // 入荷返品
                                {
                                    sSupplierFormal[0] = 1;
                                    sSupplierSlipCd = new int[1];
                                    sSupplierSlipCd[0] = 20;
                                    iSearchType = 1;
                                    break;
                                }
                            case 8: // 支払
                                {
                                    sSupplierSlipCd = new int[1];
                                    iSearchType = 2;
                                    break;
                                }
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 DEL
                            //default:
                            //    {
                            //        sSupplierSlipCd = new int[1];
                            //        iSearchType = 0;
                            //        break;
                            //    }
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 DEL
                        }
                    // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                    }
                    else
                    {
                        // [仕入返品予定情報のみ表示]のとき
                        switch ((int)this.tComboEditor_StockSlipCd.SelectedItem.DataValue)
                        {
                            default:

                            case 0: // 全て
                                {
                                    sSupplierFormal = new int[] { 3 };
                                    sSupplierSlipCd = new int[] { 10, 20 };
                                    iSearchType = -1;
                                    break;
                                }
                            case 1: // 仕入
                                {
                                    sSupplierFormal = new int[] { 3 };
                                    sSupplierSlipCd = new int[1];
                                    sSupplierSlipCd[0] = 10;
                                    iSearchType = -1;
                                    break;
                                }
                            case 2: // 返品
                                {
                                    sSupplierFormal = new int[] { 3 };
                                    sSupplierSlipCd = new int[1];
                                    sSupplierSlipCd[0] = 20;
                                    iSearchType = -1;
                                    break;
                                }
                        }
                    }
                    // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

                    this._suppPrtPpr.SupplierFormal = sSupplierFormal;
                    this._suppPrtPpr.SupplierSlipCd = sSupplierSlipCd;
                    this._suppPrtPpr.SearchType = iSearchType;
                }
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                else
                {
                    // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                    // [仕入情報表示(返品予定は対象外)]のときはいままで通りの検索
                    if ((int)this.tComboEditor_StockRetGdsPlnFlag.SelectedItem.DataValue == 0)
                    {
                    // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                        // 全て
                        this._suppPrtPpr.SupplierFormal = new int[] { 0, 1, 2 };
                        this._suppPrtPpr.SupplierSlipCd = new int[] { 10, 20 };
                        this._suppPrtPpr.SearchType = 0;

                    // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                    }
                    else
                    {
                        this._suppPrtPpr.SupplierFormal = new int[] { 3 };
                        this._suppPrtPpr.SupplierSlipCd = new int[] { 10, 20 };
                        this._suppPrtPpr.SearchType = -1;
                    }
                    // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD
            }
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 ADD
            // 値引区分
            if ( this.uCheckStockSlipCdDtl.Checked )
            {
                this._suppPrtPpr.StockSlipCdDtl = (int)this.tComboEditor_StockSlipCdDtl.Value;
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 ADD

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
            //// 伝票番号
            //if (this.uCheckPartySalesSlipNum.Checked)
            //{
            //    if (!String.IsNullOrEmpty(this.tEdit_PartySalesSlipNum.Text.Trim()))
            //    {
            //        comboValue = (int)this.tComboEditor_PartySalesSlipNumFuzzy.SelectedItem.DataValue;
            //        if (comboValue == 0)
            //        {
            //            // と一致
            //            this._suppPrtPpr.PartySaleSlipNum = this.tEdit_PartySalesSlipNum.Text.Trim();
            //        }
            //        else if (comboValue == 1)
            //        {
            //            // で始る
            //            this._suppPrtPpr.PartySaleSlipNum = this.tEdit_PartySalesSlipNum.Text.Trim() + "%";
            //        }
            //        else if (comboValue == 2)
            //        {
            //            // を含む
            //            this._suppPrtPpr.PartySaleSlipNum = "%" + this.tEdit_PartySalesSlipNum.Text.Trim() + "%";
            //        }
            //        else if (comboValue == 3)
            //        {
            //            // で終る
            //            this._suppPrtPpr.PartySaleSlipNum = "%" + this.tEdit_PartySalesSlipNum.Text.Trim();
            //        }
            //    }
            //    else
            //    {
            //        this._suppPrtPpr.PartySaleSlipNum = string.Empty;
            //    }
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL

            // 仕入SEQ/支払No
            if (this.uCheckPaymentSlipNo.Checked)
            {
                this._suppPrtPpr.PaymentSlipNo = this.tNedit_PaymentSlipNo.GetInt();
            }

            // 担当者
            if (uCheckSalesEmployeeCd.Checked)
            {
                this._suppPrtPpr.StockAgentCode = this._swStockAgentCode;
            }

            // 2008.12.05 del start [8726]
            // 発行者
            //this._suppPrtPpr.StockInputCode = this._swStockInputCode;
            // 2008.12.05 del end [8726]

            // UOE送信
            if (this.uCheckDataSendCode.Checked)
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 DEL
                //if (this.tComboEditor_DataSendCode.SelectedIndex > 0)
                //{
                //    this._suppPrtPpr.WayToOrder = (int)this.tComboEditor_DataSendCode.SelectedItem.DataValue;
                //}
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                // 0:全て,2以外:通常,2:UOE
                this._suppPrtPpr.WayToOrder = (int)this.tComboEditor_DataSendCode.SelectedItem.DataValue;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD
            }

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
            //// 備考１
            //if (this.uCheckSlipNote.Checked)
            //{
            //    if (!String.IsNullOrEmpty(this.tEdit_SupplierSlipNote1.Text.Trim()))
            //    {
            //        comboValue = (int)this.tComboEditor_SupplierSlipNote1Fuzzy.SelectedItem.DataValue;
            //        if (comboValue == 0)
            //        {
            //            // と一致
            //            this._suppPrtPpr.SupplierSlipNote1 = this.tEdit_SupplierSlipNote1.Text.Trim();
            //        }
            //        else if (comboValue == 1)
            //        {
            //            // で始る
            //            this._suppPrtPpr.SupplierSlipNote1 = this.tEdit_SupplierSlipNote1.Text.Trim() + "%";
            //        }
            //        else if (comboValue == 2)
            //        {
            //            // を含む
            //            this._suppPrtPpr.SupplierSlipNote1 = "%" + this.tEdit_SupplierSlipNote1.Text.Trim() + "%";
            //        }
            //        else if (comboValue == 3)
            //        {
            //            // で終る
            //            this._suppPrtPpr.SupplierSlipNote1 = "%" + this.tEdit_SupplierSlipNote1.Text.Trim();
            //        }
            //    }
            //    else
            //    {
            //        this._suppPrtPpr.SupplierSlipNote1 = string.Empty;
            //    }
            //}

            //// 備考２
            //if (this.uCheckSlipNote2.Checked)
            //{
            //    if (!String.IsNullOrEmpty(this.tEdit_SupplierSlipNote2.Text.Trim()))
            //    {
            //        comboValue = (int)this.tComboEditor_SupplierSlipNote2Fuzzy.SelectedItem.DataValue;
            //        if (comboValue == 0)
            //        {
            //            // と一致
            //            this._suppPrtPpr.SupplierSlipNote2 = this.tEdit_SupplierSlipNote2.Text.Trim();
            //        }
            //        else if (comboValue == 1)
            //        {
            //            // で始る
            //            this._suppPrtPpr.SupplierSlipNote2 = this.tEdit_SupplierSlipNote2.Text.Trim() + "%";
            //        }
            //        else if (comboValue == 2)
            //        {
            //            // を含む
            //            this._suppPrtPpr.SupplierSlipNote2 = "%" + this.tEdit_SupplierSlipNote2.Text.Trim() + "%";
            //        }
            //        else if (comboValue == 3)
            //        {
            //            // で終る
            //            this._suppPrtPpr.SupplierSlipNote2 = "%" + this.tEdit_SupplierSlipNote2.Text.Trim();
            //        }
            //    }
            //    else
            //    {
            //        this._suppPrtPpr.SupplierSlipNote2 = string.Empty;
            //    }
            //}

            //// UOEリマーク１
            //if (this.uCheckUoeRemark1.Checked)
            //{
            //    if (!String.IsNullOrEmpty(this.tEdit_UoeRemark1.Text.Trim()))
            //    {
            //        comboValue = (int)this.tComboEditor_UoeRemark1Fuzzy.SelectedItem.DataValue;
            //        if (comboValue == 0)
            //        {
            //            // と一致
            //            this._suppPrtPpr.UoeRemark1 = this.tEdit_UoeRemark1.Text.Trim();
            //        }
            //        else if (comboValue == 1)
            //        {
            //            // で始る
            //            this._suppPrtPpr.UoeRemark1 = this.tEdit_UoeRemark1.Text.Trim() + "%";
            //        }
            //        else if (comboValue == 2)
            //        {
            //            // を含む
            //            this._suppPrtPpr.UoeRemark1 = "%" + this.tEdit_UoeRemark1.Text.Trim() + "%";
            //        }
            //        else if (comboValue == 3)
            //        {
            //            // で終る
            //            this._suppPrtPpr.UoeRemark1 = "%" + this.tEdit_UoeRemark1.Text.Trim();
            //        }
            //    }
            //    else
            //    {
            //        this._suppPrtPpr.UoeRemark1 = string.Empty;
            //    }
            //}

            //// UOEリマーク２
            //if (this.uCheckUoeRemark2.Checked)
            //{
            //    if (!String.IsNullOrEmpty(this.tEdit_UoeRemark2.Text.Trim()))
            //    {
            //        comboValue = (int)this.tComboEditor_UoeRemark2Fuzzy.SelectedItem.DataValue;
            //        if (comboValue == 0)
            //        {
            //            // と一致
            //            this._suppPrtPpr.UoeRemark2 = this.tEdit_UoeRemark2.Text.Trim();
            //        }
            //        else if (comboValue == 1)
            //        {
            //            // で始る
            //            this._suppPrtPpr.UoeRemark2 = this.tEdit_UoeRemark2.Text.Trim() + "%";
            //        }
            //        else if (comboValue == 2)
            //        {
            //            // を含む
            //            this._suppPrtPpr.UoeRemark2 = "%" + this.tEdit_UoeRemark2.Text.Trim() + "%";
            //        }
            //        else if (comboValue == 3)
            //        {
            //            // で終る
            //            this._suppPrtPpr.UoeRemark2 = "%" + this.tEdit_UoeRemark2.Text.Trim();
            //        }
            //    }
            //    else
            //    {
            //        this._suppPrtPpr.UoeRemark2 = string.Empty;
            //    }
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL

            // BLグループ
            if (this.uCheckBLGroupCode.Checked)
            {
                this._suppPrtPpr.BLGroupCode = this._swBLGroupCode;
            }

            // BLコード
            if (this.uCheckBLGoodsCode.Checked)
            {
                this._suppPrtPpr.BLGoodsCode = this._swBLGoodsCode;
            }

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
            //// 品名
            //if (this.uCheckGoodsName.Checked)
            //{
            //    if (!String.IsNullOrEmpty(this.tEdit_GoodsName.Text.Trim()))
            //    {
            //        comboValue = (int)this.tComboEditor_GoodsNameFuzzy.SelectedItem.DataValue;
            //        if (comboValue == 0)
            //        {
            //            // と一致
            //            this._suppPrtPpr.GoodsName = this.tEdit_GoodsName.Text.Trim();
            //        }
            //        else if (comboValue == 1)
            //        {
            //            // で始る
            //            this._suppPrtPpr.GoodsName = this.tEdit_GoodsName.Text.Trim() + "%";
            //        }
            //        else if (comboValue == 2)
            //        {
            //            // を含む
            //            this._suppPrtPpr.GoodsName = "%" + this.tEdit_GoodsName.Text.Trim() + "%";
            //        }
            //        else if (comboValue == 3)
            //        {
            //            // で終る
            //            this._suppPrtPpr.GoodsName = "%" + this.tEdit_GoodsName.Text.Trim();
            //        }
            //    }
            //    else
            //    {
            //        this._suppPrtPpr.GoodsName = string.Empty;
            //    }
            //}

            //// 品番
            //if (this.uCheckGoodsNo.Checked)
            //{
            //    if (!String.IsNullOrEmpty(this.tEdit_GoodsNo.Text.Trim()))
            //    {
            //        comboValue = (int)this.tComboEditor_GoodsNoFuzzy.SelectedItem.DataValue;
            //        if (comboValue == 0)
            //        {
            //            // と一致
            //            this._suppPrtPpr.GoodsNo = this.tEdit_GoodsNo.Text.Trim();
            //        }
            //        else if (comboValue == 1)
            //        {
            //            // で始る
            //            this._suppPrtPpr.GoodsNo = this.tEdit_GoodsNo.Text.Trim() + "%";
            //        }
            //        else if (comboValue == 2)
            //        {
            //            // を含む
            //            this._suppPrtPpr.GoodsNo = "%" + this.tEdit_GoodsNo.Text.Trim() + "%";
            //        }
            //        else if (comboValue == 3)
            //        {
            //            // で終る
            //            this._suppPrtPpr.GoodsNo = "%" + this.tEdit_GoodsNo.Text.Trim();
            //        }
            //    }
            //    else
            //    {
            //        this._suppPrtPpr.GoodsNo = string.Empty;
            //    }
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL

            // メーカーコード
            if (this.uCheckGoodsMakerCd.Checked)
            {
                this._suppPrtPpr.GoodsMakerCd = this._swGoodsMakerCd;
            }

            // 在庫取寄せ区分
            if (this.uCheckSalesOrderDivCd.Checked)
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 DEL
                //if (this.tComboEditor_StockOrderDivCd.SelectedIndex > 0)
                //{
                //    this._suppPrtPpr.StockOrderDivCd = (int)this.tComboEditor_StockOrderDivCd.SelectedItem.DataValue - 1;
                //}
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                this._suppPrtPpr.StockOrderDivCd = (int)this.tComboEditor_StockOrderDivCd.SelectedItem.DataValue - 1;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD
            }
            else
            {
                this._suppPrtPpr.StockOrderDivCd = -1;
            }

            // 倉庫コード
            if (this.uCheckWarehouseCode.Checked)
            {
                this._suppPrtPpr.WarehouseCode = this._swWarehouseCd;
            }

            // 削除指定区分
            // フィールドのLeaveイベントで取得しているthis._logicalDelDiv
            this._logicalDelDiv = (int)this.tComboEditor_DeleteFlag.SelectedItem.DataValue;
            // ----- ADD 2013/01/21 [仕入返品計上] ---------->>>>>
            // 処理区分
            this._stockRetGdsPlnFlag = (int)this.tComboEditor_StockRetGdsPlnFlag.SelectedItem.DataValue;
            // ----- ADD 2013/01/21 [仕入返品計上] ----------<<<<<
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
            # region [あいまい検索]
            // ↓本来、ＵＩ側で%をセットするのは好ましくないが、現状のリモート処理に合わせる。
            
            // 伝票番号
            this._suppPrtPpr.PartySaleSlipNum = _srPartySalesSlipNum.Replace( "*", "%" );
            // 備考１
            this._suppPrtPpr.SupplierSlipNote1 = _srSupplierSlipNote1.Replace( "*", "%" );
            // 備考２
            this._suppPrtPpr.SupplierSlipNote2 = _srSupplierSlipNote2.Replace( "*", "%" );
            // UOEﾘﾏｰｸ1
            this._suppPrtPpr.UoeRemark1 = _srUOERemark1.Replace( "*", "%" );
            // UOEﾘﾏｰｸ2
            this._suppPrtPpr.UoeRemark2 = _srUOERemark2.Replace( "*", "%" );
            // 品名
            this._suppPrtPpr.GoodsName = _srGoodsName.Replace( "*", "%" );
            // 品番
            this._suppPrtPpr.GoodsNo = _srGoodsNo.Replace( "*", "%" );

            # endregion
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD

            return true;
        }

        #endregion // 画面→検索条件クラス

        #region 列幅自動調整

        /// <summary>
        /// 列幅自動調整チェックボックス
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品予定機能] 赤伝タブ処理追加</br>
        /// </remarks>
        private void uCheckEditor_StatusBar_AutoFillToGridColumn_CheckedChanged(object sender, EventArgs e)
        {
            if (this._selectedMainTabKey == "uTab_SlipList")
            {
                this._columnWidthAutoAdjust_Slip = this.uCheckEditor_StatusBar_AutoFillToGridColumn.Checked;
                autoColumnAdjust(this._columnWidthAutoAdjust_Slip, 0);
            }
            if (this._selectedMainTabKey == "uTab_SlipDetail")
            {
                this._columnWidthAutoAdjust_Detail = this.uCheckEditor_StatusBar_AutoFillToGridColumn.Checked;
                autoColumnAdjust(this._columnWidthAutoAdjust_Detail, 1);
            }
            if (this._selectedMainTabKey == "uTab_RemainList")
            {
                this._columnWidthAutoAdjust_Balance = this.uCheckEditor_StatusBar_AutoFillToGridColumn.Checked;
                autoColumnAdjust(this._columnWidthAutoAdjust_Balance, 2);
            }
            // ----------ADD 2013/01/21----------->>>>>
            if (this._selectedMainTabKey == "uTab_RedSlip")
            {
                this._columnWidthAutoAdjust_RedSlip = this.uCheckEditor_StatusBar_AutoFillToGridColumn.Checked;
                autoColumnAdjust(this._columnWidthAutoAdjust_RedSlip, 3);
            }
            // ----------ADD 2013/01/21-----------<<<<<
        }

        /// <summary>
        /// 列幅自動調整
        /// </summary>
        /// <param name="autoAdjust">自動調整するかどうか</param>
        /// <param name="targetGrid">対象となるグリッド 0:伝票一覧, 1:明細, 2:残高, 3:返品計上</param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品予定機能] 各グリッドの自動調整の必要有無チェックを追加、赤伝タブ処理追加</br>
        /// </remarks>
        private void autoColumnAdjust(bool autoAdjust, int targetGrid)
        {
            switch (targetGrid)
            {
                #region 伝票一覧グリッド
                case 0:
                    {
                        // ----------ADD 2013/01/21----------->>>>>
                        if (this.uGrid_Slip.DisplayLayout.AutoFitStyle == Infragistics.Win.UltraWinGrid.AutoFitStyle.None && !autoAdjust ||
                             this.uGrid_Slip.DisplayLayout.AutoFitStyle != Infragistics.Win.UltraWinGrid.AutoFitStyle.None && autoAdjust) break;
                        // ----------ADD 2013/01/21-----------<<<<<

                        // 自動調整プロパティを調整
                        if (autoAdjust)
                        {
                            this.uGrid_Slip.DisplayLayout.AutoFitStyle = Infragistics.Win.UltraWinGrid.AutoFitStyle.ResizeAllColumns;
                        }
                        else
                        {
                            this.uGrid_Slip.DisplayLayout.AutoFitStyle = Infragistics.Win.UltraWinGrid.AutoFitStyle.None;
                        }
                        // 全ての列でサイズ調整
                        for (int i = 0; i < this.uGrid_Slip.DisplayLayout.Bands[0].Columns.Count; i++)
                        {
                            this.uGrid_Slip.DisplayLayout.Bands[0].Columns[i].PerformAutoResize();
                        }
                        break;
                    }
                #endregion // 伝票一覧グリッド

                #region 明細グリッド
                case 1:
                    {
                        // ----------ADD 2013/01/21----------->>>>>
                        if (this.uGrid_Detail.DisplayLayout.AutoFitStyle == Infragistics.Win.UltraWinGrid.AutoFitStyle.None && !autoAdjust ||
                             this.uGrid_Detail.DisplayLayout.AutoFitStyle != Infragistics.Win.UltraWinGrid.AutoFitStyle.None && autoAdjust) break;
                        // ----------ADD 2013/01/21-----------<<<<<

                        // 自動調整プロパティを調整
                        if (autoAdjust)
                        {
                            this.uGrid_Detail.DisplayLayout.AutoFitStyle = Infragistics.Win.UltraWinGrid.AutoFitStyle.ResizeAllColumns;
                        }
                        else
                        {
                            this.uGrid_Detail.DisplayLayout.AutoFitStyle = Infragistics.Win.UltraWinGrid.AutoFitStyle.None;
                        }
                        // 全ての列でサイズ調整
                        for (int i = 0; i < this.uGrid_Detail.DisplayLayout.Bands[0].Columns.Count; i++)
                        {
                            this.uGrid_Detail.DisplayLayout.Bands[0].Columns[i].PerformAutoResize();
                        }
                        break;
                    }
                #endregion // 明細グリッド

                #region 残高グリッド
                case 2:
                    {
                        // ----------ADD 2013/01/21----------->>>>>
                        if (this.uGrid_BalanceList.DisplayLayout.AutoFitStyle == Infragistics.Win.UltraWinGrid.AutoFitStyle.None && !autoAdjust ||
                             this.uGrid_BalanceList.DisplayLayout.AutoFitStyle != Infragistics.Win.UltraWinGrid.AutoFitStyle.None && autoAdjust) break;
                        // ----------ADD 2013/01/21-----------<<<<<

                        // 自動調整プロパティを調整
                        if (autoAdjust)
                        {
                            this.uGrid_BalanceList.DisplayLayout.AutoFitStyle = Infragistics.Win.UltraWinGrid.AutoFitStyle.ResizeAllColumns;
                        }
                        else
                        {
                            this.uGrid_BalanceList.DisplayLayout.AutoFitStyle = Infragistics.Win.UltraWinGrid.AutoFitStyle.None;
                        }
                        // 全ての列でサイズ調整
                        for (int i = 0; i < this.uGrid_BalanceList.DisplayLayout.Bands[0].Columns.Count; i++)
                        {
                            this.uGrid_BalanceList.DisplayLayout.Bands[0].Columns[i].PerformAutoResize();
                        }
                        break;
                    }
                #endregion // 残高グリッド

                // ----------ADD 2013/01/21----------->>>>>
                #region 返品計上グリッド
                case 3:
                    {
                        if (this.uGrid_RedSlip.DisplayLayout.AutoFitStyle == Infragistics.Win.UltraWinGrid.AutoFitStyle.None && !autoAdjust ||
                             this.uGrid_RedSlip.DisplayLayout.AutoFitStyle != Infragistics.Win.UltraWinGrid.AutoFitStyle.None && autoAdjust) break;

                        // 自動調整プロパティを調整
                        if (autoAdjust)
                        {
                            this.uGrid_RedSlip.DisplayLayout.AutoFitStyle = Infragistics.Win.UltraWinGrid.AutoFitStyle.ResizeAllColumns;
                        }
                        else
                        {
                            this.uGrid_RedSlip.DisplayLayout.AutoFitStyle = Infragistics.Win.UltraWinGrid.AutoFitStyle.None;
                        }
                        // 全ての列でサイズ調整
                        for (int i = 0; i < this.uGrid_RedSlip.DisplayLayout.Bands[0].Columns.Count; i++)
                        {
                            this.uGrid_RedSlip.DisplayLayout.Bands[0].Columns[i].PerformAutoResize();
                        }
                        break;
                    }
                #endregion // 返品計上グリッド
                // ----------ADD 2013/01/21-----------<<<<<

                default: break;
            }
        }

        #endregion // 
        
        #region 必須項目チェック

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
        ///// <summary>
        ///// 必須項目チェック
        ///// </summary>
        ///// <param name="displayWarning">警告メッセージを表示する</param>
        ///// <returns>必須条件を満たす true, 違反 false</returns>
        //private bool checkItemValues(bool displayWarning)
        //{
        //    // 現在仕入日のみが対象
        //    //----------------------
        //    // 項目入力チェック
        //    //----------------------
        //    if (this.tDateEdit_StockDateSt.GetLongDate() == 0)
        //    {
        //        if (displayWarning)
        //        {
        //            TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
        //                "仕入日（開始）" + MSG_ITEM_MUST_BE_INPUT, -1, MessageBoxButtons.OK);
        //        }
        //        else
        //        {
        //            this.uStatusBar_Main.Panels["SplingSplitter"].Text = "仕入日（開始）" + MSG_ITEM_MUST_BE_INPUT;
        //        }
        //        this.tDateEdit_StockDateSt.Focus();
        //        return false;
        //    }

        //    if (this.tDateEdit_StockDateEd.GetLongDate() == 0)
        //    {
        //        if (displayWarning)
        //        {
        //            TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
        //                "仕入日（終了）" + MSG_ITEM_MUST_BE_INPUT, -1, MessageBoxButtons.OK);
        //        }
        //        else
        //        {
        //            this.uStatusBar_Main.Panels["SplingSplitter"].Text = "仕入日（終了）" + MSG_ITEM_MUST_BE_INPUT;
        //        }
        //        this.tDateEdit_StockDateEd.Focus();
        //        return false;
        //    }

        //    //----------------------
        //    // 日付チェック
        //    //----------------------
        //    DateTime tryDate;
        //    if (this.tDateEdit_StockDateSt.GetLongDate() > 0 && !DateTime.TryParse(this.tDateEdit_StockDateSt.GetDateTimeString("yyyy/mm/dd"), out tryDate))
        //    {
        //        if (displayWarning)
        //        {
        //            TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
        //                "仕入日（開始）" + MSG_SHOULD_NOT_DATE, -1, MessageBoxButtons.OK);
        //        }
        //        else
        //        {
        //            this.uStatusBar_Main.Panels["SplingSplitter"].Text = "仕入日（開始）" + MSG_SHOULD_NOT_DATE;
        //        }
        //        this.tDateEdit_StockDateSt.Focus();
        //        return false;
        //    }

        //    if (this.tDateEdit_StockDateEd.GetLongDate() > 0 && !DateTime.TryParse(this.tDateEdit_StockDateEd.GetDateTimeString("yyyy/mm/dd"), out tryDate))
        //    {
        //        if (displayWarning)
        //        {
        //            TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
        //                "仕入日（終了）" + MSG_SHOULD_NOT_DATE, -1, MessageBoxButtons.OK);
        //        }
        //        else
        //        {
        //            this.uStatusBar_Main.Panels["SplingSplitter"].Text = "仕入日（終了）" + MSG_SHOULD_NOT_DATE;
        //        }
        //        this.tDateEdit_StockDateEd.Focus();
        //        return false;
        //    }

        //    if (this.tDateEdit_AddUpADateSt.GetLongDate() > 0 && !DateTime.TryParse(this.tDateEdit_AddUpADateSt.GetDateTimeString("yyyy/MM/dd"), out tryDate))
        //    {
        //        if (displayWarning)
        //        {
        //            TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
        //                "入力日（開始）" + MSG_SHOULD_NOT_DATE, -1, MessageBoxButtons.OK);
        //        }
        //        else
        //        {
        //            this.uStatusBar_Main.Panels["SplingSplitter"].Text = "入力日（開始）" + MSG_SHOULD_NOT_DATE;
        //        }
        //        this.tDateEdit_AddUpADateSt.Focus();
        //        return false;
        //    }

        //    if (this.tDateEdit_AddUpADateEd.GetLongDate() > 0 && !DateTime.TryParse(this.tDateEdit_AddUpADateEd.GetDateTimeString("yyyy/MM/dd"), out tryDate))
        //    {
        //        if (displayWarning)
        //        {
        //            TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
        //                "入力日（終了）" + MSG_SHOULD_NOT_DATE, -1, MessageBoxButtons.OK);
        //        }
        //        else
        //        {
        //            this.uStatusBar_Main.Panels["SplingSplitter"].Text = "入力日（終了）" + MSG_SHOULD_NOT_DATE;
        //        }
        //        this.tDateEdit_AddUpADateEd.Focus();
        //        return false;
        //    }

        //    //----------------------
        //    // 日付の前後チェック
        //    //----------------------
        //    if (this.tDateEdit_AddUpADateSt.GetLongDate() - this.tDateEdit_AddUpADateEd.GetLongDate() > 0)
        //    {
        //        if (displayWarning)
        //        {
        //            TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
        //                MSG_MUST_BE_CORRECT_CALENDER, -1, MessageBoxButtons.OK);
        //        }
        //        else
        //        {
        //            this.uStatusBar_Main.Panels["SplingSplitter"].Text = MSG_MUST_BE_CORRECT_CALENDER;
        //        }
        //        this.tDateEdit_AddUpADateSt.Focus();
        //        return false;
        //    }

        //    if (this.tDateEdit_StockDateSt.GetLongDate() - this.tDateEdit_StockDateEd.GetLongDate() > 0)
        //    {
        //        if (displayWarning)
        //        {
        //            TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
        //                MSG_MUST_BE_CORRECT_CALENDER, -1, MessageBoxButtons.OK);
        //        }
        //        else
        //        {
        //            this.uStatusBar_Main.Panels["SplingSplitter"].Text = MSG_MUST_BE_CORRECT_CALENDER;
        //        }
        //        this.tDateEdit_StockDateSt.Focus();
        //        return false;
        //    }

        //    // 仕入先は警告対象(警告メッセージを出さない場合は実質チェックも行わない)
        //    if (displayWarning)
        //    {
        //        if (String.IsNullOrEmpty(this.tNedit_SupplierCd.Text.Trim()))
        //        {
        //            // Yes/Noメッセージ
        //            DialogResult result = TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
        //                "仕入先コード" + MSG_ITEM_SHOULD_BE_INPUT + MSG_SHALL_WE_CONTINUE, -1, MessageBoxButtons.YesNo);

        //            if (result == DialogResult.No)
        //            {
        //                this.tNedit_SupplierCd.Focus();
        //                return false;
        //            }
        //        }
        //    }

        //    // 全て正常時のみtrue
        //    return true;
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private bool CheckItemValues( out Control errorControl )
        {
            errorControl = null;
            DateGetAcs.CheckDateRangeResult cdrResult;

            //-----------------------------------------------------------
            // 仕入日（開始～終了）
            //-----------------------------------------------------------
            # region [仕入日]
            //if ( CheckDateRangeForSlip( ref tDateEdit_StockDateSt, ref tDateEdit_StockDateEd, out cdrResult, false ) == false ) // DEL 2009/05/11
            if (CheckDateRangeForSlip(ref tDateEdit_StockDateSt, ref tDateEdit_StockDateEd, out cdrResult, true) == false) // ADD 2009/05/11
            {
                string errorMessage = string.Empty;
                switch ( cdrResult )
                {
                    case DateGetAcs.CheckDateRangeResult.ErrorOfStartInvalid:
                        errorMessage = MSG_ST_STOCKDATE_ERROR; // ADD 2009/05/11
                        errorControl = tDateEdit_StockDateSt; // ADD 2009/05/11
                        break;
                    case DateGetAcs.CheckDateRangeResult.ErrorOfStartNoInput:
                        //errorMessage = MSG_ST_STOCKDATE_ERROR; // DEL 2009/05/11
                        //errorControl = tDateEdit_StockDateSt; // DEL 2009/05/11
                        break;
                    case DateGetAcs.CheckDateRangeResult.ErrorOfEndInvalid:
                        errorMessage = MSG_ED_STOCKDATE_ERROR; // ADD 2009/05/11
                        errorControl = tDateEdit_StockDateEd; // ADD 2009/05/11
                        break;
                    case DateGetAcs.CheckDateRangeResult.ErrorOfEndNoInput:
                        //errorMessage = MSG_ED_STOCKDATE_ERROR; // DEL 2009/05/11
                        //errorControl = tDateEdit_StockDateSt; // DEL 2009/05/11
                        break;
                    case DateGetAcs.CheckDateRangeResult.ErrorOfRangeOver:
                        errorMessage = MSG_STOCKDATE_RANGE_ERROR;
                        errorControl = tDateEdit_StockDateSt;
                        break;
                    case DateGetAcs.CheckDateRangeResult.ErrorOfReverse:
                        errorMessage = MSG_MUST_BE_CORRECT_CALENDER;
                        errorControl = tDateEdit_StockDateSt;
                        break;
                }

                if ( errorMessage != string.Empty && errorControl != null )
                {
                    //// フォーカス移動
                    //errorControl.Focus();

                    // メッセージ表示
                    TMsgDisp.Show( this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                        errorMessage, -1, MessageBoxButtons.OK );

                    return false; // ADD 2009/05/11
                }
                //return false; // DEL 2009/05/11
            }
            # endregion

            //-----------------------------------------------------------
            // 入力日（開始～終了）
            //-----------------------------------------------------------
            # region [入力日]
            // --- CHG 2009/02/25 障害ID:7882対応------------------------------------------------------>>>>>
            //if ( CheckDateRangeForSlip( ref tDateEdit_AddUpADateSt, ref tDateEdit_AddUpADateEd, out cdrResult, true ) == false )
            //{
            //    string errorMessage = string.Empty;
            //    switch ( cdrResult )
            //    {
            //        case DateGetAcs.CheckDateRangeResult.ErrorOfStartInvalid:
            //        case DateGetAcs.CheckDateRangeResult.ErrorOfStartNoInput:
            //            errorMessage = MSG_ST_INPUTDATE_ERROR;
            //            errorControl = tDateEdit_AddUpADateSt;
            //            break;
            //        case DateGetAcs.CheckDateRangeResult.ErrorOfEndInvalid:
            //        case DateGetAcs.CheckDateRangeResult.ErrorOfEndNoInput:
            //            errorMessage = MSG_ED_INPUTDATE_ERROR;
            //            errorControl = tDateEdit_AddUpADateEd;
            //            break;
            //        case DateGetAcs.CheckDateRangeResult.ErrorOfReverse:
            //            errorMessage = MSG_MUST_BE_CORRECT_CALENDER;
            //            errorControl = tDateEdit_AddUpADateSt;
            //            break;
            //    }

            //    if ( errorMessage != string.Empty && errorControl != null )
            //    {
            //        //// フォーカス移動
            //        //errorControl.Focus();

            //        // メッセージ表示
            //        TMsgDisp.Show( this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
            //            errorMessage, -1, MessageBoxButtons.OK );
            //    }
            //    return false;
            //}

            string errorMessage2 = string.Empty;
            DateGetAcs.CheckDateResult cdResult;

            if (this.tDateEdit_AddUpADateSt.GetLongDate() != 0)
            {
                cdResult = this._dateGetAcs.CheckDate(ref this.tDateEdit_AddUpADateSt, true);
                if (cdResult == DateGetAcs.CheckDateResult.ErrorOfInvalid)
                {
                    errorMessage2 = MSG_ST_INPUTDATE_ERROR;
                    errorControl = tDateEdit_AddUpADateSt;
                }
            }

            if (this.tDateEdit_AddUpADateEd.GetLongDate() != 0)
            {
                cdResult = this._dateGetAcs.CheckDate(ref this.tDateEdit_AddUpADateEd, true);
                if (cdResult == DateGetAcs.CheckDateResult.ErrorOfInvalid)
                {
                    errorMessage2 = MSG_ED_INPUTDATE_ERROR;
                    errorControl = tDateEdit_AddUpADateEd;
                }
            }

            if (errorMessage2 != string.Empty && errorControl != null)
            {
                // メッセージ表示
                TMsgDisp.Show( this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                    errorMessage2, -1, MessageBoxButtons.OK);

                return false;
            }
            // --- CHG 2009/02/25 障害ID:7882対応------------------------------------------------------<<<<<
            # endregion

            // 全て正常時のみtrue
            return true;
        }
        /// <summary>
        /// 日付範囲チェック処理（残高一覧表示の対象年月用）
        /// </summary>
        /// <param name="stEdit"></param>
        /// <param name="edEdit"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        private bool CheckDateRange( ref TDateEdit stEdit, ref TDateEdit edEdit, out DateGetAcs.CheckDateRangeResult result )
        {
            result = _dateGetAcs.CheckDateRange( DateGetAcs.YmdType.Year, 1, ref stEdit, ref edEdit, false );
            return (result == DateGetAcs.CheckDateRangeResult.OK);
        }
        /// <summary>
        /// 日付範囲チェック処理（伝票・明細抽出の売上日付・入力日付用）
        /// </summary>
        /// <param name="stEdit"></param>
        /// <param name="edEdit"></param>
        /// <param name="result"></param>
        /// <param name="allowNoInput"></param>
        /// <returns></returns>
        private bool CheckDateRangeForSlip( ref TDateEdit stEdit, ref TDateEdit edEdit, out DateGetAcs.CheckDateRangeResult result, bool allowNoInput )
        {
            int range = 3;
            if ( allowNoInput ) range = 0;

            result = _dateGetAcs.CheckDateRange( DateGetAcs.YmdType.YearMonth, range, ref stEdit, ref edEdit, allowNoInput );
            return (result == DateGetAcs.CheckDateRangeResult.OK);
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        #endregion // 必須項目チェック

        #region 詳細検索条件非表示

        /// <summary>
        /// 詳細検索条件エリアのコントロールをすべて非表示
        /// </summary>
        private void SetAllDetailSearchCondition2Hidden()
        {
            // 伝票区分
            this.tComboEditor_StockSlipCd.Visible = false;
            this.uLabel_StockSlipCdTitle.Visible = false;

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 ADD
            // 値引区分
            this.tComboEditor_StockSlipCdDtl.Visible = false;
            this.uLabel_StockSlipCdDtl.Visible = false;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 ADD

            // 伝票番号
            this.uLabel_PartySalesSlipNumTitle.Visible = false;
            this.tEdit_PartySalesSlipNum.Visible = false;
            this.tComboEditor_PartySalesSlipNumFuzzy.Visible = false;
            
            // 仕入SEQ/支払No
            this.uLabel_PaymentSlipNoTitle.Visible = false;
            this.tNedit_PaymentSlipNo.Visible = false;
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
            this.uLabel_PaymentSlipNoFooter.Visible = false;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD

            // 担当者
            this.uLabel_StockAgentCodeTitle.Visible = false;
            this.tEdit_StockAgentCodeInput.Visible = false;
            this.uButton_StockAgentCode.Visible = false;

            // 2008.12.05 del start [8726]
            // 発行者
            //this.uLabel_StockInputCodeTitle.Visible = false;
            //this.tEdit_StockInputCode.Visible = false;
            //this.uButton_StockInputCode.Visible = false;
            // 2008.12.05 del end [8726]

            // UOE送信
            this.uLabel_DataSendCodeTitle.Visible = false;
            this.tComboEditor_DataSendCode.Visible = false;

            // 備考1
            this.uLabel_SupplierSlipNote1Title.Visible = false;
            this.tEdit_SupplierSlipNote1.Visible = false;
            this.uButton_SupplierSlipNote1.Visible = false;
            this.tComboEditor_SupplierSlipNote1Fuzzy.Visible = false;

            // 備考2
            this.uLabel_SupplierSlipNote2Title.Visible = false;
            this.tEdit_SupplierSlipNote2.Visible = false;
            this.uButton_SupplierSlipNote2.Visible = false;
            this.tComboEditor_SupplierSlipNote2Fuzzy.Visible = false;

            // UOEリマーク1
            this.uLabel_UoeRemark1Title.Visible = false;
            this.tEdit_UoeRemark1.Visible = false;
            this.tComboEditor_UoeRemark1Fuzzy.Visible = false;

            // UOEリマーク2
            this.uLabel_UoeRemark2Title.Visible = false;
            this.tEdit_UoeRemark2.Visible = false;
            this.tComboEditor_UoeRemark2Fuzzy.Visible = false;

            // BLグループ
            this.uLabel_BlGroupCodeTitle.Visible = false;
            this.tEdit_BlGroupCodeInput.Visible = false;
            this.uButton_BlGroupCode.Visible = false;

            // BLコード
            this.uLabel_BlGoodsCodeTitle.Visible = false;
            this.tEdit_BlGoodsCodeInput.Visible = false;
            this.uButton_BlGoodsCode.Visible = false;

            // 品名
            this.uLabel_GoodsNameTitle.Visible = false;
            this.tEdit_GoodsName.Visible = false;
            this.tComboEditor_GoodsNameFuzzy.Visible = false;

            // 品番
            this.uLabel_GoodsNoTitle.Visible = false;
            this.tEdit_GoodsNo.Visible = false;
            this.tComboEditor_GoodsNoFuzzy.Visible = false;

            // メーカーコード
            this.uLabel_MakerCdTitle.Visible = false;
            this.tEdit_MakerCdInput.Visible = false;
            this.uButton_MakerCd.Visible = false;

            // 在庫取寄区分
            this.uLabel_StockOrderDivCdTitle.Visible = false;
            this.tComboEditor_StockOrderDivCd.Visible = false;

            // 倉庫コード
            this.uLabel_WarehouseCodeTitle.Visible = false;
            this.tEdit_WarehouseCdInput.Visible = false;
            this.uButton_WarehouseCd.Visible = false;

            // 削除区分
            this.uLabel_DeleteFlagTitle.Visible = false;
            this.tComboEditor_DeleteFlag.Visible = false;
        }

        #endregion // 詳細検索条件非表示

        #region グリッド作成

        /// <summary>
        /// グリッド列の初期化
        /// </summary>
        /// <param name="Columns"></param>
        /// <param name="tabNo">対象となるタブ 0:伝票一覧, 1:明細, 2:残高, 3:出力用残高リスト, 4:赤伝</param>
        /// <remarks>
        /// <br>Update Note : 2010/07/20 chenyd</br>
        /// <br>           　テキスト出力対応</br>
        /// <br>Update Note : 2010/09/08 朱 猛</br>
        /// <br>           　障害ID:14441対応</br>
        /// <br>Update Note: 2010/09/14 tianjw</br>
        /// <br>           　テキスト出力対応</br>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>             [仕入返品予定機能] 赤伝タブ処理追加</br>
        /// </remarks>
        private void InitializeGridColumns(Infragistics.Win.UltraWinGrid.ColumnsCollection Columns, int tabNo)
        {
            // 表示形式のある列で使用
            string formatCurrency   = "#,##0;-#,##0;";
            //string formatPrice      = "#,##0.00";
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 DEL
            //string formatCount      = "0.00";
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
            string formatFraction = "#,##0.00;-#,##0.00;";
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD
            string formatDate       = "yyyy/MM/dd";
            //string formatYearMonth  = "yyyy/MM";
            
            string formatConsTaxRate = "0%";    // ADD 時シン 2020/03/11 PMKOBETSU-2912
            
            // 表示位置初期値
            int visiblePosition = 1;

            // 一旦、全ての列を非表示にする。
            foreach (Infragistics.Win.UltraWinGrid.UltraGridColumn column in Columns)
            {
                //非表示設定
                column.Hidden = true;
                //column.AllowRowFiltering = Infragistics.Win.DefaultableBoolean.True; // DEL 2013/01/21
                // ----------ADD 2013/01/21----------->>>>>
                if (tabNo != 4)
                {
                    column.AllowRowFiltering = Infragistics.Win.DefaultableBoolean.True;
                }
                else
                {
                    column.AllowRowFiltering = Infragistics.Win.DefaultableBoolean.False;
                }
                // ----------ADD 2013/01/21-----------<<<<<

                column.AutoEdit = false;
                column.CellActivation = Infragistics.Win.UltraWinGrid.Activation.NoEdit;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                column.ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;
                column.Header.Fixed = false;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD
            }

            //--------------------------------------------------------------------------------
            //  表示するカラム情報
            //--------------------------------------------------------------------------------

            switch (tabNo)
            {
                case 0:
                    {
                        #region 伝票表示タブ

                        // ----------ADD 2013/01/21----------->>>>>
                        // 選択チェックボックス
                        // カラムチューザ：対象外　フォーマット：通常
                        Columns[this._detailDataSet.StcList.SelectionColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.SelectionColumn.ColumnName].Width = 50;
                        Columns[this._detailDataSet.StcList.SelectionColumn.ColumnName].Style = Infragistics.Win.UltraWinGrid.ColumnStyle.CheckBox;
                        Columns[this._detailDataSet.StcList.SelectionColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Center;
                        Columns[this._detailDataSet.StcList.SelectionColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.SelectionColumn.ColumnName].Header.Caption = "選択";
                        Columns[this._detailDataSet.StcList.SelectionColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.SelectionColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        Columns[this._detailDataSet.StcList.SelectionColumn.ColumnName].CellAppearance.BackColor = _margedCellAppearance.BackColor;
                        Columns[this._detailDataSet.StcList.SelectionColumn.ColumnName].CellAppearance.BackColor2 = _margedCellAppearance.BackColor2;
                        Columns[this._detailDataSet.StcList.SelectionColumn.ColumnName].Header.Fixed = true;
                        // ----------ADD 2013/01/21-----------<<<<<

                        // データ区分（出金・入金）
                        // カラムチューザ：対象外　フォーマット：表示しない
                        Columns[this._detailDataSet.StcList.DataDivColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.StcList.DataDivColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;

                        // 伝票日付
                        // カラムチューザ：対象　　フォーマット：日付（yyyy/mm/dd）
                        Columns[this._detailDataSet.StcList.StockDateColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.StockDateColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcList.StockDateColumn.ColumnName].Format = formatDate;
                        Columns[this._detailDataSet.StcList.StockDateColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcList.StockDateColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.StockDateColumn.ColumnName].Header.Caption = "伝票日付";
                        Columns[this._detailDataSet.StcList.StockDateColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.StockDateColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                        Columns[this._detailDataSet.StcList.StockDateColumn.ColumnName].Header.Fixed = true;
                        SettingMergedCell( Columns[this._detailDataSet.StcList.StockDateColumn.ColumnName] );
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                        // 伝票番号
                        // カラムチューザ：対象　　フォーマット：文字列
                        Columns[this._detailDataSet.StcList.PartySaleSlipNumColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.PartySaleSlipNumColumn.ColumnName].Width = 110;
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 DEL
                        //Columns[this._detailDataSet.StcList.PartySaleSlipNumColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                        Columns[this._detailDataSet.StcList.PartySaleSlipNumColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD
                        Columns[this._detailDataSet.StcList.PartySaleSlipNumColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.PartySaleSlipNumColumn.ColumnName].Header.Caption = "伝票番号";
                        Columns[this._detailDataSet.StcList.PartySaleSlipNumColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.PartySaleSlipNumColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                        Columns[this._detailDataSet.StcList.PartySaleSlipNumColumn.ColumnName].Header.Fixed = true;
                        SettingMergedCell( Columns[this._detailDataSet.StcList.PartySaleSlipNumColumn.ColumnName] );
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                        // 区分
                        // カラムチューザ：対象外　フォーマット：文字列
                        Columns[this._detailDataSet.StcList.SupplierSlipCdColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.StcList.SupplierSlipCdColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;

                        // 区分名
                        // カラムチューザ：対象　　フォーマット：文字列
                        Columns[this._detailDataSet.StcList.SupplierSlipCdNameColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.SupplierSlipCdNameColumn.ColumnName].Width = 80;
                        Columns[this._detailDataSet.StcList.SupplierSlipCdNameColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcList.SupplierSlipCdNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.SupplierSlipCdNameColumn.ColumnName].Header.Caption = "区分";
                        Columns[this._detailDataSet.StcList.SupplierSlipCdNameColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.SupplierSlipCdNameColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 担当者名
                        // カラムチューザ：対象　　フォーマット：文字列
                        Columns[this._detailDataSet.StcList.StockAgentNameColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.StockAgentNameColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcList.StockAgentNameColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcList.StockAgentNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.StockAgentNameColumn.ColumnName].Header.Caption = "担当者名";
                        Columns[this._detailDataSet.StcList.StockAgentNameColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.StockAgentNameColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 金額
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.StcList.StockTtlPricTaxExcColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.StockTtlPricTaxExcColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcList.StockTtlPricTaxExcColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.StcList.StockTtlPricTaxExcColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcList.StockTtlPricTaxExcColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.StockTtlPricTaxExcColumn.ColumnName].Header.Caption = "金額";
                        Columns[this._detailDataSet.StcList.StockTtlPricTaxExcColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.StockTtlPricTaxExcColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 消費税
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.StcList.ConsumeTaxColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.ConsumeTaxColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcList.ConsumeTaxColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.StcList.ConsumeTaxColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcList.ConsumeTaxColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.ConsumeTaxColumn.ColumnName].Header.Caption = "消費税";
                        Columns[this._detailDataSet.StcList.ConsumeTaxColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.ConsumeTaxColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // ADD 時シン 2020/03/11 PMKOBETSU-2912 -------->>>>> 
                        Columns[this._detailDataSet.StcList.SupplierConsTaxRateColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.SupplierConsTaxRateColumn.ColumnName].Width = 80;
                        Columns[this._detailDataSet.StcList.SupplierConsTaxRateColumn.ColumnName].Format = formatConsTaxRate;
                        Columns[this._detailDataSet.StcList.SupplierConsTaxRateColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcList.SupplierConsTaxRateColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.SupplierConsTaxRateColumn.ColumnName].Header.Caption = "消費税率";
                        Columns[this._detailDataSet.StcList.SupplierConsTaxRateColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.SupplierConsTaxRateColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // ADD 時シン 2020/03/11 PMKOBETSU-2912 --------<<<<<

                         // 備考１
                        // カラムチューザ：対象　　フォーマット：文字列
                        Columns[this._detailDataSet.StcList.SupplierSlipNote1Column.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.SupplierSlipNote1Column.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcList.SupplierSlipNote1Column.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcList.SupplierSlipNote1Column.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.SupplierSlipNote1Column.ColumnName].Header.Caption = "備考１";
                        Columns[this._detailDataSet.StcList.SupplierSlipNote1Column.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.SupplierSlipNote1Column.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 備考２
                        // カラムチューザ：対象　　フォーマット：文字列
                        Columns[this._detailDataSet.StcList.SupplierSlipNote2Column.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.SupplierSlipNote2Column.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcList.SupplierSlipNote2Column.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcList.SupplierSlipNote2Column.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.SupplierSlipNote2Column.ColumnName].Header.Caption = "備考２";
                        Columns[this._detailDataSet.StcList.SupplierSlipNote2Column.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.SupplierSlipNote2Column.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 拠点コード
                        // カラムチューザ：対象外　フォーマット：非表示
                        Columns[this._detailDataSet.StcList.SectionCdColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.StcList.SectionCdColumn.ColumnName].Width = 80;
                        Columns[this._detailDataSet.StcList.SectionCdColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcList.SectionCdColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.SectionCdColumn.ColumnName].Header.Caption = "拠点コード";
                        Columns[this._detailDataSet.StcList.SectionCdColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.SectionCdColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 拠点
                        // カラムチューザ：対象　　フォーマット：文字列
                        Columns[this._detailDataSet.StcList.SectionGuideNmColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.SectionGuideNmColumn.ColumnName].Width = 80;
                        Columns[this._detailDataSet.StcList.SectionGuideNmColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcList.SectionGuideNmColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.SectionGuideNmColumn.ColumnName].Header.Caption = "拠点名";
                        Columns[this._detailDataSet.StcList.SectionGuideNmColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.SectionGuideNmColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 2008.12.05 del start [8726]
                        // 発行者
                        //// カラムチューザ：対象　　フォーマット：文字列
                        //Columns[this._detailDataSet.StcList.StockInputNameColumn.ColumnName].Hidden = false;
                        //Columns[this._detailDataSet.StcList.StockInputNameColumn.ColumnName].Width = 100;
                        //Columns[this._detailDataSet.StcList.StockInputNameColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        //Columns[this._detailDataSet.StcList.StockInputNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        //Columns[this._detailDataSet.StcList.StockInputNameColumn.ColumnName].Header.Caption = "発行者";
                        //Columns[this._detailDataSet.StcList.StockInputNameColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        //Columns[this._detailDataSet.StcList.StockInputNameColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // 2008.12.05 del end [8726]

                        // 仕入先コード
                        // カラムチューザ：対象　　フォーマット：文字列(数値)
                        Columns[this._detailDataSet.StcList.SupplierCdColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.SupplierCdColumn.ColumnName].Width = 80;
                        Columns[this._detailDataSet.StcList.SupplierCdColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcList.SupplierCdColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.SupplierCdColumn.ColumnName].Header.Caption = "仕入先コード";
                        Columns[this._detailDataSet.StcList.SupplierCdColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.SupplierCdColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                        Columns[this._detailDataSet.StcList.SupplierCdColumn.ColumnName].Format = "000000;-000000;''";
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

                        // 仕入先名
                        // カラムチューザ：対象　　フォーマット：文字列
                        Columns[this._detailDataSet.StcList.SupplierSnmColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.SupplierSnmColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcList.SupplierSnmColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcList.SupplierSnmColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.SupplierSnmColumn.ColumnName].Header.Caption = "仕入先名";
                        Columns[this._detailDataSet.StcList.SupplierSnmColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.SupplierSnmColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // UOEリマーク1
                        // カラムチューザ：対象　　フォーマット：文字列
                        Columns[this._detailDataSet.StcList.UoeRemark1Column.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.UoeRemark1Column.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcList.UoeRemark1Column.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcList.UoeRemark1Column.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.UoeRemark1Column.ColumnName].Header.Caption = "UOEリマーク1";
                        Columns[this._detailDataSet.StcList.UoeRemark1Column.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.UoeRemark1Column.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // UOEリマーク2
                        // カラムチューザ：対象　　フォーマット：文字列
                        Columns[this._detailDataSet.StcList.UoeRemark2Column.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.UoeRemark2Column.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcList.UoeRemark2Column.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcList.UoeRemark2Column.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.UoeRemark2Column.ColumnName].Header.Caption = "UOEリマーク2";
                        Columns[this._detailDataSet.StcList.UoeRemark2Column.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.UoeRemark2Column.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 仕入SEQ/支払No
                        // カラムチューザ：対象　　フォーマット：文字列
                        Columns[this._detailDataSet.StcList.SupplierSlipNoColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.SupplierSlipNoColumn.ColumnName].Width = 100;
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
                        //Columns[this._detailDataSet.StcList.SupplierSlipNoColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                        Columns[this._detailDataSet.StcList.SupplierSlipNoColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD
                        Columns[this._detailDataSet.StcList.SupplierSlipNoColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.SupplierSlipNoColumn.ColumnName].Header.Caption = "仕入SEQ/支払No";
                        Columns[this._detailDataSet.StcList.SupplierSlipNoColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.SupplierSlipNoColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                        Columns[this._detailDataSet.StcList.SupplierSlipNoColumn.ColumnName].Format = "000000000;-000000000;''";
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD

                        // 計上日
                        // カラムチューザ：対象　　フォーマット：文字列(数値)
                        Columns[this._detailDataSet.StcList.StockAddUpADateColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcList.StockAddUpADateColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcList.StockAddUpADateColumn.ColumnName].Format = formatDate;
                        Columns[this._detailDataSet.StcList.StockAddUpADateColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcList.StockAddUpADateColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcList.StockAddUpADateColumn.ColumnName].Header.Caption = "計上日";
                        Columns[this._detailDataSet.StcList.StockAddUpADateColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcList.StockAddUpADateColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
                        //// 買掛区分名
                        //// カラムチューザ：対象　　フォーマット：文字列(数値)
                        //Columns[this._detailDataSet.StcList.AccPayDivCdNameColumn.ColumnName].Hidden = false;
                        //Columns[this._detailDataSet.StcList.AccPayDivCdNameColumn.ColumnName].Width = 70;
                        //Columns[this._detailDataSet.StcList.AccPayDivCdNameColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        //Columns[this._detailDataSet.StcList.AccPayDivCdNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        //Columns[this._detailDataSet.StcList.AccPayDivCdNameColumn.ColumnName].Header.Caption = "買掛区分";
                        //Columns[this._detailDataSet.StcList.AccPayDivCdNameColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        //Columns[this._detailDataSet.StcList.AccPayDivCdNameColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL

                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                        //// 赤伝区分
                        //// カラムチューザ：対象　　フォーマット：文字列(数値)
                        //Columns[this._detailDataSet.StcList.DebitNoteDivColumn.ColumnName].Hidden = false;
                        //Columns[this._detailDataSet.StcList.DebitNoteDivColumn.ColumnName].Width = 50;
                        //Columns[this._detailDataSet.StcList.DebitNoteDivColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        //Columns[this._detailDataSet.StcList.DebitNoteDivColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        //Columns[this._detailDataSet.StcList.DebitNoteDivColumn.ColumnName].Header.Caption = "赤伝区分";
                        //Columns[this._detailDataSet.StcList.DebitNoteDivColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        //Columns[this._detailDataSet.StcList.DebitNoteDivColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL

                        //--------------------------------------------------------------------------------
                        //  カラムチューザを有効にする
                        //--------------------------------------------------------------------------------
                        this.uGrid_Slip.DisplayLayout.ColumnChooserEnabled = Infragistics.Win.DefaultableBoolean.True;
                        this.uGrid_Slip.DisplayLayout.Override.RowSelectorHeaderStyle = Infragistics.Win.UltraWinGrid.RowSelectorHeaderStyle.ColumnChooserButton;
                        this.uGrid_Slip.DisplayLayout.Override.RowSelectorWidth = 24;

                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 DEL
                        //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 ADD
                        //this.uGrid_Slip.DisplayLayout.ColumnChooserEnabled = Infragistics.Win.DefaultableBoolean.False;
                        //this.uGrid_Slip.BeforeColumnChooserDisplayed += new Infragistics.Win.UltraWinGrid.BeforeColumnChooserDisplayedEventHandler( uGrid_BeforeColumnChooserDisplayed );
                        //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 ADD
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 ADD
                        _gridColumnChooserControl.Add( this.uGrid_Slip );
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 ADD


                        // カラムチューザボタンの外観を設定
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                        this.uGrid_Slip.DisplayLayout.Override.RowSelectorAppearance.BackColor = Color.FromArgb( 89, 135, 214 );
                        this.uGrid_Slip.DisplayLayout.Override.RowSelectorAppearance.BackColor2 = Color.FromArgb( 7, 59, 150 );
                        this.uGrid_Slip.DisplayLayout.Override.RowSelectorAppearance.BackGradientStyle = GradientStyle.Vertical;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                        this.uGrid_Slip.DisplayLayout.Override.RowSelectorHeaderAppearance.BackColor = this.uGrid_Slip.DisplayLayout.Override.RowSelectorAppearance.BackColor;
                        this.uGrid_Slip.DisplayLayout.Override.RowSelectorHeaderAppearance.BackColor2 = this.uGrid_Slip.DisplayLayout.Override.RowSelectorAppearance.BackColor2;
                        this.uGrid_Slip.DisplayLayout.Override.RowSelectorHeaderAppearance.BackGradientStyle = this.uGrid_Slip.DisplayLayout.Override.RowSelectorAppearance.BackGradientStyle;
                        this.uGrid_Slip.ImageList = Broadleaf.Library.Resources.IconResourceManagement.ImageList16;
                        this.uGrid_Slip.DisplayLayout.Override.RowSelectorHeaderAppearance.Image = (int)Broadleaf.Library.Resources.Size16_Index.STAR1;

                        // 列幅自動調整を設定値にしたがって行う
                        autoColumnAdjust(_columnWidthAutoAdjust_Slip, 0);

                        #endregion // 伝票表示タブ
                        break;
                    }
                case 1:
                    {
                        #region 明細タブ

                        // ----------ADD 2013/01/21----------->>>>>
                        // 選択チェックボックス
                        // カラムチューザ：対象外　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Width = 50;
                        Columns[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Style = Infragistics.Win.UltraWinGrid.ColumnStyle.CheckBox;
                        Columns[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Center;
                        Columns[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Header.Caption = "選択";
                        Columns[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        Columns[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].CellAppearance.BackColor = _margedCellAppearance.BackColor;
                        Columns[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].CellAppearance.BackColor2 = _margedCellAppearance.BackColor2;
                        Columns[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Header.Fixed = true;
                        // ----------ADD 2013/01/21-----------<<<<<

                        // データ区分（出金・入金）
                        // カラムチューザ：対象外　フォーマット：表示しない
                        Columns[this._detailDataSet.StcDetail.DataDivColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.StcDetail.DataDivColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;

                        // 行No
                        // 非表示
                        // カラムチューザ：対象外　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.RowNoColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.StcDetail.RowNoColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;

                        // 伝票日付
                        // カラムチューザ：対象　　フォーマット：日付（yyyy/mm/dd）
                        Columns[this._detailDataSet.StcDetail.StockDateColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.StockDateColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.StockDateColumn.ColumnName].Format = formatDate;
                        Columns[this._detailDataSet.StcDetail.StockDateColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.StockDateColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.StockDateColumn.ColumnName].Header.Caption = "伝票日付";
                        Columns[this._detailDataSet.StcDetail.StockDateColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.StockDateColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                        Columns[this._detailDataSet.StcDetail.StockDateColumn.ColumnName].Header.Fixed = true;
                        SettingMergedCell( Columns[this._detailDataSet.StcDetail.StockDateColumn.ColumnName] );
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                        // 伝票番号
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName].Width = 100;
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 DEL
                        //Columns[this._detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                        Columns[this._detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD
                        Columns[this._detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName].Header.Caption = "伝票番号";
                        Columns[this._detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                        Columns[this._detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName].Header.Fixed = true;
                        SettingMergedCell( Columns[this._detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName] );
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                        // 行No
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.StockRowNoColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.StockRowNoColumn.ColumnName].Width = 40;
                        Columns[this._detailDataSet.StcDetail.StockRowNoColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcDetail.StockRowNoColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.StockRowNoColumn.ColumnName].Header.Caption = "行No";
                        Columns[this._detailDataSet.StcDetail.StockRowNoColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.StockRowNoColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 ADD
                        Columns[this._detailDataSet.StcDetail.StockRowNoColumn.ColumnName].Format = "#";
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 ADD

                        // 区分
                        // カラムチューザ：対象外　フォーマット：非表示
                        Columns[this._detailDataSet.StcDetail.SupplierSlipCdColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipCdColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;

                        // 区分名
                        // カラムチューザ：対象　　フォーマット：文字列
                        Columns[this._detailDataSet.StcDetail.SupplierSlipCdNameColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipCdNameColumn.ColumnName].Width = 80;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipCdNameColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipCdNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipCdNameColumn.ColumnName].Header.Caption = "区分";
                        Columns[this._detailDataSet.StcDetail.SupplierSlipCdNameColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipCdNameColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 ADD
                        // 明細区分名
                        // カラムチューザ：対象　　フォーマット：文字列
                        Columns[this._detailDataSet.StcDetail.StockSlipCdDtlColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.StockSlipCdDtlColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.StockSlipCdDtlColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.StockSlipCdDtlColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.StockSlipCdDtlColumn.ColumnName].Header.Caption = "明細区分";
                        Columns[this._detailDataSet.StcDetail.StockSlipCdDtlColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.StockSlipCdDtlColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 ADD

                        // 担当者名
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.StockAgentNameColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.StockAgentNameColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.StockAgentNameColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.StockAgentNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.StockAgentNameColumn.ColumnName].Header.Caption = "担当者名";
                        Columns[this._detailDataSet.StcDetail.StockAgentNameColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.StockAgentNameColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 品名
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.GoodsNameColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.GoodsNameColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.GoodsNameColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.GoodsNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.GoodsNameColumn.ColumnName].Header.Caption = "品名";
                        Columns[this._detailDataSet.StcDetail.GoodsNameColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.GoodsNameColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 品番
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.GoodsNoColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.GoodsNoColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.GoodsNoColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.GoodsNoColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.GoodsNoColumn.ColumnName].Header.Caption = "品番";
                        Columns[this._detailDataSet.StcDetail.GoodsNoColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.GoodsNoColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // メーカーコード
                        // カラムチューザ：対象　　フォーマット：数値だが表示は通常
                        Columns[this._detailDataSet.StcDetail.GoodsMakerCdColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.GoodsMakerCdColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.GoodsMakerCdColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcDetail.GoodsMakerCdColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.GoodsMakerCdColumn.ColumnName].Header.Caption = "メーカーコード";
                        Columns[this._detailDataSet.StcDetail.GoodsMakerCdColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.GoodsMakerCdColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // メーカー
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.MakerNameColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.MakerNameColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.MakerNameColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.MakerNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.MakerNameColumn.ColumnName].Header.Caption = "メーカー名";
                        Columns[this._detailDataSet.StcDetail.MakerNameColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.MakerNameColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // BLコード
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.BLGoodsCodeColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.BLGoodsCodeColumn.ColumnName].Width = 90;
                        Columns[this._detailDataSet.StcDetail.BLGoodsCodeColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcDetail.BLGoodsCodeColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.BLGoodsCodeColumn.ColumnName].Header.Caption = "BLｺｰﾄﾞ";
                        Columns[this._detailDataSet.StcDetail.BLGoodsCodeColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.BLGoodsCodeColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // BLグループ
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.BLGroupCodeColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.BLGroupCodeColumn.ColumnName].Width = 90;
                        Columns[this._detailDataSet.StcDetail.BLGroupCodeColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcDetail.BLGroupCodeColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.BLGroupCodeColumn.ColumnName].Header.Caption = "ｸﾞﾙｰﾌﾟｺｰﾄﾞ";
                        Columns[this._detailDataSet.StcDetail.BLGroupCodeColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.BLGroupCodeColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                        // 原価単価
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.StcDetail.StockUnitPriceFlColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.StockUnitPriceFlColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.StcDetail.StockUnitPriceFlColumn.ColumnName].Format = formatFraction;
                        Columns[this._detailDataSet.StcDetail.StockUnitPriceFlColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcDetail.StockUnitPriceFlColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.StockUnitPriceFlColumn.ColumnName].Header.Caption = "原単価";
                        Columns[this._detailDataSet.StcDetail.StockUnitPriceFlColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.StockUnitPriceFlColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD

                        // 数量
                        // カラムチューザ：対象　　フォーマット：数値
                        Columns[this._detailDataSet.StcDetail.StockCountColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.StockCountColumn.ColumnName].Width = 70;
                        Columns[this._detailDataSet.StcDetail.StockCountColumn.ColumnName].Format = formatFraction;
                        Columns[this._detailDataSet.StcDetail.StockCountColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcDetail.StockCountColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.StockCountColumn.ColumnName].Header.Caption = "数量";
                        Columns[this._detailDataSet.StcDetail.StockCountColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.StockCountColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 標準価格
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.StcDetail.ListPriceTaxExcFlColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.ListPriceTaxExcFlColumn.ColumnName].Width = 80;
                        //Columns[this._detailDataSet.StcDetail.ListPriceTaxExcFlColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.StcDetail.ListPriceTaxExcFlColumn.ColumnName].Format = formatCurrency;  // ADD by gezh 2011/11/24 redmine#8078
                        Columns[this._detailDataSet.StcDetail.ListPriceTaxExcFlColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcDetail.ListPriceTaxExcFlColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.ListPriceTaxExcFlColumn.ColumnName].Header.Caption = "標準価格";
                        Columns[this._detailDataSet.StcDetail.ListPriceTaxExcFlColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.ListPriceTaxExcFlColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
                        //// 金額(伝票)
                        //// 非表示
                        //// カラムチューザ：対象外　フォーマット：通常
                        //Columns[this._detailDataSet.StcDetail.StockTtlPricTaxExcColumn.ColumnName].Hidden = true;
                        //Columns[this._detailDataSet.StcDetail.StockTtlPricTaxExcColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL

                        // オープン価格区分
                        // 非表示
                        // カラムチューザ：対象外　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.OpenPriceDivColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.StcDetail.OpenPriceDivColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;

                        // 消費税転嫁方式
                        // 非表示
                        // カラムチューザ：対象外　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.SuppCTaxLayCdColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.StcDetail.SuppCTaxLayCdColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;

                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                        // 金額(明細)
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.StcDetail.StockTtlPricTaxExcColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.StockTtlPricTaxExcColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.StcDetail.StockTtlPricTaxExcColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.StcDetail.StockTtlPricTaxExcColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcDetail.StockTtlPricTaxExcColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.StockTtlPricTaxExcColumn.ColumnName].Header.Caption = "金額";
                        Columns[this._detailDataSet.StcDetail.StockTtlPricTaxExcColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.StockTtlPricTaxExcColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD

                        // 消費税
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.StcDetail.StockPriceConsTaxColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.StockPriceConsTaxColumn.ColumnName].Width = 80;
                        Columns[this._detailDataSet.StcDetail.StockPriceConsTaxColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.StcDetail.StockPriceConsTaxColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcDetail.StockPriceConsTaxColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.StockPriceConsTaxColumn.ColumnName].Header.Caption = "消費税";
                        Columns[this._detailDataSet.StcDetail.StockPriceConsTaxColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.StockPriceConsTaxColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // ADD 時シン 2020/03/11 PMKOBETSU-2912 -------->>>>> 
                        Columns[this._detailDataSet.StcDetail.SupplierConsTaxRateColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.SupplierConsTaxRateColumn.ColumnName].Width = 80;
                        Columns[this._detailDataSet.StcDetail.SupplierConsTaxRateColumn.ColumnName].Format = formatConsTaxRate;
                        Columns[this._detailDataSet.StcDetail.SupplierConsTaxRateColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcDetail.SupplierConsTaxRateColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.SupplierConsTaxRateColumn.ColumnName].Header.Caption = "消費税率";
                        Columns[this._detailDataSet.StcDetail.SupplierConsTaxRateColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.SupplierConsTaxRateColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // ADD 時シン 2020/03/11 PMKOBETSU-2912 --------<<<<<

                        // 金額（明細）
                        // カラムチューザ：対象　　フォーマット：金額
                        //Columns[this._detailDataSet.StcDetail.SalesMoneyTaxExcColumn.ColumnName].Hidden = false;
                        //Columns[this._detailDataSet.StcDetail.SalesMoneyTaxExcColumn.ColumnName].Width = 80;
                        //Columns[this._detailDataSet.StcDetail.SalesMoneyTaxExcColumn.ColumnName].Format = formatCurrency;
                        //Columns[this._detailDataSet.StcDetail.SalesMoneyTaxExcColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        //Columns[this._detailDataSet.StcDetail.SalesMoneyTaxExcColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        //Columns[this._detailDataSet.StcDetail.SalesMoneyTaxExcColumn.ColumnName].Header.Caption = "金額";
                        //Columns[this._detailDataSet.StcDetail.SalesMoneyTaxExcColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        //Columns[this._detailDataSet.StcDetail.SalesMoneyTaxExcColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 備考１
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNote1Column.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNote1Column.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNote1Column.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNote1Column.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNote1Column.ColumnName].Header.Caption = "備考１";
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNote1Column.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNote1Column.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 備考２
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNote2Column.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNote2Column.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNote2Column.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNote2Column.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNote2Column.ColumnName].Header.Caption = "備考２";
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNote2Column.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNote2Column.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 拠点コード
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 DEL
                        //// カラムチューザ：対象外　フォーマット：非表示
                        //Columns[this._detailDataSet.StcDetail.SectionCdColumn.ColumnName].Hidden = true;
                        //Columns[this._detailDataSet.StcDetail.SectionCdColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                        // カラムチューザ：対象外　フォーマット：非表示
                        Columns[this._detailDataSet.StcDetail.SectionCdColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.SectionCdColumn.ColumnName].Width = 80;
                        Columns[this._detailDataSet.StcDetail.SectionCdColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcDetail.SectionCdColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.SectionCdColumn.ColumnName].Header.Caption = "拠点コード";
                        Columns[this._detailDataSet.StcDetail.SectionCdColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.SectionCdColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD

                        // 拠点
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.SectionGuideNmColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.SectionGuideNmColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.SectionGuideNmColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.SectionGuideNmColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.SectionGuideNmColumn.ColumnName].Header.Caption = "拠点";
                        Columns[this._detailDataSet.StcDetail.SectionGuideNmColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.SectionGuideNmColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 2008.12.05 del start [8726]
                        // 発行者
                        // カラムチューザ：対象　　フォーマット：通常
                        //Columns[this._detailDataSet.StcDetail.StockInputNameColumn.ColumnName].Hidden = false;
                        //Columns[this._detailDataSet.StcDetail.StockInputNameColumn.ColumnName].Width = 100;
                        //Columns[this._detailDataSet.StcDetail.StockInputNameColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        //Columns[this._detailDataSet.StcDetail.StockInputNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        //Columns[this._detailDataSet.StcDetail.StockInputNameColumn.ColumnName].Header.Caption = "発行者";
                        //Columns[this._detailDataSet.StcDetail.StockInputNameColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        //Columns[this._detailDataSet.StcDetail.StockInputNameColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // 2008.12.05 del end [8726]

                        // 仕入先コード
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName].Width = 80;
                        Columns[this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName].Header.Caption = "仕入先コード";
                        Columns[this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                        Columns[this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName].Format = "000000;-000000;''";
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD

                        // 仕入先名
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName].Header.Caption = "仕入先";
                        Columns[this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                        //// 仕入先コード
                        //// カラムチューザ：対象　　フォーマット：通常
                        //Columns[this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName].Hidden = false;
                        //Columns[this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName].Width = 80;
                        //Columns[this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        //Columns[this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        //Columns[this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName].Header.Caption = "仕入先コード";
                        //Columns[this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        //Columns[this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        //// 仕入先名
                        //// カラムチューザ：対象　　フォーマット：通常
                        //Columns[this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName].Hidden = false;
                        //Columns[this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName].Width = 100;
                        //Columns[this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        //Columns[this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        //Columns[this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName].Header.Caption = "仕入先";
                        //Columns[this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        //Columns[this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD

                        // 仕入在庫取寄せ区分
                        // カラムチューザ：対象外　　フォーマット：数値だが表示は通常
                        Columns[this._detailDataSet.StcDetail.StockOrderDivCdColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.StcDetail.StockOrderDivCdColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;

                        // 仕入在庫取寄区分名
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.StockOrderDivCdNameColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.StockOrderDivCdNameColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.StockOrderDivCdNameColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.StockOrderDivCdNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.StockOrderDivCdNameColumn.ColumnName].Header.Caption = "在庫取寄区分";
                        Columns[this._detailDataSet.StcDetail.StockOrderDivCdNameColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.StockOrderDivCdNameColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 倉庫コード
                        // カラムチューザ：対象外　フォーマット：非表示
                        Columns[this._detailDataSet.StcDetail.WarehouseCdColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.StcDetail.WarehouseCdColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;

                        // 倉庫
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.WarehouseNameColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.WarehouseNameColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.WarehouseNameColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.WarehouseNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.WarehouseNameColumn.ColumnName].Header.Caption = "倉庫";
                        Columns[this._detailDataSet.StcDetail.WarehouseNameColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.WarehouseNameColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 棚番
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.WarehouseShelfNoColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.WarehouseShelfNoColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.WarehouseShelfNoColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.WarehouseShelfNoColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.WarehouseShelfNoColumn.ColumnName].Header.Caption = "棚番";
                        Columns[this._detailDataSet.StcDetail.WarehouseShelfNoColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.WarehouseShelfNoColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // UOEリマーク1
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.UoeRemark1Column.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.UoeRemark1Column.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.UoeRemark1Column.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.UoeRemark1Column.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.UoeRemark1Column.ColumnName].Header.Caption = "UOEリマーク1";
                        Columns[this._detailDataSet.StcDetail.UoeRemark1Column.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.UoeRemark1Column.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // UOEリマーク2
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.UoeRemark2Column.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.UoeRemark2Column.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.UoeRemark2Column.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.UoeRemark2Column.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.UoeRemark2Column.ColumnName].Header.Caption = "UOEリマーク2";
                        Columns[this._detailDataSet.StcDetail.UoeRemark2Column.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.UoeRemark2Column.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 仕入SEQ/支払No
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName].Header.Caption = "仕入SEQ/支払No";
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                        Columns[this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName].Format = "000000000;-000000000;''";
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD

                        // 計上日
                        // カラムチューザ：対象　　フォーマット：日付（yyyy/mm/dd）
                        Columns[this._detailDataSet.StcDetail.StockAddUpADateColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.StockAddUpADateColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.StockAddUpADateColumn.ColumnName].Format = formatDate;
                        Columns[this._detailDataSet.StcDetail.StockAddUpADateColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.StockAddUpADateColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.StockAddUpADateColumn.ColumnName].Header.Caption = "計上日";
                        Columns[this._detailDataSet.StcDetail.StockAddUpADateColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.StockAddUpADateColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 売掛区分
                        // カラムチューザ：対象外　フォーマット：非表示
                        Columns[this._detailDataSet.StcDetail.AccPayDivCdColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.StcDetail.AccPayDivCdColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;

                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
                        //// 売掛区分名
                        //// カラムチューザ：対象　　フォーマット：通常
                        //Columns[this._detailDataSet.StcDetail.AccPayDivCdNameColumn.ColumnName].Hidden = false;
                        //Columns[this._detailDataSet.StcDetail.AccPayDivCdNameColumn.ColumnName].Width = 100;
                        //Columns[this._detailDataSet.StcDetail.AccPayDivCdNameColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        //Columns[this._detailDataSet.StcDetail.AccPayDivCdNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        //Columns[this._detailDataSet.StcDetail.AccPayDivCdNameColumn.ColumnName].Header.Caption = "買掛区分";
                        //Columns[this._detailDataSet.StcDetail.AccPayDivCdNameColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        //Columns[this._detailDataSet.StcDetail.AccPayDivCdNameColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL

                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                        //// 赤伝区分
                        //// カラムチューザ：対象　　フォーマット：通常
                        //Columns[this._detailDataSet.StcDetail.DebitNoteDivColumn.ColumnName].Hidden = false;
                        //Columns[this._detailDataSet.StcDetail.DebitNoteDivColumn.ColumnName].Width = 100;
                        //Columns[this._detailDataSet.StcDetail.DebitNoteDivColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        //Columns[this._detailDataSet.StcDetail.DebitNoteDivColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        //Columns[this._detailDataSet.StcDetail.DebitNoteDivColumn.ColumnName].Header.Caption = "赤伝区分";
                        //Columns[this._detailDataSet.StcDetail.DebitNoteDivColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        //Columns[this._detailDataSet.StcDetail.DebitNoteDivColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL

                        // 同時売上伝票番号
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName].Header.Caption = "同時売上伝票番号";
                        Columns[this._detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 同時売上日付
                        // カラムチューザ：対象　　フォーマット：日付（yyyy/mm/dd）
                        Columns[this._detailDataSet.StcDetail.SalesDateColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.SalesDateColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.SalesDateColumn.ColumnName].Format = formatDate;
                        Columns[this._detailDataSet.StcDetail.SalesDateColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.SalesDateColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.SalesDateColumn.ColumnName].Header.Caption = "同時売上日付";
                        Columns[this._detailDataSet.StcDetail.SalesDateColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.SalesDateColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 得意先コード
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.CustomerCodeColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.CustomerCodeColumn.ColumnName].Width = 80;
                        Columns[this._detailDataSet.StcDetail.CustomerCodeColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.StcDetail.CustomerCodeColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.CustomerCodeColumn.ColumnName].Header.Caption = "得意先コード";
                        Columns[this._detailDataSet.StcDetail.CustomerCodeColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.CustomerCodeColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                        Columns[this._detailDataSet.StcDetail.CustomerCodeColumn.ColumnName].Format = "00000000;-00000000;''";
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD

                        // 得意先名
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.StcDetail.CustomerSnmColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.StcDetail.CustomerSnmColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.StcDetail.CustomerSnmColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.StcDetail.CustomerSnmColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.StcDetail.CustomerSnmColumn.ColumnName].Header.Caption = "得意先";
                        Columns[this._detailDataSet.StcDetail.CustomerSnmColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.StcDetail.CustomerSnmColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        //--------------------------------------------------------------------------------
                        //  カラムチューザを有効にする
                        //--------------------------------------------------------------------------------
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 DEL
                        //this.uGrid_Detail.DisplayLayout.ColumnChooserEnabled = Infragistics.Win.DefaultableBoolean.True;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 DEL
                        this.uGrid_Detail.DisplayLayout.Override.RowSelectorHeaderStyle = Infragistics.Win.UltraWinGrid.RowSelectorHeaderStyle.ColumnChooserButton;
                        this.uGrid_Detail.DisplayLayout.Override.RowSelectorWidth = 24;
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 ADD
                        _gridColumnChooserControl.Add( this.uGrid_Detail );
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 ADD


                        // カラムチューザボタンの外観を設定	
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                        this.uGrid_Detail.DisplayLayout.Override.RowSelectorAppearance.BackColor = Color.FromArgb( 89, 135, 214 );
                        this.uGrid_Detail.DisplayLayout.Override.RowSelectorAppearance.BackColor2 = Color.FromArgb( 7, 59, 150 );
                        this.uGrid_Detail.DisplayLayout.Override.RowSelectorAppearance.BackGradientStyle = GradientStyle.Vertical;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                        this.uGrid_Detail.DisplayLayout.Override.RowSelectorHeaderAppearance.BackColor = this.uGrid_Detail.DisplayLayout.Override.RowSelectorAppearance.BackColor;
                        this.uGrid_Detail.DisplayLayout.Override.RowSelectorHeaderAppearance.BackColor2 = this.uGrid_Detail.DisplayLayout.Override.RowSelectorAppearance.BackColor2;
                        this.uGrid_Detail.DisplayLayout.Override.RowSelectorHeaderAppearance.BackGradientStyle = this.uGrid_Detail.DisplayLayout.Override.RowSelectorAppearance.BackGradientStyle;
                        this.uGrid_Detail.ImageList = Broadleaf.Library.Resources.IconResourceManagement.ImageList16;
                        this.uGrid_Detail.DisplayLayout.Override.RowSelectorHeaderAppearance.Image = (int)Broadleaf.Library.Resources.Size16_Index.STAR1;

                        // 列幅自動調整を設定値にしたがって行う
                        autoColumnAdjust(_columnWidthAutoAdjust_Detail, 1);

                        #endregion // 明細タブ
                        break;
                    }
                case 2:
                    {
                        #region 残高表示タブ

                        // 行No
                        // カラムチューザ：非対象　　フォーマット：非表示
                        Columns[this._detailDataSet.BalanceList.RowNoColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.BalanceList.RowNoColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;

                        // 計上日
                        // カラムチューザ：対象　　フォーマット：日付
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].Width = 140;
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].Format = formatDate; // ADD 2010/07/20
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].Header.Caption = "計上日";
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 前回残高
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].Header.Caption = "前回残高";
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 今回支払額
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].Header.Caption = "今回支払額";
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 繰越残高
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].Header.Caption = "繰越残高";
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 今回仕入
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].Header.Caption = "今回仕入";
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 返品値引
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].Header.Caption = "返品値引";
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 純仕入額
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].Header.Caption = "純仕入額";
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 消費税
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].Header.Caption = "消費税";
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 今回合計
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].Header.Caption = "今回合計";
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 今回残高
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].Header.Caption = "今回残高";
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 伝票枚数
                        // カラムチューザ：対象　　フォーマット：文字
                        Columns[this._detailDataSet.BalanceList.StockSlipCountColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.StockSlipCountColumn.ColumnName].Width = 90;
                        //Columns[this._detailDataSet.BalanceList.SalesSlipCountColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.StockSlipCountColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.StockSlipCountColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.StockSlipCountColumn.ColumnName].Header.Caption = "伝票枚数";
                        Columns[this._detailDataSet.BalanceList.StockSlipCountColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.StockSlipCountColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // ---------------------- ADD 2010/07/20 --------------------------------->>>>>
                        // 拠点コード
                        Columns[this._detailDataSet.BalanceList.SectionCodeColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.BalanceList.SectionCodeColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;

                        // 仕入先コード
                        Columns[this._detailDataSet.BalanceList.SupplierCodeColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.BalanceList.SupplierCodeColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;

                        // 仕入先名
                        Columns[this._detailDataSet.BalanceList.SupplierNameColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.BalanceList.SupplierNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;
                        // ---------------------- ADD 2010/07/20 -----------------------------------<<<<<
                        //--------------------------------------------------------------------------------
                        //  カラムチューザを有効にする
                        //--------------------------------------------------------------------------------
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 DEL
                        //this.uGrid_BalanceList.DisplayLayout.ColumnChooserEnabled = Infragistics.Win.DefaultableBoolean.True;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 DEL
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorHeaderStyle = Infragistics.Win.UltraWinGrid.RowSelectorHeaderStyle.ColumnChooserButton;
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorWidth = 24;
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 ADD
                        _gridColumnChooserControl.Add( this.uGrid_BalanceList );
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 ADD

                        // カラムチューザボタンの外観を設定
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorAppearance.BackColor = Color.FromArgb( 89, 135, 214 );
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorAppearance.BackColor2 = Color.FromArgb( 7, 59, 150 );
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorAppearance.BackGradientStyle = GradientStyle.Vertical;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorHeaderAppearance.BackColor = this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorAppearance.BackColor;
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorHeaderAppearance.BackColor2 = this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorAppearance.BackColor2;
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorHeaderAppearance.BackGradientStyle = this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorAppearance.BackGradientStyle;
                        this.uGrid_BalanceList.ImageList = Broadleaf.Library.Resources.IconResourceManagement.ImageList16;
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorHeaderAppearance.Image = (int)Broadleaf.Library.Resources.Size16_Index.STAR1;

                        // 列幅自動調整を設定値にしたがって行う
                        //autoColumnAdjust(_columnWidthAutoAdjust_Balance, 0);// DEL  2010/07/20
                        autoColumnAdjust(_columnWidthAutoAdjust_Balance, 2);// ADD  2010/07/20

                        #endregion // 残高表示タブ

                        break;
                    }
                // ---------------------- ADD  2010/07/20 --------------------------------->>>>>
                case 3:
                    {
                        #region 出力用残高リスト

                        // 行No
                        // カラムチューザ：非対象　　フォーマット：非表示
                        Columns[this._detailDataSet.BalanceList.RowNoColumn.ColumnName].Hidden = true;
                        Columns[this._detailDataSet.BalanceList.RowNoColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;

                        // 拠点コード
                        // カラムチューザ：非対象　　フォーマット：通常
                        Columns[this._detailDataSet.BalanceList.SectionCodeColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.SectionCodeColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.BalanceList.SectionCodeColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.BalanceList.SectionCodeColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;
                        // ---------------------- UPD  2010/09/08 --------------------------------->>>>>
                        Columns[this._detailDataSet.BalanceList.SectionCodeColumn.ColumnName].Header.Caption = "拠点コード";
                        Columns[this._detailDataSet.BalanceList.SectionCodeColumn.ColumnName].Header.Caption = "拠点";
                        // ---------------------- UPD  2010/09/08 ---------------------------------<<<<<
                        Columns[this._detailDataSet.BalanceList.SectionCodeColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.SectionCodeColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        // 仕入先コード
                        // カラムチューザ：非対象　　フォーマット：通常
                        Columns[this._detailDataSet.BalanceList.SupplierCodeColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.SupplierCodeColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.BalanceList.SupplierCodeColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.BalanceList.SupplierCodeColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;
                        // ---------------------- UPD  2010/09/08 --------------------------------->>>>>
                        //Columns[this._detailDataSet.BalanceList.SupplierCodeColumn.ColumnName].Header.Caption = "仕入先コード";
                        Columns[this._detailDataSet.BalanceList.SupplierCodeColumn.ColumnName].Header.Caption = "支払先";
                        // ---------------------- UPD  2010/09/08 ---------------------------------<<<<<
                        Columns[this._detailDataSet.BalanceList.SupplierCodeColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.SupplierCodeColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 仕入先名
                        // カラムチューザ：非対象　　フォーマット：通常
                        Columns[this._detailDataSet.BalanceList.SupplierNameColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.SupplierNameColumn.ColumnName].Width = 200;
                        Columns[this._detailDataSet.BalanceList.SupplierNameColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.BalanceList.SupplierNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;
                        // ---------------------- UPD  2010/09/08 --------------------------------->>>>>
                        //Columns[this._detailDataSet.BalanceList.SupplierNameColumn.ColumnName].Header.Caption = "仕入先";
                        Columns[this._detailDataSet.BalanceList.SupplierNameColumn.ColumnName].Header.Caption = "支払先名";
                        // ---------------------- UPD  2010/09/08 ---------------------------------<<<<<
                        Columns[this._detailDataSet.BalanceList.SupplierNameColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.SupplierNameColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 計上日
                        // カラムチューザ：対象　　フォーマット：日付
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].Width = 140;
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].Format = formatDate;
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].Header.Caption = "計上日";
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.AddUpDateColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 前回残高
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].Header.Caption = "前回残高";
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.LastTimeBlcColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 今回支払額
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].Header.Caption = "今回支払額";
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.ThisTimePayNrmlColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 繰越残高
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].Header.Caption = "繰越残高";
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.ThisTimeTtlBlcColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 今回仕入
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        // ---------------------- UPD  2010/09/08 --------------------------------->>>>>
                        //Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].Header.Caption = "今回仕入";
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].Header.Caption = "今回仕入額";
                        // ---------------------- UPD  2010/09/08 ---------------------------------<<<<<
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.ThisTimeStockPriceColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 返品値引
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        // ---------------------- UPD  2010/09/08 --------------------------------->>>>>
                        //Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].Header.Caption = "返品値引";
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].Header.Caption = "返品・値引額";
                        // ---------------------- UPD  2010/09/08 ---------------------------------<<<<<
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricRgdsDisColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 純仕入額
                        // カラムチューザ：対象　　フォーマット：金額
                        // ---------------------- UPD  2010/09/08 --------------------------------->>>>>
                        //Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].Hidden = false;
                        //Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].Hidden = true; // DEL 2010/09/28 障害報告 #15619
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].Hidden = false; // ADD 2010/09/28 障害報告 #15619
                        // ---------------------- UPD  2010/09/08 ---------------------------------<<<<<
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].Header.Caption = "純仕入額";
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.OfsThisTimeStockColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 消費税
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        //Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].Header.Caption = "消費税"; // DEL 2010/09/14
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].Header.Caption = "消費税額"; // ADD 2010/09/14
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.OfsThisStockTaxColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 今回合計
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].Header.Caption = "今回合計";
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.ThisStckPricTotalColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 今回残高
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].Width = 120;
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].Header.Caption = "今回残高";
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.StckTtlPayBlcColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        // 伝票枚数
                        // カラムチューザ：対象　　フォーマット：文字
                        Columns[this._detailDataSet.BalanceList.StockSlipCountColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.BalanceList.StockSlipCountColumn.ColumnName].Width = 90;
                        Columns[this._detailDataSet.BalanceList.StockSlipCountColumn.ColumnName].Format = formatCurrency;
                        Columns[this._detailDataSet.BalanceList.StockSlipCountColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.BalanceList.StockSlipCountColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.BalanceList.StockSlipCountColumn.ColumnName].Header.Caption = "伝票枚数";
                        Columns[this._detailDataSet.BalanceList.StockSlipCountColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.BalanceList.StockSlipCountColumn.ColumnName].Header.VisiblePosition = visiblePosition++;

                        //--------------------------------------------------------------------------------
                        //  カラムチューザを有効にする
                        //--------------------------------------------------------------------------------
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorHeaderStyle = Infragistics.Win.UltraWinGrid.RowSelectorHeaderStyle.ColumnChooserButton;
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorWidth = 24;
                        _gridColumnChooserControl.Add(this.uGrid_BalanceList);

                        // カラムチューザボタンの外観を設定
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorAppearance.BackColor = Color.FromArgb(89, 135, 214);
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorAppearance.BackColor2 = Color.FromArgb(7, 59, 150);
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorAppearance.BackGradientStyle = GradientStyle.Vertical;
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorHeaderAppearance.BackColor = this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorAppearance.BackColor;
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorHeaderAppearance.BackColor2 = this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorAppearance.BackColor2;
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorHeaderAppearance.BackGradientStyle = this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorAppearance.BackGradientStyle;
                        this.uGrid_BalanceList.ImageList = Broadleaf.Library.Resources.IconResourceManagement.ImageList16;
                        this.uGrid_BalanceList.DisplayLayout.Override.RowSelectorHeaderAppearance.Image = (int)Broadleaf.Library.Resources.Size16_Index.STAR1;

                        // 列幅自動調整を設定値にしたがって行う
                        autoColumnAdjust(_columnWidthAutoAdjust_Balance, 2);

                        #endregion // 残高表示タブ

                        break;
                    }
                // ---------------------- ADD  2010/07/20 -----------------------------------<<<<<
                // ----------ADD 2013/01/21----------->>>>>
                case 4:
                    {
                        #region 返品計上入力タブ

                        // 品名
                        // カラムチューザ：対象　フォーマット：通常
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNameColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNameColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNameColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNameColumn.ColumnName].Header.Caption = "品名";
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNameColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNameColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNameColumn.ColumnName].CellActivation = Infragistics.Win.UltraWinGrid.Activation.Disabled;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNameColumn.ColumnName].CellAppearance.BackColor = _CellReadOnlyColor;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNameColumn.ColumnName].CellAppearance.BackColorDisabled = _CellReadOnlyColor;

                        // 品番
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNoColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNoColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNoColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNoColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNoColumn.ColumnName].Header.Caption = "品番";
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNoColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNoColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNoColumn.ColumnName].CellActivation = Infragistics.Win.UltraWinGrid.Activation.Disabled;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNoColumn.ColumnName].CellAppearance.BackColor = _CellReadOnlyColor;
                        Columns[this._detailDataSet.RedSlipDetail.GoodsNoColumn.ColumnName].CellAppearance.BackColorDisabled = _CellReadOnlyColor;

                        // 可能数
                        // カラムチューザ：対象　　フォーマット：数値
                        Columns[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName].Width = 60;
                        Columns[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName].Format = formatFraction;
                        Columns[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName].Header.Caption = "可能数";
                        Columns[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        Columns[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName].CellActivation = Infragistics.Win.UltraWinGrid.Activation.Disabled;
                        Columns[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName].CellAppearance.BackColor = _CellReadOnlyColor;
                        Columns[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName].CellAppearance.BackColorDisabled = _CellReadOnlyColor;

                        // 返品伝票番号
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName].Header.Caption = "返品伝票番号";
                        Columns[this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        Columns[this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName].AutoEdit = true;
                        Columns[this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName].CellActivation = Infragistics.Win.UltraWinGrid.Activation.AllowEdit;

                        // 返品数
                        // カラムチューザ：対象　　フォーマット：数値
                        Columns[this._detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName].Width = 60;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName].Format = formatFraction;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName].Header.Caption = "返品数";
                        Columns[this._detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName].AutoEdit = true;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName].CellActivation = Infragistics.Win.UltraWinGrid.Activation.AllowEdit;

                        // 原価
                        // カラムチューザ：対象　　フォーマット：金額
                        Columns[this._detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName].Width = 60;
                        Columns[this._detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName].Format = formatFraction;
                        Columns[this._detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName].Header.Caption = "原価";
                        Columns[this._detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        Columns[this._detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName].CellActivation = Infragistics.Win.UltraWinGrid.Activation.Disabled;
                        Columns[this._detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName].CellAppearance.BackColor = _CellReadOnlyColor;
                        Columns[this._detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName].CellAppearance.BackColorDisabled = _CellReadOnlyColor;

                        // 売上伝票番号
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.RedSlipDetail.SalesSlipNumColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.RedSlipDetail.SalesSlipNumColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.RedSlipDetail.SalesSlipNumColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.RedSlipDetail.SalesSlipNumColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.RedSlipDetail.SalesSlipNumColumn.ColumnName].Header.Caption = "売上伝票番号";
                        Columns[this._detailDataSet.RedSlipDetail.SalesSlipNumColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.RedSlipDetail.SalesSlipNumColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        Columns[this._detailDataSet.RedSlipDetail.SalesSlipNumColumn.ColumnName].AutoEdit = true;
                        Columns[this._detailDataSet.RedSlipDetail.SalesSlipNumColumn.ColumnName].CellActivation = Infragistics.Win.UltraWinGrid.Activation.Disabled;
                        Columns[this._detailDataSet.RedSlipDetail.SalesSlipNumColumn.ColumnName].CellAppearance.BackColor = _CellReadOnlyColor;
                        Columns[this._detailDataSet.RedSlipDetail.SalesSlipNumColumn.ColumnName].CellAppearance.BackColorDisabled = _CellReadOnlyColor;

                        // 得意先コード
                        // カラムチューザ：対象　　フォーマット：文字列(数値)
                        Columns[this._detailDataSet.RedSlipDetail.CustomerCodeColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.RedSlipDetail.CustomerCodeColumn.ColumnName].Width = 80;
                        Columns[this._detailDataSet.RedSlipDetail.CustomerCodeColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.RedSlipDetail.CustomerCodeColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.RedSlipDetail.CustomerCodeColumn.ColumnName].Header.Caption = "得意先コード";
                        Columns[this._detailDataSet.RedSlipDetail.CustomerCodeColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.RedSlipDetail.CustomerCodeColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        Columns[this._detailDataSet.RedSlipDetail.CustomerCodeColumn.ColumnName].Format = "0;-0;''";
                        Columns[this._detailDataSet.RedSlipDetail.CustomerCodeColumn.ColumnName].CellActivation = Infragistics.Win.UltraWinGrid.Activation.Disabled;
                        Columns[this._detailDataSet.RedSlipDetail.CustomerCodeColumn.ColumnName].CellAppearance.BackColor = _CellReadOnlyColor;
                        Columns[this._detailDataSet.RedSlipDetail.CustomerCodeColumn.ColumnName].CellAppearance.BackColorDisabled = _CellReadOnlyColor;

                        // 倉庫コード
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].Width = 50;
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].Header.Caption = "倉庫コード";
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].CellActivation = Infragistics.Win.UltraWinGrid.Activation.AllowEdit;

                        // 倉庫名称
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseNameColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseNameColumn.ColumnName].Width = 100;
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseNameColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseNameColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseNameColumn.ColumnName].Header.Caption = "倉庫";
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseNameColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseNameColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseNameColumn.ColumnName].CellActivation = Infragistics.Win.UltraWinGrid.Activation.Disabled;
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseNameColumn.ColumnName].CellAppearance.BackColor = _CellReadOnlyColor;
                        Columns[this._detailDataSet.RedSlipDetail.WarehouseNameColumn.ColumnName].CellAppearance.BackColorDisabled = _CellReadOnlyColor;

                        // 棚番
                        // カラムチューザ：対象　　フォーマット：通常
                        Columns[this._detailDataSet.RedSlipDetail.ShelfNoColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.RedSlipDetail.ShelfNoColumn.ColumnName].Width = 70;
                        Columns[this._detailDataSet.RedSlipDetail.ShelfNoColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
                        Columns[this._detailDataSet.RedSlipDetail.ShelfNoColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.RedSlipDetail.ShelfNoColumn.ColumnName].Header.Caption = "棚番";
                        Columns[this._detailDataSet.RedSlipDetail.ShelfNoColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.RedSlipDetail.ShelfNoColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        Columns[this._detailDataSet.RedSlipDetail.ShelfNoColumn.ColumnName].CellActivation = Infragistics.Win.UltraWinGrid.Activation.Disabled;
                        Columns[this._detailDataSet.RedSlipDetail.ShelfNoColumn.ColumnName].CellAppearance.BackColor = _CellReadOnlyColor;
                        Columns[this._detailDataSet.RedSlipDetail.ShelfNoColumn.ColumnName].CellAppearance.BackColorDisabled = _CellReadOnlyColor;

                        // 返品後数
                        // カラムチューザ：対象　　フォーマット：数値
                        Columns[this._detailDataSet.RedSlipDetail.ReturnedAfterCntColumn.ColumnName].Hidden = false;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnedAfterCntColumn.ColumnName].Width = 60;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnedAfterCntColumn.ColumnName].Format = formatFraction;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnedAfterCntColumn.ColumnName].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnedAfterCntColumn.ColumnName].ExcludeFromColumnChooser = Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnedAfterCntColumn.ColumnName].Header.Caption = "返品後数";
                        Columns[this._detailDataSet.RedSlipDetail.ReturnedAfterCntColumn.ColumnName].Header.Appearance.TextHAlign = Infragistics.Win.HAlign.Default;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnedAfterCntColumn.ColumnName].Header.VisiblePosition = visiblePosition++;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnedAfterCntColumn.ColumnName].CellActivation = Infragistics.Win.UltraWinGrid.Activation.Disabled;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnedAfterCntColumn.ColumnName].CellAppearance.BackColor = _CellReadOnlyColor;
                        Columns[this._detailDataSet.RedSlipDetail.ReturnedAfterCntColumn.ColumnName].CellAppearance.BackColorDisabled = _CellReadOnlyColor;

                        //--------------------------------------------------------------------------------
                        //  カラムチューザを有効にする
                        //--------------------------------------------------------------------------------
                        this.uGrid_RedSlip.DisplayLayout.Override.RowSelectorHeaderStyle = Infragistics.Win.UltraWinGrid.RowSelectorHeaderStyle.ColumnChooserButton;
                        this.uGrid_RedSlip.DisplayLayout.Override.RowSelectorWidth = 24;
                        _gridColumnChooserControl.Add(this.uGrid_RedSlip);

                        // カラムチューザボタンの外観を設定		
                        this.uGrid_Slip.DisplayLayout.Override.RowSelectorAppearance.BackColor = Color.FromArgb(89, 135, 214);
                        this.uGrid_Slip.DisplayLayout.Override.RowSelectorAppearance.BackColor2 = Color.FromArgb(7, 59, 150);
                        this.uGrid_Slip.DisplayLayout.Override.RowSelectorAppearance.BackGradientStyle = GradientStyle.Vertical;
                        this.uGrid_RedSlip.DisplayLayout.Override.RowSelectorHeaderAppearance.BackColor = this.uGrid_Slip.DisplayLayout.Override.RowSelectorAppearance.BackColor;
                        this.uGrid_RedSlip.DisplayLayout.Override.RowSelectorHeaderAppearance.BackColor2 = this.uGrid_Slip.DisplayLayout.Override.RowSelectorAppearance.BackColor2;
                        this.uGrid_RedSlip.DisplayLayout.Override.RowSelectorHeaderAppearance.BackGradientStyle = this.uGrid_Slip.DisplayLayout.Override.RowSelectorAppearance.BackGradientStyle;
                        this.uGrid_RedSlip.ImageList = Broadleaf.Library.Resources.IconResourceManagement.ImageList16;
                        this.uGrid_RedSlip.DisplayLayout.Override.RowSelectorHeaderAppearance.Image = (int)Broadleaf.Library.Resources.Size16_Index.STAR1;

                        // 列幅自動調整を設定値にしたがって行う
                        autoColumnAdjust(_columnWidthAutoAdjust_RedSlip, 3);

                        #endregion // 返品計上入力タブ

                        break;
                    }
                // ----------ADD 2013/01/21-----------<<<<<
                default:
                    {
                        break;
                    }
            }
        }

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 DEL
        //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/16 ADD
        ///// <summary>
        ///// カラムチューザー表示
        ///// </summary>
        ///// <param name="sender"></param>
        ///// <param name="e"></param>
        ///// <remarks>※Gridのデフォルトのカラムチューザーをカスタマイズします</remarks>
        //private void uGrid_BeforeColumnChooserDisplayed( object sender, Infragistics.Win.UltraWinGrid.BeforeColumnChooserDisplayedEventArgs e )
        //{
        //    // デフォルトの処理はキャンセルする
        //    e.Cancel = true;
        //    //bool flag = false;

        //    // カラムチューザーダイアログ
        //    Infragistics.Win.UltraWinGrid.ColumnChooserDialog chooser;

        //    if ( sender == uGrid_Slip )
        //    {
        //        CreateColumnChooser( ref _chooserForSlip, uGrid_Slip );
        //        chooser = _chooserForSlip;
        //    }
        //    else if ( sender == uGrid_Detail )
        //    {
        //        CreateColumnChooser( ref _chooserForDetail, uGrid_Detail );
        //        chooser = _chooserForDetail;
        //    }
        //    else if (sender == uGrid_BalanceList)
        //    {
        //        CreateColumnChooser( ref _chooserForBalanceList, uGrid_BalanceList );
        //        chooser = _chooserForBalanceList;
        //    }
        //    else
        //    {
        //        return;
        //    }

        //    try
        //    {
        //        //-----------------------------------------------------------------
        //        // ※注意：
        //        //   意図的に無効な値-1を与える事で直前にソートがかからないようにする。
        //        //-----------------------------------------------------------------
        //        chooser.ColumnChooserControl.ColumnDisplayOrder = (Infragistics.Win.UltraWinGrid.ColumnDisplayOrder)(-1);
        //        chooser.Show();
        //    }
        //    catch
        //    {
        //        // 例外
        //    }
        //}
        ///// <summary>
        ///// カラムチューザー生成処理
        ///// </summary>
        ///// <param name="chooser"></param>
        //private void CreateColumnChooser( ref Infragistics.Win.UltraWinGrid.ColumnChooserDialog chooser, Infragistics.Win.UltraWinGrid.UltraGrid sourceGrid )
        //{
        //    if ( chooser == null )
        //    {
        //        chooser = new Infragistics.Win.UltraWinGrid.ColumnChooserDialog();

        //        chooser.Text = "表示項目の選択";
        //        chooser.StartPosition = FormStartPosition.CenterScreen;
        //        chooser.Size = new Size( 250, 400 );
        //        chooser.TopMost = true;

        //        // 表示→閉じた後、破棄しない
        //        chooser.DisposeOnClose = DefaultableBoolean.False;

        //        chooser.ColumnChooserControl.SourceGrid = sourceGrid;
        //        chooser.ColumnChooserControl.Font = sourceGrid.Font;
        //    }
        //    else
        //    {
        //    }
        //}
        //private Infragistics.Win.UltraWinGrid.ColumnChooserDialog _chooserForSlip;
        //private Infragistics.Win.UltraWinGrid.ColumnChooserDialog _chooserForDetail;
        //private Infragistics.Win.UltraWinGrid.ColumnChooserDialog _chooserForBalanceList;
        //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 ADD
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/16 DEL
        #endregion // グリッド作成

        #region グリッド行背景色変更

        #region 行の背景色変更処理

        /// <summary>
        /// 行の背景色変更処理
        /// </summary>
        /// <param name="isSelected">bool 選択されている</param>
        /// <param name="gridRow">行オブジェクト</param>
        /// <param name="targetGrid">対象となるグリッド 0:伝票一覧, 1:明細</param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>             [仕入返品予定計上] 選択行のチェックボックス、結合セルは対象外とするよう変更</br>
        /// </remarks>
        private void RowColorChange(bool isSelected, Infragistics.Win.UltraWinGrid.UltraGridRow gridRow, int targetGrid)
        {
            if (gridRow == null) return;

            // 対象行が選択されているかそうでないかで配色が異なる
            // ----------DEL 2013/01/21 [仕入返品計上]----------->>>>>
            //if (isSelected)
            //{
            //    if (targetGrid == 0)
            //    {
            //        // 伝票一覧グリッド用の色を設定
            //        gridRow.Appearance.BackColor = _selectedRowBackColor_Slip;
            //        gridRow.Appearance.BackColor2 = _selectedRowBackColor2_Slip;
            //    }
            //    else
            //    {
            //        // 明細一覧用の色を設定
            //        gridRow.Appearance.BackColor = _selectedRowBackColor_Detail;
            //        gridRow.Appearance.BackColor2 = _selectedRowBackColor2_Detail;
            //    }
            //    // グラデーションを設定
            //    gridRow.Appearance.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            //}
            //else
            //{
            //    // 背景色を標準の配色に戻す
            //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 DEL
            //    //if (gridRow.Index % 2 == 1)
            //    //{
            //    //    gridRow.Appearance.BackColor = Color.Lavender;
            //    //}
            //    //else
            //    //{
            //    //    gridRow.Appearance.BackColor = Color.White;
            //    //}
            //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 DEL
            //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 ADD
            //    gridRow.Appearance.BackColor = Color.White;
            //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 ADD

            //    // グラデーションを設定
            //    gridRow.Appearance.BackGradientStyle = Infragistics.Win.GradientStyle.Default;
            //}
            // ----------DEL 2013/01/21 [仕入返品計上]-----------<<<<<
            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            Infragistics.Win.Appearance cellApp = new Infragistics.Win.Appearance();

            if (isSelected)
            {
                if (targetGrid == 0)
                {
                    // 伝票一覧グリッド用の色を設定
                    cellApp.BackColor = _selectedRowBackColor_Slip;
                    cellApp.BackColor2 = _selectedRowBackColor2_Slip;
                }
                else
                {
                    // 明細一覧用の色を設定
                    cellApp.BackColor = _selectedRowBackColor_Detail;
                    cellApp.BackColor2 = _selectedRowBackColor2_Detail;
                }
                // グラデーションを設定
                cellApp.BackGradientStyle = GradientStyle.Vertical;
            }
            else
            {
                // 背景色を標準の配色に戻す
                cellApp.BackColor = Color.White;
                cellApp.BackColor2 = Color.White;
                
                // グラデーションを設定
                cellApp.BackGradientStyle = GradientStyle.Default;
            }

            if (targetGrid == 0)
            {
                foreach (Infragistics.Win.UltraWinGrid.UltraGridCell cell in gridRow.Cells)
                {
                    // チェックボックス不要なセルはCheckBox表示しない
                    if (cell.Column.Key == _detailDataSet.StcList.SelectionColumn.ColumnName &&
                         cell.Value == DBNull.Value)
                    {
                        cell.Style = Infragistics.Win.UltraWinGrid.ColumnStyle.Edit;
                        cell.Appearance.BackColor = _margedCellAppearance.BackColor;
                        cell.Appearance.BackColor2 = _margedCellAppearance.BackColor2;
                        continue;
                    }
                    // 結合セルのカラムとチェックボックスカラムは迂回
                    if (cell.Column.Key == _detailDataSet.StcList.SelectionColumn.ColumnName ||
                         cell.Column.Key == _detailDataSet.StcList.StockDateColumn.ColumnName ||
                         cell.Column.Key == _detailDataSet.StcList.PartySaleSlipNumColumn.ColumnName)
                    {
                        continue;
                    }
                    cell.Appearance.BackColor = cellApp.BackColor;
                    cell.Appearance.BackColor2 = cellApp.BackColor2;
                    cell.Appearance.BackGradientStyle = cellApp.BackGradientStyle;
                }
            }
            else
            {
                foreach (Infragistics.Win.UltraWinGrid.UltraGridCell cell in gridRow.Cells)
                {
                    // チェックボックス不要なセルはCheckBox表示しない
                    if (cell.Column.Key == _detailDataSet.StcDetail.SelectionCheckColumn.ColumnName &&
                         cell.Value == DBNull.Value)
                    {
                        cell.Style = Infragistics.Win.UltraWinGrid.ColumnStyle.Edit;

                        cell.Appearance.BackColor = _margedCellAppearance.BackColor;
                        cell.Appearance.BackColor2 = _margedCellAppearance.BackColor2;
                        continue;
                    }
                    // 結合セルのカラムとチェックボックスカラムは迂回
                    if (cell.Column.Key == _detailDataSet.StcDetail.SelectionCheckColumn.ColumnName ||
                         cell.Column.Key == _detailDataSet.StcDetail.StockDateColumn.ColumnName ||
                         cell.Column.Key == _detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName)
                    {
                        continue;
                    }
                    cell.Appearance.BackColor = cellApp.BackColor;
                    cell.Appearance.BackColor2 = cellApp.BackColor2;
                    cell.Appearance.BackGradientStyle = cellApp.BackGradientStyle;
                }
            }
            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
        }

        #endregion // 行の背景色変更処理

        #region 行の背景色変更処理(伝票区分ごとの前景色・背景色)

        /// <summary>
        /// 行の背景色変更処理(伝票区分ごとの前景色・背景色)
        /// </summary>
        /// <param name="isSelected">bool 選択されている</param>
        /// <param name="gridRow">行オブジェクト</param>
        /// <param name="targetGrid">対象となるグリッド 0:伝票一覧, 1:明細</param>
        /// <param name="slipType">0: 赤伝/返品 1:受注 2:出荷 3: 入金 4:商品値引 9:仕入,返品計上(通常色)</param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>             [仕入返品予定計上] 選択行のチェックボックス、結合セルは対象外とするよう変更</br>
        /// </remarks>
        private void RowColorChange_SlipType(bool isSelected, Infragistics.Win.UltraWinGrid.UltraGridRow gridRow, int targetGrid, int slipType)
        {
            if (gridRow == null) return;

            // 対象行が選択されているかそうでないかで配色が異なる
            // ----------DEL 2013/01/21 [仕入返品計上]----------->>>>>
            //if (isSelected)
            //{
            //    if (targetGrid == 0)
            //    {
            //        // 伝票一覧グリッド用の色を設定
            //        gridRow.Appearance.BackColor = _selectedRowBackColor_Slip;
            //        gridRow.Appearance.BackColor2 = _selectedRowBackColor2_Slip;
            //    }
            //    else
            //    {
            //        // 明細一覧用の色を設定
            //        gridRow.Appearance.BackColor = _selectedRowBackColor_Detail;
            //        gridRow.Appearance.BackColor2 = _selectedRowBackColor2_Detail;
            //    }
            //    // グラデーションを設定
            //    gridRow.Appearance.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            //}
            //else
            //{
            //    // 背景色を標準の配色に戻す
            //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 DEL
            //    //if (gridRow.Index % 2 == 1)
            //    //{
            //    //    if (slipType == 0) // 赤伝/返品
            //    //    {
            //    //        gridRow.Appearance.ForeColor = this._RedSlipRowForeColor;
            //    //        gridRow.Appearance.BackColor = this._RedSlipRowBackColor;
            //    //    }
            //    //    else if (slipType == 1) // 受注
            //    //    {
            //    //        gridRow.Appearance.ForeColor = this._OrdersRowForeColor;
            //    //        gridRow.Appearance.BackColor = this._OrdersRowBackColor;
            //    //    }
            //    //    else if (slipType == 2) // 出荷
            //    //    {
            //    //        gridRow.Appearance.ForeColor = this._ShippingRowForeColor;
            //    //        gridRow.Appearance.BackColor = this._ShippingRowBackColor;
            //    //    }
            //    //    else if (slipType == 3) // 入金
            //    //    {
            //    //        gridRow.Appearance.ForeColor = this._DepositRowForeColor;
            //    //        gridRow.Appearance.BackColor = this._DepositRowBackColor;
            //    //    }
            //    //    else
            //    //    {
            //    //        gridRow.Appearance.BackColor = Color.Lavender;
            //    //    }
            //    //}
            //    //else
            //    //{
            //    //    if (slipType == 0) // 赤伝/返品
            //    //    {
            //    //        gridRow.Appearance.ForeColor = this._RedSlipRowForeColor;
            //    //        gridRow.Appearance.BackColor = this._RedSlipRowBackColor;
            //    //    }
            //    //    else if (slipType == 1) // 受注
            //    //    {
            //    //        gridRow.Appearance.ForeColor = this._OrdersRowForeColor;
            //    //        gridRow.Appearance.BackColor = this._OrdersRowBackColor;
            //    //    }
            //    //    else if (slipType == 2) // 出荷
            //    //    {
            //    //        gridRow.Appearance.ForeColor = this._ShippingRowForeColor;
            //    //        gridRow.Appearance.BackColor = this._ShippingRowBackColor;
            //    //    }
            //    //    else if (slipType == 3) // 入金
            //    //    {
            //    //        gridRow.Appearance.ForeColor = this._DepositRowForeColor;
            //    //        gridRow.Appearance.BackColor = this._DepositRowBackColor;
            //    //    }
            //    //    else
            //    //    {
            //    //        gridRow.Appearance.BackColor = Color.White;
            //    //    }
            //    //}
            //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 DEL
            //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 ADD
            //    if ( slipType == 0 ) // 赤伝/返品
            //    {
            //        gridRow.Appearance.ForeColor = this._RedSlipRowForeColor;
            //        gridRow.Appearance.BackColor = this._RedSlipRowBackColor;
            //    }
            //    else if ( slipType == 1 ) // 受注
            //    {
            //        gridRow.Appearance.ForeColor = this._OrdersRowForeColor;
            //        gridRow.Appearance.BackColor = this._OrdersRowBackColor;
            //    }
            //    else if ( slipType == 2 ) // 出荷
            //    {
            //        gridRow.Appearance.ForeColor = this._ShippingRowForeColor;
            //        gridRow.Appearance.BackColor = this._ShippingRowBackColor;
            //    }
            //    else if ( slipType == 3 ) // 入金
            //    {
            //        gridRow.Appearance.ForeColor = this._DepositRowForeColor;
            //        gridRow.Appearance.BackColor = this._DepositRowBackColor;
            //    }
            //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/00/00 ADD
            //    else if ( slipType == 4 ) // 商品値引
            //    {
            //        gridRow.Appearance.ForeColor = this._RedSlipRowForeColor;
            //        gridRow.Appearance.BackColor = Color.White;
            //    }
            //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/00/00 ADD
            //    else
            //    {
            //        gridRow.Appearance.BackColor = Color.White;
            //    }
            //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 ADD
            //    // グラデーションを設定
            //    gridRow.Appearance.BackGradientStyle = Infragistics.Win.GradientStyle.Default;
            //}
            // ----------DEL 2013/01/21 [仕入返品計上]-----------<<<<<
            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            Infragistics.Win.Appearance cellApp = new Infragistics.Win.Appearance();
            cellApp.ForeColor = Color.Black; // 初期化

            if (isSelected)
            {
                if (targetGrid == 0)
                {
                    // 伝票一覧グリッド用の色を設定
                    cellApp.BackColor = _selectedRowBackColor_Slip;
                    cellApp.BackColor2 = _selectedRowBackColor2_Slip;
                }
                else
                {
                    // 明細一覧用の色を設定
                    cellApp.BackColor = _selectedRowBackColor_Detail;
                    cellApp.BackColor2 = _selectedRowBackColor2_Detail;
                }
                // グラデーションを設定
                cellApp.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            }
            else
            {
                // 背景色を標準の配色に戻す
                if (slipType == 0) // 赤伝/返品
                {
                    cellApp.ForeColor = this._RedSlipRowForeColor;
                    cellApp.BackColor = this._RedSlipRowBackColor;
                }
                else if (slipType == 1) // 受注
                {
                    cellApp.ForeColor = this._OrdersRowForeColor;
                    cellApp.BackColor = this._OrdersRowBackColor;
                }
                else if (slipType == 2) // 出荷
                {
                    cellApp.ForeColor = this._ShippingRowForeColor;
                    cellApp.BackColor = this._ShippingRowBackColor;
                }
                else if (slipType == 3) // 入金
                {
                    cellApp.ForeColor = this._DepositRowForeColor;
                    cellApp.BackColor = this._DepositRowBackColor;
                }
                else if (slipType == 4) // 商品値引
                {
                    cellApp.ForeColor = this._RedSlipRowForeColor;
                    cellApp.BackColor = Color.White;
                }
                else
                {
                    cellApp.BackColor = Color.White;
                }
                // グラデーションを設定
                cellApp.BackGradientStyle = Infragistics.Win.GradientStyle.None;
            }

            if (targetGrid == 0)
            {
                foreach (Infragistics.Win.UltraWinGrid.UltraGridCell cell in gridRow.Cells)
                {
                    if (cell.Column.Key == _detailDataSet.StcList.SelectionColumn.ColumnName ||
                         cell.Column.Key == _detailDataSet.StcList.StockDateColumn.ColumnName ||
                         cell.Column.Key == _detailDataSet.StcList.PartySaleSlipNumColumn.ColumnName)
                    {
                        continue;
                    }
                    cell.Appearance.BackColor = cellApp.BackColor;
                    cell.Appearance.BackColor2 = cellApp.BackColor2;
                    cell.Appearance.BackGradientStyle = cellApp.BackGradientStyle;
                    cell.Appearance.ForeColor = cellApp.ForeColor;
                }
            }
            else
            {
                foreach (Infragistics.Win.UltraWinGrid.UltraGridCell cell in gridRow.Cells)
                {
                    if (cell.Column.Key == _detailDataSet.StcDetail.SelectionCheckColumn.ColumnName ||
                         cell.Column.Key == _detailDataSet.StcDetail.StockDateColumn.ColumnName ||
                         cell.Column.Key == _detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName)
                    {
                        continue;
                    }
                    cell.Appearance.BackColor = cellApp.BackColor;
                    cell.Appearance.BackColor2 = cellApp.BackColor2;
                    cell.Appearance.BackGradientStyle = cellApp.BackGradientStyle;
                    cell.Appearance.ForeColor = cellApp.ForeColor;
                }
            }
            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
        }

        #endregion // 行の背景色変更処理(伝票区分ごとの前景色・背景色)

        #region 行の背景色変更処理(伝票区分ごと、選択自動判定)

        /// <summary>
        /// 行の背景色変更処理(伝票区分ごと、選択自動判定)
        /// </summary>
        /// <param name="gridRow"></param>
        /// <param name="targetGrid"></param>
        /// <param name="slipType"></param>
        private void RowColorChange_SlipType(Infragistics.Win.UltraWinGrid.UltraGridRow gridRow, int targetGrid, int slipType)
        {
            if (gridRow == null) return;

            if (targetGrid == 0)
            {
                // 選択されている
                if (gridRow.Appearance.BackColor != _selectedRowBackColor_Slip)
                {
                    // 伝票一覧グリッド用の色を設定
                    gridRow.Appearance.BackColor = _selectedRowBackColor_Slip;
                    gridRow.Appearance.BackColor2 = _selectedRowBackColor2_Slip;

                    // グラデーション設定
                    gridRow.Appearance.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
                }
                else
                {
                    // 元の色に戻す
                    if (slipType == 0) // 赤伝/返品
                    {
                        gridRow.Appearance.ForeColor = this._RedSlipRowForeColor;
                        gridRow.Appearance.BackColor = this._RedSlipRowBackColor;
                    }
                    else if (slipType == 1) // 受注
                    {
                        gridRow.Appearance.ForeColor = this._OrdersRowForeColor;
                        gridRow.Appearance.BackColor = this._OrdersRowBackColor;
                    }
                    else if (slipType == 2) // 出荷
                    {
                        gridRow.Appearance.ForeColor = this._ShippingRowForeColor;
                        gridRow.Appearance.BackColor = this._ShippingRowBackColor;
                    }
                    else if (slipType == 3) // 入金
                    {
                        gridRow.Appearance.ForeColor = this._DepositRowForeColor;
                        gridRow.Appearance.BackColor = this._DepositRowBackColor;
                    }
                    else
                    {
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 DEL
                        //if (gridRow.Index % 2 == 1)
                        //{
                        //    gridRow.Appearance.BackColor = Color.Lavender;
                        //}
                        //else
                        //{
                        //    gridRow.Appearance.BackColor = Color.White;
                        //}
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 ADD
                        gridRow.Appearance.BackColor = Color.White;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 ADD
                    }
                    // グラデーション設定
                    gridRow.Appearance.BackGradientStyle = Infragistics.Win.GradientStyle.Default;
                }
            }
            else
            {
                // 選択されている
                if (gridRow.Appearance.BackColor != _selectedRowBackColor_Detail)
                {
                    // 明細一覧用の色を設定
                    gridRow.Appearance.BackColor = _selectedRowBackColor_Detail;
                    gridRow.Appearance.BackColor2 = _selectedRowBackColor2_Detail;

                    // グラデーション設定
                    gridRow.Appearance.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
                }
                else
                {
                    // 元の色に戻す
                    if (slipType == 0) // 赤伝/返品
                    {
                        gridRow.Appearance.ForeColor = this._RedSlipRowForeColor;
                        gridRow.Appearance.BackColor = this._RedSlipRowBackColor;
                    }
                    else if (slipType == 1) // 受注
                    {
                        gridRow.Appearance.ForeColor = this._OrdersRowForeColor;
                        gridRow.Appearance.BackColor = this._OrdersRowBackColor;
                    }
                    else if (slipType == 2) // 出荷
                    {
                        gridRow.Appearance.ForeColor = this._ShippingRowForeColor;
                        gridRow.Appearance.BackColor = this._ShippingRowBackColor;
                    }
                    else if (slipType == 3) // 入金
                    {
                        gridRow.Appearance.ForeColor = this._DepositRowForeColor;
                        gridRow.Appearance.BackColor = this._DepositRowBackColor;
                    }
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/00/00 ADD
                    else if ( slipType == 4 ) // 商品値引
                    {
                        gridRow.Appearance.ForeColor = this._RedSlipRowForeColor;
                        gridRow.Appearance.BackColor = Color.White;
                    }
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/00/00 ADD
                    else
                    {
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 DEL
                        //if (gridRow.Index % 2 == 1)
                        //{
                        //    gridRow.Appearance.BackColor = Color.Lavender;
                        //}
                        //else
                        //{
                        //    gridRow.Appearance.BackColor = Color.White;
                        //}
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 ADD
                        gridRow.Appearance.BackColor = Color.White;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 ADD
                    }
                    // グラデーション設定
                    gridRow.Appearance.BackGradientStyle = Infragistics.Win.GradientStyle.Default;
                }

            }


        }

        #endregion // 行の背景色変更処理(伝票区分ごと、選択自動判定)

        #region 全ての行の背景色変更

        /// <summary>
        /// 全ての行の背景色変更
        /// </summary>
        /// <param name="isSelected">bool 選択されている</param>
        /// <param name="targetGrid">対象とするグリッド 0:伝票一覧, 1:明細, 2:残高一覧</param>
        private void RowColorChangeAll(bool isSelected, int targetGrid)
        {
            switch (targetGrid)
            {
                case 0:
                    {
                        foreach (Infragistics.Win.UltraWinGrid.UltraGridRow row in this.uGrid_Slip.Rows)
                        {
                            RowColorChange(isSelected, row, targetGrid);
                        }
                        break;
                    }
                case 1:
                    {
                        foreach (Infragistics.Win.UltraWinGrid.UltraGridRow row in this.uGrid_Detail.Rows)
                        {
                            RowColorChange(isSelected, row, targetGrid);
                        }
                        break;
                    }
                case 2:
                    {
                        foreach (Infragistics.Win.UltraWinGrid.UltraGridRow row in this.uGrid_BalanceList.Rows)
                        {
                            RowColorChange(isSelected, row, 0);
                        }
                        break;
                    }
                default:
                    {
                        break;
                    }
            }
        }

        #endregion // 全ての行の背景色変更

        #region 全ての行の背景色変更(伝票区分ごとの背景・前景色)

        /// <summary>
        /// 全ての行の背景色変更(伝票区分ごとの背景・前景色)
        /// </summary>
        /// <param name="isSelected">bool 選択されている</param>
        /// <param name="rows">行コレクション</param>
        /// <param name="targetGrid">対象とするグリッド 0:伝票一覧, 1:明細, 2:赤伝発行</param>
        /// <remarks>
        /// <br>Update Note: 2012/10/15 田建委</br>
        /// <br>管理番号   : 10801804-00、2012/11/14配信分</br>
        /// <br>             Redmine#32862 価格変更した明細、色を変えるように修正</br>
        /// <br>Update Note: 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>             [仕入返品計上] 仕入形式が3:返品予定のときの条件追加</br>
        /// </remarks>
        private void RowColorChangeAll_SlipType(bool isSelected, Infragistics.Win.UltraWinGrid.RowsCollection rows, int targetGrid)
        {
            switch (targetGrid)
            {
                    // 赤伝・残高はない
                case 0:
                    {
                        // 受注などの行のみ色を変える
                        foreach (Infragistics.Win.UltraWinGrid.UltraGridRow row in rows)
                        {
                            if ((int)row.Cells[this._detailDataSet.StcList.DataDivColumn.ColumnName].Value == 1) // 入金
                            {
                                //this.RowColorChange_SlipType(false, row, 1, 3); // DEL 2013/01/21 [仕入返品計上]
                                this.RowColorChange_SlipType(false, row, 0, 3); // ADD 2013/01/21 [仕入返品計上]
                            }
                            else
                            {
                                // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                                // 仕入形式が3:返品予定のときは仕入先伝票区分に関係なく、色の変更はしない
                                if ((int)row.Cells[this._detailDataSet.StcList.SupplierFormalColumn.ColumnName].Value == 3) // 返品予定
                                {
                                    this.RowColorChange_SlipType(false, row, 0, 9);
                                    break;
                                }
                                // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

                                if ((int)row.Cells[this._detailDataSet.StcList.SupplierSlipCdColumn.ColumnName].Value == 20) // 返品
                                {
                                    //this.RowColorChange_SlipType(false, row, 1, 0); // DEL 2013/01/21 [仕入返品計上]
                                    this.RowColorChange_SlipType(false, row, 0, 0); // ADD 2013/01/21 [仕入返品計上]
                                }
                                else
                                {
                                    if (row.Cells[this._detailDataSet.StcList.DebitNoteDivColumn.ColumnName].Value.ToString() == "赤伝") // 赤伝
                                    {
                                        //this.RowColorChange_SlipType(false, row, 1, 0); // DEL 2013/01/21 [仕入返品計上]
                                        this.RowColorChange_SlipType(false, row, 0, 0); // ADD 2013/01/21 [仕入返品計上]
                                    }
                                    else
                                    {
                                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
                                        //if ((int)row.Cells[this._detailDataSet.StcList.SupplierFormalColumn.ColumnName].Value == 1) // 発注
                                        //{
                                        //    this.RowColorChange_SlipType(false, row, 1, 1);
                                        //}
                                        //else if ((int)row.Cells[this._detailDataSet.StcList.SupplierFormalColumn.ColumnName].Value == 2) // 入荷
                                        //{
                                        //    this.RowColorChange_SlipType(false, row, 1, 2);
                                        //}
                                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL
                                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                                        if ( (int)row.Cells[this._detailDataSet.StcList.SupplierFormalColumn.ColumnName].Value == 2 ) // 発注
                                        {
                                            //this.RowColorChange_SlipType( false, row, 1, 2 ); // DEL 2013/01/21 [仕入返品計上]
                                            this.RowColorChange_SlipType(false, row, 0, 2); // ADD 2013/01/21 [仕入返品計上]
                                        }
                                        else if ( (string)row.Cells[this._detailDataSet.StcList.SalesSlipNumColumn.ColumnName].Value != string.Empty ) // 売仕入同時
                                        {
                                            //this.RowColorChange_SlipType( false, row, 1, 1 ); // DEL 2013/01/21 [仕入返品計上]
                                            this.RowColorChange_SlipType(false, row, 0, 1); // ADD 2013/01/21 [仕入返品計上]
                                        }
                                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD
                                    }
                                }
                            }
                        }
                        break;
                    }
                case 1:
                    {
                        // 受注などの行のみ色を変える
                        foreach (Infragistics.Win.UltraWinGrid.UltraGridRow row in rows)
                        {
                            if ((int)row.Cells[this._detailDataSet.StcDetail.DataDivColumn.ColumnName].Value == 1) // 入金
                            {
                                this.RowColorChange_SlipType(false, row, 1, 3);
                            }
                            else
                            {
                                // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                                if ((int)row.Cells[this._detailDataSet.StcDetail.SupplierFormalColumn.ColumnName].Value == 3) // 返品予定
                                {
                                    // 仕入形式が3:返品予定のときは仕入先伝票区分に関係なく、背景色の変更はしない(原単価、定価を除く)
                                    this.RowColorChange_SlipType(false, row, 1, 9);
                                }
                                else
                                {
                                // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

                                    if ((int)row.Cells[this._detailDataSet.StcDetail.SupplierSlipCdColumn.ColumnName].Value == 20) // 返品
                                    {
                                        this.RowColorChange_SlipType(false, row, 1, 0);
                                    }
                                    else
                                    {
                                        if (row.Cells[this._detailDataSet.StcDetail.DebitNoteDivColumn.ColumnName].Value.ToString() == "赤伝") // 赤伝
                                        {
                                            this.RowColorChange_SlipType(false, row, 1, 0);
                                        }
                                        else
                                        {
                                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
                                            //if ( (int)row.Cells[this._detailDataSet.StcDetail.SupplierFormalColumn.ColumnName].Value == 1 ) // 受注
                                            //{
                                            //    this.RowColorChange_SlipType(false, row, 1, 1);
                                            //}
                                            //else if ((int)row.Cells[this._detailDataSet.StcDetail.SupplierFormalColumn.ColumnName].Value == 2) // 出荷
                                            //{
                                            //    this.RowColorChange_SlipType(false, row, 1, 2);
                                            //}
                                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL
                                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                                        if ( (int)row.Cells[this._detailDataSet.StcDetail.SupplierFormalColumn.ColumnName].Value == 2 ) // 発注
                                            {
                                            this.RowColorChange_SlipType( false, row, 1, 2 );
                                            }
                                        else if ( (string)row.Cells[this._detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName].Value != string.Empty ) // 売仕入同時
                                            {
                                            this.RowColorChange_SlipType( false, row, 1, 1 );
                                            }
                                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD
                                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/00/00 ADD
                                        else if ( (string)row.Cells[this._detailDataSet.StcDetail.StockSlipCdDtlColumn.ColumnName].Value == "商品値引" )
                                            {
                                            this.RowColorChange_SlipType( false, row, 1, 4 );
                                            }
                                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/00/00 ADD
                                        }
                                    }
                                } // ADD 2013/01/21 [仕入返品予定]


                                // ----------- ADD 2012/10/15 田建委 Redmine#32862 ------------>>>>>
                                #region 原単価、定価のバックカラー設定
                                int stockRowNo = (int)row.Cells[_detailDataSet.StcDetail.RowNoColumn.ColumnName].Value;
                                this.DetailGridSalesUnitPriceColorSetting(row, stockRowNo);
                                this.DetailGridListPriceColorSetting(row, stockRowNo);
                                #endregion
                                // ----------- ADD 2012/10/15 田建委 Redmine#32862 ------------<<<<<
                            }
                        }
                        break;
                    }
                default:
                    {
                        break;
                    }
            }
        }

        #endregion // 全ての行の背景色変更(伝票区分ごとの背景・前景色)

        #endregion // グリッド行背景色変更


        // ----------- ADD 2012/10/15 田建委 Redmine#32862 ------------>>>>>
        /// <summary>
        /// 単価背景色設定(明細表示グリッド)
        /// </summary>
        /// <param name="detailGridRow">detailGridRow</param>
        /// <param name="stockRowNo">stockRowNo</param>
        /// <remarks>
        /// <br>Note		: 単価背景色設定を行いします。</br>
        /// <br>Programmer	: 田建委</br>
        /// <br>Date		: 2012/10/15</br>
        /// <br>管理番号    : 10801804-00、2012/11/14配信分</br>
        /// <br>Update Note : 2012/10/30 田建委</br>
        /// <br>管理番号    : 10801804-00、2012/11/14配信分</br>
        /// <br>              Redmine#32862#20 仕入データに入力区分「合計」で作成して、それを検索対象にした場合、システムエラーとなる修正</br>
        /// </remarks>
        private void DetailGridSalesUnitPriceColorSetting(Infragistics.Win.UltraWinGrid.UltraGridRow detailGridRow, int stockRowNo)
        {
            bool ret = true;

            SuppPtrStcDetailDataSet.StcDetailRow row = this._detailDataSet.StcDetail.FindByRowNo(stockRowNo);
            //if ((row != null) && (row.StockUnitPriceFl != 0)) // DEL 2012/10/30 田建委 Redmine#32862
            if (row != null && !row.IsStockUnitPriceFlNull() && !row.IsBfStockUnitPriceFlNull() && row.StockUnitPriceFl != 0) // ADD 2012/10/30 田建委 Redmine#32862
            {
                //仕入明細データ（仕入履歴明細データ）.変更前単価 ≠ 画面単価
                if (row.StockUnitPriceFl != row.BfStockUnitPriceFl)
                ret = false;
            }
            if (ret == false)
            {
                //単価背景色設定
                detailGridRow.Cells[_detailDataSet.StcDetail.StockUnitPriceFlColumn.ColumnName].Appearance.BackColor = _CellReadOnlyColor2;
                detailGridRow.Cells[_detailDataSet.StcDetail.StockUnitPriceFlColumn.ColumnName].Appearance.BackColor2 = _CellReadOnlyColor2;
            }
        }

        /// <summary>
        /// 定価背景色設定(明細表示グリッド)
        /// </summary>
        /// <param name="detailGridRow">detailGridRow</param>
        /// <param name="stockRowNo">stockRowNo</param>
        /// <remarks>
        /// <br>Note		: 定価背景色設定を行いします。</br>
        /// <br>Programmer	: 田建委</br>
        /// <br>Date		: 2012/10/15</br>
        /// <br>管理番号    : 10801804-00、2012/11/14配信分</br>
        /// <br>Update Note : 2012/10/30 田建委</br>
        /// <br>管理番号    : 10801804-00、2012/11/14配信分</br>
        /// <br>              Redmine#32862#20 仕入データに入力区分「合計」で作成して、それを検索対象にした場合、システムエラーとなる修正</br>
        /// </remarks>
        private void DetailGridListPriceColorSetting(Infragistics.Win.UltraWinGrid.UltraGridRow detailGridRow, int stockRowNo)
        {
            bool ret = true;

            SuppPtrStcDetailDataSet.StcDetailRow row = this._detailDataSet.StcDetail.FindByRowNo(stockRowNo);
            //if ((row != null) && (row.ListPriceTaxExcFl != 0)) // DEL 2012/10/30 田建委 Redmine#32862
            if (row != null && !row.IsListPriceTaxExcFlNull() && !row.IsBfListPriceNull() && row.ListPriceTaxExcFl != 0) // ADD 2012/10/30 田建委 Redmine#32862
            {
                //仕入明細データ（仕入履歴明細データ）.変更前定価 ≠ 画面定価
                if (row.ListPriceTaxExcFl != row.BfListPrice) 
                ret = false;

            }

            if (ret == false)
            {
                //定価背景色設定
                detailGridRow.Cells[_detailDataSet.StcDetail.ListPriceTaxExcFlColumn.ColumnName].Appearance.BackColor = _CellReadOnlyColor2;
                detailGridRow.Cells[_detailDataSet.StcDetail.ListPriceTaxExcFlColumn.ColumnName].Appearance.BackColor2 = _CellReadOnlyColor2;
            }
        }
        // ----------- ADD 2012/10/15 田建委 Redmine#32862 ------------<<<<<

        #region 得意先電子元帳呼び出し

        /// <summary>
        /// 得意先電子元帳呼び出し
        /// </summary>
        private void InvokeCustomerElecNote()
        {
            // 得意先電子元帳呼び出し
            //Invoke(CT_CUSTOMER_ERECNOTE_PGID, CT_COMMON_CLASS_NAME + CT_CUSTOMER_ERECNOTE_FORMID, new object[] { }, "Show", new object[] { });
            Invoke( CT_CUSTOMER_ERECNOTE_PGID, CT_COMMON_CLASS_NAME + CT_CUSTOMER_ERECNOTE_FORMID, new object[] { CT_SUPPLIER_ERECNOTE_PGID }, "Show", new object[] { } );
        }

        #endregion // 得意先電子元帳呼び出し

        #region 他アセンブリメソッド呼び出し(リフレクション)

        /// <summary>
        /// メソッド呼び出し
        /// </summary>
        private bool Invoke(string assemblyName, string className, object[] createArgs, string methodName, object[] executeArgs)
        {
            bool result = false;

            System.Reflection.Assembly asm = System.Reflection.Assembly.Load(assemblyName);
            Type objType = asm.GetType(className);
            if (objType != null)
            {
                object obj = Activator.CreateInstance(objType, createArgs);

                if (obj != null)
                {
                    Type[] parameterTypes = new Type[executeArgs.Length];
                    for (int index = 0; index < executeArgs.Length; index++)
                    {
                        parameterTypes[index] = executeArgs[index].GetType();
                    }
                    MethodInfo methodInfo = obj.GetType().GetMethod(methodName, parameterTypes);

                    if (methodInfo != null)
                    {
                        try
                        {
                            methodInfo.Invoke(obj, executeArgs);
                            result = true;
                        }
                        catch
                        {
                        }
                    }
                }
            }

            return result;
        }

        #endregion // 他アセンブリメソッド呼び出し(リフレクション)

        #endregion // プライベートメソッド

        #region 検索

        /// <summary>
        /// メニューの検索ボタンクリック
        /// </summary>
        /// <returns>status:リモート側のステータス他、-1はエラー</returns>
        /// <remarks>伝票および明細のデータを取得します</remarks>
        /// <br>Update Note : 2010/07/20 chenyd</br>
        /// <br>           　テキスト出力対応</br>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>             [仕入返品計上] 伝票・明細検索後の選択チェックボックス処理追加</br>
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
        //private int SearchSlipDetailList()
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        private Control SearchSlipDetailList()
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
        {
            // ADD 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ---------->>>>>
            _suppPtrSearchAcs.ExtractCancelFlag = false;
            // ADD 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ----------<<<<<

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            Control errorControl = null;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

            int status = 0;
            // ------ ADD 2010/09/26 ----------------------------------->>>>>
            // 拠点コード
            if (this.tEdit_SectionCodeAllowZero.Focused)
            {
                ChangeFocusEventArgs e = new ChangeFocusEventArgs(false, false, false, Keys.Return, this.tEdit_SectionCodeAllowZero, this.tEdit_SectionCodeAllowZero);
                this.tEdit_SectionCodeAllowZero.Text = this.uiSetControl1.GetZeroPaddedText(this.tEdit_SectionCodeAllowZero.Name, this.tEdit_SectionCodeAllowZero.Text);
                this.tArrowKeyControl_ChangeFocus(this, e);
                if (isError == true)
                {
                    return null;
                }
            }
            // 仕入先コード
            if (this.tNedit_SupplierCd.Focused)
            {
                ChangeFocusEventArgs e = new ChangeFocusEventArgs(false, false, false, Keys.Return, this.tNedit_SupplierCd, this.tNedit_SupplierCd);
                this.tNedit_SupplierCd.Text = this.uiSetControl1.GetZeroPaddedText(this.tNedit_SupplierCd.Name, this.tNedit_SupplierCd.Text);
                this.tArrowKeyControl_ChangeFocus(this, e);
                if (isError == true)
                {
                    return null;
                }
            }
            // 支払先コード
            if (this.tNedit_PayeeCode.Focused)
            {
                ChangeFocusEventArgs e = new ChangeFocusEventArgs(false, false, false, Keys.Return, this.tNedit_PayeeCode, this.tNedit_PayeeCode);
                this.tNedit_PayeeCode.Text = this.uiSetControl1.GetZeroPaddedText(this.tNedit_PayeeCode.Name, this.tNedit_PayeeCode.Text);
                this.tArrowKeyControl_ChangeFocus(this, e);
                if (isError == true)
                {
                    return null;
                }
            }
            // ------ ADD 2010/09/26 -----------------------------------<<<<<
            if (this._selectedMainTabKey == "uTab_RemainList")
            {
                #region 残高一覧取得
                // --- ADD 2012/09/13 ---------->>>>>
                if (_opt_SupplierSummary == (int)Option.ON)
                {
                    if (this.tNedit_SupplierCd.GetInt() == 0)
                    {
                        TMsgDisp.Show(
                            this,
                            emErrorLevel.ERR_LEVEL_INFO,
                            this.Name,
                            "残高一覧を表示するには、仕入先コードを入力して下さい。",
                            -1,
                            MessageBoxButtons.OK);
                        if (this.uExGroupBox_CommonCondition.Expanded)
                        {
                            this.tNedit_SupplierCd.Focus();
                            this.tNedit_SupplierCd.SelectAll();
                        }
                        return null;
                    }
                }
                else
                {
                    // ---------------------- ADD 2010/07/20 --------------------------------->>>>>
                    if (this.tNedit_SupplierCd.GetInt() == 0 && this.tNedit_PayeeCode.GetInt() == 0)
                    {
                        TMsgDisp.Show(
                            this,
                            emErrorLevel.ERR_LEVEL_INFO,
                            this.Name,
                            "残高一覧を表示するには、仕入先コードまたは支払先コードを入力して下さい。",
                            -1,
                            MessageBoxButtons.OK);
                        if (this.uExGroupBox_CommonCondition.Expanded)
                        {
                            this.tNedit_SupplierCd.Focus();
                            this.tNedit_SupplierCd.SelectAll();
                        }
                        return null;
                    }
                    // ---------------------- ADD 2010/07/20 ---------------------------------<<<<<
                }
                // --- ADD 2012/09/13 ----------<<<<<

                // 残高一覧タブが表示されている場合は残高一覧を取得

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
                //// 残高一覧をクリア
                //this._detailDataSet.BalanceList.Clear();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                ////-----------------------
                //// 日付をチェック
                ////-----------------------
                //if (this.tDateEdit_rl_TargetYMSt.GetDateTime() > this.tDateEdit_rl_TargetYMEd.GetDateTime())
                //{
                //    // 日付チェック失敗
                //    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                //        MSG_MUST_BE_CORRECT_CALENDER, -1, MessageBoxButtons.OK);
                //    return -1;
                //}

                //if (this.tDateEdit_rl_TargetYMSt.GetDateTime().AddYears(1) < this.tDateEdit_rl_TargetYMEd.GetDateTime())
                //{
                //    // 日付チェック失敗
                //    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                //        MSG_MUST_BE_IN_A_YEAR, -1, MessageBoxButtons.OK);
                //    return -1;
                //}
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                // 日付範囲チェック処理
                DateGetAcs.CheckDateRangeResult cdrResult;
                if ( CheckDateRange( ref tDateEdit_rl_TargetYMSt, ref tDateEdit_rl_TargetYMEd, out cdrResult ) == false)
                {
                    switch ( cdrResult )
                    {
                        case DateGetAcs.CheckDateRangeResult.ErrorOfEndInvalid:
                        case DateGetAcs.CheckDateRangeResult.ErrorOfEndNoInput:
                            {
                                TMsgDisp.Show( this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                                    MSG_ED_YM_ERROR, -1, MessageBoxButtons.OK );
                                return tDateEdit_rl_TargetYMEd;
                            }
                        case DateGetAcs.CheckDateRangeResult.ErrorOfRangeOver:
                            {
                                TMsgDisp.Show( this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                                    MSG_MUST_BE_IN_A_YEAR, -1, MessageBoxButtons.OK );
                                return tDateEdit_rl_TargetYMSt;
                            }
                        case DateGetAcs.CheckDateRangeResult.ErrorOfReverse:
                            {
                                TMsgDisp.Show( this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                                    MSG_MUST_BE_CORRECT_CALENDER, -1, MessageBoxButtons.OK );
                                return tDateEdit_rl_TargetYMSt;
                            }
                        case DateGetAcs.CheckDateRangeResult.ErrorOfStartInvalid:
                        case DateGetAcs.CheckDateRangeResult.ErrorOfStartNoInput:
                            {
                                TMsgDisp.Show( this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                                    MSG_ST_YM_ERROR, -1, MessageBoxButtons.OK );
                                return tDateEdit_rl_TargetYMSt;
                            }
                    }
                }
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                //-----------------------
                // パラメータをセット
                //-----------------------

                // 企業コード
                this._suppPrtPprBlnce.EnterpriseCode = this._enterpriseCode;

                // 拠点コード
                if ( String.IsNullOrEmpty( this.tEdit_SectionCodeAllowZero.Text.Trim() ) || this.tEdit_SectionCodeAllowZero.Text.Trim() == "00" )
                {
                    this._suppPrtPprBlnce.SectionCode = null;
                }
                else
                {
                    string[] sectionCode = new string[1];
                    sectionCode[0] = this.tEdit_SectionCodeAllowZero.Text.Trim();
                    this._suppPrtPprBlnce.SectionCode = sectionCode;
                }

                // 仕入先コード
                this._suppPrtPprBlnce.SupplierCd = this.tNedit_SupplierCd.GetInt();

                // 支払先コード
                // --- ADD 2012/09/13 ---------->>>>>
                if (_opt_SupplierSummary != (int)Option.ON)
                {
                    this._suppPrtPprBlnce.PayeeCode = this.tNedit_PayeeCode.GetInt();
                }
                // --- ADD 2012/09/13 ----------<<<<<

                // 開始対象年月
                this._suppPrtPprBlnce.St_AddUpYearMonth = this.tDateEdit_rl_TargetYMSt.GetDateTime();

                // 終了対象年月
                this._suppPrtPprBlnce.Ed_AddUpYearMonth = this.tDateEdit_rl_TargetYMEd.GetDateTime();

                // 検索条件比較(前回検索時から変更があるかどうか)
                if ( CompareSuppPrtPprBlnce( this._suppPrtPprBlnce, this._custPrtPprBlnceBackUp,
                                            this.tComboEditor_rl_RemainType.SelectedItem.DataValue.ToString(), this._rl_RemainTypeBackup ) )
                {
                    #region フォーカス制御
                    uGrid_BalanceList.Focus();
                    if ( uGrid_BalanceList.Rows.Count > 0 && uGrid_BalanceList.Rows[0].Cells.Count > 0 )
                    {
                        //uGrid_BalanceList.Rows[0].Cells[0].Activate();
                        //uGrid_BalanceList.Rows[0].Cells[0].Selected = true;
                        uGrid_BalanceList.Rows[0].Activate();
                        //uGrid_BalanceList.Rows[0].Selected = true;
                    }
                    #endregion

                    return null;
                }

                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

                // クリア
                this._detailDataSet.BalanceTotal.Clear();

                SFCMN00299CA processingDialog = new SFCMN00299CA();
                try
                {
                    processingDialog.Title = "抽出処理";
                    processingDialog.Message = "現在、データ抽出中です。";
                    processingDialog.DispCancelButton = false;
                    processingDialog.Show( (Form)this.Parent );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                    ////-----------------------
                    //// パラメータをセット
                    ////-----------------------

                    //// 企業コード
                    //this._suppPrtPprBlnce.EnterpriseCode = this._enterpriseCode;

                    //// 拠点コード
                    //if ( String.IsNullOrEmpty( this.tEdit_SectionCodeAllowZero.Text.Trim() ) || this.tEdit_SectionCodeAllowZero.Text.Trim() == "00" )
                    //{
                    //    this._suppPrtPprBlnce.SectionCode = null;
                    //}
                    //else
                    //{
                    //    string[] sectionCode = new string[1];
                    //    sectionCode[0] = this.tEdit_SectionCodeAllowZero.Text.Trim();
                    //    this._suppPrtPprBlnce.SectionCode = sectionCode;
                    //}

                    //// 仕入先コード
                    //this._suppPrtPprBlnce.SupplierCd = this.tNedit_SupplierCd.GetInt();

                    //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                    ////// 支払先コード
                    ////if ( this.tNedit_PayeeCode.GetInt() == 0 && this.tNedit_SupplierCd.GetInt() > 0 )
                    ////{
                    ////    // 仕入先>0,支払先=0のとき、支払先コードは仕入先マスタから取得
                    ////    int supplierCd = this.tNedit_SupplierCd.GetInt();
                    ////    Supplier supplierInfo;
                    ////    status = this._supplierAcs.Read( out supplierInfo, this._enterpriseCode, supplierCd );

                    ////    if ( status == (int)ConstantManagement.DB_Status.ctDB_NORMAL )
                    ////    {
                    ////        this._suppPrtPprBlnce.PayeeCode = supplierInfo.PayeeCode;
                    ////    }
                    ////    else
                    ////    {
                    ////        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                    ////        //return status;
                    ////        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                    ////        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                    ////        return tNedit_SupplierCd;
                    ////        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                    ////    }
                    ////}
                    ////else
                    ////{
                    ////    this._suppPrtPprBlnce.PayeeCode = this.tNedit_PayeeCode.GetInt();
                    ////}
                    //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                    //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                    //// 支払先コード
                    //this._suppPrtPprBlnce.PayeeCode = this.tNedit_PayeeCode.GetInt();
                    //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

                    //// 開始対象年月
                    //this._suppPrtPprBlnce.St_AddUpYearMonth = this.tDateEdit_rl_TargetYMSt.GetDateTime();

                    //// 終了対象年月
                    //this._suppPrtPprBlnce.Ed_AddUpYearMonth = this.tDateEdit_rl_TargetYMEd.GetDateTime();

                    //// 詳細条件取得
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                    // 検索実行
                    status = this._suppPtrSearchAcs.SearchBalance( ref this._suppPrtPprBlnce, Int32.Parse( this.tComboEditor_rl_RemainType.SelectedItem.DataValue.ToString() ) );
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                }
                finally
                {
                    processingDialog.Dispose();
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                   
                    
                // 返り値が正常な場合はデータセットの中にデータがある
                if ((status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND) ||
                        (status == (int)ConstantManagement.DB_Status.ctDB_EOF))
                {
                    // 条件に合うデータなし
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                        MSG_MATCHED_DATA_NOT_FOUND, -1, MessageBoxButtons.OK);
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                    //前回検索条件格納
                    this._custPrtPprBlnceBackUp = null;
                    this._rl_RemainTypeBackup = string.Empty;
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                    //return status;
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                    return null;
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                }
                else if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // それ以外のステータス
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                        MSG_FAILED2GET_BALANCE_DATA, status, MessageBoxButtons.OK);
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                    //前回検索条件格納
                    this._custPrtPprBlnceBackUp = null;
                    this._rl_RemainTypeBackup = string.Empty;
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                    //return status;
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                    return null;
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                }

                #endregion // 残高一覧取得

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                //前回検索条件格納
                this._custPrtPprBlnceBackUp = this._suppPrtPprBlnce.Clone();
                this._rl_RemainTypeBackup = this.tComboEditor_rl_RemainType.SelectedItem.DataValue.ToString();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
            }
            else
            {
                #region 売上一覧取得

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                // 必須入力チェック
                if ( !CheckItemValues( out errorControl ) ) return errorControl;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                // 画面上の項目からパラメータを作成
                if ( !SetDisplay2SearchConditionClass() )
                {
                    return null;
                }

                this._logicalDelDiv = (int)tComboEditor_DeleteFlag.SelectedItem.DataValue;
                this._stockRetGdsPlnFlag = (int)this.tComboEditor_StockRetGdsPlnFlag.SelectedItem.DataValue; // ADD 2013/01/21 [仕入返品計上]

                // 検索条件比較(前回検索時から変更があるかどうか)
                if ( CompareSuppPrtPpr( this._suppPrtPpr, this._custPrtPprBackUp ) )
                {
                    #region フォーカス制御
                    switch ( this._selectedMainTabKey )
                    {
                        case "uTab_SlipList":
                            {
                                // 伝票表示グリッドタブ
                                uGrid_Slip.Focus();
                                if ( uGrid_Slip.Rows.Count > 0 && uGrid_Slip.Rows[0].Cells.Count > 0 )
                                {
                                    // 表示されている中で一番左のcolumnを取得
                                    int firstColumn = this.GetFirstVisibleColumn( uGrid_Slip );
                                    // セルにフォーカスを当てる
                                    uGrid_Slip.Rows[0].Cells[firstColumn].Activate();
                                    uGrid_Slip.Rows[0].Cells[firstColumn].Selected = true;
                                }
                                if ( uGrid_Detail.Rows.Count > 0 && uGrid_Detail.Rows[0].Cells.Count > 0 )
                                {
                                    // 表示されている中で一番左のcolumnを取得
                                    int firstColumn = this.GetFirstVisibleColumn( uGrid_Detail );
                                    // セルにフォーカスを当てる
                                    uGrid_Detail.Rows[0].Cells[firstColumn].Activate();
                                    uGrid_Detail.Rows[0].Cells[firstColumn].Selected = true;
                                }
                            }
                            break;
                        case "uTab_SlipDetail":
                            {
                                // 明細表示グリッドタブ
                                uGrid_Detail.Focus();
                                if ( uGrid_Slip.Rows.Count > 0 && uGrid_Slip.Rows[0].Cells.Count > 0 )
                                {
                                    // 表示されている中で一番左のcolumnを取得
                                    int firstColumn = this.GetFirstVisibleColumn( uGrid_Slip );
                                    // セルにフォーカスを当てる
                                    uGrid_Slip.Rows[0].Cells[firstColumn].Activate();
                                    uGrid_Slip.Rows[0].Cells[firstColumn].Selected = true;
                                }
                                if ( uGrid_Detail.Rows.Count > 0 && uGrid_Detail.Rows[0].Cells.Count > 0 )
                                {
                                    // 表示されている中で一番左のcolumnを取得
                                    int firstColumn = this.GetFirstVisibleColumn( uGrid_Detail );
                                    // セルにフォーカスを当てる
                                    uGrid_Detail.Rows[0].Cells[firstColumn].Activate();
                                    uGrid_Detail.Rows[0].Cells[firstColumn].Selected = true;
                                }
                            }
                            break;
                            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                            case "uTab_RedSlip":
                                {
                                    // 仕入返品タブ
                                    tComboEditor_rs_SalesSlipCd.Focus();
                                }
                                break;
                            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                    }
                    #endregion

                    return null;
                }
                this._logicalDelDivBackUp = this._logicalDelDiv;
                this._stockRetGdsPlnFlagBackup = this._stockRetGdsPlnFlag; // ADD 2013/01/21 [仕入返品計上]
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

                // データセットをクリア
                this._detailDataSet.StcList.Clear();
                this._detailDataSet.StcDetail.Clear();
                this._detailDataSet.BalanceTotal.Clear();
                // ----------ADD 2013/01/21 [返品予定計上]----------->>>>>
                this._detailDataSet.RedSlipDetail.Clear();
                this._detailDataSet.RetGdsStcList.Clear();
                this._detailDataSet.RetGdsStcDetail.Clear();
                // 返品計上タブ内の入力項目クリア
                ClearRedSlipInputField();
                // 返品伝票金額関連クリア
                _redSlipTotalPrice = 0;
                redMoney = new Dictionary<int, long>();
                this.tNedit_rs_ReturnAmountTotal.Clear();
                // ----------ADD 2013/01/21 [返品予定計上]-----------<<<<<

                // 行選択ボタンOFF
                this.tToolbarsManager.Tools["ButtonTool_RowSelect"].SharedProps.Enabled = false;

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                //// 必須項目チェック
                ////if (!checkItemValues(false)) return -1;     // 警告メッセージはステータス上に出す
                //if (!checkItemValues(true)) return -1;    // 警告メッセージ出す
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                // DEL 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ---------->>>>>
                //SFCMN00299CA processingDialog = new SFCMN00299CA();
                // DEL 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ----------<<<<<
                // ADD 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ---------->>>>>
                _processingDialog = new SFCMN00299CA();
                SFCMN00299CA processingDialog = _processingDialog;
                // ADD 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ----------<<<<<
                try
                {
                    processingDialog.Title = "抽出処理";
                    // DEL 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ---------->>>>>
                    //processingDialog.Message = "現在、データ抽出中です。";
                    //processingDialog.DispCancelButton = false;
                    // DEL 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ----------<<<<<
                    // ADD 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ---------->>>>>
                    processingDialog.Message = "現在、データ抽出中です。(ESCで中断します)";
                    processingDialog.DispCancelButton = true;
                    processingDialog.CancelButtonClick += new EventHandler(processingDialog_CancelButtonClick);
                    // ADD 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ----------<<<<<
                    processingDialog.Show( (Form)this.Parent );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

                    // 画面上の項目からパラメータを作成
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                    //if ( !SetDisplay2SearchConditionClass() ) return -1;
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                    if ( !SetDisplay2SearchConditionClass() ) return null;
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                    // DEL 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ---------->>>>>
                    //// パラメータクラスを使って検索開始
                    //status = this._suppPtrSearchAcs.Search(this._suppPrtPpr, this._logicalDelDiv);
                    // DEL 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ----------<<<<<
                    // ADD 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ---------->>>>>
                    if (_suppPtrSearchAcs.ExtractCancelFlag == false)
                    {
                        // TODO:パラメータクラスを使って検索開始
                        //status = this._suppPtrSearchAcs.Search(this._suppPrtPpr, this._logicalDelDiv);// DEL 2013/01/21 [仕入返品計上]
                        status = this._suppPtrSearchAcs.Search(this._suppPrtPpr, this._logicalDelDiv, this._stockRetGdsPlnFlag); // ADD 2013/01/21 [仕入返品計上]
                    }
                    // ADD 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ----------<<<<<

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                    this.Activate(); // ADD BY zhujw 2014/06/11 RedMine#42650 Windows8.1動作検証結果_得意先電子元帳から起動した他機能が前面表示される 修正
                }
                finally
                {
                    processingDialog.Dispose();
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

                // 2012/06/26 Y.Ito ADD START 該当件数を確認してメッセージを表示
                if (this._suppPtrSearchAcs.SearchCount >= this._suppPrtPpr.SearchCnt)
                {
                    // メッセージ表示
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                        "データ件数が" + String.Format("{0:#,0}", CT_LIMIT_ROW) + "件を超えました。", -1, MessageBoxButtons.OK);
                }
                // 2012/06/26 Y.Ito ADD END 該当件数を確認してメッセージを表示

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
                //// 返り値が正常な場合はデータセットの中にデータがある
                //if ((status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND) ||
                //        (status == (int)ConstantManagement.DB_Status.ctDB_EOF))
                //{
                //    // 条件に合うデータなし
                //    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                //        MSG_MATCHED_DATA_NOT_FOUND, -1, MessageBoxButtons.OK);
                //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                //    //前回検索条件格納
                //    this._custPrtPprBackUp = null;
                //    this._logicalDelDivBackUp = -1;
                //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                //    //return status;
                //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                //    return null;
                //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                //}
                //else if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                //{
                //    // それ以外のステータス
                //    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                //        MSG_FAILED2GET_SLIP_DATA, status, MessageBoxButtons.OK);
                //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                //    //return status;
                //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                //    return null;
                //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                //}
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL

                // ソート順を作成
                DataView dView = (DataView)this.uGrid_Detail.DataSource;
                dView.Sort = "DataDiv Asc, StockDate Asc, PartySaleSlipNum Asc, SupplierSlipNo Asc, StockRowNo Asc";
                dView = (DataView)this.uGrid_Slip.DataSource;
                dView.Sort = "DataDiv Asc, StockDate Asc, PartySaleSlipNum Asc, SupplierSlipNo Asc";

                // 全てのグリッドの背景色を調整
                // DEL 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ---------->>>>>
                //RowColorChangeAll(false, 0);
                //RowColorChangeAll(false, 1);
                // DEL 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ----------<<<<<
                SetGridCheckBoxEnabled();    // ADD 2013/01/21 [仕入返品計上]

                RowColorChangeAll_SlipType(false, this.uGrid_Slip.Rows, 0);
                RowColorChangeAll_SlipType(false, this.uGrid_Detail.Rows, 1);

                // 行選択ボタンON
                this.tToolbarsManager.Tools["ButtonTool_RowSelect"].SharedProps.Enabled = true;

                // 残高表示のデータテーブルからUIへ
                // ただし、残高表示データが複数返ってきた場合は出さない（仕入先未設定の場合など）

                // 1件特定できた場合のみ表示
                if (this._detailDataSet.BalanceTotal.Rows.Count == 1)
                {
                    // 転嫁方式区分
                    string consTaxLayMethod = string.Empty;

                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/18 ADD
                    if ( (bool)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.ExistsTotalColumn] == true )
                    {
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/18 ADD
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 DEL
                        //// 前々々回残高
                        //this.uLabel_StockTtl2TmBfBlPay.Text = ((long)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.StockTtl2TmBfBlPayColumn.ColumnName]).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                        //// 前々回残高
                        //this.uLabel_LastTimePayment.Text = ((long)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.LastTimePaymentColumn.ColumnName]).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                        //// 前回残高
                        //this.uLabel_StockTotalPayBalance.Text = ((long)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.StockTotalPayBalanceColumn.ColumnName]).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0

                        //// 今回売上
                        //this.uLabel_ThisStockPriceTotal.Text = (Double.Parse( this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.ThisStockPriceTotalColumn.ColumnName].ToString() )).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                        //// 消費税(売)
                        //this.uLabel_OfsThisStockTax.Text = (Double.Parse( this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.OfsThisStockTaxColumn.ColumnName].ToString() )).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                        //// 今回入金
                        //this.uLabel_ThisTimePayNrml.Text = (Double.Parse( this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.ThisTimePayNrmlColumn.ColumnName].ToString() )).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                        //// 請求残高
                        //this.uLabel_PaymentRemain.Text = (Double.Parse( this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.PaymentRemainColumn.ColumnName].ToString() )).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD

                        // 転嫁方式区分
                        consTaxLayMethod = this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.SuppCTaxationCdColumn.ColumnName].ToString();

                        if ((bool)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.IsParentColumn.ColumnName])
                        {
                            //-----------------------------------
                            // 親の場合
                            //-----------------------------------

                            // 前々々回残高
                            this.uLabel_StockTtl2TmBfBlPay.Text = ((long)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.StockTtl2TmBfBlPayColumn.ColumnName]).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                            // 前々回残高
                            this.uLabel_LastTimePayment.Text = ((long)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.LastTimePaymentColumn.ColumnName]).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                            // 前回残高
                            this.uLabel_StockTotalPayBalance.Text = ((long)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.StockTotalPayBalanceColumn.ColumnName]).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0

                            // 今回売上
                            this.uLabel_ThisStockPriceTotal.Text = (Double.Parse( this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.ThisStockPriceTotalColumn.ColumnName].ToString() )).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0

                            //if ( consTaxLayMethod == "0" && consTaxLayMethod == "1" )
                            if ( consTaxLayMethod != "9" )
                            {
                                // 消費税(売)
                                this.uLabel_OfsThisStockTax.Text = (Double.Parse( this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.OfsThisStockTaxColumn.ColumnName].ToString() )).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                            }
                            else
                            {
                                // 消費税(売)
                                this.uLabel_OfsThisStockTax.Text = string.Empty;
                            }

                            // 今回入金
                            this.uLabel_ThisTimePayNrml.Text = (Double.Parse( this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.ThisTimePayNrmlColumn.ColumnName].ToString() )).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                            // 請求残高
                            this.uLabel_PaymentRemain.Text = (Double.Parse( this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.PaymentRemainColumn.ColumnName].ToString() )).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                        }
                        else
                        {
                            //-----------------------------------
                            // 子の場合
                            //-----------------------------------

                            // 前々々回残高
                            this.uLabel_StockTtl2TmBfBlPay.Text = string.Empty;
                            // 前々回残高
                            this.uLabel_LastTimePayment.Text = string.Empty;
                            // 前回残高
                            this.uLabel_StockTotalPayBalance.Text = string.Empty;

                            // 今回売上
                            this.uLabel_ThisStockPriceTotal.Text = (Double.Parse( this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.ThisStockPriceTotalColumn.ColumnName].ToString() )).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                            // 消費税(売)
                            this.uLabel_OfsThisStockTax.Text = string.Empty;
                            // 今回入金
                            this.uLabel_ThisTimePayNrml.Text = string.Empty;
                            // 請求残高
                            this.uLabel_PaymentRemain.Text = string.Empty;
                        }
                       
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD

                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 DEL
                        //// 請求範囲
                        //if ( this._prevTotalDay == DateTime.MinValue )
                        //{
                        //    // 一度も締めが行われていない場合は計上年月日が取得できないの開始年月日をセット
                        //    this.uLabel_AddUpYearMonth.Text = this.tDateEdit_StockDateSt.GetDateTime().ToString( "yyyy年MM月dd日" ) + "～" + this.tDateEdit_StockDateEd.GetDateTime().ToString( "yyyy年MM月dd日" );
                        //}
                        //else
                        //{
                        //    this.uLabel_AddUpYearMonth.Text = this._prevTotalDay.ToString( "yyyy年MM月dd日" ) + "～" + this.tDateEdit_StockDateEd.GetDateTime().ToString( "yyyy年MM月dd日" );
                        //}
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/18 ADD
                        string addUpYearMonthText = string.Empty;
                        DateTime stDate = (DateTime)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.DmdStDayColumn.ColumnName];
                        DateTime edDate = (DateTime)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.TotalDayColumn.ColumnName];

                        if ( stDate != DateTime.MinValue )
                        {
                            addUpYearMonthText += stDate.ToString( "yyyy年MM月dd日" );
                        }
                        else
                        {
                            addUpYearMonthText += new string( ' ', 14 );
                        }
                        addUpYearMonthText += "～";
                        if ( edDate != DateTime.MinValue )
                        {
                            addUpYearMonthText += edDate.ToString( "yyyy年MM月dd日" );
                        }
                        this.uLabel_AddUpYearMonth.Text = addUpYearMonthText;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/18 ADD

                        // 税転嫁方式
                        //consTaxLayMethod = this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.SuppCTaxationCdColumn.ColumnName].ToString();
                        switch ( consTaxLayMethod )
                        {
                            case "0": this.uLabel_SuppCTaxationCd.Text = "伝票単位"; break;
                            case "1": this.uLabel_SuppCTaxationCd.Text = "明細単位"; break;
                            case "2": this.uLabel_SuppCTaxationCd.Text = "請求親"; break;
                            case "3": this.uLabel_SuppCTaxationCd.Text = "請求子"; break;
                            case "9": this.uLabel_SuppCTaxationCd.Text = "非課税"; break;
                            default: this.uLabel_SuppCTaxationCd.Text = ""; break;
                        }
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/18 ADD
                    }
                    else
                    {
                        // 空白表示

                        // 前々々回残高
                        this.uLabel_StockTtl2TmBfBlPay.Text = string.Empty;
                        // 前々回残高
                        this.uLabel_LastTimePayment.Text = string.Empty;
                        // 前回残高
                        this.uLabel_StockTotalPayBalance.Text = string.Empty;

                        // 今回売上
                        this.uLabel_ThisStockPriceTotal.Text = string.Empty;
                        // 消費税(売)
                        this.uLabel_OfsThisStockTax.Text = string.Empty;
                        // 今回入金
                        this.uLabel_ThisTimePayNrml.Text = string.Empty;
                        // 請求残高
                        this.uLabel_PaymentRemain.Text = string.Empty;

                        // 請求範囲
                        this.uLabel_AddUpYearMonth.Text = string.Empty;
                        // 税転嫁方式
                        this.uLabel_SuppCTaxationCd.Text = string.Empty;
                    }
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/18 ADD

                    //--------------------
                    // 合計タブ
                    //--------------------
                    // 標準価格
                    this.uLabel_StandardPrice_Total.Text = ((double)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.StandardPrice_TotalColumn.ColumnName]).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                    this.uLabel_StandardPrice_Avg.Text = ((double)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.StandardPrice_AvgColumn.ColumnName]).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                    // 売上金額
                    this.uLabel_StockAmount_Total.Text = ((double)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.StockAmount_TotalColumn.ColumnName]).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                    this.uLabel_StockAmount_Avg.Text = ((double)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.StockAmount_AvgColumn.ColumnName]).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                    // 伝票枚数
                    this.uLabel_SlipCount.Text = ((int)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.SlipCountColumn.ColumnName]).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                    // 明細数
                    this.uLabel_DetailCount.Text = ((double)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.DetailCountColumn.ColumnName]).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0
                    // 数量
                    this.uLabel_Amount.Text = ((double)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.AmountColumn.ColumnName]).ToString( "#,##0.00;-#,##0.00;" ); // m.suzuki 2009/03/04 #,###→#,##0.00
                    // 消費税
                    this.uLabel_ConsumeTaxAmount.Text = ((double)this._detailDataSet.BalanceTotal.Rows[0][_detailDataSet.BalanceTotal.ConsumeTaxAmountColumn.ColumnName]).ToString( "#,##0;-#,##0;" ); // m.suzuki 2009/02/18 #,###→#,##0

                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                    //this.uExGroupBox_BalanceChart.Expanded = true;
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                }
                else
                {
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/18 ADD
                    // 該当データなし時は空白

                    // 前々々回残高
                    this.uLabel_StockTtl2TmBfBlPay.Text = string.Empty;
                    // 前々回残高
                    this.uLabel_LastTimePayment.Text = string.Empty;
                    // 前回残高
                    this.uLabel_StockTotalPayBalance.Text = string.Empty;

                    // 今回売上
                    this.uLabel_ThisStockPriceTotal.Text = string.Empty;
                    // 消費税(売)
                    this.uLabel_OfsThisStockTax.Text = string.Empty;
                    // 今回入金
                    this.uLabel_ThisTimePayNrml.Text = string.Empty;
                    // 請求残高
                    this.uLabel_PaymentRemain.Text = string.Empty;

                    // 請求範囲
                    this.uLabel_AddUpYearMonth.Text = string.Empty;
                    // 税転嫁方式
                    this.uLabel_SuppCTaxationCd.Text = string.Empty;

                    // 標準価格
                    this.uLabel_StandardPrice_Total.Text = string.Empty;
                    this.uLabel_StandardPrice_Avg.Text = string.Empty;
                    // 売上金額
                    this.uLabel_StockAmount_Total.Text = string.Empty;
                    this.uLabel_StockAmount_Avg.Text = string.Empty;
                    // 伝票枚数
                    this.uLabel_SlipCount.Text = string.Empty;
                    // 明細数
                    this.uLabel_DetailCount.Text = string.Empty;
                    // 数量
                    this.uLabel_Amount.Text = string.Empty;
                    // 消費税
                    this.uLabel_ConsumeTaxAmount.Text = string.Empty;

                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/18 ADD
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                    //this.uExGroupBox_BalanceChart.Expanded = false;
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                }

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                // 返り値が正常な場合はデータセットの中にデータがある
                if ( (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND) ||
                        (status == (int)ConstantManagement.DB_Status.ctDB_EOF) )
                {
                    // 条件に合うデータなし
                    TMsgDisp.Show( this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                        MSG_MATCHED_DATA_NOT_FOUND, -1, MessageBoxButtons.OK );
                    //前回検索条件格納
                    this._custPrtPprBackUp = null;
                    this._logicalDelDivBackUp = -1;
                    this._stockRetGdsPlnFlagBackup = -1; // ADD 2013/01/21 [仕入返品計上]
                }
                else if ( status != (int)ConstantManagement.DB_Status.ctDB_NORMAL )
                {
                    // それ以外のステータス
                    TMsgDisp.Show( this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                        MSG_FAILED2GET_SLIP_DATA, status, MessageBoxButtons.OK );
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/12/15 ADD
                if ( status == (int)ConstantManagement.DB_Status.ctDB_NORMAL )
                {
                    switch ( this._selectedMainTabKey )
                    {
                        case "uTab_SlipList":
                            {
                                // 伝票表示グリッドタブ
                                uGrid_Slip.Focus();
                                if ( uGrid_Slip.Rows.Count > 0 && uGrid_Slip.Rows[0].Cells.Count > 0 )
                                {
                                    // 表示されている中で一番左のcolumnを取得
                                    int firstColumn = this.GetFirstVisibleColumn( uGrid_Slip );
                                    // セルにフォーカスを当てる
                                    uGrid_Slip.Rows[0].Cells[firstColumn].Activate();
                                    uGrid_Slip.Rows[0].Cells[firstColumn].Selected = true;
                                }
                                if ( uGrid_Detail.Rows.Count > 0 && uGrid_Detail.Rows[0].Cells.Count > 0 )
                                {
                                    // 表示されている中で一番左のcolumnを取得
                                    int firstColumn = this.GetFirstVisibleColumn( uGrid_Detail );
                                    // セルにフォーカスを当てる
                                    uGrid_Detail.Rows[0].Cells[firstColumn].Activate();
                                    uGrid_Detail.Rows[0].Cells[firstColumn].Selected = true;
                                }
                            }
                            break;
                        case "uTab_SlipDetail":
                            {
                                // 明細表示グリッドタブ
                                uGrid_Detail.Focus();
                                if ( uGrid_Slip.Rows.Count > 0 && uGrid_Slip.Rows[0].Cells.Count > 0 )
                                {
                                    // 表示されている中で一番左のcolumnを取得
                                    int firstColumn = this.GetFirstVisibleColumn( uGrid_Slip );
                                    // セルにフォーカスを当てる
                                    uGrid_Slip.Rows[0].Cells[firstColumn].Activate();
                                    uGrid_Slip.Rows[0].Cells[firstColumn].Selected = true;
                                }
                                if ( uGrid_Detail.Rows.Count > 0 && uGrid_Detail.Rows[0].Cells.Count > 0 )
                                {
                                    // 表示されている中で一番左のcolumnを取得
                                    int firstColumn = this.GetFirstVisibleColumn( uGrid_Detail );
                                    // セルにフォーカスを当てる
                                    uGrid_Detail.Rows[0].Cells[firstColumn].Activate();
                                    uGrid_Detail.Rows[0].Cells[firstColumn].Selected = true;
                                }
                            }
                            break;
                        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                        case "uTab_RedSlip":
                            {
                                // 仕入返品タブ
                                tComboEditor_rs_SalesSlipCd.Focus();
                            }
                            break;
                        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                    }

                    // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                    this._searchedStockRetGdsPln = (int)this.tComboEditor_StockRetGdsPlnFlag.SelectedItem.DataValue;                    
                    if (String.IsNullOrEmpty(this.tEdit_SectionCodeAllowZero.Text.Trim()) || this.tEdit_SectionCodeAllowZero.Text.Trim() == "00")
                    {
                        this._redSlipBottonFlag = false;
                    }
                    else
                    {
                        if (this._searchedStockRetGdsPln == 0)
                        {
                            this._redSlipBottonFlag = false;
                        }
                        else
                        {
                            this._redSlipBottonFlag = true;
                        }                        
                    }                    
                    // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/12/15 ADD

                #endregion // 売上一覧取得

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                //前回検索条件格納
                this._custPrtPprBackUp = this._suppPrtPpr.Clone();
                this._logicalDelDivBackUp = this._logicalDelDiv;
                this._stockRetGdsPlnFlagBackup = this._stockRetGdsPlnFlag; // ADD 2013/01/21 [仕入返品計上]
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                this._selectedRowCountSlip = 0;
                this._selectedRowCountDetail = 0;
                this._selectedSupplierCd = 0;
                this._selectedSectionCd = string.Empty;
                this._selectedSupplierSlipCd = 0;
                // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
            }

            // DEL 譚洪 2013/09/04 #40258 --------------------------------------->>>>>
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            // グリッドフィルタ解除 (検索結果が更新された時、紛らわしい為)
            //uGrid_Slip.DisplayLayout.Bands[0].ColumnFilters.ClearAllFilters();
            //uGrid_Detail.DisplayLayout.Bands[0].ColumnFilters.ClearAllFilters();
            //uGrid_BalanceList.DisplayLayout.Bands[0].ColumnFilters.ClearAllFilters();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
            // DEL 譚洪 2013/09/04 #40258 ---------------------------------------<<<<<

            // ボタン調整
            if (this._selectedMainTabKey == "uTab_SlipList") adjustButtonEnable(0);
            else if (this._selectedMainTabKey == "uTab_SlipDetail") adjustButtonEnable(1);
            else if (this._selectedMainTabKey == "uTab_RemainList") adjustButtonEnable(2);
            else if (this._selectedMainTabKey == "uTab_RedSlip") adjustButtonEnable(3);// ADD 2013/01/21 [仕入返品計上]

            // ADD 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ---------->>>>>
            if (_suppPtrSearchAcs.ExtractCancelFlag == true)
            {
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                    "処理を中断しました。",
                    status, MessageBoxButtons.OK);
            }
            _suppPtrSearchAcs.ExtractCancelFlag = false;
            // ADD 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ----------<<<<<
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //return status;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            return errorControl;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
        }

        /// <summary>
        /// UNDONE:中断ボタン押下
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void processingDialog_CancelButtonClick(object sender, EventArgs e)
        {
            // 抽出キャンセル
            CancelExtract();
        }
        /// <summary>
        /// UNDONE:抽出キャンセル
        /// </summary>
        private void CancelExtract()
        {
            // 抽出キャンセル
            _suppPtrSearchAcs.ExtractCancelFlag = true;
            if (_processingDialog != null)
            {
                _processingDialog.Message = "中断します。";
            }
        }

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>
        /// 入力値比較
        /// </summary>
        /// <param name="custPrtPpr1">前回入力値</param>
        /// <param name="custPrtPpr2">今回入力値</param>
        /// <returns>True：変更なし、False：変更あり</returns>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 処理区分追加</br>
        /// </remarks>
        private bool CompareSuppPrtPpr( SuppPrtPpr custPrtPpr, SuppPrtPpr custPrtPprBackUp )
        {
            if ( custPrtPprBackUp == null )
            {
                return false;
            }

            // 削除指定区分
            if ( this._logicalDelDiv.Equals( this._logicalDelDivBackUp ) == false )
            {
                return false;
            }

            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            // 処理区分
            if (this._stockRetGdsPlnFlag.Equals(_stockRetGdsPlnFlagBackup) == false)
            {
                return false;
            }
            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

            ArrayList arrayList = custPrtPpr.Compare( custPrtPprBackUp );

            // 配列以外の比較
            for ( int i = 0; i <= arrayList.Count - 1; i++ )
            {
                if ( (arrayList[i].ToString() != "SectionCode") && // 拠点コード
                    (arrayList[i].ToString() != "SupplierFormal") && // 仕入形式
                    (arrayList[i].ToString() != "SupplierSlipCd") ) // 仕入伝票区分
                {
                    return false;
                }
            }

            // 配列の比較(拠点コード)
            if ( arrayList.Contains( "SectionCode" ) == true )
            {
                if ( (custPrtPpr.SectionCode == null) || (custPrtPprBackUp.SectionCode == null) )
                {
                    return false;
                }
                if ( custPrtPpr.SectionCode.Length != custPrtPprBackUp.SectionCode.Length )
                {
                    return false;
                }
                for ( int i = 0; i <= custPrtPpr.SectionCode.Length - 1; i++ )
                {
                    if ( custPrtPpr.SectionCode[i].Equals( custPrtPprBackUp.SectionCode[i] ) == false )
                    {
                        return false;
                    }
                }
            }
            // 配列の比較(仕入形式)
            if ( arrayList.Contains( "AcptAnOdrStatus" ) == true )
            {
                if ( (custPrtPpr.SupplierFormal == null) || (custPrtPprBackUp.SupplierFormal == null) )
                {
                    return false;
                }
                if ( custPrtPpr.SupplierFormal.Length != custPrtPprBackUp.SupplierFormal.Length )
                {
                    return false;
                }
                for ( int i = 0; i <= custPrtPpr.SupplierFormal.Length - 1; i++ )
                {
                    if ( custPrtPpr.SupplierFormal[i].Equals( custPrtPprBackUp.SupplierFormal[i] ) == false )
                    {
                        return false;
                    }
                }
            }
            // 配列の比較(仕入伝票区分)
            if ( arrayList.Contains( "SalesSlipCd" ) == true )
            {
                if ( (custPrtPpr.SupplierSlipCd == null) || (custPrtPprBackUp.SupplierSlipCd == null) )
                {
                    return false;
                }
                if ( custPrtPpr.SupplierSlipCd.Length != custPrtPprBackUp.SupplierSlipCd.Length )
                {
                    return false;
                }
                for ( int i = 0; i <= custPrtPpr.SupplierSlipCd.Length - 1; i++ )
                {
                    if ( custPrtPpr.SupplierSlipCd[i].Equals( custPrtPprBackUp.SupplierSlipCd[i] ) == false )
                    {
                        return false;
                    }
                }
            }

            return true;
        }

        /// <summary>
        /// 入力値比較
        /// </summary>
        /// <param name="custPrtPprBlnce"></param>
        /// <param name="custPrtPprBlnceBackUp"></param>
        /// <param name="rl_RemainType"></param>
        /// <param name="rl_RemainTypeBackup"></param>
        /// <returns></returns>
        private bool CompareSuppPrtPprBlnce( SuppPrtPprBlnce custPrtPprBlnce, SuppPrtPprBlnce custPrtPprBlnceBackUp, string rl_RemainType, string rl_RemainTypeBackup )
        {
            if ( custPrtPprBlnceBackUp == null )
            {
                return false;
            }

            // 残高種別の比較
            if ( rl_RemainType.Equals( rl_RemainTypeBackup ) == false )
            {
                return false;
            }

            ArrayList arrayList = custPrtPprBlnce.Compare( custPrtPprBlnceBackUp );

            // 配列以外の比較
            for ( int i = 0; i <= arrayList.Count - 1; i++ )
            {
                if ( arrayList[i].ToString() != "SectionCode" )               //拠点コード
                {
                    return false;
                }
            }

            // 配列の比較(拠点コード)
            if ( arrayList.Contains( "SectionCode" ) == true )
            {
                if ( (custPrtPprBlnce.SectionCode == null) || (custPrtPprBlnceBackUp.SectionCode == null) )
                {
                    return false;
                }
                if ( custPrtPprBlnce.SectionCode.Length != custPrtPprBlnceBackUp.SectionCode.Length )
                {
                    return false;
                }
                for ( int i = 0; i <= custPrtPprBlnce.SectionCode.Length - 1; i++ )
                {
                    if ( custPrtPprBlnce.SectionCode[i].Equals( custPrtPprBlnceBackUp.SectionCode[i] ) == false )
                    {
                        return false;
                    }
                }
            }

            return true;
        }        
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        /// <summary>
        /// 対象グリッドに「表示されている」一番左のカラムを取得
        /// </summary>
        /// <param name="uGrid_Slip"></param>
        /// <returns></returns>
        private int GetFirstVisibleColumn( Infragistics.Win.UltraWinGrid.UltraGrid targetGrid )
        {
            int firstColumn = -1;
            int firstColumnPos = -1;
            foreach ( Infragistics.Win.UltraWinGrid.UltraGridColumn ultraGridColumn in targetGrid.DisplayLayout.Bands[0].Columns )
            {
                if ( !ultraGridColumn.Hidden )
                {
                    if ( firstColumn < 0 )
                    {
                        firstColumn = ultraGridColumn.Index;
                        firstColumnPos = ultraGridColumn.Header.VisiblePosition;
                    }
                    else if ( ultraGridColumn.Header.VisiblePosition < firstColumnPos )
                    {
                        firstColumn = ultraGridColumn.Index;
                        firstColumnPos = ultraGridColumn.Header.VisiblePosition;
                    }
                }
            }
            if ( firstColumn < 0 )
            {
                firstColumn = 0;
            }

            return firstColumn;
        }

        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
        /// <summary>
        /// グリッドのチェックボックス制御処理（検索後）
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 選択チェックボックス処理追加</br>
        /// </remarks>
        private void SetGridCheckBoxEnabled()
        {
            // 伝票表示グリッド
            foreach (Infragistics.Win.UltraWinGrid.UltraGridRow row in this.uGrid_Slip.Rows)
            {
                // DBNullならチェックボックス表示しない
                if (row.Cells[_detailDataSet.StcList.SelectionColumn.ColumnName].Value == DBNull.Value)
                {
                    row.Cells[_detailDataSet.StcList.SelectionColumn.ColumnName].Style = Infragistics.Win.UltraWinGrid.ColumnStyle.Edit;
                }
            }
            // 明細表示グリッド
            foreach (Infragistics.Win.UltraWinGrid.UltraGridRow row in this.uGrid_Detail.Rows)
            {
                // DBNullならチェックボックス表示しない
                if (row.Cells[_detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Value == DBNull.Value)
                {
                    row.Cells[_detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Style = Infragistics.Win.UltraWinGrid.ColumnStyle.Edit;
                }
            }
        }
        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

        #endregion // 検索

        #region コントロールイベント

        #region ガイドボタン

        #region 拠点

        /// <summary>
        /// 拠点
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_SectionGuide_Click(object sender, EventArgs e)
        {
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //// 拠点ガイド表示
            //SecInfoSet sectionInfo;
            //int status = this._secInfoSetAcs.ExecuteGuid(this._enterpriseCode, false, out sectionInfo);

            //// ステータスが正常時のみ情報をUIにセット
            //if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            //{
            //    this.tEdit_SectionCodeAllowZero.Text = sectionInfo.SectionCode.Trim();
            //    this.uLabel_SectionNm.Text = sectionInfo.SectionGuideNm.Trim();
            //}
            //else if (status == (int)ConstantManagement.DB_Status.ctDB_EOF ||
            //        status == (int)ConstantManagement.DB_Status.ctDB_ERROR)
            //{
            //    this.tEdit_SectionCodeAllowZero.Clear();
            //    this.uLabel_SectionNm.Text = "";
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            // 拠点ガイド表示
            SecInfoSet sectionInfo;
            int status = this._secInfoSetAcs.ExecuteGuid( this._enterpriseCode, true, out sectionInfo );

            // ステータスが正常時のみ情報をUIにセット
            if ( status == (int)ConstantManagement.DB_Status.ctDB_NORMAL )
            {
                this.tEdit_SectionCodeAllowZero.Text = sectionInfo.SectionCode.Trim();
                this.uLabel_SectionNm.Text = sectionInfo.SectionGuideNm.Trim();
                _prevInputValue.SectionCode = sectionInfo.SectionCode.Trim();
                // 次フォーカス
                this.tNedit_SupplierCd.Focus();
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
        }

        #endregion // 拠点

        #region 仕入先

        /// <summary>
        /// 仕入先ガイドボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_SupplierGuide_Click(object sender, EventArgs e)
        {
            // 仕入先ガイド表示
            int status = 0;
            Supplier supplierInfo;
            string sectionCd = string.Empty;
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki
            //if (String.IsNullOrEmpty(this.tEdit_SectionCodeAllowZero.Text.Trim()))
            //{
            //    // 入力されていなければログイン時の所属拠点を使用
            //    sectionCd = this._loginSectionCode;
            //}
            //else
            //{
            //    sectionCd = this.tEdit_SectionCodeAllowZero.Text.Trim();
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL

            // ガイド表示
            status = this._supplierAcs.ExecuteGuid(out supplierInfo, this._enterpriseCode, sectionCd);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                // 画面上にセット
                this.tNedit_SupplierCd.SetInt(supplierInfo.SupplierCd);
                this.uLabel_SupplierName.Text = supplierInfo.SupplierSnm;

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                // 次フォーカス
                // --- DEL 2012/09/13 ---------->>>>>
                //this.tNedit_PayeeCode.Focus();
                // --- DEL 2012/09/13 ----------<<<<<
                // --- ADD 2012/09/13 ---------->>>>>
                if (_opt_SupplierSummary == (int)Option.ON)
                {
                    this.tDateEdit_StockDateSt.Focus();
                }
                else
                {
                    this.tNedit_PayeeCode.Focus();
                }
                // --- ADD 2012/09/13 ----------<<<<<

                // 前回と同じコードならば以降の処理は迂回
                if ( this.tNedit_SupplierCd.GetInt() == _prevInputValue.SupplierCode ) return;
                // 前回値退避
                _prevInputValue.SupplierCode = tNedit_SupplierCd.GetInt();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

                // 締め日設定を取得
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                //status = this._tCalcAcs.GetTotalDayDmdC(this.tNedit_SupplierCd.GetInt(), out this._prevTotalDay, out this._currentTotalDay);
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                status = this._tCalcAcs.GetTotalDayPayment( this.tNedit_SupplierCd.GetInt(), out this._prevTotalDay, out this._currentTotalDay );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // 日付更新
                    if (this._prevTotalDay == DateTime.MinValue)
                    {
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                        //this.tDateEdit_StockDateSt.Clear();
                        //this.tDateEdit_StockDateEd.Clear();
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                        DateTime today = DateTime.Today;
                        this.tDateEdit_StockDateSt.SetDateTime( today );
                        this.tDateEdit_StockDateEd.SetDateTime( today );
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                    }
                    else
                    {
                        this.tDateEdit_StockDateSt.SetDateTime(this._prevTotalDay.AddDays(1));
                        this.tDateEdit_StockDateEd.SetDateTime(DateTime.Now);
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                        if ( this._prevTotalDay.AddDays( 1 ) > DateTime.Today )
                        {
                            this.tDateEdit_StockDateEd.SetDateTime( this._prevTotalDay.AddDays( 1 ) );
                        }
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD
                    }
                }
                else
                {
                    // 締め日データなし
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                        MSG_TOTAL_DAY_NOT_FOUND_SUPPLIER, -1, MessageBoxButtons.OK);

                    // 名称をクリア
                    this.uLabel_SupplierName.Text = string.Empty;

                    // 支払先も未入力であれば残高一覧タブが選択不能に
                    if (this.tNedit_PayeeCode.GetInt() == 0) this._remainTabSelectable = false;
                    return;
                }
                this._remainTabSelectable = true;
            }
            else
            {
                // 残高一覧タブを選択不能に
                if (this.tNedit_SupplierCd.GetInt() == 0 && this.tNedit_PayeeCode.GetInt() == 0) this._remainTabSelectable = false;
            }
        }

        #endregion

        #region 支払先

        /// <summary>
        /// 支払先ガイドボタンクリック
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_PayeeGuide_Click(object sender, EventArgs e)
        {
            // 支払先ガイド表示
            int status = 0;
            Supplier supplierInfo;
            string sectionCd = string.Empty;
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //if (String.IsNullOrEmpty(this.tEdit_SectionCodeAllowZero.Text.Trim()))
            //{
            //    // 入力されていなければログイン時の所属拠点を使用
            //    sectionCd = this._loginSectionCode;
            //}
            //else
            //{
            //    sectionCd = this.tEdit_SectionCodeAllowZero.Text.Trim();
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL

            // ガイド表示
            status = this._supplierAcs.ExecuteGuid(out supplierInfo, this._enterpriseCode, sectionCd);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                // 画面上にセット
                this.tNedit_PayeeCode.SetInt(supplierInfo.SupplierCd);
                this.uLabel_PayeeName.Text = supplierInfo.SupplierSnm;

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                // 次フォーカス
                this.tDateEdit_StockDateSt.Focus();

                // 前回と同じコードならば以降の処理は迂回
                if ( this.tNedit_PayeeCode.GetInt() == _prevInputValue.SupplierCode ) return;
                // 前回値保持
                _prevInputValue.PayeeCode = tNedit_PayeeCode.GetInt();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

                // 締め日設定を取得
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                //status = this._tCalcAcs.GetTotalDayDmdC(this.tNedit_PayeeCode.GetInt(), out this._prevTotalDay, out this._currentTotalDay);
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                status = this._tCalcAcs.GetTotalDayPayment( this.tNedit_PayeeCode.GetInt(), out this._prevTotalDay, out this._currentTotalDay );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // 日付更新
                    if (this._prevTotalDay == DateTime.MinValue)
                    {
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                        //this.tDateEdit_StockDateSt.Clear();
                        //this.tDateEdit_StockDateEd.Clear();
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                        DateTime today = DateTime.Today;
                        this.tDateEdit_StockDateSt.SetDateTime( today );
                        this.tDateEdit_StockDateEd.SetDateTime( today );
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                    }
                    else
                    {
                        this.tDateEdit_StockDateSt.SetDateTime(this._prevTotalDay.AddDays(1));
                        this.tDateEdit_StockDateEd.SetDateTime(DateTime.Now);
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                        if ( this._prevTotalDay.AddDays( 1 ) > DateTime.Today )
                        {
                            this.tDateEdit_StockDateEd.SetDateTime( this._prevTotalDay.AddDays( 1 ) );
                        }
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD
                    }
                }
                else
                {
                    // 締め日データなし
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                        MSG_TOTAL_DAY_NOT_FOUND_SUPPLIER, -1, MessageBoxButtons.OK);

                    // 名称をクリア
                    this.uLabel_SupplierName.Text = string.Empty;

                    // 支払先も未入力であれば残高一覧タブが選択不能に
                    if (this.tNedit_SupplierCd.GetInt() == 0) this._remainTabSelectable = false;
                    return;
                }
                this._remainTabSelectable = true;
            }
            else
            {
                // 残高一覧タブを選択不能に
                if (this.tNedit_SupplierCd.GetInt() == 0 && this.tNedit_PayeeCode.GetInt() == 0) this._remainTabSelectable = false;
            }
        }

        #endregion // 請求先

        #region 担当者

        /// <summary>
        /// 担当者ガイドボタンクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_StockAgentCode_Click(object sender, EventArgs e)
        {
            // ガイド表示
            Employee employeeInfo;
            int status;

            // 拠点が入力されていれば拠点コードあり、クリアされていれば全拠点表示
            // 2008.11.27 del start [8266]
            //string sectionCode = this.tEdit_SectionCodeAllowZero.Text.Trim();
            //if (sectionCode.Length > 0)
            //{
            //    // 拠点入力あり
            //    status = this._employeeAcs.ExecuteGuid(this._enterpriseCode, false, sectionCode, out employeeInfo);
            //}
            //else
            //{
            // 拠点なし（全拠点）
            status = this._employeeAcs.ExecuteGuid(this._enterpriseCode, true, out employeeInfo);
            //}
            // 2008.11.27 del end [8266]

            // ステータスが正常の場合
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                // 名前をUIにセット、コードはメモリ内に保存
                this.tEdit_StockAgentCodeInput.Text = employeeInfo.Name.TrimEnd();
                this._swStockAgentName = employeeInfo.Name.TrimEnd();
                this._swStockAgentCode = employeeInfo.EmployeeCode;

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                Control nextControl = GetNextControl( tEdit_StockAgentCodeInput.Name );
                if ( nextControl != null ) nextControl.Focus();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
            }
        }

        #endregion // 担当者

        #region 発行者

        /// <summary>
        /// 発行者ガイドボタンクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_StockInputCode_Click(object sender, EventArgs e)
        {
            // 2008.12.05 del start [8726]
            //// ガイド表示
            //Employee employeeInfo;
            //int status;

            //// 2008.12.01 del start [8266]
            ////// 拠点が入力されていれば拠点コードあり、クリアされていれば全拠点表示
            ////string sectionCode = this.tEdit_SectionCodeAllowZero.Text.Trim();
            ////if (sectionCode.Length > 0)
            ////{
            ////    // 拠点入力あり
            ////    status = this._employeeAcs.ExecuteGuid(this._enterpriseCode, false, sectionCode, out employeeInfo);
            ////}
            ////else
            ////{
            //    // 拠点なし（全拠点）
            //    status = this._employeeAcs.ExecuteGuid(this._enterpriseCode, true, out employeeInfo);
            ////}
            //// 2008.12.01 del end [8266]

            //// ステータスが正常の場合
            //if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            //{
            //    // 名前をUIにセット、コードはメモリ内に保存
            //    this.tEdit_StockInputCode.Text = employeeInfo.Name.TrimEnd();
            //    this._swStockInputName = employeeInfo.Name.TrimEnd();
            //    this._swStockInputCode = employeeInfo.EmployeeCode;
            //}
            // 2008.12.05 del end [8726]
        }

        #endregion // 発行者

        #region BLグループ

        /// <summary>
        /// BLグループガイドボタンクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_BlGroupCode_Click(object sender, EventArgs e)
        {
            // ガイド表示
            BLGroupU blGroupUInfo;
            int status = this._blGroupUAcs.ExecuteGuid(this._enterpriseCode, out blGroupUInfo);

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                this.tEdit_BlGroupCodeInput.Text = blGroupUInfo.BLGroupName;
                this._swBLGroupCode = blGroupUInfo.BLGroupCode;
                this._swBLGroupName = blGroupUInfo.BLGroupName;

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                Control nextControl = GetNextControl( tEdit_BlGroupCodeInput.Name );
                if ( nextControl != null ) nextControl.Focus();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
            }
        }

        #endregion // BLグループ

        #region BLコード

        /// <summary>
        /// BLコードガイドクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_BlGoodsCode_Click(object sender, EventArgs e)
        {
            // コードから名称へ変換
            BLGoodsCdUMnt blGoodsUnit;
            int status = this._blGoodsCdAcs.ExecuteGuid(this._enterpriseCode, out blGoodsUnit);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                this.tEdit_BlGoodsCodeInput.Text = blGoodsUnit.BLGoodsFullName;
                this._swBLGoodsCode = blGoodsUnit.BLGoodsCode;
                this._swBLGoodsName = blGoodsUnit.BLGoodsFullName;

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                Control nextControl = GetNextControl( tEdit_BlGoodsCodeInput.Name );
                if ( nextControl != null ) nextControl.Focus();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
            }
        }

        #endregion // BLコード

        #region 倉庫

        /// <summary>
        /// 倉庫ガイドボタンクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_WarehouseCd_Click(object sender, EventArgs e)
        {
            // 拠点コードを取得
            string sectioncode = this.tEdit_SectionCodeAllowZero.Text.Trim();
            int status = 0;

            // コードから名称へ変換
            Warehouse warehouseInfo;

            // 拠点コードが入力されていれば拠点内、なければ全拠点表示
            if (!String.IsNullOrEmpty(sectioncode))
            {
                status = this._warehouseAcs.ExecuteGuid(out warehouseInfo, this._enterpriseCode, sectioncode);
            }
            else
            {
                status = this._warehouseAcs.ExecuteGuid(out warehouseInfo, this._enterpriseCode);
            }

            // 戻り値が正常であれば
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                // UI上には名前をセット、コードはメモリ内に格納
                this.tEdit_WarehouseCdInput.Text = warehouseInfo.WarehouseName;
                this._swWarehouseCd = warehouseInfo.WarehouseCode;
                this._swWarehouseName = warehouseInfo.WarehouseName;

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                Control nextControl = GetNextControl( tEdit_WarehouseCdInput.Name );
                if ( nextControl != null ) nextControl.Focus();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
            }
        }

        #endregion // 倉庫

        #region メーカー

        /// <summary>
        /// メーカーガイドボタンクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_MakerCd_Click(object sender, EventArgs e)
        {
            // コードから名称へ変換
            MakerUMnt makerInfo;
            int status = this._makerAcs.ExecuteGuid(this._enterpriseCode, out makerInfo);

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                this.tEdit_MakerCdInput.Text = makerInfo.MakerName;
                this._swGoodsMakerName = makerInfo.MakerName;
                this._swGoodsMakerCd = makerInfo.GoodsMakerCd;

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                Control nextControl = GetNextControl( tEdit_MakerCdInput.Name );
                if ( nextControl != null ) nextControl.Focus();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
            }
        }

        #endregion // メーカー

        #region 備考１

        /// <summary>
        /// 備考１
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_SupplierSlipNote1_Click(object sender, EventArgs e)
        {
            NoteGuidAcs noteGuidAcs = new NoteGuidAcs();
            NoteGuidBd noteGuidBd;
            int status;

            // 備考１
            status = noteGuidAcs.ExecuteGuide(out noteGuidBd, this._enterpriseCode, CT_DIVCODE_NoteGuideDivCd_1);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                this.tEdit_SupplierSlipNote1.Text = noteGuidBd.NoteGuideName;

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                Control nextControl = GetNextControl( tComboEditor_SupplierSlipNote1Fuzzy.Name );
                if ( nextControl != null ) nextControl.Focus();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
            }
        }

        #endregion // 備考１

        #region 備考２

        /// <summary>
        /// 備考２
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_SupplierSlipNote2_Click(object sender, EventArgs e)
        {
            NoteGuidAcs noteGuidAcs = new NoteGuidAcs();
            NoteGuidBd noteGuidBd;
            int status;

            // 備考２
            status = noteGuidAcs.ExecuteGuide(out noteGuidBd, this._enterpriseCode, CT_DIVCODE_NoteGuideDivCd_2);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                this.tEdit_SupplierSlipNote2.Text = noteGuidBd.NoteGuideName;

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                Control nextControl = GetNextControl( tComboEditor_SupplierSlipNote2Fuzzy.Name );
                if ( nextControl != null ) nextControl.Focus();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
            }
        }

        #endregion // 備考２

        #endregion // ガイドボタン

        #region 入力欄イベント

        #region 拠点

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
        ///// <summary>
        ///// 拠点コードLeaveイベント
        ///// </summary>
        ///// <param name="sender"></param>
        ///// <param name="e"></param>
        //private void tEdit_SectionCodeAllowZero_Leave(object sender, EventArgs e)
        //{
        //    // 入力値を取得
        //    string sectionCode = this.tEdit_SectionCodeAllowZero.Text.Trim().PadLeft(2, '0');

        //    // 0または00は「全社」
        //    if (sectionCode == "00")
        //    {
        //        this.tEdit_SectionCodeAllowZero.Text = sectionCode;
        //        this.uLabel_SectionNm.Text = "全社";
        //        return;
        //    }else if (!String.IsNullOrEmpty(sectionCode.Trim()))
        //    {
        //        // 拠点情報を取得
        //        SecInfoSet sectionInfo;
        //        int status = this._secInfoSetAcs.Read(out sectionInfo, this._enterpriseCode, sectionCode);

        //        // ステータスが正常の場合はUIにセット
        //        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //        {
        //            this.tEdit_SectionCodeAllowZero.Text = sectionInfo.SectionCode.TrimEnd();
        //            this.uLabel_SectionNm.Text = sectionInfo.SectionGuideNm.TrimEnd();
        //            return;
        //        }
        //    }
        //    this.tEdit_SectionCodeAllowZero.Clear();
        //    this.uLabel_SectionNm.Text = string.Empty;
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>
        /// 拠点名称取得処理
        /// </summary>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        /// <br>UpdateNote : 2010/09/21 曹文傑</br>
        /// <br>            ・redmine#14876</br>
        private bool ReadSectionCodeAllowZeroName( out string code, out string name )
        {
            // 入力値を取得
            string sectionCode = this.tEdit_SectionCodeAllowZero.Text.Trim().PadLeft( 2, '0' );
            code = sectionCode;
            name = uLabel_SectionNm.Text;

            if ( _prevInputValue.SectionCode == sectionCode )
            {
                this.tEdit_SectionCodeAllowZero.Text = sectionCode;
                return true;
            }

            // 00:全社
            if ( sectionCode == "00" )
            {
                sectionCode = "00";
                _prevInputValue.SectionCode = sectionCode;
                code = sectionCode;
                name = "全社";
                return true;
            }
            else if ( !String.IsNullOrEmpty( sectionCode.Trim() ) )
            {
                // 拠点情報を取得
                SecInfoSet sectionInfo;
                int status = this._secInfoSetAcs.Read( out sectionInfo, this._enterpriseCode, sectionCode );

                // ステータスが正常の場合はUIにセット
                //if ( status == (int)ConstantManagement.DB_Status.ctDB_NORMAL ) // DEL 2010/09/21
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL && sectionInfo.LogicalDeleteCode == 0) // ADD 2010/09/21
                {
                    code = sectionInfo.SectionCode.TrimEnd();
                    name = sectionInfo.SectionGuideNm.TrimEnd();
                    _prevInputValue.SectionCode = code;
                    return true;
                }
                else
                {
                    code = uiSetControl1.GetZeroPadCanceledText( "tEdit_SectionCodeAllowZero", _prevInputValue.SectionCode );
                    return false;
                }
            }
            else
            {
                code = string.Empty;
                name = string.Empty;
                _prevInputValue.SectionCode = code;
                return true;
            }
        }
        /// <summary>
        /// 拠点コード進入イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_SectionCodeAllowZero_Enter( object sender, EventArgs e )
        {
            // ゼロ詰め解除
            this.tEdit_SectionCodeAllowZero.Text = this.uiSetControl1.GetZeroPadCanceledText( "tEdit_SectionCode", this.tEdit_SectionCodeAllowZero.Text );
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
        // --- ADD 2014/08/08 T.Miyamoto ------------------------------>>>>>
        private void tEdit_SectionCodeAllowZero_Leave(object sender, EventArgs e)
        {
            // ゼロ詰め
            tEdit_SectionCodeAllowZero.Text = uiSetControl1.GetZeroPaddedText(tEdit_SectionCodeAllowZero.Name, tEdit_SectionCodeAllowZero.Text);
        }
        // --- ADD 2014/08/08 T.Miyamoto ------------------------------<<<<<

        #endregion // 拠点

        #region 仕入先

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
        ///// <summary>
        ///// 仕入先コード入力欄Leaveイベント
        ///// </summary>
        ///// <param name="sender"></param>
        ///// <param name="e"></param>
        //private void tNedit_SupplierCd_Leave(object sender, EventArgs e)
        //{
        //    int supplierCode = this.tNedit_SupplierCd.GetInt();
        //    if (supplierCode > 0)
        //    {
        //        Supplier supplierInfo;
        //        int status = this._supplierAcs.Read(out supplierInfo, this._enterpriseCode, supplierCode);

        //        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //        {
        //            this.uLabel_SupplierName.Text = supplierInfo.SupplierSnm.TrimEnd();

        //            // 締め日設定を取得
        //            status = this._tCalcAcs.GetTotalDayDmdC(supplierCode, out this._prevTotalDay, out this._currentTotalDay);
        //            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //            {
        //                // 日付更新
        //                if (this._prevTotalDay == DateTime.MinValue)
        //                {
        //                    // 2008.12.04 modify start [8713]
        //                    this.tDateEdit_StockDateSt.SetDateTime(DateTime.Today);
        //                    this.tDateEdit_StockDateEd.SetDateTime(DateTime.Today);
        //                    //this.tDateEdit_StockDateSt.Clear();
        //                    //this.tDateEdit_StockDateEd.Clear();
        //                    // 2008.12.04 modify end [8713]
        //                }
        //                else
        //                {
        //                    this.tDateEdit_StockDateSt.SetDateTime(this._prevTotalDay.AddDays(1));
        //                    this.tDateEdit_StockDateEd.SetDateTime(DateTime.Now);
        //                }
        //            }
        //            else
        //            {
        //                // 締め日データなし
        //                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
        //                    MSG_TOTAL_DAY_NOT_FOUND_SUPPLIER, -1, MessageBoxButtons.OK);

        //                this.tDateEdit_StockDateSt.SetDateTime(DateTime.Today);
        //                this.tDateEdit_StockDateEd.SetDateTime(DateTime.Today);

        //                // 名称をクリア
        //                this.uLabel_SupplierName.Text = string.Empty;

        //                // 支払先も未入力であれば残高一覧タブが選択不能に
        //                if (this.tNedit_PayeeCode.GetInt() == 0) this._remainTabSelectable = false;
        //                return;
        //            }

        //            this._remainTabSelectable = true;
        //            return;
        //        }
        //        else
        //        {
        //            // 仕入先がない
        //            TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
        //                MSG_SUPPLIER_NOT_FOUND, -1, MessageBoxButtons.OK);
        //            this.tNedit_SupplierCd.Clear();
        //            this.uLabel_SupplierName.Text = string.Empty;
        //            this.tNedit_SupplierCd.Focus();
        //        }
        //    }

        //    // 名称をクリア
        //    //this.uLabel_SupplierName.Text = string.Empty;
        //    // 支払先も未入力であれば残高一覧タブが選択不能に
        //    if (this.tNedit_PayeeCode.GetInt() == 0) this._remainTabSelectable = false;
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>
        /// 仕入先名称取得
        /// </summary>
        /// <param name="code"></param>
        /// <param name="code"></param>
        /// <returns></returns>
        /// <remarks>
        /// <br>UpdateNote : 2010/07/20 chenyd</br>
        /// <br>           　テキスト出力対応</br> 
        /// <br>UpdateNote : 2010/09/21 曹文傑</br>
        /// <br>            ・redmine#14876</br>
        /// </remarks>
        private bool ReadSupplierName( out int code )
        {
            int supplierCode = this.tNedit_SupplierCd.GetInt();
            code = supplierCode;

            if ( _prevInputValue.SupplierCode == supplierCode ) return true;

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
            // 未入力時は明細へタブを切り替え
            int payeeCode = this.tNedit_PayeeCode.GetInt();
            //---------------------- DEL 2010/07/20 --------------------------------->>>>>
            //if ( (supplierCode == 0) && (payeeCode == 0) )
            //{
            //    if ( this._selectedMainTabKey == "uTab_RemainList" )
            //    {
            //        this._selectedMainTabKey = "uTab_SlipDetail";
            //        this.uTabControl.Tabs["uTab_SlipDetail"].Selected = true;
            //    }
            //}
            //---------------------- DEL 2010/07/20 ---------------------------------<<<<<
            //残高一覧グリッド内容クリア
            this._detailDataSet.BalanceList.Clear();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL

            if ( supplierCode > 0 )
            {
                Supplier supplier;
                int status = this._supplierAcs.Read( out supplier, this._enterpriseCode, supplierCode);

                //if ( status == (int)ConstantManagement.DB_Status.ctDB_NORMAL ) // DEL 2010/09/21
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL && supplier.LogicalDeleteCode == 0) // DEL 2010/09/21
                {
                    this.uLabel_SupplierName.Text = supplier.SupplierSnm.TrimEnd();

                    // 締め日設定を取得
                    status = this._tCalcAcs.GetTotalDayPayment( supplierCode, out this._prevTotalDay, out this._currentTotalDay );
                    if ( status == (int)ConstantManagement.DB_Status.ctDB_NORMAL )
                    {
                        // 日付更新
                        if ( this._prevTotalDay == DateTime.MinValue )
                        {
                            DateTime today = DateTime.Today;
                            this.tDateEdit_StockDateSt.SetDateTime( today );
                            this.tDateEdit_StockDateEd.SetDateTime( today );
                        }
                        else
                        {
                            this.tDateEdit_StockDateSt.SetDateTime( this._prevTotalDay.AddDays( 1 ) );
                            this.tDateEdit_StockDateEd.SetDateTime( DateTime.Now );
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                            if ( this._prevTotalDay.AddDays( 1 ) > DateTime.Today )
                            {
                                this.tDateEdit_StockDateEd.SetDateTime( this._prevTotalDay.AddDays( 1 ) );
                            }
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD
                        }
                        _prevInputValue.SupplierCode = supplierCode;
                        this._remainTabSelectable = true;
                    }
                    else
                    {
                        // 締め日データなし
                        TMsgDisp.Show( this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                            MSG_TOTAL_DAY_NOT_FOUND_SUPPLIER, -1, MessageBoxButtons.OK );

                        // 名称をクリア
                        this.uLabel_SupplierName.Text = string.Empty;

                        // 支払先も未入力であれば残高一覧タブが選択不能に
                        if ( this.tNedit_PayeeCode.GetInt() == 0 ) this._remainTabSelectable = false;
                    }
                    return true;
                }
                else
                {
                    code = _prevInputValue.SupplierCode;
                    return false;
                }
            }
            else
            {
                _prevInputValue.SupplierCode = supplierCode;
                this.uLabel_SupplierName.Text = string.Empty;
                // 名称をクリア
                this.uLabel_SupplierName.Text = string.Empty;
                // 請求先も未入力であれば残高一覧タブが選択不能に
                if ( this.tNedit_PayeeCode.GetInt() == 0 ) this._remainTabSelectable = false;
                return true;
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        #endregion // 仕入先

        #region 支払先

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
        //private void tNedit_PayeeCode_Leave(object sender, EventArgs e)
        //{
        //    int payeeCode = this.tNedit_PayeeCode.GetInt();
        //    if (payeeCode > 0)
        //    {
        //        Supplier supplierInfo;
        //        int status = this._supplierAcs.Read(out supplierInfo, this._enterpriseCode, payeeCode);

        //        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //        {
        //            this.uLabel_PayeeName.Text = supplierInfo.PayeeSnm.TrimEnd();

        //            // 締め日設定を取得
        //            status = this._tCalcAcs.GetTotalDayDmdC(payeeCode, out this._prevTotalDay, out this._currentTotalDay);
        //            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //            {
        //                // 日付更新
        //                if (this._prevTotalDay == DateTime.MinValue)
        //                {
        //                    // 2008.12.04 modify start [8713]
        //                    //this.tDateEdit_StockDateSt.Clear();
        //                    //this.tDateEdit_StockDateEd.Clear();
        //                    this.tDateEdit_StockDateSt.SetDateTime(DateTime.Today);
        //                    this.tDateEdit_StockDateEd.SetDateTime(DateTime.Today);
        //                    // 2008.12.04 modify end [8713]
        //                }
        //                else
        //                {
        //                    this.tDateEdit_StockDateSt.SetDateTime(this._prevTotalDay.AddDays(1));
        //                    this.tDateEdit_StockDateEd.SetDateTime(DateTime.Now);
        //                }
        //            }
        //            else
        //            {
        //                // 締め日データなし
        //                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
        //                    MSG_TOTAL_DAY_NOT_FOUND_PAYEE, -1, MessageBoxButtons.OK);

        //                // 名称をクリア
        //                this.uLabel_PayeeName.Text = string.Empty;

        //                // 仕入先も未入力であれば残高一覧タブが選択不能に
        //                if (this.tNedit_SupplierCd.GetInt() == 0) this._remainTabSelectable = false;
        //                return;
        //            }

        //            this._remainTabSelectable = true;
        //            return;
        //        }
        //        else
        //        {
        //            // 支払先なし
        //            TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
        //                MSG_PAYEE_NOT_FOUND, -1, MessageBoxButtons.OK);
        //            this.tNedit_PayeeCode.Clear();
        //            this.uLabel_PayeeName.Text = string.Empty;
        //            this.tNedit_PayeeCode.Focus();
        //        }
        //    }

        //    // 名称をクリア
        //    //this.uLabel_PayeeName.Text = string.Empty;
        //    // 仕入先も未入力であれば残高一覧タブが選択不能に
        //    if (this.tNedit_SupplierCd.GetInt() == 0) this._remainTabSelectable = false;

        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>
        /// 支払先名称取得
        /// </summary>
        /// <param name="code"></param>
        /// <param name="code"></param>
        /// <returns></returns>
        /// <remarks>
        /// <br>UpdateNote : 2010/07/20 chenyd</br>
        /// <br>           　テキスト出力対応</br> 
        /// <br>UpdateNote : 2010/09/21 曹文傑</br>
        /// <br>            ・redmine#14876</br>
        /// </remarks>
        private bool ReadPayeeName( out int code )
        {
            int payeeCode = this.tNedit_PayeeCode.GetInt();
            code = payeeCode;

            if ( _prevInputValue.PayeeCode == payeeCode ) return true;

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
            // 未入力時は明細へタブを切り替え
            int supplierCode = this.tNedit_SupplierCd.GetInt();
            //---------------------- DEL 2010/07/20 --------------------------------->>>>>
            //if ( (supplierCode == 0) && (payeeCode == 0) )
            //{
            //    if ( this._selectedMainTabKey == "uTab_RemainList" )
            //    {
            //        this._selectedMainTabKey = "uTab_SlipDetail";
            //        this.uTabControl.Tabs["uTab_SlipDetail"].Selected = true;
            //    }
            //}
            //---------------------- DEL 2010/07/20 ---------------------------------<<<<<
            //残高一覧グリッド内容クリア
            this._detailDataSet.BalanceList.Clear();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL

            if ( payeeCode > 0 )
            {
                Supplier payee;
                int status = this._supplierAcs.Read( out payee, this._enterpriseCode, payeeCode );

                //if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL) // DEL 2010/09/21
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL && payee.LogicalDeleteCode == 0) // DEL 2010/09/21
                {
                    this.uLabel_PayeeName.Text = payee.SupplierSnm.TrimEnd();

                    // 締め日設定を取得
                    status = this._tCalcAcs.GetTotalDayPayment( payeeCode, out this._prevTotalDay, out this._currentTotalDay );
                    if ( status == (int)ConstantManagement.DB_Status.ctDB_NORMAL )
                    {
                        // 日付更新
                        if ( this._prevTotalDay == DateTime.MinValue )
                        {
                            DateTime today = DateTime.Today;
                            this.tDateEdit_StockDateSt.SetDateTime( today );
                            this.tDateEdit_StockDateEd.SetDateTime( today );
                        }
                        else
                        {
                            this.tDateEdit_StockDateSt.SetDateTime( this._prevTotalDay.AddDays( 1 ) );
                            this.tDateEdit_StockDateEd.SetDateTime( DateTime.Now );
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                            if ( this._prevTotalDay.AddDays( 1 ) > DateTime.Today )
                            {
                                this.tDateEdit_StockDateEd.SetDateTime( this._prevTotalDay.AddDays( 1 ) );
                            }
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD
                        }
                        _prevInputValue.PayeeCode = payeeCode;
                        this._remainTabSelectable = true;
                    }
                    else
                    {
                        // 締め日データなし
                        TMsgDisp.Show( this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                            MSG_TOTAL_DAY_NOT_FOUND_SUPPLIER, -1, MessageBoxButtons.OK );

                        // 名称をクリア
                        this.uLabel_PayeeName.Text = string.Empty;

                        // 支払先も未入力であれば残高一覧タブが選択不能に
                        if ( this.tNedit_PayeeCode.GetInt() == 0 ) this._remainTabSelectable = false;
                    }
                    return true;
                }
                else
                {
                    code = _prevInputValue.PayeeCode;
                    return false;
                }
            }
            else
            {
                _prevInputValue.PayeeCode = payeeCode;
                this.uLabel_PayeeName.Text = string.Empty;
                // 名称をクリア
                this.uLabel_PayeeName.Text = string.Empty;
                // 請求先も未入力であれば残高一覧タブが選択不能に
                if ( this.tNedit_PayeeCode.GetInt() == 0 ) this._remainTabSelectable = false;
                return true;
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        #endregion // 支払先

        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
        #region 処理区分と伝票区分
        /// <summary>
        /// 処理区分変更時に伝票区分コンボボックス内のItemを変更する
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <returns>なし</returns>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void tComboEditor_StockRetGdsPlnFlag_ValueChanged(object sender, EventArgs e)
        {

            int stockRetGdsPlnFlag = (int)this.tComboEditor_StockRetGdsPlnFlag.SelectedItem.DataValue;

            // 前回と同じ値ならスキップ
            if (this._retGdsPlnFlagValueChanged == stockRetGdsPlnFlag)
            {
                return;
            }

            // 伝票区分Items取得
            setTComboEditorStockSlipCdItems(stockRetGdsPlnFlag);

            // チェック用に値保存
            this._retGdsPlnFlagValueChanged = stockRetGdsPlnFlag;

        }

        /// <summary>
        /// 伝票区分コンボボックス内のItemを変更する
        /// </summary>
        /// <param name="stockRetGdsPlnFlag">0:仕入情報表示(返品予定は対象外), 1:仕入返品予定情報のみ表示</param>
        /// <returns>なし</returns>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void setTComboEditorStockSlipCdItems(int stockRetGdsPlnFlag)
        {

            // 伝票区分コンボボックスクリア
            this.tComboEditor_StockSlipCd.Items.Clear();

            // 処理区分で伝票区分コンボボックスの中身変更
            if (stockRetGdsPlnFlag == 0)
            {
                // 仕入返品予定データ以外
                this.tComboEditor_StockSlipCd.Items.Add(new ValueListItem(0, "全て"));
                this.tComboEditor_StockSlipCd.Items.Add(new ValueListItem(1, "仕入／仕入返品"));
                this.tComboEditor_StockSlipCd.Items.Add(new ValueListItem(2, "仕入"));
                this.tComboEditor_StockSlipCd.Items.Add(new ValueListItem(3, "仕入返品"));
                this.tComboEditor_StockSlipCd.Items.Add(new ValueListItem(4, "発注"));
                this.tComboEditor_StockSlipCd.Items.Add(new ValueListItem(5, "入荷／入荷返品"));
                this.tComboEditor_StockSlipCd.Items.Add(new ValueListItem(6, "入荷"));
                this.tComboEditor_StockSlipCd.Items.Add(new ValueListItem(7, "入荷返品"));
                this.tComboEditor_StockSlipCd.Items.Add(new ValueListItem(8, "支払"));

                // 初期表示
                // --- UPD 2013/02/25 T.Nishi ---------->>>>>
                //this.tComboEditor_StockSlipCd.Value = 0;
                this.tComboEditor_StockSlipCd.Value = 1;
                // --- UPD 2013/02/25 T.Nishi ----------<<<<<
            }
            else
            {
                // 仕入返品予定データのみ
                this.tComboEditor_StockSlipCd.Items.Add(new ValueListItem(0, "全て"));
                this.tComboEditor_StockSlipCd.Items.Add(new ValueListItem(1, "仕入"));
                this.tComboEditor_StockSlipCd.Items.Add(new ValueListItem(2, "返品"));

                // 初期表示
                this.tComboEditor_StockSlipCd.Value = 0;
            }

        }

        /// <summary>
        /// 処理区分Leaveイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void tComboEditor_StockRetGdsPlnFlag_Leave(object sender, EventArgs e)
        {
            // 処理区分を保存(初期値は0)
            this._stockRetGdsPlnFlag = (int)this.tComboEditor_StockRetGdsPlnFlag.SelectedItem.DataValue;
        }

        /// <summary>
        /// 処理区分Enterイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void tComboEditor_StockRetGdsPlnFlag_Enter(object sender, System.EventArgs e)
        {
            // 処理区分を設定
            this.tComboEditor_StockRetGdsPlnFlag.Value = this._stockRetGdsPlnFlag;
        }
        #endregion // 処理区分と伝票区分
        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

        // 以下の担当者から発注先の各入力欄は、フォーカス移動時にコード←→名称変換を行う
        // また、同一のフィールドをコードおよび名称で使用するため、最大文字長の調整も行う
        // Enter時に入力コードの最大文字長、Leave時には表示用名称の最大文字長
        // 文字長の設定は行わない

        #region 担当者

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
        ///// <summary>
        ///// 担当者入力欄Leaveイベント
        ///// </summary>
        ///// <param name="sender"></param>
        ///// <param name="e"></param>
        //private void tEdit_StockAgentCodeInput_Leave(object sender, EventArgs e)
        //{
        //    // 入力値を取得
        //    string inputValue = this.tEdit_StockAgentCodeInput.Text.Trim();

        //    // 空でなければ処理開始
        //    if (!string.IsNullOrEmpty(inputValue))
        //    {
        //        try
        //        {
        //            // 入力値が変わっていた場合のみコード変換
        //            if (inputValue != this._swStockAgentCode)
        //            {
        //                // 入力された値をプライベートレベルで保存
        //                this._swStockAgentCode = inputValue;

        //                // コードから名称へ変換
        //                Employee employeeInfo;
        //                int status = this._employeeAcs.Read(out employeeInfo, this._enterpriseCode, this._swStockAgentCode);
        //                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //                {
        //                    this._swStockAgentName = employeeInfo.Name;
        //                }
        //            }

        //            // Leave時に名称に置き換え
        //            //this.tEdit_SalesEmployeeCd.ExtEdit.Column = 40;
        //            this.tEdit_StockAgentCodeInput.Text = this._swStockAgentName;
        //        }
        //        catch
        //        {
        //            // 文字が不正な場合は空文字を保存し、項目をクリア
        //            this._swStockAgentCode = string.Empty;
        //            this.tEdit_StockAgentCodeInput.Clear();
        //        }
        //    }
        //    else
        //    {
        //        // そうでなければ空文字を保存
        //        this._swStockAgentCode = string.Empty;
        //    }
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>
        /// 担当者名称取得
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        private bool ReadSalesEmployeeName( out string code )
        {
            // 入力値を取得
            string inputValue = this.tEdit_StockAgentCodeInput.Text.Trim();
            code = inputValue;

            // 空でなければ処理開始
            if ( !string.IsNullOrEmpty( inputValue ) )
            {
                try
                {
                    // 入力値が変わっていた場合のみコード変換
                    if ( inputValue != this._swStockAgentCode )
                    {
                        // コードから名称へ変換
                        Employee employeeInfo;
                        int status = this._employeeAcs.Read( out employeeInfo, this._enterpriseCode, inputValue );
                        if ( status == (int)ConstantManagement.DB_Status.ctDB_NORMAL )
                        {
                            this._swStockAgentCode = inputValue;
                            this._swStockAgentName = employeeInfo.Name;
                            code = _swStockAgentCode;
                            return true;
                        }
                        else
                        {
                            // 戻す
                            code = uiSetControl1.GetZeroPadCanceledText( tEdit_StockAgentCodeInput.Name, _swStockAgentCode );
                            return false;
                        }
                    }
                    return true;
                }
                catch
                {
                    // 戻す
                    code = uiSetControl1.GetZeroPadCanceledText( tEdit_StockAgentCodeInput.Name, _swStockAgentCode );
                    return false;
                }
            }
            else
            {
                this._swStockAgentCode = string.Empty;
                this._swStockAgentName = string.Empty;
                code = _swStockAgentCode;
                return true;
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        /// <summary>
        /// 担当者入力欄Enterイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_StockAgentCodeInput_Enter(object sender, System.EventArgs e)
        {
            // 担当者コードが保存されていれば置き換え
            if (!String.IsNullOrEmpty(this._swStockAgentCode))
            {
                this.tEdit_StockAgentCodeInput.Text = this._swStockAgentCode.Trim();
            }

            // 最大文字長を調整
            //this.tEdit_SalesEmployeeCd.ExtEdit.Column = 4;
        }

        #endregion // 担当者

        #region 発行者

        /// <summary>
        /// 発行者入力欄Leaveイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_StockInputCode_Leave(object sender, EventArgs e)
        {
            // 2008.12.05 del start [8726]
            //// 入力値を取得
            //string inputValue = this.tEdit_StockInputCode.Text.Trim();

            //// 空でなければ処理開始
            //if (!string.IsNullOrEmpty(inputValue))
            //{
            //    try
            //    {
            //        // 入力値が変わっていた場合のみコード変換
            //        if (inputValue != this._swStockInputCode)
            //        {
            //            // 入力された値をプライベートレベルで保存
            //            this._swStockInputCode = inputValue;

            //            // コードから名称へ変換
            //            Employee employeeInfo;
            //            int status = this._employeeAcs.Read(out employeeInfo, this._enterpriseCode, this._swStockInputCode);
            //            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            //            {
            //                this._swStockInputName = employeeInfo.Name;
            //            }
            //        }

            //        // Leave時に名称に置き換え
            //        //this.tEdit_SalesInputCode.ExtEdit.Column = 40;
            //        this.tEdit_StockInputCode.Text = this._swStockInputName;
            //    }
            //    catch
            //    {
            //        // 文字が不正な場合は空文字を保存し、項目をクリア
            //        this._swStockInputCode = string.Empty;
            //        this.tEdit_StockInputCode.Clear();
            //    }
            //}
            //else
            //{
            //    // そうでなければ空文字を保存
            //    this._swStockInputCode = string.Empty;
            //}
        }

        /// <summary>
        /// 発行者入力欄Enterイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_StockInputCode_Enter(object sender, System.EventArgs e)
        {
            //// 発行者コードが保存されていれば置き換え
            //if (!String.IsNullOrEmpty(this._swStockInputCode))
            //{
            //    this.tEdit_StockInputCode.Text = this._swStockInputCode.Trim();
            //}

            //// 最大文字長を入力コードに調整
            ////this.tEdit_SalesInputCode.ExtEdit.Column = 4;
            // 2008.12.05 del end [8726]
        }

        #endregion // 発行者

        #region BLグループコード

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
        ///// <summary>
        ///// BLグループコード名取得
        ///// </summary>
        ///// <param name="sender"></param>
        ///// <param name="e"></param>
        //private void tEdit_BlGroupCodeInput_Leave(object sender, EventArgs e)
        //{
        //    // 入力値を取得
        //    string inputValue = this.tEdit_BlGroupCodeInput.Text.Trim();

        //    // 空でなければ処理開始
        //    if (!string.IsNullOrEmpty(inputValue))
        //    {
        //        try
        //        {
        //            // 入力値が変わっていた場合のみコード変換
        //            int blgroup = int.Parse(inputValue);
        //            if (blgroup != this._swBLGroupCode)
        //            {
        //                // 入力された値をプライベートレベルで保存
        //                this._swBLGroupCode = blgroup;

        //                // コードから名称へ変換
        //                BLGroupU blGroupU;
        //                int status = this._blGroupUAcs.Search(out blGroupU, this._enterpriseCode, blgroup);
        //                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //                {
        //                    this._swBLGroupName = blGroupU.BLGroupName;
        //                }
        //            }
        //            // Leave時に名称に置き換え
        //            //this.tEdit_BlGroupCodeInput.ExtEdit.Column = 40;
        //            this.tEdit_BlGroupCodeInput.Text = this._swBLGroupName;
        //        }
        //        catch
        //        {
        //            // 文字が不正な場合は空文字を保存し、項目をクリア
        //            this._swBLGroupCode = 0;
        //            this.tEdit_BlGroupCodeInput.Clear();
        //        }
        //    }
        //    else
        //    {
        //        // そうでなければ0を保存
        //        this._swBLGroupCode = 0;
        //    }
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>
        /// グループコード名称取得
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private bool ReadBlGroupName( out int code )
        {
            // 入力値を取得
            int inputValue;
            try
            {
                inputValue = Int32.Parse( this.tEdit_BlGroupCodeInput.Text.Trim() );
            }
            catch
            {
                inputValue = 0;
            }
            code = inputValue;

            // 空でなければ処理開始
            if ( inputValue != 0 )
            {
                try
                {
                    // 入力値が変わっていた場合のみコード変換
                    if ( inputValue != this._swBLGroupCode )
                    {
                        // コードから名称へ変換
                        BLGroupU blGroup;
                        int status = this._blGroupUAcs.Search( out blGroup, this._enterpriseCode, inputValue );
                        if ( status == (int)ConstantManagement.DB_Status.ctDB_NORMAL )
                        {
                            this._swBLGroupCode = inputValue;
                            this._swBLGroupName = blGroup.BLGroupName;
                            code = _swBLGroupCode;
                            return true;
                        }
                        else
                        {
                            // 戻す
                            code = _swBLGroupCode;
                            return false;
                        }
                    }
                    return true;
                }
                catch
                {
                    // 戻す
                    code = _swBLGroupCode;
                    return false;
                }
            }
            else
            {
                this._swBLGroupCode = 0;
                this._swBLGroupName = string.Empty;
                code = _swBLGroupCode;
                return true;
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        /// <summary>
        /// BLグループコードEnterイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_BlGroupCodeInput_Enter(object sender, System.EventArgs e)
        {
            // BLグループコードが保存されていれば置き換え
            if (this._swBLGroupCode > 0)
            {
                this.tEdit_BlGroupCodeInput.Text = this._swBLGroupCode.ToString();
            }
            else
            {
                // 2008.11.27 modify start [8274]
                this._swBLGroupCode = 0;
                // 2008.11.27 modify end [8274]
            }
            // 最大文字長を入力コードに調整
            //this.tEdit_BlGroupCodeInput.ExtEdit.Column = 5;
        }
        
        #endregion // BLグループコード

        #region BLコード

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
        ///// <summary>
        ///// BLコード入力欄Leaveイベント
        ///// </summary>
        ///// <param name="sender"></param>
        ///// <param name="e"></param>
        //private void tEdit_BlGoodsCodeInput_Leave(object sender, EventArgs e)
        //{
        //    // 入力値を取得
        //    string inputValue = this.tEdit_BlGoodsCodeInput.Text.Trim();

        //    // 空でなければ処理開始
        //    if (!string.IsNullOrEmpty(inputValue))
        //    {
        //        try
        //        {
        //            // 入力値が変わっていた場合のみコード変換
        //            int blcode = int.Parse(inputValue);
        //            if (blcode != this._swBLGoodsCode)
        //            {
        //                // 入力された値をプライベートレベルで保存
        //                this._swBLGoodsCode = blcode;

        //                // コードから名称へ変換
        //                BLGoodsCdUMnt blGoodsUnit;
        //                int status = this._blGoodsCdAcs.Read(out blGoodsUnit, this._enterpriseCode, this._swBLGoodsCode);
        //                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //                {
        //                    this._swBLGoodsName = blGoodsUnit.BLGoodsFullName;
        //                }
        //            }

        //            // Leave時に名称に置き換え
        //            //this.tEdit_BlGoodsCodeInput.ExtEdit.Column = 40;
        //            this.tEdit_BlGoodsCodeInput.Text = this._swBLGoodsName;
        //        }
        //        catch
        //        {
        //            // 文字が不正な場合は0を保存し、項目をクリア
        //            // 2008.12.01 modify start [8274]
        //            this._swBLGoodsCode = 0;
        //            // 2008.12.01 modify end [8274]
        //            this.tEdit_BlGoodsCodeInput.Clear();
        //        }
        //    }
        //    else
        //    {
        //        // そうでなければ0を保存
        //        // 2008.12.01 modify start [8274]
        //        this._swBLGoodsCode = 0;
        //        // 2008.12.01 modify end [8274]
        //    }
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>
        /// BLコード名称取得
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private bool ReadBlCodeName( out int code )
        {
            // 入力値を取得
            int inputValue;
            try
            {
                inputValue = Int32.Parse( this.tEdit_BlGoodsCodeInput.Text.Trim() );
            }
            catch
            {
                inputValue = 0;
            }
            code = inputValue;

            // 空でなければ処理開始
            if ( inputValue != 0 )
            {
                try
                {
                    // 入力値が変わっていた場合のみコード変換
                    if ( inputValue != this._swBLGoodsCode )
                    {
                        // コードから名称へ変換
                        BLGoodsCdUMnt blGoodsCd;
                        int status = _blGoodsCdAcs.Read( out blGoodsCd, this._enterpriseCode, inputValue );

                        if ( status == (int)ConstantManagement.DB_Status.ctDB_NORMAL )
                        {
                            this._swBLGoodsCode = inputValue;
                            this._swBLGoodsName = blGoodsCd.BLGoodsFullName;
                            code = _swBLGoodsCode;
                            return true;
                        }
                        else
                        {
                            // 戻す
                            code = _swBLGoodsCode;
                            return false;
                        }
                    }
                    return true;
                }
                catch
                {
                    // 戻す
                    code = _swBLGoodsCode;
                    return false;
                }
            }
            else
            {
                this._swBLGoodsCode = 0;
                this._swBLGoodsName = string.Empty;
                code = _swBLGoodsCode;
                return true;
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        /// <summary>
        /// BLコード入力欄Enterイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_BlGoodsCodeInput_Enter(object sender, System.EventArgs e)
        {
            // BLコードが保存されていれば置き換え
            if (this._swBLGoodsCode > 0)
            {
                this.tEdit_BlGoodsCodeInput.Text = this._swBLGoodsCode.ToString();
            }
            else
            {
                // 2008.11.27 modify start [8274]
                this._swBLGoodsCode = 0;
                // 2008.11.27 modify end [8274]
            }

            // 最大文字長を入力コードに調整
            //this.tEdit_BlGoodsCodeInput.ExtEdit.Column = 5;
        }

        #endregion // BLコード

        #region メーカー

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
        ///// <summary>
        ///// メーカー入力欄Leaveイベント
        ///// </summary>
        ///// <param name="sender"></param>
        ///// <param name="e"></param>
        //private void tEdit_MakerCdInput_Leave(object sender, EventArgs e)
        //{
        //    // 入力値を取得
        //    string inputValue = this.tEdit_MakerCdInput.Text.Trim();

        //    // 空でなければ処理開始
        //    if (!string.IsNullOrEmpty(inputValue))
        //    {
        //        try
        //        {
        //            // 入力値が変わっていた場合のみコード変換
        //            int makercode = int.Parse(inputValue);
        //            if (makercode != this._swGoodsMakerCd)
        //            {
        //                // 入力された値をプライベートレベルで保存
        //                this._swGoodsMakerCd = makercode;

        //                // コードから名称へ変換
        //                MakerUMnt makerInfo;
        //                int status = this._makerAcs.Read(out makerInfo, this._enterpriseCode, this._swGoodsMakerCd);
        //                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //                {
        //                    this._swGoodsMakerName = makerInfo.MakerName;
        //                }
        //            }

        //            // Leave時に名称に置き換え
        //            //this.tEdit_MakerCdInput.ExtEdit.Column = 40;
        //            this.tEdit_MakerCdInput.Text = this._swGoodsMakerName;
        //        }
        //        catch
        //        {
        //            // 文字が不正な場合は0を保存し、項目をクリア
        //            this._swGoodsMakerCd = 0;
        //            this.tEdit_MakerCdInput.Clear();
        //        }
        //    }
        //    else
        //    {
        //        // そうでなければ0を保存
        //        this._swGoodsMakerCd = 0;
        //    }
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>
        /// メーカー名称取得
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private bool ReadGoodsMakerName( out int code )
        {
            // 入力値を取得
            int inputValue;
            try
            {
                inputValue = Int32.Parse( this.tEdit_MakerCdInput.Text.Trim() );
            }
            catch
            {
                inputValue = 0;
            }
            code = inputValue;

            // 空でなければ処理開始
            if ( inputValue != 0 )
            {
                try
                {
                    // 入力値が変わっていた場合のみコード変換
                    if ( inputValue != this._swGoodsMakerCd )
                    {
                        // コードから名称へ変換
                        MakerUMnt makerInfo;
                        int status = this._makerAcs.Read( out makerInfo, this._enterpriseCode, inputValue );

                        if ( status == (int)ConstantManagement.DB_Status.ctDB_NORMAL )
                        {
                            this._swGoodsMakerCd = inputValue;
                            this._swGoodsMakerName = makerInfo.MakerName;
                            code = _swGoodsMakerCd;
                            return true;
                        }
                        else
                        {
                            // 戻す
                            code = _swGoodsMakerCd;
                            return false;
                        }
                    }
                    return true;
                }
                catch
                {
                    // 戻す
                    code = _swGoodsMakerCd;
                    return false;
                }
            }
            else
            {
                this._swGoodsMakerCd = 0;
                this._swGoodsMakerName = string.Empty;
                code = _swGoodsMakerCd;
                return true;
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        /// <summary>
        /// メーカー入力欄Enterイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_MakerCdInput_Enter(object sender, System.EventArgs e)
        {
            // メーカーコードが保存されていれば置き換え
            if (this._swGoodsMakerCd > 0)
            {
                this.tEdit_MakerCdInput.Text = this._swGoodsMakerCd.ToString();
            }

            // 最大文字長を入力コードに調整
            //this.tEdit_MakerCdInput.ExtEdit.Column = 4;
        }

        #endregion // メーカー

        #region 倉庫

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
        ///// <summary>
        ///// 倉庫入力欄Leaveイベント
        ///// </summary>
        ///// <param name="sender"></param>
        ///// <param name="e"></param>
        //private void tEdit_WarehouseCdInput_Leave(object sender, EventArgs e)
        //{
        //    // 入力値を取得
        //    string inputValue = this.tEdit_WarehouseCdInput.Text.Trim();

        //    // 拠点コードを取得
        //    string sectioncode = this.tEdit_SectionCodeAllowZero.Text.Trim();

        //    // 空でなければ処理開始
        //    if (!string.IsNullOrEmpty(inputValue))
        //    {
        //        try
        //        {
        //            // 入力値が変わっていた場合のみコード変換
        //            if (inputValue != this._swWarehouseCd)
        //            {
        //                // 入力された値をプライベートレベルで保存
        //                this._swWarehouseCd = inputValue;

        //                // コードから名称へ変換
        //                Warehouse warehouseInfo;
        //                int status = this._warehouseAcs.Read(out warehouseInfo, this._enterpriseCode, sectioncode, this._swWarehouseCd);
        //                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //                {
        //                    this._swWarehouseName = warehouseInfo.WarehouseName;
        //                }
        //            }

        //            // Leave時に名称に置き換え
        //            this.tEdit_WarehouseCdInput.Text = this._swWarehouseName;
        //        }
        //        catch
        //        {
        //            // 文字が不正な場合は空文字を保存し、項目をクリア
        //            this._swWarehouseCd = string.Empty;
        //            this.tEdit_WarehouseCdInput.Clear();
        //        }
        //    }
        //    else
        //    {
        //        // そうでなければ空文字を保存
        //        this._swWarehouseCd = string.Empty;
        //    }
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>
        /// 倉庫名称取得
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private bool ReadWarehouseName( out string code )
        {
            // 入力値を取得
            string inputValue = this.tEdit_WarehouseCdInput.Text.Trim();
            code = inputValue;

            // 空でなければ処理開始
            if ( !string.IsNullOrEmpty( inputValue ) )
            {
                try
                {
                    // 入力値が変わっていた場合のみコード変換
                    if ( inputValue != this._swWarehouseCd )
                    {
                        // コードから名称へ変換
                        Warehouse warehouseInfo;
                        int status = this._warehouseAcs.Read( out warehouseInfo, this._enterpriseCode, string.Empty, inputValue );
                        if ( status == (int)ConstantManagement.DB_Status.ctDB_NORMAL )
                        {
                            this._swWarehouseCd = inputValue;
                            this._swWarehouseName = warehouseInfo.WarehouseName;
                            code = _swWarehouseCd;
                            return true;
                        }
                        else
                        {
                            // 戻す
                            code = uiSetControl1.GetZeroPadCanceledText( tEdit_WarehouseCdInput.Name, _swWarehouseCd );
                            return false;
                        }
                    }
                    return true;
                }
                catch
                {
                    // 戻す
                    code = uiSetControl1.GetZeroPadCanceledText( tEdit_WarehouseCdInput.Name, _swWarehouseCd );
                    return false;
                }
            }
            else
            {
                this._swWarehouseCd = string.Empty;
                this._swWarehouseName = string.Empty;
                code = _swWarehouseCd;
                return true;
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        /// <summary>
        /// 倉庫入力欄Enterイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_WarehouseCdInput_Enter(object sender, System.EventArgs e)
        {
            // 倉庫コードが保存されていれば置き換え
            if (!String.IsNullOrEmpty(this._swWarehouseCd))
            {
                this.tEdit_WarehouseCdInput.Text = this._swWarehouseCd.Trim();
            }
        }

        #endregion // 倉庫

        // 以下の欄については、フォーカス移動時にあいまい条件の判定を行う

        #region 備考１
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
        ///// <summary>
        ///// 備考１入力欄Leaveイベント
        ///// </summary>
        ///// <param name="sender"></param>
        ///// <param name="e"></param>
        //private void tEdit_SupplierSlipNote1_Leave(object sender, EventArgs e)
        //{
        //    // 入力値を取得
        //    string inputValue = this.tEdit_SupplierSlipNote1.Text.Trim();

        //    // 空でなければ処理開始
        //    if (!string.IsNullOrEmpty(inputValue))
        //    {
        //        // [*]が入っているかどうか調査
        //        int targetIndex = inputValue.IndexOf("*");
        //        int comboValue = 0;     // コンボボックスの値

        //        if (targetIndex == -1)
        //        {
        //            // [*]なし（「と一致」）
        //            comboValue = CT_FUZZY_MATCHWITH;
        //        }
        //        else if (inputValue.StartsWith("*") && inputValue.EndsWith("*"))
        //        {
        //            // [*]…[*]（「を含む」）
        //            comboValue = CT_FUZZY_INCLUDEWITH;
        //        }
        //        else if (inputValue.EndsWith("*"))
        //        {
        //            // …[*]（「で終る」）
        //            comboValue = CT_FUZZY_ENDWITH;
        //        }
        //        else if (inputValue.StartsWith("*"))
        //        {
        //            // [*]…（「で始る」）
        //            comboValue = CT_FUZZY_STARTWITH;
        //        }

        //        // 文字列整理
        //        this._srSupplierSlipNote1 = inputValue;                    // 検索文字列を保存
        //        this._srRvSupplierSlipNote1 = inputValue.Replace("*", ""); // [*]抜き文字列

        //        // 画面を更新（Leave時には*抜き文字列を表示）
        //        this.tEdit_SupplierSlipNote1.Text = this._srRvSupplierSlipNote1;
        //        this.tComboEditor_SupplierSlipNote1Fuzzy.Value = comboValue;       // コンボボックスを調整
        //    }
        //    else
        //    {
        //        // 2008.11.27 modify start [8274]
        //        // 空の時はクリア
        //        this._srSupplierSlipNote1 = string.Empty;
        //        this._srRvSupplierSlipNote1 = string.Empty;
        //        // 2008.11.27 modify end [8274]
        //    }
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL
        /// <summary>
        /// 備考１入力欄Enterイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_SlipNote_Enter(object sender, System.EventArgs e)
        {
            // 編集開始時に[*]入りの備考１が保存されていれば置き換え
            // 2008.11.27 modify start [8274]
            if (!String.IsNullOrEmpty(this._srSupplierSlipNote1) && this._srSupplierSlipNote1.IndexOf("*") > -1)
            // 2008.11.27 modify end [8274]
            {
                this.tEdit_SupplierSlipNote1.Text = this._srSupplierSlipNote1;
            }
        }

        #endregion // 備考１

        #region 備考２
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
        ///// <summary>
        ///// 備考２入力欄Leaveイベント
        ///// </summary>
        ///// <param name="sender"></param>
        ///// <param name="e"></param>
        //private void tEdit_SupplierSlipNote2_Leave(object sender, EventArgs e)
        //{
        //    // 入力値を取得
        //    string inputValue = this.tEdit_SupplierSlipNote2.Text.Trim();

        //    // 空でなければ処理開始
        //    if (!string.IsNullOrEmpty(inputValue))
        //    {
        //        // [*]が入っているかどうか調査
        //        int targetIndex = inputValue.IndexOf("*");
        //        int comboValue = 0;     // コンボボックスの値

        //        if (targetIndex == -1)
        //        {
        //            // [*]なし（「と一致」）
        //            comboValue = CT_FUZZY_MATCHWITH;
        //        }
        //        else if (inputValue.StartsWith("*") && inputValue.EndsWith("*"))
        //        {
        //            // [*]…[*]（「を含む」）
        //            comboValue = CT_FUZZY_INCLUDEWITH;
        //        }
        //        else if (inputValue.EndsWith("*"))
        //        {
        //            // …[*]（「で終る」）
        //            comboValue = CT_FUZZY_ENDWITH;
        //        }
        //        else if (inputValue.StartsWith("*"))
        //        {
        //            // [*]…（「で始る」）
        //            comboValue = CT_FUZZY_STARTWITH;
        //        }

        //        // 文字列整理
        //        this._srSupplierSlipNote2 = inputValue;                    // 検索文字列を保存
        //        this._srRvSupplierSlipNote2 = inputValue.Replace("*", ""); // [*]抜き文字列

        //        // 画面を更新（Leave時には*抜き文字列を表示）
        //        this.tEdit_SupplierSlipNote2.Text = this._srRvSupplierSlipNote2;
        //        this.tComboEditor_SupplierSlipNote2Fuzzy.Value = comboValue;       // コンボボックスを調整
        //    }
        //    else
        //    {
        //        // 2008.11.27 modify start [8274]
        //        // 空の時はクリア
        //        this._srSupplierSlipNote2 = string.Empty;
        //        this._srRvSupplierSlipNote2 = string.Empty;
        //        // 2008.11.27 modify end [8274]
        //    }
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL

        /// <summary>
        /// 備考２入力欄Enterイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_SlipNote2_Enter(object sender, System.EventArgs e)
        {
            // 編集開始時に[*]入りの備考２が保存されていれば置き換え
            // 2008.11.27 modify start [8274]
            if (!String.IsNullOrEmpty(this._srSupplierSlipNote2) && this._srSupplierSlipNote2.IndexOf("*") > -1)
            // 2008.11.27 modify end [8274]
            {
                this.tEdit_SupplierSlipNote2.Text = this._srSupplierSlipNote2;
            }
        }

        #endregion // 備考２

        #region UOEリマーク1
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
        ///// <summary>
        ///// UOEリマーク１入力欄Leaveイベント
        ///// </summary>
        ///// <param name="sender"></param>
        ///// <param name="e"></param>
        //private void tEdit_UoeRemark1_Leave(object sender, EventArgs e)
        //{
        //    // 入力値を取得
        //    string inputValue = this.tEdit_UoeRemark1.Text.Trim();

        //    // 空でなければ処理開始
        //    if (!string.IsNullOrEmpty(inputValue))
        //    {
        //        // [*]が入っているかどうか調査
        //        int targetIndex = inputValue.IndexOf("*");
        //        int comboValue = 0;     // コンボボックスの値

        //        if (targetIndex == -1)
        //        {
        //            // [*]なし（「と一致」）
        //            comboValue = CT_FUZZY_MATCHWITH;
        //        }
        //        else if (inputValue.StartsWith("*") && inputValue.EndsWith("*"))
        //        {
        //            // [*]…[*]（「を含む」）
        //            comboValue = CT_FUZZY_INCLUDEWITH;
        //        }
        //        else if (inputValue.EndsWith("*"))
        //        {
        //            // …[*]（「で終る」）
        //            comboValue = CT_FUZZY_ENDWITH;
        //        }
        //        else if (inputValue.StartsWith("*"))
        //        {
        //            // [*]…（「で始る」）
        //            comboValue = CT_FUZZY_STARTWITH;
        //        }

        //        // 文字列整理
        //        this._srUOERemark1 = inputValue;                    // 検索文字列を保存
        //        this._srRvUOERemark1 = inputValue.Replace("*", ""); // [*]抜き文字列

        //        // 画面を更新（Leave時には*抜き文字列を表示）
        //        this.tEdit_UoeRemark1.Text = this._srRvUOERemark1;
        //        this.tComboEditor_UoeRemark1Fuzzy.Value = comboValue;       // コンボボックスを調整
        //    }
        //    else
        //    {
        //        // 2008.11.27 modify start [8274]
        //        // 空の時はクリア
        //        this._srUOERemark1 = string.Empty;
        //        this._srRvUOERemark1 = string.Empty;
        //        // 2008.11.27 modify end [8274]
        //    }
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL

        /// <summary>
        /// UOEリマーク１入力欄Enterイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_UoeRemark1_Enter(object sender, System.EventArgs e)
        {
            // 編集開始時に[*]入りのUOEリマーク１が保存されていれば置き換え
            if (!String.IsNullOrEmpty(this._srUOERemark1) && this._srUOERemark1.IndexOf("*") > -1)
            {
                this.tEdit_UoeRemark1.Text = this._srUOERemark1;
            }
        }

        #endregion // UOEリマーク1

        #region UOEリマーク2
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
        ///// <summary>
        ///// UOEリマーク2入力欄Leaveイベント
        ///// </summary>
        ///// <param name="sender"></param>
        ///// <param name="e"></param>
        //private void tEdit_UoeRemark2_Leave(object sender, EventArgs e)
        //{
        //    // 入力値を取得
        //    string inputValue = this.tEdit_UoeRemark2.Text.Trim();

        //    // 空でなければ処理開始
        //    if (!string.IsNullOrEmpty(inputValue))
        //    {
        //        // [*]が入っているかどうか調査
        //        int targetIndex = inputValue.IndexOf("*");
        //        int comboValue = 0;     // コンボボックスの値

        //        if (targetIndex == -1)
        //        {
        //            // [*]なし（「と一致」）
        //            comboValue = CT_FUZZY_MATCHWITH;
        //        }
        //        else if (inputValue.StartsWith("*") && inputValue.EndsWith("*"))
        //        {
        //            // [*]…[*]（「を含む」）
        //            comboValue = CT_FUZZY_INCLUDEWITH;
        //        }
        //        else if (inputValue.EndsWith("*"))
        //        {
        //            // …[*]（「で終る」）
        //            comboValue = CT_FUZZY_ENDWITH;
        //        }
        //        else if (inputValue.StartsWith("*"))
        //        {
        //            // [*]…（「で始る」）
        //            comboValue = CT_FUZZY_STARTWITH;
        //        }

        //        // 文字列整理
        //        this._srUOERemark2 = inputValue;                    // 検索文字列を保存
        //        this._srRvUOERemark2 = inputValue.Replace("*", ""); // [*]抜き文字列

        //        // 画面を更新（Leave時には*抜き文字列を表示）
        //        this.tEdit_UoeRemark2.Text = this._srRvUOERemark2;
        //        this.tComboEditor_UoeRemark2Fuzzy.Value = comboValue;       // コンボボックスを調整
        //    }
        //    else
        //    {
        //        // 2008.11.27 modify start [8274]
        //        // 空の時はクリア
        //        this._srUOERemark2 = string.Empty;
        //        this._srRvUOERemark2 = string.Empty;
        //        // 2008.11.27 modify end [8274]
        //    }
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL
        /// <summary>
        /// UOEリマーク２入力欄Enterイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_UoeRemark2_Enter(object sender, System.EventArgs e)
        {
            // 編集開始時に[*]入りのUOEリマーク１が保存されていれば置き換え
            if (!String.IsNullOrEmpty(this._srUOERemark2) && this._srUOERemark2.IndexOf("*") > -1)
            {
                this.tEdit_UoeRemark2.Text = this._srUOERemark2;
            }
        }

        #endregion // UOEリマーク2

        #region 品名
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
        ///// <summary>
        ///// 品名入力欄Leaveイベント
        ///// </summary>
        ///// <param name="sender"></param>
        ///// <param name="e"></param>
        //private void tEdit_GoodsName_Leave(object sender, EventArgs e)
        //{
        //    // 入力値を取得
        //    string inputValue = this.tEdit_GoodsName.Text.Trim();

        //    // 空でなければ処理開始
        //    if (!string.IsNullOrEmpty(inputValue))
        //    {
        //        // [*]が入っているかどうか調査
        //        int targetIndex = inputValue.IndexOf("*");
        //        int comboValue = 0;     // コンボボックスの値

        //        if (targetIndex == -1)
        //        {
        //            // [*]なし（「と一致」）
        //            comboValue = CT_FUZZY_MATCHWITH;
        //        }
        //        else if (inputValue.StartsWith("*") && inputValue.EndsWith("*"))
        //        {
        //            // [*]…[*]（「を含む」）
        //            comboValue = CT_FUZZY_INCLUDEWITH;
        //        }
        //        else if (inputValue.EndsWith("*"))
        //        {
        //            // …[*]（「で終る」）
        //            comboValue = CT_FUZZY_ENDWITH;
        //        }
        //        else if (inputValue.StartsWith("*"))
        //        {
        //            // [*]…（「で始る」）
        //            comboValue = CT_FUZZY_STARTWITH;
        //        }

        //        // 文字列整理
        //        this._srGoodsName = inputValue;                    // 検索文字列を保存
        //        this._srRvGoodsName = inputValue.Replace("*", ""); // [*]抜き文字列

        //        // 画面を更新（Leave時には*抜き文字列を表示）
        //        this.tEdit_GoodsName.Text = this._srRvGoodsName;
        //        this.tComboEditor_GoodsNameFuzzy.Value = comboValue;       // コンボボックスを調整
        //    }
        //    else
        //    {
        //        // 2008.11.27 modify start [8274]
        //        // 空の時はクリア
        //        this._srGoodsName = string.Empty;
        //        this._srRvGoodsName = string.Empty;
        //        // 2008.11.27 modify end [8274]
        //    }
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL

        /// <summary>
        /// 品名入力欄Enterイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_GoodsName_Enter(object sender, System.EventArgs e)
        {
            // 編集開始時に[*]入りの品名が保存されていれば置き換え
            if (!String.IsNullOrEmpty(this._srGoodsName) && this._srGoodsName.IndexOf("*") > -1)
            {
                this.tEdit_GoodsName.Text = this._srGoodsName;
            }
        }

        #endregion // 品名

        #region 品番
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
        ///// <summary>
        ///// 品番入力欄Leaveイベント
        ///// </summary>
        ///// <param name="sender"></param>
        ///// <param name="e"></param>
        //private void tEdit_GoodsNo_Leave(object sender, EventArgs e)
        //{
        //    // 入力値を取得
        //    string inputValue = this.tEdit_GoodsNo.Text.Trim();

        //    // 空でなければ処理開始
        //    if (!string.IsNullOrEmpty(inputValue))
        //    {
        //        // [*]が入っているかどうか調査
        //        int targetIndex = inputValue.IndexOf("*");
        //        int comboValue = 0;     // コンボボックスの値

        //        if (targetIndex == -1)
        //        {
        //            // [*]なし（「と一致」）
        //            comboValue = CT_FUZZY_MATCHWITH;
        //        }
        //        else if (inputValue.StartsWith("*") && inputValue.EndsWith("*"))
        //        {
        //            // [*]…[*]（「を含む」）
        //            comboValue = CT_FUZZY_INCLUDEWITH;
        //        }
        //        else if (inputValue.EndsWith("*"))
        //        {
        //            // …[*]（「で終る」）
        //            comboValue = CT_FUZZY_ENDWITH;
        //        }
        //        else if (inputValue.StartsWith("*"))
        //        {
        //            // [*]…（「で始る」）
        //            comboValue = CT_FUZZY_STARTWITH;
        //        }

        //        // 文字列整理
        //        this._srGoodsNo = inputValue;                    // 検索文字列を保存
        //        this._srRvGoodsNo = inputValue.Replace("*", ""); // [*]抜き文字列

        //        // 画面を更新（Leave時には*抜き文字列を表示）
        //        this.tEdit_GoodsNo.Text = this._srRvGoodsNo;
        //        this.tComboEditor_GoodsNoFuzzy.Value = comboValue;       // コンボボックスを調整
        //    }
        //    else
        //    {
        //        // 2008.11.27 modify start [8274]
        //        // 空の時はクリア
        //        this._srGoodsNo = string.Empty;
        //        this._srRvGoodsNo = string.Empty;
        //        // 2008.11.27 modify end [8274]
        //    }
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL
        /// <summary>
        /// 品番入力欄Enterイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_GoodsNo_Enter(object sender, System.EventArgs e)
        {
            // 編集開始時に[*]入りの品番が保存されていれば置き換え
            if (!String.IsNullOrEmpty(this._srGoodsNo) && this._srGoodsNo.IndexOf("*") > -1)
            {
                this.tEdit_GoodsNo.Text = this._srGoodsNo;
            }
        }

        #endregion // 品番

        #region 削除指定区分

        /// <summary>
        /// 削除指定区分Leaveイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tComboEditor_DeleteFlag_Leave(object sender, EventArgs e)
        {
            // 削除区分を保存(初期値は0)
            this._logicalDelDiv = (int)this.tComboEditor_DeleteFlag.SelectedItem.DataValue;
        }

        /// <summary>
        /// 削除指定区分Enterイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tComboEditor_DeleteFlag_Enter(object sender, System.EventArgs e)
        {
            // 削除区分を設定
            this.tComboEditor_DeleteFlag.Value = this._logicalDelDiv;
        }

        #endregion // 削除指定区分

        #endregion // 入力欄イベント

        #region 拡張検索条件チェックボックスペイン縮小イベント

        /// <summary>
        /// 拡張検索条件の表示設定用ペインが非表示になったタイミングでのイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>このタイミングでチェックボックスを設定を取得し、表示項目を調整する</remarks>
        void ultraDockManager_PaneHidden(object sender, Infragistics.Win.UltraWinDock.PaneHiddenEventArgs e)
        {
            // 画面の更新を停止
            this.SuspendLayout();

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
            DisplayExtraConditions();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

            // 画面更新を再開
            this.ResumeLayout();
        }

        /// <summary>
        /// 詳細条件の表示
        /// </summary>
        /// <br>Update Note: 2013/01/11 田建委</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33833 初期起動時の伝票区分のデフォルト値を「仕入／仕入返品」にするように修正</br>
        private void DisplayExtraConditions()
        {
            int displayedItemCount = 0;     // 表示されている検索条件の項目数

            // 全ての項目をHiddenに
            SetAllDetailSearchCondition2Hidden();

            this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
            this._currentLocationY = CT_INITIAL_FIELD_POSITION_Y;
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
            _gridUpKeyBackControl = null;
            int tabIndex = 0;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

            // チェックボックスの設定をすべて取得、チェックがついている項目を表示
            // タグで一括管理しようかとも考えたが少し無理が出てきそうなので直接管理

            #region 伝票区分
            // 伝票区分
            if ( this.uCheckSalesSlipCd.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tComboEditor_StockSlipCd;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // 伝票区分ラベル
                this.uLabel_StockSlipCdTitle.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_StockSlipCdTitle.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // 伝票区分コンボボックス
                this.tComboEditor_StockSlipCd.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tComboEditor_StockSlipCd.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                this.tComboEditor_StockSlipCd.Width = CT_INTERVAL_COMBOBOX;
                this.tComboEditor_StockSlipCd.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD
                this._currentLocationX += CT_INTERVAL_COMBOBOX + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this._suppPrtPpr.SupplierFormal = null;
                this._suppPrtPpr.SupplierSlipCd = null;
                this._suppPrtPpr.SearchType = 0;

                this.tComboEditor_StockSlipCd.SelectedIndex = 1; // ADD 2013/01/11 田建委 Redmine#33833
            }
            #endregion // 伝票区分

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 ADD
            # region 値引区分
            // 値引区分
            if ( this.uCheckStockSlipCdDtl.Checked )
            {
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tComboEditor_StockSlipCdDtl;
                }

                // 値引区分ラベル
                this.uLabel_StockSlipCdDtl.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_StockSlipCdDtl.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // 値引区分コンボボックス
                this.tComboEditor_StockSlipCdDtl.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tComboEditor_StockSlipCdDtl.Visible = true;
                this.tComboEditor_StockSlipCdDtl.Width = CT_INTERVAL_COMBOBOX;
                this.tComboEditor_StockSlipCdDtl.TabIndex = tabIndex++;
                this._currentLocationX += CT_INTERVAL_COMBOBOX + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this._suppPrtPpr.StockSlipCdDtl = 0;
            }
            # endregion
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 ADD

            #region 伝票番号
            // 伝票番号
            if ( this.uCheckPartySalesSlipNum.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tEdit_PartySalesSlipNum;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // 伝票番号ラベル
                this.uLabel_PartySalesSlipNumTitle.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_PartySalesSlipNumTitle.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // 伝票番号tEdit
                this.tEdit_PartySalesSlipNum.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tEdit_PartySalesSlipNum.Visible = true;
                this.tEdit_PartySalesSlipNum.Width = CT_INTERVAL_EDIT_WITHCOMBO - 4;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tEdit_PartySalesSlipNum.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_EDIT_WITHCOMBO;

                // 伝票番号曖昧検索
                this.tComboEditor_PartySalesSlipNumFuzzy.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tComboEditor_PartySalesSlipNumFuzzy.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tComboEditor_PartySalesSlipNumFuzzy.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_FUZZYCOMBO + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tEdit_PartySalesSlipNum.Clear();
                this.tComboEditor_PartySalesSlipNumFuzzy.SelectedIndex = 0;
                this._suppPrtPpr.PartySaleSlipNum = string.Empty;
                this._srPartySalesSlipNum = string.Empty;
                this._srRvPartySalesSlipNum = string.Empty;
            }
            #endregion // 伝票番号

            #region 仕入SEQ/支払No
            // 仕入SEQ/支払No
            if ( this.uCheckPaymentSlipNo.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tNedit_PaymentSlipNo;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // 仕入SEQ/支払Noラベル
                this.uLabel_PaymentSlipNoTitle.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_PaymentSlipNoTitle.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // 仕入SEQ/支払NotNedit
                this.tNedit_PaymentSlipNo.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tNedit_PaymentSlipNo.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tNedit_PaymentSlipNo.Width = CT_INTERVAL_EDIT /*- 4*/ - uLabel_PaymentSlipNoFooter.Width;
                this.tNedit_PaymentSlipNo.TabIndex = tabIndex++;
                this._currentLocationX += this.tNedit_PaymentSlipNo.Width;

                // 仕入SEQ/支払Noフッタラベル
                this.uLabel_PaymentSlipNoFooter.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_PaymentSlipNoFooter.Visible = true;
                this._currentLocationX += uLabel_PaymentSlipNoFooter.Width + CT_FIELD_INTERVAL_X;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                //this._currentLocationX += CT_INTERVAL_EDIT + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tNedit_PaymentSlipNo.Clear();
                this._suppPrtPpr.PaymentSlipNo = 0;
            }
            #endregion // 仕入SEQ/支払No

            #region 担当者
            // 担当者
            if ( this.uCheckSalesEmployeeCd.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tEdit_StockAgentCodeInput;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // 担当者ラベル
                this.uLabel_StockAgentCodeTitle.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_StockAgentCodeTitle.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // 担当者tEdit
                this.tEdit_StockAgentCodeInput.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tEdit_StockAgentCodeInput.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tEdit_StockAgentCodeInput.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this.tEdit_StockAgentCodeInput.Width = CT_INTERVAL_EDIT_WITHBUTTON - 4;
                this._currentLocationX += CT_INTERVAL_EDIT_WITHBUTTON;

                // 担当者ガイドボタン
                this.uButton_StockAgentCode.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uButton_StockAgentCode.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.uButton_StockAgentCode.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_BUTTON + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tEdit_StockAgentCodeInput.Clear();
                this._suppPrtPpr.StockAgentCode = string.Empty;
                this._swStockAgentCode = string.Empty;
                this._swStockAgentName = string.Empty;
            }
            #endregion // 担当者

            #region 発行者
            // 発行者
            // 2008.12.05 del start [8726]
            //if (this.uCheckSalesInputCode.Checked)
            //{
            //    // 発行者ラベル
            //    this.uLabel_StockInputCodeTitle.Location = new Point(this._currentLocationX, this._currentLocationY);
            //    this.uLabel_StockInputCodeTitle.Visible = true;
            //    this._currentLocationX += CT_INTERVAL_LABEL;

            //    // 発行者tEdit
            //    this.tEdit_StockInputCode.Location = new Point(this._currentLocationX, this._currentLocationY);
            //    this.tEdit_StockInputCode.Visible = true;
            //    this.tEdit_StockInputCode.Width = CT_INTERVAL_EDIT_WITHBUTTON - 4;
            //    this._currentLocationX += CT_INTERVAL_EDIT_WITHBUTTON;

            //    // 発行者ガイドボタン
            //    this.uButton_StockInputCode.Location = new Point(this._currentLocationX, this._currentLocationY);
            //    this.uButton_StockInputCode.Visible = true;
            //    this._currentLocationX += CT_INTERVAL_BUTTON + CT_FIELD_INTERVAL_X;

            //    displayedItemCount++;
            //    if (displayedItemCount % CT_INITIAL_ROW_COUNT == 0)
            //    {
            //        this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
            //        this._currentLocationY += CT_INTERVAL_HEIGHT;
            //    }
            //}
            //else
            //{
            //    // チェックがなければ既に設定された条件をすべて廃棄
            //    this.tEdit_StockInputCode.Clear();
            //    this._suppPrtPpr.StockInputCode = string.Empty;
            //    this._swStockInputCode = string.Empty;
            //    this._swStockInputName = string.Empty;
            //}
            // 2008.12.05 del end [8726]
            #endregion // 発行者

            #region UOE送信
            // UOE送信
            if ( this.uCheckDataSendCode.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tComboEditor_DataSendCode;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // UOE送信ラベル
                this.uLabel_DataSendCodeTitle.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_DataSendCodeTitle.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // UOE送信コンボボックス
                this.tComboEditor_DataSendCode.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tComboEditor_DataSendCode.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                this.tComboEditor_DataSendCode.Width = CT_INTERVAL_COMBOBOX;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tComboEditor_DataSendCode.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_COMBOBOX + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tComboEditor_DataSendCode.SelectedIndex = 0;
                this._suppPrtPpr.WayToOrder = 0;
            }
            #endregion // UOE送信

            #region 備考１
            // 備考１
            if ( this.uCheckSlipNote.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tEdit_SupplierSlipNote1;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // 備考１ラベル
                this.uLabel_SupplierSlipNote1Title.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_SupplierSlipNote1Title.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // 備考１tEdit
                this.tEdit_SupplierSlipNote1.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tEdit_SupplierSlipNote1.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                //this.tEdit_SupplierSlipNote1.Width = CT_INTERVAL_EDIT_WITHCOMBOBUTTON - 4;
                //this._currentLocationX += CT_INTERVAL_EDIT_WITHCOMBOBUTTON;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                this.tEdit_SupplierSlipNote1.Width = 100;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tEdit_SupplierSlipNote1.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += 100 + 1;
                // 備考１ガイド
                this.uButton_SupplierSlipNote1.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uButton_SupplierSlipNote1.Visible = true;
                this._currentLocationX += 24 + 1;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                //// 備考１ボタン
                //this.uButton_SupplierSlipNote1.Location = new Point( this._currentLocationX, this._currentLocationY );
                //this.uButton_SupplierSlipNote1.Visible = true;
                //this._currentLocationX += CT_INTERVAL_BUTTON;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.uButton_SupplierSlipNote1.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD

                // 備考１曖昧検索
                this.tComboEditor_SupplierSlipNote1Fuzzy.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tComboEditor_SupplierSlipNote1Fuzzy.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                //this._currentLocationX += CT_INTERVAL_FUZZYCOMBO + CT_FIELD_INTERVAL_X;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tComboEditor_SupplierSlipNote1Fuzzy.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                this._currentLocationX += CT_INTERVAL_FUZZYCOMBO + CT_FIELD_INTERVAL_X - 2;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tEdit_SupplierSlipNote1.Clear();
                this.tComboEditor_SupplierSlipNote1Fuzzy.SelectedIndex = 0;
                this._suppPrtPpr.SupplierSlipNote1 = string.Empty;
                this._srSupplierSlipNote1 = string.Empty;
                this._srRvSupplierSlipNote1 = string.Empty;
            }
            #endregion // 備考１

            #region 備考２
            // 備考２
            if ( this.uCheckSlipNote2.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tEdit_SupplierSlipNote2;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // 備考２ラベル
                this.uLabel_SupplierSlipNote2Title.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_SupplierSlipNote2Title.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // 備考２tEdit
                this.tEdit_SupplierSlipNote2.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tEdit_SupplierSlipNote2.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                //this.tEdit_SupplierSlipNote2.Width = CT_INTERVAL_EDIT_WITHCOMBOBUTTON - 4;
                //this._currentLocationX += CT_INTERVAL_EDIT_WITHCOMBOBUTTON;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                this.tEdit_SupplierSlipNote2.Width = 100;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tEdit_SupplierSlipNote2.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += 100 + 1;
                // 備考２ガイド
                this.uButton_SupplierSlipNote2.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uButton_SupplierSlipNote2.Visible = true;
                this._currentLocationX += 24 + 1;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                //// 備考２ボタン
                //this.uButton_SupplierSlipNote2.Location = new Point( this._currentLocationX, this._currentLocationY );
                //this.uButton_SupplierSlipNote2.Visible = true;
                //this._currentLocationX += CT_INTERVAL_BUTTON;
                //this._currentLocationX += CT_INTERVAL_FUZZYCOMBO + CT_FIELD_INTERVAL_X - 2;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.uButton_SupplierSlipNote2.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD

                // 備考２曖昧検索
                this.tComboEditor_SupplierSlipNote2Fuzzy.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tComboEditor_SupplierSlipNote2Fuzzy.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                //this._currentLocationX += CT_INTERVAL_FUZZYCOMBO + CT_FIELD_INTERVAL_X;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                this._currentLocationX += CT_INTERVAL_FUZZYCOMBO + CT_FIELD_INTERVAL_X - 2;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tComboEditor_SupplierSlipNote2Fuzzy.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tEdit_SupplierSlipNote2.Clear();
                this.tComboEditor_SupplierSlipNote2Fuzzy.SelectedIndex = 0;
                this._suppPrtPpr.SupplierSlipNote2 = string.Empty;
                this._srSupplierSlipNote2 = string.Empty;
                this._srRvSupplierSlipNote2 = string.Empty;
            }
            #endregion // 備考２

            #region UOEリマーク1
            // UOEリマーク1
            if ( this.uCheckUoeRemark1.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tEdit_UoeRemark1;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // UOEリマーク1ラベル
                this.uLabel_UoeRemark1Title.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_UoeRemark1Title.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // UOEリマーク1tEdit
                this.tEdit_UoeRemark1.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tEdit_UoeRemark1.Visible = true;
                this.tEdit_UoeRemark1.Width = CT_INTERVAL_EDIT_WITHCOMBO - 4;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tEdit_UoeRemark1.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_EDIT_WITHCOMBO;

                // UOEリマーク1曖昧検索
                this.tComboEditor_UoeRemark1Fuzzy.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tComboEditor_UoeRemark1Fuzzy.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tComboEditor_UoeRemark1Fuzzy.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_FUZZYCOMBO + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tEdit_UoeRemark1.Clear();
                this.tComboEditor_UoeRemark1Fuzzy.SelectedIndex = 0;
                this._suppPrtPpr.UoeRemark1 = string.Empty;
                this._srUOERemark1 = string.Empty;
                this._srRvUOERemark1 = string.Empty;
            }
            #endregion // UOEリマーク1

            #region UOEリマーク2
            // UOEリマーク2
            if ( this.uCheckUoeRemark2.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tEdit_UoeRemark2;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // UOEリマーク2ラベル
                this.uLabel_UoeRemark2Title.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_UoeRemark2Title.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // UOEリマーク2tEdit
                this.tEdit_UoeRemark2.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tEdit_UoeRemark2.Visible = true;
                this.tEdit_UoeRemark2.Width = CT_INTERVAL_EDIT_WITHCOMBO - 4;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tEdit_UoeRemark2.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_EDIT_WITHCOMBO;

                // UOEリマーク2曖昧検索
                this.tComboEditor_UoeRemark2Fuzzy.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tComboEditor_UoeRemark2Fuzzy.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tComboEditor_UoeRemark2Fuzzy.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_FUZZYCOMBO + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tEdit_UoeRemark2.Clear();
                this.tComboEditor_UoeRemark2Fuzzy.SelectedIndex = 0;
                this._suppPrtPpr.UoeRemark2 = string.Empty;
                this._srUOERemark2 = string.Empty;
                this._srRvUOERemark2 = string.Empty;
            }
            #endregion // UOEリマーク2

            #region BLグループ
            // BLグループ
            if ( this.uCheckBLGroupCode.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tEdit_BlGroupCodeInput;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // BLグループラベル
                this.uLabel_BlGroupCodeTitle.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_BlGroupCodeTitle.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // BLグループtEdit
                this.tEdit_BlGroupCodeInput.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tEdit_BlGroupCodeInput.Visible = true;
                this.tEdit_BlGroupCodeInput.Width = CT_INTERVAL_EDIT_WITHBUTTON - 4;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tEdit_BlGroupCodeInput.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_EDIT_WITHBUTTON;

                // BLグループガイドボタン
                this.uButton_BlGroupCode.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uButton_BlGroupCode.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.uButton_BlGroupCode.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_BUTTON + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tEdit_BlGroupCodeInput.Clear();
                this._suppPrtPpr.BLGroupCode = 0;
                this._swBLGroupCode = 0;
                this._swBLGroupName = string.Empty;
            }
            #endregion // BLグループ

            #region BLコード
            // BLコード
            if ( this.uCheckBLGoodsCode.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tEdit_BlGoodsCodeInput;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // BLコードラベル
                this.uLabel_BlGoodsCodeTitle.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_BlGoodsCodeTitle.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // BLコードtEdit
                this.tEdit_BlGoodsCodeInput.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tEdit_BlGoodsCodeInput.Visible = true;
                this.tEdit_BlGoodsCodeInput.Width = CT_INTERVAL_EDIT_WITHBUTTON - 4;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tEdit_BlGoodsCodeInput.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_EDIT_WITHBUTTON;

                // BLコードガイドボタン
                this.uButton_BlGoodsCode.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uButton_BlGoodsCode.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.uButton_BlGoodsCode.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_BUTTON + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tEdit_BlGoodsCodeInput.Clear();
                this._suppPrtPpr.BLGoodsCode = 0;
                this._suppPrtPpr.BLGoodsName = string.Empty;
                this._swBLGoodsCode = 0;
                this._swBLGoodsName = string.Empty;
            }
            #endregion // BLコード

            #region 品名
            // 品名
            if ( this.uCheckGoodsName.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tEdit_GoodsName;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // 品名ラベル
                this.uLabel_GoodsNameTitle.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_GoodsNameTitle.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // 品名tEdit
                this.tEdit_GoodsName.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tEdit_GoodsName.Visible = true;
                this.tEdit_GoodsName.Width = CT_INTERVAL_EDIT_WITHCOMBO - 4;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tEdit_GoodsName.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_EDIT_WITHCOMBO;

                // 品名曖昧検索
                this.tComboEditor_GoodsNameFuzzy.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tComboEditor_GoodsNameFuzzy.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tComboEditor_GoodsNameFuzzy.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_FUZZYCOMBO + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tEdit_GoodsName.Clear();
                this._suppPrtPpr.GoodsName = string.Empty;
                this._srGoodsName = string.Empty;
                this._srRvGoodsName = string.Empty;
            }
            #endregion // 品名

            #region 品番
            // 品番
            if ( this.uCheckGoodsNo.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tEdit_GoodsNo;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // 品番ラベル
                this.uLabel_GoodsNoTitle.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_GoodsNoTitle.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // 品番tEdit
                this.tEdit_GoodsNo.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tEdit_GoodsNo.Visible = true;
                this.tEdit_GoodsNo.Width = CT_INTERVAL_EDIT_WITHCOMBO - 4;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tEdit_GoodsNo.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_EDIT_WITHCOMBO;

                // 品番曖昧検索
                this.tComboEditor_GoodsNoFuzzy.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tComboEditor_GoodsNoFuzzy.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tComboEditor_GoodsNoFuzzy.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_FUZZYCOMBO + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tEdit_GoodsNo.Clear();
                this._suppPrtPpr.GoodsNo = string.Empty;
                this._srGoodsNo = string.Empty;
                this._srRvGoodsNo = string.Empty;
            }
            #endregion // 品番

            #region メーカー
            // メーカー
            if ( this.uCheckGoodsMakerCd.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tEdit_MakerCdInput;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // メーカーラベル
                this.uLabel_MakerCdTitle.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_MakerCdTitle.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // メーカーtEdit
                this.tEdit_MakerCdInput.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tEdit_MakerCdInput.Visible = true;
                this.tEdit_MakerCdInput.Width = CT_INTERVAL_EDIT_WITHBUTTON - 4;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tEdit_MakerCdInput.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_EDIT_WITHBUTTON;

                // メーカーガイドボタン
                this.uButton_MakerCd.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uButton_MakerCd.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.uButton_MakerCd.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_BUTTON + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tEdit_MakerCdInput.Clear();
                this._suppPrtPpr.GoodsMakerCd = 0;
                this._swGoodsMakerCd = 0;
                this._swGoodsMakerName = string.Empty;
            }
            #endregion // メーカー

            #region 在庫取寄区分
            // 在庫取寄区分
            if ( this.uCheckSalesOrderDivCd.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tComboEditor_StockOrderDivCd;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // 在庫取寄区分ラベル
                this.uLabel_StockOrderDivCdTitle.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_StockOrderDivCdTitle.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // 在庫取寄区分コンボボックス
                this.tComboEditor_StockOrderDivCd.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tComboEditor_StockOrderDivCd.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                this.tComboEditor_StockOrderDivCd.Width = CT_INTERVAL_COMBOBOX;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tComboEditor_StockOrderDivCd.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_COMBOBOX + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tComboEditor_StockOrderDivCd.SelectedIndex = 0;
                this._suppPrtPpr.StockOrderDivCd = 0;
            }
            #endregion // 在庫取寄区分

            #region 倉庫
            // 倉庫
            if ( this.uCheckWarehouseCode.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tEdit_WarehouseCdInput;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // 倉庫ラベル
                this.uLabel_WarehouseCodeTitle.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_WarehouseCodeTitle.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // 倉庫tEdit
                this.tEdit_WarehouseCdInput.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tEdit_WarehouseCdInput.Visible = true;
                this.tEdit_WarehouseCdInput.Width = CT_INTERVAL_EDIT_WITHBUTTON - 4;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tEdit_WarehouseCdInput.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_EDIT_WITHBUTTON;

                // 倉庫ガイドボタン
                this.uButton_WarehouseCd.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uButton_WarehouseCd.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.uButton_WarehouseCd.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_BUTTON + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tEdit_WarehouseCdInput.Clear();
                this._suppPrtPpr.WarehouseCode = string.Empty;
                this._suppPrtPpr.WarehouseName = string.Empty;
                this._swWarehouseCd = string.Empty;
                this._swWarehouseName = string.Empty;
            }
            #endregion // 倉庫

            #region 削除指定区分
            // 削除指定区分
            if ( this.uCheckDeleteFlag.Checked )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._gridUpKeyBackControl = tComboEditor_DeleteFlag;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

                // 削除指定区分ラベル
                this.uLabel_DeleteFlagTitle.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.uLabel_DeleteFlagTitle.Visible = true;
                this._currentLocationX += CT_INTERVAL_LABEL;

                // 削除指定区分コンボボックス
                this.tComboEditor_DeleteFlag.Location = new Point( this._currentLocationX, this._currentLocationY );
                this.tComboEditor_DeleteFlag.Visible = true;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
                this.tComboEditor_DeleteFlag.Width = CT_INTERVAL_COMBOBOX;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                this.tComboEditor_DeleteFlag.TabIndex = tabIndex++;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                this._currentLocationX += CT_INTERVAL_COMBOBOX + CT_FIELD_INTERVAL_X;

                displayedItemCount++;
                if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 )
                {
                    this._currentLocationX = CT_INITIAL_FIELD_POSITION_X;
                    this._currentLocationY += CT_INTERVAL_HEIGHT;
                }
            }
            else
            {
                // チェックがなければ既に設定された条件をすべて廃棄
                this.tComboEditor_DeleteFlag.SelectedIndex = 0;
            }
            #endregion // 削除指定区分

            // 拡張検索条件エリアの表示/非表示を設定
            if ( displayedItemCount > 0 )
            {
                // 一つでも項目がチェックされていれば表示
                this.uExGroupBox_ExtraCondition.Visible = true;
            }
            else
            {
                // 項目が一つもチェックされていなければ非表示
                this.uExGroupBox_ExtraCondition.Visible = false;
            }

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //// 展開していなければ展開
            //if ( !this.uExGroupBox_ExtraCondition.Expanded ) this.uExGroupBox_ExtraCondition.Expanded = true;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL

            // 拡張検索条件エリアの高さを計算
            if ( displayedItemCount % CT_INITIAL_ROW_COUNT == 0 ) this._currentLocationY -= CT_INTERVAL_HEIGHT;  // 項目数が3の倍数個の時は改行されているので改行を削除
            this.uExGroupBox_ExtraCondition.Height = this._currentLocationY + CT_INTERVAL_HEIGHT + CT_INTERVAL_HEIGHT;
        }

        #endregion // 拡張検索条件チェックボックスペイン縮小イベント

        #region タブ切替時イベント

        /// <summary>
        /// タブ切替時イベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>UpdateNote : 2010/07/20 chenyd</br>
        /// <br>           　テキスト出力対応</br> 
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 返品計上タブ処理追加</br>
        /// <br>                             選択行を明細タブと伝票タブでリンクするように修正</br>
        /// </remarks>
        void uTabControl_SelectedTabChanged(object sender, Infragistics.Win.UltraWinTabControl.SelectedTabChangedEventArgs e)
        {
            // どのタブが選択されているか取得
            string tabKey = e.Tab.Key.ToString();
            switch (tabKey)
            {
                case "uTab_SlipList":
                    {
                        this._selectedMainTabKey = "uTab_SlipList";
                        this.uCheckEditor_StatusBar_AutoFillToGridColumn.Checked = this._columnWidthAutoAdjust_Slip;
                        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                        // 明細タブで１伝票のみ選択されていた場合
                        if (this.uGrid_Detail.ActiveRow != null && this.uGrid_Detail.ActiveCell == null)
                        {
                            ClearSlipActiveRow();
                            LinkDetailToSlip(this.uGrid_Detail.ActiveRow);

                        }
                        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                        autoColumnAdjust(this._columnWidthAutoAdjust_Slip, 0);
                        adjustButtonEnable(0);
                        adjustStatusBarCellExample(true);
                        setToolbarSearchSurface();  // 行検索ツールバーのプルダウン再設定
                        // --- ADD 2012/09/13 ---------->>>>>
                        if (_opt_SupplierSummary == (int)Option.ON)
                        {
                            uLabel_PayeeTitle.Visible = false;
                            tNedit_PayeeCode.Visible = false;
                            uLabel_PayeeName.Visible = false;
                            uButton_PayeeGuide.Visible = false;
                        }
                        // --- ADD 2012/09/13 ----------<<<<<
                        break;
                    }
                case "uTab_SlipDetail":
                    {
                        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                        // 伝票タブで１伝票のみ選択されていた場合
                        if (this.uGrid_Slip.ActiveRow != null && this.uGrid_Slip.ActiveCell == null)
                        {
                            ClearSlipDetailActiveRow();
                            LinkSlipToDetail(this.uGrid_Slip.ActiveRow);
                        }
                        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

                        this._selectedMainTabKey = "uTab_SlipDetail";
                        this.uCheckEditor_StatusBar_AutoFillToGridColumn.Checked = this._columnWidthAutoAdjust_Detail;

                        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                        this._selectedRowCountSlip = this._detailDataSet.StcList.Select("Selection = true").Length;
                        if (e.PreviousSelectedTab.Key.ToString() == "uTab_SlipList" && this._selectedRowCountSlip > 0)
                        {
                            ClearRedSlipInput();
                        }
                        // ClearRedSlipInput()で_selectedRowCountSlipがクリアされてしまうので再度、選択件数を取得する
                        this._selectedRowCountSlip = this._detailDataSet.StcList.Select("Selection = true").Length;
                        if (e.PreviousSelectedTab.Key.ToString() == "uTab_SlipList" && this._selectedRowCountSlip == 1)
                        {
                            tabFlg = false;
                            SelectAllDetailFromSelectedSlip();
                            tabFlg = true;
                        }
                        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

                        autoColumnAdjust(this._columnWidthAutoAdjust_Detail, 1);
                        adjustButtonEnable(1);
                        adjustStatusBarCellExample(true);
                        setToolbarSearchSurface();  // 行検索ツールバーのプルダウン再設定
                        // --- ADD 2012/09/13 ---------->>>>>
                        if (_opt_SupplierSummary == (int)Option.ON)
                        {
                            uLabel_PayeeTitle.Visible = false;
                            tNedit_PayeeCode.Visible = false;
                            uLabel_PayeeName.Visible = false;
                            uButton_PayeeGuide.Visible = false;
                        }
                        // --- ADD 2012/09/13 ----------<<<<<
                        break;
                    }
                case "uTab_RemainList":
                    {
                        /*---------------------- DEL 2010/07/20 --------------------------------->>>>>
                        // 選択不能フラグが立っていたら前に選択されていたタブへ
                        if (!this._remainTabSelectable)
                        {
                            e.PreviousSelectedTab.Selected = true; ;
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/17 ADD
                            TMsgDisp.Show(
                                this,
                                emErrorLevel.ERR_LEVEL_INFO,
                                this.Name,
                                "残高一覧を表示するには、仕入先コードまたは支払先コードを入力して下さい",
                                -1,
                                MessageBoxButtons.OK );
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/17 ADD
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                            if ( this.uExGroupBox_CommonCondition.Expanded )
                            {
                                this.tNedit_SupplierCd.Focus();
                                this.tNedit_SupplierCd.SelectAll();
                            }
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD
                        }
                        else
                        {
                        // ---------------------- DEL 2010/07/20 -----------------------------------<<<<<*/
                        this._selectedMainTabKey = "uTab_RemainList";
                        this.uCheckEditor_StatusBar_AutoFillToGridColumn.Checked = this._columnWidthAutoAdjust_Balance;
                        autoColumnAdjust(this._columnWidthAutoAdjust_Balance, 2);
                        adjustButtonEnable(2);
                        adjustStatusBarCellExample(false);
                        setToolbarSearchSurface();  // 行検索ツールバーのプルダウン再設定
                        //} // DEL 2010/07/20 
                        // --- ADD 2012/09/13 ---------->>>>>
                        if (_opt_SupplierSummary == (int)Option.ON)
                        {
                            uLabel_PayeeTitle.Visible = false;
                            tNedit_PayeeCode.Visible = false;
                            uLabel_PayeeName.Visible = false;
                            uButton_PayeeGuide.Visible = false;
                        }
                        // --- ADD 2012/09/13 ----------<<<<<
                        break;
                    }
                // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                case "uTab_RedSlip":
                    {
                        this._selectedMainTabKey = "uTab_RedSlip";
                        this.uCheckEditor_StatusBar_AutoFillToGridColumn.Checked = this._columnWidthAutoAdjust_RedSlip;
                        // 伝票一覧で選択された件数
                        this._selectedRowCountSlip = this._detailDataSet.StcList.Select("Selection = true").Length;
                        if (e.PreviousSelectedTab.Key.ToString() == "uTab_SlipList" && this._selectedRowCountSlip > 0)
                        {
                            ClearRedSlipInput();
                        }
                        // 1伝票だけ選択している場合は、選択伝票の全明細を選択状態にする
                        // ClearRedSlipInput()で_selectedRowCountSlipがクリアされてしまうので再度、選択件数を取得する
                        this._selectedRowCountSlip = this._detailDataSet.StcList.Select("Selection = true").Length;
                        if (e.PreviousSelectedTab.Key.ToString() == "uTab_SlipList" && this._selectedRowCountSlip == 1)
                        {
                            tabFlg = false;
                            SelectAllDetailFromSelectedSlip();
                            tabFlg = true;
                        }

                        autoColumnAdjust(this._columnWidthAutoAdjust_RedSlip, 3);
                        adjustButtonEnable(3);
                        adjustStatusBarCellExample(false);
                        setToolbarSearchSurface();  // 行検索ツールバーのプルダウン再設定

                        // 入力フォーム制御
                        SettingRedSlipFormalBySalesSlipCd();

                        // 初期表示チェック
                        if (this._suppPrtPpr.SectionCode == null || this._searchedStockRetGdsPln != 1)
                        {
                            TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                this.tEdit_SectionCodeAllowZero.Name,
                                "拠点コードが入力されていない、または、仕入返品データではないため、返品計上は出来ません。",
                                -1,
                                MessageBoxButtons.OK);

                            this.uTabControl.Tabs[e.PreviousSelectedTab.Key].Selected = true;
                            if (this._control != null)
                            {
                                this._control.Focus();
                                this._control = null;
                            }
                            else
                            {
                                // なし。
                            }
                            break;
                        }
                        else
                        {
                            // フォーカス
                            this.tComboEditor_rs_SalesSlipCd.Focus();
                        }
                        break;
                    }
                // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                default: break;
            }
        }

        /// <summary>
        /// ボタンの有効/無効切替
        /// </summary>
        /// <param name="tabIndex">0:伝票表示,1:明細表示,2:残高一覧,3:返品計上</param>
        /// <remarks>
        /// <br>UpdateNote : 2010/07/20 chenyd</br>
        /// <br>           　テキスト出力対応</br>
        /// <br>Update Note: 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>             [仕入返品計上] 返品計上タブ処理追加、削除・検索の制御追加</br>
        /// </remarks>
        private void adjustButtonEnable(int tabIndex)
        {
            switch (tabIndex)
            {
                #region 伝票一覧

                // 伝票一覧
                case 0:
                    {
                        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                        // 検索ボタン
                        this.tToolbarsManager.Tools["ButtonTool_Search"].SharedProps.Enabled = true;

                        // 返品計上ボタン
                        if (this._redSlipBottonFlag)
                        {
                            if (this._selectedRowCountSlip == 1)
                            {
                                this.tToolbarsManager.Tools["ButtonTool_IssueRedSlip"].SharedProps.Enabled = true;
                            }
                            else
                            {
                                this.tToolbarsManager.Tools["ButtonTool_IssueRedSlip"].SharedProps.Enabled = false;
                            }
                        }
                        else
                        {
                            this.tToolbarsManager.Tools["ButtonTool_IssueRedSlip"].SharedProps.Enabled = false;
                        }
                        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

                        if (this._detailDataSet != null && this._detailDataSet.StcList.Rows.Count > 0)
                        {
                            // 印刷
                            this.tToolbarsManager.Tools["ButtonTool_Print"].SharedProps.Enabled = true;
                            // PDF出力
                            this.tToolbarsManager.Tools["ButtonTool_PDF"].SharedProps.Enabled = true;
                            // テキスト出力
                            this.tToolbarsManager.Tools["ButtonTool_ExtractText"].SharedProps.Enabled = true;
                            // EXCEL出力
                            this.tToolbarsManager.Tools["ButtonTool_ExtractExcel"].SharedProps.Enabled = true;
                            // 行検索文字列
                            this.tToolbarsManager.Tools["TextBoxTool_SearchWord"].SharedProps.Enabled = true;
                            // 検索列
                            this.tToolbarsManager.Tools["ComboBoxTool_TargetColumn"].SharedProps.Enabled = true;
                            // 行検索ボタン
                            this.tToolbarsManager.Tools["ButtonTool_RowSearchStart"].SharedProps.Enabled = true;
                            // 削除ボタン
                            this.tToolbarsManager.Tools["ButtonTool_SlipDelete"].SharedProps.Enabled = true;  // ADD 2013/01/21 [返品計上]
                        }
                        else
                        {
                            // 印刷
                            this.tToolbarsManager.Tools["ButtonTool_Print"].SharedProps.Enabled = false;
                            // PDF出力
                            this.tToolbarsManager.Tools["ButtonTool_PDF"].SharedProps.Enabled = false;
                            // テキスト出力
                            this.tToolbarsManager.Tools["ButtonTool_ExtractText"].SharedProps.Enabled = false;
                            // EXCEL出力
                            this.tToolbarsManager.Tools["ButtonTool_ExtractExcel"].SharedProps.Enabled = false;
                            // 行検索文字列
                            this.tToolbarsManager.Tools["TextBoxTool_SearchWord"].SharedProps.Enabled = false;
                            // 検索列
                            this.tToolbarsManager.Tools["ComboBoxTool_TargetColumn"].SharedProps.Enabled = false;
                            // 行検索ボタン
                            this.tToolbarsManager.Tools["ButtonTool_RowSearchStart"].SharedProps.Enabled = false;
                            // 削除ボタン
                            this.tToolbarsManager.Tools["ButtonTool_SlipDelete"].SharedProps.Enabled = false;  // ADD 2013/01/21 [返品計上]
                        }

                        break;
                    }
                #endregion // 伝票一覧

                #region 明細一覧
                // 明細
                case 1:
                    {
                        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                        // 検索ボタン
                        this.tToolbarsManager.Tools["ButtonTool_Search"].SharedProps.Enabled = true;
                        // 削除ボタン
                        this.tToolbarsManager.Tools["ButtonTool_SlipDelete"].SharedProps.Enabled = false;
                        // 返品計上ボタン
                        if (this._redSlipBottonFlag)
                        {
                            if (this._selectedRowCountDetail > 0)
                            {
                                this.tToolbarsManager.Tools["ButtonTool_IssueRedSlip"].SharedProps.Enabled = true;
                            }
                            else
                            {
                                this.tToolbarsManager.Tools["ButtonTool_IssueRedSlip"].SharedProps.Enabled = false;
                            }
                        }
                        else
                        {
                            this.tToolbarsManager.Tools["ButtonTool_IssueRedSlip"].SharedProps.Enabled = false;
                        }
                        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

                        if (this._detailDataSet != null && this._detailDataSet.StcDetail.Rows.Count > 0)
                        {
                            // 印刷
                            this.tToolbarsManager.Tools["ButtonTool_Print"].SharedProps.Enabled = true;
                            // PDF出力
                            this.tToolbarsManager.Tools["ButtonTool_PDF"].SharedProps.Enabled = true;
                            // テキスト出力
                            this.tToolbarsManager.Tools["ButtonTool_ExtractText"].SharedProps.Enabled = true;
                            // EXCEL出力
                            this.tToolbarsManager.Tools["ButtonTool_ExtractExcel"].SharedProps.Enabled = true;
                            // 行検索文字列
                            this.tToolbarsManager.Tools["TextBoxTool_SearchWord"].SharedProps.Enabled = true;
                            // 検索列
                            this.tToolbarsManager.Tools["ComboBoxTool_TargetColumn"].SharedProps.Enabled = true;
                            // 行検索ボタン
                            this.tToolbarsManager.Tools["ButtonTool_RowSearchStart"].SharedProps.Enabled = true;
                        }
                        else
                        {
                            // 印刷
                            this.tToolbarsManager.Tools["ButtonTool_Print"].SharedProps.Enabled = false;
                            // PDF出力
                            this.tToolbarsManager.Tools["ButtonTool_PDF"].SharedProps.Enabled = false;
                            // テキスト出力
                            this.tToolbarsManager.Tools["ButtonTool_ExtractText"].SharedProps.Enabled = false;
                            // EXCEL出力
                            this.tToolbarsManager.Tools["ButtonTool_ExtractExcel"].SharedProps.Enabled = false;
                            // 行検索文字列
                            this.tToolbarsManager.Tools["TextBoxTool_SearchWord"].SharedProps.Enabled = false;
                            // 検索列
                            this.tToolbarsManager.Tools["ComboBoxTool_TargetColumn"].SharedProps.Enabled = false;
                            // 行検索ボタン
                            this.tToolbarsManager.Tools["ButtonTool_RowSearchStart"].SharedProps.Enabled = false;
                        }
                        break;
                    }
                #endregion // 明細一覧

                #region 残高一覧

                // 残高
                case 2:
                    {
                        // 印刷
                        this.tToolbarsManager.Tools["ButtonTool_Print"].SharedProps.Enabled = false;
                        // PDF出力
                        this.tToolbarsManager.Tools["ButtonTool_PDF"].SharedProps.Enabled = false;
                        // テキスト出力
                        //this.tToolbarsManager.Tools["ButtonTool_ExtractText"].SharedProps.Enabled = false; //DEL 2010/07/20 
                        this.tToolbarsManager.Tools["ButtonTool_ExtractText"].SharedProps.Enabled = true;    //ADD 2010/07/20 
                        // EXCEL出力
                        this.tToolbarsManager.Tools["ButtonTool_ExtractExcel"].SharedProps.Enabled = true;   //ADD 2010/07/20 
                        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                        // 検索ボタン
                        this.tToolbarsManager.Tools["ButtonTool_Search"].SharedProps.Enabled = true;
                        // 削除ボタン
                        this.tToolbarsManager.Tools["ButtonTool_SlipDelete"].SharedProps.Enabled = false;
                        // 返品計上ボタン
                        this.tToolbarsManager.Tools["ButtonTool_IssueRedSlip"].SharedProps.Enabled = false;
                        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

                        if (this._detailDataSet != null && this._detailDataSet.BalanceList.Rows.Count > 0)
                        {
                            // EXCEL出力
                            //this.tToolbarsManager.Tools["ButtonTool_ExtractExcel"].SharedProps.Enabled = true; //DEL 2010/07/20 
                            // 行検索文字列
                            this.tToolbarsManager.Tools["TextBoxTool_SearchWord"].SharedProps.Enabled = true;
                            // 検索列
                            this.tToolbarsManager.Tools["ComboBoxTool_TargetColumn"].SharedProps.Enabled = true;
                            // 行検索ボタン
                            this.tToolbarsManager.Tools["ButtonTool_RowSearchStart"].SharedProps.Enabled = true;
                        }
                        else
                        {
                            // EXCEL出力
                            //this.tToolbarsManager.Tools["ButtonTool_ExtractExcel"].SharedProps.Enabled = false; //DEL 2010/07/20 
                            // 行検索文字列
                            this.tToolbarsManager.Tools["TextBoxTool_SearchWord"].SharedProps.Enabled = false;
                            // 検索列
                            this.tToolbarsManager.Tools["ComboBoxTool_TargetColumn"].SharedProps.Enabled = false;
                            // 行検索ボタン
                            this.tToolbarsManager.Tools["ButtonTool_RowSearchStart"].SharedProps.Enabled = false;
                        }
                        break;
                    }

                #endregion // 残高一覧

                // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                #region 返品計上
                case 3:
                    {
                        // 返品計上
                        if (this._redSlipBottonFlag)
                        {
                            this.tToolbarsManager.Tools["ButtonTool_IssueRedSlip"].SharedProps.Enabled = true;
                        }
                        else
                        {
                            this.tToolbarsManager.Tools["ButtonTool_IssueRedSlip"].SharedProps.Enabled = false;
                        }                        

                        // 印刷
                        this.tToolbarsManager.Tools["ButtonTool_Print"].SharedProps.Enabled = false;
                        // PDF出力
                        this.tToolbarsManager.Tools["ButtonTool_PDF"].SharedProps.Enabled = false;
                        // テキスト出力
                        this.tToolbarsManager.Tools["ButtonTool_ExtractText"].SharedProps.Enabled = false;
                        // EXCEL出力
                        this.tToolbarsManager.Tools["ButtonTool_ExtractExcel"].SharedProps.Enabled = false;
                        // 検索ボタン
                        this.tToolbarsManager.Tools["ButtonTool_Search"].SharedProps.Enabled = false;
                        // 削除ボタン
                        this.tToolbarsManager.Tools["ButtonTool_SlipDelete"].SharedProps.Enabled = false;

                        if (this._detailDataSet != null && this._detailDataSet.RedSlipDetail.Rows.Count > 0)
                        {
                            // 行検索文字列
                            this.tToolbarsManager.Tools["TextBoxTool_SearchWord"].SharedProps.Enabled = true;
                            // 検索列
                            this.tToolbarsManager.Tools["ComboBoxTool_TargetColumn"].SharedProps.Enabled = true;
                            // 行検索ボタン
                            this.tToolbarsManager.Tools["ButtonTool_RowSearchStart"].SharedProps.Enabled = true;
                        }
                        else
                        {
                            // 行検索文字列
                            this.tToolbarsManager.Tools["TextBoxTool_SearchWord"].SharedProps.Enabled = false;
                            // 検索列
                            this.tToolbarsManager.Tools["ComboBoxTool_TargetColumn"].SharedProps.Enabled = false;
                            // 行検索ボタン
                            this.tToolbarsManager.Tools["ButtonTool_RowSearchStart"].SharedProps.Enabled = false;
                        }
                        break;
                    }
                #endregion // 返品計上
                // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

                default: break;
            }

            if (!OpeAuthDictionary[OperationCode.TextOut])
            {
                this.tToolbarsManager.Tools["ButtonTool_ExtractText"].SharedProps.Visible = false;
                this.tToolbarsManager.Tools["ButtonTool_ExtractText"].SharedProps.Shortcut = Shortcut.None;
            }
            if (!OpeAuthDictionary[OperationCode.ExcelOut])
            {
                this.tToolbarsManager.Tools["ButtonTool_ExtractExcel"].SharedProps.Visible = false;
                this.tToolbarsManager.Tools["ButtonTool_ExtractExcel"].SharedProps.Shortcut = Shortcut.None;
            }
        }

        /// <summary>
        /// ステータスバー上の凡例のON/OFF
        /// </summary>
        /// <param name="enable"></param>
        private void adjustStatusBarCellExample(bool enable)
        {
            this.uStatusBar_Main.Panels["CellExample01"].Visible = enable;
            this.uStatusBar_Main.Panels["CellExample02"].Visible = enable;
            this.uStatusBar_Main.Panels["CellExample03"].Visible = enable;
            this.uStatusBar_Main.Panels["CellExample04"].Visible = enable;
        }

        #endregion // タブ切替時イベント

        #region キーコントロール

        /// <summary>
        ///// 伝票一覧グリッド上でのキーコントロール
        ///// </summary>
        ///// <param name="sender"></param>
        ///// <param name="e"></param>
        //private void uGrid_Slip_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        //{
        //    throw new System.Exception("The method or operation is not implemented.");
        //}

        /// <summary>
        /// グリッド上でのEnterキーコントロール
        /// </summary>
        /// <param name="controlName"></param>
        private void GridKeyDown_Return(string controlName)
        {
            // 現在の選択行の内容を取得
            switch (controlName)
            {
                case "uGrid_Slip":
                    {
                        // 行を取得
                        //Infragistics.Win.UltraWinGrid.UltraGridRow row = this.uGrid_Slip.ActiveRow;

                        //selectAllDetailFromSelectedSlip();

                        // 伝票番号・受注ステータスをキー
                        //string keySlipNo = row.Cells["SalesSlipNo"].Text;
                        //string keySlipCd = row.Cells["SalesSlipCd"].Text;   // 受注ステータス 0:売上, 1:返品



                        this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_SlipDetail"];
                        break;
                    }
                default:
                    {
                        break;
                    }
            }
        }

        #endregion // キーコントロール

        #region グリッドコントロールイベント

        #region 選択チェックボックスクリック処理
        /// <summary>
        /// 行選択状態を全解除する
        /// </summary>
        /// <remarks>
        /// <br>Note		: 行選択状態を全解除する。</br>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>             [仕入返品予定] 新規追加</br>
        /// </remarks>
        private void ClearSlipDetailActiveRow()
        {
            foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridDetailRow in this.uGrid_Detail.Rows)
            {
                gridDetailRow.Selected = false;
            }
        }

        /// <summary>
        /// 行選択状態を全解除する
        /// </summary>
        /// <remarks>
        /// <br>Note		: 行選択状態を全解除する。</br>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>             [仕入返品予定] 新規追加</br>
        /// </remarks>
        private void ClearSlipActiveRow()
        {
            foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridSlipRow in this.uGrid_Slip.Rows)
            {
                gridSlipRow.Selected = false;
            }
        }

        /// <summary>
        /// 選択行を明細タブと伝票タブでリンクする(明細→伝票)
        /// </summary>
        /// <param name="gridRow">明細選択行</param>
        /// <remarks>
        /// <br>Note		: 選択行を明細タブと伝票タブでリンクする。</br>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>             [仕入返品予定] 新規追加</br>
        /// </remarks>
        private void LinkDetailToSlip(Infragistics.Win.UltraWinGrid.UltraGridRow gridRow)
        {
            // (明細)仕入伝票番号
            string detailSuppSlipNo = gridRow.Cells[this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName].Value.ToString();
            // (明細)仕入形式
            int detailSuppFormal = Int32.Parse(gridRow.Cells[this._detailDataSet.StcDetail.SupplierFormalColumn.ColumnName].Value.ToString());
            // 該当する伝票行を選択
            foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridSlipRow in this.uGrid_Slip.Rows)
            {
                // (伝票)仕入伝票番号
                string currentSuppSlipNo = gridSlipRow.Cells[this._detailDataSet.StcList.SupplierSlipNoColumn.ColumnName].Value.ToString();
                // (伝票)仕入形式
                int currentSuppFormal = Int32.Parse(gridSlipRow.Cells[this._detailDataSet.StcList.SupplierFormalColumn.ColumnName].Value.ToString());

                if (currentSuppSlipNo.Equals(detailSuppSlipNo) && currentSuppFormal == detailSuppFormal)
                {
                    this.uGrid_Slip.ActiveRow = gridSlipRow;
                    this.uGrid_Slip.ActiveRow.Selected = true;
                    break;
                }
            }
        }

        /// <summary>
        /// 選択行を明細タブと伝票タブでリンクする(伝票→明細)
        /// </summary>
        /// <param name="gridRow">伝票選択行</param>
        /// <remarks>
        /// <br>Note		: 選択行を明細タブと伝票タブでリンクする。</br>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>             [仕入返品予定] 新規追加</br>
        /// </remarks>
        private void LinkSlipToDetail(Infragistics.Win.UltraWinGrid.UltraGridRow gridRow)
        {
            // (伝票)仕入伝票番号
            string suppSlipNo = gridRow.Cells[this._detailDataSet.StcList.SupplierSlipNoColumn.ColumnName].Value.ToString();
            // (伝票)仕入形式
            int suppFormal = Int32.Parse(gridRow.Cells[this._detailDataSet.StcList.SupplierFormalColumn.ColumnName].Value.ToString());
            // 該当する明細行を選択
            foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridDetailRow in this.uGrid_Detail.Rows)
            {
                // (明細)仕入伝票番号
                string currentSuppSlipNo = gridDetailRow.Cells[this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName].Value.ToString();
                // (明細)仕入形式
                int currentSuppFormal = Int32.Parse(gridDetailRow.Cells[this._detailDataSet.StcDetail.SupplierFormalColumn.ColumnName].Value.ToString());
                // (明細)仕入行番号
                int currentStockRowNo = (int)gridDetailRow.Cells[this._detailDataSet.StcDetail.StockRowNoColumn.ColumnName].Value;

                if (currentSuppSlipNo.Equals(suppSlipNo) && currentSuppFormal == suppFormal && currentStockRowNo == 1)
                {
                    this.uGrid_Detail.ActiveRow = gridDetailRow;
                    this.uGrid_Detail.ActiveRow.Selected = true;
                    break;
                }
            }
        }

        /// <summary>
        /// 選択チェックボックス クリック処理
        /// </summary>
        /// <param name="gridRow"></param>
        /// <param name="targetGrid">対象とするグリッド 0:伝票一覧, 1:明細</param>
        /// <remarks>行を選択色に変更したい場合に使用します。現在は使用なし（選択色の必要がないため）→使用する
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>             [仕入返品予定] 伝票・明細タブに選択チェックボックスを追加したため、選択行処理を使用する</br>
        /// </remarks>
        private void RowSelectClicked(Infragistics.Win.UltraWinGrid.UltraGridRow gridRow, int targetGrid)
        {
            // 関数呼び出しに使用する変数
            string tableName = string.Empty;
            string dataDivColName = string.Empty;
            string selectionColName = string.Empty;
            string rowNoColName = string.Empty;
            string supplierSlipCdColName = string.Empty;
            string debitNoteDivColName = string.Empty;
            string supplierFormalColName = string.Empty;

            // 対象とするグリッドの各カラム名を取得
            switch (targetGrid)
            {
                case 0:
                    {
                        dataDivColName = this._detailDataSet.StcList.DataDivColumn.ColumnName;
                        selectionColName = this._detailDataSet.StcList.SelectionColumn.ColumnName;// ADD 2013/01/21 [仕入返品計上]
                        supplierSlipCdColName = this._detailDataSet.StcList.SupplierSlipCdColumn.ColumnName;
                        debitNoteDivColName = this._detailDataSet.StcList.DebitNoteDivColumn.ColumnName;
                        supplierFormalColName = this._detailDataSet.StcList.SupplierFormalColumn.ColumnName;
                        rowNoColName = this._detailDataSet.StcList.RowNoColumn.ColumnName;
                        tableName = "StcList";
                        break;
                    }
                case 1:
                    {
                        dataDivColName = this._detailDataSet.StcDetail.DataDivColumn.ColumnName;
                        selectionColName = this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName;// ADD 2013/01/21 [仕入返品計上]
                        supplierSlipCdColName = this._detailDataSet.StcDetail.SupplierSlipCdColumn.ColumnName;
                        debitNoteDivColName = this._detailDataSet.StcDetail.DebitNoteDivColumn.ColumnName;
                        supplierFormalColName = this._detailDataSet.StcDetail.SupplierFormalColumn.ColumnName;
                        rowNoColName = this._detailDataSet.StcDetail.RowNoColumn.ColumnName;
                        tableName = "StcDetail";
                        break;
                    }
                default: break;
            }

            #region DEL
            // ----------DEL 2013/01/21 [仕入返品計上]----------->>>>>
            //// 入金データの場合はチェックボックスが存在しないので飛ばす
            //// 入金データ行は選択色にならない
            //if ((int)gridRow.Cells[dataDivColName].Value == 0)
            //{
            //    bool continueFlg = false;
            //    // 行選択
            //    bool newSelectedValue = gridRow.Selected;
            // ----------DEL 2013/01/21 [仕入返品計上]-----------<<<<<
            #endregion DEL
            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            // 支払データの場合はチェックボックスが存在しないので飛ばす
            // 支払データ行は選択色にならない
            if (gridRow.Cells[dataDivColName].Value != DBNull.Value &&
                (int)gridRow.Cells[dataDivColName].Value == 0 &&
                 gridRow.Cells[selectionColName].Value != DBNull.Value)
            {
                bool continueFlg = false;

                // 選択チェックボックスの値を取得
                bool newSelectedValue = !(bool)gridRow.Cells[selectionColName].Value;

                continueFlg = true;

                // 明細の場合
                if (targetGrid == 1)
                {
                    // 仕入先および拠点コードを比較の為、値を取得
                    int suppCd = (int)gridRow.Cells[_detailDataSet.StcDetail.SupplierCdColumn.ColumnName].Value;
                    string sectCd = (string)gridRow.Cells[_detailDataSet.StcDetail.SectionCdColumn.ColumnName].Value;

                    // 選択行の伝票区分を取得
                    int SupplierSlipCd = (int)gridRow.Cells[_detailDataSet.StcDetail.SupplierSlipCdColumn.ColumnName].Value;

                    // 一件以上選択されているなら比較
                    if (this._selectedRowCountDetail > 0)
                    {
                        // 仕入先・拠点が異なる場合エラー
                        if (this._selectedSupplierCd.Equals(suppCd) && this._selectedSectionCd.Equals(sectCd))
                        {
                            continueFlg = true;
                            if (this._selectedSupplierSlipCd != 0)
                            {
                                // 仕入先・拠点が同じで、伝票区分が異なる場合エラー
                                if (this._selectedSupplierSlipCd.Equals(SupplierSlipCd))
                                {
                                    continueFlg = true;
                                }
                                else
                                {
                                    continueFlg = false;
                                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                                        "伝票区分の違う明細は選択出来ません。", -1, MessageBoxButtons.OK);
                                }
                            }
                            else
                            {
                                this._selectedSupplierSlipCd = SupplierSlipCd;
                                continueFlg = true;
                            }
                        }
                        else
                        {
                            continueFlg = false;
                            TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                                "仕入先が異なる複数伝票の計上は出来ません。", -1, MessageBoxButtons.OK);                            
                        }
                    }
                    else
                    {
                        continueFlg = true;
                        this._selectedSupplierCd = suppCd;
                        this._selectedSectionCd = sectCd;
                        this._selectedSupplierSlipCd = SupplierSlipCd;
                    }

                    if (continueFlg)
                    {
                        // 選択行数を保存
                        if (newSelectedValue)
                        {
                            this._selectedRowCountDetail++;
                        }
                        else
                        {
                            this._selectedRowCountDetail--;                            
                            // 選択行が0になったら保存していた仕入先・拠点をクリア
                            if (this._selectedRowCountDetail == 0)
                            {
                                this._selectedSectionCd = string.Empty;
                                this._selectedSupplierCd = 0;                                
                                this._selectedSupplierSlipCd = 0;
                            }
                        }
                    }
                }
                else
                {
                    // 伝票の場合 削除ボタン・赤伝ボタンの表示/非表示に使用する
                    continueFlg = true;
                    // 選択行数を保存
                    if (newSelectedValue)
                    {
                        this._selectedRowCountSlip++;
                    }
                    else
                    {
                        this._selectedRowCountSlip--;
                    }
                }
                // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

                if (continueFlg)
                {
                    // 行を取得（RowNoカラムがキー設定されている）
                    DataRow row = this._detailDataSet.Tables[tableName].Rows.Find((int)gridRow.Cells[rowNoColName].Value);
                    row[selectionColName] = newSelectedValue;// ADD 2013/01/21 [仕入返品計上]

                    // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                    // 背景色変更メソッド
                    RowBackColorChange(row, targetGrid, newSelectedValue, gridRow);
                    // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                    // ----------DEL 2013/01/21 [仕入返品計上]----------->>>>>
                    //// 背景色を変更
                    //if ((int)row[dataDivColName] == 1) // 入金
                    //{
                    //    this.RowColorChange_SlipType(gridRow, targetGrid, 3);
                    //}
                    //else
                    //{
                    //    if (row[debitNoteDivColName].ToString() == "赤伝") // 赤伝
                    //    {
                    //        this.RowColorChange_SlipType(gridRow, targetGrid, 0);
                    //    }
                    //    else
                    //    {
                    //        if ((int)row[supplierFormalColName] == 0)   
                    //        {
                    //            if ((int)row[supplierSlipCdColName] == 10)　// 仕入
                    //            {
                    //                this.RowColorChange_SlipType(gridRow, targetGrid, 9);
                    //            }
                    //            else if ((int)row[supplierSlipCdColName] == 20) // 返品
                    //            {
                    //                this.RowColorChange_SlipType(gridRow, targetGrid, 0);
                    //            }
                    //        }
                    //        else if ((int)row[supplierFormalColName]  == 1)   // 受注
                    //        {
                    //            this.RowColorChange_SlipType(gridRow, targetGrid, 1);
                    //        }
                    //        else if ((int)row[supplierFormalColName] == 2)   // 出荷
                    //        {
                    //            this.RowColorChange_SlipType(gridRow, targetGrid, 2);
                    //        }
                    //    }   
                    //}
                    // ----------DEL 2013/01/21 [仕入返品計上]-----------<<<<<

                    // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                    // 返品計上用のデータセットにデータを作成/削除
                    if (targetGrid == 1)
                    {
                        AttachRedSlipDataSet(newSelectedValue, row);
                        adjustButtonEnable(1);
                    }
                    // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

                    // グリッドを更新
                    this.uGrid_Slip.Refresh();
                    this.uGrid_Detail.Refresh();

                    // 伝票一覧グリッドの場合はボタン設定
                    if (this._selectedMainTabKey == "uTab_SlipList") adjustButtonEnable(0);
                }
            }
        }

        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
        /// <summary>
        /// 背景色変更
        /// </summary>
        /// <param name="row">背景色を変更する対象行</param>
        /// <param name="targetGrid">対象とするグリッド 0:伝票一覧, 1:明細</param>
        /// <param name="newSelectedValue">選択チェックボックスON/OFF</param>
        /// <param name="gridRow"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void RowBackColorChange(DataRow row, int targetGrid, bool newSelectedValue, Infragistics.Win.UltraWinGrid.UltraGridRow gridRow)
        {
            // 関数呼び出しに使用する変数
            string tableName = string.Empty;
            string dataDivColName = string.Empty;
            string selectionColName = string.Empty;
            string rowNoColName = string.Empty;
            string supplierSlipCdColName = string.Empty;
            string debitNoteDivColName = string.Empty;
            string supplierFormalColName = string.Empty;
            string SalesSlipNumColName = string.Empty;

            switch (targetGrid)
            {
                case 0:
                    {
                        dataDivColName = this._detailDataSet.StcList.DataDivColumn.ColumnName;
                        selectionColName = this._detailDataSet.StcList.SelectionColumn.ColumnName;
                        supplierSlipCdColName = this._detailDataSet.StcList.SupplierSlipCdColumn.ColumnName;
                        debitNoteDivColName = this._detailDataSet.StcList.DebitNoteDivColumn.ColumnName;
                        supplierFormalColName = this._detailDataSet.StcList.SupplierFormalColumn.ColumnName;
                        rowNoColName = this._detailDataSet.StcList.RowNoColumn.ColumnName;
                        SalesSlipNumColName = this._detailDataSet.StcList.SalesSlipNumColumn.ColumnName;
                        tableName = "StcList";
                        break;
                    }
                case 1:
                    {
                        dataDivColName = this._detailDataSet.StcDetail.DataDivColumn.ColumnName;
                        selectionColName = this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName;
                        supplierSlipCdColName = this._detailDataSet.StcDetail.SupplierSlipCdColumn.ColumnName;
                        debitNoteDivColName = this._detailDataSet.StcDetail.DebitNoteDivColumn.ColumnName;
                        supplierFormalColName = this._detailDataSet.StcDetail.SupplierFormalColumn.ColumnName;
                        rowNoColName = this._detailDataSet.StcDetail.RowNoColumn.ColumnName;
                        SalesSlipNumColName = this._detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName;
                        tableName = "StcDetail";
                        break;
                    }
                default: break;
            }

            if ((int)row[dataDivColName] == 1) // 入金
            {
                this.RowColorChange_SlipType(newSelectedValue, gridRow, targetGrid, 3);
            }
            else
            {
                if (row[debitNoteDivColName].ToString() == "赤伝") // 赤伝
                {
                    this.RowColorChange_SlipType(newSelectedValue, gridRow, targetGrid, 0);
                }
                else
                {
                    if ((int)row[supplierFormalColName] == 0) // 仕入形式:仕入
                    {
                        if ((int)row[supplierSlipCdColName] == 10) // 伝票区分:仕入
                        {
                            if ((string)row[SalesSlipNumColName] == string.Empty)
                            {
                                this.RowColorChange_SlipType(newSelectedValue, gridRow, targetGrid, 9);　// 仕入
                            }
                            else
                            {
                                this.RowColorChange_SlipType(newSelectedValue, gridRow, targetGrid, 1); // 売仕入同時
                            }
                        }
                        else if ((int)row[supplierSlipCdColName] == 20) // 返品
                        {
                            this.RowColorChange_SlipType(newSelectedValue, gridRow, targetGrid, 0);
                        }
                    }
                    else if ((int)row[supplierFormalColName] == 1)   // 受注
                    {
                        this.RowColorChange_SlipType(newSelectedValue, gridRow, targetGrid, 1);
                    }
                    else if ((int)row[supplierFormalColName] == 2)   // 出荷
                    {
                        this.RowColorChange_SlipType(newSelectedValue, gridRow, targetGrid, 2);
                    }
                    else if ((int)row[supplierFormalColName] == 3)   // 返品予定
                    {
                        this.RowColorChange_SlipType(newSelectedValue, gridRow, targetGrid, 9);
                    }
                }

                #region 売単価、原単価、定価のバックカラー設定
                if (targetGrid == 1)// 明細グリッド
                {
                    int stockRowNo = (int)gridRow.Cells[_detailDataSet.StcDetail.RowNoColumn.ColumnName].Value;
                    this.DetailGridSalesUnitPriceColorSetting(gridRow, stockRowNo);
                    this.DetailGridListPriceColorSetting(gridRow, stockRowNo);
                }
                #endregion
            }
        }
        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

        ///// <summary>
        ///// 赤伝用のデータセットに行を作成/削除
        ///// </summary>
        ///// <param name="isChecked">true チェックが付けられた false 消された</param>
        ///// <param name="row">データセットの行オブジェクト</param>
        //private void AttachRedSlipDataSet(bool isChecked, DataRow row)
        //{
        //    // チェックされたならデータを作成
        //    if (isChecked)
        //    {
        //        DataRow rowRed = this._detailDataSet.RedSlipDetail.NewRow();

        //        // データカラムをコピー
        //        rowRed[this._detailDataSet.RedSlipDetail.RowNoColumn.ColumnName] = row[this._detailDataSet.StcDetail.RowNoColumn.ColumnName];                             // 行No 表示されないがキー
        //        rowRed[this._detailDataSet.RedSlipDetail.SalesSlipNumColumn.ColumnName] = row[this._detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName];               // 伝票番号
        //        rowRed[this._detailDataSet.RedSlipDetail.AcptAnOdrStatusColumn.ColumnName] = row[this._detailDataSet.StcDetail.AcptAnOdrStatusColumn.ColumnName];         // 受注ステータス
        //        rowRed[this._detailDataSet.RedSlipDetail.GoodsNameColumn.ColumnName] = row[this._detailDataSet.StcDetail.GoodsNameColumn.ColumnName];                     // 品名
        //        rowRed[this._detailDataSet.RedSlipDetail.GoodsNoColumn.ColumnName] = row[this._detailDataSet.StcDetail.GoodsNoColumn.ColumnName];                         // 品番
        //        rowRed[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName] = row[this._detailDataSet.StcDetail.ShipmentCntColumn.ColumnName];                 // 可能数
        //        // 同時仕入Noが存在するかどうかを判定
        //        if (Int32.Parse(row[this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName].ToString()) > 0)
        //        {
        //            rowRed[this._detailDataSet.RedSlipDetail.SupplyDivNameColumn.ColumnName] = "○";                                                                              // 仕入
        //        }
        //        rowRed[this._detailDataSet.RedSlipDetail.ReturnableCntColumn.ColumnName] = row[this._detailDataSet.StcDetail.ShipmentCntColumn.ColumnName];               // 返品数
        //        rowRed[this._detailDataSet.RedSlipDetail.SalesUnPrcTaxExcFlColumn.ColumnName] = row[this._detailDataSet.StcDetail.SalesUnPrcTaxExcFlColumn.ColumnName];   // 単価
        //        rowRed[this._detailDataSet.RedSlipDetail.SalesUnitCostColumn.ColumnName] = row[this._detailDataSet.StcDetail.SalesUnitCostColumn.ColumnName];             // 原価
        //        rowRed[this._detailDataSet.RedSlipDetail.SalesOrderDivCdColumn.ColumnName] = row[this._detailDataSet.StcDetail.SalesOrderDivCdColumn.ColumnName];         // 在庫取寄区分
        //        // 在庫取寄区分名を設定
        //        if (Int32.Parse(row[this._detailDataSet.StcDetail.SalesOrderDivCdColumn.ColumnName].ToString()) == 0)
        //        {
        //            rowRed[this._detailDataSet.RedSlipDetail.SalesOrderDivCdNameColumn.ColumnName] = "取寄";                                                                // 在庫取寄区分名
        //        }
        //        else
        //        {
        //            rowRed[this._detailDataSet.RedSlipDetail.SalesOrderDivCdNameColumn.ColumnName] = "在庫";
        //        }
        //        // 倉庫コード以下は売掛区分=1(売掛)のときのみ表示
        //        if (Int32.Parse(row[this._detailDataSet.StcDetail.AccRecDivCdColumn.ColumnName].ToString()) == 1)
        //        {
        //            rowRed[this._detailDataSet.RedSlipDetail.WarehouseCdColumn.ColumnName] = row[this._detailDataSet.StcDetail.WarehouseCdColumn.ColumnName];             // 倉庫コード
        //            rowRed[this._detailDataSet.RedSlipDetail.WarehouseNameColumn.ColumnName] = row[this._detailDataSet.StcDetail.WarehouseNameColumn.ColumnName];         // 倉庫名称
        //            // 棚番
        //            //

        //            // 先頭行の売掛情報により赤伝タブの伝票区分プルダウンが変化
        //            // 売掛の時は現金系が選択不可
        //            ValueListItem v0 = new ValueListItem();
        //            v0.DisplayText = "現金売上";
        //            v0.DataValue = 0;
        //            ValueListItem v1 = new ValueListItem();
        //            v1.DisplayText = "現金返品";
        //            v1.DataValue = 1;
        //            this.tComboEditor_rs_SalesSlipCd.Items.Remove(v0);
        //            this.tComboEditor_rs_SalesSlipCd.Items.Remove(v1);
        //        }
        //        else
        //        {
        //            // 先頭行の売掛情報により赤伝タブの伝票区分プルダウンが変化
        //            // 売掛ではない時は掛系が選択不可

        //            ValueListItem v2 = new ValueListItem();
        //            v2.DisplayText = "掛売上";
        //            v2.DataValue = 2;
        //            ValueListItem v3 = new ValueListItem();
        //            v3.DisplayText = "掛返品";
        //            v3.DataValue = 3;
        //            this.tComboEditor_rs_SalesSlipCd.Items.Remove(v2);
        //            this.tComboEditor_rs_SalesSlipCd.Items.Remove(v3);
        //        }
                
        //        // 得意先・拠点を表示
        //        this.uLabel_rs_SectionName.Text = row[this._detailDataSet.StcDetail.SectionGuideNameColumn.ColumnName].ToString().Trim();
        //        this.uLabel_rs_CustomerName.Text = row[this._detailDataSet.StcDetail.CustomerSnmColumn.ColumnName].ToString().Trim();


        //        // 行を追加
        //        this._detailDataSet.RedSlipDetail.Rows.Add(rowRed);

        //        // 赤伝グリッドを更新
        //        this.uGrid_RedSlip.Refresh();
        //    }
        //    else
        //    {
        //        // チェックが消されたならばデータテーブルから該当行を消去

        //        // キーとなる行Noを取得
        //        int rowNo = Int32.Parse(row[this._detailDataSet.StcDetail.RowNoColumn.ColumnName].ToString());

        //        // データセットから消去
        //        DataRow rowRmv = this._detailDataSet.RedSlipDetail.Rows.Find(rowNo);
        //        this._detailDataSet.RedSlipDetail.Rows.Remove(rowRmv);

        //        // 行がなくなったら赤伝タブの伝票区分プルダウンを初期化
        //        if (this._detailDataSet.RedSlipDetail.Rows.Count == 0)
        //        {
        //            InitializeSalesSlipCdBox();
        //        }

        //        // 赤伝グリッドを更新
        //        this.uGrid_RedSlip.Refresh();
        //    }
        //}

        ///// <summary>
        ///// 赤伝発行タブの伝票区分プルダウンを初期化
        ///// </summary>
        //private void InitializeSalesSlipCdBox()
        //{
        //    ValueListItem v0 = new ValueListItem();
        //    v0.DisplayText = "現金売上";
        //    v0.DataValue = 0;
        //    ValueListItem v1 = new ValueListItem();
        //    v1.DisplayText = "現金返品";
        //    v1.DataValue = 1;
        //    ValueListItem v2 = new ValueListItem();
        //    v2.DisplayText = "掛売上";
        //    v2.DataValue = 2;
        //    ValueListItem v3 = new ValueListItem();
        //    v3.DisplayText = "掛返品";
        //    v3.DataValue = 3;

        //    // 項目追加
        //    this.tComboEditor_rs_SalesSlipCd.Items.Add(v0);
        //    this.tComboEditor_rs_SalesSlipCd.Items.Add(v1);
        //    this.tComboEditor_rs_SalesSlipCd.Items.Add(v2);
        //    this.tComboEditor_rs_SalesSlipCd.Items.Add(v3);
        //}

        // ----------ADD 2013/01/21----------->>>>>
        /// <summary>
        /// 返品計上用のデータセットに行を作成/削除
        /// </summary>
        /// <param name="isChecked">true チェックが付けられた false 消された</param>
        /// <param name="row">データセットの行オブジェクト</param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品予定] 得意先電子元帳の同名メソッドを元に作成</br>
        /// <br>Update Note : 2013/02/27 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品予定] システムテスト障害No206対応</br>
        /// </remarks>
        private void AttachRedSlipDataSet(bool isChecked, DataRow row)
        {
            // チェックされたらデータを作成
            if (isChecked)
            {
                string tableName = "StcList";
                string selectionColName = this._detailDataSet.StcList.SelectionColumn.ColumnName;
                string rowNoColName = this._detailDataSet.StcList.RowNoColumn.ColumnName;
                string dataDivColName = this._detailDataSet.StcList.DataDivColumn.ColumnName;

                // 伝票タブチェック削除
                foreach (Infragistics.Win.UltraWinGrid.UltraGridRow StcLstRow in this.uGrid_Slip.Rows)
                {
                    if (tabFlg == true)
                    {
                        if (StcLstRow.Cells[dataDivColName].Value != DBNull.Value && (int)StcLstRow.Cells[dataDivColName].Value == 0 &&
                            StcLstRow.Cells[selectionColName].Value != DBNull.Value)
                        {
                            bool newSelectedValue = false;
                            DataRow DenRow = this._detailDataSet.Tables[tableName].Rows.Find((int)StcLstRow.Cells[rowNoColName].Value);
                            DenRow[selectionColName] = newSelectedValue;

                            RowBackColorChange(DenRow, 0, newSelectedValue, StcLstRow);
                        }
                    }
                    //伝票タブから明細タブに来た時のみ
                    else
                    {
                        DataRow DenRow2 = this._detailDataSet.Tables[tableName].Rows.Find((int)StcLstRow.Cells[rowNoColName].Value);
                        if (StcLstRow.Cells[selectionColName].Value != DBNull.Value)
                        {
                            //チェックした行の背景色
                            if ((bool)StcLstRow.Cells[selectionColName].Value == true)
                            {
                                RowBackColorChange(DenRow2, 0, isChecked, StcLstRow);
                            }
                            else
                            {
                                RowBackColorChange(DenRow2, 0, tabFlg, StcLstRow);
                            }
                        }
                    }
                }

                // 返品計上Gridに選択明細行を追加する
                #region 選択データ追加
                DataRow rowRetGds = this._detailDataSet.RedSlipDetail.NewRow();
                // 行No 表示されないがキー
                rowRetGds[this._detailDataSet.RedSlipDetail.RowNoColumn.ColumnName] = row[this._detailDataSet.StcDetail.RowNoColumn.ColumnName];
                // 行番号(伝票内の行番号) 返品計上で使用
                rowRetGds[this._detailDataSet.RedSlipDetail.StockRowNoColumn.ColumnName] = row[this._detailDataSet.StcDetail.StockRowNoColumn.ColumnName];
                // 仕入伝票番号(仕入SEQ) 返品計上で使用
                rowRetGds[this._detailDataSet.RedSlipDetail.SupplierSlipNoColumn.ColumnName] = row[this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName];
                // メーカーコード 表示しないが在庫更新処理に使用
                rowRetGds[this._detailDataSet.RedSlipDetail.GoodsMakerCdColumn.ColumnName] = row[this._detailDataSet.StcDetail.GoodsMakerCdColumn.ColumnName];
                // 仕入伝票区分(明細) 返品計上前エラーチェックに使用
                rowRetGds[this._detailDataSet.RedSlipDetail.StockSlipCdDtlIntColumn.ColumnName] = row[this._detailDataSet.StcDetail.StockSlipCdDtlIntColumn.ColumnName];
                // 論理削除区分(明細) 返品計上前エラーチェックに使用
                rowRetGds[this._detailDataSet.RedSlipDetail.DetailLogicalDelCdColumn.ColumnName] = row[this._detailDataSet.StcDetail.LogicalDeleteCodeColumn.ColumnName];                
                // 仕入相手先伝票番号 返品計上前エラーチェックのメッセージに使用
                rowRetGds[this._detailDataSet.RedSlipDetail.PartySaleSlipNumColumn.ColumnName] = row[this._detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName];
                // 品名
                rowRetGds[this._detailDataSet.RedSlipDetail.GoodsNameColumn.ColumnName] = row[this._detailDataSet.StcDetail.GoodsNameColumn.ColumnName];
                // 品番
                rowRetGds[this._detailDataSet.RedSlipDetail.GoodsNoColumn.ColumnName] = row[this._detailDataSet.StcDetail.GoodsNoColumn.ColumnName];
                // 可能数：仕入明細.数量(仕入数)をセット
                //rowRetGds[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName] = (double)row[this._detailDataSet.StcDetail.StockCountColumn.ColumnName];// DEL　2014/10/29 時シン 仕入伝票入力にて合計で登録した場合に仕入先電子元帳でチェックを付ける時エラーの対応
                // --- ADD　2014/10/29 時シン 仕入伝票入力にて合計で登録した場合に仕入先電子元帳でチェックを付ける時エラーの対応------->>>>>
                if (!string.IsNullOrEmpty(row[this._detailDataSet.StcDetail.StockCountColumn.ColumnName].ToString()))
                {
                rowRetGds[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName] = (double)row[this._detailDataSet.StcDetail.StockCountColumn.ColumnName];
                }
                else
                {
                    rowRetGds[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName] = 0.0;
                }
                // --- ADD　2014/10/29 時シン 仕入伝票入力にて合計で登録した場合に仕入先電子元帳でチェックを付ける時エラーの対応-------<<<<<
                if ((int)row[this._detailDataSet.StcDetail.StockSlipCdDtlIntColumn.ColumnName] == 0)
                {
                    double returnCnt = (double)(rowRetGds[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName]);
                    if (returnCnt < 0)
                    {
                        returnCnt *= -1.0;
                        rowRetGds[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName] = returnCnt;
                    }
                }
                // 返品伝票番号
                rowRetGds[this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName] = string.Empty;
                // 返品数：初期表示の返品数には、返品可能数をセット
                rowRetGds[this._detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName] = rowRetGds[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName];
                if ((int)row[this._detailDataSet.StcDetail.StockSlipCdDtlIntColumn.ColumnName] == 0)
                {
                    double returnCnt = (double)(rowRetGds[this._detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName]);
                    if (returnCnt < 0)
                    {
                        returnCnt *= -1.0;
                        rowRetGds[this._detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName] = returnCnt;
                    }
                }
                // 原価
                rowRetGds[this._detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName] = row[this._detailDataSet.StcDetail.StockUnitPriceFlColumn.ColumnName];
                // 売上伝票番号
                rowRetGds[this._detailDataSet.RedSlipDetail.SalesSlipNumColumn.ColumnName] = row[this._detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName];
                // 得意先コード
                rowRetGds[this._detailDataSet.RedSlipDetail.CustomerCodeColumn.ColumnName] = row[this._detailDataSet.StcDetail.CustomerCodeColumn.ColumnName];
                // 返品予定データに倉庫コード・倉庫名・棚番が入っていることはあり得ないが念のため明細からコピー
                // 倉庫コード
                rowRetGds[this._detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName] = row[this._detailDataSet.StcDetail.WarehouseCdColumn.ColumnName].ToString().Trim();
                // 倉庫名
                rowRetGds[this._detailDataSet.RedSlipDetail.WarehouseNameColumn.ColumnName] = row[this._detailDataSet.StcDetail.WarehouseNameColumn.ColumnName];
                // 棚番
                rowRetGds[this._detailDataSet.RedSlipDetail.ShelfNoColumn.ColumnName] = row[this._detailDataSet.StcDetail.WarehouseShelfNoColumn.ColumnName];
                // 返品後数
                rowRetGds[this._detailDataSet.RedSlipDetail.ReturnedAfterCntColumn.ColumnName] = DBNull.Value;
                #endregion 選択データ追加

                // 仕入先・拠点を表示
                this.uLabel_rs_SectionName.Text = row[this._detailDataSet.StcDetail.SectionGuideNmColumn.ColumnName].ToString().Trim();
                this.uLabel_rs_SupplierName.Text = row[this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName].ToString().Trim();

                // ----------ADD 2013/02/27 障害No206対応----------->>>>>
                // 備考1・備考2に値をセット
                // 複数行選択された場合も返品明細の1行目の備考データを表示する
                if (this._selectedRowCountDetail == 1)
                {
                    this.tEdit_rs_SlipNote.Text = row[this._detailDataSet.StcDetail.SupplierSlipNote1Column.ColumnName].ToString().Trim();
                    this.tEdit_rs_SlipNote2.Text = row[this._detailDataSet.StcDetail.SupplierSlipNote2Column.ColumnName].ToString().Trim();
                }
                // ----------ADD 2013/02/27 障害No206対応-----------<<<<<

                // 行を追加
                this._detailDataSet.RedSlipDetail.Rows.Add(rowRetGds);
                // 行の表示/非表示と入力制御
                SettingGridRow(this._detailDataSet.RedSlipDetail.Rows.Count - 1);

                #region 金額計算
                long detailTotalPrice = 0;
                // 原単価 (仕入単価（税抜，浮動）)
                //double stockUnitPriceFlCurr = (double)row[this._detailDataSet.StcDetail.StockUnitPriceFlColumn.ColumnName];// DEL　2014/10/29 時シン 仕入伝票入力にて合計で登録した場合に仕入先電子元帳でチェックを付ける時エラーの対応
                // --- ADD　2014/10/29 時シン 仕入伝票入力にて合計で登録した場合に仕入先電子元帳でチェックを付ける時エラーの対応------->>>>>
                double stockUnitPriceFlCurr = 0.0;
                if (!string.IsNullOrEmpty(row[this._detailDataSet.StcDetail.StockUnitPriceFlColumn.ColumnName].ToString()))
                {
                    stockUnitPriceFlCurr = (double)row[this._detailDataSet.StcDetail.StockUnitPriceFlColumn.ColumnName];
                }
                // --- ADD　2014/10/29 時シン 仕入伝票入力にて合計で登録した場合に仕入先電子元帳でチェックを付ける時エラーの対応-------<<<<<
                // 数量
                //double stockCountColumnCurr = (double)row[this._detailDataSet.StcDetail.StockCountColumn.ColumnName];// DEL　2014/10/29 時シン 仕入伝票入力にて合計で登録した場合に仕入先電子元帳でチェックを付ける時エラーの対応
                // --- ADD　2014/10/29 時シン 仕入伝票入力にて合計で登録した場合に仕入先電子元帳でチェックを付ける時エラーの対応------->>>>>
                double stockCountColumnCurr = 0.0;
                if (!string.IsNullOrEmpty(row[this._detailDataSet.StcDetail.StockCountColumn.ColumnName].ToString()))
                {
                    stockCountColumnCurr = (double)row[this._detailDataSet.StcDetail.StockCountColumn.ColumnName];
                }
                // --- ADD　2014/10/29 時シン 仕入伝票入力にて合計で登録した場合に仕入先電子元帳でチェックを付ける時エラーの対応-------<<<<<

                // 原単価 * 数量
                detailTotalPrice = GetDetailPriceForRedTotal(stockUnitPriceFlCurr, stockCountColumnCurr);
                _redSlipTotalPrice += detailTotalPrice;
                
                // 返品合計金額が変わったので手数料率で再計算
                ChangeRedSlipTotalPrice();

                // 返品合計金額計算用に値保持
                int currentRowNo = (int)rowRetGds[this._detailDataSet.RedSlipDetail.RowNoColumn.ColumnName];
                if (this.redMoney.Count == 0 || !this.redMoney.ContainsKey(currentRowNo))
                {
                    this.redMoney.Add(currentRowNo, detailTotalPrice);
                }
                #endregion // 金額計算

                // 赤伝グリッドを更新
                this.uGrid_RedSlip.Refresh();

            }
            else
            {
                // チェックが消されたならばデータテーブルから該当行を消去
                // 手数料再計算
                int currentRowNo = (int)row[this._detailDataSet.StcDetail.RowNoColumn.ColumnName];
                if (this.redMoney.Count > 0 && this.redMoney.ContainsKey(currentRowNo))
                {
                    this.redMoney.Remove(currentRowNo);
                }
                // 返品合計金額を再計算
                CountMoney();
                // 返品合計金額が変わったので手数料率で再計算
                ChangeRedSlipTotalPrice();

                // キーとなる行Noを取得
                int rowNo = Int32.Parse(row[this._detailDataSet.StcDetail.RowNoColumn.ColumnName].ToString());

                // データセットから消去
                DataRow rowRmv = this._detailDataSet.RedSlipDetail.Rows.Find(rowNo);
                int indexRmv = this._detailDataSet.RedSlipDetail.Rows.IndexOf(rowRmv); // ADD 2013/02/27 障害No206対応
                this._detailDataSet.RedSlipDetail.Rows.Remove(rowRmv);

                // 赤伝グリッドを更新
                this.uGrid_RedSlip.Refresh();

                // 明細グリッド中のチェックがすべて消されたら、返品計上タブの入力項目をクリアする
                if (this._detailDataSet.RedSlipDetail.Rows.Count == 0)
                {
                    ClearRedSlipInputField();
                }
                // ----------ADD 2013/02/27 障害No206対応----------->>>>>
                else
                {
                    // 備考1・備考2に値をセット
                    // 返品明細に表示されている1行目の選択が解除された場合、次の1行目の備考データを表示する
                    if (indexRmv == 0)
                    {
                        foreach (DataRow dr in this._detailDataSet.RedSlipDetail.Rows)
                        {
                            int indexNew = this._detailDataSet.RedSlipDetail.Rows.IndexOf(dr);
                            if (indexNew == 0)
                            {
                                int rowNewNo = Int32.Parse(dr[this._detailDataSet.RedSlipDetail.RowNoColumn.ColumnName].ToString());
                                DataRow rowNew = this._detailDataSet.StcDetail.Rows.Find(rowNewNo);
                                this.tEdit_rs_SlipNote.Text = rowNew[this._detailDataSet.StcDetail.SupplierSlipNote1Column.ColumnName].ToString().Trim();
                                this.tEdit_rs_SlipNote2.Text = rowNew[this._detailDataSet.StcDetail.SupplierSlipNote2Column.ColumnName].ToString().Trim();

                                break;
                            }
                        }
                    }
                }
                // ----------ADD 2013/02/27 障害No206対応-----------<<<<<
            }
        }

        /// <summary>
        /// 明細金額算出処理（返品計上合計算出用）
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private long GetDetailPriceForRedTotal(double salesUnPrcTaxExc, double shipmentCnt)
        {
            return (long)((decimal)salesUnPrcTaxExc * (decimal)shipmentCnt);
        }

        // ----------ADD 2013/01/21-----------<<<<<

        #endregion // 選択チェックボックスクリック処理

        #region 伝票一覧グリッド

        #region クリックイベント

        /// <summary>
        /// 伝票一覧グリッド クリックイベント
        /// </summary>
        /// <param name="sender">グリッドオブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品予定計上] 選択チェックボックスの処理追加</br>
        /// </remarks>
        private void uGrid_Slip_Click(object sender, System.EventArgs e)
        {
            Infragistics.Win.UltraWinGrid.UltraGrid targetGrid = (Infragistics.Win.UltraWinGrid.UltraGrid)sender;

            // マウスポインタがグリッドのどの位置にあるかを判定する
            Point point = System.Windows.Forms.Cursor.Position;
            point = targetGrid.PointToClient(point);

            // UIElementを取得
            Infragistics.Win.UIElement objUIElement = targetGrid.DisplayLayout.UIElement.ElementFromPoint(point);
            if (objUIElement == null)
                return;

            // 列ヘッダクリックかどうかを判定
            Infragistics.Win.UltraWinGrid.ColumnHeader objHeader =
              (Infragistics.Win.UltraWinGrid.ColumnHeader)objUIElement.GetContext(typeof(Infragistics.Win.UltraWinGrid.ColumnHeader));
            if (objHeader != null) return;

            // 行クリックかどうかを判定
            Infragistics.Win.UltraWinGrid.UltraGridRow objRow =
              (Infragistics.Win.UltraWinGrid.UltraGridRow)objUIElement.GetContext(typeof(Infragistics.Win.UltraWinGrid.UltraGridRow));
            if (objRow == null) return;

            Infragistics.Win.UltraWinGrid.UltraGridCell objCell =
              (Infragistics.Win.UltraWinGrid.UltraGridCell)objUIElement.GetContext(typeof(Infragistics.Win.UltraWinGrid.UltraGridCell));

            // 選択色を使用する場合にコメント解除
            //// 選択チェック
            //if (objCell != null)
            //{
            //    RowColorChangeAll(false, 0);
            //    RowColorChangeAll_SlipType(false, this.uGrid_Slip.Rows, 0);
            //    RowSelectClicked(objRow, 0);
            //}

            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            // 選択チェック
            if (objCell == objRow.Cells[this._detailDataSet.StcList.SelectionColumn.ColumnName])
            {
                RowSelectClicked(objRow, 0);
            }
            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
        }

        #endregion // クリックイベント

        #region キーコントロール

        /// <summary>
        /// KeyDownイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uGrid_Slip_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            try
            {
                this.uGrid_Slip.BeginUpdate();

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                ////--------------------------------------------------
                //// ENTER
                ////--------------------------------------------------
                //if (e.KeyCode == Keys.Enter)
                //{
                //    // 明細表示タブに切り替え
                //    this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_SlipDetail"];
                //}
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                switch ( e.KeyCode )
                {
                    case Keys.Space:
                        {
                            if ( this.uGrid_Slip.ActiveCell == null && this.uGrid_Slip.ActiveRow != null )
                            {
                                this.uGrid_Slip.ActiveCell = this.uGrid_Slip.ActiveRow.Cells[0];
                            }
                            if ( this.uGrid_Slip.ActiveCell != null )
                            {
                                RowSelectClicked( this.uGrid_Slip.ActiveCell.Row, 0 );
                            }
                        }
                        break;
                    case Keys.Left:
                    case Keys.Right:
                        {
                            if ( this.uGrid_Slip.ActiveCell == null && this.uGrid_Slip.ActiveRow != null )
                            {
                                this.uGrid_Slip.ActiveCell = this.uGrid_Slip.ActiveRow.Cells[0];
                            }
                        }
                        break;
                    case Keys.Up:
                        {
                            Infragistics.Win.UltraWinGrid.UltraGridRow row = uGrid_Slip.ActiveRow;
                            if ( row == null && uGrid_Slip.ActiveCell != null )
                            {
                                row = uGrid_Slip.ActiveCell.Row;
                            }

                            if ( row != null && row.Index == 0 )
                            {
                                // 先頭行から上移動
                                Control nextControl = GetNextControlForGridUpKey();
                                if ( nextControl != null )
                                {
                                    if ( uGrid_Slip.ActiveCell != null )
                                    {
                                        uGrid_Slip.ActiveCell.Selected = false;
                                        uGrid_Slip.ActiveCell = null;
                                    }
                                    if ( uGrid_Slip.ActiveRow != null )
                                    {
                                        uGrid_Slip.ActiveRow.Selected = false;
                                        uGrid_Slip.ActiveRow = null;
                                    }
                                    nextControl.Focus();
                                }
                            }
                        }
                        break;
                    default:
                        break;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
            }
            finally
            {
                this.uGrid_Slip.EndUpdate();
            }
        }
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>
        /// グリッド先頭行からのUpキー戻り先取得（伝票表示タブ・明細表示タブ用）
        /// </summary>
        /// <returns></returns>
        private Control GetNextControlForGridUpKey()
        {
            if ( uExGroupBox_ExtraCondition.Expanded )
            {
                // 詳細条件
                return _gridUpKeyBackControl;
            }
            else if ( uExGroupBox_CommonCondition.Expanded )
            {
                // 基本条件
                return tNedit_PayeeCode;
            }
            else
            {
                // 移動しない
                return null;
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
        #endregion // キーコントロール

        #endregion // 伝票一覧グリッド

        #region 伝票明細グリッド

        #region クリックイベント

        /// <summary>
        /// 伝票明細グリッド クリックイベント
        /// </summary>
        /// <param name="sender">グリッドオブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品予定計上] 選択チェックボックスの処理追加</br>
        /// </remarks>
        private void uGrid_Detail_Click(object sender, System.EventArgs e)
        {
            Infragistics.Win.UltraWinGrid.UltraGrid targetGrid = (Infragistics.Win.UltraWinGrid.UltraGrid)sender;

            // マウスポインタがグリッドのどの位置にあるかを判定する
            Point point = System.Windows.Forms.Cursor.Position;
            point = targetGrid.PointToClient(point);

            // UIElementを取得
            Infragistics.Win.UIElement objUIElement = targetGrid.DisplayLayout.UIElement.ElementFromPoint(point);
            if (objUIElement == null)
                return;

            // 列ヘッダクリックかどうかを判定
            Infragistics.Win.UltraWinGrid.ColumnHeader objHeader =
              (Infragistics.Win.UltraWinGrid.ColumnHeader)objUIElement.GetContext(typeof(Infragistics.Win.UltraWinGrid.ColumnHeader));
            if (objHeader != null) return;

            // 行クリックかどうかを判定
            Infragistics.Win.UltraWinGrid.UltraGridRow objRow =
              (Infragistics.Win.UltraWinGrid.UltraGridRow)objUIElement.GetContext(typeof(Infragistics.Win.UltraWinGrid.UltraGridRow));
            if (objRow == null) return;

            Infragistics.Win.UltraWinGrid.UltraGridCell objCell =
              (Infragistics.Win.UltraWinGrid.UltraGridCell)objUIElement.GetContext(typeof(Infragistics.Win.UltraWinGrid.UltraGridCell));

            // 選択色を使用する場合にコメント解除
            // 選択チェック
            //if (objCell != null)
            //{
            //    RowColorChangeAll(false, 1);
            //    RowColorChangeAll_SlipType(false, this.uGrid_Detail.Rows, 1);
            //    RowSelectClicked(objRow, 1);
            //}

            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            // 選択チェック
            if (objCell == objRow.Cells[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName])
            {
                RowSelectClicked(objRow, 1);                
            }
            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
        }

        #endregion // クリックイベント

        #region キーコントロール

        /// <summary>
        /// KeyDownイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uGrid_Detail_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            try
            {
                this.uGrid_Detail.BeginUpdate();

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                ////--------------------------------------------------
                //// ENTER
                ////--------------------------------------------------
                //if (e.KeyCode == Keys.Enter)
                //{
                //    //// 選択行が1行以上であれば赤伝発行タブに切り替え
                //    //if (this._detailDataSet.StcDetail.Select("SelectionCheck = true").Length > 0)
                //    //{
                //    //    //this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_RedSlip"];
                //    //    this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_BalanceList"];
                //    //}
                //}

                ////--------------------------------------------------
                //// SPACE
                ////--------------------------------------------------
                //if (e.KeyCode == Keys.Space)
                //{
                //    // フォーカスがある行を選択
                //    //if (this.uGrid_Detail.ActiveCell == null) return;
                //    //else
                //    //{
                //    //    RowSelectClicked(this.uGrid_Detail.ActiveRow, 1);
                //    //}
                //}

                ////--------------------------------------------------
                //// ESCAPE
                ////--------------------------------------------------
                //if (e.KeyCode == Keys.Escape)
                //{
                //    // 伝票一覧タブに切り替え
                //    this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_SlipList"];
                //}
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                switch ( e.KeyCode )
                {
                    case Keys.Escape:
                        {
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
                            //// 伝票一覧タブに切り替え
                            //this.uTabControl.Focus();
                            //this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_SlipList"];
                            //this.uGrid_Slip.Focus();

                            ////// Escape押下した現在行の伝票へ飛ぶ
                            ////foreach ( Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in this.uGrid_Slip.Rows )
                            ////{
                            ////    if ( (uGrid_Detail.ActiveRow.Cells[_detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName].Value as string).Trim() == (gridRow.Cells[_detailDataSet.StcList.SalesSlipNumColumn.ColumnName].Value as string).Trim() &&
                            ////          uGrid_Detail.ActiveRow.Cells[_detailDataSet.StcDetail.AcptAnOdrStatusColumn.ColumnName].Value == gridRow.Cells[_detailDataSet.StcList.AcptAnOdrStatusColumn.ColumnName].Value
                            ////        )
                            ////    {
                            ////        if ( uGrid_Slip.ActiveRow != null )
                            ////        {
                            ////            uGrid_Slip.ActiveRow.Selected = false;
                            ////        }

                            ////        uGrid_Slip.ActiveRow = gridRow;
                            ////        uGrid_Slip.ActiveRow.Selected = true;
                            ////        break;
                            ////    }
                            ////}
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL

                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                            if ( this.uGrid_Detail.ActiveCell != null )
                            {
                                this.uGrid_Detail.ActiveCell.Row.Activate();
                            }

                            // 明細部キーダウン処理（現在行の取得）
                            if ( this.uGrid_Detail.ActiveRow != null )
                            {
                                //e.NextCtrl = null;

                                // Enter押下した現在行の伝票の明細へ飛ぶ
                                Infragistics.Win.UltraWinGrid.UltraGridRow focusRow = null;
                                foreach ( Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in this.uGrid_Slip.Rows )
                                {
                                    try
                                    {
                                        int slipSlipNo = (int)gridRow.Cells[_detailDataSet.StcList.SupplierSlipNoColumn.ColumnName].Value;
                                        int slipFormal = (int)gridRow.Cells[_detailDataSet.StcList.SupplierFormalColumn.ColumnName].Value;
                                        int slipDataDiv = (int)gridRow.Cells[_detailDataSet.StcList.DataDivColumn.ColumnName].Value;
                                        int detailSlipNo = (int)uGrid_Detail.ActiveRow.Cells[_detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName].Value;
                                        int detailFormal = (int)uGrid_Detail.ActiveRow.Cells[_detailDataSet.StcDetail.SupplierFormalColumn.ColumnName].Value;
                                        int detailDataDiv = (int)uGrid_Detail.ActiveRow.Cells[_detailDataSet.StcDetail.DataDivColumn.ColumnName].Value;

                                        if ( detailSlipNo == slipSlipNo && detailFormal == slipFormal && detailDataDiv == slipDataDiv )
                                        {
                                            focusRow = gridRow;
                                            break;
                                        }
                                    }
                                    catch
                                    {
                                    }
                                }

                                // 移動先が決定した場合のみ
                                if ( focusRow != null )
                                {
                                    this.uTabControl.Focus();
                                    this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_SlipList"];
                                    uGrid_Slip.Focus();


                                    if ( uGrid_Slip.ActiveRow != null )
                                    {
                                        uGrid_Slip.ActiveRow.Selected = false;
                                    }

                                    uGrid_Slip.ActiveRow = focusRow;
                                    uGrid_Slip.ActiveRow.Selected = true;
                                }
                            }
                            else
                            {
                                //e.NextCtrl = uCheckEditor_StatusBar_AutoFillToGridColumn;
                                //e.NextCtrl = null;
                            }
                            //break;
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD
                        }
                        break;
                    case Keys.Space:
                        {
                            if ( this.uGrid_Detail.ActiveCell == null && this.uGrid_Detail.ActiveRow != null )
                            {
                                this.uGrid_Detail.ActiveCell = this.uGrid_Detail.ActiveRow.Cells[0];
                            }
                            if ( this.uGrid_Detail.ActiveCell != null )
                            {
                                RowSelectClicked( this.uGrid_Detail.ActiveCell.Row, 1 );
                            }
                        }
                        break;
                    case Keys.Left:
                    case Keys.Right:
                        {
                            if ( this.uGrid_Detail.ActiveCell == null && this.uGrid_Detail.ActiveRow != null )
                            {
                                this.uGrid_Detail.ActiveCell = this.uGrid_Detail.ActiveRow.Cells[0];
                            }
                        }
                        break;
                    case Keys.Up:
                        {
                            Infragistics.Win.UltraWinGrid.UltraGridRow row = uGrid_Detail.ActiveRow;
                            if ( row == null && uGrid_Detail.ActiveCell != null )
                            {
                                row = uGrid_Detail.ActiveCell.Row;
                            }

                            if ( row != null && row.Index == 0 )
                            {
                                // 先頭行から上移動
                                Control nextControl = GetNextControlForGridUpKey();
                                if ( nextControl != null )
                                {
                                    if ( uGrid_Detail.ActiveCell != null )
                                    {
                                        uGrid_Detail.ActiveCell.Selected = false;
                                        uGrid_Detail.ActiveCell = null;
                                    }
                                    if ( uGrid_Detail.ActiveRow != null )
                                    {
                                        uGrid_Detail.ActiveRow.Selected = false;
                                        uGrid_Detail.ActiveRow = null;
                                    }
                                    nextControl.Focus();
                                }
                            }
                        }
                        break;
                    default:
                        break;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
            }
            finally
            {
                this.uGrid_Detail.EndUpdate();
            }
        }

        #endregion // キーコントロール

        #endregion // 伝票明細グリッド

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/18 ADD
        # region [残高一覧グリッド]
        /// <summary>
        /// 残高一覧グリッドキーダウンイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uGrid_BalanceList_KeyDown( object sender, KeyEventArgs e )
        {
            if ( !e.Shift )
            {
                switch ( e.KeyCode )
                {
                    case Keys.Up:
                        {
                            Infragistics.Win.UltraWinGrid.UltraGridRow row = uGrid_BalanceList.ActiveRow;
                            if ( row == null && uGrid_BalanceList.ActiveCell != null )
                            {
                                row = uGrid_BalanceList.ActiveCell.Row;
                            }

                            if ( row != null && row.Index == 0 )
                            {
                                // 先頭行から上移動
                                if ( uGrid_BalanceList.ActiveCell != null )
                                {
                                    uGrid_BalanceList.ActiveCell.Selected = false;
                                    uGrid_BalanceList.ActiveCell = null;
                                }
                                if ( uGrid_BalanceList.ActiveRow != null )
                                {
                                    uGrid_BalanceList.ActiveRow.Selected = false;
                                    uGrid_BalanceList.ActiveRow = null;
                                }
                                tComboEditor_rl_RemainType.Focus();
                            }
                        }
                        break;
                    default:
                        break;
                }
            }
        }
        # endregion
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/18 ADD

        #endregion // グリッドコントロールイベント

        #region フォントサイズ変更

        /// <summary>
        /// フォントサイズ変更
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tComboEditor_StatusBar_FontSize_ValueChanged(object sender, EventArgs e)
        {
            int a = this.StrToIntDefOfValue(this.tComboEditor_StatusBar_FontSize.Value, CT_DEF_FONT_SIZE);
            float fontPoint = (float)a;

            if (this._selectedMainTabKey == "uTab_SlipList")
            {
                this.uGrid_Slip.DisplayLayout.Appearance.FontData.SizeInPoints = fontPoint;
                this.uGrid_Slip.Refresh();
            }
            else if (this._selectedMainTabKey == "uTab_SlipDetail")
            {
                this.uGrid_Detail.DisplayLayout.Appearance.FontData.SizeInPoints = fontPoint;
                this.uGrid_Detail.Refresh();
            }
            else if (this._selectedMainTabKey == "uTab_RemainList")
            {
                this.uGrid_BalanceList.DisplayLayout.Appearance.FontData.SizeInPoints = fontPoint;
                this.uGrid_BalanceList.Refresh();
            }

            uCheckEditor_StatusBar_AutoFillToGridColumn_CheckedChanged(null, null);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <param name="defaultNo"></param>
        /// <returns></returns>
        private int StrToIntDefOfValue(object obj, int defaultNo)
        {
            try
            {
                return (int)obj;
            }
            catch
            {
                return defaultNo;
            }
        }

        #endregion // フォントサイズ変更

        #endregion // コントロールイベント

        #region ツールバー

        /// <summary>
        /// ツールバークリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>             [仕入返品予定計上] 伝票検索,明細検索,削除,返品計上処理追加</br>
        /// </remarks>
        private void tToolbarsManager_ToolClick(object sender, Infragistics.Win.UltraWinToolbars.ToolClickEventArgs e)
        {
            switch (e.Tool.Key)
            {
                #region 終了ボタン
                case "ButtonTool_Close":
                    {
                        //this._dialogResult = DialogResult.Cancel;
                        this.Close();
                        break;
                    }
                #endregion // 終了ボタン

                #region 検索ボタン
                case "ButtonTool_Search":
                    // 検索ボタン
                    {
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                        //SearchSlipDetailList();
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                        this._custPrtPprBackUp = null;
                        this._custPrtPprBlnceBackUp = null;

                        // 検索実行
                        Control errorControl = SearchSlipDetailList();

                        this.Activate(); // ADD BY zhujw 2014/06/11 RedMine#42650 Windows8.1動作検証結果_得意先電子元帳から起動した他機能が前面表示される 修正

                        // エラーコントロールに移動
                        if ( errorControl != null )
                        {
                            errorControl.Focus();
                        }
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                        break;
                    }
                #endregion // 検索ボタン

                #region 印刷ボタン
                case "ButtonTool_Print":
                    {
                        directPrint();
                        break;
                    }
                #endregion // 印刷ボタン

                #region PDF出力ボタン
                case "ButtonTool_PDF":
                    {
                        outputPDF();
                        break;
                    }
                #endregion // PDF出力ボタン

                #region テキスト出力
                case "ButtonTool_ExtractText":
                    {
                        exportIntoTextFile();
                        break;
                    }
                #endregion // テキスト出力

                #region EXCEL出力
                case "ButtonTool_ExtractExcel":
                    {
                        exportIntoExcelData();
                        break;
                    }
                #endregion // EXCEL出力

                #region 赤伝発行ボタン
                //case "ButtonTool_IssueRedSlip":
                //    {
                //        // 伝票一覧タブ
                //        if (this._selectedMainTabKey == "uTab_SlipList")
                //        {
                //            // １伝票のみ選択されていた場合
                //            // 該当する全ての明細を選択状態にし、赤伝発行タブへ切り替え
                //            if (this._selectedRowCountSlip == 1)
                //            {
                //                if (selectAllDetailFromSelectedSlip())
                //                {
                //                    this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_RedSlip"];
                //                }
                //            }
                //            // ２伝票以上はボタンが押せないので省略
                //        }
                //        // 明細タブ
                //        if (this._selectedMainTabKey == "uTab_SlipDetail")
                //        {
                //            // 選択行が1行以上であれば赤伝発行タブに切り替え
                //            if (this._detailDataSet.StcDetail.Select("SelectionCheck = true").Length > 0)
                //            {
                //                this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_RedSlip"];
                //            }
                //        }
                //        // 赤伝タブ
                //        if (this._selectedMainTabKey == "uTab_RedSlip")
                //        {
                //            // 赤伝発行処理
                //            issueRedSlip();
                //        }

                //        break;
                //    }
                #endregion

                // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                #region 返品計上ボタン
                case "ButtonTool_IssueRedSlip":
                    {
                        // 伝票一覧タブ
                        if (this._selectedMainTabKey == "uTab_SlipList")
                        {
                            // １伝票のみ選択されていた場合
                            // 該当する全ての明細を選択状態にし、返品計上タブへ切り替え
                            if (this._selectedRowCountSlip == 1)
                            {
                                this.tabFlg = false;
                                if (SelectAllDetailFromSelectedSlip())
                                {
                                    this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_RedSlip"];
                                }
                                this.tabFlg = true;
                            }
                            // ２伝票以上はボタンが押せないので省略
                        }

                        // 明細タブ
                        if (this._selectedMainTabKey == "uTab_SlipDetail")
                        {
                            // 選択行が1行以上であれば返品計上タブに切り替え
                            if (this._detailDataSet.StcDetail.Select("SelectionCheck = true").Length > 0)
                            {
                                this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_RedSlip"];
                            }
                        }

                        // 返品計上タブ
                        if (this._selectedMainTabKey == "uTab_RedSlip")
                        {
                            StartIssueRedSlip();
                        }

                        break;
                    }
                #endregion 返品計上ボタン
                // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

                #region 伝票再発行ボタン
                case "ButtonTool_ReissueSlip":
                    {
                        //ReisssueSlip();
                        break;
                    }
                #endregion 伝票再発行ボタン

                #region 設定ボタン
                case "ButtonTool_Configuration":
                    {
                        openSetting();
                        break;
                    }
                #endregion

                #region 行選択ボタン
                case "ButtonTool_RowSelect":
                    {
                        CurrentRowSelect();
                        break;
                    }
                #endregion // 行選択ボタン

                #region 行検索ボタン
                case "ButtonTool_RowSearchStart":
                    {
                        rowSearchStart();
                        break;
                    }
                #endregion // 行検索ボタン

                #region 得意先電子元帳呼出

                case "ButtonTools_Denshi":
                    {
                        InvokeCustomerElecNote();
                        break;
                    }

                #endregion // 得意先電子元帳呼出

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                # region クリアボタン
                case "ButtonTool_Clear":
                    {
                        ClearInput();
                        break;
                    }
                # endregion
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

                // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                #region 削除ボタン
                case "ButtonTool_SlipDelete":
                    {
                        SlipDelete();
                        break;
                    }
                #endregion

                #region 明細選択ボタン
                case "ButtonTool_DetailSelect":
                    {
                        DetailSelectSetting();
                        break;
                    }
                #endregion

                #region 伝票選択ボタン
                case "ButtonTool_StockSlipSelect":
                    {
                        StockSlipSelectSetting();
                        break;
                    }
                #endregion
                // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                default: break;
            }
        }

        #endregion // ツールバー

        #region 行選択

        /// <summary>
        /// フォーカスがグリッドにある場合、選択
        /// </summary>
        private void CurrentRowSelect()
        {
            if (this._selectedMainTabKey == "uTab_SlipList")
            {
                if (this.uGrid_Slip.ActiveRow != null)
                {
                    this.RowSelectClicked(this.uGrid_Slip.ActiveRow, 0);
                }
            }
            else if (this._selectedMainTabKey == "uTab_SlipDetail")
            {
                if (this.uGrid_Detail.ActiveRow != null)
                {
                    this.RowSelectClicked(this.uGrid_Detail.ActiveRow, 0);
                }
            }
        }

        #endregion // 行選択

        #region 設定

        /// <summary>
        /// 設定ダイアログを表示します
        /// </summary>
        private void openSetting()
        {
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //PMKOU04004UA settingForm = new PMKOU04004UA();
            //DialogResult dialogResult = settingForm.ShowDialog(this);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            DialogResult dialogResult = _settingForm.ShowDialog( this );
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
            
            if (dialogResult == DialogResult.OK)
            {
                // 現在のところ復帰時に特に行うことはない
            }
        }

        #endregion // 設定

        #region コンボボックス入力取扱い

        /// <summary>
        /// コンボボックス入力取扱い(伝票番号)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tComboEditor_StockSlipCd_Leave(object sender, EventArgs e)
        {
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 DEL
            //bool found = false;
            //string uitext = this.tComboEditor_StockSlipCd.Text.Trim();
            //foreach (Infragistics.Win.ValueListItem v in this.tComboEditor_StockSlipCd.Items)
            //{
            //    if (v.DisplayText.Equals(uitext))
            //    {
            //        found = true;
            //    }
            //}

            //// 編集されていたら初期値へ
            //if (!found) this.tComboEditor_StockSlipCd.SelectedIndex = 0;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 DEL
        }

        /// <summary>
        /// コンボボックス入力取扱い
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tComboEditor_PartySalesSlipNumFuzzy_ValueChanged(object sender, EventArgs e)
        {
            bool found = false;
            string uitext = this.tComboEditor_PartySalesSlipNumFuzzy.Text.Trim();
            foreach (Infragistics.Win.ValueListItem v in this.tComboEditor_PartySalesSlipNumFuzzy.Items)
            {
                if (v.DisplayText.Equals(uitext))
                {
                    found = true;
                }
            }

            // 編集されていたら初期値へ
            if (!found) this.tComboEditor_PartySalesSlipNumFuzzy.SelectedIndex = 0;
        }

        /// <summary>
        /// コンボボックス入力取扱い
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tComboEditor_DataSendCode_ValueChanged(object sender, EventArgs e)
        {
            bool found = false;
            string uitext = this.tComboEditor_DataSendCode.Text.Trim();
            foreach (Infragistics.Win.ValueListItem v in this.tComboEditor_DataSendCode.Items)
            {
                if (v.DisplayText.Equals(uitext))
                {
                    found = true;
                }
            }

            // 編集されていたら初期値へ
            if (!found) this.tComboEditor_DataSendCode.SelectedIndex = 0;
        }

        /// <summary>
        /// コンボボックス入力取扱い
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tComboEditor_SupplierSlipNote1Fuzzy_ValueChanged(object sender, EventArgs e)
        {
            bool found = false;
            string uitext = this.tComboEditor_SupplierSlipNote1Fuzzy.Text.Trim();
            foreach (Infragistics.Win.ValueListItem v in this.tComboEditor_SupplierSlipNote1Fuzzy.Items)
            {
                if (v.DisplayText.Equals(uitext))
                {
                    found = true;
                }
            }

            // 編集されていたら初期値へ
            if (!found) this.tComboEditor_SupplierSlipNote1Fuzzy.SelectedIndex = 0;
        }

        /// <summary>
        /// コンボボックス入力取扱い
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tComboEditor_SupplierSlipNote2Fuzzy_ValueChanged(object sender, EventArgs e)
        {
            bool found = false;
            string uitext = this.tComboEditor_SupplierSlipNote2Fuzzy.Text.Trim();
            foreach (Infragistics.Win.ValueListItem v in this.tComboEditor_SupplierSlipNote2Fuzzy.Items)
            {
                if (v.DisplayText.Equals(uitext))
                {
                    found = true;
                }
            }

            // 編集されていたら初期値へ
            if (!found) this.tComboEditor_SupplierSlipNote2Fuzzy.SelectedIndex = 0;
        }

        /// <summary>
        /// コンボボックス入力取扱い
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tComboEditor_UoeRemark1Fuzzy_ValueChanged(object sender, EventArgs e)
        {
            bool found = false;
            string uitext = this.tComboEditor_UoeRemark1Fuzzy.Text.Trim();
            foreach (Infragistics.Win.ValueListItem v in this.tComboEditor_UoeRemark1Fuzzy.Items)
            {
                if (v.DisplayText.Equals(uitext))
                {
                    found = true;
                }
            }

            // 編集されていたら初期値へ
            if (!found) this.tComboEditor_UoeRemark1Fuzzy.SelectedIndex = 0;
        }

        /// <summary>
        /// コンボボックス入力取扱い
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tComboEditor_UoeRemark2Fuzzy_ValueChanged(object sender, EventArgs e)
        {
            bool found = false;
            string uitext = this.tComboEditor_UoeRemark2Fuzzy.Text.Trim();
            foreach (Infragistics.Win.ValueListItem v in this.tComboEditor_UoeRemark2Fuzzy.Items)
            {
                if (v.DisplayText.Equals(uitext))
                {
                    found = true;
                }
            }

            // 編集されていたら初期値へ
            if (!found) this.tComboEditor_UoeRemark2Fuzzy.SelectedIndex = 0;
        }

        /// <summary>
        /// コンボボックス入力取扱い
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tComboEditor_GoodsNameFuzzy_ValueChanged(object sender, EventArgs e)
        {
            bool found = false;
            string uitext = this.tComboEditor_GoodsNameFuzzy.Text.Trim();
            foreach (Infragistics.Win.ValueListItem v in this.tComboEditor_GoodsNameFuzzy.Items)
            {
                if (v.DisplayText.Equals(uitext))
                {
                    found = true;
                }
            }

            // 編集されていたら初期値へ
            if (!found) this.tComboEditor_GoodsNameFuzzy.SelectedIndex = 0;
        }

        /// <summary>
        /// コンボボックス入力取扱い
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tComboEditor_GoodsNoFuzzy_ValueChanged(object sender, EventArgs e)
        {
            bool found = false;
            string uitext = this.tComboEditor_GoodsNoFuzzy.Text.Trim();
            foreach (Infragistics.Win.ValueListItem v in this.tComboEditor_GoodsNoFuzzy.Items)
            {
                if (v.DisplayText.Equals(uitext))
                {
                    found = true;
                }
            }

            // 編集されていたら初期値へ
            if (!found) this.tComboEditor_GoodsNoFuzzy.SelectedIndex = 0;
        }

        /// <summary>
        /// コンボボックス入力取扱い
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tComboEditor_StockOrderDivCd_ValueChanged(object sender, EventArgs e)
        {
            bool found = false;
            string uitext = this.tComboEditor_StockOrderDivCd.Text.Trim();
            foreach (Infragistics.Win.ValueListItem v in this.tComboEditor_StockOrderDivCd.Items)
            {
                if (v.DisplayText.Equals(uitext))
                {
                    found = true;
                }
            }

            // 編集されていたら初期値へ
            if (!found) this.tComboEditor_StockOrderDivCd.SelectedIndex = 0;
        }

        /// <summary>
        /// コンボボックス入力取扱い
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tComboEditor_DeleteFlag_ValueChanged(object sender, EventArgs e)
        {
            bool found = false;
            string uitext = this.tComboEditor_DeleteFlag.Text.Trim();
            foreach (Infragistics.Win.ValueListItem v in this.tComboEditor_DeleteFlag.Items)
            {
                if (v.DisplayText.Equals(uitext))
                {
                    found = true;
                }
            }

            // 編集されていたら初期値へ
            if (!found) this.tComboEditor_DeleteFlag.SelectedIndex = 0;
        }

        #endregion // コンボボックス入力取扱い

        #region 伝票再発行

        //private void ReisssueSlip()
        //{
        //    DataRow[] rows = this._detailDataSet.StcList.Select("Selection = true");

        //    // 伝票が選択されている場合のみ
        //    if (rows.Length > 0)
        //    {
        //        // 初期処理
        //        DCCMN02000UA printDisp = new DCCMN02000UA(); // 伝票印刷情報設定画面インスタンス生成
        //        SalesSlipPrintCndtn.SalesSlipKey key = new SalesSlipPrintCndtn.SalesSlipKey(); // 伝票印刷用Keyインスタンス生成
        //        List<SalesSlipPrintCndtn.SalesSlipKey> keyList = new List<SalesSlipPrintCndtn.SalesSlipKey>(); // 伝票印刷用KeyListインスタンス生成
                
        //        // キー情報セット
        //        foreach (DataRow row in rows)
        //        {
        //            key = new SalesSlipPrintCndtn.SalesSlipKey();
        //            key.AcptAnOdrStatus = (int)row[this._detailDataSet.StcList.AcptAnOdrStatusColumn.ColumnName];
        //            key.SalesSlipNum = row[this._detailDataSet.StcList.SalesSlipNumColumn.ColumnName].ToString();
        //            keyList.Add(key);
        //        }

        //        // 印刷情報パラメータセット
        //        SalesSlipPrintCndtn salesSlipPrintCndtn = new SalesSlipPrintCndtn();
        //        salesSlipPrintCndtn.EnterpriseCode = this._enterpriseCode;
        //        salesSlipPrintCndtn.SalesSlipKeyList = keyList;

        //        // 印刷ウィンドウ表示
        //        printDisp.ShowDialog(salesSlipPrintCndtn, false);
        //    }
        //}

        #endregion

        #region 印刷

        ///// <summary>
        ///// 印刷
        ///// </summary>
        ///// <param name="preview"></param>
        //private void Print(bool preview)
        //{

        //    // 明細一覧が存在しない場合は実行不能
        //    if (this._detailDataSet.StcDetail.Rows.Count == 0)
        //    {
        //        TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name, 
        //            MSG_NO_SELECTED_DATA, -1, MessageBoxButtons.OK);
        //        return;
        //    }

        //    // 印刷オブジェクト呼び出し
        //    SFCMN06001U printDialog = new SFCMN06001U();
        //    SFCMN06002C printInfo = new SFCMN06002C();
        //    DCCMN04000UA printControl = new DCCMN04000UA();

        //    printInfo.printmode = (preview) ? 2 : 3;    // 2：プレビュー、3：印刷
        //    printInfo.pdfopen = false;
        //    printInfo.pdftemppath = "";

        //    // 直接印刷バージョン
        //    printInfo.enterpriseCode = this._enterpriseCode;
        //    printInfo.kidopgid = "PMKOU04001U";				// 起動PGID

        //    // PDF出力履歴用
        //    printInfo.prpnm = "";
        //    //printInfo.PrintPaperSetCd = 0;

        //    PrintCndtn printCondition = new PrintCndtn();
        //    string printSectionCd = this.tEdit_SectionCodeAllowZero.Text.Trim();
        //    if (printSectionCd == "00") printSectionCd = string.Empty;   // 00は選択なし
        //    string printCustomerCd = this.tNedit_SupplierCd.Text.Trim();
        //    string customerMngSectionCd = string.Empty;
        //    int customerClaimCd = 0;
        //    int status = 0;

        //    if (!String.IsNullOrEmpty(printCustomerCd))
        //    {
        //        // 得意先マスタから管理拠点を取得
        //        CustomerInfo customerInfo;
        //        status = this._customerInfoAcs.ReadDBData(this._enterpriseCode, this.tNedit_SupplierCd.GetInt(), out customerInfo);
        //        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //        {
        //            customerMngSectionCd = customerInfo.MngSectionCode; // 得意先マスタの管理拠点コード
        //            customerClaimCd = customerInfo.ClaimCode;           // 得意先マスタの請求先
        //        }
        //    }

        //    // レイアウトのタイプを計算
        //    if (!String.IsNullOrEmpty(printSectionCd) && !String.IsNullOrEmpty(printCustomerCd))
        //    {
        //        // 拠点コード あり, 得意先コード あり
        //        if (printSectionCd.Equals(customerMngSectionCd))
        //        {
        //            // 管理拠点コード = 画面の拠点コード
        //            printCondition.LayoutType = 1;
        //            printInfo.PrintPaperSetCd = 0;// レイアウトA
        //        }
        //        else
        //        {
        //            // 管理拠点コード != 画面の拠点コード
        //            printCondition.LayoutType = 2;
        //            printInfo.PrintPaperSetCd = 0;// レイアウトA
        //        }
        //    }
        //    if (!String.IsNullOrEmpty(printSectionCd) && String.IsNullOrEmpty(printCustomerCd))
        //    {
        //        // 拠点コード あり, 得意先コード なし
        //        printCondition.LayoutType = 3;
        //        printInfo.PrintPaperSetCd = 1;// レイアウトB
        //    }
        //    if (String.IsNullOrEmpty(printSectionCd) && !String.IsNullOrEmpty(printCustomerCd))
        //    {
        //        // 拠点コード なし, 得意先コード あり
        //        if (customerClaimCd == this.tNedit_SupplierCd.GetInt())
        //        {
        //            // 得意先コード = 得意先マスタの請求先
        //            printCondition.LayoutType = 4;
        //            printInfo.PrintPaperSetCd = 0;// レイアウトA
        //        }
        //        else
        //        {
        //            // 得意先コード != 得意先マスタの請求先
        //            printCondition.LayoutType = 5;
        //            printInfo.PrintPaperSetCd = 0;// レイアウトA
        //        }
        //    }
        //    if (String.IsNullOrEmpty(printSectionCd) && String.IsNullOrEmpty(printCustomerCd))
        //    {
        //        // 拠点コード なし, 得意先コード なし
        //        printCondition.LayoutType = 6;
        //        printInfo.PrintPaperSetCd = 1;// レイアウトB
        //    }

        //    printCondition.SectionCd = this.tEdit_SectionCodeAllowZero.Text.Trim();
        //    printCondition.SectionName = this.uLabel_SectionNm.Text.Trim();
        //    printCondition.CustomerCd = this.tNedit_SupplierCd.Text.Trim().PadLeft(8, '0');
        //    printCondition.CustomerName = this.uLabel_SupplierName.Text.Trim();
        //    printCondition.StartDt = this.tDateEdit_StockDateSt.GetDateTime();
        //    printCondition.EndDt = this.tDateEdit_StockDateEd.GetDateTime();
        //    if (!String.IsNullOrEmpty(printCustomerCd))
        //    {
        //        printCondition.TotalDt = this._prevTotalDay;
        //        printCondition.LastTimeDemand = long.Parse(this._detailDataSet.BalanceTotal.Rows[0]["LastTimeDemand"].ToString());
        //        printCondition.ThisTimeDmdNrml = long.Parse(this._detailDataSet.BalanceTotal.Rows[0]["ThisTimeDmdNrml"].ToString());
        //        printCondition.ForwardedAmount = long.Parse(this._detailDataSet.BalanceTotal.Rows[0]["LastTimeDemand"].ToString()) - long.Parse(this._detailDataSet.BalanceTotal.Rows[0]["ThisTimeDmdNrml"].ToString());
        //        printCondition.ThisSalesPriceTotal = long.Parse(this._detailDataSet.BalanceTotal.Rows[0]["ThisSalesPriceTotal"].ToString());
        //        printCondition.OfsThisSalesTax = long.Parse(this._detailDataSet.BalanceTotal.Rows[0]["OfsThisSalesTax"].ToString());
        //        printCondition.TotalAmount = long.Parse(this._detailDataSet.BalanceTotal.Rows[0]["ThisSalesPriceTotal"].ToString()) + long.Parse(this._detailDataSet.BalanceTotal.Rows[0]["OfsThisSalesTax"].ToString());
        //        printCondition.AfCalBlc = long.Parse(this._detailDataSet.BalanceTotal.Rows[0]["AfCalBlc"].ToString());
        //        printCondition.SlipCount = long.Parse(this._detailDataSet.BalanceTotal.Rows[0]["SlipCount"].ToString());
        //    }
        //    printInfo.jyoken = (object)printCondition;

        //    // データ作成
        //    DataTable dt = null;
        //    getPrintDataSetFromDataView(out dt);
        //    printInfo.rdData = dt;

        //    printDialog.PrintInfo = printInfo;
        //    DialogResult result = printDialog.ShowDialog(this);
        //    if (result == DialogResult.Cancel)
        //    {
        //        return;
        //    }

        //    //int status = printControl.Print(printInfo);
        //    //if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
        //    //{
        //    //    if (preview)
        //    //    {
        //    //        //this.printControl.PDFViewer.Dock = DockStyle.Fill;
        //    //        //this.uTab_View.Controls.Add(this._printControl.PDFViewer);
        //    //        //this.uTabControl.Tabs[TAB_PREVIEW].Visible = true;
        //    //        //this.uTabControl.SelectedTab = this.uTabControl.Tabs[TAB_PREVIEW];
        //    //    }
        //    //}
        //}

        //private void getPrintDataSetFromDataView(out DataTable dt)
        //{
        //    //printData = null;

        //    // 明細グリッドからDataSetを作成
        //    //DataView dView = (DataView)this.uGrid_Detail.DataSource;
        //    //DataTable dTable = dView.ToTable();

        //    dt = new DataTable();
        //    DataRow row = null;
        //    dt.Columns.Add("SectionCd2");
        //    dt.Columns.Add("SectionName2");
        //    dt.Columns.Add("CustomerCd2");
        //    dt.Columns.Add("CustomerName2");
        //    dt.Columns.Add(this._detailDataSet.StcDetail.AddUpADateColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.SalesSlipCdNameColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.SalesEmployeeNmColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.FrontEmployeeNmColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.SalesInputNameColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.CategoryNoColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.ModelFullNameColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.FullModelColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.CustSlipNoColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.CarMngCodeColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.FirstEntryDateColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.SearchFrameNoColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.GoodsNoColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.GoodsNameColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.ListPriceTaxExcFlColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.ShipmentCntColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.SalesUnitCostColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.SalesUnPrcTaxExcFlColumn.ColumnName);
        //    dt.Columns.Add(this._detailDataSet.StcDetail.SalesMoneyTaxExcColumn.ColumnName);
        //    dt.Columns.Add("ConsumeTax");
        //    dt.Columns.Add(this._detailDataSet.StcDetail.SlipNoteColumn.ColumnName);


        //    foreach (DataRow rowOrg in this._detailDataSet.StcDetail.Rows)
        //    //foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in this.uGrid_Detail.Rows)
        //    {
        //        if (rowOrg[this._detailDataSet.StcDetail.SalesSlipCdNameColumn.ColumnName].ToString() != "入金")
        //        {
        //            row = dt.NewRow();
        //            row["SectionCd2"] = rowOrg[this._detailDataSet.StcDetail.SectionCdColumn.ColumnName];
        //            row["SectionName2"] = rowOrg[this._detailDataSet.StcDetail.SectionGuideNameColumn.ColumnName];
        //            row["CustomerCd2"] = rowOrg[this._detailDataSet.StcDetail.CustomerCodeColumn.ColumnName];
        //            row["CustomerName2"] = rowOrg[this._detailDataSet.StcDetail.CustomerSnmColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.AddUpADateColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.AddUpADateColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.SalesSlipCdNameColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.SalesSlipCdNameColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.SalesEmployeeNmColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.SalesEmployeeNmColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.FrontEmployeeNmColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.FrontEmployeeNmColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.SalesInputNameColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.SalesInputNameColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.CategoryNoColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.CategoryNoColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.ModelFullNameColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.ModelFullNameColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.FullModelColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.FullModelColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.CustSlipNoColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.CustSlipNoColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.CarMngCodeColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.CarMngCodeColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.FirstEntryDateColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.FirstEntryDateColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.SearchFrameNoColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.SearchFrameNoColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.GoodsNoColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.GoodsNoColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.GoodsNameColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.GoodsNameColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.ListPriceTaxExcFlColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.ListPriceTaxExcFlColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.ShipmentCntColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.ShipmentCntColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.SalesUnitCostColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.SalesUnitCostColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.SalesUnPrcTaxExcFlColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.SalesUnPrcTaxExcFlColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.SalesMoneyTaxExcColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.SalesMoneyTaxExcColumn.ColumnName];
        //            row["ConsumeTax"] = rowOrg[this._detailDataSet.StcDetail.SalesPriceConsTaxColumn.ColumnName];
        //            row[this._detailDataSet.StcDetail.SlipNoteColumn.ColumnName]
        //                = rowOrg[this._detailDataSet.StcDetail.SlipNoteColumn.ColumnName];
        //            dt.Rows.Add(row);
        //        }
             
        //    }
        //}

        #endregion // 印刷

        #region 直接印刷

        private void directPrint()
        {
            //Print(false);
        }

        #endregion // 直接印刷

        #region PDF出力

        private void outputPDF()
        {
            //Print(true);
        }

        #endregion // PDF出力

        #region テキスト出力

        /// <summary>
        /// テキスト出力
        /// </summary>
        /// <remarks>
        /// <br>Note       : 残高一覧をテキスト出力します。</br>
        /// <br>Update Note : 2010/07/20 chenyd</br>
        /// <br>           　テキスト出力対応</br>
        /// <br>Update Note: 2013/06/12 liusy</br>
        /// <br>             Redmine#35640 仕入先電子元帳 テキスト出力 消費税が出力されないの修正(#18の件)</br>
        /// <br>Update Note: 2015/09/17 田建委</br>
        /// <br>管理番号   : 11170170-00</br>
        /// <br>           : Redmine#47006 テキスト出力の時、返品金額などをマイナスで出力する対応</br>
        /// <br>Update Note: 2019/08/19 陳艶丹</br>
        /// <br>           : 11570163-00 PMKOBETSU-1379 テキスト出力操作ログおよび出力時アラートメッセージ追加対応</br>
        /// <remarks>
        private void exportIntoTextFile()
        {
            // タブが「残高」の時は終了(そもそもボタンが有効でないはず)
            if (this._selectedMainTabKey == "uTab_RemainList")
            {
                RemainExportIntoTextFile(); // ADD 2010/07/20 
                return;
            }

            // 設定値があればロード
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //PMKOU04004UA settingConstForm = new PMKOU04004UA();
            //settingConstForm.Deserialize();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            PMKOU04004UA settingConstForm = this._settingForm;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

            // 設定オブジェクトを取得
            this._userSetting = settingConstForm.UserSetting;
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            string outputFileName = this._userSetting.OutputFileName;
            if ( String.IsNullOrEmpty( this._userSetting.OutputFileName ) )
            {
                // ファイル名が指定されていないとエラー
                TMsgDisp.Show( this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                    MSG_OUTPUTFILENAME_NOTFOUND, -1, MessageBoxButtons.OK );

                return;
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //string outputFileName = this._userSetting.OutputFileName;
            //string beforeSelectedPatternName = this._userSetting.SelectedPatternName;

            //// ダイアログ表示
            //PMKOU04001UB dialogForm = new PMKOU04001UB();
            //dialogForm.OutputFileName = this._userSetting.OutputFileName;
            //dialogForm.OutputPattern = this._userSetting.OutputPattern;
            //DialogResult result = dialogForm.ShowDialog();
            //if (result == DialogResult.Cancel)
            //{
            //    return;
            //}
            //else
            //{
            //    this._userSetting.OutputFileName = dialogForm.OutputFileName;
            //    this._userSetting.OutputPattern = dialogForm.OutputPattern;
            //    this._userSetting.SelectedPatternName = dialogForm.SelectedPatternName;
            //}
            //if (String.IsNullOrEmpty(this._userSetting.OutputFileName))
            //{
            //    // ファイル名が指定されていないとエラー
            //    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
            //        MSG_OUTPUTFILENAME_NOTFOUND, -1, MessageBoxButtons.OK);

            //    return;
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL

            //// 確認メッセージ
            //if (TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_QUESTION, this.Name,
            //    MSG_CONFIRM_OUTPUTFILE + "\r\n\r\n出力ファイル：\r\n" + this._userSetting.OutputFileName, 
            //    -1, MessageBoxButtons.YesNo) == DialogResult.No)
            //{
            //    return;
            //}
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD

            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 ----->>>>>
            // エラーメッセージ
            string errMsg = string.Empty;
            // アラート表示
            int logStatus = TextOutPutOprtnHisLogAcsObj.ShowTextOutPut(this, out errMsg);
            // アラートでOKボタンが押されない場合、テキスト出力が実行できない
            if (logStatus != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                if (!string.IsNullOrEmpty(errMsg))
                {
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_STOP, this.Name,
                                errMsg, logStatus, MessageBoxButtons.OK);
                }
                // 中止
                return;
            }
            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 -----<<<<<

            // 確認ダイアログ生成・表示
            PMKOU04001UB textOutDialog = new PMKOU04001UB();
            textOutDialog.UserSetting = _userSetting;
            if ( textOutDialog.ShowDialog() != DialogResult.OK )
            {
                // 中止
                return;
            }

            // ShowDialogにより、_userSettingは書き変わっているので設定XML更新
            settingConstForm.Serialize();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 ----->>>>>
            // エラーメッセージ
            errMsg = string.Empty;
            TextOutPutOprtnHisLogWork textOutPutOprtnHisLogWorkObj = null;
            // テキスト出力操作ログ登録及び出力時アラートメッセージ表示処理
            logStatus = TextOutPutWrite(1, string.Empty, null, ref textOutPutOprtnHisLogWorkObj, out errMsg);

            // ログ登録異常場合、テキスト出力が実行できない
            if (logStatus != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                if (!string.IsNullOrEmpty(errMsg))
                {
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_STOP, this.Name,
                                errMsg, logStatus, MessageBoxButtons.OK);
                }
                // 中止
                return;
            }
            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 -----<<<<<

            String typeStr = string.Empty;
            Char typeChar = new char();
            Byte typeByte = new byte();
            DateTime typeDate = new DateTime();

            Int16 typeInt16 = new short();
            Int32 typeInt32 = new int();
            Int64 typeInt64 = new long();
            Single typeSingle = new float();
            Double typeDouble = new double();
            Decimal typeDecimal = new decimal();

            FormattedTextWriter tw = new FormattedTextWriter();

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            # region // DEL
            //if (!beforeSelectedPatternName.Equals(this._userSetting.SelectedPatternName) || this._userSetting.OutputStyle == 3)
            //{
            //    // パターンを分解
            //    _patternSetting = new string[9];
            //    settingConstForm.Degradation(this._userSetting.SelectedPatternName, out _patternSetting);

            //    // パターンの構成
            //    // 区切り文字(タブ・任意・固定長）/区切り文字任意/  0-1
            //    // 括り文字(”・任意）/括り文字任意/                2-3
            //    // 数値括り（する／しない)                          4
            //    // 文字括り（する／しない)                          5
            //    // タイトル行（あり／なし）                         6
            //    // 伝票出力項目リスト (32項目x3文字) 基本的に表示順の数字,非表示の場合は+100, 必ずExportColumnDataSet.StcListの順に並んでいる   7
            //    // 明細出力項目リスト (57項目x3文字) 基本的に表示順の数字,非表示の場合は+100, 必ずExportColumnDataSet.StcDetailの順に並んでいる 8

            //    // カラム名一覧を作成
            //    if (this._selectedMainTabKey == "uTab_SlipList")
            //    {
            //        _exportColumnNameList = settingConstForm.GetColumnNameList(_patternSetting[7], true);
            //        //string[] gridSetting = new string[32];
            //        string[] gridSetting = new string[19];
            //        getGridSettingPattern(_patternSetting[7], out gridSetting, true);
            //        List<String> schemeList = new List<string>();
            //        getSchemeList(gridSetting, true, out schemeList, true);

            //    }
            //    else
            //    {
            //        _exportColumnNameList = settingConstForm.GetColumnNameList(_patternSetting[8], false);
            //        //string[] gridSetting = new string[57];
            //        string[] gridSetting = new string[36];
            //        getGridSettingPattern(_patternSetting[8], out gridSetting, false);
            //        List<String> schemeList = new List<string>();
            //        getSchemeList(gridSetting, false, out schemeList, true);
            //    }
            //}
            //else
            //{
            //    // 全ての列を書き出し
            //    // style = 0:.CSV(カンマ区切り)
            //    // style = 1:.TXT(タブ区切り)
            //    // style = 2:.PRN(スペース区切り)
            //    // パターンを分解
            //    _patternSetting = new string[9];
            //    settingConstForm.Degradation(this._userSetting.SelectedPatternName, out _patternSetting);

            //    // カラム名一覧を作成
            //    if (this._selectedMainTabKey == "uTab_SlipList")
            //    {
            //        List<String> schemeList = new List<string>();
            //        getSchemeList(null, true, out schemeList, false);


            //        #region オプションセット
            //        // 出力項目名
            //        tw.SchemeList = schemeList;
            //        // ファイル名
            //        tw.OutputFileName = this._userSetting.OutputFileName;
            //        // 区切り文字
            //        if (this._patternSetting[0] == "0")
            //        {
            //            tw.Splitter = "\t";
            //        }
            //        else if (this._patternSetting[0] == "1")
            //        {
            //            tw.Splitter = this._patternSetting[1];
            //        }
            //        else
            //        {
            //            tw.Splitter = string.Empty;
            //        }
            //        // 項目括り文字
            //        if (this._patternSetting[2] == "0")
            //        {
            //            tw.Encloser = "\"";
            //        }
            //        else if (this._patternSetting[2] == "1")
            //        {
            //            tw.Encloser = this._patternSetting[3];
            //        }
            //        // 固定幅
            //        if (this._patternSetting[0] == "2")
            //        {
            //            tw.FixedLength = true;
            //        }
            //        else
            //        {
            //            tw.FixedLength = false;
            //        }
            //        // タイトル行出力
            //        if (this._patternSetting[6] == "1")
            //        {
            //            tw.CaptionOutput = false;
            //        }
            //        else
            //        {
            //            tw.CaptionOutput = true;
            //        }
            //        // 項目括り適用
            //        List<Type> enclosingList = new List<Type>();
            //        if (this._patternSetting[4] == "0")
            //        {
            //            enclosingList.Add(typeInt16.GetType());
            //            enclosingList.Add(typeInt32.GetType());
            //            enclosingList.Add(typeInt64.GetType());
            //            enclosingList.Add(typeDouble.GetType());
            //            enclosingList.Add(typeDecimal.GetType());
            //            enclosingList.Add(typeSingle.GetType());
            //        }
            //        if (this._patternSetting[5] == "0")
            //        {
            //            enclosingList.Add(typeStr.GetType());
            //            enclosingList.Add(typeChar.GetType());
            //            enclosingList.Add(typeByte.GetType());
            //            enclosingList.Add(typeDate.GetType());
            //        }
            //        tw.EnclosingTypeList = enclosingList;
            //        tw.DataSource = this.uGrid_Slip.DataSource;
            //        #endregion // オプションセット
            //    }
            //    else if (this._selectedMainTabKey == "uTab_SlipDetail")
            //    {
            //        List<String> schemeList = new List<string>();
            //        getSchemeList(null, false, out schemeList, false);

            //        #region オプションセット
            //        // 出力項目名
            //        tw.SchemeList = schemeList;
            //        // ファイル名
            //        tw.OutputFileName = this._userSetting.OutputFileName;
            //        // 区切り文字
            //        if (this._patternSetting[0] == "0")
            //        {
            //            tw.Splitter = "\t";
            //        }
            //        else if (this._patternSetting[0] == "1")
            //        {
            //            tw.Splitter = this._patternSetting[1];
            //        }
            //        else
            //        {
            //            tw.Splitter = string.Empty;
            //        }
            //        // 項目括り文字
            //        if (this._patternSetting[2] == "0")
            //        {
            //            tw.Encloser = "\"";
            //        }
            //        else if (this._patternSetting[2] == "1")
            //        {
            //            tw.Encloser = this._patternSetting[3];
            //        }
            //        // 固定幅
            //        if (this._patternSetting[0] == "2")
            //        {
            //            tw.FixedLength = true;
            //        }
            //        else
            //        {
            //            tw.FixedLength = false;
            //        }
            //        // タイトル行出力
            //        if (this._patternSetting[6] == "1")
            //        {
            //            tw.CaptionOutput = false;
            //        }
            //        else
            //        {
            //            tw.CaptionOutput = true;
            //        }
            //        // 項目括り適用
            //        List<Type> enclosingList = new List<Type>();
            //        if (this._patternSetting[4] == "0")
            //        {
            //            enclosingList.Add(typeInt16.GetType());
            //            enclosingList.Add(typeInt32.GetType());
            //            enclosingList.Add(typeInt64.GetType());
            //            enclosingList.Add(typeDouble.GetType());
            //            enclosingList.Add(typeDecimal.GetType());
            //            enclosingList.Add(typeSingle.GetType());
            //        }
            //        if (this._patternSetting[5] == "0")
            //        {
            //            enclosingList.Add(typeStr.GetType());
            //            enclosingList.Add(typeChar.GetType());
            //            enclosingList.Add(typeByte.GetType());
            //            enclosingList.Add(typeDate.GetType());
            //        }
            //        tw.EnclosingTypeList = enclosingList;
            //        tw.DataSource = this.uGrid_Detail.DataSource;
            //        #endregion // オプションセット
            //    }
            //}
            # endregion
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            // パターンを分解
            _patternSetting = new string[9];
            settingConstForm.Degradation( this._userSetting.SelectedPatternName, out _patternSetting );

            // パターンの構成
            // 区切り文字(タブ・任意・固定長）/区切り文字任意/  0-1
            // 括り文字(”・任意）/括り文字任意/                2-3
            // 数値括り（する／しない)                          4
            // 文字括り（する／しない)                          5
            // タイトル行（あり／なし）                         6
            // 伝票出力項目リスト (xx項目x3文字) 基本的に表示順の数字,非表示の場合は+100, 必ずSalesListの順に並んでいる   7
            // 明細出力項目リスト (xx項目x3文字) 基本的に表示順の数字,非表示の場合は+100, 必ずSalesDetailの順に並んでいる 8


            // カラム名一覧を作成
            if ( this._patternSetting[10] == "0" )
            {
                // 伝票
                _exportColumnNameList = settingConstForm.GetColumnNameList( _patternSetting[7], true );
                string[] gridSetting;
                getGridSettingPattern( _patternSetting[7], out gridSetting, true );
                List<String> schemeList;
                getSchemeList( gridSetting, true, out schemeList, true );

                // 出力項目名
                tw.SchemeList = schemeList;

                // 固定長：伝票
                SalesMaxLength( ref tw );

                // データソース
                tw.DataSource = this.uGrid_Slip.DataSource;

                //----- ADD 2015/09/17 田建委 Redmine#47006 ---------->>>>>
                // 「返品伝票金額をマイナスで出力する」チェックオンの場合、
                if (this._patternSetting[11] == "1")
                {
                    DataView dViewList = new DataView(this._detailDataSet.StcList.Copy(), "", "DataDiv Asc, StockDate Asc, PartySaleSlipNum Asc, SupplierSlipNo Asc", DataViewRowState.CurrentRows);
                    // 仕入データの仕入伝票区分＝「20:返品」の場合、符号を反転させる
                    int detailSign = -1;
                    foreach (DataRowView dataRowList in dViewList)
                    {
                        // 仕入伝票区分
                        int supplierSlipCd = -1;
                        if (dataRowList[this._detailDataSet.StcList.SupplierSlipCdColumn.ColumnName] != DBNull.Value)
                        {
                            supplierSlipCd = (int)dataRowList[this._detailDataSet.StcList.SupplierSlipCdColumn.ColumnName];
                        }
                        // 金額
                        long stockTotalTaxExc = 0;
                        if (dataRowList[this._detailDataSet.StcList.StockTtlPricTaxExcColumn.ColumnName] != DBNull.Value)
                        {
                            stockTotalTaxExc = (long)dataRowList[this._detailDataSet.StcList.StockTtlPricTaxExcColumn.ColumnName];
                        }
                        // 消費税
                        double consumeTax = 0;
                        if (dataRowList[this._detailDataSet.StcList.ConsumeTaxColumn.ColumnName] != DBNull.Value)
                        {
                            consumeTax = (double)dataRowList[this._detailDataSet.StcList.ConsumeTaxColumn.ColumnName];
                        }

                        // 仕入データの仕入伝票区分＝「20:返品」の場合、符号を反転させる
                        if (supplierSlipCd == 20)
                        {
                            // 金額
                            if (dataRowList[this._detailDataSet.StcList.StockTtlPricTaxExcColumn.ColumnName] != DBNull.Value)
                            {
                                dataRowList[this._detailDataSet.StcList.StockTtlPricTaxExcColumn.ColumnName] = stockTotalTaxExc * detailSign;
                            }
                            // 消費税
                            if (dataRowList[this._detailDataSet.StcList.ConsumeTaxColumn.ColumnName] != DBNull.Value)
                            {
                                dataRowList[this._detailDataSet.StcList.ConsumeTaxColumn.ColumnName] = consumeTax * detailSign;
                            }
                        }
                    }
                    // データソース
                    tw.DataSource = dViewList;
                }
                //----- ADD 2015/09/17 田建委 Redmine#47006 ----------<<<<<

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                // グリッドのソート情報を適用する
                if ( tw.DataSource is DataView )
                {
                    //(tw.DataSource as DataView).Sort = GetSortingColumns( this.uGrid_Slip );//del by liusy #35640 2013/06/12
                    //add by liusy #35640 2013/06/12--------<<<<<
                    string sSort = GetSortingColumns(this.uGrid_Slip);
                    if (sSort != string.Empty)
                    {
                        (tw.DataSource as DataView).Sort = sSort;
                    }
                    //add by liusy #35640 2013/06/12--------<<<<<
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD

                # region [フォーマットリスト]
                Dictionary<string, string> formatList = new Dictionary<string, string>();
                foreach ( Infragistics.Win.UltraWinGrid.UltraGridColumn col in uGrid_Slip.DisplayLayout.Bands[0].Columns )
                {
                    formatList.Add( col.Key, col.Format );
                }
                tw.FormatList = formatList;
                # endregion
            }
            else
            {
                // 明細
                _exportColumnNameList = settingConstForm.GetColumnNameList( _patternSetting[8], false );
                string[] gridSetting;
                getGridSettingPattern( _patternSetting[8], out gridSetting, false );
                List<String> schemeList;
                getSchemeList( gridSetting, false, out schemeList, true );

                // 出力項目名
                tw.SchemeList = schemeList;

                // 固定長：明細
                SalesDtlMaxLength( ref tw );

                // データソース
                tw.DataSource = this.uGrid_Detail.DataSource;

                //----- ADD 2015/09/17 田建委 Redmine#47006 ---------->>>>>
                // 「マイナス金額にはマイナス記号を付与する」のチェックはオンの場合、
                if (this._patternSetting[12] == "1")
                {
                    DataView dViewDetail = new DataView(this._detailDataSet.StcDetail.Copy(), "", "DataDiv Asc, StockDate Asc, PartySaleSlipNum Asc, SupplierSlipNo Asc, StockRowNo Asc", DataViewRowState.CurrentRows);
                    // 返品の「行値引、通常」の場合、符号を反転させる
                    // 仕入の商品値引の場合、符号を反転させる
                    int detailSign = -1;
                    foreach (DataRowView dataRowView in dViewDetail)
                    {
                        // 仕入伝票区分
                        int supplierSlipCd = -1;
                        if (dataRowView[this._detailDataSet.StcDetail.SupplierSlipCdColumn.ColumnName] != DBNull.Value)
                        {
                            supplierSlipCd = (int)dataRowView[this._detailDataSet.StcDetail.SupplierSlipCdColumn.ColumnName];
                        }
                        // 仕入形式
                        int supplierFormal = -1;
                        if (dataRowView[this._detailDataSet.StcDetail.SupplierFormalColumn.ColumnName] != DBNull.Value)
                        {
                            supplierFormal = (int)dataRowView[this._detailDataSet.StcDetail.SupplierFormalColumn.ColumnName];
                        }
                        // 仕入伝票区分（明細）
                        int stockSlipCdDtl = -1;
                        if (dataRowView[this._detailDataSet.StcDetail.StockSlipCdDtlIntColumn.ColumnName] != DBNull.Value)
                        {
                            stockSlipCdDtl = (int)dataRowView[this._detailDataSet.StcDetail.StockSlipCdDtlIntColumn.ColumnName];
                        }
                        // 品番
                        string goodsNo = string.Empty;
                        if (dataRowView[this._detailDataSet.StcDetail.GoodsNoColumn.ColumnName] != DBNull.Value)
                        {
                            goodsNo = dataRowView[this._detailDataSet.StcDetail.GoodsNoColumn.ColumnName].ToString();
                        }
                        // 金額
                        long stockTotalTaxExc = 0;
                        if (dataRowView[this._detailDataSet.StcDetail.StockTtlPricTaxExcColumn.ColumnName] != DBNull.Value)
                        {
                            stockTotalTaxExc = (long)dataRowView[this._detailDataSet.StcDetail.StockTtlPricTaxExcColumn.ColumnName];
                        }
                        // 数量
                        double stockCount = 0;
                        if (dataRowView[this._detailDataSet.StcDetail.StockCountColumn.ColumnName] != DBNull.Value)
                        {
                            stockCount = (double)dataRowView[this._detailDataSet.StcDetail.StockCountColumn.ColumnName];
                        }
                        // 消費税
                        long stockPriceConsTax = 0;
                        if (dataRowView[this._detailDataSet.StcDetail.StockPriceConsTaxColumn.ColumnName] != DBNull.Value)
                        {
                            stockPriceConsTax = (long)dataRowView[this._detailDataSet.StcDetail.StockPriceConsTaxColumn.ColumnName];
                        }

                        // 返品の「行値引、通常」の場合、符号を反転させる
                        //    ⇒仕入データの仕入伝票区分＝「20:返品」AND【仕入明細データの仕入伝票区分（明細）≠「2:値引」OR [仕入明細データの仕入伝票区分（明細）＝「2:値引」AND 仕入明細データの品番＝NULL]】
                        // 仕入の商品値引の場合、符号を反転させる
                        //    ⇒仕入データの仕入伝票区分＝「10:仕入」AND 仕入データの仕入形式＝「0:仕入」AND 仕入明細データの仕入伝票区分（明細）＝「2:値引」AND 仕入明細データの品番≠NULL
                        if ((supplierSlipCd == 20 && (stockSlipCdDtl != 2 || (stockSlipCdDtl == 2 && string.IsNullOrEmpty(goodsNo)))) ||
                            (supplierSlipCd == 10 && supplierFormal == 0 && stockSlipCdDtl == 2 && !string.IsNullOrEmpty(goodsNo)))
                        {
                            // 金額
                            if (dataRowView[this._detailDataSet.StcDetail.StockTtlPricTaxExcColumn.ColumnName] != DBNull.Value)
                            {
                            dataRowView[this._detailDataSet.StcDetail.StockTtlPricTaxExcColumn.ColumnName] = stockTotalTaxExc * detailSign;
                            }
                            // 数量
                            if (dataRowView[this._detailDataSet.StcDetail.StockCountColumn.ColumnName] != DBNull.Value)
                            {
                            dataRowView[this._detailDataSet.StcDetail.StockCountColumn.ColumnName] = stockCount * detailSign;
                            }
                            // 消費税
                            if (dataRowView[this._detailDataSet.StcDetail.StockPriceConsTaxColumn.ColumnName] != DBNull.Value)
                            {
                            dataRowView[this._detailDataSet.StcDetail.StockPriceConsTaxColumn.ColumnName] = stockPriceConsTax * detailSign;
                        }
                    }
                    }
                    // データソース
                    tw.DataSource = dViewDetail;
                }
                //----- ADD 2015/09/17 田建委 Redmine#47006 ----------<<<<<

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                // グリッドのソート情報を適用する
                if ( tw.DataSource is DataView )
                {
                    //(tw.DataSource as DataView).Sort = GetSortingColumns( this.uGrid_Detail );//del by liusy #35640
                    //add by liusy #35640 2013/06/12--------<<<<<
                    string sSort = GetSortingColumns(this.uGrid_Detail);
                    if (sSort != string.Empty)
                    {
                        (tw.DataSource as DataView).Sort = sSort;
                    }
                    //add by liusy #35640 2013/06/12--------<<<<<
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD

                # region [フォーマットリスト]
                Dictionary<string, string> formatList = new Dictionary<string, string>();
                foreach ( Infragistics.Win.UltraWinGrid.UltraGridColumn col in uGrid_Detail.DisplayLayout.Bands[0].Columns )
                {
                    formatList.Add( col.Key, col.Format );
                }
                tw.FormatList = formatList;
                # endregion
            }

            #region オプションセット
            // ファイル名
            tw.OutputFileName = this._userSetting.OutputFileName;
            // 区切り文字
            if ( this._patternSetting[0] == "0" )
            {
                tw.Splitter = "\t";
            }
            else if ( this._patternSetting[0] == "1" )
            {
                tw.Splitter = this._patternSetting[1];
            }
            else
            {
                tw.Splitter = string.Empty;
            }
            // 項目括り文字
            if ( this._patternSetting[2] == "0" )
            {
                tw.Encloser = "\"";
            }
            else if ( this._patternSetting[2] == "1" )
            {
                tw.Encloser = this._patternSetting[3];
            }
            // 固定幅
            if ( this._patternSetting[0] == "2" )
            {
                tw.FixedLength = true;
            }
            else
            {
                tw.FixedLength = false;
            }
            // タイトル行出力
            if ( this._patternSetting[6] == "1" )
            {
                tw.CaptionOutput = false;
            }
            else
            {
                tw.CaptionOutput = true;
            }
            // 項目括り適用
            List<Type> enclosingList = new List<Type>();
            if ( this._patternSetting[4] == "0" )
            {
                enclosingList.Add( typeInt16.GetType() );
                enclosingList.Add( typeInt32.GetType() );
                enclosingList.Add( typeInt64.GetType() );
                enclosingList.Add( typeDouble.GetType() );
                enclosingList.Add( typeDecimal.GetType() );
                enclosingList.Add( typeSingle.GetType() );
            }
            if ( this._patternSetting[5] == "0" )
            {
                enclosingList.Add( typeStr.GetType() );
                enclosingList.Add( typeChar.GetType() );
                enclosingList.Add( typeByte.GetType() );
                enclosingList.Add( typeDate.GetType() );
            }
            tw.EnclosingTypeList = enclosingList;
            #endregion
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

            int outputCount = 0;
            int status = tw.TextOut(out outputCount);

            if (status == 9)// 異常終了
            {
                // 出力失敗
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                    MSG_OUTPUTFILE_FAILED, -1, MessageBoxButtons.OK);
            }
            else
            {
                // 出力成功
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                    outputCount.ToString() + MSG_OUTPUTFILE_SUCCEEDED, -1, MessageBoxButtons.OK);
                //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 ----->>>>>
                // エラーメッセージ
                errMsg = string.Empty;
                // 操作履歴登録
                textOutPutOprtnHisLogWorkObj.LogOperationData = string.Format(CountNumStr, outputCount.ToString()) + textOutPutOprtnHisLogWorkObj.LogOperationData;
                logStatus = TextOutPutOprtnHisLogAcsObj.Write(this, ref textOutPutOprtnHisLogWorkObj, out errMsg);
                // ログ登録異常の場合、テキスト出力が実行できない
                if (logStatus != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if (!string.IsNullOrEmpty(errMsg))
                    {
                        TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_STOP, this.Name,
                                    errMsg, logStatus, MessageBoxButtons.OK);
                    }
                    // 中止
                    return;
                }
                //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 -----<<<<<
            }
            // 引数設定
            // DataSource        Object                     DataSet/DataTable/DataView
            // DataMember        String                     (DataSetの場合)対象のテーブル名
            // OutputFileName    String                     出力ファイル名（フォルダ・拡張子含む)   this._userSetting.OutputFileName
            // SchemeList        List<String>               テキスト出力するカラム名一覧            this._exportColumnNameList
            // Spritter          String                     項目の区切り文字(列)、"\t"ならばTAB     this._patternSetting[0]=0(\t), =1(this._patternSetting[1]), =2(string.Empty)
            // Encloser          String                     項目括り文字                            this._patternSetting[2]=0("), =1(this._patternSetting[3])
            // EnclosingTypeList List<Type>                 項目括り文字を適用する型                this._patternSetting[4]=0(Type.Numeric), this._patternSetting[5]=0(Type.Char)
            // FormatList        Dictianary<String,String>  列単位の出力フォーマット指定リスト      指定しない
            // CaptionOutput     Boolean                    タイトル行出力フラグ                    ?this._patternSetting[6]=1
            // FixedLength       Boolean                    固定長出力フラグ                        ?this._patternSetting[0]=2
            // ReplaceList       Dictianary<String,String>  文字列置換する項目の一覧。              指定しない
        }
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD

        //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 ----->>>>>
        /// <summary>
        /// 画面条件取得
        /// </summary>
        /// <param name="stringConditions">画面条件</param>
        /// <remarks>
        /// <br>Note       : テキスト出力操作ログおよび出力時アラートメッセージ追加対応</br>
        /// <br>Programmer : 陳艶丹</br>
        /// <br>Date       : 2019/08/19</br>
        /// </remarks>
        private void GetConditions(out string stringConditions)
        {
            // 基本条件
            string conditions = Conditions;
            // 抽出条件
            string value = string.Empty;
            // 支払先
            if (this.tNedit_PayeeCode.Visible)
            {
                conditions += Comma + "支払先:" + this.tNedit_PayeeCode.Text.Trim();
            }
            // 伝票区分
            if (this.tComboEditor_StockSlipCd.Visible)
            {
                conditions += Comma + "伝票区分:" + this.tComboEditor_StockSlipCdDtl.Value;
            }
            // 明細区分
            if (this.tComboEditor_StockSlipCdDtl.Visible)
            {
                conditions += Comma + "明細区分:" + this.tComboEditor_StockSlipCdDtl.Value;
            }
            // 伝票番号
            if (this.tEdit_PartySalesSlipNum.Visible)
            {
                if (!string.IsNullOrEmpty(this._suppPrtPpr.PartySaleSlipNum))
                {
                    value = this.tComboEditor_PartySalesSlipNumFuzzy.Text.Trim();
                }
                conditions += Comma + "伝票番号:" + this.tEdit_PartySalesSlipNum.Value + value;
            }
            // 仕入SEQ/支払No
            if (this.tNedit_PaymentSlipNo.Visible)
            {
                string paymentSlipNo = string.Empty;
                if (!string.IsNullOrEmpty(this.tNedit_PaymentSlipNo.Text))
                {
                    paymentSlipNo = this.tNedit_PaymentSlipNo.Value + "以上";
                }
                conditions += Comma + "仕入SEQ/支払No:" + paymentSlipNo;
            }
            // 担当者
            if (this.tEdit_StockAgentCodeInput.Visible)
            {
                conditions += Comma + "担当者:" + this.tEdit_StockAgentCodeInput.Value;
            }
            // UOE送信
            if (this.tComboEditor_DataSendCode.Visible)
            {
                conditions += Comma + "UOE送信:" + this.tComboEditor_DataSendCode.Value;
            }
            // 備考1
            if (this.tEdit_SupplierSlipNote1.Visible)
            {
                value = string.Empty;
                if (!string.IsNullOrEmpty(this._suppPrtPpr.SupplierSlipNote1))
                {
                    value = this.tComboEditor_SupplierSlipNote1Fuzzy.Text.Trim();
                }
                conditions += Comma + "備考1:" + this.tEdit_SupplierSlipNote1.Value + value;
            }
            // 備考2
            if (this.tEdit_SupplierSlipNote2.Visible)
            {
                value = string.Empty;
                if (!string.IsNullOrEmpty(this._suppPrtPpr.SupplierSlipNote2))
                {
                    value = this.tComboEditor_SupplierSlipNote2Fuzzy.Text.Trim();
                }
                conditions += Comma + "備考2:" + this.tEdit_SupplierSlipNote2.Value + value;
            }
            // UOEリマーク1
            if (this.tEdit_UoeRemark1.Visible)
            {
                value = string.Empty;
                if (!string.IsNullOrEmpty(this._suppPrtPpr.UoeRemark1))
                {
                    value = this.tComboEditor_UoeRemark1Fuzzy.Text.Trim();
                }
                conditions += Comma + "UOEリマーク1:" + this.tEdit_UoeRemark1.Value + value;
            }
            // UOEリマーク2
            if (this.tEdit_UoeRemark2.Visible)
            {
                value = string.Empty;
                if (!string.IsNullOrEmpty(this._suppPrtPpr.UoeRemark2))
                {
                    value = this.tComboEditor_UoeRemark2Fuzzy.Text.Trim();
                }
                conditions += Comma + "UOEリマーク2:" + this.tEdit_UoeRemark2.Value + value;
            }
            // グループコード
            if (this.tEdit_BlGroupCodeInput.Visible)
            {
                conditions += Comma + "グループコード:" + this.tEdit_BlGroupCodeInput.Value;
            }
            // BLコード
            if (this.tEdit_BlGoodsCodeInput.Visible)
            {
                conditions += Comma + "ＢＬコード:" + this.tEdit_BlGoodsCodeInput.Value;
            }
            // 品名
            if (this.tEdit_GoodsName.Visible)
            {
                value = string.Empty;
                if (!string.IsNullOrEmpty(this.tEdit_GoodsName.Text))
                {
                    value = this.tComboEditor_GoodsNameFuzzy.Text.Trim();
                }
                conditions += Comma + "品名:" + this.tEdit_GoodsName.Value + value;
            }
            // 品番
            if (this.tEdit_GoodsNo.Visible)
            {
                value = string.Empty;
                if (!string.IsNullOrEmpty(this.tEdit_GoodsNo.Text))
                {
                    value = this.tComboEditor_GoodsNoFuzzy.Text.Trim();
                }
                conditions += Comma + "品番:" + this.tEdit_GoodsNo.Value + value;
            }
            // メーカー
            if (this.tEdit_MakerCdInput.Visible)
            {
                conditions += Comma + "メーカー:" + this.tEdit_MakerCdInput.Value;
            }
            // 在庫取寄区分
            if (this.tComboEditor_StockOrderDivCd.Visible)
            {
                conditions += Comma + "在庫取寄区分:" + this.tComboEditor_StockOrderDivCd.Value;
            }
            // 倉庫コード
            if (this.tEdit_WarehouseCdInput.Visible)
            {
                conditions += Comma + "倉庫:" + this.tEdit_WarehouseCdInput.Value;
            }
            // 削除指定区分
            if (this.tComboEditor_DeleteFlag.Visible)
            {
                conditions += Comma + "削除指定区分:" + this.tComboEditor_DeleteFlag.Value;
            }
            // 仕入日
            string stockDateSt = this._suppPrtPpr.St_StockDate.ToString("yyyyMMdd");
            stockDateSt = stockDateSt.Equals("00010101") ? StartStr : stockDateSt;
            string stockDateEd = this._suppPrtPpr.Ed_StockDate.ToString("yyyyMMdd");
            stockDateEd = stockDateEd.Equals("00010101") ? EndStr : stockDateEd;
            // 入力日
            string inputDaySt = this._suppPrtPpr.St_InputDay.ToString("yyyyMMdd");
            inputDaySt = inputDaySt.Equals("00010101") ? StartStr : inputDaySt;
            string inputDayEd = this._suppPrtPpr.Ed_InputDay.ToString("yyyyMMdd");
            inputDayEd = inputDayEd.Equals("00010101") ? EndStr : inputDayEd;

            // 画面条件
            stringConditions = string.Format(conditions, this.tEdit_SectionCodeAllowZero.Text.Trim(), this._stockRetGdsPlnFlag, this.tNedit_SupplierCd.Text.Trim(),
                stockDateSt, stockDateEd, inputDaySt, inputDayEd) + Comma;
        }

        /// <summary>
        /// テキスト出力操作ログおよび出力時アラートメッセージ追加処理
        /// </summary>
        /// <param name="mode">モード</param>
        /// <param name="fileName">ファイル名</param>
        /// <param name="suppPrtPprBlnce">残高一覧検索条件クラス</param>
        /// <param name="textOutPutOprtnHisLogWorkObj">登録用対象ワーク</param>
        /// <param name="errMsg">エラーメッセージ</param>
        /// <returns>status</returns>
        /// <remarks>
        /// <br>Note       : テキスト出力操作ログおよび出力時アラートメッセージ追加対応</br>
        /// <br>Programmer : 陳艶丹</br>
        /// <br>Date       : 2019/08/19</br>
        /// </remarks>
        private int TextOutPutWrite(int mode, string fileName, SuppPrtPprBlnce suppPrtPprBlnce, ref TextOutPutOprtnHisLogWork textOutPutOprtnHisLogWorkObj, out string errMsg)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_EOF;
            try
            {
                string outPutCon = string.Empty;
                textOutPutOprtnHisLogWorkObj = new TextOutPutOprtnHisLogWork();
                // ログデータ対象アセンブリID
                textOutPutOprtnHisLogWorkObj.LogDataObjAssemblyID = CT_SUPPLIER_ERECNOTE_PGID;
                // ログデータ対象アセンブリ名称
                textOutPutOprtnHisLogWorkObj.LogDataObjAssemblyNm = AssemblyNm;
                // ログデータ対象起動プログラム名称
                textOutPutOprtnHisLogWorkObj.LogDataObjBootProgramNm = AssemblyNm;
                if (mode == 1 || mode == 4)
                {
                    string conditions = string.Empty;
                    this.GetConditions(out conditions);
                    if (mode == 1)
                    {
                        // ログデータ対象処理名
                        textOutPutOprtnHisLogWorkObj.LogDataObjProcNm = MethodNm;
                        // ログオペレーションデータ
                        outPutCon = conditions + string.Format(MenuCon, _userSetting.OutputFileName, _userSetting.SelectedPatternName);
                    }
                    else
                    {
                        // ログデータ対象処理名
                        textOutPutOprtnHisLogWorkObj.LogDataObjProcNm = MethodNm4;
                        outPutCon = conditions + string.Format(ExcelCon, fileName);
                    }
                }
                else if (mode == 2 || mode == 3)
                {
                    if (mode == 2)
                    {
                        // ログデータ対象処理名
                        textOutPutOprtnHisLogWorkObj.LogDataObjProcNm = MethodNm2;
                    }
                    else
                    {
                        // ログデータ対象処理名
                        textOutPutOprtnHisLogWorkObj.LogDataObjProcNm = MethodNm3;
                    }
                    // ログオペレーションデータ
                    string balance = prtSetForm.BalanceDiv.ToString();
                    // 拠点
                    string sectionCdSt = prtSetForm.SectionCodeSt.Trim();
                    sectionCdSt = string.IsNullOrEmpty(sectionCdSt) ? StartStr : sectionCdSt;
                    string sectionCdEd = prtSetForm.SectionCodeEd.Trim();
                    sectionCdEd = string.IsNullOrEmpty(sectionCdEd) ? EndStr : sectionCdEd;
                    // 仕入先
                    string supplierCdSt = prtSetForm.SuppPrtPprCodeSt.Trim();
                    supplierCdSt = string.IsNullOrEmpty(supplierCdSt) ? StartStr : supplierCdSt;
                    string supplierCdEd = prtSetForm.SuppPrtPprCodeEd.Trim();
                    supplierCdEd = string.IsNullOrEmpty(supplierCdEd) ? EndStr : supplierCdEd;
                    // 対象年月
                    string checkDateSt = prtSetForm.AddUpYearMonthSt;
                    checkDateSt = string.IsNullOrEmpty(checkDateSt) ? StartStr : checkDateSt;
                    string checkDateEd = prtSetForm.AddUpYearMonthEd;
                    checkDateEd = string.IsNullOrEmpty(checkDateEd) ? EndStr : checkDateEd;
                    outPutCon = string.Format(BalanceCon, balance, sectionCdSt, sectionCdEd, supplierCdSt, supplierCdEd,
                        checkDateSt, checkDateEd, prtSetForm.FileName);
                }

                // ログオペレーションデータ
                textOutPutOprtnHisLogWorkObj.LogOperationData = outPutCon;
                status = TextOutPutOprtnHisLogAcsObj.Write(this, ref textOutPutOprtnHisLogWorkObj, out errMsg);
            }
            catch (Exception ex)
            {
                errMsg = ex.Message;
            }

            return status;
        }
        //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 -----<<<<<

        /// <summary>
        /// 固定長:伝票
        /// </summary>
        /// <param name="tw"></param>
        private void SalesMaxLength( ref FormattedTextWriter tw )
        {
            #region [固定長設定]
            tw.MaxLengthList = new Dictionary<string, int>();

            tw.MaxLengthList.Add( this._detailDataSet.StcList.SectionCdColumn.ColumnName, 4 ); // 拠点コード
            tw.MaxLengthList.Add( this._detailDataSet.StcList.SectionGuideNmColumn.ColumnName, 20 ); // 拠点名称
            tw.MaxLengthList.Add( this._detailDataSet.StcList.StockDateColumn.ColumnName, 10 ); // 伝票日付
            tw.MaxLengthList.Add( this._detailDataSet.StcList.PartySaleSlipNumColumn.ColumnName, 19 ); // 仕入伝票番号
            tw.MaxLengthList.Add( this._detailDataSet.StcList.SupplierCdColumn.ColumnName, 13 ); // 仕入先コード
            tw.MaxLengthList.Add( this._detailDataSet.StcList.SupplierSnmColumn.ColumnName, 40 ); // 仕入先名称
            tw.MaxLengthList.Add( this._detailDataSet.StcList.DataDivColumn.ColumnName, 3 ); // 区分
            tw.MaxLengthList.Add( this._detailDataSet.StcList.StockAgentNameColumn.ColumnName, 8 ); // 担当者名
            tw.MaxLengthList.Add( this._detailDataSet.StcList.StockTtlPricTaxExcColumn.ColumnName, 8 ); // 金額
            tw.MaxLengthList.Add( this._detailDataSet.StcList.StockPriceConsTaxColumn.ColumnName, 8 ); // 消費税
            tw.MaxLengthList.Add( this._detailDataSet.StcList.SupplierSlipNote1Column.ColumnName, 60 ); // 備考１
            tw.MaxLengthList.Add( this._detailDataSet.StcList.SupplierSlipNote2Column.ColumnName, 60 ); // 備考２
            tw.MaxLengthList.Add( this._detailDataSet.StcList.UoeRemark1Column.ColumnName, 41 ); // UOEリマーク１
            tw.MaxLengthList.Add( this._detailDataSet.StcList.UoeRemark2Column.ColumnName, 41 ); // UOEリマーク２
            tw.MaxLengthList.Add( this._detailDataSet.StcList.SupplierSlipNoColumn.ColumnName, 14 ); // 仕入SEQ/支払No
            tw.MaxLengthList.Add( this._detailDataSet.StcList.StockAddUpADateColumn.ColumnName, 10 ); // 計上日
            //tw.MaxLengthList.Add( this._detailDataSet.StcList.AccPayDivCdNameColumn.ColumnName, 4 ); // 買掛区分名
            tw.MaxLengthList.Add(this._detailDataSet.StcList.SupplierConsTaxRateColumn.ColumnName, 6); //消費税率　// ADD 時シン 2020/03/11 PMKOBETSU-2912

            #endregion
        }
        /// <summary>
        /// 固定長：明細
        /// </summary>
        /// <param name="tw"></param>
        private void SalesDtlMaxLength( ref FormattedTextWriter tw )
        {
            #region [固定長設定]
            tw.MaxLengthList = new Dictionary<string, int>();

            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.StockDateColumn.ColumnName, 10 ); // 伝票日付
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName, 19 ); // 仕入伝票番号
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.StockRowNoColumn.ColumnName, 8 );         //行No
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.DataDivColumn.ColumnName, 3 );            //区分
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 ADD
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.StockSlipCdDtlColumn.ColumnName, 8 );            //区分
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 ADD
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.StockAgentNameColumn.ColumnName, 8 ); // 担当者名
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.GoodsNameColumn.ColumnName, 80 );         //品名
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.GoodsNoColumn.ColumnName, 200 );          //品番
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.GoodsMakerCdColumn.ColumnName, 6 );       //メーカーコード
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.MakerNameColumn.ColumnName, 60 );       　//メーカー名称
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.BLGoodsCodeColumn.ColumnName, 6 );        //BLコード
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.BLGroupCodeColumn.ColumnName, 5 );        //BLグループコード
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.StockCountColumn.ColumnName, 8 );        //数量
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.ListPriceTaxExcFlColumn.ColumnName, 9 );     //標準価格
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.StockTtlPricTaxExcColumn.ColumnName, 12 ); // 金額(明細)
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.StockPriceConsTaxColumn.ColumnName, 8 ); // 消費税
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.SupplierSlipNote1Column.ColumnName, 60 ); // 備考１
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.SupplierSlipNote2Column.ColumnName, 60 ); // 備考２
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.SectionCdColumn.ColumnName, 4 ); // 拠点コード
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.SectionGuideNmColumn.ColumnName, 20 ); // 拠点名称
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.SupplierCdColumn.ColumnName, 13 ); // 仕入先コード
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.SupplierSnmColumn.ColumnName, 40 ); // 仕入先名称
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.StockOrderDivCdNameColumn.ColumnName, 12 );//在取名
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.WarehouseNameColumn.ColumnName, 40 );     //倉庫名称
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.WarehouseShelfNoColumn.ColumnName, 8 );     //棚番
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.UoeRemark1Column.ColumnName, 41 ); // UOEリマーク１
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.UoeRemark2Column.ColumnName, 41 ); // UOEリマーク２
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName, 14 ); // 仕入SEQ/支払No
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.StockAddUpADateColumn.ColumnName, 10 ); // 計上日
            //tw.MaxLengthList.Add( this._detailDataSet.StcDetail.AccPayDivCdNameColumn.ColumnName, 4 ); // 買掛区分名
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.SalesSlipNumColumn.ColumnName, 9 ); // 同時売上伝票番号
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.SalesDateColumn.ColumnName, 10 );          //同時売上日付
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.CustomerCodeColumn.ColumnName, 8 );       //得意先コード
            tw.MaxLengthList.Add( this._detailDataSet.StcDetail.CustomerSnmColumn.ColumnName, 20 );       //得意先略称
            tw.MaxLengthList.Add(this._detailDataSet.StcDetail.StockUnitPriceFlColumn.ColumnName, 9);      //原価
            tw.MaxLengthList.Add(this._detailDataSet.StcDetail.SupplierConsTaxRateColumn.ColumnName, 6); //消費税率　// ADD 時シン 2020/03/11 PMKOBETSU-2912

            #endregion
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        /// <summary>
        /// グリッドのセッティングを文字列から取り出す
        /// </summary>
        /// <param name="patternStr"></param>
        /// <param name="gridSetting"></param>
        /// <param name="isSlip"></param>
        private void getGridSettingPattern(string patternStr, out string[] gridSetting, bool isSlip)
        {
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //if (isSlip)
            //{
            //    //gridSetting = new string[32];
            //    gridSetting = new string[20];

            //    //for (int i = 0; i < 32; i++)
            //    for (int i = 0; i < 20; i++)
            //    {
            //        gridSetting[i] = patternStr.Substring((i - 1) * 3, 3);
            //    }
            //}
            //else
            //{
            //    //gridSetting = new string[57];
            //    gridSetting = new string[39];

            //    //for (int i = 0; i < 57; i++)
            //    for (int i = 0; i < 39; i++)
            //    {
            //        gridSetting[i] = patternStr.Substring((i - 1) * 3, 3);
            //    }
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            int count = patternStr.Length / 3;
            gridSetting = new string[count];

            for ( int i = 0; i < count; i++ )
            {
                gridSetting[i] = patternStr.Substring( i * 3, 3 );
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
        }

        // ---------------------- ADD  2010/07/20 --------------------------------->>>>>
        /// <summary>
        /// 残高一覧をテキスト出力
        /// </summary>
        /// <remarks>
        /// <br>Note       : 残高一覧をテキスト出力します。</br>
        /// <br>Programmer : chenyd</br>
        /// <br>Date       : 2010/07/20</br>
        /// <br>Update Note: 2010/09/08 朱 猛</br>
        /// <br>           　障害ID:14441対応</br>
        /// <br>Update Note: 2010/09/14 tianjw</br>
        /// <br>           　テキスト出力対応</br>
        /// </remarks>
        private void RemainExportIntoTextFile()
        {
            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 ----->>>>>
            // エラーメッセージ
            string errMsg = string.Empty;
            // アラート表示
            int logStatus = TextOutPutOprtnHisLogAcsObj.ShowTextOutPut(this, out errMsg);
            // アラートでOKボタンが押されない場合、テキスト出力が実行できない
            if (logStatus != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                if (!string.IsNullOrEmpty(errMsg))
                {
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_STOP, this.Name,
                                errMsg, logStatus, MessageBoxButtons.OK);
                }
                // 中止
                return;
            }
            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 -----<<<<<
            // --- UPD 2010/10/09 ---------->>>>>
            //PMKOU04001UC prtSetForm = new PMKOU04001UC(false, Int32.Parse(this.tComboEditor_rl_RemainType.SelectedItem.DataValue.ToString()));
            prtSetForm = new PMKOU04001UC(false, Int32.Parse(this.tComboEditor_rl_RemainType.SelectedItem.DataValue.ToString()));
            prtSetForm.OutputData += new PMKOU04001UC.OutputDataEvent(this.outputTextData);
            prtSetForm.ShowDialog();
            //if (prtSetForm.DResult == DialogResult.Cancel)
            //{
            //    return;
            //}
            //SuppPrtPprBlnce suppPrtPprBlnce;
            //suppPrtPprBlnce = prtSetForm.SuppPrtPprBlnce;
            //SFCMN00299CA processingDialog = new SFCMN00299CA();
            //try
            //{
            //    processingDialog.Title = "抽出処理";
            //    processingDialog.Message = "現在、データ抽出中です。";
            //    processingDialog.DispCancelButton = false;
            //    processingDialog.Show((Form)this.Parent);
            //    this._suppPtrSearchAcs.SearchBalanceAll(ref suppPrtPprBlnce, prtSetForm.BalanceDiv);
            //}
            //finally
            //{
            //    processingDialog.Dispose();
            //}
            //string outputFileName = prtSetForm.FileName;
            //if (String.IsNullOrEmpty(outputFileName))
            //{
            //    // ファイル名が指定されていないとエラー
            //    BalanceListReView();
            //    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
            //        MSG_OUTPUTFILENAME_NOTFOUND, -1, MessageBoxButtons.OK);
            //    return;
            //}

            //if (_detailDataSet.BalanceList.Count == 0)
            //{
            //    // 該当データがないとエラー
            //    BalanceListReView();
            //    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
            //        MSG_MATCHED_DATA_NOT_FOUND, -1, MessageBoxButtons.OK);
            //    return;
            //}
            //InitializeGridColumns(this.uGrid_BalanceList.DisplayLayout.Bands[0].Columns, 3);
            //List<ColumnInfo> balanceColumnsList;
            //this.SaveGridColumnsSetting(uGrid_BalanceList, out balanceColumnsList);
            //_settingForm.UserSetting.BalanceColumnsList = balanceColumnsList;
            //LoadGridColumnsSetting(ref uGrid_BalanceList, _settingForm.UserSetting.BalanceColumnsList);

            //String typeStr = string.Empty;
            //Char typeChar = new char();
            //Byte typeByte = new byte();
            //DateTime typeDate = new DateTime();
            //Int16 typeInt16 = new short();
            //Int32 typeInt32 = new int();
            //Int64 typeInt64 = new long();
            //Single typeSingle = new float();
            //Double typeDouble = new double();
            //Decimal typeDecimal = new decimal();

            //FormattedTextWriter tw = new FormattedTextWriter();

            //Dictionary<int, string> sortList = new Dictionary<int, string>();
            //List<String> schemeList = new List<string>();

            //DataTable targetTable = _detailDataSet.BalanceList;
            //// ---------------------- ADD  2010/09/08 --------------------------------->>>>>
            //targetTable.Columns["SupplierCode"].Caption = "支払先";
            //targetTable.Columns["SupplierName"].Caption = "支払先名";
            //targetTable.Columns["SectionCode"].Caption = "拠点";
            //targetTable.Columns["ThisTimeStockPrice"].Caption = "今回仕入額";
            //targetTable.Columns["ThisStckPricRgdsDis"].Caption = "返品・値引額";
            //// ---------------------- ADD  2010/09/08 ---------------------------------<<<<<
            //// ---------------------- ADD  2010/09/14 --------------------------------->>>>>
            //targetTable.Columns["OfsThisStockTax"].Caption = "消費税額";
            //// ---------------------- ADD  2010/09/14 ---------------------------------<<<<<

            //Infragistics.Win.UltraWinGrid.ColumnsCollection Columns = this.uGrid_BalanceList.DisplayLayout.Bands[0].Columns;
            //int dispOrder;
            //string columnName;
            //for (int i = 0; i < Columns.Count; i++)
            //{
            //    if (Columns[i].Hidden == false)
            //    {
            //        dispOrder = Columns[i].Header.VisiblePosition;
            //        columnName = targetTable.Columns[Columns[i].Index].ColumnName;
            //        sortList.Add(dispOrder, columnName);
            //    }
            //}

            //List<int> keyList = new List<int>(sortList.Keys);
            //keyList.Sort();

            //foreach (int key in keyList)
            //{
            //    schemeList.Add(sortList[key]);
            //}


            //// 出力項目名
            //tw.SchemeList = schemeList;

            //// データソース
            //tw.DataSource = this.uGrid_BalanceList.DataSource;
            //// グリッドのソート情報を適用する
            //if (tw.DataSource is DataView)
            //{
            //    (tw.DataSource as DataView).Sort = GetSortingColumns(this.uGrid_BalanceList);
            //}

            //# region [フォーマットリスト]
            //Dictionary<string, string> formatList = new Dictionary<string, string>();
            //foreach (Infragistics.Win.UltraWinGrid.UltraGridColumn col in uGrid_BalanceList.DisplayLayout.Bands[0].Columns)
            //{
            //    formatList.Add(col.Key, col.Format);
            //}
            //tw.FormatList = formatList;

            //#endregion // フォーマットリスト

            //#region オプションセット
            //// ファイル名
            //tw.OutputFileName = outputFileName;
            //// 区切り文字
            //tw.Splitter = ",";
            //// 項目括り文字
            //tw.Encloser = "\"";
            //// 固定幅
            //tw.FixedLength = false;
            //// タイトル行出力
            //tw.CaptionOutput = true;
            //// 項目括り適用
            //List<Type> enclosingList = new List<Type>();
            //enclosingList.Add(typeInt16.GetType());
            //enclosingList.Add(typeInt32.GetType());
            //enclosingList.Add(typeInt64.GetType());
            //enclosingList.Add(typeDouble.GetType());
            //enclosingList.Add(typeDecimal.GetType());
            //enclosingList.Add(typeSingle.GetType());
            //enclosingList.Add(typeStr.GetType());
            //enclosingList.Add(typeChar.GetType());
            //enclosingList.Add(typeByte.GetType());
            //enclosingList.Add(typeDate.GetType());
            //tw.EnclosingTypeList = enclosingList;

            //int outputCount = 0;
            //int status = tw.TextOut(out outputCount);

            //BalanceListReView();

            //if (status == 9)// 異常終了
            //{
            //    // 出力失敗
            //    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
            //        MSG_OUTPUTFILE_FAILED, -1, MessageBoxButtons.OK);
            //}
            //else
            //{
            //    // 出力成功
            //    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
            //        outputCount.ToString() + MSG_OUTPUTFILE_SUCCEEDED, -1, MessageBoxButtons.OK);
            //}

            //#endregion // オプション

            // --- UPD 2010/10/09 ----------<<<<<

        }

        /// <summary>
        /// 残高一覧グリッドを出力前のレイアウトに戻します。
        /// </summary>
        /// <remarks>
        /// <br>Note       : 残高一覧グリッドを出力前のレイアウトに戻します。</br>
        /// <br>Programmer : chenyd</br>
        /// <br>Date       : 2010/07/20</br>
        /// </remarks>
        private void BalanceListReView()
        {
            uGrid_BalanceList.DisplayLayout.AutoFitStyle = Infragistics.Win.UltraWinGrid.AutoFitStyle.ResizeAllColumns;
            InitializeGridColumns(this.uGrid_BalanceList.DisplayLayout.Bands[0].Columns, 2);
            uGrid_BalanceList.Refresh();
            List<ColumnInfo> balanceColumnsList;
            this.SaveGridColumnsSetting(uGrid_BalanceList, out balanceColumnsList);
            _settingForm.UserSetting.BalanceColumnsList = balanceColumnsList;
            LoadGridColumnsSetting(ref uGrid_BalanceList, _settingForm.UserSetting.BalanceColumnsList);
            this._suppPtrSearchAcs.SearchBalance(ref this._suppPrtPprBlnce, Int32.Parse(this.tComboEditor_rl_RemainType.SelectedItem.DataValue.ToString()));
        }

        // ---------------------- ADD  2010/07/20 ---------------------------------<<<<<
        /// <summary>
        /// スキーマリストを取得する
        /// </summary>
        /// <param name="gridSetting"></param>
        /// <param name="isSlip"></param>
        /// <param name="schemeList"></param>
        /// <param name="isCustom"></param>
        private bool getSchemeList(string[] gridSetting, bool isSlip, out List<String> schemeList, bool isCustom)
        {
            schemeList = new List<string>();
            //if (gridSetting == null) return false;

            Dictionary<int, string> sortList = new Dictionary<int,string>();
            string displayFlag = string.Empty;
            string displayOrder = string.Empty;
            int columnOrder = 0;
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //ExportColumnDataSet exDataSet = new ExportColumnDataSet();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
            //if (isCustom)
            //{
            //    if (isSlip)
            //    {
            //        foreach (string settings in gridSetting)
            //        {
            //            // ３桁の数値なので１＋２に分割
            //            displayFlag = settings.Substring(0, 1);
            //            displayOrder = settings.Substring(1, 2);

            //            // 表示するであればDictionaryに追加
            //            if (displayFlag == "0")
            //            {
            //                sortList.Add(int.Parse(displayOrder), exDataSet.StcList.Columns[columnOrder].ColumnName);
            //            }
            //            columnOrder++;
            //        }

            //        // ソート用
            //        List<KeyValuePair<int, string>> sorted = new List<KeyValuePair<int, string>>(sortList);
            //        sorted.Sort(compare);

            //        // ソート後
            //        foreach (KeyValuePair<int, string> item in sorted)
            //        {
            //            schemeList.Add(item.Value);
            //        }
            //    }
            //    else
            //    {
            //        foreach (string settings in gridSetting)
            //        {
            //            // ３桁の数値なので１＋２に分割
            //            displayFlag = settings.Substring(0, 1);
            //            displayOrder = settings.Substring(1, 2);

            //            // 表示するであればDictionaryに追加
            //            if (displayFlag == "0")
            //            {
            //                sortList.Add(int.Parse(displayOrder), exDataSet.StcDetail.Columns[columnOrder].ColumnName);
            //            }
            //            columnOrder++;
            //        }

            //        // ソート用
            //        List<KeyValuePair<int, string>> sorted = new List<KeyValuePair<int, string>>(sortList);
            //        sorted.Sort(compare);

            //        // ソート後
            //        foreach (KeyValuePair<int, string> item in sorted)
            //        {
            //            schemeList.Add(item.Value);
            //        }
            //    }
            //}
            //else
            //{
            //    if (isSlip)
            //    {
            //        // 全ての列を取得
            //        int colCount = exDataSet.StcList.Columns.Count;
            //        for (int i = 0; i < colCount; i++)
            //        {
            //            schemeList.Add(exDataSet.StcList.Columns[i].ColumnName);
            //        }
            //    }
            //    else
            //    {
            //        // 全ての列を取得
            //        int colCount = exDataSet.StcDetail.Columns.Count;
            //        for (int i = 0; i < colCount; i++)
            //        {
            //            schemeList.Add(exDataSet.StcDetail.Columns[i].ColumnName);
            //        }
            //    }
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            DataTable targetTable;
            if ( isSlip )
            {
                targetTable = _detailDataSet.StcList;
            }
            else
            {
                targetTable = _detailDataSet.StcDetail;
            }
            // --------------- ADD 2013/04/16 gezh FOR Redmine#35309 ---------->>>>>
            // XMLファイルが最新かどうかを判断する(true:最新ではない false:最新)
            bool flag = false;
            if (targetTable.Columns.Count != gridSetting.Length)
            {
                // XMLファイルが最新ではない
                flag = true;
            }
            // --------------- ADD 2013/04/16 gezh FOR Redmine#35309 ----------<<<<<
            foreach ( string settings in gridSetting )
            {
                if ( targetTable.Columns.Count <= columnOrder ) break;
                // --------------- ADD 2013/04/16 gezh FOR Redmine#35309 ---------->>>>>
                // XMLファイルが最新ではない且つ一列目は追加項目場合、飛ばす
                if (flag && 
                   (targetTable.Columns[columnOrder].ColumnName == _detailDataSet.StcDetail.SelectionCheckColumn.ColumnName 
                   || targetTable.Columns[columnOrder].ColumnName == _detailDataSet.StcList.SelectionColumn.ColumnName))
                {
                    columnOrder++;
                }
                // --------------- ADD 2013/04/16 gezh FOR Redmine#35309 ----------<<<<<

                // ３桁の数値なので１＋２に分割
                displayFlag = settings.Substring( 0, 1 );
                displayOrder = settings.Substring( 1, 2 );

                // 表示するであればDictionaryに追加
                if ( displayFlag == "0" )
                {
                    sortList.Add( int.Parse( displayOrder ), targetTable.Columns[columnOrder].ColumnName );
                }
                columnOrder++;
            }

            List<int> keyList = new List<int>( sortList.Keys );
            keyList.Sort();


            foreach ( int key in keyList )
            {
                schemeList.Add( sortList[key] );
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

            return true;
        }

        /// <summary>
        /// 比較用デリゲート
        /// </summary>
        /// <param name="kvp1"></param>
        /// <param name="kvp2"></param>
        /// <returns></returns>
        private int compare(
            KeyValuePair<int, string> kvp1,
            KeyValuePair<int, string> kvp2)
        {
            return kvp1.Key - kvp2.Key;
        }

        #endregion

        #region EXCEL出力

        /// <summary>
        /// EXCELデータ出力
        /// </summary>
        /// <remarks>
        /// <br>Note       : 残高一覧をEXCELデータ出力します。</br>
        /// <br>Update Note : 2010/07/20 chenyd</br>
        /// <br>           　テキスト出力対応</br>
        /// <br>Update Note: 2019/08/19 陳艶丹</br>
        /// <br>           : 11570163-00 PMKOBETSU-1379 テキスト出力操作ログおよび出力時アラートメッセージ追加対応</br>
        /// <remarks>
        private void exportIntoExcelData()
        {
            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 ----->>>>>
            // エラーメッセージ
            string errMsg = string.Empty;
            TextOutPutOprtnHisLogWork textOutPutOprtnHisLogWorkObj = null;
            // アラート表示
            int logStatus = TextOutPutOprtnHisLogAcsObj.ShowTextOutPut(this, out errMsg);
            // アラートでOKボタンが押されない場合、テキスト出力が実行できない
            if (logStatus != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                if (!string.IsNullOrEmpty(errMsg))
                {
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_STOP, this.Name,
                                errMsg, logStatus, MessageBoxButtons.OK);
                }
                // 中止
                return;
            }
            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 -----<<<<<
            string fileName = string.Empty;
            // ---------------------- ADD  2010/07/20 --------------------------------->>>>>
            if (this._selectedMainTabKey == "uTab_RemainList")
            {
                // --- UPD 2010/10/09 ---------->>>>>
                //PMKOU04001UC prtSetForm = new PMKOU04001UC(true, Convert.ToInt32(this.tComboEditor_rl_RemainType.Value));
                prtSetForm = new PMKOU04001UC(true, Convert.ToInt32(this.tComboEditor_rl_RemainType.Value));
                prtSetForm.OutputData += new PMKOU04001UC.OutputDataEvent(this.outputExcelData);
                prtSetForm.ShowDialog();
                //if (prtSetForm.DResult == DialogResult.Cancel)
                //{
                //    return;
                //}
                //SuppPrtPprBlnce suppPrtPprBlnce;
                //suppPrtPprBlnce = prtSetForm.SuppPrtPprBlnce;
                //SFCMN00299CA processingDialog = new SFCMN00299CA();
                //try
                //{
                //    processingDialog.Title = "抽出処理";
                //    processingDialog.Message = "現在、データ抽出中です。";
                //    processingDialog.DispCancelButton = false;
                //    processingDialog.Show((Form)this.Parent);
                //    this._suppPtrSearchAcs.SearchBalanceAll(ref suppPrtPprBlnce, prtSetForm.BalanceDiv);
                //}
                //finally
                //{
                //    processingDialog.Dispose();
                //}
                //if (_detailDataSet.BalanceList.Count == 0)
                //{
                //    // 該当データがないとエラー
                //    BalanceListReView();
                //    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                //        MSG_MATCHED_DATA_NOT_FOUND, -1, MessageBoxButtons.OK);

                //    return;
                //}
                //InitializeGridColumns(this.uGrid_BalanceList.DisplayLayout.Bands[0].Columns, 3);
                //List<ColumnInfo> balanceColumnsList;
                //this.SaveGridColumnsSetting(uGrid_BalanceList, out balanceColumnsList);
                //_settingForm.UserSetting.BalanceColumnsList = balanceColumnsList;
                //LoadGridColumnsSetting(ref uGrid_BalanceList, _settingForm.UserSetting.BalanceColumnsList);
                //fileName = prtSetForm.FileName;
                // --- UPD 2010/10/09 ----------<<<<<
            }
            else
            {
            // ---------------------- ADD  2010/07/20 --------------------------------<<<<<
                // ファイル保存ダイアログ表示
                this.openFileDialog.Multiselect = false;
                this.openFileDialog.CheckFileExists = false;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                this.openFileDialog.Filter = "Excelファイル(*.xls) | *.xls";
                this.openFileDialog.FilterIndex = 0;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

                //string fileName = string.Empty; //DEL 2010/07/20 
                fileName = string.Empty;

                // ファイル選択
                DialogResult result = this.openFileDialog.ShowDialog();
                if (result == DialogResult.OK)
                {
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                    //fileName = openFileDialog.FileName.ToUpper();
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                    fileName = openFileDialog.FileName;
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                }
                else if (result == DialogResult.Cancel)
                {
                    return;
                }

                if (String.IsNullOrEmpty(fileName))
                {
                    // ファイル名が指定されていない
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                        MSG_OUTPUTEXCEL_NOFILENAME, -1, MessageBoxButtons.OK);

                    return;
                }
            }
            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 ----->>>>>
            if (this._selectedMainTabKey == "uTab_SlipList" || this._selectedMainTabKey == "uTab_SlipDetail")
            {
                // エラーメッセージ
                errMsg = string.Empty;
                // テキスト出力操作ログ登録及び出力時アラートメッセージ表示処理
                logStatus = TextOutPutWrite(4, fileName, null, ref textOutPutOprtnHisLogWorkObj, out errMsg);

                // ログ登録異常またはアラートでOKボタンが押されない場合、テキスト出力が実行できない
                if (logStatus != (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                {
                    if (!string.IsNullOrEmpty(errMsg))
                    {
                        TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_STOP, this.Name,
                                    errMsg, logStatus, MessageBoxButtons.OK);
                    }
                    return;
                }
            }
            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 -----<<<<<

            bool successFlag = false; // ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応

            if (this._selectedMainTabKey == "uTab_SlipList")
            {
                try  // ADD 2010/07/20 
                {
                    if (this.ultraGridExcelExporter.Export(this.uGrid_Slip, fileName) != null)
                    {
                        // 成功
                        TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                            MSG_OUTPUTEXCEL_SUCCEEDED, -1, MessageBoxButtons.OK);

                        successFlag = true; // ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応
                    };
                // ---------------------- ADD 2010/07/20 --------------------------------->>>>>
                }
                catch (Exception ex)
                {
                    BalanceListReView();
                    TMsgDisp.Show(
                    this,
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    this.Name,
                    ex.Message,
                    -1,
                    MessageBoxButtons.OK);
                }
                // ---------------------- ADD 2010/07/20 ---------------------------------<<<<<
                
            }
            else if (this._selectedMainTabKey == "uTab_SlipDetail")
            {
                try   // ADD 2010/07/20 
                {
                    if (this.ultraGridExcelExporter.Export(this.uGrid_Detail, fileName) != null)
                    {
                        // 成功
                        TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                            MSG_OUTPUTEXCEL_SUCCEEDED, -1, MessageBoxButtons.OK);
                    };

                    successFlag = true; // ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応
                // ---------------------- ADD 2010/07/20 --------------------------------->>>>>
                }
                catch (Exception ex)
                {
                    BalanceListReView();
                    TMsgDisp.Show(
                    this,
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    this.Name,
                    ex.Message,
                    -1,
                    MessageBoxButtons.OK);
                }
                // ---------------------- ADD 2010/07/20 ---------------------------------<<<<<
            }

            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 ----->>>>>
            if (successFlag && (this._selectedMainTabKey == "uTab_SlipList" || this._selectedMainTabKey == "uTab_SlipDetail"))
            {
                errMsg = string.Empty;
                int count = 0;
                if (this._selectedMainTabKey == "uTab_SlipList")
                {
                    count = _detailDataSet.StcList.Count;
                }
                else
                {
                    count = _detailDataSet.StcDetail.Count;
                }
                // 操作履歴登録
                textOutPutOprtnHisLogWorkObj.LogOperationData = string.Format(CountNumStr, count.ToString()) + textOutPutOprtnHisLogWorkObj.LogOperationData;
                logStatus = TextOutPutOprtnHisLogAcsObj.Write(this, ref textOutPutOprtnHisLogWorkObj, out errMsg);
                // ログ登録異常の場合、テキスト出力が実行できない
                if (logStatus != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if (!string.IsNullOrEmpty(errMsg))
                    {
                        TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_STOP, this.Name,
                                    errMsg, logStatus, MessageBoxButtons.OK);
                    }
                    // 中止
                    return;
                }

            }
            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 -----<<<<<
            // --- DEL 2010/10/09 ---------->>>>>
            //else if (this._selectedMainTabKey == "uTab_RemainList")
            //{
            //    try   // ADD 2010/07/20 
            //    {
            //        if (this.ultraGridExcelExporter.Export(this.uGrid_BalanceList, fileName) != null)
            //        {
            //            BalanceListReView();  // ADD 2010/07/20 
            //            // 成功
            //            TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
            //                MSG_OUTPUTEXCEL_SUCCEEDED, -1, MessageBoxButtons.OK);
            //        };
            //    // ---------------------- ADD 2010/07/20 --------------------------------->>>>>
            //    }
            //    catch (Exception ex)
            //    {
            //        BalanceListReView();
            //        TMsgDisp.Show(
            //        this,
            //        emErrorLevel.ERR_LEVEL_EXCLAMATION,
            //        this.Name,
            //        ex.Message,
            //        -1,
            //        MessageBoxButtons.OK);
            //    }
            //    // ---------------------- ADD 2010/07/20 ---------------------------------<<<<<
            //}
            // --- DEL 2010/10/09 ----------<<<<<
        }

        // --- ADD 2010/10/09 ---------->>>>>
        /// <summary>
        /// Excel出力処理
        /// </summary>
        /// <returns>True:正常; False:異常</returns>
        /// <remarks>
        /// <br>Update Note: 2019/08/19 陳艶丹</br>
        /// <br>           : 11570163-00 PMKOBETSU-1379 テキスト出力操作ログおよび出力時アラートメッセージ追加対応</br>
        /// </remarks>
        private bool outputExcelData()
        {
            if (prtSetForm.DResult == DialogResult.Cancel)
            {
                return true;
            }
            SuppPrtPprBlnce suppPrtPprBlnce;
            suppPrtPprBlnce = prtSetForm.SuppPrtPprBlnce;
            SFCMN00299CA processingDialog = new SFCMN00299CA();
            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 ----->>>>>
            // エラーメッセージ
            string errMsg = string.Empty;
            TextOutPutOprtnHisLogWork textOutPutOprtnHisLogWorkObj = null;
            int logStatus = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 -----<<<<<
            try
            {
                //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 ----->>>>>
                // エラーメッセージ
                errMsg = string.Empty;
                // テキスト出力操作ログ登録及び出力時アラートメッセージ表示処理
                logStatus = TextOutPutWrite(3, string.Empty, suppPrtPprBlnce, ref textOutPutOprtnHisLogWorkObj, out errMsg);

                // ログ登録異常またはアラートでOKボタンが押されない場合、テキスト出力が実行できない
                if (logStatus != (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                {
                    if (!string.IsNullOrEmpty(errMsg))
                    {
                        TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_STOP, this.Name,
                                    errMsg, logStatus, MessageBoxButtons.OK);
                    }
                    return false;
                }
                //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 -----<<<<<
                processingDialog.Title = "抽出処理";
                processingDialog.Message = "現在、データ抽出中です。";
                processingDialog.DispCancelButton = false;
                processingDialog.Show((Form)this.Parent);
                this._suppPtrSearchAcs.SearchBalanceAll(ref suppPrtPprBlnce, prtSetForm.BalanceDiv);
            }
            finally
            {
                processingDialog.Dispose();
            }
            if (_detailDataSet.BalanceList.Count == 0)
            {
                // 該当データがないとエラー
                BalanceListReView();
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                    MSG_MATCHED_DATA_NOT_FOUND, -1, MessageBoxButtons.OK);

                return false;
            }

            InitializeGridColumns(this.uGrid_BalanceList.DisplayLayout.Bands[0].Columns, 3);
            List<ColumnInfo> balanceColumnsList;
            this.SaveGridColumnsSetting(uGrid_BalanceList, out balanceColumnsList);
            _settingForm.UserSetting.BalanceColumnsList = balanceColumnsList;
            LoadGridColumnsSetting(ref uGrid_BalanceList, _settingForm.UserSetting.BalanceColumnsList);
            string fileName = prtSetForm.FileName;

            if (this._selectedMainTabKey == "uTab_RemainList")
            {
                try
                {
                    if (this.ultraGridExcelExporter.Export(this.uGrid_BalanceList, fileName) != null)
                    {
                        int count = _detailDataSet.BalanceList.Count;// ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応
                        BalanceListReView();
                        //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 ----->>>>>
                        errMsg = string.Empty;
                        // 操作履歴登録
                        textOutPutOprtnHisLogWorkObj.LogOperationData = string.Format(CountNumStr, count.ToString()) + textOutPutOprtnHisLogWorkObj.LogOperationData;
                        logStatus = TextOutPutOprtnHisLogAcsObj.Write(this, ref textOutPutOprtnHisLogWorkObj, out errMsg);
                        // ログ登録異常の場合、テキスト出力が実行できない
                        if (logStatus != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            if (!string.IsNullOrEmpty(errMsg))
                            {
                                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_STOP, this.Name,
                                            errMsg, logStatus, MessageBoxButtons.OK);
                            }
                            // 中止
                            return false;
                        }
                        //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 -----<<<<<
                        // 成功
                        TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                            MSG_OUTPUTEXCEL_SUCCEEDED, -1, MessageBoxButtons.OK);
                    };
                }
                catch (Exception ex)
                {
                    BalanceListReView();
                    TMsgDisp.Show(
                    this,
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    this.Name,
                    ex.Message,
                    -1,
                    MessageBoxButtons.OK);
                    return false;
                }
            }
            return true;
        }

        /// <summary>
        /// テキスト出力処理
        /// </summary>
        /// <returns>True:正常; False:異常</returns>
        /// <remarks>
        /// <br>Update Note: 2019/08/19 陳艶丹</br>
        /// <br>           : 11570163-00 PMKOBETSU-1379 テキスト出力操作ログおよび出力時アラートメッセージ追加対応</br>
        /// </remarks>
        private bool outputTextData()
        {
            if (prtSetForm.DResult == DialogResult.Cancel)
            {
                return true;
            }
            SuppPrtPprBlnce suppPrtPprBlnce;
            suppPrtPprBlnce = prtSetForm.SuppPrtPprBlnce;
            SFCMN00299CA processingDialog = new SFCMN00299CA();
            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 ----->>>>>
            // エラーメッセージ
            string errMsg = string.Empty;
            TextOutPutOprtnHisLogWork textOutPutOprtnHisLogWorkObj = null;
            int logStatus = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 -----<<<<<
            try
            {
                //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 ----->>>>>
                // エラーメッセージ
                errMsg = string.Empty;
                // テキスト出力操作ログ登録及び出力時アラートメッセージ表示処理
                logStatus = TextOutPutWrite(2, string.Empty, suppPrtPprBlnce, ref textOutPutOprtnHisLogWorkObj, out errMsg);

                // ログ登録異常またはアラートでOKボタンが押されない場合、テキスト出力が実行できない
                if (logStatus != (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                {
                    if (!string.IsNullOrEmpty(errMsg))
                    {
                        TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_STOP, this.Name,
                                    errMsg, logStatus, MessageBoxButtons.OK);
                    }
                    return false;
                }
                //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 -----<<<<<
                processingDialog.Title = "抽出処理";
                processingDialog.Message = "現在、データ抽出中です。";
                processingDialog.DispCancelButton = false;
                processingDialog.Show((Form)this.Parent);
                this._suppPtrSearchAcs.SearchBalanceAll(ref suppPrtPprBlnce, prtSetForm.BalanceDiv);
            }
            finally
            {
                processingDialog.Dispose();
            }
            string outputFileName = prtSetForm.FileName;
            if (String.IsNullOrEmpty(outputFileName))
            {
                // ファイル名が指定されていないとエラー
                BalanceListReView();
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                    MSG_OUTPUTFILENAME_NOTFOUND, -1, MessageBoxButtons.OK);
                return false;
            }

            if (_detailDataSet.BalanceList.Count == 0)
            {
                // 該当データがないとエラー
                BalanceListReView();
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                    MSG_MATCHED_DATA_NOT_FOUND, -1, MessageBoxButtons.OK);
                return false;
            }

            InitializeGridColumns(this.uGrid_BalanceList.DisplayLayout.Bands[0].Columns, 3);
            List<ColumnInfo> balanceColumnsList;
            this.SaveGridColumnsSetting(uGrid_BalanceList, out balanceColumnsList);
            _settingForm.UserSetting.BalanceColumnsList = balanceColumnsList;
            LoadGridColumnsSetting(ref uGrid_BalanceList, _settingForm.UserSetting.BalanceColumnsList);

            String typeStr = string.Empty;
            Char typeChar = new char();
            Byte typeByte = new byte();
            DateTime typeDate = new DateTime();
            Int16 typeInt16 = new short();
            Int32 typeInt32 = new int();
            Int64 typeInt64 = new long();
            Single typeSingle = new float();
            Double typeDouble = new double();
            Decimal typeDecimal = new decimal();

            FormattedTextWriter tw = new FormattedTextWriter();

            Dictionary<int, string> sortList = new Dictionary<int, string>();
            List<String> schemeList = new List<string>();

            DataTable targetTable = _detailDataSet.BalanceList;
            targetTable.Columns["SupplierCode"].Caption = "支払先";
            targetTable.Columns["SupplierName"].Caption = "支払先名";
            targetTable.Columns["SectionCode"].Caption = "拠点";
            targetTable.Columns["ThisTimeStockPrice"].Caption = "今回仕入額";
            targetTable.Columns["ThisStckPricRgdsDis"].Caption = "返品・値引額";
            targetTable.Columns["OfsThisStockTax"].Caption = "消費税額";

            Infragistics.Win.UltraWinGrid.ColumnsCollection Columns = this.uGrid_BalanceList.DisplayLayout.Bands[0].Columns;
            int dispOrder;
            string columnName;
            for (int i = 0; i < Columns.Count; i++)
            {
                if (Columns[i].Hidden == false)
                {
                    dispOrder = Columns[i].Header.VisiblePosition;
                    columnName = targetTable.Columns[Columns[i].Index].ColumnName;
                    sortList.Add(dispOrder, columnName);
                }
            }

            List<int> keyList = new List<int>(sortList.Keys);
            keyList.Sort();

            foreach (int key in keyList)
            {
                schemeList.Add(sortList[key]);
            }


            // 出力項目名
            tw.SchemeList = schemeList;

            // データソース
            tw.DataSource = this.uGrid_BalanceList.DataSource;
            // グリッドのソート情報を適用する
            if (tw.DataSource is DataView)
            {
                (tw.DataSource as DataView).Sort = GetSortingColumns(this.uGrid_BalanceList);
            }

            # region [フォーマットリスト]
            Dictionary<string, string> formatList = new Dictionary<string, string>();
            foreach (Infragistics.Win.UltraWinGrid.UltraGridColumn col in uGrid_BalanceList.DisplayLayout.Bands[0].Columns)
            {
                formatList.Add(col.Key, col.Format);
            }
            tw.FormatList = formatList;

            #endregion // フォーマットリスト

            #region オプションセット
            // ファイル名
            tw.OutputFileName = outputFileName;
            // 区切り文字
            tw.Splitter = ",";
            // 項目括り文字
            tw.Encloser = "\"";
            // 固定幅
            tw.FixedLength = false;
            // タイトル行出力
            tw.CaptionOutput = true;
            // 項目括り適用
            List<Type> enclosingList = new List<Type>();
            enclosingList.Add(typeInt16.GetType());
            enclosingList.Add(typeInt32.GetType());
            enclosingList.Add(typeInt64.GetType());
            enclosingList.Add(typeDouble.GetType());
            enclosingList.Add(typeDecimal.GetType());
            enclosingList.Add(typeSingle.GetType());
            enclosingList.Add(typeStr.GetType());
            enclosingList.Add(typeChar.GetType());
            enclosingList.Add(typeByte.GetType());
            enclosingList.Add(typeDate.GetType());
            tw.EnclosingTypeList = enclosingList;

            int outputCount = 0;
            int status = tw.TextOut(out outputCount);

            BalanceListReView();

            if (status == 9)// 異常終了
            {
                // 出力失敗
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                    MSG_OUTPUTFILE_FAILED, -1, MessageBoxButtons.OK);
                return false;
            }
            else
            {
                // 出力成功
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                    outputCount.ToString() + MSG_OUTPUTFILE_SUCCEEDED, -1, MessageBoxButtons.OK);
                //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 ----->>>>>
                // エラーメッセージ
                errMsg = string.Empty;
                // 操作履歴登録
                textOutPutOprtnHisLogWorkObj.LogOperationData = string.Format(CountNumStr, outputCount.ToString()) + textOutPutOprtnHisLogWorkObj.LogOperationData;
                logStatus = TextOutPutOprtnHisLogAcsObj.Write(this, ref textOutPutOprtnHisLogWorkObj, out errMsg);
                // ログ登録異常の場合、テキスト出力が実行できない
                if (logStatus != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if (!string.IsNullOrEmpty(errMsg))
                    {
                        TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_STOP, this.Name,
                                    errMsg, logStatus, MessageBoxButtons.OK);
                    }
                    // 中止
                    return false;
                }
                //----- ADD 2019/08/19 陳艶丹 テキスト出力操作ログおよび出力時アラートメッセージ追加対応 -----<<<<<
                return true;
            }

            #endregion // オプション
        }
        // --- ADD 2010/10/09 ----------<<<<<

        #endregion // EXCEL出力

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        /// <summary>
        /// 画面クリア処理
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 返品計上タブ初期化、検索条件クリア追加</br>
        /// </remarks>
        private void ClearInput()
        {
            // 確認ダイアログ
            if ( TMsgDisp.Show( this, emErrorLevel.ERR_LEVEL_QUESTION, this.Name,
                MSG_CONFIRM_CLEARINPUT,
                -1, MessageBoxButtons.YesNo ) == DialogResult.No )
            {
                return;
            }

            // 描画停止 ＞＞＞
            this.SuspendLayout();
            try
            {
                // 共通条件グループを強制的に展開状態にする
                uExGroupBox_CommonCondition.Expanded = true;
                // フォーカス移動
                tNedit_SupplierCd.Focus();

                // 初期化
                ClearInputProc();

                // ADD 譚洪 2013/09/04 #40258 --------------------------------------->>>>>
                // グリッドフィルタ解除 (検索結果が更新された時、紛らわしい為)
                uGrid_Slip.DisplayLayout.Bands[0].ColumnFilters.ClearAllFilters();
                uGrid_Detail.DisplayLayout.Bands[0].ColumnFilters.ClearAllFilters();
                uGrid_BalanceList.DisplayLayout.Bands[0].ColumnFilters.ClearAllFilters();
                // ADD 譚洪 2013/09/04 #40258 ---------------------------------------<<<<<

                // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                // 返品計上タブ初期化
                ClearRedSlipInput();

                this._suppPrtPpr = new SuppPrtPpr();
                // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

                // 詳細条件の表示
                DisplayExtraConditions();
                // 詳細条件のクリア
                ClearExtraConditions();
            }
            finally
            {
                // 描画再開 ＜＜＜
                this.ResumeLayout();
            }
        }

        /// <summary>
        /// 初期化処理
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2010/07/20 chenyd</br>
        /// <br>           　テキスト出力対応</br>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>             [仕入返品計上] 処理区分と伝票区分コンボボックスの初期値設定追加</br>
        /// <remarks>
        private void ClearInputProc()
        {
            int status;

            // 締日取得前初期処理
            status = _tCalcAcs.InitializeHisMonthlyAccPay();

            if ( status == (int)ConstantManagement.DB_Status.ctDB_NORMAL )
            {
                // 今回および前回の締め日/月を取得(月と日は異なる場合がある)
                status = _tCalcAcs.GetHisTotalDayMonthlyAccPay( this._loginSectionCode, out this._prevTotalDay, out this._currentTotalDay, out this._prevTotalMonth, out this._currentTotalMonth );

                if ( _prevTotalDay == DateTime.MinValue )
                {
                    DateTime today = DateTime.Today;
                    this.tDateEdit_StockDateSt.SetDateTime( today );
                    this.tDateEdit_StockDateEd.SetDateTime( today );
                }
                else
                {
                    this.tDateEdit_StockDateSt.SetDateTime( this._prevTotalDay.AddDays( 1 ) );
                    this.tDateEdit_StockDateEd.SetDateTime( DateTime.Today );
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                    if ( this._prevTotalDay.AddDays( 1 ) > DateTime.Today )
                    {
                        this.tDateEdit_StockDateEd.SetDateTime( this._prevTotalDay.AddDays( 1 ) );
                    }
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD
                }
            }
            else
            {
                // 初期処理失敗
                TMsgDisp.Show( this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name,
                    MSG_TOTALDAY_INITIALIE_FAILED, -1, MessageBoxButtons.OK );
            }

            this._selectedMainTabKey = "uTab_SlipDetail";
            this.uTabControl.Tabs["uTab_SlipDetail"].Selected = true; 
            this.uCheckEditor_StatusBar_AutoFillToGridColumn.Checked = this._columnWidthAutoAdjust_Detail;
            autoColumnAdjust( this._columnWidthAutoAdjust_Detail, 0 );
            //adjustButtonEnable( 1 ); // DEL 2010/07/20 
            adjustStatusBarCellExample( true );
            setToolbarSearchSurface();

            //// 行選択ボタンOFF
            //this.tToolbarsManager.Tools["ButtonTool_RowSelect"].SharedProps.Enabled = false;

            // 画面をリセット
            ClearAllField();

            // 画面の初期値をセット
            this.tEdit_SectionCodeAllowZero.Text = this._loginSectionCode.Trim();
            SecInfoSet secInfoSet;
            _secInfoSetAcs.Read( out secInfoSet, this._enterpriseCode, this._loginSectionCode.Trim() );
            uLabel_SectionNm.Text = secInfoSet.SectionGuideNm;

            // 締め日
            if ( _prevTotalDay == DateTime.MinValue )
            {
                // 画面へセット
                // 当月(年月度)取得
                DateTime thisYearMonth;
                _dateGetAcs.GetThisYearMonth( out thisYearMonth );
                this.tDateEdit_rl_TargetYMSt.SetDateTime( thisYearMonth );
                this.tDateEdit_rl_TargetYMEd.SetDateTime( thisYearMonth );
            }
            else
            {
                // 画面へセット
                this.tDateEdit_rl_TargetYMSt.SetDateTime( this._prevTotalMonth ); // 前回締処理月
                this.tDateEdit_rl_TargetYMEd.SetDateTime( this._prevTotalMonth ); // 前回締処理月
            }

            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            this.tComboEditor_StockRetGdsPlnFlag.SelectedIndex = 0;
            // 伝票区分コンボボックス初期値設定
            setTComboEditorStockSlipCdItems(0);
            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

            // 前回入力値保持用
            _prevInputValue = new PrevInputValue();

            // 前回値としての初期値セット
            _prevInputValue.SectionCode = this.tEdit_SectionCodeAllowZero.Text.Trim();
            _prevInputValue.SupplierCode = 0;
            _prevInputValue.PayeeCode = 0;
            _prevInputValue.RetGdsInputEmployeeCd = this.tEdit_rs_StockAgentCd.Text.Trim(); // ADD 2013/01/21 [仕入返品計上]

            // データセットをクリア
            this._detailDataSet.StcList.Clear();
            this._detailDataSet.StcDetail.Clear();
            this._detailDataSet.BalanceTotal.Clear();
            this._detailDataSet.BalanceList.Clear();// ADD 2010/07/20
            this._detailDataSet.RetGdsStcList.Clear();  // ADD 2013/01/21 [仕入返品計上]
            this._detailDataSet.RetGdsStcDetail.Clear();  // ADD 2013/01/21 [仕入返品計上]

            this._custPrtPprBackUp = null;
            this._custPrtPprBlnceBackUp = null;
            this._rl_RemainTypeBackup = string.Empty;
            this._logicalDelDivBackUp = -1;

            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            this._stockRetGdsPlnFlagBackup = -1;
            this._searchedStockRetGdsPln = 0;
            this._redSlipBottonFlag = false;
            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

            // 残高一覧タブを選択不可にする
            //_remainTabSelectable = false; // DEL 2010/07/20 

            // ---------------------- ADD 2010/07/20 --------------------------------->>>>>
            // タブ選択
            if (_selectedMainTabKey.Equals("uTab_SlipList"))
            {
                adjustButtonEnable(0);
            }
            if (_selectedMainTabKey.Equals("uTab_SlipDetail"))
            {
                adjustButtonEnable(1);
            }
            if (_selectedMainTabKey.Equals("uTab_RemainList"))
            {
                adjustButtonEnable(2);
            }
            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            if (_selectedMainTabKey.Equals("uTab_RedSlip"))
            {
                adjustButtonEnable(3);
            }
            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
            // ---------------------- ADD 2010/07/20 ---------------------------------<<<<<
        }
        /// <summary>
        /// 詳細条件のクリア
        /// </summary>
        /// <remarks>
        /// <br>Update Note: 2013/01/11 田建委</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33833 初期起動時の伝票区分のデフォルト値を「仕入／仕入返品」にするように修正</br>
        /// </remarks>
        private void ClearExtraConditions()
        {
            # region [ＵＩ入力値のクリア]
            // 詳細条件パネル内の全コントロールに対して処理する
            foreach ( Control targetControl in ultraExpandableGroupBoxPanel2.Controls )
            {
                if ( targetControl is TNedit )
                {
                    // 内容クリア
                    (targetControl as TNedit).Clear();
                }
                else if ( targetControl is TEdit )
                {
                    // 内容クリア
                    (targetControl as TEdit).Text = string.Empty;
                }
                else if ( targetControl is TComboEditor )
                {
                    // 先頭アイテムを選択
                    (targetControl as TComboEditor).SelectedIndex = 0;
                }
            }
            # endregion

            this.tComboEditor_StockSlipCd.SelectedIndex = 1; // ADD 2013/01/11 田建委 Redmine#33833

            # region [退避値のクリア]

            // **** あいまい検索を行う項目用 ****
            _srPartySalesSlipNum = string.Empty;
            _srRvPartySalesSlipNum = string.Empty;
            _srSupplierSlipNote1 = string.Empty;
            _srRvSupplierSlipNote1 = string.Empty;
            _srSupplierSlipNote2 = string.Empty;
            _srRvSupplierSlipNote2 = string.Empty;
            _srUOERemark1 = string.Empty;
            _srRvUOERemark1 = string.Empty;
            _srUOERemark2 = string.Empty;
            _srRvUOERemark2 = string.Empty;
            _srGoodsName = string.Empty;
            _srRvGoodsName = string.Empty;
            _srGoodsNo = string.Empty;
            _srRvGoodsNo = string.Empty;

            // **** コード←→名称を切り替える項目用 ****
            _swStockAgentCode = string.Empty;
            _swStockAgentName = string.Empty;
            _swStockInputCode = string.Empty;
            _swStockInputName = string.Empty;
            _swBLGroupCode = 0;
            _swBLGroupName = string.Empty;
            _swBLGoodsCode = 0;
            _swBLGoodsName = string.Empty;
            _swGoodsMakerCd = 0;
            _swGoodsMakerName = string.Empty;
            _swWarehouseCd = string.Empty;
            _swWarehouseName = string.Empty;

            _logicalDelDiv = 0;
            _stockRetGdsPlnFlagBackup = 0; // ADD 2013/01/21 [仕入返品計上]

            # endregion
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
        #region 伝票削除
        /// <summary>
        /// 仕入返品予定伝票削除
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 伝票削除処理追加</br>
        /// </remarks>
        private void SlipDelete()
        {
            // 確認ダイアログ
            if (TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_QUESTION, this.Name,
                MSG_CONFIRM_SLIPDELETE,
                -1, MessageBoxButtons.YesNo) == DialogResult.No)
            {
                return;
            }

            // 選択伝票取得
            DataRow[] SelectedRows = null;
            if (this._selectedMainTabKey == "uTab_SlipList") // 伝票一覧タブ
            {
                SelectedRows = this._detailDataSet.StcList.Select("Selection = true");
            }
            else
            {
                // 削除は伝票一覧からのみ可能
                return;
            }

            // エラーチェック(選択伝票なし)
            if (SelectedRows == null || SelectedRows.Length <= 0)
            {
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, 
                    this.Name,
                    MSG_SLIPDELETE_NOT_SELECTED,
                    -1, 
                    MessageBoxButtons.OK);

                return;
            }

            // エラーチェック(選択伝票の仕入形式)
            foreach (DataRow SlipRow in SelectedRows)
            {
                // 仕入形式が3:返品予定以外の伝票が含まれていた場合は削除しない
                if ((int)SlipRow[this._detailDataSet.StcList.SupplierFormalColumn.ColumnName] != 3) // 返品予定
                {
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        this.Name,
                        MSG_SLIPDELETE_NOT_STOCK_RET_GOODS_PLAN,
                        -1,
                        MessageBoxButtons.OK);

                    return;
                }
            }

            // 仕入返品計上更新部品(伝票削除)呼び出し
            SuppPtrStockDetailAcs.RetGdsAddUpWriteParameter para = new SuppPtrStockDetailAcs.RetGdsAddUpWriteParameter();
            para.EnterpriseCode = this._enterpriseCode;  // 企業コード
            string errMsg;
            int status = _suppPtrStcDetailAcs.DeleteSlip(para, SelectedRows, this._detailDataSet.RetGdsStcList, out errMsg);

            // 部品の戻り値チェック
            if (status != 0)
            {
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    this.Name,
                    errMsg,
                    -1,
                    MessageBoxButtons.OK);

                return;
            }
            else
            {
                // 伝票一覧で再検索
                // 再検索
                this._custPrtPprBackUp = null;
                this._custPrtPprBlnceBackUp = null;

                // 検索実行
                Control errorControl = SearchSlipDetailList();

                // エラーコントロールに移動
                if (errorControl != null)
                {
                    errorControl.Focus();
                }
            }
        }
        #endregion 伝票削除

        #region 明細選択
        /// <summary>
        /// 明細選択
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 明細選択追加</br>
        /// </remarks>
        private void DetailSelectSetting()
        {
            KeyEventArgs e = new KeyEventArgs(Keys.Space);
            if (this.uTabControl.Tabs["uTab_SlipDetail"].Selected)
            {
                uGrid_Detail_KeyDown(null, e);
            }
            else if (this.uTabControl.Tabs["uTab_SlipList"].Selected)
            {
                uGrid_Slip_KeyDown(null, e);
            }
        }

        #region チェックされた伝票から明細を選択
        /// <summary>
        /// チェックされた伝票から明細を選択
        /// </summary>
        /// <returns>明細の選択に成功 true, 失敗 false</returns>
        /// <remarks>
        /// 伝票一覧で選択された伝票が１件のときのみ呼び出し可能
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 明細選択追加</br>
        /// </remarks>
        private bool SelectAllDetailFromSelectedSlip()
        {
            int selectedRowNo = 0;
            // 選択行数をチェック
            selectedRowNo = this._detailDataSet.StcList.Select("Selection = true").Length;
            if (selectedRowNo > 1 || selectedRowNo == 0) return false;

            // 選択行を特定
            string suppSlipNo = string.Empty;
            int suppFormal = 0;
            DataRow[] rows = this._detailDataSet.StcList.Select("Selection = true");
            int RowNo = 0;
            foreach (DataRow row in rows)
            {
                // １件しかないよ
                // 選択行の仕入伝票番号と仕入形式
                suppSlipNo = row[this._detailDataSet.StcList.SupplierSlipNoColumn.ColumnName].ToString();
                suppFormal = Int32.Parse(row[this._detailDataSet.StcList.SupplierFormalColumn.ColumnName].ToString());

            }

            // UOE発注などは仕入SEQ/支払№が空の場合あり。スキップする
            if (string.IsNullOrEmpty(suppSlipNo))
            {
                return false;
            }

            //----------------------------------------------------------------
            // ・売上伝票入力で行挿入の機能を使うと、
            // 　DB上の明細作成順と行№順が異なる伝票が作成できる。
            // ・伝票選択→全明細赤伝選択するとき、赤伝Gridへの追加順を
            //   行№順にする。
            //----------------------------------------------------------------

            // 明細表示DataTableのビューを生成
            DataView detailView = new DataView(this._detailDataSet.StcDetail);
            // (フィルタ)
            detailView.RowFilter = string.Format("{0}='{1}' AND {2}='{3}'",
                                                    this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName, suppSlipNo,
                                                    this._detailDataSet.StcDetail.SupplierFormalColumn.ColumnName, suppFormal);
            // (ソート)
            detailView.Sort = string.Format("{0},{1}",
                                                    this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName,
                                                    this._detailDataSet.StcDetail.StockRowNoColumn.ColumnName);

            if (detailView.Count == 0)
            {
                return false;
            }
            else
            {
                try
                {
                    uGrid_Detail.BeginUpdate();

                    foreach (DataRowView rowView in detailView)
                    {
                        // RowViewに対応するRowを取得
                        DataRow detailRow = rowView.Row;

                        // 行を選択
                        RowNo = Int32.Parse(detailRow["RowNo"].ToString());

                        // 明細行を選択
                        foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in this.uGrid_Detail.Rows)
                        {
                            if ((int)gridRow.Cells[this._detailDataSet.StcDetail.RowNoColumn.ColumnName].Value == RowNo &&
                                gridRow.Cells[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Value != DBNull.Value &&
                                (bool)gridRow.Cells[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Value == false)
                            {
                                // 選択チェックボックスクリック処理呼び出し
                                RowSelectClicked(gridRow, 1);
                                break;
                            }
                        }
                    }
                }
                finally
                {
                    uGrid_Detail.EndUpdate();
                }

                // グリッドを更新
                this.uGrid_Detail.Refresh();
                this.uGrid_RedSlip.Refresh();
            }

            return true;
        }
        #endregion // チェックされた伝票から明細を選択

        #endregion 明細選択

        #region 伝票選択
        /// <summary>
        /// 伝票選択
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 伝票選択追加</br>
        /// </remarks>
        private void StockSlipSelectSetting()
        {
            KeyEventArgs e = new KeyEventArgs(Keys.Space);
            if (this.uTabControl.Tabs["uTab_SlipDetail"].Selected)
            {
                DetailSelectSetting(e);
            }
            else if (this.uTabControl.Tabs["uTab_SlipList"].Selected)
            {
                uGrid_Slip_KeyDown(null, e);
            }
        }

        /// <summary>
        /// 明細表示タブ上で伝票選択
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 伝票選択追加</br>
        /// </remarks>
        private void DetailSelectSetting(System.Windows.Forms.KeyEventArgs e)
        {
            try
            {
                this.uGrid_Detail.BeginUpdate();
                Infragistics.Win.UltraWinGrid.UltraGridRow gridRow = null;
                string suppSlipNo = string.Empty;
                int suppFormal = 0;

                if (this.uGrid_Detail.ActiveCell == null && this.uGrid_Detail.ActiveRow != null)
                {
                    this.uGrid_Detail.ActiveCell = this.uGrid_Detail.ActiveRow.Cells[0];
                }
                if (this.uGrid_Detail.ActiveCell != null)
                {
                    gridRow = this.uGrid_Detail.ActiveCell.Row;

                    // 選択行の仕入伝票番号と仕入形式
                    suppSlipNo = gridRow.Cells[this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName].Value.ToString();
                    suppFormal = (int)gridRow.Cells[this._detailDataSet.StcDetail.SupplierFormalColumn.ColumnName].Value;

                    // UOE発注などは仕入SEQ/支払№が空の場合あり。スキップする
                    if (string.IsNullOrEmpty(suppSlipNo))
                    {
                        return;
                    }

                    // 明細表示DataTableのビューを生成
                    DataView detailView = new DataView(this._detailDataSet.StcDetail);
                    // (フィルタ)
                    detailView.RowFilter = string.Format("{0}='{1}' AND {2}='{3}'",
                                                            this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName, suppSlipNo,
                                                            this._detailDataSet.StcDetail.SupplierFormalColumn.ColumnName, suppFormal);
                                                            
                    // (ソート)
                    detailView.Sort = string.Format("{0},{1}",
                                                            this._detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName,
                                                            this._detailDataSet.StcDetail.StockRowNoColumn.ColumnName);

                    if (detailView.Count > 0)
                    {
                        int rowNo = 0;
                        bool selectionCheckFlg = true;
                        foreach (DataRowView rowView in detailView)
                        {
                            // RowViewに対応するRowを取得
                            DataRow detailRow = rowView.Row;

                            // 行を選択
                            rowNo = Int32.Parse(detailRow["RowNo"].ToString());

                            // 明細行を選択
                            foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridDetailRow in this.uGrid_Detail.Rows)
                            {
                                if ((int)gridDetailRow.Cells[this._detailDataSet.StcDetail.RowNoColumn.ColumnName].Value == rowNo &&
                                    gridDetailRow.Cells[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Value != DBNull.Value &&
                                    (bool)gridDetailRow.Cells[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Value == false)
                                {
                                    selectionCheckFlg = false;
                                    RowSelectClicked(gridDetailRow, 1);
                                    break;
                                }
                            }
                        }

                        // 伝票の明細行が全部選択しない場合
                        if (selectionCheckFlg == true)
                        {

                            foreach (DataRowView dataRowView in detailView)
                            {
                                // dataRowViewに対応するRowを取得
                                DataRow detailRow = dataRowView.Row;

                                // 行を選択
                                rowNo = Int32.Parse(detailRow["RowNo"].ToString());

                                // 明細行を選択
                                foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridDetailRow in this.uGrid_Detail.Rows)
                                {
                                    if ((int)gridDetailRow.Cells[this._detailDataSet.StcDetail.RowNoColumn.ColumnName].Value == rowNo &&
                                        gridDetailRow.Cells[this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Value != DBNull.Value)
                                    {
                                        RowSelectClicked(gridDetailRow, 1);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            finally
            {
                this.uGrid_Detail.EndUpdate();
                // グリッドを更新
                this.uGrid_Detail.Refresh();
            }
        }
        #endregion 伝票選択
        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

        #region アローキーコントロール

        /// <summary>
        /// アローキーコントロール
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品予定]返品計上入力タブ追加</br>
        /// </remarks>
        private void tArrowKeyControl_ChangeFocus(object sender, ChangeFocusEventArgs e)
        {
            // ADD 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ---------->>>>>
            // 抽出キャンセル
            if (e.Key == Keys.Escape)
            {
                CancelExtract();
            }
            // ADD 2010/01/27 MANTIS対応[14545]：得意先電子元帳と同様の速度アップ対応（2009/10/07実施）の組み込み ----------<<<<<

            if (e.PrevCtrl == null || e.NextCtrl == null) return;
            this._prevControl = e.NextCtrl;

            // PrevCtrl設定
            Control prevCtrl = new Control();
            if (e.PrevCtrl is Control)
            {
                prevCtrl = (Control)e.PrevCtrl;
                this._control = prevCtrl; // ADD 2013/01/21 [返品予定計上]
            }
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            // フッタ項目へ移動した場合は移動キャンセル
            if ( e.NextCtrl == tComboEditor_StatusBar_FontSize )
            {
                if ( !e.ShiftKey && (e.Key == Keys.Down || e.Key == Keys.Right || e.Key == Keys.Tab || e.Key == Keys.Return) )
                {
                    e.NextCtrl = e.PrevCtrl;
                    return;
                }
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

            // 名前により分岐
            switch (prevCtrl.Name)
            {
                //---------------------------------------------------------------
                // フィールド間移動
                //---------------------------------------------------------------

                #region 拠点コード
                // 拠点コード
                case "tEdit_SectionCodeAllowZero":
                    {
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                        //switch (e.Key)
                        //{
                        //    case Keys.Enter:
                        //    case Keys.Tab:
                        //        {
                        //            if (String.IsNullOrEmpty(this.tEdit_SectionCodeAllowZero.Text.Trim()))
                        //            {
                        //                e.NextCtrl = this.uButton_SectionGuide;
                        //            }
                        //            else
                        //            {
                        //                e.NextCtrl = this.tNedit_SupplierCd;
                        //            }
                        //            break;
                        //        }
                        //}
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD

                        string inputValue = this.tEdit_SectionCodeAllowZero.Text;

                        string code;
                        string name;
                        bool status = ReadSectionCodeAllowZeroName( out code, out name );

                        if ( status == true )
                        {
                            isError = false; // 2010/09/21
                            this.tEdit_SectionCodeAllowZero.Text = code;
                            this.uLabel_SectionNm.Text = name;

                            if ( !e.ShiftKey )
                            {
                                switch ( e.Key )
                                {
                                    case Keys.Left:
                                    case Keys.Up:
                                        {
                                            e.NextCtrl = null;
                                        }
                                        break;
                                    case Keys.Tab:
                                    case Keys.Return:
                                        {
                                            if ( String.IsNullOrEmpty( this.tEdit_SectionCodeAllowZero.Text.Trim() ) )
                                            {
                                                e.NextCtrl = this.uButton_SectionGuide;
                                            }
                                            else
                                            {
                                                e.NextCtrl = this.tNedit_SupplierCd;
                                            }
                                        }
                                        break;
                                }
                            }
                            else
                            {
                                switch ( e.Key )
                                {
                                    case Keys.Tab:
                                        {
                                            e.NextCtrl = null;
                                        }
                                        break;
                                }
                            }
                        }
                        else
                        {
                            // エラー時
                            TMsgDisp.Show(
                                this,
                                emErrorLevel.ERR_LEVEL_INFO,
                                this.Name,
                                "拠点コード [" + inputValue + "] に該当するデータが存在しません。",
                                -1,
                                MessageBoxButtons.OK );

                            isError = true; // 2010/09/21
                            // コード戻す
                            this.tEdit_SectionCodeAllowZero.Text = code;
                            this.tEdit_SectionCodeAllowZero.SelectAll();
                            e.NextCtrl = e.PrevCtrl;
                        }

                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                        break;
                    }
                #endregion // 拠点コード

                #region 拠点ガイド
                // 拠点ガイド
                case "uButton_SectionGuide":
                    {
                        // ----------DLL 2013/01/21 [仕入返品計上]----------->>>>>
                        //switch (e.Key)
                        //{
                        //    case Keys.Return:
                        //    case Keys.Tab:
                        //        {
                        //            e.NextCtrl = this.tNedit_SupplierCd;
                        //            break;
                        //        }
                        //}
                        // ----------DLL 2013/01/21 [仕入返品計上]-----------<<<<<
                        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tNedit_SupplierCd;
                                        break;
                                    }
                            }
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tEdit_SectionCodeAllowZero;
                                        break;
                                    }
                            }
                        }
                        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                        break;
                    }
                #endregion // 拠点ガイド

                #region 仕入先コード
                // 仕入先コード
                case "tNedit_SupplierCd":
                    {
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                        //switch (e.Key)
                        //{
                        //    case Keys.Return:
                        //    case Keys.Tab:
                        //        {
                        //            if (String.IsNullOrEmpty(this.tNedit_SupplierCd.Text.Trim()))
                        //            {
                        //                e.NextCtrl = this.uButton_SupplierGuide;
                        //            }
                        //            else
                        //            {
                        //                e.NextCtrl = this.tNedit_PayeeCode;
                        //            }
                        //            break;
                        //        }
                        //}
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                        int inputValue = tNedit_SupplierCd.GetInt();
                        int code;
                        bool status = ReadSupplierName( out code );

                        if ( status == true )
                        {
                            isError = false; // 2010/09/21
                            tNedit_SupplierCd.SetInt( code );

                            if ( !e.ShiftKey )
                            {
                                // --- DEL 2012/09/13 ---------->>>>>
                                //switch (e.Key)
                                //{
                                //    case Keys.Return:
                                //    case Keys.Tab:
                                //        {
                                //            if (String.IsNullOrEmpty(this.tNedit_SupplierCd.Text.Trim()))
                                //            {
                                //                e.NextCtrl = this.uButton_SupplierGuide;
                                //            }
                                //            else
                                //            {
                                //                e.NextCtrl = this.tNedit_PayeeCode;
                                //            }
                                //            break;
                                //        }
                                //}
                                // --- DEL 2012/09/13 ----------<<<<<
                                // --- ADD 2012/09/13 ---------->>>>>
                                if (_opt_SupplierSummary == (int)Option.ON)
                                {
                                    switch (e.Key)
                                    {
                                        case Keys.Return:
                                        case Keys.Tab:
                                            {
                                                if (String.IsNullOrEmpty(this.tNedit_SupplierCd.Text.Trim()))
                                                {
                                                    e.NextCtrl = this.uButton_SupplierGuide;
                                                }
                                                else
                                                {
                                                    e.NextCtrl = this.tDateEdit_StockDateSt;
                                                }
                                                break;
                                            }
                                    }
                                }
                                else
                                {
                                    switch (e.Key)
                                    {
                                        case Keys.Return:
                                        case Keys.Tab:
                                            {
                                                if (String.IsNullOrEmpty(this.tNedit_SupplierCd.Text.Trim()))
                                                {
                                                    e.NextCtrl = this.uButton_SupplierGuide;
                                                }
                                                else
                                                {
                                                    e.NextCtrl = this.tNedit_PayeeCode;
                                                }
                                                break;
                                            }
                                    }
                                }
                                // --- ADD 2012/09/13 ----------<<<<<
                            }
                        }
                        else
                        {
                            // エラー時
                            TMsgDisp.Show(
                                this,
                                emErrorLevel.ERR_LEVEL_INFO,
                                this.Name,
                                "仕入先コード [" + inputValue + "] に該当するデータが存在しません。",
                                -1,
                                MessageBoxButtons.OK );

                            isError = true; // 2010/09/21
                            // コードを戻す
                            tNedit_SupplierCd.SetInt( code );
                            tNedit_SupplierCd.SelectAll();

                            e.NextCtrl = e.PrevCtrl;
                        }
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                        break;
                    }
                #endregion // 仕入先コード

                #region 仕入先ガイド
                // 仕入先ガイド
                case "uButton_SupplierGuide":
                    {
                        // ----------DEL 2013/01/21 [仕入返品計上]----------->>>>>
                        //switch (e.Key)
                        //{
                        //    case Keys.Return:
                        //    case Keys.Tab:
                        //        {
                        //            e.NextCtrl = this.tNedit_PayeeCode;
                        //            break;
                        //        }
                        //}
                        // ----------DEL 2013/01/21 [仕入返品計上]-----------<<<<<
                        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                        if (!e.ShiftKey)
                        {
                           // --- ADD 2012/09/13 ---------->>>>>
                           if (_opt_SupplierSummary == (int)Option.ON)
                           {
                               switch (e.Key)
                               {
                                   case Keys.Return:
                                   case Keys.Tab:
                                       {
                                           e.NextCtrl = this.tDateEdit_StockDateSt;
                                           break;
                                       }
                               }
   
                           }
                           else
                           {
                               switch (e.Key)
                               {
                                   case Keys.Return:
                                   case Keys.Tab:
                                       {
                                           e.NextCtrl = this.tNedit_PayeeCode;
                                           break;
                                       }
                               }
                           }
                           // --- ADD 2012/09/13 ----------<<<<<
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tNedit_SupplierCd;
                                        break;
                                    }
                            }
                        }
                        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                        break;
                    }
                #endregion // 仕入先ガイド

                #region 支払先コード
                // 支払先コード
                case "tNedit_PayeeCode":
                    {
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                        //switch (e.Key)
                        //{
                        //    case Keys.Return:
                        //    case Keys.Tab:
                        //        {
                        //            if (String.IsNullOrEmpty(this.tNedit_PayeeCode.Text.Trim()))
                        //            {
                        //                e.NextCtrl = this.uButton_PayeeGuide;
                        //            }
                        //            else
                        //            {
                        //                e.NextCtrl = this.tDateEdit_StockDateSt;
                        //            }
                        //            break;
                        //        }
                        //}
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                        int inputValue = tNedit_PayeeCode.GetInt();

                        int code;
                        bool status = ReadPayeeName( out code );

                        if ( status == true )
                        {
                            isError = false; // 2010/09/21
                            tNedit_PayeeCode.SetInt( code );

                            if ( !e.ShiftKey )
                            {
                                switch ( e.Key )
                                {
                                    case Keys.Return:
                                    case Keys.Tab:
                                        {
                                            if ( String.IsNullOrEmpty( this.tNedit_PayeeCode.Text.Trim() ) )
                                            {
                                                e.NextCtrl = this.uButton_PayeeGuide;
                                            }
                                            else
                                            {
                                                //e.NextCtrl = this.tDateEdit_StockDateSt; // DLL 2013/01/21 [仕入返品計上]

                                                // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                                                if (this.tComboEditor_StockRetGdsPlnFlag.Visible)
                                                {
                                                    e.NextCtrl = this.tComboEditor_StockRetGdsPlnFlag;
                                                }
                                                else
                                                {
                                                    e.NextCtrl = this.tDateEdit_StockDateSt;
                                                }
                                                // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                                            }
                                            break;
                                        }
                                }
                            }
                        }
                        else
                        {
                            // エラー時
                            TMsgDisp.Show(
                                this,
                                emErrorLevel.ERR_LEVEL_INFO,
                                this.Name,
                                "支払先コード [" + inputValue + "] に該当するデータが存在しません。",
                                -1,
                                MessageBoxButtons.OK );

                            isError = true; // 2010/09/21
                            // コードを戻す
                            tNedit_PayeeCode.SetInt( code );
                            tNedit_PayeeCode.SelectAll();

                            e.NextCtrl = e.PrevCtrl;
                        }
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                        break;
                    }
                #endregion // 支払先コード

                #region 支払先ガイド
                // 支払先ガイド
                case "uButton_PayeeGuide":
                    {
                        // ----------DEL 2013/01/21 [仕入返品計上]----------->>>>>
                        //switch (e.Key)
                        //{
                        //    case Keys.Return:
                        //    case Keys.Tab:
                        //        {
                        //            e.NextCtrl = this.tDateEdit_StockDateSt;                                    
                        //            break;
                        //        }
                        //}
                        // ----------DEL 2013/01/21 [仕入返品計上]-----------<<<<<
                        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        if (this.tComboEditor_StockRetGdsPlnFlag.Visible)
                                        {
                                            e.NextCtrl = this.tComboEditor_StockRetGdsPlnFlag;
                                        }
                                        else
                                        {
                                            e.NextCtrl = this.tDateEdit_StockDateSt;
                                        }                                        
                                        break;
                                    }
                            }
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tNedit_PayeeCode;
                                        break;
                                    }
                            }
                        }
                        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

                        break;
                    }
                #endregion // 支払先ガイド

                #region 仕入日（開始）
                // 仕入日（開始）
                case "tDateEdit_StockDateSt":
                    {
                        // ----------DEL 2013/01/21 [仕入返品計上]----------->>>>>
                        //switch (e.Key)
                        //{
                        //    case Keys.Return:
                        //    case Keys.Tab:
                        //        {
                        //            e.NextCtrl = this.tDateEdit_StockDateEd;
                        //            break;
                        //        }
                        //}
                        // ----------DEL 2013/01/21 [仕入返品計上]-----------<<<<<
                        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tDateEdit_StockDateEd;
                                        break;
                                    }
                            }
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        if (this.tComboEditor_StockRetGdsPlnFlag.Visible)
                                        {
                                            e.NextCtrl = this.tComboEditor_StockRetGdsPlnFlag;
                                        }
                                        else
                                        {
                                            e.NextCtrl = this.uButton_PayeeGuide;
                                        }                                        
                                        break;
                                    }
                            }
                        }
                        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                        break;                        
                    }
                #endregion // 仕入日（開始）

                #region 仕入日（終了）
                // 仕入日（終了）
                case "tDateEdit_StockDateEd":
                    {
                        // ----------DEL 2013/01/21 [仕入返品計上]----------->>>>>
                        //switch (e.Key)
                        //{
                        //    case Keys.Return:
                        //    case Keys.Tab:
                        //        {
                        //            e.NextCtrl = this.tDateEdit_AddUpADateSt;
                        //            break;
                        //        }
                        //}
                        // ----------DEL 2013/01/21 [仕入返品計上]-----------<<<<<                        
                        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tDateEdit_AddUpADateSt;
                                        break;
                                    }
                            }
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tDateEdit_StockDateSt;
                                        break;
                                    }
                            }
                        }
                        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

                        break;
                    }
                #endregion // 仕入日（終了）

                #region 入力日（開始）
                // 入力日（開始）
                case "tDateEdit_AddUpADateSt":
                    {
                        // ----------DEL 2013/01/21 [仕入返品計上]----------->>>>>
                        //switch (e.Key)
                        //{
                        //    case Keys.Return:
                        //    case Keys.Tab:
                        //        {
                        //            e.NextCtrl = this.tDateEdit_AddUpADateEd;
                        //            break;
                        //        }
                        //}
                        // ----------DEL 2013/01/21 [仕入返品計上]-----------<<<<<
                        // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tDateEdit_AddUpADateEd;
                                        break;
                                    }
                            }
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tDateEdit_StockDateEd;
                                        break;
                                    }
                            }
                        }
                        // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                        break;
                    }
                #endregion // 入力日（開始）

                #region 入力日（終了）
                // 入力日（終了）
                case "tDateEdit_AddUpADateEd":
                    {
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                        if ( !e.ShiftKey )
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                        {
                            switch ( e.Key )
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        if ( this.uExGroupBox_ExtraCondition.Visible )
                                        {
                                            // 拡張検索条件の表示状態を調べて次へ
                                            e.NextCtrl = this.GetNextControl( "tDateEdit_AddUpADateEd" );
                                        }
                                        else
                                        {
                                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                                            //if (this.uGrid_Slip.Rows.Count > 0)
                                            //{
                                            //    e.NextCtrl = this.uGrid_Slip;
                                            //}
                                            //else
                                            //{
                                            //    e.NextCtrl = this.uCheckEditor_StatusBar_AutoFillToGridColumn;
                                            //}
                                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                                            // 検索実行・フォーカス移動
                                            e.NextCtrl = this.SearchOnChangeFocus( tDateEdit_AddUpADateEd );
                                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                                        }
                                        break;
                                    }
                            }
                        }
                        break;
                    }
                #endregion // 入力日（終了）

                #region 詳細検索条件

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                # region // DEL
                //// 伝票区分
                //case "tComboEditor_StockSlipCd":
                //    {
                //        e.NextCtrl = this.GetNextControl("tComboEditor_StockSlipCd");
                //        break;
                //    }

                //// 伝票番号
                //case "tEdit_PartySalesSlipNum":
                //    {
                //        e.NextCtrl = this.GetNextControl("tEdit_PartySalesSlipNum");
                //        break;
                //    }

                //// 伝票番号あいまい検索
                //case "tComboEditor_PartySalesSlipNumFuzzy":
                //    {
                //        e.NextCtrl = this.GetNextControl("tComboEditor_PartySalesSlipNumFuzzy");
                //        break;
                //    }
   
                //// 仕入SEQ/支払No
                //case "tNedit_PaymentSlipNo":
                //    {
                //        e.NextCtrl = this.GetNextControl("tNedit_PaymentSlipNo");
                //        break;
                //    }

                //// 担当者
                //case "tEdit_StockAgentCodeInput":
                //    {
                //        e.NextCtrl = this.GetNextControl("tEdit_StockAgentCodeInput");
                //        break;
                //    }

                //// 担当者ガイド
                //case "uButton_StockAgentCode":
                //    {
                //        e.NextCtrl = this.GetNextControl("uButton_StockAgentCode");
                //        break;
                //    }

                //// 2008.12.05 del start [8726]
                //// 発行者
                ////case "tEdit_StockInputCode":
                ////    {
                ////        e.NextCtrl = this.getNextControl("tEdit_StockInputCode");
                ////        break;
                ////    }

                //// 発行者ガイド
                ////case "uButton_StockInputCode":
                ////    {
                ////        e.NextCtrl = this.getNextControl("uButton_StockInputCode");
                ////        break;
                ////    }
                //// 2008.12.05 del end [8726]

                //// UOE送信
                //case "tComboEditor_DataSendCode":
                //    {
                //        e.NextCtrl = this.GetNextControl("tComboEditor_DataSendCode");
                //        break;
                //    }

                //// 備考1
                //case "tEdit_SupplierSlipNote1":
                //    {
                //        e.NextCtrl = this.GetNextControl("tEdit_SupplierSlipNote1");
                //        break;
                //    }

                //// 備考1ボタン
                //case "uButton_SupplierSlipNote1":
                //    {
                //        e.NextCtrl = this.GetNextControl("uButton_SupplierSlipNote1");
                //        break;
                //    }

                //// 備考1あいまい条件
                //case "tComboEditor_SupplierSlipNote1Fuzzy":
                //    {
                //        e.NextCtrl = this.GetNextControl("tComboEditor_SupplierSlipNote1Fuzzy");
                //        break;
                //    }

                //// 備考2
                //case "tEdit_SupplierSlipNote2":
                //    {
                //        e.NextCtrl = this.GetNextControl("tEdit_SupplierSlipNote2");
                //        break;
                //    }

                //// 備考2ボタン
                //case "uButton_SupplierSlipNote2":
                //    {
                //        e.NextCtrl = this.GetNextControl("uButton_SupplierSlipNote2");
                //        break;
                //    }

                //// 備考2あいまい条件
                //case "tComboEditor_SupplierSlipNote2Fuzzy":
                //    {
                //        e.NextCtrl = this.GetNextControl("tComboEditor_SupplierSlipNote2Fuzzy");
                //        break;
                //    }

                //// UOEリマーク1
                //case "tEdit_UoeRemark1":
                //    {
                //        e.NextCtrl = this.GetNextControl("tEdit_UoeRemark1");
                //        break;
                //    }

                //// UOEリマーク1あいまい条件
                //case "tComboEditor_UoeRemark1Fuzzy":
                //    {
                //        e.NextCtrl = this.GetNextControl("tComboEditor_UoeRemark1Fuzzy");
                //        break;
                //    }

                //// UOEリマーク2
                //case "tEdit_UoeRemark2":
                //    {
                //        e.NextCtrl = this.GetNextControl("tEdit_UoeRemark2");
                //        break;
                //    }

                //// UOEリマーク2あいまい条件
                //case "tComboEditor_UoeRemark2Fuzzy":
                //    {
                //        e.NextCtrl = this.GetNextControl("tComboEditor_UoeRemark2Fuzzy");
                //        break;
                //    }

                //// BLグループ
                //case "tEdit_BlGroupCodeInput":
                //    {
                //        e.NextCtrl = this.GetNextControl("tEdit_BlGroupCodeInput");
                //        break;
                //    }

                //// BLグループガイド
                //case "uButton_BlGroupCode":
                //    {
                //        e.NextCtrl = this.GetNextControl("uButton_BlGroupCode");
                //        break;
                //    }

                //// BLコード
                //case "tEdit_BlGoodsCodeInput":
                //    {
                //        e.NextCtrl = this.GetNextControl("tEdit_BlGoodsCodeInput");
                //        break;
                //    }

                //// BLコードガイド
                //case "uButton_BlGoodsCode":
                //    {
                //        e.NextCtrl = this.GetNextControl("uButton_BlGoodsCode");
                //        break;
                //    }

                //// 品名
                //case "tEdit_GoodsName":
                //    {
                //        e.NextCtrl = this.GetNextControl("tEdit_GoodsName");
                //        break;
                //    }

                //// 品名あいまい条件
                //case "tComboEditor_GoodsNameFuzzy":
                //    {
                //        e.NextCtrl = this.GetNextControl("tComboEditor_GoodsNameFuzzy");
                //        break;
                //    }

                //// 品番
                //case "tEdit_GoodsNo":
                //    {
                //        e.NextCtrl = this.GetNextControl("tEdit_GoodsNo");
                //        break;
                //    }

                //// 品番あいまい条件
                //case "tComboEditor_GoodsNoFuzzy":
                //    {
                //        e.NextCtrl = this.GetNextControl("tComboEditor_GoodsNoFuzzy");
                //        break;
                //    }

                //// メーカー
                //case "tEdit_MakerCdInput":
                //    {
                //        e.NextCtrl = this.GetNextControl("tEdit_MakerCdInput");
                //        break;
                //    }

                //// メーカーガイド
                //case "uButton_MakerCd":
                //    {
                //        e.NextCtrl = this.GetNextControl("uButton_MakerCd");
                //        break;
                //    }

                //// 在庫取寄区分
                //case "tComboEditor_StockOrderDivCd":
                //    {
                //        e.NextCtrl = this.GetNextControl("tComboEditor_StockOrderDivCd");
                //        break;
                //    }

                //// 倉庫
                //case "tEdit_WarehouseCdInput":
                //    {
                //        e.NextCtrl = this.GetNextControl("tEdit_WarehouseCdInput");
                //        break;
                //    }

                //// 倉庫ガイド
                //case "uButton_WarehouseCd":
                //    {
                //        e.NextCtrl = this.GetNextControl("uButton_WarehouseCd");
                //        break;
                //    }

                //// 削除指定区分
                //case "tComboEditor_DeleteFlag":
                //    {
                //        e.NextCtrl = this.GetNextControl("tComboEditor_DeleteFlag");
                //        break;
                //    }
                # endregion
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                // 担当者
                case "tEdit_StockAgentCodeInput":
                    {
                        string inputValue = tEdit_StockAgentCodeInput.Text;

                        string code;
                        bool status = ReadSalesEmployeeName( out code );

                        if ( status == true )
                        {
                            // 名称表示
                            tEdit_StockAgentCodeInput.Text = _swStockAgentName;

                            if ( !e.ShiftKey )
                            {
                                switch ( e.Key )
                                {
                                    case Keys.Tab:
                                    case Keys.Return:
                                        e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                        break;
                                }
                            }
                        }
                        else
                        {
                            // エラー時
                            TMsgDisp.Show(
                                this,
                                emErrorLevel.ERR_LEVEL_INFO,
                                this.Name,
                                "担当者コード [" + inputValue + "] に該当するデータが存在しません。",
                                -1,
                                MessageBoxButtons.OK );

                            // コードに戻す
                            tEdit_StockAgentCodeInput.Text = code;
                            tEdit_StockAgentCodeInput.SelectAll();
                            e.NextCtrl = e.PrevCtrl;
                        }
                    }
                    break;
                // BLグループ
                case "tEdit_BlGroupCodeInput":
                    {

                        int inputValue;
                        try
                        {
                            inputValue = Int32.Parse( tEdit_BlGroupCodeInput.Text );
                        }
                        catch
                        {
                            inputValue = 0;
                        }

                        int code;
                        bool status = ReadBlGroupName( out code );

                        if ( status == true )
                        {
                            // 名称表示
                            tEdit_BlGroupCodeInput.Text = _swBLGroupName;

                            if ( !e.ShiftKey )
                            {
                                switch ( e.Key )
                                {
                                    case Keys.Tab:
                                    case Keys.Return:
                                        e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                        break;
                                }
                            }
                        }
                        else
                        {
                            // エラー時
                            TMsgDisp.Show(
                                this,
                                emErrorLevel.ERR_LEVEL_INFO,
                                this.Name,
                                "グループコード [" + inputValue + "] に該当するデータが存在しません。",
                                -1,
                                MessageBoxButtons.OK );

                            // コードに戻す
                            tEdit_BlGroupCodeInput.Text = code.ToString();
                            tEdit_BlGroupCodeInput.SelectAll();
                            e.NextCtrl = e.PrevCtrl;
                        }
                    }
                    break;
                // BLコード
                case "tEdit_BlGoodsCodeInput":
                    {
                        int inputValue;
                        try
                        {
                            inputValue = Int32.Parse( tEdit_BlGoodsCodeInput.Text );
                        }
                        catch
                        {
                            inputValue = 0;
                        }

                        int code;
                        bool status = ReadBlCodeName( out code );

                        if ( status == true )
                        {
                            // 名称表示
                            tEdit_BlGoodsCodeInput.Text = _swBLGoodsName;

                            if ( !e.ShiftKey )
                            {
                                switch ( e.Key )
                                {
                                    case Keys.Tab:
                                    case Keys.Return:
                                        e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                        break;
                                }
                            }
                        }
                        else
                        {
                            // エラー時
                            TMsgDisp.Show(
                                this,
                                emErrorLevel.ERR_LEVEL_INFO,
                                this.Name,
                                "ＢＬコード [" + inputValue + "] に該当するデータが存在しません。",
                                -1,
                                MessageBoxButtons.OK );

                            // コードに戻す
                            tEdit_BlGoodsCodeInput.Text = code.ToString();
                            tEdit_BlGoodsCodeInput.SelectAll();
                            e.NextCtrl = e.PrevCtrl;
                        }
                    }
                    break;
                // メーカー
                case "tEdit_MakerCdInput":
                    {
                        int inputValue;
                        try
                        {
                            inputValue = Int32.Parse( tEdit_MakerCdInput.Text );
                        }
                        catch
                        {
                            inputValue = 0;
                        }

                        int code;
                        bool status = ReadGoodsMakerName( out code );

                        if ( status == true )
                        {
                            // 名称表示
                            tEdit_MakerCdInput.Text = _swGoodsMakerName;

                            if ( !e.ShiftKey )
                            {
                                switch ( e.Key )
                                {
                                    case Keys.Tab:
                                    case Keys.Return:
                                        e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                        break;
                                }
                            }
                        }
                        else
                        {
                            // エラー時
                            TMsgDisp.Show(
                                this,
                                emErrorLevel.ERR_LEVEL_INFO,
                                this.Name,
                                "メーカーコード [" + inputValue + "] に該当するデータが存在しません。",
                                -1,
                                MessageBoxButtons.OK );

                            // コードに戻す
                            tEdit_MakerCdInput.Text = code.ToString();
                            tEdit_MakerCdInput.SelectAll();
                            e.NextCtrl = e.PrevCtrl;
                        }
                    }
                    break;
                // 倉庫
                case "tEdit_WarehouseCdInput":
                    {
                        string inputValue = tEdit_WarehouseCdInput.Text;

                        string code;
                        bool status = ReadWarehouseName( out code );

                        if ( status == true )
                        {
                            // 名称表示
                            tEdit_WarehouseCdInput.Text = _swWarehouseName;

                            if ( !e.ShiftKey )
                            {
                                switch ( e.Key )
                                {
                                    case Keys.Tab:
                                    case Keys.Return:
                                        e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                        break;
                                }
                            }
                        }
                        else
                        {
                            // エラー時
                            TMsgDisp.Show(
                                this,
                                emErrorLevel.ERR_LEVEL_INFO,
                                this.Name,
                                "倉庫コード [" + inputValue + "] に該当するデータが存在しません。",
                                -1,
                                MessageBoxButtons.OK );

                            // コードに戻す
                            tEdit_WarehouseCdInput.Text = code;
                            tEdit_WarehouseCdInput.SelectAll();
                            e.NextCtrl = e.PrevCtrl;
                        }
                    }
                    break;

                # region [あいまい検索]
                // 伝票番号
                case "tEdit_PartySalesSlipNum":
                    {
                        string inputValue = tEdit_PartySalesSlipNum.Text;
                        string searchText;
                        int fuzzyValue;
                        GetFuzzyInput( inputValue, out searchText, out fuzzyValue );

                        // 表示
                        tEdit_PartySalesSlipNum.Text = searchText;
                        tComboEditor_PartySalesSlipNumFuzzy.Value = fuzzyValue;

                        // 退避
                        _srPartySalesSlipNum = inputValue;
                        _srRvPartySalesSlipNum = searchText;

                        # region [フォーカス]
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                    break;
                            }
                        }
                        # endregion
                    }
                    break;
                // 伝票番号あいまい検索
                case "tComboEditor_PartySalesSlipNumFuzzy":
                    {
                        // 退避
                        _srPartySalesSlipNum = GetFuzzyInputOnChangeFuzzyValue( (int)tComboEditor_PartySalesSlipNumFuzzy.Value, tEdit_PartySalesSlipNum.Text );

                        # region [フォーカス]
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                    break;
                            }
                        }
                        # endregion
                    }
                    break;
                // 備考1
                case "tEdit_SupplierSlipNote1":
                    {
                        string inputValue = tEdit_SupplierSlipNote1.Text;
                        string searchText;
                        int fuzzyValue;
                        GetFuzzyInput( inputValue, out searchText, out fuzzyValue );

                        // 表示
                        tEdit_SupplierSlipNote1.Text = searchText;
                        tComboEditor_SupplierSlipNote1Fuzzy.Value = fuzzyValue;

                        // 退避
                        _srSupplierSlipNote1 = inputValue;
                        _srRvSupplierSlipNote1 = searchText;

                        # region [フォーカス]
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                    break;
                            }
                        }
                        # endregion
                    }
                    break;
                // 備考1あいまい条件
                case "tComboEditor_SupplierSlipNote1Fuzzy":
                    {
                        // 退避
                        _srSupplierSlipNote1 = GetFuzzyInputOnChangeFuzzyValue( (int)tComboEditor_SupplierSlipNote1Fuzzy.Value, tEdit_SupplierSlipNote1.Text );

                        # region [フォーカス]
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                    break;
                            }
                        }
                        # endregion
                    }
                    break;
                // 備考2
                case "tEdit_SupplierSlipNote2":
                    {
                        string inputValue = tEdit_SupplierSlipNote2.Text;
                        string searchText;
                        int fuzzyValue;
                        GetFuzzyInput( inputValue, out searchText, out fuzzyValue );

                        // 表示
                        tEdit_SupplierSlipNote2.Text = searchText;
                        tComboEditor_SupplierSlipNote2Fuzzy.Value = fuzzyValue;

                        // 退避
                        _srSupplierSlipNote2 = inputValue;
                        _srRvSupplierSlipNote2 = searchText;

                        # region [フォーカス]
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                    break;
                            }
                        }
                        # endregion
                    }
                    break;
                // 備考2あいまい条件
                case "tComboEditor_SupplierSlipNote2Fuzzy":
                    {
                        // 退避
                        _srSupplierSlipNote2 = GetFuzzyInputOnChangeFuzzyValue( (int)tComboEditor_SupplierSlipNote2Fuzzy.Value, tEdit_SupplierSlipNote2.Text );

                        # region [フォーカス]
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                    break;
                            }
                        }
                        # endregion
                    }
                    break;
                // UOEリマーク1
                case "tEdit_UoeRemark1":
                    {
                        string inputValue = tEdit_UoeRemark1.Text;
                        string searchText;
                        int fuzzyValue;
                        GetFuzzyInput( inputValue, out searchText, out fuzzyValue );

                        // 表示
                        tEdit_UoeRemark1.Text = searchText;
                        tComboEditor_UoeRemark1Fuzzy.Value = fuzzyValue;

                        // 退避
                        _srUOERemark1 = inputValue;
                        _srRvUOERemark1 = searchText;

                        # region [フォーカス]
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                    break;
                            }
                        }
                        # endregion
                    }
                    break;
                // UOEリマーク1あいまい条件
                case "tComboEditor_UoeRemark1Fuzzy":
                    {
                        // 退避
                        _srUOERemark1 = GetFuzzyInputOnChangeFuzzyValue( (int)tComboEditor_UoeRemark1Fuzzy.Value, tEdit_UoeRemark1.Text );

                        # region [フォーカス]
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                    break;
                            }
                        }
                        # endregion
                    }
                    break;
                // UOEリマーク2
                case "tEdit_UoeRemark2":
                    {
                        string inputValue = tEdit_UoeRemark2.Text;
                        string searchText;
                        int fuzzyValue;
                        GetFuzzyInput( inputValue, out searchText, out fuzzyValue );

                        // 表示
                        tEdit_UoeRemark2.Text = searchText;
                        tComboEditor_UoeRemark2Fuzzy.Value = fuzzyValue;

                        // 退避
                        _srUOERemark2 = inputValue;
                        _srRvUOERemark2 = searchText;

                        # region [フォーカス]
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                    break;
                            }
                        }
                        # endregion
                    }
                    break;
                // UOEリマーク2あいまい条件
                case "tComboEditor_UoeRemark2Fuzzy":
                    {
                        // 退避
                        _srUOERemark2 = GetFuzzyInputOnChangeFuzzyValue( (int)tComboEditor_UoeRemark2Fuzzy.Value, tEdit_UoeRemark2.Text );

                        # region [フォーカス]
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                    break;
                            }
                        }
                        # endregion
                    }
                    break;
                // 品名
                case "tEdit_GoodsName":
                    {
                        string inputValue = tEdit_GoodsName.Text;
                        string searchText;
                        int fuzzyValue;
                        GetFuzzyInput( inputValue, out searchText, out fuzzyValue );

                        // 表示
                        tEdit_GoodsName.Text = searchText;
                        tComboEditor_GoodsNameFuzzy.Value = fuzzyValue;

                        // 退避
                        _srGoodsName = inputValue;
                        _srRvGoodsName = searchText;

                        # region [フォーカス]
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                    break;
                            }
                        }
                        # endregion
                    }
                    break;
                // 品名あいまい条件
                case "tComboEditor_GoodsNameFuzzy":
                    {
                        // 退避
                        _srGoodsName = GetFuzzyInputOnChangeFuzzyValue( (int)tComboEditor_GoodsNameFuzzy.Value, tEdit_GoodsName.Text );

                        # region [フォーカス]
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                    break;
                            }
                        }
                        # endregion
                    }
                    break;
                // 品番
                case "tEdit_GoodsNo":
                    {
                        string inputValue = tEdit_GoodsNo.Text;
                        string searchText;
                        int fuzzyValue;
                        GetFuzzyInput( inputValue, out searchText, out fuzzyValue );

                        // 表示
                        tEdit_GoodsNo.Text = searchText;
                        tComboEditor_GoodsNoFuzzy.Value = fuzzyValue;

                        // 退避
                        _srGoodsNo = inputValue;
                        _srRvGoodsNo = searchText;

                        # region [フォーカス]
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                    break;
                            }
                        }
                        # endregion
                    }
                    break;
                // 品番あいまい条件
                case "tComboEditor_GoodsNoFuzzy":
                    {
                        // 退避
                        _srGoodsNo = GetFuzzyInputOnChangeFuzzyValue( (int)tComboEditor_GoodsNoFuzzy.Value, tEdit_GoodsNo.Text );

                        # region [フォーカス]
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                    break;
                            }
                        }
                        # endregion
                    }
                    break;
                # endregion

                // 備考1ボタン
                case "uButton_SupplierSlipNote1":
                // 備考2ボタン
                case "uButton_SupplierSlipNote2":
                // 伝票区分
                case "tComboEditor_StockSlipCd":
                // 仕入SEQ/支払No
                case "tNedit_PaymentSlipNo":
                // 担当者ガイド
                case "uButton_StockAgentCode":
                // UOE送信
                case "tComboEditor_DataSendCode":
                // BLグループガイド
                case "uButton_BlGroupCode":
                // BLコードガイド
                case "uButton_BlGoodsCode":
                // メーカーガイド
                case "uButton_MakerCd":
                // 在庫取寄区分
                case "tComboEditor_StockOrderDivCd":
                // 倉庫ガイド
                case "uButton_WarehouseCd":
                // 削除指定区分
                case "tComboEditor_DeleteFlag":
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 ADD
                // 値引区分
                case "tComboEditor_StockSlipCdDtl":
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 ADD
                    {
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    e.NextCtrl = this.GetNextControl( e.PrevCtrl.Name );
                                    break;
                            }
                        }
                    }
                    break;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

                #endregion // 詳細検索条件

                #region 伝票一覧
                //---------------------------------------------------------------
                // 伝票一覧
                //---------------------------------------------------------------
                case "uGrid_Slip":
                    {
                        switch (e.Key)
                        {
                            case Keys.Return:
                                {
                                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
                                    //// 明細部にフォーカス有り(GridActive)
                                    //if (this.uGrid_Slip.ActiveCell != null)
                                    //{
                                    //    // 明細部キーダウン処理（現在行の取得）
                                    //    if (this.uGrid_Slip.ActiveRow != null)
                                    //        //this.GridKeyDown_Return(prevCtrl.Name))
                                    //    {
                                    //        e.NextCtrl = null;
                                    //        //if (this._detailDataSet.StcList.Select("Selection = true").Length > 0)
                                    //        //{
                                    //        //    // 明細行を選択
                                    //        //    selectAllDetailFromSelectedSlip();
                                    //        //}
                                            
                                    //        this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_SlipDetail"]; 
                                    //    }
                                    //    else
                                    //    {
                                    //        e.NextCtrl = null;
                                    //        //e.NextCtrl = this.uCheckEditor_StatusBar_AutoFillToGridColumn;
                                    //    }
                                    //}
                                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL
                                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                                    if ( this.uGrid_Slip.ActiveCell != null )
                                    {
                                        this.uGrid_Slip.ActiveCell.Row.Activate();
                                    }

                                    // 明細部キーダウン処理（現在行の取得）
                                    if ( this.uGrid_Slip.ActiveRow != null )
                                    {
                                        e.NextCtrl = null;

                                        // Enter押下した現在行の伝票の明細へ飛ぶ
                                        Infragistics.Win.UltraWinGrid.UltraGridRow focusRow = null;
                                        foreach ( Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in this.uGrid_Detail.Rows )
                                        {
                                            try
                                            {
                                                int detailSlipNo = (int)gridRow.Cells[_detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName].Value;
                                                int detailFormal = (int)gridRow.Cells[_detailDataSet.StcDetail.SupplierFormalColumn.ColumnName].Value;
                                                int detailDataDiv = (int)gridRow.Cells[_detailDataSet.StcDetail.DataDivColumn.ColumnName].Value;
                                                int slipSlipNo = (int)uGrid_Slip.ActiveRow.Cells[_detailDataSet.StcList.SupplierSlipNoColumn.ColumnName].Value;
                                                int slipFormal = (int)uGrid_Slip.ActiveRow.Cells[_detailDataSet.StcList.SupplierFormalColumn.ColumnName].Value;
                                                int slipDataDiv = (int)uGrid_Slip.ActiveRow.Cells[_detailDataSet.StcList.DataDivColumn.ColumnName].Value;

                                                if ( detailSlipNo == slipSlipNo && detailFormal == slipFormal && detailDataDiv == slipDataDiv )
                                                {
                                                    focusRow = gridRow;
                                                    break;
                                                }
                                            }
                                            catch
                                            {
                                            }
                                        }

                                        // 移動先が決定した場合のみ
                                        if ( focusRow != null )
                                        {
                                            this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_SlipDetail"];
                                            uGrid_Detail.Focus();

                                            if ( uGrid_Detail.ActiveRow != null )
                                            {
                                                uGrid_Detail.ActiveRow.Selected = false;
                                            }

                                            uGrid_Detail.ActiveRow = focusRow;
                                            uGrid_Detail.ActiveRow.Selected = true;
                                        }
                                    }
                                    else
                                    {
                                        //e.NextCtrl = uCheckEditor_StatusBar_AutoFillToGridColumn;
                                        e.NextCtrl = null;
                                    }
                                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL
                                    break;
                                }
                        }
                        break;
                    }
                #endregion

                #region 明細一覧
                //---------------------------------------------------------------
                // 明細一覧
                //---------------------------------------------------------------
                case "uGrid_Detail":
                    {
                        switch (e.Key)
                        {
                            case Keys.Return:
                                // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                                {
                                    // フォーカス設定用
                                    int rowIndex = 0;
                                    int colIndex = 0;
                                    bool isActiveCell = false;

                                    if (this.uGrid_Detail.ActiveCell != null)
                                    {
                                        rowIndex = this.uGrid_Detail.ActiveCell.Row.Index;
                                        colIndex = this.uGrid_Detail.ActiveCell.Column.Index;
                                        isActiveCell = true;
                                        this.uGrid_Detail.ActiveCell.Row.Activate();
                                    }

                                    // 明細部キーダウン処理（現在行の取得）
                                    if (this.uGrid_Detail.ActiveRow != null)
                                    {
                                        e.NextCtrl = null;
                                        if (this._detailDataSet.StcDetail.Select("SelectionCheck = true").Length > 0)
                                        {
                                            if (this._suppPrtPpr.SectionCode == null || this._searchedStockRetGdsPln != 1)
                                            {
                                                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                                    this.tEdit_SectionCodeAllowZero.Name,
                                                    "拠点コードが入力されていない、または、仕入返品データではないため、返品計上は出来ません。",
                                                    -1,
                                                    MessageBoxButtons.OK);

                                                // フォーカス設定
                                                if (isActiveCell == true)
                                                {
                                                    isActiveCell = false;
                                                    this.uGrid_Detail.Rows[rowIndex].Cells[colIndex].Activate();
                                                }
                                                else
                                                {
                                                    //なし。
                                                }
                                                break;
                                            }
                                            else
                                            {
                                                this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_RedSlip"];
                                            }
                                        }
                                    }
                                    else
                                    {
                                        e.NextCtrl = uCheckEditor_StatusBar_AutoFillToGridColumn;
                                    }

                                    break;
                                }
                                // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
                            case Keys.Tab:
                                {
                                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 DEL
                                    //// 明細部にフォーカス有り(GridActive)
                                    //if (this.uGrid_Detail.ActiveCell != null)
                                    //{
                                    //    // 明細部キーダウン処理（現在行の取得）
                                    //    if (this.uGrid_Detail.ActiveRow != null)
                                    //    {
                                    //        e.NextCtrl = null;
                                    //        //if (this._detailDataSet.StcDetail.Select("SelectionCheck = true").Length > 0)
                                    //        //{
                                    //        //    this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_RedSlip"];
                                    //        //}
                                    //    }
                                    //    else
                                    //    {
                                    //        e.NextCtrl = null;
                                    //        //e.NextCtrl = this.uCheckEditor_StatusBar_AutoFillToGridColumn;
                                    //    }
                                    //}
                                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 DEL
                                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
                                    e.NextCtrl = null;
                                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD
                                    break;
                                }
                        }
                        break;
                    }

                #endregion

                #region チェックボックス

                case "uCheckEditor_StatusBar_AutoFillToGridColumn":
                    {
                        switch (e.Key)
                        {
                            case Keys.Return:
                            case Keys.Tab:
                                {
                                    e.NextCtrl = null;
                                    break;
                                }
                        }
                        break;
                    }

                #endregion // チェックボックス

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/19 ADD
                # region [残高表示]

                # region 処理区分
                case "tComboEditor_rl_RemainType":
                    {
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Down:
                                    {
                                        // 検索実行
                                        Control errorControl = SearchSlipDetailList();

                                        // エラーコントロールに移動
                                        if ( errorControl != null )
                                        {
                                            e.NextCtrl = errorControl;
                                        }
                                        else
                                        {
                                            if ( uGrid_BalanceList.Rows.Count > 0 )
                                            {
                                            }
                                            else
                                            {
                                                e.NextCtrl = e.PrevCtrl;
                                            }
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    break;
                # endregion

                # region 対象月（開始）
                case "tDateEdit_rl_TargetYMSt":
                    {
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Down:
                                    {
                                        // 検索実行
                                        Control errorControl = SearchSlipDetailList();

                                        if ( errorControl != null )
                                        {
                                            e.NextCtrl = errorControl;
                                        }
                                        else
                                        {
                                            if ( uGrid_BalanceList.Rows.Count > 0 )
                                            {
                                            }
                                            else
                                            {
                                                e.NextCtrl = e.PrevCtrl;
                                            }
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    break;
                # endregion

                # region 対象月（終了）
                case "tDateEdit_rl_TargetYMEd":
                    {
                        if ( !e.ShiftKey )
                        {
                            switch ( e.Key )
                            {
                                case Keys.Right:
                                case Keys.Down:
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        // 検索実行
                                        Control errorControl = SearchSlipDetailList();

                                        if ( errorControl != null )
                                        {
                                            e.NextCtrl = errorControl;
                                        }
                                        else
                                        {
                                            if ( uGrid_BalanceList.Rows.Count > 0 )
                                            {
                                            }
                                            else
                                            {
                                                e.NextCtrl = e.PrevCtrl;
                                            }
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    break;
                # endregion

                # endregion
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/19 ADD
                // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
                #region 処理区分
                //---------------------------------------------------------------
                // 処理区分
                //---------------------------------------------------------------
                case "tComboEditor_StockRetGdsPlnFlag":
                    {
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tDateEdit_StockDateSt;
                                        break;
                                    }
                            }
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.uButton_PayeeGuide;
                                        break;
                                    }
                            }
                        }
                        break;
                    }
                #endregion // 処理区分

                #region 伝票区分
                //---------------------------------------------------------------
                // 伝票区分
                //---------------------------------------------------------------
                case "tComboEditor_rs_SalesSlipCd":
                    {
                        // 伝票区分に従い入力ＵＩ制御
                        this.SettingRedSlipFormalBySalesSlipCd();

                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tEdit_rs_StockAgentCd;
                                        break;
                                    }
                            }
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.uTabPage_RedSlip;
                                        break;
                                    }
                            }
                        }
                        break;
                    }
                #endregion // 伝票返品区分

                #region 担当者コード
                //---------------------------------------------------------------
                // 担当者コード
                //---------------------------------------------------------------
                case "tEdit_rs_StockAgentCd":
                    {
                        // 入力チェックフラグ true→次項目へフォーカス遷移ＯＫ
                        bool inputCheck = true;

                        // 名称取得
                        # region [名称取得]
                        // 入力値を取得
                        string inputValue = this.tEdit_rs_StockAgentCd.Text.Trim();

                        // 空でなければ処理開始
                        if (!string.IsNullOrEmpty(inputValue))
                        {
                            // 入力値が変わっていた場合のみコード変換
                            if (inputValue != _prevInputValue.RetGdsInputEmployeeCd)
                            {
                                // コードから名称へ変換
                                Employee employeeInfo;
                                int status = this._employeeAcs.Read(out employeeInfo, this._enterpriseCode, inputValue);
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    // 名称セット
                                    _prevInputValue.RetGdsInputEmployeeCd = inputValue;
                                    this.uLabel_rs_StockAgentName.Text = employeeInfo.Name;
                                }
                                else
                                {
                                    // エラー時
                                    TMsgDisp.Show(
                                        this,
                                        emErrorLevel.ERR_LEVEL_INFO,
                                        this.Name,
                                        "従業員コード [" + inputValue + "] に該当するデータが存在しません。",
                                        -1,
                                        MessageBoxButtons.OK);

                                    // 名称を戻す
                                    this.tEdit_rs_StockAgentCd.Text = _prevInputValue.RetGdsInputEmployeeCd;
                                    inputCheck = false;
                                }
                            }
                        }
                        else
                        {
                            // クリアする
                            _prevInputValue.RetGdsInputEmployeeCd = string.Empty;
                            this.uLabel_rs_StockAgentName.Text = string.Empty;
                        }
                        # endregion

                        // 次フォーカス
                        # region [次フォーカス]
                        if (inputCheck)
                        {
                            if (!e.ShiftKey)
                            {
                                switch (e.Key)
                                {
                                    case Keys.Return:
                                    case Keys.Tab:
                                        {
                                            if (tEdit_rs_StockAgentCd.Text != string.Empty)
                                            {
                                                e.NextCtrl = this.tDateEdit_rs_RetGdsDate;
                                            }
                                            else
                                            {
                                                e.NextCtrl = this.uButton_rs_StockAgent;
                                            }
                                            break;
                                        }
                                }
                            }
                            else
                            {
                                switch (e.Key)
                                {
                                    case Keys.Return:
                                    case Keys.Tab:
                                        {
                                            e.NextCtrl = this.tComboEditor_rs_SalesSlipCd;
                                            break;
                                        }
                                }
                            }
                        }
                        else
                        {
                            e.NextCtrl = e.PrevCtrl;
                            tEdit_rs_StockAgentCd.SelectAll();
                        }
                        # endregion
                    }
                    break;
                #endregion

                #region 返品手数料率
                //---------------------------------------------------------------
                // 返品手数料率
                //---------------------------------------------------------------
                case "tNedit_rs_FeePercent01":
                    {
                        // 前回入力値と同じなら処理スキップ
                        if (_feePercent01 != tNedit_rs_FeePercent01.GetValue())
                        {
                            // 金額算出→手数料額 更新
                            tNedit_rs_FeeAmount01.SetInt((int)(((decimal)_redSlipTotalPrice) * (decimal)tNedit_rs_FeePercent01.GetValue() / (decimal)100));
                            
                            // 伝票金額合計 更新
                            // 画面表示上の返品数は必ず正の値なので、合計金額も正の値に修正して表示する
                            long setValue = _redSlipTotalPrice;
                            if (setValue < 0)
                                setValue *= -1;
                            tNedit_rs_ReturnAmountTotal.SetInt((int)((decimal)setValue - (decimal)tNedit_rs_FeeAmount01.GetInt()));

                            _feePercent01 = tNedit_rs_FeePercent01.GetValue();
                            _feeAmount01 = tNedit_rs_FeeAmount01.GetInt();
                        }

                        # region [次フォーカス]
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        if (tNedit_rs_FeePercent01.GetValue() == 0)
                                        {
                                            // 手数料額を手入力
                                            e.NextCtrl = this.tNedit_rs_FeeAmount01;
                                        }
                                        else
                                        {
                                            // 備考1
                                            e.NextCtrl = this.tNedit_SlipNoteCode;
                                        }
                                        break;
                                    }
                            }
                        }
                        # endregion
                    }
                    break;
                #endregion 

                #region 返品手数料額
                //---------------------------------------------------------------
                // 返品手数料額
                //---------------------------------------------------------------
                case "tNedit_rs_FeeAmount01":
                    {
                        // 前回入力値と同じなら処理スキップ
                        if (_feeAmount01 != tNedit_rs_FeeAmount01.GetInt())
                        {
                            // 伝票金額合計 更新
                            // 画面表示上の返品数は必ず正の値なので、合計金額も正の値に修正して表示する
                            long setValue = _redSlipTotalPrice;
                            if (setValue < 0)
                                setValue *= -1;
                            tNedit_rs_ReturnAmountTotal.SetInt((int)((decimal)setValue - (decimal)tNedit_rs_FeeAmount01.GetInt()));
                            _feeAmount01 = tNedit_rs_FeeAmount01.GetInt();

                            // 手数料を手入力したら、手数料率をクリア
                            tNedit_rs_FeePercent01.Clear();
                            _feePercent01 = 0;
                        }
                    }
                    break;
                #endregion

                #region 備考１コード
                //---------------------------------------------------------------
                // 備考１コード
                //---------------------------------------------------------------
                case "tNedit_SlipNoteCode":
                    {
                        int inputValue = this.tNedit_SlipNoteCode.GetInt();
                        if (this._prevInputValue.SlipNoteCd1 != inputValue)
                        {
                            string guidName = string.Empty;
                            if (inputValue == 0)
                            {
                                this._prevInputValue.SlipNoteCd1 = inputValue;
                                this._prevInputValue.SlipNoteName1 = string.Empty;
                                this.tEdit_rs_SlipNote.Clear();
                                this.tNedit_SlipNoteCode.Clear();
                            }
                            else
                            {
                                int status = ReadSlipNoteName(CT_DIVCODE_NoteGuideDivCd_1, inputValue, out guidName);

                                if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                                {
                                    this._prevInputValue.SlipNoteCd1 = inputValue;
                                    this.tEdit_rs_SlipNote.Text = guidName;
                                    this._prevInputValue.SlipNoteName1 = guidName;
                                }
                                else
                                {
                                    // エラー時
                                    TMsgDisp.Show(
                                    this,
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    this.Name,
                                    "伝票備考コードが存在しません。",
                                    -1,
                                    MessageBoxButtons.OK);

                                    // コードを戻す
                                    this.tNedit_SlipNoteCode.SetInt(this._prevInputValue.SlipNoteCd1);
                                }
                            }
                        }

                        #region NextCtrl制御
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                case Keys.Right:
                                    e.NextCtrl = this.tEdit_rs_SlipNote;
                                    break;
                                default:
                                    break;
                            }
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    e.NextCtrl = this.tNedit_rs_FeeAmount01;
                                    break;
                                default:
                                    break;
                            }
                        }
                        #endregion
                        break;
                    }
                #endregion

                #region 備考1
                //---------------------------------------------------------------
                // 備考1
                //---------------------------------------------------------------
                case "tEdit_rs_SlipNote":
                    {
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        if (tEdit_rs_SlipNote.Text != string.Empty)
                                        {
                                            e.NextCtrl = this.tNedit_SlipNote2Code;
                                        }
                                        else
                                        {
                                            e.NextCtrl = this.uButton_rs_SlipNote;
                                        }
                                        break;
                                    }
                            }
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tNedit_SlipNoteCode;
                                        break;
                                    }
                            }
                        }
                        break;
                    }
                #endregion // 備考1

                #region 備考1(ガイドボタン)
                //---------------------------------------------------------------
                // 備考1(ガイドボタン)
                //---------------------------------------------------------------
                case "uButton_rs_SlipNote":
                    {
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tNedit_SlipNote2Code;
                                        break;
                                    }

                            }
                            break;
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tEdit_rs_SlipNote;
                                        break;
                                    }

                            }
                            break;
                        }
                    }
                #endregion // 備考1(ガイドボタン)

                #region 備考２コード
                //---------------------------------------------------------------
                // 備考２コード
                //---------------------------------------------------------------
                case "tNedit_SlipNote2Code":
                    {
                        int inputValue = this.tNedit_SlipNote2Code.GetInt();
                        if (this._prevInputValue.SlipNoteCd2 != inputValue)
                        {
                            string guidName = string.Empty;
                            if (inputValue == 0)
                            {
                                this._prevInputValue.SlipNoteCd2 = inputValue;
                                this._prevInputValue.SlipNoteName2 = string.Empty;
                                this.tEdit_rs_SlipNote2.Clear();
                                this.tNedit_SlipNote2Code.Clear();
                            }
                            else
                            {
                                int status = ReadSlipNoteName(CT_DIVCODE_NoteGuideDivCd_2, inputValue, out guidName);

                                if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                                {
                                    this._prevInputValue.SlipNoteCd2 = inputValue;
                                    this.tEdit_rs_SlipNote2.Text = guidName;
                                    this._prevInputValue.SlipNoteName2 = guidName;
                                }
                                else
                                {
                                    // エラー時
                                    TMsgDisp.Show(
                                    this,
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    this.Name,
                                    "伝票備考コード２が存在しません。",
                                    -1,
                                    MessageBoxButtons.OK);

                                    // コードを戻す
                                    this.tNedit_SlipNote2Code.SetInt(this._prevInputValue.SlipNoteCd2);
                                }
                            }
                        }

                        #region NextCtrl制御
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                case Keys.Right:
                                    e.NextCtrl = this.tEdit_rs_SlipNote2;
                                    break;
                                default:
                                    break;
                            }
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    e.NextCtrl = this.uButton_rs_SlipNote;
                                    break;
                                default:
                                    break;
                            }

                        }
                        #endregion
                        break;
                    }
                #endregion

                #region 備考2
                //---------------------------------------------------------------
                // 備考2
                //---------------------------------------------------------------
                case "tEdit_rs_SlipNote2":
                    {
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        //伝票区分が仕入
                                        if ((int)this.tComboEditor_rs_SalesSlipCd.Value == 10)
                                        {
                                            if (tEdit_rs_SlipNote2.Text != string.Empty)
                                            {
                                                StartIssueRedSlip();
                                                if (this._detailDataSet.RedSlipDetail.Count > 0)
                                                {
                                                    e.NextCtrl = this.tEdit_rs_SlipNote2;
                                                }
                                            }
                                            else
                                            {
                                                e.NextCtrl = this.uButton_rs_SlipNote2;
                                            }
                                        }
                                        else
                                        {
                                            if (tEdit_rs_SlipNote2.Text != string.Empty)
                                            {
                                                e.NextCtrl = this.tNedit_RetGoodsReason;
                                            }
                                            else
                                            {
                                                e.NextCtrl = this.uButton_rs_SlipNote2;
                                            }
                                        }
                                        break;
                                    }
                            }
                            break;
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tNedit_SlipNote2Code;
                                        break;
                                    }
                            }
                            break;
                        }
                    }
                #endregion // 備考2

                #region 備考2(ガイドボタン)
                //---------------------------------------------------------------
                // 備考2(ガイドボタン)
                //---------------------------------------------------------------
                case "uButton_rs_SlipNote2":
                    {
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    //伝票区分が仕入
                                    if ((int)this.tComboEditor_rs_SalesSlipCd.Value == 10)
                                    {
                                        // 計上返品処理
                                        StartIssueRedSlip();
                                        if (this._detailDataSet.RedSlipDetail.Count > 0)
                                        {
                                            e.NextCtrl = this.uButton_rs_SlipNote2;
                                        }
                                    }
                                    else
                                    {
                                        {
                                            e.NextCtrl = this.tNedit_RetGoodsReason;
                                        }
                                    }
                                    break;
                            }
                            break;
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tEdit_rs_SlipNote2;
                                        break;
                                    }

                            }
                            break;
                        }
                    }
                #endregion // 備考2(ガイドボタン)

                #region 返品理由コード
                //---------------------------------------------------------------
                // 返品理由コード
                //---------------------------------------------------------------
                case "tNedit_RetGoodsReason":
                    {
                        int inputValue = this.tNedit_RetGoodsReason.GetInt();
                        if (this._prevInputValue.RetGoodsReasonCd != inputValue)
                        {
                            string guidName = string.Empty;
                            if (inputValue == 0)
                            {
                                this._prevInputValue.RetGoodsReasonCd = inputValue;
                                this._prevInputValue.RetGoodsReasonName = string.Empty;
                                this.tEdit_rs_ReturnReason.Clear();
                                this.tNedit_RetGoodsReason.Clear();
                                this._retGoodsReason = string.Empty;
                                this._retGoodsReasonDiv = inputValue;
                            }
                            else
                            {
                                int status = ReadRetGoodsReasonName(CT_DIVCODE_USERGUIDEDIVCD_RETGOODSREASON, inputValue, out guidName);

                                if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                                {
                                    this._prevInputValue.RetGoodsReasonCd = inputValue;
                                    this._prevInputValue.RetGoodsReasonName = guidName;
                                    this.tEdit_rs_ReturnReason.Text = guidName;
                                    this._retGoodsReason = guidName;
                                    this._retGoodsReasonDiv = inputValue;
                                }
                                else
                                {
                                    // エラー時
                                    TMsgDisp.Show(
                                    this,
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    this.Name,
                                    "返品理由コードが存在しません。",
                                    -1,
                                    MessageBoxButtons.OK);

                                    // コードを戻す
                                    this.tNedit_RetGoodsReason.SetInt(this._prevInputValue.RetGoodsReasonCd);
                                }
                            }
                        }
                        #region NextCtrl制御
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                case Keys.Right:
                                    e.NextCtrl = this.tEdit_rs_ReturnReason;
                                    break;
                                default:
                                    break;
                            }
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                case Keys.Right:
                                    e.NextCtrl = this.uButton_rs_SlipNote2;
                                    break;
                                default:
                                    break;
                            }
                        }
                        #endregion

                        break;
                    }
                #endregion
                
                #region 返品理由
                //---------------------------------------------------------------
                // 返品理由
                //---------------------------------------------------------------
                case "tEdit_rs_ReturnReason":
                    {
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        if (tEdit_rs_ReturnReason.Text != string.Empty)
                                        {
                                            // 計上返品処理へ
                                            StartIssueRedSlip();
                                            if (this._detailDataSet.RedSlipDetail.Count > 0)
                                            {
                                                e.NextCtrl = this.uButton_rs_ReturnReason;
                                            }
                                            else
                                            {
                                                e.NextCtrl = this.tEdit_rs_ReturnReason;
                                            }
                                        }
                                        else
                                        {
                                            e.NextCtrl = this.uButton_rs_ReturnReason;
                                        }
                                        break;
                                    }
                            }
                            break;
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tNedit_RetGoodsReason;
                                        break;
                                    }
                            }
                            break;
                        }
                    }
                #endregion // 返品理由

                #region 返品理由(ガイドボタン)
                //---------------------------------------------------------------
                // 返品理由(ガイドボタン)
                //---------------------------------------------------------------
                case "uButton_rs_ReturnReason":
                    {
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        // 計上返品処理へ
                                        StartIssueRedSlip();
                                        if (this._detailDataSet.RedSlipDetail.Count > 0)
                                        {
                                            e.NextCtrl = this.uButton_rs_ReturnReason;
                                        }
                                        else
                                        {
                                            e.NextCtrl = this.uButton_rs_ReturnReason;
                                        }
                                        break;
                                    }

                            }
                            break;
                        }
                        else
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:
                                    {
                                        e.NextCtrl = this.tEdit_rs_ReturnReason;
                                        break;
                                    }

                            }
                            break;
                        }
                    }
                #endregion // 返品理由(ガイドボタン)

                # region 返品計上入力グリッド
                //---------------------------------------------------------------
                // 返品計上入力グリッド
                //---------------------------------------------------------------
                case "uGrid_RedSlip":
                    {
                        if (!e.ShiftKey)
                        {
                            switch (e.Key)
                            {
                                case Keys.Tab:
                                case Keys.Return:
                                    if (ReturnKeyDownOfRedSlipGrid())
                                    {
                                        e.NextCtrl = null;
                                    }
                                    else
                                    {
                                        // 伝票区分＝「仕入」の場合、備考へ移動
                                        if ((int)this.tComboEditor_rs_SalesSlipCd.Value == 10)
                                        {
                                            e.NextCtrl = this.tNedit_SlipNoteCode;
                                        }
                                        else
                                        // 伝票区分＝「返品」の場合、返品手数料へ移動
                                        {
                                            e.NextCtrl = this.tNedit_rs_FeePercent01;
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                    break;
                # endregion
                // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
            }

            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            if (e.NextCtrl is Infragistics.Win.UltraWinGrid.UltraGrid)
            {
                _searchFlg = false;
            }
            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
            // 合計タブor明細タブに移動する場合は検索実行チェックする
            if ( e.NextCtrl == uTabControl || e.NextCtrl == uTabControl_BlDspRslt )
            {
                if ( !e.ShiftKey && (e.Key == Keys.Down || e.Key == Keys.Right || e.Key == Keys.Tab || e.Key == Keys.Return) )
                {
                    // 検索実行
                    e.NextCtrl = SearchOnChangeFocus( e.PrevCtrl );
                    return;
                }
            }
            else if ( e.NextCtrl == uButton_SupplierSlipNote1 )
            {
                if ( !e.ShiftKey && (e.Key == Keys.Up || e.Key == Keys.Down) )
                {
                    e.NextCtrl = tEdit_SupplierSlipNote1;
                }
            }
            else if ( e.NextCtrl == uButton_SupplierSlipNote2 )
            {
                if ( !e.ShiftKey && (e.Key == Keys.Up || e.Key == Keys.Down) )
                {
                    e.NextCtrl = tEdit_SupplierSlipNote2;
                }
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
        }
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
		// ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
        #region 指定備考情報制御処理
        /// <summary>
        /// 備考コード名称取得
        /// </summary>
        /// <param name="noteGuideDivCode">備考区分</param>
        /// <param name="noteGuideCode">備考コード</param>
        /// <param name="noteGuideName">備考名称</param>
        /// <remarks>
        /// <br>Note		: 備考コード名称取得を行う。</br>
        /// <br>Programmer	: FSI冨樫 紗由里</br>
        /// <br>Date		: 2013/01/21</br>
        /// </remarks>
        private int ReadSlipNoteName(int noteGuideDivCode, int noteGuideCode, out string noteGuideName)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            noteGuideName = string.Empty;
            try
            {
                // コードから名称へ変換                
                NoteGuidBd noteGuidBd;
                status = _noteGuidAcs.Read(out noteGuidBd, this._enterpriseCode, noteGuideDivCode, noteGuideCode);
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if (noteGuidBd != null)
                    {
                        noteGuideName = noteGuidBd.NoteGuideName.Trim();
                    }
                    else
                    {
                        status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    }
                }
            }
            catch
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            }
            return status;
        }
        #endregion // 指定備考情報制御処理

        #region 指定返品理由情報制御処理
        /// <summary>
        /// 返品理由コード名称取得
        /// </summary>
        /// <param name="retGoodsReasonDivCode">返品理由区分</param>
        /// <param name="retGoodsReasonCode">返品理由コード</param>
        /// <param name="retGoodsReasonDivName">返品理由名称</param>
        /// <remarks>
        /// <br>Note		: 返品理由コード名称取得を行う。</br>
        /// <br>Programmer	: FSI冨樫 紗由里</br>
        /// <br>Date		: 2013/01/21</br>
        /// </remarks>
        private int ReadRetGoodsReasonName(int retGoodsReasonDivCode, int retGoodsReasonCode, out string retGoodsReasonDivName)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            retGoodsReasonDivName = string.Empty;
            try
            {
                // コードから名称へ変換
                UserGdBd userGuideBdInfo;
                UserGuideAcsData userGuideAcsData = UserGuideAcsData.UserBodyData;
                status = this._userGuideAcs.ReadBody(out userGuideBdInfo, this._enterpriseCode, retGoodsReasonDivCode, retGoodsReasonCode, ref userGuideAcsData);
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if (userGuideBdInfo != null)
                    {
                        retGoodsReasonDivName = userGuideBdInfo.GuideName.Trim();
                    }
                    else
                    {
                        status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    }
                }
            }
            catch
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            }
            return status;
        }
        #endregion // 指定返品理由情報制御処理
		// ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

        /// <summary>
        /// フォーカス移動時の検索処理
        /// </summary>
        /// <param name="control"></param>
        /// <remarks>PM7同様の操作性を実現する為の処理</remarks>
        private Control SearchOnChangeFocus( Control prevControl )
        {
            Control nextControl = prevControl;

            // タブの選択状態により処理を制御
            switch ( this._selectedMainTabKey )
            {
                // 伝票表示タブ
                case "uTab_SlipList":
                    {
                        // 検索実行
                        Control errorControl = this.SearchSlipDetailList();
                        if ( errorControl != null )
                        {
                            nextControl = errorControl;
                        }
                        else
                        {
                            if ( uGrid_Slip.Rows.Count > 0 )
                            {
                                nextControl = uGrid_Slip;
                            }
                        }
                    }
                    break;
                // 明細表示タブ
                case "uTab_SlipDetail":
                    {
                        // 検索実行
                        Control errorControl = this.SearchSlipDetailList();
                        if ( errorControl != null )
                        {
                            nextControl = errorControl;
                        }
                        else
                        {
                            if ( uGrid_Detail.Rows.Count > 0 )
                            {
                                nextControl = uGrid_Detail;
                            }
                        }
                    }
                    break;
                // 残高一覧タブ
                case "uTab_RemainList":
                    {
                        // フォーカス移動のみ
                        nextControl = tComboEditor_rl_RemainType;
                    }
                    break;
            }

            return nextControl;
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

        #endregion // アローキーコントロール

        #region 次の表示されている詳細条件コントロール取得

        /// <summary>
        /// 拡張検索条件で、表示されている次のコントロールを取得する
        /// </summary>
        /// <param name="controlName"></param>
        /// <returns></returns>
        private Control GetNextControl(string controlName)
        {
            Control nextCtrl = null;

            // switchの方が良い。
            
            // 入力日（終了）
            if (controlName == "tDateEdit_AddUpADateEd")
            {
                if (this.tComboEditor_StockSlipCd.Visible) nextCtrl = this.tComboEditor_StockSlipCd;
                else nextCtrl = GetNextControl("tComboEditor_StockSlipCd");
            }

            // 伝票区分
            if (controlName == "tComboEditor_StockSlipCd")
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 DEL
                //if (this.tEdit_PartySalesSlipNum.Visible) nextCtrl = this.tEdit_PartySalesSlipNum;
                //else nextCtrl = GetNextControl("tEdit_PartySalesSlipNum");
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 ADD
                if ( this.tComboEditor_StockSlipCdDtl.Visible ) nextCtrl = this.tComboEditor_StockSlipCdDtl;
                else nextCtrl = GetNextControl( "tComboEditor_StockSlipCdDtl" );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 ADD
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tComboEditor_StockSlipCd", true)[0];//x_chenjm 2011/11/30 ADD
            }
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 ADD
            // 値引区分
            if ( controlName == "tComboEditor_StockSlipCdDtl" )
            {
                if ( this.tEdit_PartySalesSlipNum.Visible ) nextCtrl = this.tEdit_PartySalesSlipNum;
                else nextCtrl = GetNextControl( "tEdit_PartySalesSlipNum" );
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tComboEditor_StockSlipCdDtl", true)[0];//x_chenjm 2011/11/30 ADD
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 ADD


            // 伝票番号
            if (controlName == "tEdit_PartySalesSlipNum")
            {
                //if (this.tEdit_PartySalesSlipNum.Visible && String.IsNullOrEmpty(this.tComboEditor_PartySalesSlipNumFuzzy.Text.Trim()))
                //{
                //    nextCtrl = this.tComboEditor_PartySalesSlipNumFuzzy;
                //}
                //else
                //{
                    if (this.tComboEditor_PartySalesSlipNumFuzzy.Visible) nextCtrl = this.tComboEditor_PartySalesSlipNumFuzzy;
                    else nextCtrl = GetNextControl("tComboEditor_PartySalesSlipNumFuzzy");
                //}
            }

            // 伝票番号あいまい条件
            if (controlName == "tComboEditor_PartySalesSlipNumFuzzy")
            {
                if (this.tNedit_PaymentSlipNo.Visible) nextCtrl = this.tNedit_PaymentSlipNo;
                else nextCtrl = GetNextControl("tNedit_PaymentSlipNo");
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tComboEditor_PartySalesSlipNumFuzzy", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // 仕入SEQ/支払No
            if (controlName == "tNedit_PaymentSlipNo")
            {
                if (this.tEdit_StockAgentCodeInput.Visible) nextCtrl = this.tEdit_StockAgentCodeInput;
                else nextCtrl = GetNextControl("tEdit_StockAgentCodeInput");
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tNedit_PaymentSlipNo", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // 担当者
            if (controlName == "tEdit_StockAgentCodeInput")
            {
                if (this.tEdit_StockAgentCodeInput.Visible && String.IsNullOrEmpty(this.tEdit_StockAgentCodeInput.Text.Trim()))
                {
                    nextCtrl = this.uButton_StockAgentCode;
                }
                else
                {
                    if (this.tComboEditor_DataSendCode.Visible) nextCtrl = this.tComboEditor_DataSendCode;
                    else nextCtrl = GetNextControl("tComboEditor_DataSendCode");
                }
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tEdit_StockAgentCodeInput", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // 担当者ガイド
            if (controlName == "uButton_StockAgentCode")
            {
                if (this.tComboEditor_DataSendCode.Visible) nextCtrl = this.tComboEditor_DataSendCode;
                else nextCtrl = GetNextControl("tComboEditor_DataSendCode");
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("uButton_StockAgentCode", true)[0];//x_chenjm 2011/11/30 ADD
            }

            
            //2008.12.05 del [8726]
            //// 発注者
            //if (controlName == "tEdit_StockInputCode")
            //{
            //    if (this.tEdit_StockInputCode.Visible && String.IsNullOrEmpty(this.tEdit_StockInputCode.Text.Trim()))
            //    {
            //        nextCtrl = this.uButton_StockInputCode;
            //    }
            //    else
            //    {
            //        if (this.tComboEditor_DataSendCode.Visible) nextCtrl = this.tComboEditor_DataSendCode;
            //        else nextCtrl = getNextControl("tComboEditor_DataSendCode");
            //    }
            //}

            //// 発注者ガイド
            //if (controlName == "uButton_StockInputCode")
            //{
            //    if (this.tComboEditor_DataSendCode.Visible) nextCtrl = this.tComboEditor_DataSendCode;
            //    else nextCtrl = getNextControl("tComboEditor_DataSendCode");
            //}
            //2008.12.05 del [8726]

            // UOE送信
            if (controlName == "tComboEditor_DataSendCode")
            {
                if (this.tEdit_SupplierSlipNote1.Visible) nextCtrl = this.tEdit_SupplierSlipNote1;
                else nextCtrl = GetNextControl("tEdit_SupplierSlipNote1");
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tComboEditor_DataSendCode", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // 備考
            if (controlName == "tEdit_SupplierSlipNote1")
            {
                //if (this.tEdit_SupplierSlipNote1.Visible && String.IsNullOrEmpty(this.tEdit_SupplierSlipNote1.Text.Trim()))
                //{
                //    nextCtrl = this.uButton_SupplierSlipNote1;
                //}
                //else
                //{
                if (this.uButton_SupplierSlipNote1.Visible) nextCtrl = this.uButton_SupplierSlipNote1;
                else nextCtrl = GetNextControl("uButton_SupplierSlipNote1");
                //}
            }

            // 備考1ボタン
            if (controlName == "uButton_SupplierSlipNote1")
            {
                //if (this.tComboEditor_SupplierSlipNote1Fuzzy.Visible)
                //{
                //    nextCtrl = this.tComboEditor_SupplierSlipNote1Fuzzy;
                //}
                //else
                //{
                    if (this.tComboEditor_SupplierSlipNote1Fuzzy.Visible) nextCtrl = this.tComboEditor_SupplierSlipNote1Fuzzy;
                    else nextCtrl = GetNextControl("tComboEditor_SupplierSlipNote1Fuzzy");
                //}
            }

            // 備考あいまい条件
            if (controlName == "tComboEditor_SupplierSlipNote1Fuzzy")
            {
                if (this.tEdit_SupplierSlipNote2.Visible) nextCtrl = this.tEdit_SupplierSlipNote2;
                else nextCtrl = GetNextControl("tEdit_SupplierSlipNote2");
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tComboEditor_SupplierSlipNote1Fuzzy", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // 備考2
            if (controlName == "tEdit_SupplierSlipNote2")
            {
                //if (this.tEdit_SupplierSlipNote2.Visible && String.IsNullOrEmpty(this.tEdit_SupplierSlipNote2.Text.Trim()))
                //{
                //    nextCtrl = this.uButton_SupplierSlipNote2;
                //}
                //else
                //{
                if (this.uButton_SupplierSlipNote2.Visible) nextCtrl = this.uButton_SupplierSlipNote2;
                else nextCtrl = GetNextControl("uButton_SupplierSlipNote2");
                //}
            }

            // 備考2ボタン
            if (controlName == "uButton_SupplierSlipNote2")
            {
                //if (this.tComboEditor_SupplierSlipNote2Fuzzy.Visible)
                //{
                //    nextCtrl = this.tComboEditor_SupplierSlipNote2Fuzzy;
                //}
                //else
                //{
                    if (this.tComboEditor_SupplierSlipNote2Fuzzy.Visible) nextCtrl = this.tComboEditor_SupplierSlipNote2Fuzzy;
                    else nextCtrl = GetNextControl("tComboEditor_SupplierSlipNote2Fuzzy");
                //}
            }

            // 備考2あいまい条件
            if (controlName == "tComboEditor_SupplierSlipNote2Fuzzy")
            {
                if (this.tEdit_UoeRemark1.Visible) nextCtrl = this.tEdit_UoeRemark1;
                else nextCtrl = GetNextControl("tEdit_UoeRemark1");
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tComboEditor_SupplierSlipNote2Fuzzy", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // UOEリマーク1
            if (controlName == "tEdit_UoeRemark1")
            {
                //if (this.tEdit_UoeRemark1.Visible && String.IsNullOrEmpty(this.tEdit_UoeRemark1.Text.Trim()))
                //{
                //    nextCtrl = this.tComboEditor_UoeRemark1Fuzzy;
                //}
                //else
                //{
                    if (this.tComboEditor_UoeRemark1Fuzzy.Visible) nextCtrl = this.tComboEditor_UoeRemark1Fuzzy;
                    else nextCtrl = GetNextControl("tComboEditor_UoeRemark1Fuzzy");
                //}
            }

            // UOEリマーク1あいまい条件
            if (controlName == "tComboEditor_UoeRemark1Fuzzy")
            {
                if (this.tEdit_UoeRemark2.Visible) nextCtrl = this.tEdit_UoeRemark2;
                else nextCtrl = GetNextControl("tEdit_UoeRemark2");
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tComboEditor_UoeRemark1Fuzzy", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // UOEリマーク2
            if (controlName == "tEdit_UoeRemark2")
            {
                //if (this.tEdit_UoeRemark2.Visible && String.IsNullOrEmpty(this.tEdit_UoeRemark2.Text.Trim()))
                //{
                //    nextCtrl = this.tComboEditor_UoeRemark2Fuzzy;
                //}
                //else
                //{
                    if (this.tComboEditor_UoeRemark2Fuzzy.Visible) nextCtrl = this.tComboEditor_UoeRemark2Fuzzy;
                    else nextCtrl = GetNextControl("tComboEditor_UoeRemark2Fuzzy");
                //}
            }

            // UOEリマーク2あいまい条件
            if (controlName == "tComboEditor_UoeRemark2Fuzzy")
            {
                if (this.tEdit_BlGroupCodeInput.Visible) nextCtrl = this.tEdit_BlGroupCodeInput;
                else nextCtrl = GetNextControl("tEdit_BlGroupCodeInput");
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tComboEditor_UoeRemark2Fuzzy", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // BLグループ
            if (controlName == "tEdit_BlGroupCodeInput")
            {
                if (this.tEdit_BlGroupCodeInput.Visible && String.IsNullOrEmpty(this.tEdit_BlGroupCodeInput.Text.Trim()))
                {
                    nextCtrl = this.uButton_BlGroupCode;
                }
                else
                {
                    if (this.tEdit_BlGoodsCodeInput.Visible) nextCtrl = this.tEdit_BlGoodsCodeInput;
                    else nextCtrl = GetNextControl("tEdit_BlGoodsCodeInput");
                }
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tEdit_BlGroupCodeInput", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // BLグループガイド
            if (controlName == "uButton_BlGroupCode")
            {
                if (this.tEdit_BlGoodsCodeInput.Visible) nextCtrl = this.tEdit_BlGoodsCodeInput;
                else nextCtrl = GetNextControl("tEdit_BlGoodsCodeInput");
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("uButton_BlGroupCode", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // BLコード
            if (controlName == "tEdit_BlGoodsCodeInput")
            {
                if (this.tEdit_BlGoodsCodeInput.Visible && String.IsNullOrEmpty(this.tEdit_BlGoodsCodeInput.Text.Trim()))
                {
                    nextCtrl = this.uButton_BlGoodsCode;
                }
                else
                {
                    if (this.tEdit_GoodsName.Visible) nextCtrl = this.tEdit_GoodsName;
                    else nextCtrl = GetNextControl("tEdit_GoodsName");
                }
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tEdit_BlGoodsCodeInput", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // BLコードガイド
            if (controlName == "uButton_BlGoodsCode")
            {
                if (this.tEdit_GoodsName.Visible) nextCtrl = this.tEdit_GoodsName;
                else nextCtrl = GetNextControl("tEdit_GoodsName");
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("uButton_BlGoodsCode", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // 品名
            if (controlName == "tEdit_GoodsName")
            {
                //if (this.tEdit_GoodsName.Visible && String.IsNullOrEmpty(this.tEdit_GoodsName.Text.Trim()))
                //{
                //    nextCtrl = this.tComboEditor_GoodsNameFuzzy;
                //}
                //else
                //{
                    if (this.tComboEditor_GoodsNameFuzzy.Visible) nextCtrl = this.tComboEditor_GoodsNameFuzzy;
                    else nextCtrl = GetNextControl("tComboEditor_GoodsNameFuzzy");
                //}
            }

            // 品名あいまい条件
            if (controlName == "tComboEditor_GoodsNameFuzzy")
            {
                if (this.tEdit_GoodsNo.Visible) nextCtrl = this.tEdit_GoodsNo;
                else nextCtrl = GetNextControl("tEdit_GoodsNo");
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tComboEditor_GoodsNameFuzzy", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // 品番
            if (controlName == "tEdit_GoodsNo")
            {
                //if (this.tEdit_GoodsNo.Visible && String.IsNullOrEmpty(this.tEdit_GoodsNo.Text.Trim()))
                //{
                //    nextCtrl = this.tComboEditor_GoodsNoFuzzy;
                //}
                //else
                //{
                    if (this.tComboEditor_GoodsNoFuzzy.Visible) nextCtrl = this.tComboEditor_GoodsNoFuzzy;
                    else nextCtrl = GetNextControl("tComboEditor_GoodsNoFuzzy");
                //}
            }

            // 品番あいまい条件
            if (controlName == "tComboEditor_GoodsNoFuzzy")
            {
                if (this.tEdit_MakerCdInput.Visible) nextCtrl = this.tEdit_MakerCdInput;
                else nextCtrl = GetNextControl("tEdit_MakerCdInput");
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tComboEditor_GoodsNoFuzzy", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // メーカーコード
            if (controlName == "tEdit_MakerCdInput")
            {
                if (this.tEdit_MakerCdInput.Visible && String.IsNullOrEmpty(this.tEdit_MakerCdInput.Text.Trim()))
                {
                    nextCtrl = this.uButton_MakerCd;
                }
                else
                {
                    //if ( this.uButton_MakerCd.Visible ) nextCtrl = this.tComboEditor_StockOrderDivCd; // DEL 2011/11/18 xupz
                    if (this.tComboEditor_StockOrderDivCd.Visible) nextCtrl = this.tComboEditor_StockOrderDivCd; // ADD 2011/11/18 xupz
                    else nextCtrl = GetNextControl( "tComboEditor_StockOrderDivCd" );
                }
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tEdit_MakerCdInput", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // メーカーガイド
            if (controlName == "uButton_MakerCd")
            {
                if (this.tComboEditor_StockOrderDivCd.Visible) nextCtrl = this.tComboEditor_StockOrderDivCd;
                else nextCtrl = GetNextControl("tComboEditor_StockOrderDivCd");
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("uButton_MakerCd", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // 在庫取寄区分
            if (controlName == "tComboEditor_StockOrderDivCd")
            {
                if (this.tEdit_WarehouseCdInput.Visible) nextCtrl = this.tEdit_WarehouseCdInput;
                else nextCtrl = GetNextControl("tEdit_WarehouseCdInput");
                if (nextCtrl == null || (nextCtrl != null&&nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tComboEditor_StockOrderDivCd", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // 倉庫コード
            if (controlName == "tEdit_WarehouseCdInput")
            {
                if (this.tEdit_WarehouseCdInput.Visible && String.IsNullOrEmpty(this.tEdit_WarehouseCdInput.Text.Trim()))
                {
                    nextCtrl = this.uButton_WarehouseCd;
                }
                else
                {
                    if (this.tComboEditor_DeleteFlag.Visible) nextCtrl = this.tComboEditor_DeleteFlag;
                    else nextCtrl = GetNextControl("tComboEditor_DeleteFlag");
                }
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tEdit_WarehouseCdInput", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // 倉庫ガイド
            if (controlName == "uButton_WarehouseCd")
            {
                if (this.tComboEditor_DeleteFlag.Visible) nextCtrl = this.tComboEditor_DeleteFlag;
                else nextCtrl = GetNextControl("tComboEditor_DeleteFlag");
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("uButton_WarehouseCd", true)[0];//x_chenjm 2011/11/30 ADD
            }

            // 削除指定区分
            if (controlName == "tComboEditor_DeleteFlag")
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 DEL
                //if (this._selectedMainTabKey == "uTab_SlipList")
                //{
                //    if (this.uGrid_Slip.Rows.Count > 0) nextCtrl = this.uGrid_Slip;
                //    else nextCtrl = this.uCheckEditor_StatusBar_AutoFillToGridColumn;
                //}
                //else if (this._selectedMainTabKey == "uTab_SlipDetail")
                //{
                //    if (this.uGrid_Detail.Rows.Count > 0) nextCtrl = this.uGrid_Detail;
                //    else nextCtrl = this.uCheckEditor_StatusBar_AutoFillToGridColumn;
                //}
                //else if (this._selectedMainTabKey == "uTab_RemainList")
                //{
                //    if (this.uGrid_BalanceList.Rows.Count > 0) nextCtrl = this.uGrid_BalanceList;
                //    else nextCtrl = this.uCheckEditor_StatusBar_AutoFillToGridColumn;
                //}
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
                // 検索実行・フォーカス移動
                nextCtrl = this.SearchOnChangeFocus( nextCtrl );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
                if (nextCtrl == null || (nextCtrl != null && nextCtrl.Visible == false)) nextCtrl = this.Controls.Find("tComboEditor_DeleteFlag", true)[0];//x_chenjm 2011/11/30 ADD
                
            }
            return nextCtrl;
        }

        #endregion // 次の表示されている詳細条件コントロール取得

        #region ツールバー検索

        #region 列コンボボックス調整

        /// <summary>
        /// ツールバーの列コンボボックスを調整
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>             [仕入返品計上] 仕入返品の列設定処理を追加</br>
        /// </remarks>
        private void setToolbarSearchSurface()
        {
            Infragistics.Win.UltraWinToolbars.ComboBoxTool comboTool = (Infragistics.Win.UltraWinToolbars.ComboBoxTool)this.tToolbarsManager.Tools["ComboBoxTool_TargetColumn"];

            ValueList list = new ValueList();
            ValueListItemsCollection collection = list.ValueListItems;
            ValueListItem item = null;

            collection.Clear();

            // 全ての列を追加
            item = new ValueListItem();
            item.DisplayText = "全ての列";
            item.DataValue = "*all*";
            collection.Add(item);

            // 現在表示されているタブによって列が変動
            if (this._selectedMainTabKey == "uTab_SlipList")
            {
                // 全ての設計された列を追加(uGridの列設定準拠)
                foreach (Infragistics.Win.UltraWinGrid.UltraGridColumn column in this.uGrid_Slip.DisplayLayout.Bands[0].Columns)
                {
                    if (!column.Hidden)
                    {
                        item = new ValueListItem();
                        item.DisplayText = column.Header.Caption; 
                        item.DataValue = column.Key;

                        if (!String.IsNullOrEmpty(item.DisplayText))
                        {
                            collection.Add(item);
                        }
                    }
                }
            }
            else if (this._selectedMainTabKey == "uTab_SlipDetail")
            {
                // 全ての設計された列を追加(uGridの列設定準拠)
                foreach (Infragistics.Win.UltraWinGrid.UltraGridColumn column in this.uGrid_Detail.DisplayLayout.Bands[0].Columns)
                {
                    if (!column.Hidden)
                    {
                        item = new ValueListItem();
                        item.DisplayText = column.Header.Caption;
                        item.DataValue = column.Key;

                        if (!String.IsNullOrEmpty(item.DisplayText))
                        {
                            collection.Add(item);
                        }
                    }
                }
            }
            else if (this._selectedMainTabKey == "uTab_RemainList")
            {
                // 全ての設計された列を追加(uGridの列設定準拠)
                foreach (Infragistics.Win.UltraWinGrid.UltraGridColumn column in this.uGrid_BalanceList.DisplayLayout.Bands[0].Columns)
                {
                    if (!column.Hidden)
                    {
                        item = new ValueListItem();
                        item.DisplayText = column.Header.Caption;
                        item.DataValue = column.Key;

                        if (!String.IsNullOrEmpty(item.DisplayText))
                        {
                            collection.Add(item);
                        }
                    }
                }
            }
            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            else if (this._selectedMainTabKey == "uTab_RedSlip")
            {
                // 全ての設計された列を追加(uGridの列設定準拠)
                foreach (Infragistics.Win.UltraWinGrid.UltraGridColumn column in this.uGrid_RedSlip.DisplayLayout.Bands[0].Columns)
                {
                    if (!column.Hidden)
                    {
                        item = new ValueListItem();
                        item.DisplayText = column.Header.Caption;
                        item.DataValue = column.Key;

                        if (!String.IsNullOrEmpty(item.DisplayText))
                        {
                            collection.Add(item);
                        }
                    }
                }
            }
            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
            comboTool.ValueList = list;
            comboTool.Text = "全ての列";
        }

        #endregion // 列コンボボックス調整

        #region 検索開始

        /// <summary>
        /// ツールバー検索
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>             [仕入返品計上] 仕入返品の文字列検索処理を追加</br>
        /// </remarks>
        private void rowSearchStart()
        {
            // 検索文字列を取得
            Infragistics.Win.UltraWinToolbars.TextBoxTool textTool = (Infragistics.Win.UltraWinToolbars.TextBoxTool)this.tToolbarsManager.Tools["TextBoxTool_SearchWord"];
            string searchStr = textTool.Text;
            if (String.IsNullOrEmpty(searchStr))
            {
                return;
            }

            // 対象となる列を取得
            Infragistics.Win.UltraWinToolbars.ComboBoxTool comboTool = (Infragistics.Win.UltraWinToolbars.ComboBoxTool)this.tToolbarsManager.Tools["ComboBoxTool_TargetColumn"];
            ValueListItem item = (ValueListItem)comboTool.SelectedItem;
            string valueStr = item.DataValue.ToString();
            string textStr = item.DisplayText;

            if (String.IsNullOrEmpty(valueStr) || String.IsNullOrEmpty(textStr))
            {
                return;
            }

            bool continueFlag = false;
            Infragistics.Win.UltraWinGrid.UltraGridRow selectRow = null;
            Infragistics.Win.UltraWinGrid.UltraGridCell gridCell = null;  // ADD 2013/01/21 [仕入返品計上] 
            bool continueCellFlag = false;  // ADD 2013/01/21 [仕入返品計上]

            // 現在表示されているタブ上で検索処理
            if (this._selectedMainTabKey == "uTab_SlipList")
            {
                #region 伝票一覧

                // 現在選択されている行がなければ最初から
                if (this.uGrid_Slip.ActiveRow == null) continueFlag = true;
                //if (this.uGrid_Slip.ActiveRow == null) continueFlag = true;

                foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in this.uGrid_Slip.Rows)
                {

                    if (continueFlag)
                    {
                        if (valueStr != "*all*")
                        {
                            if (gridRow.Cells[valueStr].Value.ToString().IndexOf(searchStr) > -1)
                            {
                                selectRow = gridRow;
                                break;
                            }
                        }
                        else
                        {
                            // 全ての列で検索
                            foreach (Infragistics.Win.UltraWinGrid.UltraGridCell cell in gridRow.Cells)
                            {
                                if (cell.Value.ToString().IndexOf(searchStr) > -1)
                                {
                                    selectRow = gridRow;
                                    break;
                                }
                            }
                            if (selectRow != null) break;
                        }
                    }

                    // 現在の行に達したら検索実行可に
                    if (!continueFlag && gridRow == this.uGrid_Slip.ActiveRow) continueFlag = true;
                }

                // 最後まで検索してもないなら最初から
                if (selectRow == null)
                {
                    foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in this.uGrid_Slip.Rows)
                    {
                        // 現在の行に達したら終了
                        if (gridRow == this.uGrid_Slip.ActiveRow) break;

                        if (valueStr != "*all*")
                        {
                            if (gridRow.Cells[valueStr].Value.ToString().IndexOf(searchStr) > -1)
                            {
                                selectRow = gridRow;
                                break;
                            }
                        }
                        else
                        {
                            // 全ての列で検索
                            foreach (Infragistics.Win.UltraWinGrid.UltraGridCell cell in gridRow.Cells)
                            {
                                if (cell.Value.ToString().IndexOf(searchStr) > -1)
                                {
                                    selectRow = gridRow;
                                    break;
                                }
                            }
                            if (selectRow != null) break;
                        }
                    }
                }

                // 選択された行を現在行に設定
                if (selectRow != null)
                {
                    // 選択
                    this.uGrid_Slip.Rows[this.uGrid_Slip.ActiveRow.Index].Selected = false;
                    this.uGrid_Slip.Rows[selectRow.Index].Selected = true;

                    this.uGrid_Slip.ActiveRow = selectRow;
                    return;
                }
                else
                {
                    // 見つかりません
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                        MSG_ROWSEARCH_NOT_FOUND, -1, MessageBoxButtons.OK);
                    return;
                }

                #endregion // 伝票一覧
            }
            else if (this._selectedMainTabKey == "uTab_SlipDetail")
            {
                #region 明細

                // 現在選択されている行がなければ最初から
                if (this.uGrid_Detail.ActiveRow == null) continueFlag = true;

                foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in this.uGrid_Detail.Rows)
                {
                    if (continueFlag)
                    {
                        if (valueStr != "*all*")
                        {
                            if (gridRow.Cells[valueStr].Value.ToString().IndexOf(searchStr) > -1)
                            {
                                selectRow = gridRow;
                                break;
                            }
                        }
                        else
                        {
                            // 全ての列で検索
                            foreach (Infragistics.Win.UltraWinGrid.UltraGridCell cell in gridRow.Cells)
                            {
                                if (cell.Value.ToString().IndexOf(searchStr) > -1)
                                {
                                    selectRow = gridRow;
                                    break;
                                }
                            }
                            if (selectRow != null) break;
                        }
                    }

                    // 現在の行に達したら検索実行可に
                    if (!continueFlag && gridRow == this.uGrid_Detail.ActiveRow) continueFlag = true;
                }

                // 最後まで検索してもないなら最初から
                if (selectRow == null)
                {
                    foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in this.uGrid_Detail.Rows)
                    {
                        // 現在の行に達したら終了
                        if (gridRow == this.uGrid_Detail.ActiveRow) break;

                        if (valueStr != "*all*")
                        {
                            if (gridRow.Cells[valueStr].Value.ToString().IndexOf(searchStr) > -1)
                            {
                                selectRow = gridRow;
                                break;
                            }
                        }
                        else
                        {
                            // 全ての列で検索
                            foreach (Infragistics.Win.UltraWinGrid.UltraGridCell cell in gridRow.Cells)
                            {
                                if (cell.Value.ToString().IndexOf(searchStr) > -1)
                                {
                                    selectRow = gridRow;
                                    break;
                                }
                            }
                            if (selectRow != null) break;
                        }
                    }
                }

                // 選択された行を現在行に設定
                if (selectRow != null)
                {
                    // 選択
                    this.uGrid_Detail.Rows[this.uGrid_Detail.ActiveRow.Index].Selected = false;
                    this.uGrid_Detail.Rows[selectRow.Index].Selected = true;

                    this.uGrid_Detail.ActiveRow = selectRow;
                    return;
                }
                else
                {
                    // 見つかりません
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                        MSG_ROWSEARCH_NOT_FOUND, -1, MessageBoxButtons.OK);
                    return;
                }

                #endregion // 明細
            }
            else if (this._selectedMainTabKey == "uTab_RemainList")
            {
                #region 残高一覧

                // 現在選択されている行がなければ最初から
                if (this.uGrid_BalanceList.ActiveRow == null) continueFlag = true;

                foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in this.uGrid_BalanceList.Rows)
                {
                    if (continueFlag)
                    {
                        if (valueStr != "*all*")
                        {
                            if (gridRow.Cells[valueStr].Value.ToString().IndexOf(searchStr) > -1)
                            {
                                selectRow = gridRow;
                                break;
                            }
                        }
                        else
                        {
                            // 全ての列で検索
                            foreach (Infragistics.Win.UltraWinGrid.UltraGridCell cell in gridRow.Cells)
                            {
                                if (cell.Value.ToString().IndexOf(searchStr) > -1)
                                {
                                    selectRow = gridRow;
                                    break;
                                }
                            }
                            if (selectRow != null) break;
                        }
                    }

                    // 現在の行に達したら検索実行可に
                    if (!continueFlag && gridRow == this.uGrid_BalanceList.ActiveRow) continueFlag = true;
                }

                // 最後まで検索してもないなら最初から
                if (selectRow == null)
                {
                    foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in this.uGrid_BalanceList.Rows)
                    {
                        // 現在の行に達したら終了
                        if (gridRow == this.uGrid_BalanceList.ActiveRow) break;

                        if (valueStr != "*all*")
                        {
                            if (gridRow.Cells[valueStr].Value.ToString().IndexOf(searchStr) > -1)
                            {
                                selectRow = gridRow;
                                break;
                            }
                        }
                        else
                        {
                            // 全ての列で検索
                            foreach (Infragistics.Win.UltraWinGrid.UltraGridCell cell in gridRow.Cells)
                            {
                                if (cell.Value.ToString().IndexOf(searchStr) > -1)
                                {
                                    selectRow = gridRow;
                                    break;
                                }
                            }
                            if (selectRow != null) break;
                        }
                    }
                }

                // 選択された行を現在行に設定
                if (selectRow != null)
                {
                    // 選択
                    this.uGrid_BalanceList.Rows[this.uGrid_BalanceList.ActiveRow.Index].Selected = false;
                    this.uGrid_BalanceList.Rows[selectRow.Index].Selected = true;

                    this.uGrid_BalanceList.ActiveRow = selectRow;
                    return;
                }
                else
                {
                    // 見つかりません
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                        MSG_ROWSEARCH_NOT_FOUND, -1, MessageBoxButtons.OK);
                    return;
                }

                #endregion // 残高一覧
            }
            // ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
            else if (this._selectedMainTabKey == "uTab_RedSlip")
            {
                #region 仕入返品

                if (this.uGrid_RedSlip.ActiveRow == null)
                {
                    continueFlag = true;
                }
                else
                {
                    this.uGrid_RedSlip.ActiveRow.Selected = false;
                }

                foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in this.uGrid_RedSlip.Rows)
                {
                    if (continueFlag)
                    {
                        if (valueStr != "*all*")
                        {
                            if (gridRow.Cells[valueStr].Value.ToString().IndexOf(searchStr) > -1)
                            {
                                selectRow = gridRow;
                                gridCell = gridRow.Cells[valueStr];
                                break;
                            }
                        }
                    }

                    // 現在の行に達したら次の行から検索実行可に
                    if (!continueFlag && gridRow == this.uGrid_RedSlip.ActiveRow) continueFlag = true;

                    if (continueFlag)
                    {
                        if (valueStr == "*all*")
                        {
                            // 現在選択されている列がなければ最初から
                            if (this.uGrid_RedSlip.ActiveCell == null) continueCellFlag = true;
                            // 全ての列で検索
                            foreach (Infragistics.Win.UltraWinGrid.UltraGridCell cell in gridRow.Cells)
                            {
                                if (continueCellFlag)
                                {
                                    if (cell.Value.ToString().IndexOf(searchStr) > -1)
                                    {
                                        selectRow = gridRow;
                                        gridCell = cell;
                                        break;
                                    }
                                }
                                // 現在の列に達したら次の列から検索実行可に
                                if (!continueCellFlag && cell == this.uGrid_RedSlip.ActiveCell) continueCellFlag = true;
                            }
                            if (selectRow != null) break;
                        }
                    }
                }

                // 最後まで検索してもないなら最初から
                if (selectRow == null)
                {
                    foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in this.uGrid_RedSlip.Rows)
                    {
                        // 現在の行に達したら終了
                        if (gridRow == this.uGrid_RedSlip.ActiveRow) break;

                        if (valueStr != "*all*")
                        {
                            if (gridRow.Cells[valueStr].Value.ToString().IndexOf(searchStr) > -1)
                            {
                                selectRow = gridRow;
                                gridCell = gridRow.Cells[valueStr];
                                break;
                            }
                        }

                        if (valueStr == "*all*")
                        {
                            // 現在選択されている列がなければ最初から
                            if (this.uGrid_RedSlip.ActiveCell == null) continueCellFlag = true;
                            // 全ての列で検索
                            foreach (Infragistics.Win.UltraWinGrid.UltraGridCell cell in gridRow.Cells)
                            {
                                if (continueCellFlag)
                                {
                                    if (cell.Value.ToString().IndexOf(searchStr) > -1)
                                    {
                                        selectRow = gridRow;
                                        gridCell = cell;
                                        break;
                                    }
                                }
                                // 現在の列に達したら次の列から検索実行可に
                                if (!continueCellFlag && cell == this.uGrid_RedSlip.ActiveCell) continueCellFlag = true;
                            }
                            if (selectRow != null) break;
                        }
                    }
                }

                // 選択された行を現在行に設定
                if (selectRow != null)
                {
                    // 選択
                    if (gridCell != null)
                    {
                        _searchFlg = true;
                        this.uGrid_RedSlip.ActiveCell = gridCell;
                        this.uGrid_RedSlip.Focus();
                        if (this.uGrid_RedSlip.ActiveRow.Index == 0)
                        {
                            this.uGrid_RedSlip.PerformAction(UltraGridAction.BelowCell, false, false);
                            this.uGrid_RedSlip.PerformAction(UltraGridAction.AboveCell, false, false);
                        }
                        else
                        {
                            this.uGrid_RedSlip.PerformAction(UltraGridAction.AboveCell, false, false);
                            this.uGrid_RedSlip.PerformAction(UltraGridAction.BelowCell, false, false);
                        }
                    }
                    this.uGrid_RedSlip.Rows[this.uGrid_RedSlip.ActiveRow.Index].Selected = false;
                    this.uGrid_RedSlip.Rows[selectRow.Index].Selected = true;

                    this.uGrid_RedSlip.ActiveRow = selectRow;
                    return;
                }
                else
                {
                    // 見つかりません
                    TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_INFO, this.Name,
                        MSG_ROWSEARCH_NOT_FOUND, -1, MessageBoxButtons.OK);
                    return;
                }

                #endregion // 仕入返品
            }
            // ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<
        }

        #region 帳票タイプを取得

        /// <summary>
        /// 帳票タイプを取得
        /// </summary>
        /// <param name="gridRow"></param>
        /// <returns></returns>
        private int getSlipType(Infragistics.Win.UltraWinGrid.UltraGridRow gridRow, int targetGrid)
        {
            // 関数呼び出しに使用する変数
            string tableName = string.Empty;
            string dataDivColName = string.Empty;
            string selectionColName = string.Empty;
            string rowNoColName = string.Empty;
            string salesSlipCdColName = string.Empty;
            string debitNoteDivColName = string.Empty;
            string acptAnOdrStatusColName = string.Empty;

            // 対象とするグリッドの各カラム名を取得
            switch (targetGrid)
            {
                case 0:
                    {
                        dataDivColName = this._detailDataSet.StcList.DataDivColumn.ColumnName;
                        //selectionColName = this._detailDataSet.StcList.SelectionColumn.ColumnName;
                        salesSlipCdColName = this._detailDataSet.StcList.SupplierSlipCdColumn.ColumnName;
                        debitNoteDivColName = this._detailDataSet.StcList.DebitNoteDivColumn.ColumnName;
                        acptAnOdrStatusColName = this._detailDataSet.StcList.SupplierFormalColumn.ColumnName;
                        rowNoColName = this._detailDataSet.StcList.RowNoColumn.ColumnName;
                        tableName = "StcList";
                        break;
                    }
                case 1:
                    {
                        dataDivColName = this._detailDataSet.StcDetail.DataDivColumn.ColumnName;
                        //selectionColName = this._detailDataSet.StcDetail.SelectionCheckColumn.ColumnName;
                        salesSlipCdColName = this._detailDataSet.StcDetail.SupplierSlipCdColumn.ColumnName;
                        debitNoteDivColName = this._detailDataSet.StcDetail.DebitNoteDivColumn.ColumnName;
                        acptAnOdrStatusColName = this._detailDataSet.StcDetail.SupplierFormalColumn.ColumnName;
                        rowNoColName = this._detailDataSet.StcDetail.RowNoColumn.ColumnName;
                        tableName = "StcDetail";
                        break;
                    }
                default: break;
            }

            if ((int)gridRow.Cells[dataDivColName].Value == 1) // 入金
            {
                return 3;
            }
            else
            {
                if ((int)gridRow.Cells[salesSlipCdColName].Value == 1) // 返品
                {
                    return 0;
                }
                else
                {
                    if (gridRow.Cells[debitNoteDivColName].ToString() == "赤伝") // 赤伝
                    {
                        return 0;
                    }
                    else
                    {
                        if ((int)gridRow.Cells[acptAnOdrStatusColName].Value == 20) // 受注
                        {
                            return 1;
                        }
                        else if ((int)gridRow.Cells[acptAnOdrStatusColName].Value == 40) // 貸出
                        {
                            return 2;
                        }
                        else
                        {
                            return -1;
                        }
                    }
                }
            }
        }

        #endregion // 帳票タイプを取得

        #endregion // 検索開始

        #endregion // ツールバー検索

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        # region [フォームクローズ前処理]
        /// <summary>
        /// フォームクローズ前イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void PMKOU04001UA_FormClosing( object sender, FormClosingEventArgs e )
        {
            this.BeforeFormClose();
        }
        /// <summary>
        /// フォームクローズ前処理
        /// </summary>
        /// <remarks>FormClosingイベントだと×ボタン時に抜けてしまうので、Parentでウィンドウメッセージを扱う</remarks>
        public void BeforeFormClose()
        {
            //-----------------------------------------
            // フォームを閉じる時(×ボタンも含む)
            //-----------------------------------------
            // ユーザー設定保存(→XML書き込み)
            SaveSettings();
        }
        /// <summary>
        /// ユーザー設定保存処理
        /// </summary>
        private void SaveSettings()
        {
            // グループの展開状態を保存する
            # region [グループ展開状態]
            _settingForm.UserSetting.BalanceChartExpanded = uExGroupBox_BalanceChart.Expanded;
            _settingForm.UserSetting.ExtraConditionExpanded = uExGroupBox_ExtraCondition.Expanded;
            # endregion

            // 詳細条件のチェック状態を保存する
            # region [詳細条件]
            List<string> cndtnList = new List<string>();

            // 抽出条件選択パネル内の全てのコントロールに対して処理
            foreach ( Control control in panel_SelectItem.Controls )
            {
                if ( control is Infragistics.Win.UltraWinEditors.UltraCheckEditor )
                {
                    // チェックが付いているチェックボックスの名称をリストに追加
                    if ( (control as Infragistics.Win.UltraWinEditors.UltraCheckEditor).Checked )
                    {
                        cndtnList.Add( control.Name );
                    }
                }
            }
            _settingForm.UserSetting.EnabledConditionList = cndtnList;
            # endregion

            // グリッドのカラム情報を保存する
            # region [グリッドカラム]
            // 伝票グリッド
            List<ColumnInfo> slipColumnsList;
            this.SaveGridColumnsSetting( uGrid_Slip, out slipColumnsList );
            _settingForm.UserSetting.SlipColumnsList = slipColumnsList;

            // 明細グリッド
            List<ColumnInfo> detailColumnsList;
            this.SaveGridColumnsSetting( uGrid_Detail, out detailColumnsList );
            _settingForm.UserSetting.DetailColumnsList = detailColumnsList;

            // 残高グリッド
            List<ColumnInfo> balanceColumnsList;
            this.SaveGridColumnsSetting( uGrid_BalanceList, out balanceColumnsList );
            _settingForm.UserSetting.BalanceColumnsList = balanceColumnsList;
            # endregion

            // ----------ADD 2013/01/21----------->>>>>
            // 返品計上入力グリッド
            List<ColumnInfo> retGoodsAddUpInpColumnsList;
            this.SaveGridColumnsSetting(uGrid_RedSlip, out retGoodsAddUpInpColumnsList);
            _settingForm.UserSetting.RetGoodsAddUpInpColumnsList = retGoodsAddUpInpColumnsList;
            // ----------ADD 2013/01/21-----------<<<<<

            // グリッドのカラムサイズ自動調整状態を保存する
            # region  [グリッドカラム自動調整]
            // 伝票グリッド
            _settingForm.UserSetting.AutoAdjustSlip = _columnWidthAutoAdjust_Slip;
            // 明細グリッド
            _settingForm.UserSetting.AutoAdjustDetail = _columnWidthAutoAdjust_Detail;
            // 残高グリッド
            _settingForm.UserSetting.AutoAdjustBalance = _columnWidthAutoAdjust_Balance;
            // 返品計上入力グリッド
            _settingForm.UserSetting.AutoAdjustRetGoodsAddUpInp = _columnWidthAutoAdjust_RedSlip; // ADD 2013/01/21
            # endregion

            // 設定保存
            _settingForm.Serialize();
        }
        # endregion

        # region [グリッドカラム情報 保存・復元]
        /// <summary>
        /// グリッドカラム情報の保存
        /// </summary>
        /// <param name="targetGrid"></param>
        /// <param name="settingList"></param>
        private void SaveGridColumnsSetting( Infragistics.Win.UltraWinGrid.UltraGrid targetGrid, out List<ColumnInfo> settingList )
        {
            settingList = new List<ColumnInfo>();
            foreach ( Infragistics.Win.UltraWinGrid.UltraGridColumn ultraGridColumn in targetGrid.DisplayLayout.Bands[0].Columns )
            {
                settingList.Add( new ColumnInfo( ultraGridColumn.Key, ultraGridColumn.Header.VisiblePosition, ultraGridColumn.Hidden, ultraGridColumn.Width, ultraGridColumn.Header.Fixed ) );
            }
        }
        /// <summary>
        /// グリッドカラム情報の読み込み
        /// </summary>
        /// <param name="targetGrid"></param>
        /// <param name="settingList"></param>
        private void LoadGridColumnsSetting( ref Infragistics.Win.UltraWinGrid.UltraGrid targetGrid, List<ColumnInfo> settingList )
        {
            if ( settingList == null || settingList.Count == 0 ) return;

            targetGrid.DisplayLayout.AutoFitStyle = Infragistics.Win.UltraWinGrid.AutoFitStyle.None;
            foreach ( ColumnInfo columnInfo in settingList )
            {
                try
                {
                    Infragistics.Win.UltraWinGrid.UltraGridColumn ultraGridColumn = targetGrid.DisplayLayout.Bands[0].Columns[columnInfo.ColumnName];
                    ultraGridColumn.Header.VisiblePosition = columnInfo.VisiblePosition;
                    ultraGridColumn.Hidden = columnInfo.Hidden;
                    ultraGridColumn.Header.Fixed = columnInfo.ColumnFixed;
                    ultraGridColumn.Width = columnInfo.Width;
                }
                catch
                {
                }
            }
        }
        # endregion

        /// <summary>
        /// 詳細条件グループの縮小・展開 変更時処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uExGroupBox_ExtraCondition_ExpandedStateChanged( object sender, EventArgs e )
        {
            if ( uExGroupBox_ExtraCondition.Expanded )
            {
                this.SuspendLayout();
                try
                {
                    DisplayExtraConditions();
                }
                finally
                {
                    this.ResumeLayout();
                }
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
        # region [グリッド設定初期化イベント]
        /// <summary>
        /// 伝票表示設定初期イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SettingForm_ClearSettingSlipGrid( object sender, EventArgs e )
        {
            InitializeGridColumns( this.uGrid_Slip.DisplayLayout.Bands[0].Columns, 0 );
            LoadGridColumnsSetting( ref uGrid_Slip, _settingForm.UserSetting.SlipColumnsList );

            autoColumnAdjust( this._columnWidthAutoAdjust_Slip, 0 );
        }
        /// <summary>
        /// 明細表示設定初期化イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SettingForm_ClearSettingDetailGrid( object sender, EventArgs e )
        {
            InitializeGridColumns( this.uGrid_Detail.DisplayLayout.Bands[0].Columns, 1 );
            LoadGridColumnsSetting( ref uGrid_Detail, _settingForm.UserSetting.DetailColumnsList );

            autoColumnAdjust( this._columnWidthAutoAdjust_Detail, 1 );
        }
        /// <summary>
        /// 残高一覧表示設定初期化イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SettingForm_ClearSettingBalanceGrid( object sender, EventArgs e )
        {
            InitializeGridColumns( this.uGrid_BalanceList.DisplayLayout.Bands[0].Columns, 2 );
            LoadGridColumnsSetting( ref uGrid_BalanceList, _settingForm.UserSetting.BalanceColumnsList );

            autoColumnAdjust( this._columnWidthAutoAdjust_Balance, 2 );
        }
        // ----------ADD 2013/01/21----------->>>>>
        /// <summary>
        /// 返品計上入力表示設定初期化イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SettingForm_ClearSettinRetGoodsAddUpInpGrid(object sender, EventArgs e)
        {
            InitializeGridColumns(this.uGrid_RedSlip.DisplayLayout.Bands[0].Columns, 4);
            LoadGridColumnsSetting(ref uGrid_RedSlip, _settingForm.UserSetting.RetGoodsAddUpInpColumnsList);

            autoColumnAdjust(this._columnWidthAutoAdjust_RedSlip, 4);
        }
        // ----------ADD 2013/01/21-----------<<<<<
        # endregion
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/16 ADD
        /// <summary>
        /// セル結合設定処理
        /// </summary>
        /// <param name="ultraGridColumn"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品予定計上] 伝票日付のセル結合判定を修正</br>
        /// </remarks>
        private void SettingMergedCell( Infragistics.Win.UltraWinGrid.UltraGridColumn column )
        {
            //--------------------------------------------------
            // CellAppearanceを強制的に統一する
            //--------------------------------------------------
            column.MergedCellAppearance = _margedCellAppearance;
            column.CellAppearance.BackColor = _margedCellAppearance.BackColor;
            column.CellAppearance.BackColor2 = _margedCellAppearance.BackColor2;
            column.CellAppearance.TextVAlign = VAlign.Top;
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/12 ADD
            column.CellAppearance.ForeColor = Color.Black;
            column.CellAppearance.ForeColorDisabled = Color.Black;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/12 ADD

            //--------------------------------------------------
            // セル結合設定
            //--------------------------------------------------
            column.MergedCellStyle = Infragistics.Win.UltraWinGrid.MergedCellStyle.Always;
            column.MergedCellEvaluationType = Infragistics.Win.UltraWinGrid.MergedCellEvaluationType.MergeSameText;
            column.MergedCellContentArea = Infragistics.Win.UltraWinGrid.MergedCellContentArea.VisibleRect;

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/20 ADD
            // セル結合判定クラス
            CustomMergedCellEvaluator customMergedCellEvaluator = new CustomMergedCellEvaluator();

            //if ( column.Key == _detailDataSet.StcDetail.SalesDateColumn.ColumnName ) // DEL 2013/01/21 [仕入返品計上]
            if (column.Key == _detailDataSet.StcDetail.StockDateColumn.ColumnName) // ADD 2013/01/21 [仕入返品計上]
            {
                // 日付
                customMergedCellEvaluator.JoinColList.Add( _detailDataSet.StcDetail.StockDateColumn.ColumnName );
            }
            else
            {
                // 伝票番号
                // (仕入伝票番号)
                customMergedCellEvaluator.JoinColList.Add( _detailDataSet.StcDetail.PartySaleSlipNumColumn.ColumnName );
                // (伝票区分)
                customMergedCellEvaluator.JoinColList.Add( _detailDataSet.StcDetail.SupplierSlipCdNameColumn.ColumnName );
                // (仕入SEQ)
                customMergedCellEvaluator.JoinColList.Add( _detailDataSet.StcDetail.SupplierSlipNoColumn.ColumnName );
            }
            column.MergedCellEvaluator = customMergedCellEvaluator;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/20 ADD
        }
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/20 ADD
        # region [グリッドセル結合判定クラス]
        /// <summary>
        /// グリッドセル結合判定クラス(カスタマイズ)
        /// </summary>
        private class CustomMergedCellEvaluator : Infragistics.Win.UltraWinGrid.IMergedCellEvaluator
        {
            /// <summary>結合条件セルリスト</summary>
            private List<string> _joinColList;
            /// <summary>
            /// 結合条件セルリスト
            /// </summary>
            public List<string> JoinColList
            {
                get { return _joinColList; }
                set { _joinColList = value; }
            }

            /// <summary>
            /// コンストラクタ
            /// </summary>
            public CustomMergedCellEvaluator()
            {
                _joinColList = new List<string>();
            }

            /// <summary>
            /// セル結合判定処理
            /// </summary>
            /// <param name="row1"></param>
            /// <param name="row2"></param>
            /// <param name="column"></param>
            /// <returns></returns>
            public bool ShouldCellsBeMerged( Infragistics.Win.UltraWinGrid.UltraGridRow row1, Infragistics.Win.UltraWinGrid.UltraGridRow row2, Infragistics.Win.UltraWinGrid.UltraGridColumn column )
            {
                foreach ( string joinColName in JoinColList )
                {
                    if ( !EqualCellValue( row1, row2, joinColName ) ) return false;
                }
                return true;
            }
            /// <summary>
            /// セルValue比較処理
            /// </summary>
            /// <param name="row1"></param>
            /// <param name="row2"></param>
            /// <param name="columnName"></param>
            /// <returns></returns>
            private bool EqualCellValue( Infragistics.Win.UltraWinGrid.UltraGridRow row1, Infragistics.Win.UltraWinGrid.UltraGridRow row2, string columnName )
            {
                return (row1.Cells[columnName].Value.ToString() == row2.Cells[columnName].Value.ToString());
            }
        }
        # endregion
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/20 ADD


        # region [コードフォーマット取得処理]
        /// <summary>
        /// 得意先コードフォーマット取得
        /// </summary>
        /// <returns></returns>
        private string GetCustomerFormat()
        {
            return GetFormat( "tNedit_CustomerCode" );
        }
        /// <summary>
        /// 仕入先コードフォーマット取得
        /// </summary>
        /// <returns></returns>
        private string GetSupplierFormat()
        {
            return GetFormat( "tNedit_SupplierCd" );
        }
        /// <summary>
        /// メーカーコードフォーマット取得
        /// </summary>
        /// <returns></returns>
        private string GetMakerFormat()
        {
            return GetFormat( "tNedit_GoodsMakerCd" );
        }
        /// <summary>
        /// ＢＬコードフォーマット取得
        /// </summary>
        /// <returns></returns>
        private string GetBLCodeFormat()
        {
            return GetFormat( "tNedit_BLGoodsCode" );
        }
        /// <summary>
        /// ＢＬグループコードフォーマット取得
        /// </summary>
        /// <returns></returns>
        private string GetBLGroupFormat()
        {
            return GetFormat( "tNedit_BLGloupCode" );
        }
        /// <summary>
        /// 汎用フォーマット取得処理
        /// </summary>
        /// <param name="editName"></param>
        /// <returns></returns>
        private string GetFormat( string editName )
        {
            string format = string.Empty;

            UiSet uiset;
            this.uiSetControl1.ReadUISet( out uiset, editName );
            if ( uiset != null )
            {
                format = string.Format( "{0};-{0};''", new string( '0', uiset.Column ) );
            }

            return format;
        }
        # endregion

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/01/07 ADD
        # region [あいまい検索用テキスト分解処理]
        /// <summary>
        /// あいまい検索用テキスト分解処理
        /// </summary>
        /// <param name="inputValue"></param>
        /// <param name="searchText"></param>
        /// <param name="fuzzyValue"></param>
        private void GetFuzzyInput( string inputValue, out string searchText, out int fuzzyValue )
        {
            if ( !string.IsNullOrEmpty( inputValue ) )
            {
                fuzzyValue = 0;     // コンボボックスの値

                if ( !inputValue.Contains( "*" ) )
                {
                    // [*]なし（「と一致」）
                    fuzzyValue = CT_FUZZY_MATCHWITH;
                }
                else if ( inputValue.StartsWith( "*" ) && inputValue.EndsWith( "*" ) )
                {
                    // [*]…[*]（「を含む」）
                    fuzzyValue = CT_FUZZY_INCLUDEWITH;
                }
                else if ( inputValue.StartsWith( "*" ) )
                {
                    // [*]…（「で終る」）
                    fuzzyValue = CT_FUZZY_ENDWITH;
                }
                else if ( inputValue.EndsWith( "*" ) )
                {
                    // …[*]（「で始る」）
                    fuzzyValue = CT_FUZZY_STARTWITH;
                }
                searchText = inputValue.Replace( "*", "" ); // [*]抜き文字列
            }
            else
            {
                // クリア
                searchText = string.Empty;
                fuzzyValue = 0;
            }
        }
        # endregion

        # region [あいまい検索用テキスト変換処理]
        /// <summary>
        /// あいまい検索用テキスト変換処理
        /// </summary>
        /// <param name="fuzzyValue"></param>
        /// <param name="searchValue"></param>
        /// <returns></returns>
        private string GetFuzzyInputOnChangeFuzzyValue( int fuzzyValue, string searchValue )
        {
            string fullValue = searchValue;

            switch ( fuzzyValue )
            {
                // 完全一致
                case CT_FUZZY_MATCHWITH:
                default:
                    fullValue = searchValue;
                    break;
                // あいまい
                case CT_FUZZY_INCLUDEWITH:
                    fullValue = "*" + searchValue + "*";
                    break;
                // 後方一致
                case CT_FUZZY_ENDWITH:
                    fullValue = "*" + searchValue;
                    break;
                // 前方一致
                case CT_FUZZY_STARTWITH:
                    fullValue = searchValue + "*";
                    break;
            }

            return fullValue;
        }
        # endregion
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/01/07 ADD


        # region [ExcelExporterイベント処理]
        /// <summary>
        /// Excelエクスポート・カラム初期化イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ultraGridExcelExporter_InitializeColumn( object sender, Infragistics.Win.UltraWinGrid.ExcelExport.InitializeColumnEventArgs e )
        {
            // グリッドカラムのフォーマットをExcelセルにコピーする。
            try
            {
                string format = e.Column.Format;

                // コード用フォーマットは(ゼロ空白にする場合)グリッドとエクセルで異なるので補正する。
                // 「0000;-0000;''」→「0000;-0000;」
                if ( format.EndsWith( ";''" ) )
                {
                    format = format.Substring( 0, format.Length - 2 );
                }
                e.ExcelFormatStr = format;
            }
            catch
            {
                e.ExcelFormatStr = string.Empty;
            }
        }
        # endregion

        // 2010/04/05 Add >>>
        /// <summary>
        /// オプション情報キャッシュ
        /// </summary>
        /// <remarks>
        /// <br>Note       : オプション情報制御処理。</br>
        /// <br>Programmer : 30517 夏野 駿希</br>
        /// <br>Date       : 2010/04/05</br>
        /// </remarks>
        private void CacheOptionInfo()
        {
            Broadleaf.Application.Remoting.ParamData.PurchaseStatus ps;

            #region テキスト出力オプション
            Broadleaf.Application.Remoting.ParamData.PurchaseStatus textOutputPs;
            textOutputPs = LoginInfoAcquisition.SoftwarePurchasedCheckForUSB(ConstantManagement_SF_PRO.SoftwareCode_OPT_CMN_TextOutput);
            if (textOutputPs == Broadleaf.Application.Remoting.ParamData.PurchaseStatus.Contract)
            {
                this._opt_TextOutput = (int)Option.ON;
            }
            else
            {
                this._opt_TextOutput = (int)Option.OFF;
            }
            #region[テキスト出力、Excel出力]
            //テキスト出力オプションが有効の場合
            if (this._opt_TextOutput == (int)Option.ON)
            {
                // テキスト出力
                this.tToolbarsManager.Tools["ButtonTool_ExtractText"].SharedProps.Visible = true;
                // EXCEL出力
                this.tToolbarsManager.Tools["ButtonTool_ExtractExcel"].SharedProps.Visible = true;
                //設定画面のテキスト出力タブを表示する
                this._settingForm.uTabControlSet(true);
            }
            //テキスト出力オプションが無効の場合
            else
            {
                // テキスト出力
                this.tToolbarsManager.Tools["ButtonTool_ExtractText"].SharedProps.Visible = false;
                // EXCEL出力
                this.tToolbarsManager.Tools["ButtonTool_ExtractExcel"].SharedProps.Visible = false;
                //設定画面のテキスト出力タブを表示する
                this._settingForm.uTabControlSet(false);
            }
            #endregion
            #endregion

            // --- ADD 2012/09/13 ---------->>>>>
            #region ●仕入先総括オプション
            ps = LoginInfoAcquisition.SoftwarePurchasedCheckForUSB(ConstantManagement_SF_PRO.SoftwareCode_OPT_CMN_SuppSumFunc);
            if (ps == Broadleaf.Application.Remoting.ParamData.PurchaseStatus.Contract)
            {
                this._opt_SupplierSummary = (int)Option.ON;
            }
            else
            {
                this._opt_SupplierSummary = (int)Option.OFF;
            }
            #endregion
            // --- ADD 2012/09/13 ----------<<<<<

        }

        // 2010/04/05 Add <<<

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/26 ADD
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_PartySalesSlipNum_Enter( object sender, EventArgs e )
        {
            // 編集開始時に[*]入りの内容が保存されていれば置き換え
            if ( !String.IsNullOrEmpty( this._srPartySalesSlipNum ) )
            {
                this.tEdit_PartySalesSlipNum.Text = this._srPartySalesSlipNum;
            }
        }
        /// <summary>
        /// 現在ソート中カラム取得処理
        /// </summary>
        /// <param name="grid"></param>
        /// <returns></returns>
        private string GetSortingColumns( Infragistics.Win.UltraWinGrid.UltraGrid grid )
        {
            string sortText = string.Empty;
            bool firstCol = true;

            foreach ( Infragistics.Win.UltraWinGrid.UltraGridColumn ultraGridColumn in grid.DisplayLayout.Bands[0].SortedColumns )
            {
                if ( firstCol == false )
                {
                    sortText += ",";
                }

                // 列名を取得
                sortText += ultraGridColumn.Key;
                
                // 列のソート方向(昇順,降順)を取得
                if ( ultraGridColumn.SortIndicator == Infragistics.Win.UltraWinGrid.SortIndicator.Ascending )
                {
                    sortText += " ASC";
                }
                else
                {
                    sortText += " DESC";
                }

                firstCol = false;
            }

            return sortText;
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/26 ADD

        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/16 ADD

        // ----------ADD 2013/01/21----------->>>>>
        # region [返品計上入力関連]
        /// <summary>
        /// 返品計上入力タブの初期化
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void ClearRedSlipInput()
        {

            // [画面クリア]
            ClearRedSlipInputField();

            # region [グリッドクリア]
            // テーブルクリア
            _detailDataSet.RedSlipDetail.Rows.Clear();

            foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in uGrid_Detail.Rows)
            {
                // DBNullまたは未チェックならば迂回
                if (gridRow.Cells[_detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Value == DBNull.Value ||
                     (bool)gridRow.Cells[_detailDataSet.StcDetail.SelectionCheckColumn.ColumnName].Value == false) continue;

                // グリッド行背景色設定（選択色の解除）
                RowColorChange(false, gridRow, 1);
            }

            // 明細テーブルのチェックを全て外す
            DataView view = new DataView(_detailDataSet.StcDetail);
            foreach (DataRowView rowView in view)
            {
                // チェック無効セル(SelectionCheckColumn=DBNull.Value)でなければfalseで初期化する
                if (rowView[_detailDataSet.StcDetail.SelectionCheckColumn.ColumnName] != DBNull.Value)
                {
                    rowView[_detailDataSet.StcDetail.SelectionCheckColumn.ColumnName] = false;
                }
            }
            # endregion [グリッドクリア]

            # region [変数クリア]
            _selectedRowCountDetail = 0;
            _redSlipTotalPrice = 0;
            _selectedSectionCd = string.Empty;

            _prevInputValue.RetGdsInputEmployeeCd = this.tEdit_rs_StockAgentCd.Text.Trim();
            _prevInputValue.RetGdsSalesSlipCd = 0;

            _selectedRowCountSlip = 0;
            redMoney = new Dictionary<int, long>();
            this._retGoodsReason = string.Empty;
            this._retGoodsReasonDiv = 0;
            _prevInputValue.SlipNoteCd1 = 0;
            _prevInputValue.SlipNoteCd2 = 0;
            _prevInputValue.SlipNoteName1 = string.Empty;
            _prevInputValue.SlipNoteName2 = string.Empty;
            _prevInputValue.RetGoodsReasonCd = 0;
            _prevInputValue.RetGoodsReasonName = string.Empty;

            # endregion
        }

        /// <summary>
        /// 返品計上入力タブ内の入力項目 初期化
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void ClearRedSlipInputField()
        {
            // panel_rs_Header
            uLabel_rs_SectionName.Text = string.Empty;
            uLabel_rs_SupplierName.Text = string.Empty;
            tComboEditor_rs_SalesSlipCd.SelectedIndex = 1; //初期表示:返品
            tEdit_rs_StockAgentCd.Text = LoginInfoAcquisition.Employee.EmployeeCode.Trim();
            uLabel_rs_StockAgentName.Text = LoginInfoAcquisition.Employee.Name.Trim();
            tDateEdit_rs_RetGdsDate.SetDateTime(DateTime.Today);

            // panel_rs_Footer
            tNedit_rs_FeePercent01.Clear();
            tNedit_rs_FeeAmount01.Clear();
            tNedit_rs_ReturnAmountTotal.Clear();
            tNedit_SlipNoteCode.Clear();
            tNedit_SlipNote2Code.Clear();
            tNedit_RetGoodsReason.Clear();
            tEdit_rs_SlipNote.Text = string.Empty;
            tEdit_rs_SlipNote2.Text = string.Empty;
            tEdit_rs_ReturnReason.Text = string.Empty;
        }

        #region 返品計上タブの表示領域調整
        /// <summary>
        /// 返品計上タブの表示領域調整
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void setupRedSlipTabControls()
        {          
            // 手数料入力域のサイズを微調整(デザイナで開くとsizeが書き換わるため)
            this.tNedit_rs_FeePercent01.Width = this.uLabel_rs_fgridTitle02.Width;
            this.tNedit_rs_FeeAmount01.Width = this.uLabel_rs_fgridTitle03.Width;
            this.tNedit_rs_ReturnAmountTotal.Width = this.uLabel_rs_fgridTitle03.Width;

        }
        #endregion // 返品計上タブの表示領域調整

        #region 返品計上_入力表示制御
        /// <summary>
        /// 返品計上_伝票区分変更時処理
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void SettingRedSlipFormalBySalesSlipCd()
        {
            // 返品計上タブの伝票区分値取得
            if (!(tComboEditor_rs_SalesSlipCd.Value is Int32)) return;
            int suppSlipCd = (int)tComboEditor_rs_SalesSlipCd.Value;

            // 前回値と比較
            if (suppSlipCd == _prevInputValue.RetGdsSalesSlipCd) return;
            _prevInputValue.RetGdsSalesSlipCd = suppSlipCd;

            # region [コントロール表示制御]
            // 伝票区分と売上全体設定マスタにより分岐
            if (suppSlipCd == 10) // 仕入
            {
                // 返品理由
                uLabel_rs_ReturnReasonTitle.Visible = false;
                tEdit_rs_ReturnReason.Text = string.Empty;
                tEdit_rs_ReturnReason.Visible = false;
                tEdit_rs_ReturnReason.Enabled = false;
                uButton_rs_ReturnReason.Visible = false;
                uButton_rs_ReturnReason.Enabled = false;
                tNedit_RetGoodsReason.Text = string.Empty;
                tNedit_RetGoodsReason.Visible = false;
                tNedit_RetGoodsReason.Enabled = false;
                // 手数料
                tNedit_rs_ReturnAmountTotal.SetInt((int)(decimal)tNedit_rs_ReturnAmountTotal.GetInt());
                tNedit_rs_FeePercent01.Text = string.Empty;
                tNedit_rs_FeeAmount01.Text = string.Empty;
                tNedit_rs_FeePercent01.Enabled = false;
                tNedit_rs_FeeAmount01.Enabled = false;

            }
            else if(suppSlipCd == 20)  // 返品
            {
                // 返品理由
                uLabel_rs_ReturnReasonTitle.Visible = true;
                tNedit_RetGoodsReason.Visible = true;
                tNedit_RetGoodsReason.Enabled = true;
                tEdit_rs_ReturnReason.Visible = true;
                tEdit_rs_ReturnReason.Enabled = true;
                uButton_rs_ReturnReason.Visible = true;
                uButton_rs_ReturnReason.Enabled = true;
                // 手数料
                tNedit_rs_FeePercent01.Enabled = true;
                tNedit_rs_FeeAmount01.Enabled = true;

            }
            # endregion

            // グリッドカラム設定
            SettingRedSlipColumns(suppSlipCd);

            // グリッド再描画
            uGrid_RedSlip.Refresh();

            // 返品伝票合計金額
            CountMoney();
            // 返品合計金額変更時処理
            ChangeRedSlipTotalPrice();
            _feePercent01 = 0;
            _feeAmount01 = 0;

        }

        /// <summary>
        /// 返品計上グリッドカラム設定
        /// </summary>
        /// <param name="salesSlipCd"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void SettingRedSlipColumns(int suppSlipCd)
        {
            bool warehouseColumnsVisible = true;

            // 伝票区分による判定
            if (suppSlipCd == 10)
            {
                // 仕入の場合
                warehouseColumnsVisible = false;
            }
            else
            {
                // 返品の場合
                warehouseColumnsVisible = true;
            }

            Infragistics.Win.UltraWinGrid.ColumnsCollection columns = uGrid_RedSlip.DisplayLayout.Bands[0].Columns;

            // 倉庫コード
            columns[_detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].Hidden = !warehouseColumnsVisible;
            columns[_detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].ExcludeFromColumnChooser = GetExcludeFromColumnChooser(!warehouseColumnsVisible);

            // 倉庫名称
            columns[_detailDataSet.RedSlipDetail.WarehouseNameColumn.ColumnName].Hidden = !warehouseColumnsVisible;
            columns[_detailDataSet.RedSlipDetail.WarehouseNameColumn.ColumnName].ExcludeFromColumnChooser = GetExcludeFromColumnChooser(!warehouseColumnsVisible);
            // 棚番
            columns[_detailDataSet.RedSlipDetail.ShelfNoColumn.ColumnName].Hidden = !warehouseColumnsVisible;
            columns[_detailDataSet.RedSlipDetail.ShelfNoColumn.ColumnName].ExcludeFromColumnChooser = GetExcludeFromColumnChooser(!warehouseColumnsVisible);
            // 返品後数
            columns[_detailDataSet.RedSlipDetail.ReturnedAfterCntColumn.ColumnName].Hidden = !warehouseColumnsVisible;
            columns[_detailDataSet.RedSlipDetail.ReturnedAfterCntColumn.ColumnName].ExcludeFromColumnChooser = GetExcludeFromColumnChooser(!warehouseColumnsVisible);

            // 列幅調整（自動調整ありの場合のみ比率を制御する目的で仮にWidthを設定する）
            if (_columnWidthAutoAdjust_RedSlip)
            {
                columns[this._detailDataSet.RedSlipDetail.GoodsNameColumn.ColumnName].Width = 100;
                columns[this._detailDataSet.RedSlipDetail.GoodsNoColumn.ColumnName].Width = 100;
                columns[this._detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName].Width = 60;
                columns[this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName].Width = 100;
                columns[this._detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName].Width = 60;
                columns[this._detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName].Width = 60;
                columns[this._detailDataSet.RedSlipDetail.SalesSlipNumColumn.ColumnName].Width = 100;
                columns[this._detailDataSet.RedSlipDetail.CustomerCodeColumn.ColumnName].Width = 60;
                columns[this._detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].Width = 50;
                columns[this._detailDataSet.RedSlipDetail.WarehouseNameColumn.ColumnName].Width = 100;
                columns[this._detailDataSet.RedSlipDetail.ShelfNoColumn.ColumnName].Width = 70;
                columns[this._detailDataSet.RedSlipDetail.ReturnedAfterCntColumn.ColumnName].Width = 60;
            }
        }

        /// <summary>
        /// カラムチューザ除外フラグ取得
        /// </summary>
        /// <param name="hidden">カラムのHiddenに設定する値</param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser GetExcludeFromColumnChooser(bool hidden)
        {
            if (hidden)
            {
                // 非表示・カラムチューザ除外する
                return Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.True;
            }
            else
            {
                // 表示・カラムチューザ除外しない
                return Infragistics.Win.UltraWinGrid.ExcludeFromColumnChooser.False;
            }
        }
        #endregion 返品計上_入力表示制御

        #region 返品伝票金額 計算
        /// <summary>
        /// 返品合計金額変更時処理
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void ChangeRedSlipTotalPrice()
        {
            // 合計金額が変わったら、手数料率に従い再計算を行う。

            // 返品手数料率
            if (tNedit_rs_FeePercent01.GetValue() != 0)
            {
                // 画面表示上の返品数は必ず正の値なので、合計金額も正の値に修正して表示する
                long setValueForFeePercent = _redSlipTotalPrice;
                if (setValueForFeePercent < 0)
                    setValueForFeePercent *= -1;
                tNedit_rs_FeeAmount01.SetInt((int)((decimal)setValueForFeePercent * (decimal)tNedit_rs_FeePercent01.GetValue() / (decimal)100));
            }
            else
            {
                _feeAmount01 = tNedit_rs_FeeAmount01.GetInt();
            }
            // 返品伝票合計金額
            // 画面表示上の返品数は必ず正の値なので、合計金額も正の値に修正して表示する
            long setValue = _redSlipTotalPrice;
            if (setValue < 0)
                setValue *= -1;
            tNedit_rs_ReturnAmountTotal.SetInt((int)((decimal)setValue - (decimal)tNedit_rs_FeeAmount01.GetInt()));
        }

        /// <summary>
        /// 返品金額再計算
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void CountMoney()
        {
            this._redSlipTotalPrice = 0;

            // 金額の総計
            if (this.redMoney.Count > 0)
            {
                foreach (int key in this.redMoney.Keys)
                {
                    this._redSlipTotalPrice += redMoney[key];
                }
            }
        }
        #endregion 返品伝票金額 計算

        /// <summary>
        /// 返品計上_グリッド行ごとの設定(入力制御・背景色)
        /// </summary>
        /// <param name="rowIndex"></param>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        private void SettingGridRow(int rowIndex)
        {
            # region [グリッド行制御]
            
            Infragistics.Win.UltraWinGrid.UltraGrid grid = uGrid_RedSlip;

            //------------------------------------------------------------------------
            // 倉庫入力可否
            //------------------------------------------------------------------------
            // 返品時在庫登録区分
            switch (_salesTtlSt.RetGoodsStockEtyDiv)
            {
                default:
                // 0:する
                case 0:
                    {
                        if (string.IsNullOrEmpty(grid.Rows[rowIndex].Cells[_detailDataSet.RedSlipDetail.GoodsNoColumn.ColumnName].Value.ToString()))
                        {
                            // 倉庫コード入力不可
                            grid.Rows[rowIndex].Cells[_detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].Activation = Infragistics.Win.UltraWinGrid.Activation.Disabled;
                            grid.Rows[rowIndex].Cells[_detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].Appearance.BackColor = _CellReadOnlyColor;
                        }

                    }
                    break;
                // 1:しない
                case 1:
                    {
                        // 倉庫入力不可
                        grid.Rows[rowIndex].Cells[_detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].Activation = Infragistics.Win.UltraWinGrid.Activation.Disabled;
                        grid.Rows[rowIndex].Cells[_detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].Appearance.BackColor = _CellReadOnlyColor;
                    }
                    break;
            }

            //------------------------------------------------------------------------
            // 原価背景色設定  [仕入返品計上]返品計上グリッドの原価背景色の変更が必要になったらコメントアウト解除
            //------------------------------------------------------------------------
            //int rowNo = (int)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.RowNoColumn.ColumnName];
            //原価
            //SalesUnitCostColorSetting(rowIndex, rowNo);

            # endregion
        }

        /// <summary> [仕入返品計上]返品計上グリッドの原価背景色を変更する場合は呼出し元のコメントアウト解除
        /// 原価背景色設定(返品計上グリッド)
        /// </summary>
        /// <param name="rowIndex">rowIndex</param>
        /// <param name="salesRowNo">salesRowNo</param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void SalesUnitCostColorSetting(int rowIndex, int rowNo)
        {
            bool ret = true;
            //原価
            double stockUnitPrice = 0;
            try
            {
                stockUnitPrice = double.Parse(this.uGrid_RedSlip.Rows[rowIndex].Cells[_detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName].Value.ToString());
            }
            catch
            {
                stockUnitPrice = 0;
            }
            SuppPtrStcDetailDataSet.StcDetailRow row = this._detailDataSet.StcDetail.FindByRowNo(rowNo);
            if ((row != null) && (stockUnitPrice != 0))
            {
                //仕入明細データ（仕入履歴明細データ）.変更前単価 ≠ 画面単価
                if (stockUnitPrice != row.BfStockUnitPriceFl) ret = false;

            }
            if (ret == false)
            {
                //原価背景色設定
                this.uGrid_RedSlip.Rows[rowIndex].Cells[_detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName].Appearance.BackColor = _CellReadOnlyColor2;               
            }
            else
            {
                this.uGrid_RedSlip.Rows[rowIndex].Cells[_detailDataSet.RedSlipDetail.StockUnitPriceColumn.ColumnName].Appearance.BackColor = _CellReadOnlyColor;
            }
        }

        # region 返品計上処理
        /// <summary>
        /// 返品計上処理前後の処理を行います。
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規作成(得意先電子元帳のStartIssueRedSlip()を元に作成)</br>
        /// </remarks>
        private void StartIssueRedSlip()
        {

            // 返品計上ボタン実行不可なら処理しない
            if (_redSlipBottonFlag == false)
            {
                return;
            }

            #region 返品計上前チェック
            //返品計上明細が0行
            if (this._detailDataSet.RedSlipDetail.Count == 0)
            {
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name, MSG_RS_NO_SELECTED_DATA, -1, MessageBoxButtons.OK);
                return;
            }

            //担当者の未入力チェック
            if (string.IsNullOrEmpty(this.tEdit_rs_StockAgentCd.Text.Trim()))
            {
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name, "担当者が未入力です。", -1, MessageBoxButtons.OK);
                this.tEdit_rs_StockAgentCd.Focus();
                return;
            }

            DateGetAcs.CheckDateResult cdResult;
            //返品日付の未入力・不正チェック
            cdResult = _dateGetAcs.CheckDate(ref tDateEdit_rs_RetGdsDate, false);
            if (cdResult == DateGetAcs.CheckDateResult.ErrorOfNoInput)
            {
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name, "返品日付が未入力です。", -1, MessageBoxButtons.OK);
                this.tDateEdit_rs_RetGdsDate.Focus();
                return;
            }
            else if (cdResult == DateGetAcs.CheckDateResult.ErrorOfInvalid)
            {
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name, "返品日付が不正です。", -1, MessageBoxButtons.OK);
                this.tDateEdit_rs_RetGdsDate.Focus();
                return;
            }

            // 返品日付の月締・月次チェック
            string checkRetGdsDateMsg;
            if (CheckRetGdsSlipDate(out checkRetGdsDateMsg) == false)
            {
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name, checkRetGdsDateMsg, -1, MessageBoxButtons.OK);
                this.tDateEdit_rs_RetGdsDate.Focus();
                return;
            }

            // 返品手数料チェック
            if (this.tNedit_rs_FeeAmount01.GetInt() < 0)
            {
                TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_EXCLAMATION, this.Name, "返品手数料は0より大きい金額を入力して下さい。", -1, MessageBoxButtons.OK);
                this.tNedit_rs_FeeAmount01.Focus();
                return;
            }

            #region 明細行チェック
            // 返品計上対象の返品予定データ.明細論理削除区分が1:無効の場合、エラー
            //  削除指定区分「削除分のみ」で検索し、返品計上しようとしたときはエラーにする
            foreach (DataRow dr in this._detailDataSet.RedSlipDetail.Rows)
            {
                int logicalDelFlg = Int32.Parse(dr[this._detailDataSet.RedSlipDetail.DetailLogicalDelCdColumn.ColumnName].ToString());

                if (logicalDelFlg == 1)
                {
                    TMsgDisp.Show(this,
                                  emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                  this.Name,
                                  "削除済み返品予定データの返品計上はできません。",
                                  -1,
                                  MessageBoxButtons.OK);
                    return;
                }
            }
            // 仕入伝票番号、倉庫コード入力状態チェック
            //   返品時在庫登録区分が「する」かつ伝票区分が「返品」の場合、仕入伝票番号と倉庫コードどちらか必須入力
            //   返品時在庫登録区分が「しない」の場合と伝票区分が「仕入」の場合、仕入伝票番号のみ必須入力
            foreach (DataRow dr in this._detailDataSet.RedSlipDetail.Rows)
            {
                string retGdsSlipNum = dr[this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName].ToString();
                string warehouseCode = dr[this._detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].ToString();

                // 返品時在庫登録「する」かつ、画面上の伝票区分「返品」
                if (_salesTtlSt.RetGoodsStockEtyDiv == 0 && (int)this.tComboEditor_rs_SalesSlipCd.Value == 20)
                {
                    if (retGdsSlipNum == string.Empty && warehouseCode == string.Empty)
                    {
                        // 仕入伝票番号、倉庫コード共に未入力の場合は警告を表示して処理終了
                        TMsgDisp.Show(this,
                                      emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                      this.Name,
                                      "返品伝票番号か倉庫を入力してください。",
                                      -1,
                                      MessageBoxButtons.OK);
                        return;
                    }
                }
                else
                {
                    // 返品時在庫登録「しない」または、画面上の伝票区分「仕入」

                    if (retGdsSlipNum == string.Empty)
                    {
                        // 仕入伝票番号が未入力の場合は警告を表示して処理終了
                        TMsgDisp.Show(this,
                                      emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                      this.Name,
                                      "返品伝票番号が未入力です。",
                                      -1,
                                      MessageBoxButtons.OK);
                        return;
                    }
                }
            }

            // 返品数チェック
            string Msg_1 = "以下の行は返品可能数が存在しないため、返品計上出来ません。\r\n選択を解除してから再度実行して下さい。\r\n";
            string addText_1 = string.Empty;
            foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridRedRow in this.uGrid_RedSlip.Rows)
            {
                double acptAnOdrRemainCnt = double.Parse(gridRedRow.Cells[_detailDataSet.RedSlipDetail.ShipmentCntColumn.ColumnName].Value.ToString());
                string supplierSlipNum = String.Format("{0:D9}", gridRedRow.Cells[_detailDataSet.RedSlipDetail.SupplierSlipNoColumn.ColumnName].Value);
                int stockRowNo = Int32.Parse(gridRedRow.Cells[_detailDataSet.RedSlipDetail.StockRowNoColumn.ColumnName].Value.ToString());

                // 返品可能数がゼロの場合
                if (acptAnOdrRemainCnt == 0)
                {
                    string text = "仕入伝票番号SEQ " + supplierSlipNum + " 行 " + stockRowNo;
                    addText_1 += text + "\r\n";
                }
            }
            if (!string.IsNullOrEmpty(addText_1))
            {
                TMsgDisp.Show(
                      this,
                      emErrorLevel.ERR_LEVEL_EXCLAMATION,
                      this.Name,
                      Msg_1 + "\r\n" + addText_1,
                      -1,
                      MessageBoxButtons.OK);
                return;
            }

            // 伝票区分、仕入伝票区分(明細)チェック
            string Msg_3 = "以下の行は返品計上の伝票区分と異なります。\r\n選択を解除してから再度実行して下さい。\r\n";
            string addText_3 = string.Empty;
            // チェック用 画面上の「伝票区分」を対応する仕入伝票区分(明細)に変換
            int supplierSlipCd;
            if((int)this.tComboEditor_rs_SalesSlipCd.Value == 10)
            {
                // 仕入のとき
                supplierSlipCd = 0;
            }
            else
            {
                // 返品のとき
                supplierSlipCd = 1;
            }

            foreach (Infragistics.Win.UltraWinGrid.UltraGridRow gridRedRow in this.uGrid_RedSlip.Rows)
            {
                // チェック用
                int stockSlipCdDtl = Int32.Parse(gridRedRow.Cells[_detailDataSet.RedSlipDetail.StockSlipCdDtlIntColumn.ColumnName].Value.ToString());

                // エラーメッセージ用
                string supplierSlipNum = String.Format("{0:D9}", gridRedRow.Cells[_detailDataSet.RedSlipDetail.SupplierSlipNoColumn.ColumnName].Value);
                int stockRowNo = Int32.Parse(gridRedRow.Cells[_detailDataSet.RedSlipDetail.StockRowNoColumn.ColumnName].Value.ToString());

                // 画面上の「伝票区分」と返品予定データの仕入伝票区分(明細)が異なる場合エラー
                if (supplierSlipCd != stockSlipCdDtl)
                {
                    string text = "仕入伝票番号SEQ " + supplierSlipNum + " 行 " + stockRowNo;
                    addText_3 += text + "\r\n";
                }
            }

            if (!string.IsNullOrEmpty(addText_3))
            {
                TMsgDisp.Show(
                      this,
                      emErrorLevel.ERR_LEVEL_EXCLAMATION,
                      this.Name,
                      Msg_3 + "\r\n" + addText_3,
                      -1,
                      MessageBoxButtons.OK);
                return;
            }
 
             // 返品手数料チェック
            string Msg_4 = "異なる返品伝票番号が入力されている為、返品手数料は入力できません。\r\n";
            // 伝票区分＝返品、返品手数料＞0、返品計上明細が2件以上
            if ( ((int)this.tComboEditor_rs_SalesSlipCd.Value == 20) &&
                 (this.tNedit_rs_FeeAmount01.GetInt() > 0) &&
                 (this._detailDataSet.RedSlipDetail.Count > 1)
               )
            {
                DataRow[] chkDataRow = this._detailDataSet.RedSlipDetail.Select(string.Format("{0} <> '{1}'", this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName, DBNull.Value));
                int i = chkDataRow.Length;
                // 異なる返品伝票番号が入力されている場合、エラー
                foreach (DataRow dr in chkDataRow)
                {
                    string retGdsSlipNum = dr[this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName].ToString();

                    DataRow[] rstDataRow = this._detailDataSet.RedSlipDetail.Select(string.Format("{0} <> '{1}' AND {2} <> '{3}'"
                        , this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName
                        , retGdsSlipNum
                        , this._detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName
                        , DBNull.Value));

                    if (rstDataRow.Length > 0)
                    {
                        TMsgDisp.Show(
                              this,
                              emErrorLevel.ERR_LEVEL_EXCLAMATION,
                              this.Name,
                              Msg_4 + "\r\n",
                              -1,
                              MessageBoxButtons.OK);
                        return;
                    }
                }
            }

            #endregion //明細行チェック
            #endregion //返品計上前チェック

            // 返品計上本処理
            bool retGdsAddupStatus = IssueRedSlip();

            #region 後処理
            // 返品計上本処理が正常終了したら
            if (retGdsAddupStatus)
            {                
                // 返品計上タブ表示クリア
                ClearRedSlipInput();

                // 明細表示タブに移動し、再検索する
                this.uTabControl.SelectedTab = this.uTabControl.Tabs["uTab_SlipDetail"];
                uGrid_Detail.Focus();

                this.tEdit_SectionCodeAllowZero.Text = uiSetControl1.GetZeroPaddedText(tEdit_SectionCodeAllowZero.Name, tEdit_SectionCodeAllowZero.Text);

                if (uGrid_Detail.Rows.Count > 0 && uGrid_Detail.Rows[0].Cells.Count > 0)
                {
                    uGrid_Detail.Rows[0].Cells[0].Activate();
                    uGrid_Detail.Rows[0].Cells[0].Selected = true;
                }

                // 再検索
                this._custPrtPprBackUp = null;
                this._custPrtPprBlnceBackUp = null;

                // 検索実行
                Control errorControl = SearchSlipDetailList();

                // エラーコントロールに移動
                if (errorControl != null)
                {
                    errorControl.Focus();
                }
            }
            #endregion //後処理
        }

        /// <summary>
        /// 返品計上本処理
        /// </summary>
        /// <return>True:正常終了, False:エラー</return>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加(得意先電子元帳のIssueRedSlip()を元に作成)</br>
        /// </remarks>
        private bool IssueRedSlip()
        {
            bool retGdsAddUpSts = true;

            // 返品計上確認メッセージ
            if (TMsgDisp.Show(this, emErrorLevel.ERR_LEVEL_QUESTION, this.Name,
                MSG_CONFIRM_REDSLIP,
                -1, MessageBoxButtons.YesNo) == DialogResult.No)
            {
                return false;
            }

            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            string errorMessage;
            SFCMN00299CA processingDialog = new SFCMN00299CA();
            try
            {
                processingDialog.Title = "更新処理";
                processingDialog.Message = "現在、データ更新中です。";
                processingDialog.DispCancelButton = false;
                processingDialog.Show((Form)this.Parent);

                # region [書き込みパラメータ設定]
                SuppPtrStockDetailAcs.RetGdsAddUpWriteParameter para = new SuppPtrStockDetailAcs.RetGdsAddUpWriteParameter();

                // 企業コード
                para.EnterpriseCode = this._enterpriseCode;
                // 拠点コード
                para.SectionCode = _selectedSectionCd.Trim();
                // 仕入先コード
                para.SupplierCode = _selectedSupplierCd;
                // 伝票区分
                para.SlipCd = (int)tComboEditor_rs_SalesSlipCd.Value;
                // 担当者コード
                para.StockAgentCd = tEdit_rs_StockAgentCd.Text.Trim();
                // 担当者名称
                para.StockAgentNm = uLabel_rs_StockAgentName.Text.Trim();
                // 返品日付
                para.RetGdsDate = tDateEdit_rs_RetGdsDate.GetDateTime();
                // 返品手数料額
                para.FeePriceOfTotal = tNedit_rs_FeeAmount01.GetInt();
                // 備考１
                para.SlipNote = tEdit_rs_SlipNote.Text;
                // 備考２
                para.SlipNote2 = tEdit_rs_SlipNote2.Text;
                // 返品理由
                para.ReturnReason = tEdit_rs_ReturnReason.Text;
                // 返品理由コード
                if (string.IsNullOrEmpty(this._retGoodsReason))
                {
                    // 返品理由ガイドから選択しない場合
                    this._retGoodsReasonDiv = 0;
                }
                else if (!this._retGoodsReason.Equals(tEdit_rs_ReturnReason.Text.Trim()))
                {
                    // ガイド選択後に、返品理由を手入力で変更した場合
                    this._retGoodsReasonDiv = 0;
                }
                para.RetGoodsReasonDiv = this._retGoodsReasonDiv;
                # endregion

                #region 返品計上実行
                // 返品計上明細行データ
                DataView regGdsDetailView = new DataView(this._detailDataSet.RedSlipDetail);
                // 更新部品呼出し
                status = _suppPtrStcDetailAcs.WriteRetGoodsAddUp(
                    para, 
                    regGdsDetailView, 
                    this._detailDataSet.StcList,
                    this._detailDataSet.RetGdsStcList,
                    this._detailDataSet.StcDetail, 
                    this._detailDataSet.RetGdsStcDetail,
                    out errorMessage);
                #endregion
            }
            finally
            {
                processingDialog.Dispose();
            }

            #region 戻り値チェック
            if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                retGdsAddUpSts = false;
                // 登録エラー
                TMsgDisp.Show(
                    this,
                    emErrorLevel.ERR_LEVEL_STOPDISP,
                    this.Name,
                    errorMessage,
                    -1,
                    MessageBoxButtons.OK);
                return retGdsAddUpSts;
            }
            #endregion 戻り値チェック

            // 登録完了
            SaveCompletionDialog dialog = new SaveCompletionDialog();
            dialog.ShowDialog(2);

            return retGdsAddUpSts;
        }

        /// <summary>
        /// 返品日付チェック（仕入）
        /// </summary>
        /// <param name="checkRetGdsDateMessage">エラーメッセージ</param>
        /// <returns>true:正常, false:エラー</returns>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private bool CheckRetGdsSlipDate(out string checkRetGdsDateMessage)
        {
            // 返品計上伝票作成で売上明細データを書き換えるが、月次処理後も返品計上を可能にするため
            // 売上・締次と売上・月次のチェックは行わない。

            checkRetGdsDateMessage = string.Empty;
            DateTime stockDate = this.tDateEdit_rs_RetGdsDate.GetDateTime(); // 画面の返品日付
            int sts = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            // 締め日取得用クラスのキャッシュを一旦クリア
            // 　仕入先電子元帳を起動したまま仕入月次更新、仕入締次更新を行うと、
            //   最新の締日データを取得できない現象を回避するために行う
            _tCalcAcs.ClearCache();

            //--------------------------------------------------
            // 仕入・締次
            //--------------------------------------------------
            // 仕入先コードから、仕入先の前回締日を取得
            DateTime prevTotalDay;
            sts = _tCalcAcs.GetTotalDayPayment(_selectedSupplierCd, out prevTotalDay);
            if (sts == (int)ConstantManagement.DB_Status.ctDB_NORMAL &&
                prevTotalDay != DateTime.MinValue)
            {
                // 仕入締次チェック
                // 仕入日がこれ以前になっている場合は警告を表示して処理終了
                if (stockDate <= prevTotalDay)
                {
                    // 仕入締次エラー
                    checkRetGdsDateMessage = MSG_RS_SALESDATE_DMDSUP_ERROR;
                    return false;
                }
            }

            //--------------------------------------------------
            // 仕入・月次
            //--------------------------------------------------
            // 仕入先コードから、仕入月次更新の前回締日を取得
            sts = _tCalcAcs.GetTotalDayMonthlyAccPay(_selectedSupplierCd, out prevTotalDay);
            if (sts == (int)ConstantManagement.DB_Status.ctDB_NORMAL &&
                prevTotalDay != DateTime.MinValue)
            {
                // 仕入月次チェック
                // 仕入日がこれ以前になっている場合は警告を表示して処理終了
                if (stockDate <= prevTotalDay)
                {
                    // 仕入月次エラー
                    checkRetGdsDateMessage = MSG_RS_SALESDATE_MONTHLYSUP_ERROR;
                    return false;
                }
            }

            // 正常（エラーなし）
            return true;
        }

        #endregion 返品計上処理

        # region [入力可能グリッド制御]
        /// <summary>
        /// グリッドキーマッピング設定処理
        /// </summary>
        /// <param name="grid">設定対象のグリッド</param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void MakeKeyMappingForGrid(Infragistics.Win.UltraWinGrid.UltraGrid grid)
        {
            Infragistics.Win.UltraWinGrid.GridKeyActionMapping enterMap;

            //----- Enterキー
            enterMap = new Infragistics.Win.UltraWinGrid.GridKeyActionMapping(
                Keys.Enter,
                Infragistics.Win.UltraWinGrid.UltraGridAction.NextCellByTab,
                0,
                Infragistics.Win.UltraWinGrid.UltraGridState.Cell,
                Infragistics.Win.SpecialKeys.All,
                0,
                true);
            grid.KeyActionMappings.Add(enterMap);

            //----- Shift + Enterキー
            enterMap = new Infragistics.Win.UltraWinGrid.GridKeyActionMapping(
                Keys.Enter,
                Infragistics.Win.UltraWinGrid.UltraGridAction.PrevCellByTab,
                0,
                Infragistics.Win.UltraWinGrid.UltraGridState.Cell,
                Infragistics.Win.SpecialKeys.AltCtrl,
                Infragistics.Win.SpecialKeys.Shift,
                true);
            grid.KeyActionMappings.Add(enterMap);

            //----- ↑キー
            enterMap = new Infragistics.Win.UltraWinGrid.GridKeyActionMapping(
                Keys.Up,
                Infragistics.Win.UltraWinGrid.UltraGridAction.AboveCell,
                Infragistics.Win.UltraWinGrid.UltraGridState.IsDroppedDown,
                Infragistics.Win.UltraWinGrid.UltraGridState.InEdit,
                Infragistics.Win.SpecialKeys.All,
                0,
                true);
            grid.KeyActionMappings.Add(enterMap);

            //----- ↑キー (最上段のドロップダウンリストでは何もしない。これが無いとリスト項目が変わってしまうので...)
            enterMap = new Infragistics.Win.UltraWinGrid.GridKeyActionMapping(
                Keys.Up,
                Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode,
                Infragistics.Win.UltraWinGrid.UltraGridState.IsDroppedDown,
                Infragistics.Win.UltraWinGrid.UltraGridState.RowFirst | Infragistics.Win.UltraWinGrid.UltraGridState.HasDropdown,
                Infragistics.Win.SpecialKeys.All,
                0,
                true);
            grid.KeyActionMappings.Add(enterMap);

            //----- ↓キー (最下段のドロップダウンリストでは何もしない。これが無いとリスト項目が変わってしまうので...)
            enterMap = new Infragistics.Win.UltraWinGrid.GridKeyActionMapping(
                Keys.Down,
                Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode,
                Infragistics.Win.UltraWinGrid.UltraGridState.IsDroppedDown,
                Infragistics.Win.UltraWinGrid.UltraGridState.RowLast | Infragistics.Win.UltraWinGrid.UltraGridState.HasDropdown,
                Infragistics.Win.SpecialKeys.All,
                0,
                true);
            grid.KeyActionMappings.Add(enterMap);

            //----- ↓キー
            enterMap = new Infragistics.Win.UltraWinGrid.GridKeyActionMapping(
                Keys.Down,
                Infragistics.Win.UltraWinGrid.UltraGridAction.BelowCell,
                Infragistics.Win.UltraWinGrid.UltraGridState.IsDroppedDown,
                Infragistics.Win.UltraWinGrid.UltraGridState.InEdit,
                Infragistics.Win.SpecialKeys.All,
                0,
                true);
            grid.KeyActionMappings.Add(enterMap);

            //----- 前頁キー
            enterMap = new Infragistics.Win.UltraWinGrid.GridKeyActionMapping(
                Keys.Prior,
                Infragistics.Win.UltraWinGrid.UltraGridAction.PageUpCell,
                0,
                Infragistics.Win.UltraWinGrid.UltraGridState.InEdit,
                Infragistics.Win.SpecialKeys.All,
                0,
                true);
            grid.KeyActionMappings.Add(enterMap);

            //----- 次頁キー
            enterMap = new Infragistics.Win.UltraWinGrid.GridKeyActionMapping(
                Keys.Next,
                Infragistics.Win.UltraWinGrid.UltraGridAction.PageDownCell,
                0,
                Infragistics.Win.UltraWinGrid.UltraGridState.InEdit,
                Infragistics.Win.SpecialKeys.All,
                0,
                true);
            grid.KeyActionMappings.Add(enterMap);
        }

        /// <summary>
        /// 数値入力チェック処理
        /// </summary>
        /// <param name="keta">桁数(マイナス符号を含まず)</param>
        /// <param name="priod">小数点以下桁数</param>
        /// <param name="prevVal">現在の文字列</param>
        /// <param name="key">入力されたキー値</param>
        /// <param name="selstart">カーソル位置</param>
        /// <param name="sellength">選択文字長</param>
        /// <param name="minusFlg">マイナス入力可？</param>
        /// <returns>true=入力可,false=入力不可</returns>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private bool KeyPressNumCheck(int keta, int priod, string prevVal, char key, int selstart, int sellength, Boolean minusFlg)
        {
            // 制御キーが押された？
            if (Char.IsControl(key))
            {
                return true;
            }
            // 数値以外は、ＮＧ
            if (!Char.IsDigit(key))
            {
                // 小数点または、マイナス以外
                if ((key != '.') && (key != '-'))
                {
                    return false;
                }
            }

            // キーが押されたと仮定した場合の文字列を生成する。
            string _strResult = "";
            if (sellength > 0)
            {
                _strResult = prevVal.Substring(0, selstart) + prevVal.Substring(selstart + sellength, prevVal.Length - (selstart + sellength));
            }
            else
            {
                _strResult = prevVal;
            }

            // マイナスのチェック
            if (key == '-')
            {
                if ((minusFlg == false) || (selstart > 0) || (_strResult.IndexOf('-') != -1))
                {
                    return false;
                }
            }

            // 小数点のチェック
            if (key == '.')
            {
                if ((priod <= 0) || (_strResult.IndexOf('.') != -1))
                {
                    return false;
                }
            }
            // キーが押された結果の文字列を生成する。
            _strResult = prevVal.Substring(0, selstart)
                + key
                + prevVal.Substring(selstart + sellength, prevVal.Length - (selstart + sellength));

            // 桁数チェック！
            if (_strResult.Length > keta)
            {
                if (_strResult[0] == '-')
                {
                    if (_strResult.Length > (keta + 1))
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }

            // 小数点以下のチェック
            if (priod > 0)
            {
                // 小数点の位置決定
                int _pointPos = _strResult.IndexOf('.');

                // 整数部に入力可能な桁数を決定！
                int _Rketa = (_strResult[0] == '-') ? keta - priod : keta - priod - 1;
                // 整数部の桁数をチェック
                if (_pointPos != -1)
                {
                    if (_pointPos > _Rketa)
                    {
                        return false;
                    }
                }
                else
                {
                    if (_strResult.Length > _Rketa)
                    {
                        return false;
                    }
                }

                // 小数部の桁数をチェック
                if (_pointPos != -1)
                {
                    // 小数部の桁数を計算
                    int _priketa = _strResult.Length - _pointPos - 1;
                    if (priod < _priketa)
                    {
                        return false;
                    }
                }
            }
            return true;
        }
        /// <summary>
        /// 文字列入力チェック処理
        /// </summary>
        /// <param name="keta"></param>
        /// <param name="prevVal"></param>
        /// <param name="key"></param>
        /// <param name="selstart"></param>
        /// <param name="sellength"></param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private bool KeyPressTextCheck(int keta, string prevVal, char key, int selstart, int sellength)
        {
            // 制御キーが押された？
            if (Char.IsControl(key))
            {
                return true;
            }

            // キーが押されたと仮定した場合の文字列を生成する。
            string _strResult = "";
            if (sellength > 0)
            {
                _strResult = prevVal.Substring(0, selstart) + prevVal.Substring(selstart + sellength, prevVal.Length - (selstart + sellength));
            }
            else
            {
                _strResult = prevVal;
            }

            // キーが押された結果の文字列を生成する。
            _strResult = prevVal.Substring(0, selstart)
                + key
                + prevVal.Substring(selstart + sellength, prevVal.Length - (selstart + sellength));

            // 桁数チェック！
            if (_strResult.Length > keta)
            {
                if (_strResult[0] == '-')
                {
                    if (_strResult.Length > (keta + 1))
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            return true;
        }
        # endregion

        #region [返品計上Gridイベント]
        /// <summary>
        /// 返品計上グリッドキープレスイベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void uGrid_RedSlip_KeyPress(object sender, KeyPressEventArgs e)
        {
            Infragistics.Win.UltraWinGrid.UltraGridCell cell = uGrid_RedSlip.ActiveCell;
            if (cell == null) return;

            if (cell.Column.Key == _detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName)
            {
                //----------------------------------------
                // 仕入返品伝票番号
                //----------------------------------------
                if (cell.IsInEditMode)
                {
                    // 共通XMLから情報取得
                    UiSet uiSet;
                    int status = uiSetControl1.ReadUISet(out uiSet, "RetGdsSlipNum");
                    if (status == 0)
                    {
                        if (!KeyPressTextCheck(uiSet.Column, cell.Text, e.KeyChar, cell.SelStart, cell.SelLength))
                        {
                            // イベント処理済みにする
                            e.Handled = true;
                        }
                    }
                    else
                    {
                        // イベント処理済みにする
                        e.Handled = true;
                    }
                }
            }
            else if (cell.Column.Key == _detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName)
            {
                //----------------------------------------
                // 返品数 (8,2)
                //----------------------------------------
                if (cell.IsInEditMode)
                {
                    int rowIndex = cell.Row.Index;
                    double shipmentCnt = (double)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ShipmentCntColumn];

                    if (shipmentCnt < 0)
                    {
                        if (!KeyPressNumCheck(8, 2, cell.Text, e.KeyChar, cell.SelStart, cell.SelLength, true))
                        {
                            // イベント処理済みにする
                            e.Handled = true;
                        }
                    }
                    else
                    {
                        if (!KeyPressNumCheck(8, 2, cell.Text, e.KeyChar, cell.SelStart, cell.SelLength, false))
                        {
                            // イベント処理済みにする
                            e.Handled = true;
                        }
                    }
                }
            }
            else if (cell.Column.Key == _detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName)
            {
                //----------------------------------------
                // 倉庫コード (共通XMLに従う)
                //----------------------------------------
                if (cell.IsInEditMode)
                {
                    // 共通XMLから桁数取得してチェック
                    UiSet uiSet;
                    int status = uiSetControl1.ReadUISet(out uiSet, "tEdit_WarehouseCode");
                    if (status == 0)
                    {
                        if (!KeyPressNumCheck(uiSet.Column, 0, cell.Text, e.KeyChar, cell.SelStart, cell.SelLength, false))
                        {
                            e.Handled = true;
                        }
                    }
                    else
                    {
                        e.Handled = true;
                    }
                }
            }
        }

        /// <summary>
        /// 返品計上グリッドセル更新後イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void uGrid_RedSlip_AfterCellUpdate(object sender, Infragistics.Win.UltraWinGrid.CellEventArgs e)
        {
            if (e.Cell == null) return;

            Infragistics.Win.UltraWinGrid.UltraGrid grid = uGrid_RedSlip;
            Infragistics.Win.UltraWinGrid.UltraGridCell cell = e.Cell;
            int rowIndex = e.Cell.Row.Index;

            # region [セル内容補正]
            // セル内容補正開始　＞＞
            grid.AfterCellUpdate -= uGrid_RedSlip_AfterCellUpdate;
            grid.BeforeCellUpdate -= uGrid_RedSlip_BeforeCellUpdate;

            # region [DBNull時のデフォルト値補正]
            if (e.Cell.Value is DBNull)
            {
                if ((e.Cell.Column.DataType == typeof(Int32)) ||
                    (e.Cell.Column.DataType == typeof(Int64)) ||
                    (e.Cell.Column.DataType == typeof(double)))
                {
                    e.Cell.Value = 0;
                }
                else if (e.Cell.Column.DataType == typeof(string))
                {
                    e.Cell.Value = "";
                }
            }
            # endregion

            # region [コードゼロ詰め対応]
            if (e.Cell.Column.DataType == typeof(string))
            {
                if (e.Cell.Value != null)
                {
                    // セル値更新
                    e.Cell.Value = uiSetControl1.GetZeroPaddedText(e.Cell.Column.Key, e.Cell.Value.ToString());
                }
            }
            # endregion

            // セル内容補正終了　＜＜
            grid.AfterCellUpdate += uGrid_RedSlip_AfterCellUpdate;
            grid.BeforeCellUpdate += uGrid_RedSlip_BeforeCellUpdate;
            # endregion

            # region [倉庫]
            if (cell.Column.Key == _detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName)
            {
                string warehouseCode = e.Cell.Text.Trim();

                if (warehouseCode != string.Empty)
                {
                    // 返品伝票番号が入力されているかチェック
                    if ((string)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.RetGdsSlipNumColumn].ToString().Trim() != string.Empty)
                    {
                        // 返品伝票番号が入力されていれば警告表示
                        TMsgDisp.Show(
                            this,
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            this.Name,
                            MSG_RS_RETGDS_WAREHOUSE_ERROR,
                            -1,
                            MessageBoxButtons.OK);

                        // DataSetの倉庫コードもクリア
                        _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.WarehouseCodeColumn] = string.Empty;
                        _cannotWarehouseCodeOfRedSlipRead = true;

                        return;
                    }
                }

                // 在庫・取寄 変更チェック
                /* TODO[仕入返品予定] 在庫更新か返品伝票作成かで、返品伝票金額の合計値を変える場合はこの処理が必要
                int sign = 0;
                if (_prevWarehouseCodeOfRedSlip != string.Empty && warehouseCode == string.Empty)
                {
                    sign = -1;
                }
                else if (_prevWarehouseCodeOfRedSlip == string.Empty && warehouseCode != string.Empty)
                {
                    sign = 1;
                }
                */

                if (warehouseCode != string.Empty)
                {
                    // 倉庫チェック
                    # region [倉庫チェック]
                    Warehouse warehouseInfo;
                    int status = this._warehouseAcs.Read(out warehouseInfo, this._enterpriseCode, string.Empty, warehouseCode);
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        // 前回入力倉庫コード更新
                        _prevWarehouseCodeOfRedSlip = warehouseCode.Trim();
                        // 名称セット
                        _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.WarehouseNameColumn] = warehouseInfo.WarehouseName;
                    }
                    else
                    {
                        // エラー時
                        TMsgDisp.Show(
                            this,
                            emErrorLevel.ERR_LEVEL_INFO,
                            this.Name,
                            "倉庫コード [" + warehouseCode + "] に該当するデータが存在しません。",
                            -1,
                            MessageBoxButtons.OK);

                        // コードを戻す
                        _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.WarehouseCodeColumn] = _prevWarehouseCodeOfRedSlip;
                        _cannotWarehouseCodeOfRedSlipRead = true;
                    }
                    # endregion

                    // 倉庫OK
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        // 在庫チェック
                        # region [在庫チェック]
                        // 品番
                        string goodsNo = (string)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.GoodsNoColumn];
                        // メーカーコード
                        string strGdsMaker = (string)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.GoodsMakerCdColumn];
                        int goodsMakerCd = 0;
                        int.TryParse(strGdsMaker,out goodsMakerCd);
                        // 返品数
                        double returnCnt = (double)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ReturnCntColumn];

                        string warehouseShelfNo = string.Empty;
                        double returnedAfterCnt = 0;

                        GoodsUnitData goods = null;
                        Stock stock;
                        int gdsStatus = (int)ConstantManagement.DB_Status.ctDB_ERROR;

                        // 品番が空白か、メーカーが０の場合は商品検索をしない
                        if (goodsNo.Trim() != string.Empty && goodsMakerCd != 0)
                        {
                            gdsStatus = _suppPtrStcDetailAcs.ReadGoods(goodsNo, goodsMakerCd, out goods);
                        }

                        if (gdsStatus == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            // 商品:更新
                            if (_suppPtrStcDetailAcs.SelectStock(goods, warehouseCode, out stock) == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                            {
                                // 在庫:更新
                                warehouseShelfNo = stock.WarehouseShelfNo.Trim();
                                returnedAfterCnt = (double)((decimal)stock.ShipmentPosCnt + (decimal)returnCnt);
                            }
                            else
                            {
                                // 在庫:新規
                                warehouseShelfNo = new string('Z', 8);
                                returnedAfterCnt = returnCnt;
                            }
                        }
                        else
                        {
                            // 商品在庫:新規
                            warehouseShelfNo = new string('S', 8);
                            returnedAfterCnt = returnCnt;
                        }
                        # endregion

                        // 在庫情報セット
                        _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ShelfNoColumn] = warehouseShelfNo;
                        _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ReturnedAfterCntColumn] = returnedAfterCnt;
                    }
                }
                else
                {
                    // 在庫情報クリア
                    _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.WarehouseNameColumn] = string.Empty;
                    _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ShelfNoColumn] = string.Empty;
                    _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ReturnedAfterCntColumn] = DBNull.Value;
                }

                //ChangeRedSlipTotalPrice(); TODO[仕入返品予定] 在庫更新になったことで金額に変更がでるならコメントアウト解除
            }
            # endregion

            # region [返品数]
            else if (cell.Column.Key == _detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName)
            {
                // 返品可能数
                double shipmentCnt = (double)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ShipmentCntColumn];
                // 商品番号
                string goodNo = (string)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.GoodsNoColumn];
                // 返品数
                double returnCnt = 0;
                try
                {
                    returnCnt = Double.Parse(e.Cell.Text);
                }
                catch
                {
                }

                // 返品数の入力チェック
                bool returnCntStatus = true;
                if (shipmentCnt < 0)
                {
                    if (returnCnt < shipmentCnt || returnCnt > 0)
                    {
                        returnCntStatus = false;
                    }
                }

                if (returnCnt > shipmentCnt || !returnCntStatus)
                {
                    // エラー時
                    TMsgDisp.Show(
                        this,
                        emErrorLevel.ERR_LEVEL_INFO,
                        this.Name,
                        "返品数が返品可能数を超えています。",
                        -1,
                        MessageBoxButtons.OK);
                    // 入力を戻す
                    _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ReturnCntColumn] = _prevReturnCntOfRedSlip;
                    _cannotReturnCntOfRedSlipInput = true;
                }
                else if (returnCnt == 0)
                {
                    // エラー時
                    TMsgDisp.Show(
                        this,
                        emErrorLevel.ERR_LEVEL_INFO,
                        this.Name,
                        "返品数を入力して下さい。",
                        -1,
                        MessageBoxButtons.OK);
                    // 入力を戻す
                    _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ReturnCntColumn] = _prevReturnCntOfRedSlip;
                    _cannotReturnCntOfRedSlipInput = true;
                }
                else
                {
                    // 返品数のエラーがない場合、返品伝票金額を再計算

                    #region [合計金額]
                    
                    // 金額再計算
                    if ((double)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.StockUnitPriceColumn] == 0) return;

                    // 引数準備
                    int rowNo = (int)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.RowNoColumn];//明細データ取得用
                    int suppSlipNo = (int)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.SupplierSlipNoColumn];//伝票データ取得用
                    //  返品予定データ検索
                    SuppPtrStcDetailDataSet.StcDetailRow detailRow = this._detailDataSet.StcDetail.FindByRowNo(rowNo);
                    SuppPtrStcDetailDataSet.RetGdsStcDetailRow retDetailRow = this._detailDataSet.RetGdsStcDetail.FindByRowNo(rowNo);
                    DataRow[] listDataRow = this._detailDataSet.StcList.Select(string.Format("{0} = {1}", _detailDataSet.StcList.SupplierSlipNoColumn.ColumnName, suppSlipNo));
                    DataRow[] retListDataRow = this._detailDataSet.RetGdsStcList.Select(string.Format("{0} = {1}", _detailDataSet.RetGdsStcList.SupplierSlipNoColumn.ColumnName, suppSlipNo));
                    SuppPtrStcDetailDataSet.StcListRow listRow = (SuppPtrStcDetailDataSet.StcListRow)listDataRow[0];
                    SuppPtrStcDetailDataSet.RetGdsStcListRow retListRow = (SuppPtrStcDetailDataSet.RetGdsStcListRow)retListDataRow[0];

                    // 部品呼出し
                    long salesMoneyDisplay = 0;
                    this._suppPtrStcDetailAcs.CalculationSalesMoney(
                        (SuppPtrStcDetailDataSet.RedSlipDetailRow)_detailDataSet.RedSlipDetail.Rows[rowIndex],
                        listRow,
                        retListRow,
                        detailRow,
                        retDetailRow,
                        out salesMoneyDisplay);

                    // 明細金額保存
                    if (this.redMoney.Count == 0 || !this.redMoney.ContainsKey(rowNo))
                    {
                        this.redMoney.Add(rowNo, salesMoneyDisplay);
                    }
                    else if (this.redMoney.ContainsKey(rowNo))
                    {
                        this.redMoney[rowNo] = salesMoneyDisplay;
                    }

                    // 返品伝票合計金額
                    CountMoney();

                    // 返品伝票合計金額変更時の処理
                    ChangeRedSlipTotalPrice();

                    # endregion

                    // 在庫返品後数を更新（非表示の場合DBNull）
                    # region [在庫返品後数]
                    if (_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ReturnedAfterCntColumn] != DBNull.Value)
                    {
                        double returnedAfterCnt = (double)((decimal)((double)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ReturnedAfterCntColumn])
                                                         - (decimal)(_prevReturnCntOfRedSlip)
                                                         + (decimal)(returnCnt));
                        _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ReturnedAfterCntColumn] = returnedAfterCnt;
                    }
                    # endregion

                    // 前回値更新
                    _prevReturnCntOfRedSlip = returnCnt;
                }
            }
            # endregion

            #region [返品伝票番号]
            if (cell.Column.Key == _detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName)
            {
                if (cell.Text != string.Empty)
                {
                    int salesSlipCd = (int)tComboEditor_rs_SalesSlipCd.Value;
                    if (salesSlipCd == 10)
                    {
                        // 伝票区分が仕入で仕入伝票番号が入力された場合、倉庫情報をクリアする。
                        _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.WarehouseCodeColumn] = string.Empty;
                        _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.WarehouseNameColumn] = string.Empty;
                        _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ShelfNoColumn] = string.Empty;
                        _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ReturnedAfterCntColumn] = DBNull.Value;
                    }

                    // 倉庫コードが入力されているかチェック
                    if ((string)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.WarehouseCodeColumn].ToString().Trim() != string.Empty)
                    {

                        // 倉庫コードが入力されていれば警告表示
                        TMsgDisp.Show(
                            this,
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            this.Name,
                            MSG_RS_RETGDS_WAREHOUSE_ERROR,
                            -1,
                            MessageBoxButtons.OK);


                        // DataSetの仕入伝票番号もクリア
                        _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.RetGdsSlipNumColumn] = string.Empty;
                        _cannotRetGdsSlipNum = true;

                        return;
                    }
                }
            }
            #endregion

            // グリッドセル設定処理
            this.SettingGridRow(rowIndex);

        }

        /// <summary>
        /// 返品計上グリッドアクション実行後イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void uGrid_RedSlip_AfterPerformAction(object sender, Infragistics.Win.UltraWinGrid.AfterUltraGridPerformActionEventArgs e)
        {
            Infragistics.Win.UltraWinGrid.UltraGrid grid = (sender as Infragistics.Win.UltraWinGrid.UltraGrid);

            switch (e.UltraGridAction)
            {
                case Infragistics.Win.UltraWinGrid.UltraGridAction.ActivateCell:
                case Infragistics.Win.UltraWinGrid.UltraGridAction.AboveCell:
                case Infragistics.Win.UltraWinGrid.UltraGridAction.BelowCell:
                case Infragistics.Win.UltraWinGrid.UltraGridAction.PrevCell:
                case Infragistics.Win.UltraWinGrid.UltraGridAction.NextCell:
                case Infragistics.Win.UltraWinGrid.UltraGridAction.PageUpCell:
                case Infragistics.Win.UltraWinGrid.UltraGridAction.PageDownCell:

                    // アクティブなセルがあるか？または編集可能セルか？
                    if ((grid.ActiveCell != null) && (grid.ActiveCell.Column.CellActivation == Infragistics.Win.UltraWinGrid.Activation.AllowEdit) && (grid.ActiveCell.Activation == Infragistics.Win.UltraWinGrid.Activation.AllowEdit))
                    {
                        // アクティブセルのスタイルを取得
                        switch (grid.ActiveCell.StyleResolved)
                        {
                            // エディット系スタイル
                            case Infragistics.Win.UltraWinGrid.ColumnStyle.Default:
                            case Infragistics.Win.UltraWinGrid.ColumnStyle.Edit:
                            case Infragistics.Win.UltraWinGrid.ColumnStyle.EditButton:
                                {
                                    // 編集モードにある？
                                    if (grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode))
                                    {
                                        if (!(grid.ActiveCell.Value is System.DBNull))
                                        {
                                            // 全選択状態にする。
                                            grid.ActiveCell.SelStart = 0;
                                            grid.ActiveCell.SelLength = grid.ActiveCell.Text.Length;
                                        }
                                    }
                                    break;
                                }
                            default:
                                {
                                    // エディット系以外のスタイルであれば、編集状態にする。
                                    grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                                    break;
                                }
                        }
                    }
                    break;
            }
        }

        /// <summary>
        /// 返品計上グリッド行アクティブ化後イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void uGrid_RedSlip_AfterRowActivate(object sender, EventArgs e)
        {
            Infragistics.Win.UltraWinGrid.UltraGrid grid = (sender as Infragistics.Win.UltraWinGrid.UltraGrid);

            if (grid.ActiveRow == null) return;
            Infragistics.Win.UltraWinGrid.UltraGridRow row = grid.ActiveRow;

            // グリッドセル設定処理
            this.SettingGridRow(row.Index);
        }

        /// <summary>
        /// 返品計上グリッドセル更新前イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void uGrid_RedSlip_BeforeCellUpdate(object sender, Infragistics.Win.UltraWinGrid.BeforeCellUpdateEventArgs e)
        {

            Infragistics.Win.UltraWinGrid.UltraGrid grid = this.uGrid_RedSlip;
            int rowIndex = e.Cell.Row.Index;

            # region [倉庫]
            if (e.Cell.Column.Key == _detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName)
            {
                if (e.Cell.Value != DBNull.Value)
                {
                    _prevWarehouseCodeOfRedSlip = (string)e.Cell.Value;
                }
                else
                {
                    _prevWarehouseCodeOfRedSlip = string.Empty;
                }
            }
            # endregion

            # region [返品数]
            else if (e.Cell.Column.Key == _detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName)
            {
                if (e.Cell.Value != DBNull.Value)
                {
                    _prevReturnCntOfRedSlip = (double)e.Cell.Value;
                }
                else
                {
                    _prevReturnCntOfRedSlip = 0;
                }
            }
            # endregion
        }

        /// <summary>
        /// 返品計上グリッドセルデータエラーイベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void uGrid_RedSlip_CellDataError(object sender, Infragistics.Win.UltraWinGrid.CellDataErrorEventArgs e)
        {
            Infragistics.Win.UltraWinGrid.UltraGrid grid = (sender as Infragistics.Win.UltraWinGrid.UltraGrid);

            if (grid.ActiveCell != null)
            {
                // 数値項目の場合
                if ((grid.ActiveCell.Column.DataType == typeof(Int32)) ||
                    (grid.ActiveCell.Column.DataType == typeof(Int64)) ||
                    (grid.ActiveCell.Column.DataType == typeof(double)))
                {
                    Infragistics.Win.EmbeddableEditorBase editorBase = grid.ActiveCell.EditorResolved;

                    // 未入力は0にする
                    if (editorBase.CurrentEditText.Trim() == "")
                    {
                        editorBase.Value = 0;				// 0をセット
                        grid.ActiveCell.Value = 0;
                    }
                    // 数値項目に「-」or「.」だけしか入ってなかったら駄目です
                    else if ((editorBase.CurrentEditText.Trim() == "-") ||
                        (editorBase.CurrentEditText.Trim() == ".") ||
                        (editorBase.CurrentEditText.Trim() == "-."))
                    {
                        editorBase.Value = 0;				// 0をセット
                        grid.ActiveCell.Value = 0;
                    }
                    // 通常入力
                    else
                    {
                        try
                        {
                            editorBase.Value = Convert.ChangeType(editorBase.CurrentEditText.Trim(), grid.ActiveCell.Column.DataType);
                            grid.ActiveCell.Value = editorBase.Value;
                        }
                        catch
                        {
                            editorBase.Value = 0;
                            grid.ActiveCell.Value = 0;
                        }
                    }
                    e.RaiseErrorEvent = false;			// エラーイベントは発生させない
                    e.RestoreOriginalValue = false;		// セルの値を元に戻さない
                    e.StayInEditMode = false;			// 編集モードは抜ける
                }
            }
        }

        /// <summary>
        /// 赤伝グリッド進入イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void uGrid_RedSlip_Enter(object sender, EventArgs e)
        {

            if (_searchFlg)
            {
                _searchFlg = false;
                return;
            }

            try
            {
                // 描画停止＞＞
                this.SuspendLayout();

                Infragistics.Win.UltraWinGrid.UltraGrid grid = (sender as Infragistics.Win.UltraWinGrid.UltraGrid);

                if (grid.ActiveCell == null)
                {
                    if (!grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ActivateCell) || (grid.ActiveCell == null))
                    {
                        if (grid.Rows.Count > 0)
                        {
                            grid.ActiveCell = grid.Rows[0].Cells[0];

                            // 次入力可能セル移動処理
                            this.MoveNextAllowEditCell(true);
                        }
                    }
                }

                if (grid.ActiveCell != null)
                {
                    if ((!grid.ActiveCell.IsInEditMode) && (grid.ActiveCell.Activation == Infragistics.Win.UltraWinGrid.Activation.AllowEdit) && (grid.ActiveCell.Column.CellActivation == Infragistics.Win.UltraWinGrid.Activation.AllowEdit))
                    {
                        grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                    }
                    else
                    {
                        // 次入力可能セル移動処理
                        this.MoveNextAllowEditCell(true);
                    }
                }
            }
            finally
            {
                // 描画再開＜＜
                this.ResumeLayout();
            }
        }

        /// <summary>
        /// 返品計上グリッドキーダウンイベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void uGrid_RedSlip_KeyDown(object sender, KeyEventArgs e)
        {
            Infragistics.Win.UltraWinGrid.UltraGrid grid = (sender as Infragistics.Win.UltraWinGrid.UltraGrid);

            if (grid.ActiveCell != null)
            {
                Infragistics.Win.UltraWinGrid.UltraGridCell cell = grid.ActiveCell;

                if (e.KeyCode == Keys.Escape)
                {

                }

                if (e.Shift)
                {
                    switch (e.KeyCode)
                    {
                        case Keys.Down:
                            {
                                grid.ActiveCell = null;
                                grid.ActiveRow = cell.Row;
                                grid.Selected.Rows.Clear();
                                grid.Selected.Rows.Add(cell.Row);
                                break;
                            }
                        case Keys.Up:
                            {
                                grid.ActiveCell = null;
                                grid.ActiveRow = cell.Row;
                                grid.Selected.Rows.Clear();
                                grid.Selected.Rows.Add(cell.Row);
                                break;
                            }
                        case Keys.Home:
                            {
                                if ((grid.ActiveCell != null) && (grid.ActiveCell.IsInEditMode))
                                {
                                    // 編集モードの場合はなにもしない
                                }
                                else
                                {
                                    grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.FirstCellInGrid);
                                    this.MoveNextAllowEditCell(true);
                                }
                                break;
                            }
                        case Keys.End:
                            {
                                if ((grid.ActiveCell != null) && (grid.ActiveCell.IsInEditMode))
                                {
                                    // 編集モードの場合はなにもしない
                                }
                                else
                                {
                                    grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.LastCellInGrid);
                                }
                                break;
                            }
                    }
                }
                else if (e.Alt)
                {
                    switch (e.KeyCode)
                    {
                        case Keys.Down:
                            {
                                break;
                            }
                    }
                }
                else
                {
                    // 編集中であった場合
                    if (cell.IsInEditMode)
                    {
                        // セルのスタイルにて判定
                        switch (grid.ActiveCell.StyleResolved)
                        {
                            // テキストボックス・テキストボックス(ボタン付)
                            case Infragistics.Win.UltraWinGrid.ColumnStyle.Edit:
                            case Infragistics.Win.UltraWinGrid.ColumnStyle.EditButton:
                            // 日付
                            case Infragistics.Win.UltraWinGrid.ColumnStyle.Date:
                                {
                                    switch (e.KeyData)
                                    {
                                        // ←キー
                                        case Keys.Left:
                                            if (grid.ActiveCell.SelStart == 0)
                                            {
                                                grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.PrevCellByTab);
                                                e.Handled = true;
                                            }
                                            break;
                                        // →キー
                                        case Keys.Right:
                                            if (grid.ActiveCell.SelStart >= grid.ActiveCell.Text.Length)
                                            {
                                                grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.NextCellByTab);
                                                e.Handled = true;
                                            }
                                            break;
                                    }
                                    break;
                                }

                            // 上記以外のスタイル
                            default:
                                {
                                    switch (e.KeyData)
                                    {
                                        // ←キー
                                        case Keys.Left:
                                            {
                                                grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.PrevCellByTab);
                                                e.Handled = true;
                                            }
                                            break;
                                        // →キー
                                        case Keys.Right:
                                            {
                                                grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.NextCellByTab);
                                                e.Handled = true;
                                            }
                                            break;
                                    }
                                    break;
                                }
                        }
                    }

                    switch (e.KeyCode)
                    {
                        case Keys.Home:
                            {
                                if ((grid.ActiveCell != null) && (grid.ActiveCell.IsInEditMode))
                                {
                                    // 編集モードの場合はなにもしない
                                }
                                else
                                {
                                    grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.FirstCellInRow);
                                    grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                                    e.Handled = true;
                                }
                                break;
                            }
                        case Keys.End:
                            {
                                // 編集モードの場合はなにもしない
                                if ((grid.ActiveCell != null) && (grid.ActiveCell.IsInEditMode))
                                {
                                    //
                                }
                                else
                                {
                                    grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.LastCellInRow);
                                    grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                                    e.Handled = true;
                                }
                                break;
                            }
                        case Keys.Up:
                            {
                                if ((grid.ActiveCell != null) && (!grid.ActiveCell.DroppedDown))
                                {
                                    if (grid.ActiveCell.Row.Index == 0)
                                    {
                                        this.GridKeyDownTopRowOfRedSlipGrid();
                                        e.Handled = true;
                                    }
                                }

                                break;
                            }
                        case Keys.Down:
                            {
                                if (grid.ActiveCell.Row.Index == grid.Rows.Count - 1)
                                {
                                    if (e.KeyCode == Keys.Down)
                                    {
                                        this.GridKeyDownButtomRowOfRedSlipGrid();
                                        e.Handled = true;
                                    }
                                }

                                break;
                            }
                    }
                }
            }
            else if (grid.ActiveRow != null)
            {
                Infragistics.Win.UltraWinGrid.UltraGridRow row = grid.ActiveRow;

                if (grid.ActiveRow.Index == 0)
                {
                    if (e.KeyCode == Keys.Up)
                    {
                        this.GridKeyDownTopRowOfRedSlipGrid();
                        e.Handled = true;
                    }
                }
                else if (grid.ActiveRow.Index == grid.Rows.Count - 1)
                {
                    if (e.KeyCode == Keys.Down)
                    {
                        this.GridKeyDownButtomRowOfRedSlipGrid();
                        e.Handled = true;
                    }
                }
            }
        }

        /// <summary>
        /// 返品計上グリッド脱出イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void uGrid_RedSlip_Leave(object sender, EventArgs e)
        {
            Infragistics.Win.UltraWinGrid.UltraGrid grid = (sender as Infragistics.Win.UltraWinGrid.UltraGrid);

            if (_prevCellInRedSlip != null)
            {
                if (_prevCellInRedSlip.Column.DataType == typeof(string) &&
                    _prevCellInRedSlip.StyleResolved == Infragistics.Win.UltraWinGrid.ColumnStyle.Edit)
                {
                    // ゼロ詰め実行
                    if (this._detailDataSet != null && _detailDataSet.RedSlipDetail.Rows.Count > 0)
                    {
                        _detailDataSet.RedSlipDetail.Rows[_prevCellInRedSlip.Row.Index][_prevCellInRedSlip.Column.Key] = uiSetControl1.GetZeroPaddedText(_prevCellInRedSlip.Column.Key, (string)_prevCellInRedSlip.Text);
                    }
                }
            }

            if (grid.ActiveCell != null)
            {
                // 返品仕入伝票番号と倉庫コードが同時入力されていないかチェックする
                int rowIndex = grid.ActiveCell.Row.Index;
                if (grid.Rows[rowIndex].Cells[_detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName].Text.ToString().Trim() != string.Empty &&
                   grid.Rows[rowIndex].Cells[_detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].Text.ToString().Trim() != string.Empty)
                {

                    int salesSlipCd = (int)tComboEditor_rs_SalesSlipCd.Value;
                    if (salesSlipCd == 10)
                    {
                        // 伝票区分が仕入で仕入伝票番号が入力された場合、倉庫情報をクリアする。
                        _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.WarehouseCodeColumn] = string.Empty;
                        _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.WarehouseNameColumn] = string.Empty;
                        _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ShelfNoColumn] = string.Empty;
                        _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ReturnedAfterCntColumn] = DBNull.Value;

                        // グリッドセル設定処理
                        this.SettingGridRow(rowIndex);

                        return;
                    }
                    else
                    {
                        // 伝票区分が返品のとき
                        bool errFlg = false;
                        if (grid.ActiveCell.Column.Key == _detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName)
                        {
                            // 仕入伝票番号
                            // 倉庫コードが入力されているかチェック
                            if ((string)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.WarehouseCodeColumn].ToString().Trim() != string.Empty)
                            {
                                errFlg = true;
                                // DataSetの仕入伝票番号クリア
                                _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.RetGdsSlipNumColumn] = string.Empty;
                                // グリッド上の仕入伝票番号クリア
                                grid.Rows[rowIndex].Cells[_detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName].Value = string.Empty;
                            }
                        }
                        else if (grid.ActiveCell.Column.Key == _detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName)
                        {
                            // 倉庫
                            // 仕入伝票番号が入力されているかチェック
                            if (((string)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.WarehouseCodeColumn].ToString().Trim() != string.Empty) &&
                                ((string)_detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.RetGdsSlipNumColumn].ToString().Trim() != string.Empty))
                            {
                                errFlg = true;
                                // DataSetの倉庫コードクリア
                                _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.WarehouseCodeColumn] = string.Empty;
                                _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.WarehouseNameColumn] = string.Empty;
                                _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ShelfNoColumn] = string.Empty;
                                _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ReturnedAfterCntColumn] = DBNull.Value;
                                // グリッド上の倉庫コードクリア
                                grid.Rows[rowIndex].Cells[_detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].Value = string.Empty;
                            }
                        }
                        if (errFlg)
                        {
                            // 警告表示
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                this.Name,
                                MSG_RS_RETGDS_WAREHOUSE_ERROR,
                                -1,
                                MessageBoxButtons.OK);

                            return;
                        }
                    }
                }

                // 倉庫コードが未入力状態なら、倉庫コード、倉庫名、棚番、返品後数をクリア
                // 　本来はAfterCellUpdateイベントで行っている処理だが、倉庫コードをクリアして下矢印キー（↓）を押下すると、
                // 　AfterCellUpdateイベントが起きないため、このタイミングで処理を行う
                if (grid.Rows[rowIndex].Cells[_detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName].Text.ToString().Trim() == string.Empty)
                {
                    _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.WarehouseCodeColumn] = string.Empty;
                    _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.WarehouseNameColumn] = string.Empty;
                    _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ShelfNoColumn] = string.Empty;
                    _detailDataSet.RedSlipDetail.Rows[rowIndex][_detailDataSet.RedSlipDetail.ReturnedAfterCntColumn] = DBNull.Value;
                }

                // さらにグリッド行の設定処理を実施（「仕入日」の入力可・不可状態の変更があるため）
                this.SettingGridRow(rowIndex);
            }

            // 脱出後にフォーカス解除する
            if (grid.ActiveCell != null)
            {
                grid.ActiveCell.Selected = false;
                grid.ActiveCell = null;
                grid.Invalidate();
            }
        }

        /// <summary>
        /// 返品計上グリッドセルアクティブ化前処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void uGrid_RedSlip_BeforeCellActivate(object sender, Infragistics.Win.UltraWinGrid.CancelableCellEventArgs e)
        {
            Infragistics.Win.UltraWinGrid.UltraGrid grid = this.uGrid_RedSlip;

            // IMEモード設定
            grid.ImeMode = uiSetControl1.GetSettingImeMode(e.Cell.Column.Key);

            // ゼロ詰め解除
            if (e.Cell.Column.DataType == typeof(string) &&
                e.Cell.StyleResolved == Infragistics.Win.UltraWinGrid.ColumnStyle.Edit)
            {
                if (e.Cell.Value != null)
                {
                    _detailDataSet.RedSlipDetail.Rows[e.Cell.Row.Index][e.Cell.Column.Key] = uiSetControl1.GetZeroPadCanceledText(e.Cell.Column.Key, (string)e.Cell.Text);
                }
            }
            // uGrid_RedSlip_BeforeCellDeactivateで使用する為に退避
            _prevCellInRedSlip = e.Cell;
        }

        /// <summary>
        /// 返品計上グリッドセルアクティブ解除前処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void uGrid_RedSlip_BeforeCellDeactivate(object sender, CancelEventArgs e)
        {
            // uGrid_RedSlip_BeforeCellActivateで退避しておいたセル
            if (_prevCellInRedSlip != null)
            {
                if (_prevCellInRedSlip.Column.DataType == typeof(string) &&
                    _prevCellInRedSlip.StyleResolved == Infragistics.Win.UltraWinGrid.ColumnStyle.Edit)
                {
                    // ゼロ詰め実行
                    _detailDataSet.RedSlipDetail.Rows[_prevCellInRedSlip.Row.Index][_prevCellInRedSlip.Column.Key] = uiSetControl1.GetZeroPaddedText(_prevCellInRedSlip.Column.Key, (string)_prevCellInRedSlip.Text);
                }
            }
        }

        #endregion [返品計上Gridイベント]

        #endregion [返品計上入力関連]

        // ----------ADD 2013/01/21-----------<<<<<
        
		// ----------ADD 2013/01/21 [仕入返品計上]----------->>>>>
        # region 担当者
        /// <summary>
        /// 担当者ガイドボタン
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <br>Update Note: 2013/01/21 FSI冨樫 紗由里 仕入予定返品機能追加対応</br>
        private void uButton_rs_StockAgent_Click(object sender, EventArgs e)
        {
            // ガイド表示
            Employee employeeInfo;
            int status;
            status = this._employeeAcs.ExecuteGuid(this._enterpriseCode, true, out employeeInfo);

            // ステータスが正常の場合
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                // コードと名称をセット
                this.tEdit_rs_StockAgentCd.Text = employeeInfo.EmployeeCode.TrimEnd();
                this.uLabel_rs_StockAgentName.Text = employeeInfo.Name.TrimEnd();
            }
        }
        # endregion        

        #region 備考ガイドボタン

        /// <summary>
        /// 備考ガイドボタンクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <br>Update Note: 2013/01/21 FSI冨樫 紗由里 仕入予定返品機能追加対応</br>
        private void uButton_rs_SlipNote_Click(object sender, EventArgs e)
        {
            NoteGuidAcs noteGuideAcs = new NoteGuidAcs();
            NoteGuidBd noteGuideBd;

            int status = noteGuideAcs.ExecuteGuide(out noteGuideBd, this._enterpriseCode, CT_DIVCODE_NoteGuideDivCd_1);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                this.tNedit_SlipNoteCode.SetInt(noteGuideBd.NoteGuideCode);                
                this.tEdit_rs_SlipNote.Text = noteGuideBd.NoteGuideName;

                this._prevInputValue.SlipNoteName1 = noteGuideBd.NoteGuideName;                
                this._prevInputValue.SlipNoteCd1 = noteGuideBd.NoteGuideCode;

                // 次フォーカス
                if (this.tNedit_SlipNote2Code.Visible)
                {
                    this.tNedit_SlipNote2Code.Focus();
                }                
            }
        }
        #endregion // 備考ガイドボタン

        #region 備考2ガイドボタン

        /// <summary>
        /// 備考2ガイドボタンクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <br>Update Note: 2013/01/21 FSI冨樫 紗由里 仕入予定返品機能追加対応</br>
        private void uButton_rs_SlipNote2_Click(object sender, EventArgs e)
        {
            NoteGuidAcs noteGuideAcs = new NoteGuidAcs();
            NoteGuidBd noteGuideBd;

            int status = noteGuideAcs.ExecuteGuide(out noteGuideBd, this._enterpriseCode, CT_DIVCODE_NoteGuideDivCd_2);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                this.tNedit_SlipNote2Code.SetInt(noteGuideBd.NoteGuideCode);
                this.tEdit_rs_SlipNote2.Text = noteGuideBd.NoteGuideName;
                
                this._prevInputValue.SlipNoteName2 = noteGuideBd.NoteGuideName;
                this._prevInputValue.SlipNoteCd2 = noteGuideBd.NoteGuideCode;
                
                // 次フォーカス
                if (this.tNedit_RetGoodsReason.Visible)
                {
                    this.tNedit_RetGoodsReason.Focus();
                }             
            }
        }

        #endregion // 備考2ガイドボタン

        #region 返品理由ガイドボタン

        /// <summary>
        /// 返品理由ガイドボタン
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note: 2013/01/21 FSI冨樫 紗由里 仕入予定返品機能追加対応</br>
        /// </remarks>
        private void uButton_rs_ReturnReason_Click(object sender, EventArgs e)
        {
            UserGdHd userGuideHeaderInfo;
            UserGdBd userGuideBodyInfo;
            int status = this._userGuideAcs.ExecuteGuid(this._enterpriseCode, out userGuideHeaderInfo, out userGuideBodyInfo, CT_DIVCODE_USERGUIDEDIVCD_RETGOODSREASON);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                this.tEdit_rs_ReturnReason.Text = userGuideBodyInfo.GuideName;
                this._retGoodsReasonDiv = userGuideBodyInfo.GuideCode;
                this._retGoodsReason = userGuideBodyInfo.GuideName.Trim();                
                this.tNedit_RetGoodsReason.SetInt(userGuideBodyInfo.GuideCode);

                this._prevInputValue.RetGoodsReasonCd = userGuideBodyInfo.GuideCode;
                this._prevInputValue.RetGoodsReasonName = userGuideBodyInfo.GuideName.Trim();                
            }
        }
        #endregion // 返品理由ガイドボタン

        /// <summary>
        /// Returnキーダウン処理
        /// </summary>
        /// <returns>true:セル移動完了 false:セル移動失敗</returns>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private bool ReturnKeyDownOfRedSlipGrid()
        {
            Infragistics.Win.UltraWinGrid.UltraGrid grid = uGrid_RedSlip;

            if (grid.ActiveCell == null) return false;
            Infragistics.Win.UltraWinGrid.UltraGridCell cell = grid.ActiveCell;
            int rowIndex = cell.Row.Index;

            grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
            grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);

            grid.BeginUpdate();

            // グリッドセル設定処理
            this.SettingGridRow(rowIndex);

            try
            {
                bool canMove = true;

                // 倉庫
                if (cell.Column.Key == _detailDataSet.RedSlipDetail.WarehouseCodeColumn.ColumnName)
                {
                    if (_cannotWarehouseCodeOfRedSlipRead)
                    {
                        _cannotWarehouseCodeOfRedSlipRead = false;
                    }
                    else
                    {
                        // 次入力可能セル移動処理
                        canMove = this.MoveNextAllowEditCell(false);
                    }
                }
                // 返品数
                else if (cell.Column.Key == _detailDataSet.RedSlipDetail.ReturnCntColumn.ColumnName)
                {
                    if (_cannotReturnCntOfRedSlipInput)
                    {
                        _cannotReturnCntOfRedSlipInput = false;
                    }
                    else
                    {
                        // 次入力可能セル移動処理
                        canMove = this.MoveNextAllowEditCell(false);
                    }
                }
                // 返品伝票番号
                else if (cell.Column.Key == _detailDataSet.RedSlipDetail.RetGdsSlipNumColumn.ColumnName)
                {
                    if (_cannotRetGdsSlipNum)
                    {
                        _cannotRetGdsSlipNum = false;
                    }
                    else
                    {
                        // 次入力可能セル移動処理
                        canMove = this.MoveNextAllowEditCell(false);
                    }
                }                
                else
                {
                    // 次入力可能セル移動処理
                    canMove = this.MoveNextAllowEditCell(false);
                }

                return canMove;
            }
            finally
            {
                grid.EndUpdate();
            }
        }
        /// <summary>
        /// 次入力可能セル移動処理
        /// </summary>
        /// <param name="currentCheck">true:ActiveCellが入力可能の場合はNextに移動させない false:ActiveCellに関係なくNextに移動させる</param>
        /// <returns>true:セル移動完了 false:セル移動失敗</returns>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private bool MoveNextAllowEditCell(bool activeCellCheck)
        {
            Infragistics.Win.UltraWinGrid.UltraGrid grid = uGrid_RedSlip;

            grid.SuspendLayout();
            bool moved = false;
            bool performActionResult = false;

            if ((activeCellCheck) && (grid.ActiveCell != null))
            {
                if ((!grid.ActiveCell.Column.Hidden) &&
                    (grid.ActiveCell.Activation == Infragistics.Win.UltraWinGrid.Activation.AllowEdit) &&
                    (grid.ActiveCell.Column.CellActivation == Infragistics.Win.UltraWinGrid.Activation.AllowEdit))
                {
                    moved = true;
                }
            }

            while (!moved)
            {
                performActionResult = grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.NextCell);

                if (performActionResult)
                {
                    if ((grid.ActiveCell.Activation == Infragistics.Win.UltraWinGrid.Activation.AllowEdit) &&
                        (grid.ActiveCell.Column.CellActivation == Infragistics.Win.UltraWinGrid.Activation.AllowEdit))
                    {
                        moved = true;
                    }
                    else
                    {
                        moved = false;
                    }
                }
                else
                {
                    break;
                }
            }

            if (moved)
            {
                grid.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
            }

            grid.ResumeLayout();
            return performActionResult;
        }

        /// <summary>
        /// グリッド最上行からの↑移動
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void GridKeyDownTopRowOfRedSlipGrid()
        {
            // 返品計上伝票区分
            tComboEditor_rs_SalesSlipCd.Focus();
        }

        /// <summary>
        /// グリッド最下行からの↓移動
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private void GridKeyDownButtomRowOfRedSlipGrid()
        {
            // 次項目
            this.GetRedSlipGridNextControl().Focus();
        }

        /// <summary>
        /// 赤伝グリッドの次フォーカスコントロール取得
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 新規追加</br>
        /// </remarks>
        private Control GetRedSlipGridNextControl()
        {
            if (tNedit_rs_FeePercent01.Enabled)
            {
                // 返品手数料率
                return tNedit_rs_FeePercent01;
            }
            else
            {
                // 備考１
                return tNedit_SlipNoteCode;
            }
        }

        /// <summary>
        /// 伝票区分変更時処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note : 2013/01/21 FSI冨樫 紗由里</br>
        /// <br>              [仕入返品計上] 伝票区分変更時処理の追加</br>
        /// </remarks>
        private void tComboEditor_rs_SalesSlipCd_SelectionChangeCommitted(object sender, EventArgs e)
        {
            SettingRedSlipFormalBySalesSlipCd();
        }
		// ----------ADD 2013/01/21 [仕入返品計上]-----------<<<<<

    }
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/02/20 ADD
    # region [グリッドカラムポジションFix制御クラス]
    /// <summary>
    /// グリッドカラムポジションFix制御クラス
    /// </summary>
    internal class GridColPosFixController
    {
        private Infragistics.Win.UltraWinGrid.UltraGrid _targetGrid;
        private Dictionary<string, int> _fixPosDic;
        private Dictionary<string, bool> _fixDic;

        # region [プロパティ]
        /// <summary>
        /// 対象グリッド
        /// </summary>
        public Infragistics.Win.UltraWinGrid.UltraGrid TargetGrid
        {
            get { return _targetGrid; }
            set
            {
                // 対象グリッドが既に設定済みならばイベントハンドラの登録を削除する
                if ( _targetGrid != null )
                {
                    _targetGrid.BeforeColPosChanged -= Grid_BeforeColPosChanged;
                    _targetGrid.AfterColPosChanged -= Grid_AfterColPosChanged;
                }

                // グリッド
                _targetGrid = value;

                // グリッドイベント
                _targetGrid.BeforeColPosChanged += Grid_BeforeColPosChanged;
                _targetGrid.AfterColPosChanged += Grid_AfterColPosChanged;

                // 内部使用するフィールド初期化
                _fixPosDic = new Dictionary<string, int>();
                _fixDic = new Dictionary<string, bool>();
            }
        }
        # endregion

        # region [コンストラクタ]
        /// <summary>
        /// デフォルトコンストラクタ
        /// </summary>
        public GridColPosFixController()
        {
        }
        /// <summary>
        /// コンストラクタ
        /// </summary>
        public GridColPosFixController( Infragistics.Win.UltraWinGrid.UltraGrid targetGrid )
            : this()
        {
            this.TargetGrid = targetGrid;
        }
        # endregion

        # region [対象のグリッドに追加するイベント処理]
        /// <summary>
        /// カラムポジション変更前イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Grid_BeforeColPosChanged( object sender, Infragistics.Win.UltraWinGrid.BeforeColPosChangedEventArgs e )
        {
            // Moved以外は無視する
            if ( e.PosChanged != Infragistics.Win.UltraWinGrid.PosChanged.Moved ) return;

            if ( _fixDic.ContainsKey( e.ColumnHeaders[0].Column.Key ) )
            {
                if ( _fixDic[e.ColumnHeaders[0].Column.Key] != e.ColumnHeaders[0].Fixed )
                {
                    if ( e.ColumnHeaders[0].Fixed == true )
                    {
                        int fixedColCount = 0;
                        foreach ( Infragistics.Win.UltraWinGrid.UltraGridColumn col in _targetGrid.DisplayLayout.Bands[0].Columns )
                        {
                            if ( !col.Hidden && col.Header.Fixed ) fixedColCount++;
                        }

                        // 変更前のポジションを退避する(fixedになっているカラム数は除く)
                        _fixPosDic[e.ColumnHeaders[0].Column.Key] = e.ColumnHeaders[0].VisiblePosition - fixedColCount;
                    }
                }
            }
            else
            {
                int fixedColCount = 0;
                foreach ( Infragistics.Win.UltraWinGrid.UltraGridColumn col in _targetGrid.DisplayLayout.Bands[0].Columns )
                {
                    if ( !col.Hidden && col.Header.Fixed ) fixedColCount++;
                }

                // 追加して次回以降の変更で処理
                _fixDic.Add( e.ColumnHeaders[0].Column.Key, false );
                _fixPosDic.Add( e.ColumnHeaders[0].Column.Key, e.ColumnHeaders[0].VisiblePosition - fixedColCount );
            }
        }
        /// <summary>
        /// カラムポジション変更後イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Grid_AfterColPosChanged( object sender, Infragistics.Win.UltraWinGrid.AfterColPosChangedEventArgs e )
        {
            if ( e.PosChanged != Infragistics.Win.UltraWinGrid.PosChanged.Moved ) return;

            if ( _fixDic.ContainsKey( e.ColumnHeaders[0].Column.Key ) && _fixDic[e.ColumnHeaders[0].Column.Key] != e.ColumnHeaders[0].Fixed )
            {
                // Fix状態が変更された
                if ( e.ColumnHeaders[0].Fixed == false )
                {
                    int fixedColCount = 0;
                    foreach ( Infragistics.Win.UltraWinGrid.UltraGridColumn col in _targetGrid.DisplayLayout.Bands[0].Columns )
                    {
                        if ( !col.Hidden && col.Header.Fixed ) fixedColCount++;
                    }

                    // ポジションを戻す（fixedになっているカラム数を考慮する）
                    e.ColumnHeaders[0].VisiblePosition = _fixPosDic[e.ColumnHeaders[0].Column.Key] + fixedColCount;

                    // 戻すことで他のカラムに影響する
                    List<string> dicKeyList = new List<string>();
                    foreach ( string colKey in _fixPosDic.Keys )
                    {
                        if ( _fixPosDic[colKey] > _fixPosDic[e.ColumnHeaders[0].Column.Key] )
                        {
                            dicKeyList.Add( colKey );
                        }
                    }
                    foreach ( string colKey in dicKeyList )
                    {
                        _fixPosDic[colKey]--;
                    }
                }

                // 前回退避値更新
                _fixDic[e.ColumnHeaders[0].Column.Key] = e.ColumnHeaders[0].Fixed;
            }
        }
        # endregion
    }
    # endregion
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/02/20 ADD

}