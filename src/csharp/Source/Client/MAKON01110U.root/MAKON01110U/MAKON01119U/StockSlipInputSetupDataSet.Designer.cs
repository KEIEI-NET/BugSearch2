//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.832
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Windows.Forms {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("StockSlipInputSetupDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class StockSlipInputSetupDataSet : System.Data.DataSet {
        
        private HeaderFocusDataTable tableHeaderFocus;
        
        private DetailFocusDataTable tableDetailFocus;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StockSlipInputSetupDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StockSlipInputSetupDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["HeaderFocus"] != null)) {
                    base.Tables.Add(new HeaderFocusDataTable(ds.Tables["HeaderFocus"]));
                }
                if ((ds.Tables["DetailFocus"] != null)) {
                    base.Tables.Add(new DetailFocusDataTable(ds.Tables["DetailFocus"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HeaderFocusDataTable HeaderFocus {
            get {
                return this.tableHeaderFocus;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DetailFocusDataTable DetailFocus {
            get {
                return this.tableDetailFocus;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            StockSlipInputSetupDataSet cln = ((StockSlipInputSetupDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["HeaderFocus"] != null)) {
                    base.Tables.Add(new HeaderFocusDataTable(ds.Tables["HeaderFocus"]));
                }
                if ((ds.Tables["DetailFocus"] != null)) {
                    base.Tables.Add(new DetailFocusDataTable(ds.Tables["DetailFocus"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableHeaderFocus = ((HeaderFocusDataTable)(base.Tables["HeaderFocus"]));
            if ((initTable == true)) {
                if ((this.tableHeaderFocus != null)) {
                    this.tableHeaderFocus.InitVars();
                }
            }
            this.tableDetailFocus = ((DetailFocusDataTable)(base.Tables["DetailFocus"]));
            if ((initTable == true)) {
                if ((this.tableDetailFocus != null)) {
                    this.tableDetailFocus.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "StockSlipInputSetupDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableHeaderFocus = new HeaderFocusDataTable();
            base.Tables.Add(this.tableHeaderFocus);
            this.tableDetailFocus = new DetailFocusDataTable();
            base.Tables.Add(this.tableDetailFocus);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHeaderFocus() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDetailFocus() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            StockSlipInputSetupDataSet ds = new StockSlipInputSetupDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void HeaderFocusRowChangeEventHandler(object sender, HeaderFocusRowChangeEvent e);
        
        public delegate void DetailFocusRowChangeEventHandler(object sender, DetailFocusRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HeaderFocusDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRowNo;
            
            private System.Data.DataColumn columnKey;
            
            private System.Data.DataColumn columnDisplayName;
            
            private System.Data.DataColumn columnCanMove;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderFocusDataTable() {
                this.TableName = "HeaderFocus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeaderFocusDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HeaderFocusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowNoColumn {
                get {
                    return this.columnRowNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KeyColumn {
                get {
                    return this.columnKey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DisplayNameColumn {
                get {
                    return this.columnDisplayName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CanMoveColumn {
                get {
                    return this.columnCanMove;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderFocusRow this[int index] {
                get {
                    return ((HeaderFocusRow)(this.Rows[index]));
                }
            }
            
            public event HeaderFocusRowChangeEventHandler HeaderFocusRowChanging;
            
            public event HeaderFocusRowChangeEventHandler HeaderFocusRowChanged;
            
            public event HeaderFocusRowChangeEventHandler HeaderFocusRowDeleting;
            
            public event HeaderFocusRowChangeEventHandler HeaderFocusRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHeaderFocusRow(HeaderFocusRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderFocusRow AddHeaderFocusRow(int RowNo, string Key, string DisplayName, bool CanMove) {
                HeaderFocusRow rowHeaderFocusRow = ((HeaderFocusRow)(this.NewRow()));
                rowHeaderFocusRow.ItemArray = new object[] {
                        RowNo,
                        Key,
                        DisplayName,
                        CanMove};
                this.Rows.Add(rowHeaderFocusRow);
                return rowHeaderFocusRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderFocusRow FindByKey(string Key) {
                return ((HeaderFocusRow)(this.Rows.Find(new object[] {
                            Key})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                HeaderFocusDataTable cln = ((HeaderFocusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new HeaderFocusDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRowNo = base.Columns["RowNo"];
                this.columnKey = base.Columns["Key"];
                this.columnDisplayName = base.Columns["DisplayName"];
                this.columnCanMove = base.Columns["CanMove"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRowNo = new System.Data.DataColumn("RowNo", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowNo);
                this.columnKey = new System.Data.DataColumn("Key", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKey);
                this.columnDisplayName = new System.Data.DataColumn("DisplayName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayName);
                this.columnCanMove = new System.Data.DataColumn("CanMove", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCanMove);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnKey}, true));
                this.columnRowNo.AllowDBNull = false;
                this.columnRowNo.Caption = "№";
                this.columnRowNo.DefaultValue = ((int)(0));
                this.columnKey.AllowDBNull = false;
                this.columnKey.ReadOnly = true;
                this.columnKey.Unique = true;
                this.columnKey.DefaultValue = ((string)(""));
                this.columnDisplayName.Caption = "項目";
                this.columnDisplayName.DefaultValue = ((string)(""));
                this.columnCanMove.Caption = "移動";
                this.columnCanMove.DefaultValue = ((bool)(true));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderFocusRow NewHeaderFocusRow() {
                return ((HeaderFocusRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new HeaderFocusRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(HeaderFocusRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HeaderFocusRowChanged != null)) {
                    this.HeaderFocusRowChanged(this, new HeaderFocusRowChangeEvent(((HeaderFocusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HeaderFocusRowChanging != null)) {
                    this.HeaderFocusRowChanging(this, new HeaderFocusRowChangeEvent(((HeaderFocusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HeaderFocusRowDeleted != null)) {
                    this.HeaderFocusRowDeleted(this, new HeaderFocusRowChangeEvent(((HeaderFocusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HeaderFocusRowDeleting != null)) {
                    this.HeaderFocusRowDeleting(this, new HeaderFocusRowChangeEvent(((HeaderFocusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHeaderFocusRow(HeaderFocusRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                StockSlipInputSetupDataSet ds = new StockSlipInputSetupDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HeaderFocusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DetailFocusDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRowNo;
            
            private System.Data.DataColumn columnKey;
            
            private System.Data.DataColumn columnCaption;
            
            private System.Data.DataColumn columnVisiblePosition;
            
            private System.Data.DataColumn columnFixedCol;
            
            private System.Data.DataColumn columnVisible;
            
            private System.Data.DataColumn columnEnterStop;
            
            private System.Data.DataColumn columnEnterStopControl;
            
            private System.Data.DataColumn columnVisibleControl;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailFocusDataTable() {
                this.TableName = "DetailFocus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetailFocusDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DetailFocusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowNoColumn {
                get {
                    return this.columnRowNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KeyColumn {
                get {
                    return this.columnKey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CaptionColumn {
                get {
                    return this.columnCaption;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VisiblePositionColumn {
                get {
                    return this.columnVisiblePosition;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FixedColColumn {
                get {
                    return this.columnFixedCol;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VisibleColumn {
                get {
                    return this.columnVisible;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EnterStopColumn {
                get {
                    return this.columnEnterStop;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EnterStopControlColumn {
                get {
                    return this.columnEnterStopControl;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VisibleControlColumn {
                get {
                    return this.columnVisibleControl;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailFocusRow this[int index] {
                get {
                    return ((DetailFocusRow)(this.Rows[index]));
                }
            }
            
            public event DetailFocusRowChangeEventHandler DetailFocusRowChanging;
            
            public event DetailFocusRowChangeEventHandler DetailFocusRowChanged;
            
            public event DetailFocusRowChangeEventHandler DetailFocusRowDeleting;
            
            public event DetailFocusRowChangeEventHandler DetailFocusRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDetailFocusRow(DetailFocusRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailFocusRow AddDetailFocusRow(int RowNo, string Key, string Caption, int VisiblePosition, bool FixedCol, bool Visible, bool EnterStop, bool EnterStopControl, bool VisibleControl) {
                DetailFocusRow rowDetailFocusRow = ((DetailFocusRow)(this.NewRow()));
                rowDetailFocusRow.ItemArray = new object[] {
                        RowNo,
                        Key,
                        Caption,
                        VisiblePosition,
                        FixedCol,
                        Visible,
                        EnterStop,
                        EnterStopControl,
                        VisibleControl};
                this.Rows.Add(rowDetailFocusRow);
                return rowDetailFocusRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailFocusRow FindByKey(string Key) {
                return ((DetailFocusRow)(this.Rows.Find(new object[] {
                            Key})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DetailFocusDataTable cln = ((DetailFocusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DetailFocusDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRowNo = base.Columns["RowNo"];
                this.columnKey = base.Columns["Key"];
                this.columnCaption = base.Columns["Caption"];
                this.columnVisiblePosition = base.Columns["VisiblePosition"];
                this.columnFixedCol = base.Columns["FixedCol"];
                this.columnVisible = base.Columns["Visible"];
                this.columnEnterStop = base.Columns["EnterStop"];
                this.columnEnterStopControl = base.Columns["EnterStopControl"];
                this.columnVisibleControl = base.Columns["VisibleControl"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRowNo = new System.Data.DataColumn("RowNo", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowNo);
                this.columnKey = new System.Data.DataColumn("Key", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKey);
                this.columnCaption = new System.Data.DataColumn("Caption", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCaption);
                this.columnVisiblePosition = new System.Data.DataColumn("VisiblePosition", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisiblePosition);
                this.columnFixedCol = new System.Data.DataColumn("FixedCol", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFixedCol);
                this.columnVisible = new System.Data.DataColumn("Visible", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisible);
                this.columnEnterStop = new System.Data.DataColumn("EnterStop", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnterStop);
                this.columnEnterStopControl = new System.Data.DataColumn("EnterStopControl", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnterStopControl);
                this.columnVisibleControl = new System.Data.DataColumn("VisibleControl", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisibleControl);
                this.Constraints.Add(new System.Data.UniqueConstraint("DetailFocusKey1", new System.Data.DataColumn[] {
                                this.columnKey}, true));
                this.columnRowNo.Caption = "№";
                this.columnKey.AllowDBNull = false;
                this.columnKey.Unique = true;
                this.columnKey.DefaultValue = ((string)(""));
                this.columnCaption.Caption = "項目";
                this.columnCaption.DefaultValue = ((string)(""));
                this.columnVisiblePosition.Caption = "表示位置";
                this.columnFixedCol.Caption = "固定行";
                this.columnFixedCol.DefaultValue = ((bool)(true));
                this.columnVisible.Caption = "表示";
                this.columnVisible.DefaultValue = ((bool)(false));
                this.columnEnterStop.Caption = "移動";
                this.columnEnterStop.DefaultValue = ((bool)(false));
                this.columnEnterStopControl.DefaultValue = ((bool)(true));
                this.columnVisibleControl.DefaultValue = ((bool)(true));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailFocusRow NewDetailFocusRow() {
                return ((DetailFocusRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DetailFocusRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DetailFocusRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DetailFocusRowChanged != null)) {
                    this.DetailFocusRowChanged(this, new DetailFocusRowChangeEvent(((DetailFocusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DetailFocusRowChanging != null)) {
                    this.DetailFocusRowChanging(this, new DetailFocusRowChangeEvent(((DetailFocusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DetailFocusRowDeleted != null)) {
                    this.DetailFocusRowDeleted(this, new DetailFocusRowChangeEvent(((DetailFocusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DetailFocusRowDeleting != null)) {
                    this.DetailFocusRowDeleting(this, new DetailFocusRowChangeEvent(((DetailFocusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDetailFocusRow(DetailFocusRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                StockSlipInputSetupDataSet ds = new StockSlipInputSetupDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DetailFocusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HeaderFocusRow : System.Data.DataRow {
            
            private HeaderFocusDataTable tableHeaderFocus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeaderFocusRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHeaderFocus = ((HeaderFocusDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RowNo {
                get {
                    return ((int)(this[this.tableHeaderFocus.RowNoColumn]));
                }
                set {
                    this[this.tableHeaderFocus.RowNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Key {
                get {
                    return ((string)(this[this.tableHeaderFocus.KeyColumn]));
                }
                set {
                    this[this.tableHeaderFocus.KeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisplayName {
                get {
                    try {
                        return ((string)(this[this.tableHeaderFocus.DisplayNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'HeaderFocus\' にある列 \'DisplayName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableHeaderFocus.DisplayNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CanMove {
                get {
                    try {
                        return ((bool)(this[this.tableHeaderFocus.CanMoveColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'HeaderFocus\' にある列 \'CanMove\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableHeaderFocus.CanMoveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisplayNameNull() {
                return this.IsNull(this.tableHeaderFocus.DisplayNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisplayNameNull() {
                this[this.tableHeaderFocus.DisplayNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCanMoveNull() {
                return this.IsNull(this.tableHeaderFocus.CanMoveColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCanMoveNull() {
                this[this.tableHeaderFocus.CanMoveColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DetailFocusRow : System.Data.DataRow {
            
            private DetailFocusDataTable tableDetailFocus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetailFocusRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDetailFocus = ((DetailFocusDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RowNo {
                get {
                    try {
                        return ((int)(this[this.tableDetailFocus.RowNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'DetailFocus\' にある列 \'RowNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailFocus.RowNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Key {
                get {
                    return ((string)(this[this.tableDetailFocus.KeyColumn]));
                }
                set {
                    this[this.tableDetailFocus.KeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Caption {
                get {
                    try {
                        return ((string)(this[this.tableDetailFocus.CaptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'DetailFocus\' にある列 \'Caption\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailFocus.CaptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VisiblePosition {
                get {
                    try {
                        return ((int)(this[this.tableDetailFocus.VisiblePositionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'DetailFocus\' にある列 \'VisiblePosition\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailFocus.VisiblePositionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FixedCol {
                get {
                    try {
                        return ((bool)(this[this.tableDetailFocus.FixedColColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'DetailFocus\' にある列 \'FixedCol\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailFocus.FixedColColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Visible {
                get {
                    try {
                        return ((bool)(this[this.tableDetailFocus.VisibleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'DetailFocus\' にある列 \'Visible\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailFocus.VisibleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool EnterStop {
                get {
                    try {
                        return ((bool)(this[this.tableDetailFocus.EnterStopColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'DetailFocus\' にある列 \'EnterStop\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailFocus.EnterStopColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool EnterStopControl {
                get {
                    try {
                        return ((bool)(this[this.tableDetailFocus.EnterStopControlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'DetailFocus\' にある列 \'EnterStopControl\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailFocus.EnterStopControlColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool VisibleControl {
                get {
                    try {
                        return ((bool)(this[this.tableDetailFocus.VisibleControlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'DetailFocus\' にある列 \'VisibleControl\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailFocus.VisibleControlColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowNoNull() {
                return this.IsNull(this.tableDetailFocus.RowNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowNoNull() {
                this[this.tableDetailFocus.RowNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCaptionNull() {
                return this.IsNull(this.tableDetailFocus.CaptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCaptionNull() {
                this[this.tableDetailFocus.CaptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVisiblePositionNull() {
                return this.IsNull(this.tableDetailFocus.VisiblePositionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVisiblePositionNull() {
                this[this.tableDetailFocus.VisiblePositionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFixedColNull() {
                return this.IsNull(this.tableDetailFocus.FixedColColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFixedColNull() {
                this[this.tableDetailFocus.FixedColColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVisibleNull() {
                return this.IsNull(this.tableDetailFocus.VisibleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVisibleNull() {
                this[this.tableDetailFocus.VisibleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnterStopNull() {
                return this.IsNull(this.tableDetailFocus.EnterStopColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnterStopNull() {
                this[this.tableDetailFocus.EnterStopColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnterStopControlNull() {
                return this.IsNull(this.tableDetailFocus.EnterStopControlColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnterStopControlNull() {
                this[this.tableDetailFocus.EnterStopControlColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVisibleControlNull() {
                return this.IsNull(this.tableDetailFocus.VisibleControlColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVisibleControlNull() {
                this[this.tableDetailFocus.VisibleControlColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HeaderFocusRowChangeEvent : System.EventArgs {
            
            private HeaderFocusRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderFocusRowChangeEvent(HeaderFocusRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderFocusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DetailFocusRowChangeEvent : System.EventArgs {
            
            private DetailFocusRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailFocusRowChangeEvent(DetailFocusRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailFocusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591