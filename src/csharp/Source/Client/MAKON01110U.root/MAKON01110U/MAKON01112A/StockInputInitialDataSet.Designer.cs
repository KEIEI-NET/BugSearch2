//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3053
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.Controller {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("StockInputInitialDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class StockInputInitialDataSet : global::System.Data.DataSet {
        
        private EmployeeDataTable tableEmployee;
        
        private WarehouseDataTable tableWarehouse;
        
        private UserGdBdDataTable tableUserGdBd;
        
        private CustGroupStDataTable tableCustGroupSt;
        
        private MakerDataTable tableMaker;
        
        private EmployeeDtlDataTable tableEmployeeDtl;
        
        private StockProcMoneyDataTable tableStockProcMoney;
        
        private TaxRateSetDataTable tableTaxRateSet;
        
        private SalesProcMoneyDataTable tableSalesProcMoney;
        
        private SubSectionDataTable tableSubSection;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StockInputInitialDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StockInputInitialDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Employee"] != null)) {
                    base.Tables.Add(new EmployeeDataTable(ds.Tables["Employee"]));
                }
                if ((ds.Tables["Warehouse"] != null)) {
                    base.Tables.Add(new WarehouseDataTable(ds.Tables["Warehouse"]));
                }
                if ((ds.Tables["UserGdBd"] != null)) {
                    base.Tables.Add(new UserGdBdDataTable(ds.Tables["UserGdBd"]));
                }
                if ((ds.Tables["CustGroupSt"] != null)) {
                    base.Tables.Add(new CustGroupStDataTable(ds.Tables["CustGroupSt"]));
                }
                if ((ds.Tables["Maker"] != null)) {
                    base.Tables.Add(new MakerDataTable(ds.Tables["Maker"]));
                }
                if ((ds.Tables["EmployeeDtl"] != null)) {
                    base.Tables.Add(new EmployeeDtlDataTable(ds.Tables["EmployeeDtl"]));
                }
                if ((ds.Tables["StockProcMoney"] != null)) {
                    base.Tables.Add(new StockProcMoneyDataTable(ds.Tables["StockProcMoney"]));
                }
                if ((ds.Tables["TaxRateSet"] != null)) {
                    base.Tables.Add(new TaxRateSetDataTable(ds.Tables["TaxRateSet"]));
                }
                if ((ds.Tables["SalesProcMoney"] != null)) {
                    base.Tables.Add(new SalesProcMoneyDataTable(ds.Tables["SalesProcMoney"]));
                }
                if ((ds.Tables["SubSection"] != null)) {
                    base.Tables.Add(new SubSectionDataTable(ds.Tables["SubSection"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeeDataTable Employee {
            get {
                return this.tableEmployee;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WarehouseDataTable Warehouse {
            get {
                return this.tableWarehouse;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserGdBdDataTable UserGdBd {
            get {
                return this.tableUserGdBd;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustGroupStDataTable CustGroupSt {
            get {
                return this.tableCustGroupSt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MakerDataTable Maker {
            get {
                return this.tableMaker;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeeDtlDataTable EmployeeDtl {
            get {
                return this.tableEmployeeDtl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockProcMoneyDataTable StockProcMoney {
            get {
                return this.tableStockProcMoney;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TaxRateSetDataTable TaxRateSet {
            get {
                return this.tableTaxRateSet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SalesProcMoneyDataTable SalesProcMoney {
            get {
                return this.tableSalesProcMoney;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubSectionDataTable SubSection {
            get {
                return this.tableSubSection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            StockInputInitialDataSet cln = ((StockInputInitialDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Employee"] != null)) {
                    base.Tables.Add(new EmployeeDataTable(ds.Tables["Employee"]));
                }
                if ((ds.Tables["Warehouse"] != null)) {
                    base.Tables.Add(new WarehouseDataTable(ds.Tables["Warehouse"]));
                }
                if ((ds.Tables["UserGdBd"] != null)) {
                    base.Tables.Add(new UserGdBdDataTable(ds.Tables["UserGdBd"]));
                }
                if ((ds.Tables["CustGroupSt"] != null)) {
                    base.Tables.Add(new CustGroupStDataTable(ds.Tables["CustGroupSt"]));
                }
                if ((ds.Tables["Maker"] != null)) {
                    base.Tables.Add(new MakerDataTable(ds.Tables["Maker"]));
                }
                if ((ds.Tables["EmployeeDtl"] != null)) {
                    base.Tables.Add(new EmployeeDtlDataTable(ds.Tables["EmployeeDtl"]));
                }
                if ((ds.Tables["StockProcMoney"] != null)) {
                    base.Tables.Add(new StockProcMoneyDataTable(ds.Tables["StockProcMoney"]));
                }
                if ((ds.Tables["TaxRateSet"] != null)) {
                    base.Tables.Add(new TaxRateSetDataTable(ds.Tables["TaxRateSet"]));
                }
                if ((ds.Tables["SalesProcMoney"] != null)) {
                    base.Tables.Add(new SalesProcMoneyDataTable(ds.Tables["SalesProcMoney"]));
                }
                if ((ds.Tables["SubSection"] != null)) {
                    base.Tables.Add(new SubSectionDataTable(ds.Tables["SubSection"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEmployee = ((EmployeeDataTable)(base.Tables["Employee"]));
            if ((initTable == true)) {
                if ((this.tableEmployee != null)) {
                    this.tableEmployee.InitVars();
                }
            }
            this.tableWarehouse = ((WarehouseDataTable)(base.Tables["Warehouse"]));
            if ((initTable == true)) {
                if ((this.tableWarehouse != null)) {
                    this.tableWarehouse.InitVars();
                }
            }
            this.tableUserGdBd = ((UserGdBdDataTable)(base.Tables["UserGdBd"]));
            if ((initTable == true)) {
                if ((this.tableUserGdBd != null)) {
                    this.tableUserGdBd.InitVars();
                }
            }
            this.tableCustGroupSt = ((CustGroupStDataTable)(base.Tables["CustGroupSt"]));
            if ((initTable == true)) {
                if ((this.tableCustGroupSt != null)) {
                    this.tableCustGroupSt.InitVars();
                }
            }
            this.tableMaker = ((MakerDataTable)(base.Tables["Maker"]));
            if ((initTable == true)) {
                if ((this.tableMaker != null)) {
                    this.tableMaker.InitVars();
                }
            }
            this.tableEmployeeDtl = ((EmployeeDtlDataTable)(base.Tables["EmployeeDtl"]));
            if ((initTable == true)) {
                if ((this.tableEmployeeDtl != null)) {
                    this.tableEmployeeDtl.InitVars();
                }
            }
            this.tableStockProcMoney = ((StockProcMoneyDataTable)(base.Tables["StockProcMoney"]));
            if ((initTable == true)) {
                if ((this.tableStockProcMoney != null)) {
                    this.tableStockProcMoney.InitVars();
                }
            }
            this.tableTaxRateSet = ((TaxRateSetDataTable)(base.Tables["TaxRateSet"]));
            if ((initTable == true)) {
                if ((this.tableTaxRateSet != null)) {
                    this.tableTaxRateSet.InitVars();
                }
            }
            this.tableSalesProcMoney = ((SalesProcMoneyDataTable)(base.Tables["SalesProcMoney"]));
            if ((initTable == true)) {
                if ((this.tableSalesProcMoney != null)) {
                    this.tableSalesProcMoney.InitVars();
                }
            }
            this.tableSubSection = ((SubSectionDataTable)(base.Tables["SubSection"]));
            if ((initTable == true)) {
                if ((this.tableSubSection != null)) {
                    this.tableSubSection.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "StockInputInitialDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEmployee = new EmployeeDataTable();
            base.Tables.Add(this.tableEmployee);
            this.tableWarehouse = new WarehouseDataTable();
            base.Tables.Add(this.tableWarehouse);
            this.tableUserGdBd = new UserGdBdDataTable();
            base.Tables.Add(this.tableUserGdBd);
            this.tableCustGroupSt = new CustGroupStDataTable();
            base.Tables.Add(this.tableCustGroupSt);
            this.tableMaker = new MakerDataTable();
            base.Tables.Add(this.tableMaker);
            this.tableEmployeeDtl = new EmployeeDtlDataTable();
            base.Tables.Add(this.tableEmployeeDtl);
            this.tableStockProcMoney = new StockProcMoneyDataTable();
            base.Tables.Add(this.tableStockProcMoney);
            this.tableTaxRateSet = new TaxRateSetDataTable();
            base.Tables.Add(this.tableTaxRateSet);
            this.tableSalesProcMoney = new SalesProcMoneyDataTable();
            base.Tables.Add(this.tableSalesProcMoney);
            this.tableSubSection = new SubSectionDataTable();
            base.Tables.Add(this.tableSubSection);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployee() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWarehouse() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUserGdBd() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustGroupSt() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMaker() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployeeDtl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStockProcMoney() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTaxRateSet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSalesProcMoney() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubSection() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            StockInputInitialDataSet ds = new StockInputInitialDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void EmployeeRowChangeEventHandler(object sender, EmployeeRowChangeEvent e);
        
        public delegate void WarehouseRowChangeEventHandler(object sender, WarehouseRowChangeEvent e);
        
        public delegate void UserGdBdRowChangeEventHandler(object sender, UserGdBdRowChangeEvent e);
        
        public delegate void CustGroupStRowChangeEventHandler(object sender, CustGroupStRowChangeEvent e);
        
        public delegate void MakerRowChangeEventHandler(object sender, MakerRowChangeEvent e);
        
        public delegate void EmployeeDtlRowChangeEventHandler(object sender, EmployeeDtlRowChangeEvent e);
        
        public delegate void StockProcMoneyRowChangeEventHandler(object sender, StockProcMoneyRowChangeEvent e);
        
        public delegate void TaxRateSetRowChangeEventHandler(object sender, TaxRateSetRowChangeEvent e);
        
        public delegate void SalesProcMoneyRowChangeEventHandler(object sender, SalesProcMoneyRowChangeEvent e);
        
        public delegate void SubSectionRowChangeEventHandler(object sender, SubSectionRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeCode;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnBelongSectionCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDataTable() {
                this.TableName = "Employee";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BelongSectionCodeColumn {
                get {
                    return this.columnBelongSectionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow this[int index] {
                get {
                    return ((EmployeeRow)(this.Rows[index]));
                }
            }
            
            public event EmployeeRowChangeEventHandler EmployeeRowChanging;
            
            public event EmployeeRowChangeEventHandler EmployeeRowChanged;
            
            public event EmployeeRowChangeEventHandler EmployeeRowDeleting;
            
            public event EmployeeRowChangeEventHandler EmployeeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeeRow(EmployeeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow AddEmployeeRow(string EmployeeCode, string Name, string BelongSectionCode) {
                EmployeeRow rowEmployeeRow = ((EmployeeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmployeeCode,
                        Name,
                        BelongSectionCode};
                rowEmployeeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmployeeRow);
                return rowEmployeeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow FindByEmployeeCode(string EmployeeCode) {
                return ((EmployeeRow)(this.Rows.Find(new object[] {
                            EmployeeCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmployeeDataTable cln = ((EmployeeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmployeeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnName = base.Columns["Name"];
                this.columnBelongSectionCode = base.Columns["BelongSectionCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeCode = new global::System.Data.DataColumn("EmployeeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnBelongSectionCode = new global::System.Data.DataColumn("BelongSectionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBelongSectionCode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("EmployeeKey1", new global::System.Data.DataColumn[] {
                                this.columnEmployeeCode}, true));
                this.columnEmployeeCode.AllowDBNull = false;
                this.columnEmployeeCode.Unique = true;
                this.columnBelongSectionCode.DefaultValue = ((string)(""));
                this.CaseSensitive = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow NewEmployeeRow() {
                return ((EmployeeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmployeeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmployeeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeeRowChanged != null)) {
                    this.EmployeeRowChanged(this, new EmployeeRowChangeEvent(((EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeeRowChanging != null)) {
                    this.EmployeeRowChanging(this, new EmployeeRowChangeEvent(((EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeeRowDeleted != null)) {
                    this.EmployeeRowDeleted(this, new EmployeeRowChangeEvent(((EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeeRowDeleting != null)) {
                    this.EmployeeRowDeleting(this, new EmployeeRowChangeEvent(((EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeeRow(EmployeeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StockInputInitialDataSet ds = new StockInputInitialDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WarehouseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWarehouseCode;
            
            private global::System.Data.DataColumn columnWarehouseName;
            
            private global::System.Data.DataColumn columnWarehouseShelfNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WarehouseDataTable() {
                this.TableName = "Warehouse";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WarehouseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WarehouseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseCodeColumn {
                get {
                    return this.columnWarehouseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseNameColumn {
                get {
                    return this.columnWarehouseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseShelfNoColumn {
                get {
                    return this.columnWarehouseShelfNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WarehouseRow this[int index] {
                get {
                    return ((WarehouseRow)(this.Rows[index]));
                }
            }
            
            public event WarehouseRowChangeEventHandler WarehouseRowChanging;
            
            public event WarehouseRowChangeEventHandler WarehouseRowChanged;
            
            public event WarehouseRowChangeEventHandler WarehouseRowDeleting;
            
            public event WarehouseRowChangeEventHandler WarehouseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWarehouseRow(WarehouseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WarehouseRow AddWarehouseRow(string WarehouseCode, string WarehouseName, string WarehouseShelfNo) {
                WarehouseRow rowWarehouseRow = ((WarehouseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WarehouseCode,
                        WarehouseName,
                        WarehouseShelfNo};
                rowWarehouseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWarehouseRow);
                return rowWarehouseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WarehouseRow FindByWarehouseCode(string WarehouseCode) {
                return ((WarehouseRow)(this.Rows.Find(new object[] {
                            WarehouseCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WarehouseDataTable cln = ((WarehouseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WarehouseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWarehouseCode = base.Columns["WarehouseCode"];
                this.columnWarehouseName = base.Columns["WarehouseName"];
                this.columnWarehouseShelfNo = base.Columns["WarehouseShelfNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWarehouseCode = new global::System.Data.DataColumn("WarehouseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseCode);
                this.columnWarehouseName = new global::System.Data.DataColumn("WarehouseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseName);
                this.columnWarehouseShelfNo = new global::System.Data.DataColumn("WarehouseShelfNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseShelfNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWarehouseCode}, true));
                this.columnWarehouseCode.AllowDBNull = false;
                this.columnWarehouseCode.Unique = true;
                this.CaseSensitive = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WarehouseRow NewWarehouseRow() {
                return ((WarehouseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WarehouseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WarehouseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WarehouseRowChanged != null)) {
                    this.WarehouseRowChanged(this, new WarehouseRowChangeEvent(((WarehouseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WarehouseRowChanging != null)) {
                    this.WarehouseRowChanging(this, new WarehouseRowChangeEvent(((WarehouseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WarehouseRowDeleted != null)) {
                    this.WarehouseRowDeleted(this, new WarehouseRowChangeEvent(((WarehouseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WarehouseRowDeleting != null)) {
                    this.WarehouseRowDeleting(this, new WarehouseRowChangeEvent(((WarehouseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWarehouseRow(WarehouseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StockInputInitialDataSet ds = new StockInputInitialDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WarehouseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserGdBdDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUserGuideDivCd;
            
            private global::System.Data.DataColumn columnGuideCode;
            
            private global::System.Data.DataColumn columnGuideName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserGdBdDataTable() {
                this.TableName = "UserGdBd";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserGdBdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserGdBdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserGuideDivCdColumn {
                get {
                    return this.columnUserGuideDivCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GuideCodeColumn {
                get {
                    return this.columnGuideCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GuideNameColumn {
                get {
                    return this.columnGuideName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserGdBdRow this[int index] {
                get {
                    return ((UserGdBdRow)(this.Rows[index]));
                }
            }
            
            public event UserGdBdRowChangeEventHandler UserGdBdRowChanging;
            
            public event UserGdBdRowChangeEventHandler UserGdBdRowChanged;
            
            public event UserGdBdRowChangeEventHandler UserGdBdRowDeleting;
            
            public event UserGdBdRowChangeEventHandler UserGdBdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserGdBdRow(UserGdBdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserGdBdRow AddUserGdBdRow(int UserGuideDivCd, int GuideCode, string GuideName) {
                UserGdBdRow rowUserGdBdRow = ((UserGdBdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UserGuideDivCd,
                        GuideCode,
                        GuideName};
                rowUserGdBdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserGdBdRow);
                return rowUserGdBdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserGdBdRow FindByUserGuideDivCdGuideCode(int UserGuideDivCd, int GuideCode) {
                return ((UserGdBdRow)(this.Rows.Find(new object[] {
                            UserGuideDivCd,
                            GuideCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UserGdBdDataTable cln = ((UserGdBdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserGdBdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserGuideDivCd = base.Columns["UserGuideDivCd"];
                this.columnGuideCode = base.Columns["GuideCode"];
                this.columnGuideName = base.Columns["GuideName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserGuideDivCd = new global::System.Data.DataColumn("UserGuideDivCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserGuideDivCd);
                this.columnGuideCode = new global::System.Data.DataColumn("GuideCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGuideCode);
                this.columnGuideName = new global::System.Data.DataColumn("GuideName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGuideName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("UserGdBdKey1", new global::System.Data.DataColumn[] {
                                this.columnUserGuideDivCd,
                                this.columnGuideCode}, true));
                this.columnUserGuideDivCd.AllowDBNull = false;
                this.columnUserGuideDivCd.DefaultValue = ((int)(0));
                this.columnGuideCode.AllowDBNull = false;
                this.columnGuideCode.DefaultValue = ((int)(0));
                this.columnGuideName.DefaultValue = ((string)(""));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserGdBdRow NewUserGdBdRow() {
                return ((UserGdBdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserGdBdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UserGdBdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserGdBdRowChanged != null)) {
                    this.UserGdBdRowChanged(this, new UserGdBdRowChangeEvent(((UserGdBdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserGdBdRowChanging != null)) {
                    this.UserGdBdRowChanging(this, new UserGdBdRowChangeEvent(((UserGdBdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserGdBdRowDeleted != null)) {
                    this.UserGdBdRowDeleted(this, new UserGdBdRowChangeEvent(((UserGdBdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserGdBdRowDeleting != null)) {
                    this.UserGdBdRowDeleting(this, new UserGdBdRowChangeEvent(((UserGdBdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserGdBdRow(UserGdBdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StockInputInitialDataSet ds = new StockInputInitialDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserGdBdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustGroupStDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCustGroupDivCode;
            
            private global::System.Data.DataColumn columnCustGroupCode;
            
            private global::System.Data.DataColumn columnCustomerCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustGroupStDataTable() {
                this.TableName = "CustGroupSt";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustGroupStDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustGroupStDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustGroupDivCodeColumn {
                get {
                    return this.columnCustGroupDivCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustGroupCodeColumn {
                get {
                    return this.columnCustGroupCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerCodeColumn {
                get {
                    return this.columnCustomerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustGroupStRow this[int index] {
                get {
                    return ((CustGroupStRow)(this.Rows[index]));
                }
            }
            
            public event CustGroupStRowChangeEventHandler CustGroupStRowChanging;
            
            public event CustGroupStRowChangeEventHandler CustGroupStRowChanged;
            
            public event CustGroupStRowChangeEventHandler CustGroupStRowDeleting;
            
            public event CustGroupStRowChangeEventHandler CustGroupStRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustGroupStRow(CustGroupStRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustGroupStRow AddCustGroupStRow(int CustGroupDivCode, int CustGroupCode, int CustomerCode) {
                CustGroupStRow rowCustGroupStRow = ((CustGroupStRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustGroupDivCode,
                        CustGroupCode,
                        CustomerCode};
                rowCustGroupStRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustGroupStRow);
                return rowCustGroupStRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustGroupStRow FindByCustGroupDivCodeCustGroupCodeCustomerCode(int CustGroupDivCode, int CustGroupCode, int CustomerCode) {
                return ((CustGroupStRow)(this.Rows.Find(new object[] {
                            CustGroupDivCode,
                            CustGroupCode,
                            CustomerCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustGroupStDataTable cln = ((CustGroupStDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustGroupStDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustGroupDivCode = base.Columns["CustGroupDivCode"];
                this.columnCustGroupCode = base.Columns["CustGroupCode"];
                this.columnCustomerCode = base.Columns["CustomerCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustGroupDivCode = new global::System.Data.DataColumn("CustGroupDivCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustGroupDivCode);
                this.columnCustGroupCode = new global::System.Data.DataColumn("CustGroupCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustGroupCode);
                this.columnCustomerCode = new global::System.Data.DataColumn("CustomerCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerCode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCustGroupDivCode,
                                this.columnCustGroupCode,
                                this.columnCustomerCode}, true));
                this.columnCustGroupDivCode.AllowDBNull = false;
                this.columnCustGroupDivCode.DefaultValue = ((int)(0));
                this.columnCustGroupCode.AllowDBNull = false;
                this.columnCustGroupCode.DefaultValue = ((int)(0));
                this.columnCustomerCode.AllowDBNull = false;
                this.columnCustomerCode.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustGroupStRow NewCustGroupStRow() {
                return ((CustGroupStRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustGroupStRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustGroupStRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustGroupStRowChanged != null)) {
                    this.CustGroupStRowChanged(this, new CustGroupStRowChangeEvent(((CustGroupStRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustGroupStRowChanging != null)) {
                    this.CustGroupStRowChanging(this, new CustGroupStRowChangeEvent(((CustGroupStRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustGroupStRowDeleted != null)) {
                    this.CustGroupStRowDeleted(this, new CustGroupStRowChangeEvent(((CustGroupStRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustGroupStRowDeleting != null)) {
                    this.CustGroupStRowDeleting(this, new CustGroupStRowChangeEvent(((CustGroupStRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustGroupStRow(CustGroupStRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StockInputInitialDataSet ds = new StockInputInitialDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustGroupStDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MakerDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnGoodsMakerCd;
            
            private global::System.Data.DataColumn columnMakerName;
            
            private global::System.Data.DataColumn columnMakerKanaName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MakerDataTable() {
                this.TableName = "Maker";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MakerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MakerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsMakerCdColumn {
                get {
                    return this.columnGoodsMakerCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MakerNameColumn {
                get {
                    return this.columnMakerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MakerKanaNameColumn {
                get {
                    return this.columnMakerKanaName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MakerRow this[int index] {
                get {
                    return ((MakerRow)(this.Rows[index]));
                }
            }
            
            public event MakerRowChangeEventHandler MakerRowChanging;
            
            public event MakerRowChangeEventHandler MakerRowChanged;
            
            public event MakerRowChangeEventHandler MakerRowDeleting;
            
            public event MakerRowChangeEventHandler MakerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMakerRow(MakerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MakerRow AddMakerRow(int GoodsMakerCd, string MakerName, string MakerKanaName) {
                MakerRow rowMakerRow = ((MakerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GoodsMakerCd,
                        MakerName,
                        MakerKanaName};
                rowMakerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMakerRow);
                return rowMakerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MakerRow FindByGoodsMakerCd(int GoodsMakerCd) {
                return ((MakerRow)(this.Rows.Find(new object[] {
                            GoodsMakerCd})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MakerDataTable cln = ((MakerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MakerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGoodsMakerCd = base.Columns["GoodsMakerCd"];
                this.columnMakerName = base.Columns["MakerName"];
                this.columnMakerKanaName = base.Columns["MakerKanaName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGoodsMakerCd = new global::System.Data.DataColumn("GoodsMakerCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsMakerCd);
                this.columnMakerName = new global::System.Data.DataColumn("MakerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMakerName);
                this.columnMakerKanaName = new global::System.Data.DataColumn("MakerKanaName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMakerKanaName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnGoodsMakerCd}, true));
                this.columnGoodsMakerCd.AllowDBNull = false;
                this.columnGoodsMakerCd.Unique = true;
                this.columnGoodsMakerCd.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MakerRow NewMakerRow() {
                return ((MakerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MakerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MakerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MakerRowChanged != null)) {
                    this.MakerRowChanged(this, new MakerRowChangeEvent(((MakerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MakerRowChanging != null)) {
                    this.MakerRowChanging(this, new MakerRowChangeEvent(((MakerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MakerRowDeleted != null)) {
                    this.MakerRowDeleted(this, new MakerRowChangeEvent(((MakerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MakerRowDeleting != null)) {
                    this.MakerRowDeleting(this, new MakerRowChangeEvent(((MakerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMakerRow(MakerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StockInputInitialDataSet ds = new StockInputInitialDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MakerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeeDtlDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeCode;
            
            private global::System.Data.DataColumn columnBelongSubSectionCode;
            
            private global::System.Data.DataColumn columnBelongSubSectionName;
            
            private global::System.Data.DataColumn columnBelongMinSectionCode;
            
            private global::System.Data.DataColumn columnBelongMinSectionName;
            
            private global::System.Data.DataColumn columnBelongSalesAreaCode;
            
            private global::System.Data.DataColumn columnBelongSalesAreaName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDtlDataTable() {
                this.TableName = "EmployeeDtl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeDtlDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeeDtlDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BelongSubSectionCodeColumn {
                get {
                    return this.columnBelongSubSectionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BelongSubSectionNameColumn {
                get {
                    return this.columnBelongSubSectionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BelongMinSectionCodeColumn {
                get {
                    return this.columnBelongMinSectionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BelongMinSectionNameColumn {
                get {
                    return this.columnBelongMinSectionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BelongSalesAreaCodeColumn {
                get {
                    return this.columnBelongSalesAreaCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BelongSalesAreaNameColumn {
                get {
                    return this.columnBelongSalesAreaName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDtlRow this[int index] {
                get {
                    return ((EmployeeDtlRow)(this.Rows[index]));
                }
            }
            
            public event EmployeeDtlRowChangeEventHandler EmployeeDtlRowChanging;
            
            public event EmployeeDtlRowChangeEventHandler EmployeeDtlRowChanged;
            
            public event EmployeeDtlRowChangeEventHandler EmployeeDtlRowDeleting;
            
            public event EmployeeDtlRowChangeEventHandler EmployeeDtlRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeeDtlRow(EmployeeDtlRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDtlRow AddEmployeeDtlRow(string EmployeeCode, int BelongSubSectionCode, string BelongSubSectionName, int BelongMinSectionCode, string BelongMinSectionName, int BelongSalesAreaCode, string BelongSalesAreaName) {
                EmployeeDtlRow rowEmployeeDtlRow = ((EmployeeDtlRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmployeeCode,
                        BelongSubSectionCode,
                        BelongSubSectionName,
                        BelongMinSectionCode,
                        BelongMinSectionName,
                        BelongSalesAreaCode,
                        BelongSalesAreaName};
                rowEmployeeDtlRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmployeeDtlRow);
                return rowEmployeeDtlRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDtlRow FindByEmployeeCode(string EmployeeCode) {
                return ((EmployeeDtlRow)(this.Rows.Find(new object[] {
                            EmployeeCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmployeeDtlDataTable cln = ((EmployeeDtlDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmployeeDtlDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnBelongSubSectionCode = base.Columns["BelongSubSectionCode"];
                this.columnBelongSubSectionName = base.Columns["BelongSubSectionName"];
                this.columnBelongMinSectionCode = base.Columns["BelongMinSectionCode"];
                this.columnBelongMinSectionName = base.Columns["BelongMinSectionName"];
                this.columnBelongSalesAreaCode = base.Columns["BelongSalesAreaCode"];
                this.columnBelongSalesAreaName = base.Columns["BelongSalesAreaName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeCode = new global::System.Data.DataColumn("EmployeeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnBelongSubSectionCode = new global::System.Data.DataColumn("BelongSubSectionCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBelongSubSectionCode);
                this.columnBelongSubSectionName = new global::System.Data.DataColumn("BelongSubSectionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBelongSubSectionName);
                this.columnBelongMinSectionCode = new global::System.Data.DataColumn("BelongMinSectionCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBelongMinSectionCode);
                this.columnBelongMinSectionName = new global::System.Data.DataColumn("BelongMinSectionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBelongMinSectionName);
                this.columnBelongSalesAreaCode = new global::System.Data.DataColumn("BelongSalesAreaCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBelongSalesAreaCode);
                this.columnBelongSalesAreaName = new global::System.Data.DataColumn("BelongSalesAreaName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBelongSalesAreaName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("EmployeeDtlKey1", new global::System.Data.DataColumn[] {
                                this.columnEmployeeCode}, true));
                this.columnEmployeeCode.AllowDBNull = false;
                this.columnEmployeeCode.Unique = true;
                this.columnEmployeeCode.DefaultValue = ((string)(""));
                this.columnBelongSubSectionCode.DefaultValue = ((int)(0));
                this.columnBelongSubSectionName.DefaultValue = ((string)(""));
                this.columnBelongMinSectionCode.DefaultValue = ((int)(0));
                this.columnBelongMinSectionName.DefaultValue = ((string)(""));
                this.columnBelongSalesAreaCode.DefaultValue = ((int)(0));
                this.columnBelongSalesAreaName.DefaultValue = ((string)(""));
                this.CaseSensitive = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDtlRow NewEmployeeDtlRow() {
                return ((EmployeeDtlRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmployeeDtlRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmployeeDtlRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeeDtlRowChanged != null)) {
                    this.EmployeeDtlRowChanged(this, new EmployeeDtlRowChangeEvent(((EmployeeDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeeDtlRowChanging != null)) {
                    this.EmployeeDtlRowChanging(this, new EmployeeDtlRowChangeEvent(((EmployeeDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeeDtlRowDeleted != null)) {
                    this.EmployeeDtlRowDeleted(this, new EmployeeDtlRowChangeEvent(((EmployeeDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeeDtlRowDeleting != null)) {
                    this.EmployeeDtlRowDeleting(this, new EmployeeDtlRowChangeEvent(((EmployeeDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeeDtlRow(EmployeeDtlRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StockInputInitialDataSet ds = new StockInputInitialDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeeDtlDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockProcMoneyDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFracProcMoneyDiv;
            
            private global::System.Data.DataColumn columnFractionProcCode;
            
            private global::System.Data.DataColumn columnUpperLimitPrice;
            
            private global::System.Data.DataColumn columnFractionProcUnit;
            
            private global::System.Data.DataColumn columnFractionProcCd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockProcMoneyDataTable() {
                this.TableName = "StockProcMoney";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockProcMoneyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockProcMoneyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FracProcMoneyDivColumn {
                get {
                    return this.columnFracProcMoneyDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionProcCodeColumn {
                get {
                    return this.columnFractionProcCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpperLimitPriceColumn {
                get {
                    return this.columnUpperLimitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionProcUnitColumn {
                get {
                    return this.columnFractionProcUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionProcCdColumn {
                get {
                    return this.columnFractionProcCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockProcMoneyRow this[int index] {
                get {
                    return ((StockProcMoneyRow)(this.Rows[index]));
                }
            }
            
            public event StockProcMoneyRowChangeEventHandler StockProcMoneyRowChanging;
            
            public event StockProcMoneyRowChangeEventHandler StockProcMoneyRowChanged;
            
            public event StockProcMoneyRowChangeEventHandler StockProcMoneyRowDeleting;
            
            public event StockProcMoneyRowChangeEventHandler StockProcMoneyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockProcMoneyRow(StockProcMoneyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockProcMoneyRow AddStockProcMoneyRow(int FracProcMoneyDiv, int FractionProcCode, double UpperLimitPrice, double FractionProcUnit, int FractionProcCd) {
                StockProcMoneyRow rowStockProcMoneyRow = ((StockProcMoneyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FracProcMoneyDiv,
                        FractionProcCode,
                        UpperLimitPrice,
                        FractionProcUnit,
                        FractionProcCd};
                rowStockProcMoneyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStockProcMoneyRow);
                return rowStockProcMoneyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockProcMoneyRow FindByFracProcMoneyDivFractionProcCodeUpperLimitPrice(int FracProcMoneyDiv, int FractionProcCode, double UpperLimitPrice) {
                return ((StockProcMoneyRow)(this.Rows.Find(new object[] {
                            FracProcMoneyDiv,
                            FractionProcCode,
                            UpperLimitPrice})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StockProcMoneyDataTable cln = ((StockProcMoneyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StockProcMoneyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFracProcMoneyDiv = base.Columns["FracProcMoneyDiv"];
                this.columnFractionProcCode = base.Columns["FractionProcCode"];
                this.columnUpperLimitPrice = base.Columns["UpperLimitPrice"];
                this.columnFractionProcUnit = base.Columns["FractionProcUnit"];
                this.columnFractionProcCd = base.Columns["FractionProcCd"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFracProcMoneyDiv = new global::System.Data.DataColumn("FracProcMoneyDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFracProcMoneyDiv);
                this.columnFractionProcCode = new global::System.Data.DataColumn("FractionProcCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionProcCode);
                this.columnUpperLimitPrice = new global::System.Data.DataColumn("UpperLimitPrice", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpperLimitPrice);
                this.columnFractionProcUnit = new global::System.Data.DataColumn("FractionProcUnit", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionProcUnit);
                this.columnFractionProcCd = new global::System.Data.DataColumn("FractionProcCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionProcCd);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("StockProcMoneyKey1", new global::System.Data.DataColumn[] {
                                this.columnFracProcMoneyDiv,
                                this.columnFractionProcCode,
                                this.columnUpperLimitPrice}, true));
                this.columnFracProcMoneyDiv.AllowDBNull = false;
                this.columnFracProcMoneyDiv.DefaultValue = ((int)(0));
                this.columnFractionProcCode.AllowDBNull = false;
                this.columnFractionProcCode.DefaultValue = ((int)(0));
                this.columnUpperLimitPrice.AllowDBNull = false;
                this.columnUpperLimitPrice.DefaultValue = ((double)(0));
                this.columnFractionProcUnit.DefaultValue = ((double)(0));
                this.columnFractionProcCd.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockProcMoneyRow NewStockProcMoneyRow() {
                return ((StockProcMoneyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StockProcMoneyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StockProcMoneyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockProcMoneyRowChanged != null)) {
                    this.StockProcMoneyRowChanged(this, new StockProcMoneyRowChangeEvent(((StockProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockProcMoneyRowChanging != null)) {
                    this.StockProcMoneyRowChanging(this, new StockProcMoneyRowChangeEvent(((StockProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockProcMoneyRowDeleted != null)) {
                    this.StockProcMoneyRowDeleted(this, new StockProcMoneyRowChangeEvent(((StockProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockProcMoneyRowDeleting != null)) {
                    this.StockProcMoneyRowDeleting(this, new StockProcMoneyRowChangeEvent(((StockProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockProcMoneyRow(StockProcMoneyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StockInputInitialDataSet ds = new StockInputInitialDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockProcMoneyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TaxRateSetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTaxRateCode;
            
            private global::System.Data.DataColumn columnTaxRateProperNounNm;
            
            private global::System.Data.DataColumn columnTaxRateName;
            
            private global::System.Data.DataColumn columnConsTaxLayMethod;
            
            private global::System.Data.DataColumn columnTaxRateStartDate;
            
            private global::System.Data.DataColumn columnTaxRateEndDate;
            
            private global::System.Data.DataColumn columnTaxRate;
            
            private global::System.Data.DataColumn columnTaxRateStartDate2;
            
            private global::System.Data.DataColumn columnTaxRateEndDate2;
            
            private global::System.Data.DataColumn columnTaxRate2;
            
            private global::System.Data.DataColumn columnTaxRateStartDate3;
            
            private global::System.Data.DataColumn columnTaxRateEndDate3;
            
            private global::System.Data.DataColumn columnTaxRate3;
            
            private static System.DateTime columnTaxRateStartDate_defaultValue = global::System.DateTime.Parse("01/01/0001 00:00:00");
            
            private static System.DateTime columnTaxRateEndDate_defaultValue = global::System.DateTime.Parse("01/01/0001 00:00:00");
            
            private static System.DateTime columnTaxRateStartDate2_defaultValue = global::System.DateTime.Parse("01/01/0001 00:00:00");
            
            private static System.DateTime columnTaxRateEndDate2_defaultValue = global::System.DateTime.Parse("01/01/0001 00:00:00");
            
            private static System.DateTime columnTaxRateStartDate3_defaultValue = global::System.DateTime.Parse("01/01/0001 00:00:00");
            
            private static System.DateTime columnTaxRateEndDate3_defaultValue = global::System.DateTime.Parse("01/01/0001 00:00:00");
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxRateSetDataTable() {
                this.TableName = "TaxRateSet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaxRateSetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TaxRateSetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxRateCodeColumn {
                get {
                    return this.columnTaxRateCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxRateProperNounNmColumn {
                get {
                    return this.columnTaxRateProperNounNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxRateNameColumn {
                get {
                    return this.columnTaxRateName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsTaxLayMethodColumn {
                get {
                    return this.columnConsTaxLayMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxRateStartDateColumn {
                get {
                    return this.columnTaxRateStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxRateEndDateColumn {
                get {
                    return this.columnTaxRateEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxRateColumn {
                get {
                    return this.columnTaxRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxRateStartDate2Column {
                get {
                    return this.columnTaxRateStartDate2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxRateEndDate2Column {
                get {
                    return this.columnTaxRateEndDate2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxRate2Column {
                get {
                    return this.columnTaxRate2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxRateStartDate3Column {
                get {
                    return this.columnTaxRateStartDate3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxRateEndDate3Column {
                get {
                    return this.columnTaxRateEndDate3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxRate3Column {
                get {
                    return this.columnTaxRate3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxRateSetRow this[int index] {
                get {
                    return ((TaxRateSetRow)(this.Rows[index]));
                }
            }
            
            public event TaxRateSetRowChangeEventHandler TaxRateSetRowChanging;
            
            public event TaxRateSetRowChangeEventHandler TaxRateSetRowChanged;
            
            public event TaxRateSetRowChangeEventHandler TaxRateSetRowDeleting;
            
            public event TaxRateSetRowChangeEventHandler TaxRateSetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTaxRateSetRow(TaxRateSetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxRateSetRow AddTaxRateSetRow(int TaxRateCode, string TaxRateProperNounNm, string TaxRateName, int ConsTaxLayMethod, System.DateTime TaxRateStartDate, System.DateTime TaxRateEndDate, double TaxRate, System.DateTime TaxRateStartDate2, System.DateTime TaxRateEndDate2, double TaxRate2, System.DateTime TaxRateStartDate3, System.DateTime TaxRateEndDate3, string TaxRate3) {
                TaxRateSetRow rowTaxRateSetRow = ((TaxRateSetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TaxRateCode,
                        TaxRateProperNounNm,
                        TaxRateName,
                        ConsTaxLayMethod,
                        TaxRateStartDate,
                        TaxRateEndDate,
                        TaxRate,
                        TaxRateStartDate2,
                        TaxRateEndDate2,
                        TaxRate2,
                        TaxRateStartDate3,
                        TaxRateEndDate3,
                        TaxRate3};
                rowTaxRateSetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTaxRateSetRow);
                return rowTaxRateSetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxRateSetRow FindByTaxRateCode(int TaxRateCode) {
                return ((TaxRateSetRow)(this.Rows.Find(new object[] {
                            TaxRateCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TaxRateSetDataTable cln = ((TaxRateSetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TaxRateSetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTaxRateCode = base.Columns["TaxRateCode"];
                this.columnTaxRateProperNounNm = base.Columns["TaxRateProperNounNm"];
                this.columnTaxRateName = base.Columns["TaxRateName"];
                this.columnConsTaxLayMethod = base.Columns["ConsTaxLayMethod"];
                this.columnTaxRateStartDate = base.Columns["TaxRateStartDate"];
                this.columnTaxRateEndDate = base.Columns["TaxRateEndDate"];
                this.columnTaxRate = base.Columns["TaxRate"];
                this.columnTaxRateStartDate2 = base.Columns["TaxRateStartDate2"];
                this.columnTaxRateEndDate2 = base.Columns["TaxRateEndDate2"];
                this.columnTaxRate2 = base.Columns["TaxRate2"];
                this.columnTaxRateStartDate3 = base.Columns["TaxRateStartDate3"];
                this.columnTaxRateEndDate3 = base.Columns["TaxRateEndDate3"];
                this.columnTaxRate3 = base.Columns["TaxRate3"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTaxRateCode = new global::System.Data.DataColumn("TaxRateCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxRateCode);
                this.columnTaxRateProperNounNm = new global::System.Data.DataColumn("TaxRateProperNounNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxRateProperNounNm);
                this.columnTaxRateName = new global::System.Data.DataColumn("TaxRateName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxRateName);
                this.columnConsTaxLayMethod = new global::System.Data.DataColumn("ConsTaxLayMethod", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsTaxLayMethod);
                this.columnTaxRateStartDate = new global::System.Data.DataColumn("TaxRateStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxRateStartDate);
                this.columnTaxRateEndDate = new global::System.Data.DataColumn("TaxRateEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxRateEndDate);
                this.columnTaxRate = new global::System.Data.DataColumn("TaxRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxRate);
                this.columnTaxRateStartDate2 = new global::System.Data.DataColumn("TaxRateStartDate2", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxRateStartDate2);
                this.columnTaxRateEndDate2 = new global::System.Data.DataColumn("TaxRateEndDate2", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxRateEndDate2);
                this.columnTaxRate2 = new global::System.Data.DataColumn("TaxRate2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxRate2);
                this.columnTaxRateStartDate3 = new global::System.Data.DataColumn("TaxRateStartDate3", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxRateStartDate3);
                this.columnTaxRateEndDate3 = new global::System.Data.DataColumn("TaxRateEndDate3", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxRateEndDate3);
                this.columnTaxRate3 = new global::System.Data.DataColumn("TaxRate3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxRate3);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTaxRateCode}, true));
                this.columnTaxRateCode.AllowDBNull = false;
                this.columnTaxRateCode.Unique = true;
                this.columnTaxRateCode.DefaultValue = ((int)(0));
                this.columnTaxRateProperNounNm.DefaultValue = ((string)(""));
                this.columnTaxRateName.DefaultValue = ((string)(""));
                this.columnConsTaxLayMethod.DefaultValue = ((int)(0));
                this.columnTaxRateStartDate.DefaultValue = ((System.DateTime)(TaxRateSetDataTable.columnTaxRateStartDate_defaultValue));
                this.columnTaxRateEndDate.DefaultValue = ((System.DateTime)(TaxRateSetDataTable.columnTaxRateEndDate_defaultValue));
                this.columnTaxRate.DefaultValue = ((double)(0));
                this.columnTaxRateStartDate2.DefaultValue = ((System.DateTime)(TaxRateSetDataTable.columnTaxRateStartDate2_defaultValue));
                this.columnTaxRateEndDate2.DefaultValue = ((System.DateTime)(TaxRateSetDataTable.columnTaxRateEndDate2_defaultValue));
                this.columnTaxRate2.DefaultValue = ((double)(0));
                this.columnTaxRateStartDate3.DefaultValue = ((System.DateTime)(TaxRateSetDataTable.columnTaxRateStartDate3_defaultValue));
                this.columnTaxRateEndDate3.DefaultValue = ((System.DateTime)(TaxRateSetDataTable.columnTaxRateEndDate3_defaultValue));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxRateSetRow NewTaxRateSetRow() {
                return ((TaxRateSetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TaxRateSetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TaxRateSetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TaxRateSetRowChanged != null)) {
                    this.TaxRateSetRowChanged(this, new TaxRateSetRowChangeEvent(((TaxRateSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TaxRateSetRowChanging != null)) {
                    this.TaxRateSetRowChanging(this, new TaxRateSetRowChangeEvent(((TaxRateSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TaxRateSetRowDeleted != null)) {
                    this.TaxRateSetRowDeleted(this, new TaxRateSetRowChangeEvent(((TaxRateSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TaxRateSetRowDeleting != null)) {
                    this.TaxRateSetRowDeleting(this, new TaxRateSetRowChangeEvent(((TaxRateSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTaxRateSetRow(TaxRateSetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StockInputInitialDataSet ds = new StockInputInitialDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TaxRateSetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SalesProcMoneyDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFracProcMoneyDiv;
            
            private global::System.Data.DataColumn columnFractionProcCode;
            
            private global::System.Data.DataColumn columnUpperLimitPrice;
            
            private global::System.Data.DataColumn columnFractionProcUnit;
            
            private global::System.Data.DataColumn columnFractionProcCd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesProcMoneyDataTable() {
                this.TableName = "SalesProcMoney";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalesProcMoneyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SalesProcMoneyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FracProcMoneyDivColumn {
                get {
                    return this.columnFracProcMoneyDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionProcCodeColumn {
                get {
                    return this.columnFractionProcCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpperLimitPriceColumn {
                get {
                    return this.columnUpperLimitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionProcUnitColumn {
                get {
                    return this.columnFractionProcUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionProcCdColumn {
                get {
                    return this.columnFractionProcCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesProcMoneyRow this[int index] {
                get {
                    return ((SalesProcMoneyRow)(this.Rows[index]));
                }
            }
            
            public event SalesProcMoneyRowChangeEventHandler SalesProcMoneyRowChanging;
            
            public event SalesProcMoneyRowChangeEventHandler SalesProcMoneyRowChanged;
            
            public event SalesProcMoneyRowChangeEventHandler SalesProcMoneyRowDeleting;
            
            public event SalesProcMoneyRowChangeEventHandler SalesProcMoneyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSalesProcMoneyRow(SalesProcMoneyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesProcMoneyRow AddSalesProcMoneyRow(int FracProcMoneyDiv, int FractionProcCode, double UpperLimitPrice, double FractionProcUnit, int FractionProcCd) {
                SalesProcMoneyRow rowSalesProcMoneyRow = ((SalesProcMoneyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FracProcMoneyDiv,
                        FractionProcCode,
                        UpperLimitPrice,
                        FractionProcUnit,
                        FractionProcCd};
                rowSalesProcMoneyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSalesProcMoneyRow);
                return rowSalesProcMoneyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesProcMoneyRow FindByFracProcMoneyDivFractionProcCodeUpperLimitPrice(int FracProcMoneyDiv, int FractionProcCode, double UpperLimitPrice) {
                return ((SalesProcMoneyRow)(this.Rows.Find(new object[] {
                            FracProcMoneyDiv,
                            FractionProcCode,
                            UpperLimitPrice})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SalesProcMoneyDataTable cln = ((SalesProcMoneyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SalesProcMoneyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFracProcMoneyDiv = base.Columns["FracProcMoneyDiv"];
                this.columnFractionProcCode = base.Columns["FractionProcCode"];
                this.columnUpperLimitPrice = base.Columns["UpperLimitPrice"];
                this.columnFractionProcUnit = base.Columns["FractionProcUnit"];
                this.columnFractionProcCd = base.Columns["FractionProcCd"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFracProcMoneyDiv = new global::System.Data.DataColumn("FracProcMoneyDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFracProcMoneyDiv);
                this.columnFractionProcCode = new global::System.Data.DataColumn("FractionProcCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionProcCode);
                this.columnUpperLimitPrice = new global::System.Data.DataColumn("UpperLimitPrice", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpperLimitPrice);
                this.columnFractionProcUnit = new global::System.Data.DataColumn("FractionProcUnit", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionProcUnit);
                this.columnFractionProcCd = new global::System.Data.DataColumn("FractionProcCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionProcCd);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("StockProcMoneyKey1", new global::System.Data.DataColumn[] {
                                this.columnFracProcMoneyDiv,
                                this.columnFractionProcCode,
                                this.columnUpperLimitPrice}, true));
                this.columnFracProcMoneyDiv.AllowDBNull = false;
                this.columnFracProcMoneyDiv.DefaultValue = ((int)(0));
                this.columnFractionProcCode.AllowDBNull = false;
                this.columnFractionProcCode.DefaultValue = ((int)(0));
                this.columnUpperLimitPrice.AllowDBNull = false;
                this.columnUpperLimitPrice.DefaultValue = ((double)(0));
                this.columnFractionProcUnit.DefaultValue = ((double)(0));
                this.columnFractionProcCd.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesProcMoneyRow NewSalesProcMoneyRow() {
                return ((SalesProcMoneyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SalesProcMoneyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SalesProcMoneyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SalesProcMoneyRowChanged != null)) {
                    this.SalesProcMoneyRowChanged(this, new SalesProcMoneyRowChangeEvent(((SalesProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SalesProcMoneyRowChanging != null)) {
                    this.SalesProcMoneyRowChanging(this, new SalesProcMoneyRowChangeEvent(((SalesProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SalesProcMoneyRowDeleted != null)) {
                    this.SalesProcMoneyRowDeleted(this, new SalesProcMoneyRowChangeEvent(((SalesProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SalesProcMoneyRowDeleting != null)) {
                    this.SalesProcMoneyRowDeleting(this, new SalesProcMoneyRowChangeEvent(((SalesProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSalesProcMoneyRow(SalesProcMoneyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StockInputInitialDataSet ds = new StockInputInitialDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SalesProcMoneyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubSectionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSectionCode;
            
            private global::System.Data.DataColumn columnSubSectionCode;
            
            private global::System.Data.DataColumn columnSubSectionName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubSectionDataTable() {
                this.TableName = "SubSection";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubSectionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubSectionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionCodeColumn {
                get {
                    return this.columnSectionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubSectionCodeColumn {
                get {
                    return this.columnSubSectionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubSectionNameColumn {
                get {
                    return this.columnSubSectionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubSectionRow this[int index] {
                get {
                    return ((SubSectionRow)(this.Rows[index]));
                }
            }
            
            public event SubSectionRowChangeEventHandler SubSectionRowChanging;
            
            public event SubSectionRowChangeEventHandler SubSectionRowChanged;
            
            public event SubSectionRowChangeEventHandler SubSectionRowDeleting;
            
            public event SubSectionRowChangeEventHandler SubSectionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubSectionRow(SubSectionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubSectionRow AddSubSectionRow(string SectionCode, int SubSectionCode, string SubSectionName) {
                SubSectionRow rowSubSectionRow = ((SubSectionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SectionCode,
                        SubSectionCode,
                        SubSectionName};
                rowSubSectionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubSectionRow);
                return rowSubSectionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubSectionRow FindBySubSectionCode(int SubSectionCode) {
                return ((SubSectionRow)(this.Rows.Find(new object[] {
                            SubSectionCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubSectionDataTable cln = ((SubSectionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubSectionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSectionCode = base.Columns["SectionCode"];
                this.columnSubSectionCode = base.Columns["SubSectionCode"];
                this.columnSubSectionName = base.Columns["SubSectionName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSectionCode = new global::System.Data.DataColumn("SectionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionCode);
                this.columnSubSectionCode = new global::System.Data.DataColumn("SubSectionCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubSectionCode);
                this.columnSubSectionName = new global::System.Data.DataColumn("SubSectionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubSectionName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSubSectionCode}, true));
                this.columnSubSectionCode.AllowDBNull = false;
                this.columnSubSectionCode.Unique = true;
                this.columnSubSectionCode.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubSectionRow NewSubSectionRow() {
                return ((SubSectionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubSectionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubSectionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubSectionRowChanged != null)) {
                    this.SubSectionRowChanged(this, new SubSectionRowChangeEvent(((SubSectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubSectionRowChanging != null)) {
                    this.SubSectionRowChanging(this, new SubSectionRowChangeEvent(((SubSectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubSectionRowDeleted != null)) {
                    this.SubSectionRowDeleted(this, new SubSectionRowChangeEvent(((SubSectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubSectionRowDeleting != null)) {
                    this.SubSectionRowDeleting(this, new SubSectionRowChangeEvent(((SubSectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubSectionRow(SubSectionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StockInputInitialDataSet ds = new StockInputInitialDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubSectionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeeRow : global::System.Data.DataRow {
            
            private EmployeeDataTable tableEmployee;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployee = ((EmployeeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    return ((string)(this[this.tableEmployee.EmployeeCodeColumn]));
                }
                set {
                    this[this.tableEmployee.EmployeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableEmployee.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Employee\' にある列 \'Name\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployee.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BelongSectionCode {
                get {
                    try {
                        return ((string)(this[this.tableEmployee.BelongSectionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Employee\' にある列 \'BelongSectionCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployee.BelongSectionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableEmployee.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableEmployee.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBelongSectionCodeNull() {
                return this.IsNull(this.tableEmployee.BelongSectionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBelongSectionCodeNull() {
                this[this.tableEmployee.BelongSectionCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WarehouseRow : global::System.Data.DataRow {
            
            private WarehouseDataTable tableWarehouse;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WarehouseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWarehouse = ((WarehouseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseCode {
                get {
                    return ((string)(this[this.tableWarehouse.WarehouseCodeColumn]));
                }
                set {
                    this[this.tableWarehouse.WarehouseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseName {
                get {
                    try {
                        return ((string)(this[this.tableWarehouse.WarehouseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Warehouse\' にある列 \'WarehouseName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableWarehouse.WarehouseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseShelfNo {
                get {
                    try {
                        return ((string)(this[this.tableWarehouse.WarehouseShelfNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Warehouse\' にある列 \'WarehouseShelfNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableWarehouse.WarehouseShelfNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNameNull() {
                return this.IsNull(this.tableWarehouse.WarehouseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNameNull() {
                this[this.tableWarehouse.WarehouseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseShelfNoNull() {
                return this.IsNull(this.tableWarehouse.WarehouseShelfNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseShelfNoNull() {
                this[this.tableWarehouse.WarehouseShelfNoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserGdBdRow : global::System.Data.DataRow {
            
            private UserGdBdDataTable tableUserGdBd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserGdBdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserGdBd = ((UserGdBdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserGuideDivCd {
                get {
                    return ((int)(this[this.tableUserGdBd.UserGuideDivCdColumn]));
                }
                set {
                    this[this.tableUserGdBd.UserGuideDivCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GuideCode {
                get {
                    return ((int)(this[this.tableUserGdBd.GuideCodeColumn]));
                }
                set {
                    this[this.tableUserGdBd.GuideCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GuideName {
                get {
                    try {
                        return ((string)(this[this.tableUserGdBd.GuideNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'UserGdBd\' にある列 \'GuideName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableUserGdBd.GuideNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGuideNameNull() {
                return this.IsNull(this.tableUserGdBd.GuideNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGuideNameNull() {
                this[this.tableUserGdBd.GuideNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustGroupStRow : global::System.Data.DataRow {
            
            private CustGroupStDataTable tableCustGroupSt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustGroupStRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustGroupSt = ((CustGroupStDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustGroupDivCode {
                get {
                    return ((int)(this[this.tableCustGroupSt.CustGroupDivCodeColumn]));
                }
                set {
                    this[this.tableCustGroupSt.CustGroupDivCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustGroupCode {
                get {
                    return ((int)(this[this.tableCustGroupSt.CustGroupCodeColumn]));
                }
                set {
                    this[this.tableCustGroupSt.CustGroupCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerCode {
                get {
                    return ((int)(this[this.tableCustGroupSt.CustomerCodeColumn]));
                }
                set {
                    this[this.tableCustGroupSt.CustomerCodeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MakerRow : global::System.Data.DataRow {
            
            private MakerDataTable tableMaker;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MakerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMaker = ((MakerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GoodsMakerCd {
                get {
                    return ((int)(this[this.tableMaker.GoodsMakerCdColumn]));
                }
                set {
                    this[this.tableMaker.GoodsMakerCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MakerName {
                get {
                    try {
                        return ((string)(this[this.tableMaker.MakerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Maker\' にある列 \'MakerName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableMaker.MakerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MakerKanaName {
                get {
                    try {
                        return ((string)(this[this.tableMaker.MakerKanaNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Maker\' にある列 \'MakerKanaName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableMaker.MakerKanaNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMakerNameNull() {
                return this.IsNull(this.tableMaker.MakerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMakerNameNull() {
                this[this.tableMaker.MakerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMakerKanaNameNull() {
                return this.IsNull(this.tableMaker.MakerKanaNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMakerKanaNameNull() {
                this[this.tableMaker.MakerKanaNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeeDtlRow : global::System.Data.DataRow {
            
            private EmployeeDtlDataTable tableEmployeeDtl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeDtlRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployeeDtl = ((EmployeeDtlDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    return ((string)(this[this.tableEmployeeDtl.EmployeeCodeColumn]));
                }
                set {
                    this[this.tableEmployeeDtl.EmployeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BelongSubSectionCode {
                get {
                    try {
                        return ((int)(this[this.tableEmployeeDtl.BelongSubSectionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeDtl\' にある列 \'BelongSubSectionCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeDtl.BelongSubSectionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BelongSubSectionName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDtl.BelongSubSectionNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeDtl\' にある列 \'BelongSubSectionName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeDtl.BelongSubSectionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BelongMinSectionCode {
                get {
                    try {
                        return ((int)(this[this.tableEmployeeDtl.BelongMinSectionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeDtl\' にある列 \'BelongMinSectionCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeDtl.BelongMinSectionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BelongMinSectionName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDtl.BelongMinSectionNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeDtl\' にある列 \'BelongMinSectionName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeDtl.BelongMinSectionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BelongSalesAreaCode {
                get {
                    try {
                        return ((int)(this[this.tableEmployeeDtl.BelongSalesAreaCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeDtl\' にある列 \'BelongSalesAreaCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeDtl.BelongSalesAreaCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BelongSalesAreaName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDtl.BelongSalesAreaNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeDtl\' にある列 \'BelongSalesAreaName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeDtl.BelongSalesAreaNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBelongSubSectionCodeNull() {
                return this.IsNull(this.tableEmployeeDtl.BelongSubSectionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBelongSubSectionCodeNull() {
                this[this.tableEmployeeDtl.BelongSubSectionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBelongSubSectionNameNull() {
                return this.IsNull(this.tableEmployeeDtl.BelongSubSectionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBelongSubSectionNameNull() {
                this[this.tableEmployeeDtl.BelongSubSectionNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBelongMinSectionCodeNull() {
                return this.IsNull(this.tableEmployeeDtl.BelongMinSectionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBelongMinSectionCodeNull() {
                this[this.tableEmployeeDtl.BelongMinSectionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBelongMinSectionNameNull() {
                return this.IsNull(this.tableEmployeeDtl.BelongMinSectionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBelongMinSectionNameNull() {
                this[this.tableEmployeeDtl.BelongMinSectionNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBelongSalesAreaCodeNull() {
                return this.IsNull(this.tableEmployeeDtl.BelongSalesAreaCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBelongSalesAreaCodeNull() {
                this[this.tableEmployeeDtl.BelongSalesAreaCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBelongSalesAreaNameNull() {
                return this.IsNull(this.tableEmployeeDtl.BelongSalesAreaNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBelongSalesAreaNameNull() {
                this[this.tableEmployeeDtl.BelongSalesAreaNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockProcMoneyRow : global::System.Data.DataRow {
            
            private StockProcMoneyDataTable tableStockProcMoney;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockProcMoneyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStockProcMoney = ((StockProcMoneyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FracProcMoneyDiv {
                get {
                    return ((int)(this[this.tableStockProcMoney.FracProcMoneyDivColumn]));
                }
                set {
                    this[this.tableStockProcMoney.FracProcMoneyDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FractionProcCode {
                get {
                    return ((int)(this[this.tableStockProcMoney.FractionProcCodeColumn]));
                }
                set {
                    this[this.tableStockProcMoney.FractionProcCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UpperLimitPrice {
                get {
                    return ((double)(this[this.tableStockProcMoney.UpperLimitPriceColumn]));
                }
                set {
                    this[this.tableStockProcMoney.UpperLimitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FractionProcUnit {
                get {
                    try {
                        return ((double)(this[this.tableStockProcMoney.FractionProcUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockProcMoney\' にある列 \'FractionProcUnit\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockProcMoney.FractionProcUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FractionProcCd {
                get {
                    try {
                        return ((int)(this[this.tableStockProcMoney.FractionProcCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockProcMoney\' にある列 \'FractionProcCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockProcMoney.FractionProcCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFractionProcUnitNull() {
                return this.IsNull(this.tableStockProcMoney.FractionProcUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFractionProcUnitNull() {
                this[this.tableStockProcMoney.FractionProcUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFractionProcCdNull() {
                return this.IsNull(this.tableStockProcMoney.FractionProcCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFractionProcCdNull() {
                this[this.tableStockProcMoney.FractionProcCdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TaxRateSetRow : global::System.Data.DataRow {
            
            private TaxRateSetDataTable tableTaxRateSet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaxRateSetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTaxRateSet = ((TaxRateSetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TaxRateCode {
                get {
                    return ((int)(this[this.tableTaxRateSet.TaxRateCodeColumn]));
                }
                set {
                    this[this.tableTaxRateSet.TaxRateCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxRateProperNounNm {
                get {
                    try {
                        return ((string)(this[this.tableTaxRateSet.TaxRateProperNounNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TaxRateSet\' にある列 \'TaxRateProperNounNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTaxRateSet.TaxRateProperNounNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxRateName {
                get {
                    try {
                        return ((string)(this[this.tableTaxRateSet.TaxRateNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TaxRateSet\' にある列 \'TaxRateName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTaxRateSet.TaxRateNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsTaxLayMethod {
                get {
                    try {
                        return ((int)(this[this.tableTaxRateSet.ConsTaxLayMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TaxRateSet\' にある列 \'ConsTaxLayMethod\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTaxRateSet.ConsTaxLayMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TaxRateStartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTaxRateSet.TaxRateStartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TaxRateSet\' にある列 \'TaxRateStartDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTaxRateSet.TaxRateStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TaxRateEndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTaxRateSet.TaxRateEndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TaxRateSet\' にある列 \'TaxRateEndDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTaxRateSet.TaxRateEndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TaxRate {
                get {
                    try {
                        return ((double)(this[this.tableTaxRateSet.TaxRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TaxRateSet\' にある列 \'TaxRate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTaxRateSet.TaxRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TaxRateStartDate2 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTaxRateSet.TaxRateStartDate2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TaxRateSet\' にある列 \'TaxRateStartDate2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTaxRateSet.TaxRateStartDate2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TaxRateEndDate2 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTaxRateSet.TaxRateEndDate2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TaxRateSet\' にある列 \'TaxRateEndDate2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTaxRateSet.TaxRateEndDate2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TaxRate2 {
                get {
                    try {
                        return ((double)(this[this.tableTaxRateSet.TaxRate2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TaxRateSet\' にある列 \'TaxRate2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTaxRateSet.TaxRate2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TaxRateStartDate3 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTaxRateSet.TaxRateStartDate3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TaxRateSet\' にある列 \'TaxRateStartDate3\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTaxRateSet.TaxRateStartDate3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TaxRateEndDate3 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTaxRateSet.TaxRateEndDate3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TaxRateSet\' にある列 \'TaxRateEndDate3\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTaxRateSet.TaxRateEndDate3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxRate3 {
                get {
                    try {
                        return ((string)(this[this.tableTaxRateSet.TaxRate3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TaxRateSet\' にある列 \'TaxRate3\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTaxRateSet.TaxRate3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxRateProperNounNmNull() {
                return this.IsNull(this.tableTaxRateSet.TaxRateProperNounNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxRateProperNounNmNull() {
                this[this.tableTaxRateSet.TaxRateProperNounNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxRateNameNull() {
                return this.IsNull(this.tableTaxRateSet.TaxRateNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxRateNameNull() {
                this[this.tableTaxRateSet.TaxRateNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsTaxLayMethodNull() {
                return this.IsNull(this.tableTaxRateSet.ConsTaxLayMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsTaxLayMethodNull() {
                this[this.tableTaxRateSet.ConsTaxLayMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxRateStartDateNull() {
                return this.IsNull(this.tableTaxRateSet.TaxRateStartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxRateStartDateNull() {
                this[this.tableTaxRateSet.TaxRateStartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxRateEndDateNull() {
                return this.IsNull(this.tableTaxRateSet.TaxRateEndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxRateEndDateNull() {
                this[this.tableTaxRateSet.TaxRateEndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxRateNull() {
                return this.IsNull(this.tableTaxRateSet.TaxRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxRateNull() {
                this[this.tableTaxRateSet.TaxRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxRateStartDate2Null() {
                return this.IsNull(this.tableTaxRateSet.TaxRateStartDate2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxRateStartDate2Null() {
                this[this.tableTaxRateSet.TaxRateStartDate2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxRateEndDate2Null() {
                return this.IsNull(this.tableTaxRateSet.TaxRateEndDate2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxRateEndDate2Null() {
                this[this.tableTaxRateSet.TaxRateEndDate2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxRate2Null() {
                return this.IsNull(this.tableTaxRateSet.TaxRate2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxRate2Null() {
                this[this.tableTaxRateSet.TaxRate2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxRateStartDate3Null() {
                return this.IsNull(this.tableTaxRateSet.TaxRateStartDate3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxRateStartDate3Null() {
                this[this.tableTaxRateSet.TaxRateStartDate3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxRateEndDate3Null() {
                return this.IsNull(this.tableTaxRateSet.TaxRateEndDate3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxRateEndDate3Null() {
                this[this.tableTaxRateSet.TaxRateEndDate3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxRate3Null() {
                return this.IsNull(this.tableTaxRateSet.TaxRate3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxRate3Null() {
                this[this.tableTaxRateSet.TaxRate3Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SalesProcMoneyRow : global::System.Data.DataRow {
            
            private SalesProcMoneyDataTable tableSalesProcMoney;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalesProcMoneyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSalesProcMoney = ((SalesProcMoneyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FracProcMoneyDiv {
                get {
                    return ((int)(this[this.tableSalesProcMoney.FracProcMoneyDivColumn]));
                }
                set {
                    this[this.tableSalesProcMoney.FracProcMoneyDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FractionProcCode {
                get {
                    return ((int)(this[this.tableSalesProcMoney.FractionProcCodeColumn]));
                }
                set {
                    this[this.tableSalesProcMoney.FractionProcCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UpperLimitPrice {
                get {
                    return ((double)(this[this.tableSalesProcMoney.UpperLimitPriceColumn]));
                }
                set {
                    this[this.tableSalesProcMoney.UpperLimitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FractionProcUnit {
                get {
                    try {
                        return ((double)(this[this.tableSalesProcMoney.FractionProcUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SalesProcMoney\' にある列 \'FractionProcUnit\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesProcMoney.FractionProcUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FractionProcCd {
                get {
                    try {
                        return ((int)(this[this.tableSalesProcMoney.FractionProcCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SalesProcMoney\' にある列 \'FractionProcCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesProcMoney.FractionProcCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFractionProcUnitNull() {
                return this.IsNull(this.tableSalesProcMoney.FractionProcUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFractionProcUnitNull() {
                this[this.tableSalesProcMoney.FractionProcUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFractionProcCdNull() {
                return this.IsNull(this.tableSalesProcMoney.FractionProcCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFractionProcCdNull() {
                this[this.tableSalesProcMoney.FractionProcCdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubSectionRow : global::System.Data.DataRow {
            
            private SubSectionDataTable tableSubSection;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubSectionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubSection = ((SubSectionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionCode {
                get {
                    try {
                        return ((string)(this[this.tableSubSection.SectionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SubSection\' にある列 \'SectionCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSubSection.SectionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubSectionCode {
                get {
                    return ((int)(this[this.tableSubSection.SubSectionCodeColumn]));
                }
                set {
                    this[this.tableSubSection.SubSectionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubSectionName {
                get {
                    try {
                        return ((string)(this[this.tableSubSection.SubSectionNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SubSection\' にある列 \'SubSectionName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSubSection.SubSectionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionCodeNull() {
                return this.IsNull(this.tableSubSection.SectionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionCodeNull() {
                this[this.tableSubSection.SectionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubSectionNameNull() {
                return this.IsNull(this.tableSubSection.SubSectionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubSectionNameNull() {
                this[this.tableSubSection.SubSectionNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeeRowChangeEvent : global::System.EventArgs {
            
            private EmployeeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRowChangeEvent(EmployeeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WarehouseRowChangeEvent : global::System.EventArgs {
            
            private WarehouseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WarehouseRowChangeEvent(WarehouseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WarehouseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserGdBdRowChangeEvent : global::System.EventArgs {
            
            private UserGdBdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserGdBdRowChangeEvent(UserGdBdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserGdBdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustGroupStRowChangeEvent : global::System.EventArgs {
            
            private CustGroupStRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustGroupStRowChangeEvent(CustGroupStRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustGroupStRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MakerRowChangeEvent : global::System.EventArgs {
            
            private MakerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MakerRowChangeEvent(MakerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MakerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeeDtlRowChangeEvent : global::System.EventArgs {
            
            private EmployeeDtlRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDtlRowChangeEvent(EmployeeDtlRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDtlRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockProcMoneyRowChangeEvent : global::System.EventArgs {
            
            private StockProcMoneyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockProcMoneyRowChangeEvent(StockProcMoneyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockProcMoneyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TaxRateSetRowChangeEvent : global::System.EventArgs {
            
            private TaxRateSetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxRateSetRowChangeEvent(TaxRateSetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxRateSetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SalesProcMoneyRowChangeEvent : global::System.EventArgs {
            
            private SalesProcMoneyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesProcMoneyRowChangeEvent(SalesProcMoneyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesProcMoneyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubSectionRowChangeEvent : global::System.EventArgs {
            
            private SubSectionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubSectionRowChangeEvent(SubSectionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubSectionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591