using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data;
using System.Text;
using System.Windows.Forms;

using Broadleaf.Application.Common;
using Broadleaf.Application.Controller;
using Broadleaf.Application.UIData;
using Broadleaf.Drawing.Printing;
using Broadleaf.Library.Globarization;
using Broadleaf.Library.Resources;
using Broadleaf.Library.Text;
using Broadleaf.Library.Windows.Forms;

namespace Broadleaf.Drawing.Printing
{
	/// <summary>
	/// 在庫過剰一覧表印刷クラス
	/// </summary>
	/// <remarks>
    /// <br>Note       : 在庫過剰一覧表の印刷を行う。</br>
	/// <br>Programmer : 20081 疋田 勇人</br>
	/// <br>Date       : 2007.11.13</br>
    /// <br>UpdateNote : 2008/10/03 30462 行澤 仁美　バグ修正</br>
    /// <br>           : 2009/03/10       照田 貴志　不具合対応[12269]</br>
    /// <br>           : 2009/03/17       上野 俊治　不具合対応[12490]</br>
    /// <br>           : 2009/04/02       上野 俊治　不具合対応[13058]</br>
	/// </remarks>
	class DCZAI02182PA: IPrintProc
	{

		#region ■ Constructor
		/// <summary>
		/// 在庫過剰一覧表印刷クラスコンストラクタ
		/// </summary>
		/// <remarks>
		/// <br>Note       : 在庫過剰一覧表印刷クラスのインスタンスの作成を行う。</br>
		/// <br>Programmer : 20081 疋田 勇人</br>
		/// <br>Date       : 2007.11.13</br>
		/// </remarks>
		public DCZAI02182PA()
		{
		}

		/// <summary>
		/// 在庫過剰一覧表印刷クラスコンストラクタ
		/// </summary>
		/// <param name="printInfo">印刷情報オブジェクト</param>
		/// <remarks>
		/// <br>Note       : 在庫過剰一覧表印刷クラスのインスタンスの作成を行う。</br>
		/// <br>Programmer : 20081 疋田 勇人</br>
		/// <br>Date       : 2007.11.13</br>
		/// </remarks>
		public DCZAI02182PA( object printInfo )
		{
			this._printInfo = printInfo as SFCMN06002C;
            this._stockOverListCndtn = this._printInfo.jyoken as StockOverListCndtn;
		}
		#endregion ■ Constructor

		#region ■ Pricate Const
		private const string ct_ReportForm_NameSpace = "Broadleaf.Drawing.Printing";
		private const string ct_Space			= "　";
		private const string ct_Extr_Top		= "最初から";
		private const string ct_Extr_End		= "最後まで";
		private	const string ct_RangeConst		= "：{0} 〜 {1}";
		#endregion ■ Pricate Const

		#region ■ Private Member
		private SFCMN06002C _printInfo;					// 印刷情報クラス
        private StockOverListCndtn _stockOverListCndtn;	// 抽出条件クラス
		#endregion ■ Private Member

        
		#region ■ Exception Class
		/// <summary> 例外クラス </summary>
        private class StockMoveException: ApplicationException
		{
			private int _status;
			#region ◆ Constructor
			/// <summary>
			/// 例外クラスコンストラクタ
			/// </summary>
			/// <param name="message">メッセージ</param>
			/// <param name="status">ステータス</param>
			public StockMoveException(string message, int status): base(message)
			{
				this._status = status; 
			}
			#endregion
    
			#region ◆ Public Property
			/// <summary> ステータスプロパティ </summary>
			public int Status
			{
				get{ return this._status; }
			}
			#endregion
		}
		#endregion ■ Exception Class

		#region ■ IPrintProc メンバ
		#region ◆ Public Property
		/// <summary>
		/// 印刷情報取得プロパティ
		/// </summary>
		public SFCMN06002C Printinfo
		{
			get { return this._printInfo; }
			set { this._printInfo = value;}
		}
		#endregion ◆ Public Property

		#region ◆ Public Method
		#region ◎ 印刷処理開始
		/// <summary>
		/// 印刷処理開始
		/// </summary>
		/// <returns></returns>
		/// <remarks>
		/// <br>Note       : 印刷を開始する。</br>
		/// <br>Programmer : 20081 疋田 勇人</br>
		/// <br>Date       : 2007.11.13</br>
		/// </remarks>
		public int StartPrint ()
		{
			return PrintMain();
		}
		#endregion
		#endregion ◆ Public Method
		#endregion ■ IPrintProc メンバ

		#region ■ Private Member
		#region ◆ 印刷処理
		/// <summary>
		/// 印刷処理
		/// </summary>
		/// <returns>Status</returns>
		/// <remarks>
		/// <br>Note       : 印刷処理を行う。</br>
		/// <br>Programmer : 20081 疋田 勇人</br>
		/// <br>Date       : 2007.11.13</br>
		/// </remarks>
		private int PrintMain ()
		{
			int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
			// 印刷フォームクラスインスタンス作成
			DataDynamics.ActiveReports.ActiveReport3 prtRpt = null;
			
			try
			{
				// レポートインスタンス作成
				this.CreateReport(out prtRpt, this._printInfo.prpid); 
				if (prtRpt == null) return status;

				// 各種プロパティ設定
				status = this.SettingProperty(ref prtRpt);
				if (status != 0) return status;
							
				// データソース設定
				prtRpt.DataSource = this._printInfo.rdData;
                prtRpt.DataMember = DCZAI02184EA.ct_Tbl_StockOver;
				
				// 印刷共通情報プロパティ設定
				Broadleaf.Windows.Forms.SFCMN00293UC commonInfo;
			    this.SetPrintCommonInfo(out commonInfo);

			    // プレビュー有無				
			    int mode = this._printInfo.prevkbn;
				
			    // 出力モードがＰＤＦの場合、無条件でプレビュー無
			    if (this._printInfo.printmode == 2)
			    {
			        mode = 0;
			    }
				
			    switch(mode)
			    {
			        case 0:		// プレビュ無
			        {
			            Broadleaf.Windows.Forms.SFCMN00293UB processForm = new Broadleaf.Windows.Forms.SFCMN00293UB();
						
			            // 共通条件設定
			            processForm.CommonInfo = commonInfo;

			            // プログレスバーUPイベント追加
			            if (prtRpt is IPrintActiveReportTypeCommon)
			            {
			                ((IPrintActiveReportTypeCommon)prtRpt).ProgressBarUpEvent +=
			                    new ProgressBarUpEventHandler(processForm.ProgressBarUpEvent);
			            }

			            // 印刷実行
			            status = processForm.Run(prtRpt);

			            // 戻り値設定
			            this._printInfo.status = status;

			            break;
			        }
			        case 1:		// プレビュ有
			        {
			            Broadleaf.Windows.Forms.SFCMN00293UA viewForm = new Broadleaf.Windows.Forms.SFCMN00293UA();

			            // 共通条件設定
			            viewForm.CommonInfo   = commonInfo;

			            // プレビュー実行
			            status = viewForm.Run(prtRpt); 

			            // 戻り値設定
			            this._printInfo.status = status;
						
			            break;
			        }
			    }

			    // ＰＤＦ出力の場合
			    if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
			    {
			        switch (this._printInfo.printmode)
			        {
			            case 1:  // プリンタ
			                break;
			            case 2:  // ＰＤＦ
			            case 3:  // 両方(プリンタ + ＰＤＦ)
			            {
			                // ＰＤＦ表示フラグON
			                this._printInfo.pdfopen = true;
   
			                // 両方印刷時のみ履歴保存
			                if (this._printInfo.printmode == 3)
			                {
			                    // 出力履歴管理に追加
			                    Broadleaf.Windows.Forms.SFANL06101UA pdfHistoryControl = new Broadleaf.Windows.Forms.SFANL06101UA();
			                    pdfHistoryControl.AddPrintInfo(this._printInfo.key, this._printInfo.prpnm, this._printInfo.prpnm,
			                        this._printInfo.pdftemppath);
			                }
			                break;
			            }
			        }
			    }
			}
			catch(Exception ex)
			{
			    this.MsgDispProc(emErrorLevel.ERR_LEVEL_STOPDISP,
			        ex.Message, -1, MessageBoxButtons.OK, MessageBoxDefaultButton.Button1);
			}
			finally
			{
			    if ( prtRpt != null )
			    {
			        prtRpt.Dispose();
			    }
			}
			return status;
		}
		#endregion ◆ 印刷処理

		#region ◆ レポートフォーム設定関連
		#region ◎ 各種ActiveReport帳票インスタンス作成
		/// <summary>
		/// 各種ActiveReport帳票インスタンス作成
		/// </summary>
		/// <param name="rptObj">インスタンス化された帳票フォームクラス</param>
		/// <param name="prpid">帳票フォームID</param>
		/// <returns></returns>
		/// <remarks>
		/// <br>Note       : 指定されたアセンブリ及びクラス名より、クラスをインスタンス化します。</br>
		/// <br>Programmer : 20081 疋田 勇人</br>
		/// <br>Date       : 2007.11.13</br>
		/// </remarks>
		private void CreateReport(out DataDynamics.ActiveReports.ActiveReport3 rptObj,string prpid)
		{
			// 印刷フォームクラスインスタンス作成
			rptObj = (DataDynamics.ActiveReports.ActiveReport3)this.LoadAssemblyReport(
				prpid.Trim(), ct_ReportForm_NameSpace + "." + prpid.Trim(), 
				typeof(DataDynamics.ActiveReports.ActiveReport3));
		}
		#endregion

		#region ◎ レポートアセンブリインスタンス化
		/// <summary>
		/// レポートアセンブリインスタンス化
		/// </summary>
		/// <param name="asmname">アセンブリ名称</param>
		/// <param name="classname">クラス名称</param>
		/// <param name="type">実装するクラス型</param>
		/// <returns>インスタンス化されたクラス</returns>
		/// <remarks>
		/// <br>Note       : 指定されたアセンブリ及びクラス名より、クラスをインスタンス化します。</br>
		/// <br>Programmer : 20081 疋田 勇人</br>
		/// <br>Date       : 2007.11.13</br>
		/// </remarks>
		private	object LoadAssemblyReport(string asmname, string classname, Type type)
		{
			object	obj	= null;
			try
			{
				System.Reflection.Assembly	asm	= System.Reflection.Assembly.Load(asmname);
				Type	objType	= asm.GetType(classname);
				if (objType != null)
				{
					if ((objType == type) || (objType.IsSubclassOf(type) == true) || (objType.GetInterface(type.Name).Name == type.Name))
					{
						obj = Activator.CreateInstance(objType);
					}
				}
			}
			catch(System.IO.FileNotFoundException)
			{
				throw new StockMoveException(asmname + "が存在しません。",-1);
			}
			catch(System.Exception er)
			{
				throw new StockMoveException(er.Message, -1);
			}
			return obj;
		}
		#endregion

		#region ◎ 印刷画面共通情報設定

		/// <summary>
		/// 印刷画面共通情報設定
		/// </summary>
		/// <param name="commonInfo"></param>
		/// <returns>ステータス</returns>
		/// <remarks>
		/// <br>Note       : 印刷画面共通条件の設定を行います。</br>
		/// <br>Programmer : 20081 疋田 勇人</br>
		/// <br>Date       : 2007.11.13</br>
		/// </remarks>
		private void SetPrintCommonInfo(out Broadleaf.Windows.Forms.SFCMN00293UC commonInfo)
		{
			int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
			commonInfo = new Broadleaf.Windows.Forms.SFCMN00293UC();
			
			// 帳票チャート共通部品クラス
			SFCMN00331C cmnCommon = new SFCMN00331C(); 

			// PDFパス取得
			string pdfPath = "";
			string pdfName = "";
		
			// プリンタ名
			commonInfo.PrinterName = this._printInfo.prinm;
			// 帳票名
			commonInfo.PrintName   = this._printInfo.prpnm;				
			// 印刷モード
			commonInfo.PrintMode   = this.Printinfo.printmode;
			// 印刷件数
			//commonInfo.PrintMax    = 0;                                           //DEL 2009/03/10 不具合対応[12269]
            commonInfo.PrintMax = (this._printInfo.rdData as DataView).Count;       //ADD 2009/03/10 不具合対応[12269]
			
			status = cmnCommon.GetPdfSavePathName(this._printInfo.prpnm, ref pdfPath, ref pdfName);
			this._printInfo.pdftemppath = pdfPath + pdfName;
			commonInfo.PdfFullPath = this._printInfo.pdftemppath;

			// 上余白
			commonInfo.MarginsTop  = this._printInfo.py;
			// 左余白
			commonInfo.MarginsLeft = this._printInfo.px;
		}

		#endregion
		
		#region ◎ 各種プロパティ設定
		
		/// <summary>
		/// 各種プロパティ設定
		/// </summary>
		/// <param name="rpt">インスタンス化された帳票フォームクラス</param>
		/// <returns>ステータス</returns>
		/// <remarks>
		/// <br>Note       : 各種プロパティを設定します。</br>
		/// <br>Programmer : 20081 疋田 勇人</br>
		/// <br>Date       : 2007.11.13</br>
		/// </remarks>
		private int SettingProperty(ref DataDynamics.ActiveReports.ActiveReport3 rpt)
		{
			int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;

			// ActiveReportインターフェースにキャスト
			IPrintActiveReportTypeList instance = rpt as IPrintActiveReportTypeList;

			// 印刷条件取得
            StockOverListCndtn extraInfo = (StockOverListCndtn)this._printInfo.jyoken;

			// ソート順プロパティ設定
            instance.PageHeaderSortOderTitle = String.Format("[ソート順：{0}]", this._stockOverListCndtn.PrintSortDivStateTitle);
			
			// 帳票出力設定情報取得 
			PrtOutSet prtOutSet;
			string message;
            int st = StockOverListAcs.ReadPrtOutSet(out prtOutSet, out message);
			if (st != 0) 
			{
                throw new StockMoveException(message, status);
            }

   			// 抽出条件ヘッダ出力区分
			instance.ExtraCondHeadOutDiv = prtOutSet.ExtraCondHeadOutDiv;

			// 抽出条件編集処理
			StringCollection extraInfomations;
			this.MakeExtarCondition( out extraInfomations );

			instance.ExtraConditions = extraInfomations; 
			
			// フッタ出力区分
			instance.PageFooterOutCode   = prtOutSet.FooterPrintOutCode;

			// フッタ出力メッセージ
			StringCollection footers = new StringCollection();
			footers.Add(prtOutSet.PrintFooter1);
			footers.Add(prtOutSet.PrintFooter2);
			
			instance.PageFooters = footers;

			// 印刷情報オブジェクト
			instance.PrintInfo = this._printInfo;

			// ヘッダーサブタイトル
            //object[] titleObj = new object[] { this._stockOverListCndtn.ReportSubTitle, "在庫過剰一覧表" }; // DEL 2009/03/17
            object[] titleObj = new object[] { this._stockOverListCndtn.ReportSubTitle, "過剰在庫一覧表" }; // ADD 2009/03/17
            instance.PageHeaderSubtitle = string.Format("{0}{1}", titleObj);

			// その他データ
			instance.OtherDataList = null;

			status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;

			return status;
		}

		#endregion

		#region ◎ 抽出条件出力情報作成
		/// <summary>
		/// 抽出条件出力情報作成
		/// </summary>
		/// <param name="extraConditions">作成後抽出条件コレクション</param>
		/// <remarks>
		/// <br>Note       : 出力する抽出条件文字列を作成する。</br>
		/// <br>Programmer : 20081 疋田 勇人</br>
		/// <br>Date       : 2007.11.13</br>
        /// <br>Update     : 2008/10/02 照田 貴志　バグ修正、仕様変更対応</br>
        /// <br>Update     : 2008/10/03 行澤 仁美　バグ修正、仕様変更対応</br>
		/// </remarks>
		private void MakeExtarCondition( out StringCollection extraConditions )
		{
            extraConditions = new StringCollection();
            StringCollection addConditions = new StringCollection();

            //--- DEL 2008/10/03 不具合対応[6075] ----------<<<<<
            //// 対象年月 ------------------------------------------------------------------------------------------------------
            //string st_ShipArrivalDate = string.Empty;
            //string ed_ShipArrivalDate = string.Empty;

            //// 開始･終了のいずれかが入力されていれば印字
            //if ( ( this._stockOverListCndtn.St_AddUpYearMonth != DateTime.MinValue ) || ( this._stockOverListCndtn.Ed_AddUpYearMonth != DateTime.MinValue ) ) {
            //    // 開始
            //    if ( this._stockOverListCndtn.St_AddUpYearMonth != DateTime.MinValue )
            //        //st_ShipArrivalDate = this._stockOverListCndtn.St_AddUpYearMonth.ToString("yyyy年MM月");       //DEL 2008/10/02 書式変更
            //        st_ShipArrivalDate = this._stockOverListCndtn.St_AddUpYearMonth.ToString("yyyy/MM");            //ADD 2008/10/02
            //    else
            //        st_ShipArrivalDate = ct_Extr_Top;
            //    // 終了
            //    if ( this._stockOverListCndtn.Ed_AddUpYearMonth != DateTime.MinValue )
            //        //ed_ShipArrivalDate = this._stockOverListCndtn.Ed_AddUpYearMonth.ToString("yyyy年MM月");       //DEL 2008/10/02 書式変更
            //        ed_ShipArrivalDate = this._stockOverListCndtn.Ed_AddUpYearMonth.ToString("yyyy/MM");            //ADD 2008/10/02
            //    else
            //        ed_ShipArrivalDate = ct_Extr_End;

            //    this.EditCondition(
            //        ref addConditions,
            //        string.Format(
            //            "処理月" + ct_RangeConst,
            //            st_ShipArrivalDate,
            //            ed_ShipArrivalDate));
            //}
            //--- DEL 2008/10/03 不具合対応[6075] ---------->>>>>

            // 在庫登録日 ----------------------------------------------------------------------------------------------------
            if (this._stockOverListCndtn.StockCreateDate != DateTime.MinValue) // ADD 2009/04/02
            {
                this.EditCondition(ref addConditions, String.Format("在庫登録日：{0}{1}",
                    //this._stockOverListCndtn.StockCreateDate.ToString("yyyy年MM月dd日"),      //DEL 2008/10/02 書式変更
                                                                        this._stockOverListCndtn.StockCreateDate.ToString("yyyy/MM/dd"),            //ADD 2008/10/02
                                                                        this._stockOverListCndtn.StockCreateDateDivStateTitle));
            }

            //--- ADD 2008/10/03 不具合対応[6074] ----------<<<<<
            // 未出荷経過月 ----------------------------------------------------------------------------------------------------
            if (this._stockOverListCndtn.NoShipmentDiv == 1)
            {                
                string st_ShipArrivalDate = string.Empty;
                string ed_ShipArrivalDate = string.Empty;

                if ((this._stockOverListCndtn.St_AddUpYearMonth != DateTime.MinValue) || (this._stockOverListCndtn.Ed_AddUpYearMonth != DateTime.MinValue))
                {
                    // 開始
                    if (this._stockOverListCndtn.St_AddUpYearMonth != DateTime.MinValue)
                        st_ShipArrivalDate = this._stockOverListCndtn.St_AddUpYearMonth.ToString("yyyy/MM");            
                    else
                        st_ShipArrivalDate = ct_Extr_Top;
                    // 終了
                    if (this._stockOverListCndtn.Ed_AddUpYearMonth != DateTime.MinValue)
                        ed_ShipArrivalDate = this._stockOverListCndtn.Ed_AddUpYearMonth.ToString("yyyy/MM");          
                    else
                        ed_ShipArrivalDate = ct_Extr_End;

                    this.EditCondition(
                        ref addConditions,
                        string.Format(
                            "未出荷経過月" + ct_RangeConst,
                            st_ShipArrivalDate,
                            ed_ShipArrivalDate));
                }
            }
            // 管理区分１ ----------------------------------------------------------------------------------------------------
            if (this._stockOverListCndtn.PartsManagementDivide1.Length != 0)
            {
                StringBuilder PartsData1 = new StringBuilder();

                for (int i = 0; i < this._stockOverListCndtn.PartsManagementDivide1.Length; i++)
                {
                    PartsData1.Append(this._stockOverListCndtn.PartsManagementDivide1[i]);
                }

                this.EditCondition(ref addConditions, String.Format("管理区分１: {0}",                                                                    PartsData1));
            }
            
            // 管理区分２ ----------------------------------------------------------------------------------------------------
            if (this._stockOverListCndtn.PartsManagementDivide2.Length != 0)
            {
                StringBuilder PartsData2 = new StringBuilder();

                for (int i = 0; i < this._stockOverListCndtn.PartsManagementDivide2.Length; i++)
                {
                    PartsData2.Append(this._stockOverListCndtn.PartsManagementDivide2[i]);
                }

                this.EditCondition(ref addConditions, String.Format("管理区分２: {0}", PartsData2));
            }

            // 棚番ブレイク指定 ----------------------------------------------------------------------------------------------
            if (this._stockOverListCndtn.PrintSortDiv == StockOverListCndtn.PrintSortDivState.ByWarehouseShelfNo)
            {
                this.EditCondition(ref addConditions, String.Format("棚番ブレーク: {0}",
                                                                    this._stockOverListCndtn.WarehouseShelfNoBreakDiv.ToString().Substring(6,1) + "桁"));
            }

            // 倉庫 ----------------------------------------------------------------------------------------------------------
            if (!RangeUtil.WarehouseCode.IsAllRange(this._stockOverListCndtn.St_WarehouseCode, this._stockOverListCndtn.Ed_WarehouseCode)) 
            {
                string start = RangeUtil.WarehouseCode.GetStartString(this._stockOverListCndtn.St_WarehouseCode);
                string end = RangeUtil.WarehouseCode.GetEndString(this._stockOverListCndtn.Ed_WarehouseCode);

                this.EditCondition(
                    ref addConditions,
                    string.Format("倉庫" + ct_RangeConst, start, end)
                );
            }

            // 仕入先 --------------------------------------------------------------------------------------------------------
            if (!RangeUtil.SupplierCode.IsAllRange(this._stockOverListCndtn.St_SupplierCd, this._stockOverListCndtn.Ed_SupplierCd)) 
            {
                string start = RangeUtil.SupplierCode.GetStartString(this._stockOverListCndtn.St_SupplierCd);
                string end = RangeUtil.SupplierCode.GetEndString(this._stockOverListCndtn.Ed_SupplierCd);

                EditCondition(
                    ref addConditions,
                    string.Format("仕入先" + ct_RangeConst, start, end)
                );
            }

            // メーカー ------------------------------------------------------------------------------------------------------
            if (!RangeUtil.GoodsMakerCode.IsAllRange(this._stockOverListCndtn.St_GoodsMakerCd, this._stockOverListCndtn.Ed_GoodsMakerCd))   
            {
                string start = RangeUtil.GoodsMakerCode.GetStartString(this._stockOverListCndtn.St_GoodsMakerCd);
                string end = RangeUtil.GoodsMakerCode.GetEndString(this._stockOverListCndtn.Ed_GoodsMakerCd);

                this.EditCondition(
                    ref addConditions,
                    string.Format("メーカー" + ct_RangeConst, start, end)
                );

            }

            // 倉庫棚番 ------------------------------------------------------------------------------------------------------
            if (this._stockOverListCndtn.St_WarehouseShelfNo != string.Empty || this._stockOverListCndtn.Ed_WarehouseShelfNo != string.Empty)
            {
                string st_WarehouseShelfNo = this._stockOverListCndtn.St_WarehouseShelfNo;
                string ed_WarehouseShelfNo = this._stockOverListCndtn.Ed_WarehouseShelfNo;

                if (st_WarehouseShelfNo == string.Empty)
                    st_WarehouseShelfNo = ct_Extr_Top;
                if (ed_WarehouseShelfNo == string.Empty)
                    ed_WarehouseShelfNo = ct_Extr_End;

                this.EditCondition(
                    ref addConditions,
                    string.Format("棚番" + ct_RangeConst, st_WarehouseShelfNo, ed_WarehouseShelfNo));
            }

            // 品番 ----------------------------------------------------------------------------------------------------------
            if (this._stockOverListCndtn.St_GoodsNo != string.Empty || this._stockOverListCndtn.Ed_GoodsNo != string.Empty)
            {
                string st_GoodsNo = this._stockOverListCndtn.St_GoodsNo;
                string ed_GoodsNo = this._stockOverListCndtn.Ed_GoodsNo;

                if (st_GoodsNo == string.Empty)
                    st_GoodsNo = ct_Extr_Top;
                if (ed_GoodsNo == string.Empty)
                    ed_GoodsNo = ct_Extr_End;

                this.EditCondition(
                    ref addConditions,
                    string.Format("品番" + ct_RangeConst, st_GoodsNo, ed_GoodsNo));         
            }

            // 商品大分類 ----------------------------------------------------------------------------------------------------
            if (!RangeUtil.GoodsLGroupCode.IsAllRange(this._stockOverListCndtn.St_LargeGoodsGanreCode, this._stockOverListCndtn.Ed_LargeGoodsGanreCode))
            {
                string start = RangeUtil.GoodsLGroupCode.GetStartString(this._stockOverListCndtn.St_LargeGoodsGanreCode);
                string end = RangeUtil.GoodsLGroupCode.GetEndString(this._stockOverListCndtn.Ed_LargeGoodsGanreCode);

                this.EditCondition(
                    ref addConditions,
                    string.Format("商品大分類" + ct_RangeConst, start, end)
                );
            }

            // 商品中分類 ----------------------------------------------------------------------------------------------------
            if (!RangeUtil.GoodsMGroupCode.IsAllRange(this._stockOverListCndtn.St_MediumGoodsGanreCode, this._stockOverListCndtn.Ed_MediumGoodsGanreCode))
            {
                string start = RangeUtil.GoodsMGroupCode.GetStartString(this._stockOverListCndtn.St_MediumGoodsGanreCode);
                string end = RangeUtil.GoodsMGroupCode.GetEndString(this._stockOverListCndtn.Ed_MediumGoodsGanreCode);

                this.EditCondition(
                    ref addConditions,
                    string.Format("商品中分類" + ct_RangeConst, start, end)
                );
            }

            // 商品グループ --------------------------------------------------------------------------------------------------
            if (!RangeUtil.BLGroupCode.IsAllRange(this._stockOverListCndtn.St_DetailGoodsGanreCode, this._stockOverListCndtn.Ed_DetailGoodsGanreCode))
            {
                string start = RangeUtil.BLGroupCode.GetStartString(this._stockOverListCndtn.St_DetailGoodsGanreCode);
                string end = RangeUtil.BLGroupCode.GetEndString(this._stockOverListCndtn.Ed_DetailGoodsGanreCode);

                this.EditCondition(
                    ref addConditions,
                    string.Format("グループコード" + ct_RangeConst, start, end)
                );
            }

            // 商品区分 ------------------------------------------------------------------------------------------------------
            if (!RangeUtil.EnterpriseGanreCode.IsAllRange(this._stockOverListCndtn.St_EnterpriseGanreCode, this._stockOverListCndtn.Ed_EnterpriseGanreCode))
            {
                string start = RangeUtil.EnterpriseGanreCode.GetStartString(this._stockOverListCndtn.St_EnterpriseGanreCode);
                string end = RangeUtil.EnterpriseGanreCode.GetEndString(this._stockOverListCndtn.Ed_EnterpriseGanreCode);

                this.EditCondition(
                    ref addConditions,
                    string.Format("商品区分" + ct_RangeConst, start, end)
                );
            }

            // ＢＬコード ----------------------------------------------------------------------------------------------------
            if (!RangeUtil.BLGoodsCode.IsAllRange(this._stockOverListCndtn.St_BLGoodsCode, this._stockOverListCndtn.Ed_BLGoodsCode))   
            {
                string start = RangeUtil.BLGoodsCode.GetStartString(this._stockOverListCndtn.St_BLGoodsCode);
                string end = RangeUtil.BLGoodsCode.GetEndString(this._stockOverListCndtn.Ed_BLGoodsCode);

                EditCondition(
                    ref addConditions,
                    string.Format("ＢＬコード" + ct_RangeConst, start, end)
                );
            }
            //--- ADD 2008/10/03 不具合対応[6074] ---------->>>>>

            // 追加
            foreach ( string exCondStr in addConditions ) {
                extraConditions.Add(exCondStr);
            }
        }
		#endregion

		#region ◎ 抽出範囲文字列作成
		/// <summary>
		/// 抽出範囲文字列作成
		/// </summary>
		/// <returns>作成文字列</returns>
		/// <remarks>
		/// <br>Note       : 抽出範囲文字列を作成します</br>
		/// <br>Programmer : 20081 疋田 勇人</br>
		/// <br>Date       : 2007.11.13</br>
		/// </remarks>
		private string GetConditionRange( string title, string startString, string endString )
		{
			string result = "";
			if ((startString != "") || (endString != ""))
			{
				string start = ct_Extr_Top;
				string end	 = ct_Extr_End;
				if (startString	!= "")	start	= startString;
				if (endString	!= "")	end		= endString;
				result = String.Format(title + ct_RangeConst, start, end);
			}
			return result;
		}
		#endregion

		#region ◎ 抽出条件文字列編集
		/// <summary>
		/// 抽出条件文字列編集
		/// </summary>
		/// <param name="editArea">格納エリア</param>
		/// <param name="target">対象文字列</param>
		/// <remarks>
		/// <br>Note       : 出力する抽出条件文字列を編集します。</br>
		/// <br>Programmer : 20081 疋田 勇人</br>
		/// <br>Date       : 2007.11.13</br>
		/// </remarks>
		private void EditCondition(ref StringCollection editArea, string target)
		{
			bool isEdit = false;
			
			// 編集対象文字バイト数算出
			int targetByte = TStrConv.SizeCountSJIS(target);
			
			for (int i = 0; i < editArea.Count; i++)
			{
				int areaByte = 0;
				
				// 格納エリアのバイト数算出
				if (editArea[i] != null)
				{
					areaByte = TStrConv.SizeCountSJIS(editArea[i]);
				}

				if ((areaByte + targetByte + 2) <= 190)
				{
					isEdit = true;

					// 全角スペースを挿入
					if (editArea[i] != null) editArea[i] += ct_Space;
					
					editArea[i]  += target;
					break;
				}
			}
			// 新規編集エリア作成
			if (!isEdit)
			{
				editArea.Add(target);
			}
		}
		#endregion
		#endregion ◆ レポートフォーム設定関連

		#region ◎ メッセージ表示

		/// <summary>
		/// メッセージ表示
		/// </summary>
		/// <param name="iLevel">エラーレベル</param>
		/// <param name="iMsg">エラーメッセージ</param>
		/// <param name="iSt">ステータス</param>
		/// <param name="iButton">表示ボタン</param>
		/// <param name="iDefButton">デフォルトフォーカスボタン</param>
		/// <returns>DialogResult</returns>
		/// <remarks>
		/// <br>Note       : 出力件数の設定を行います。</br>
		/// <br>Programmer : 20081 疋田 勇人</br>
		/// <br>Date       : 2007.11.13</br>
		/// </remarks>
		private DialogResult MsgDispProc(emErrorLevel iLevel, string iMsg, int iSt, MessageBoxButtons iButton, MessageBoxDefaultButton iDefButton)
		{
			return TMsgDisp.Show(iLevel, "DCZAI02182P", iMsg, iSt, iButton, iDefButton);
		}

		#endregion

        // ADD 2008/10/06 不具合対応[6074]---------->>>>>
        #region <範囲関連/>

        /// <summary>
        /// 範囲ユーティリティ
        /// </summary>
        /// <remarks>
        /// <br>Note       : 各コードの範囲と桁の情報を提供します。</br>
        /// <br>Programmer : 30434 工藤 恵優</br>
        /// <br>Date       : 2008.09.30</br>
        /// </remarks>
        public static class RangeUtil
        {
            /// <summary>最初から</summary>
            public const string FROM_BEGIN = "最初から";
            /// <summary>最後まで</summary>
            public const string TO_END = "最後まで";

            /// <summary>
            /// 最初からか判定します。
            /// </summary>
            /// <param name="startCode">開始コード</param>
            /// <param name="minNumber">最小値</param>
            /// <returns><c>true</c> :最初から<br/><c>false</c>:最初からではない</returns>
            private static bool IsFromBegin(
                string startCode,
                int minNumber
            )
            {
                if (string.IsNullOrEmpty(startCode)) return true;

                int startNumber = -1;
                if (int.TryParse(startCode, out startNumber))
                {
                    return startNumber < minNumber;
                }
                else
                {
                    return false;
                }
            }

            /// <summary>
            /// 最後までか判定します。
            /// </summary>
            /// <param name="endCode">終了コード</param>
            /// <param name="maxNumber">最大値</param>
            /// <returns><c>true</c> :最後まで<br/><c>false</c>:最後までではない</returns>
            private static bool IsToEnd(
                string endCode,
                int maxNumber
            )
            {
                if (string.IsNullOrEmpty(endCode)) return true;

                int endNumber = -1;
                if (int.TryParse(endCode, out endNumber))
                {
                    return endNumber >= maxNumber;
                }
                else
                {
                    return false;
                }
            }

            #region <倉庫コード/>

            /// <summary>
            /// 倉庫：倉庫コード
            /// </summary>
            public static class WarehouseCode
            {
                /// <summary>ラベル</summary>
                public const string LABEL = "倉庫";
                /// <summary>最小値</summary>
                public const int MIN = 1;
                /// <summary>最大値</summary>
                public const int MAX = 9999;
                /// <summary>数値フォーマット</summary>
                public const string NUMBER_FORMAT = "0000";

                /// <summary>
                /// 全範囲か判定します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <param name="endCode">終了コード</param>
                /// <returns><c>true</c> :全範囲である<br/><c>false</c>:全範囲ではない</returns>
                public static bool IsAllRange(string startCode, string endCode)
                {
                    return IsFromBegin(startCode, MIN) && IsToEnd(endCode, MAX);
                }

                /// <summary>
                /// 開始文字列を取得します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <returns>開始文字列</returns>
                public static string GetStartString(string startCode)
                {
                    return IsFromBegin(startCode, MIN) ? FROM_BEGIN : startCode.PadLeft(NUMBER_FORMAT.Length, '0');
                }

                /// <summary>
                /// 終了文字列を取得します。
                /// </summary>
                /// <param name="endCode">終了コード</param>
                /// <returns>終了文字列</returns>
                public static string GetEndString(string endCode)
                {
                    return IsToEnd(endCode, MAX) ? TO_END : endCode.PadLeft(NUMBER_FORMAT.Length, '0');
                }
            }

            #endregion  // <倉庫コード/>

            #region <仕入先コード/>

            /// <summary>
            /// 仕入先：仕入先コード
            /// </summary>
            public static class SupplierCode
            {
                /// <summary>ラベル</summary>
                public const string LABEL = "仕入先";
                /// <summary>最小値</summary>
                public const int MIN = 1;
                /// <summary>最大値</summary>
                public const int MAX = 999999;
                /// <summary>数値フォーマット</summary>
                public const string NUMBER_FORMAT = "000000";

                /// <summary>
                /// 全範囲か判定します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <param name="endCode">終了コード</param>
                /// <returns><c>true</c> :全範囲である<br/><c>false</c>:全範囲ではない</returns>
                public static bool IsAllRange(int startCode, int endCode)
                {
                    return IsFromBegin(startCode.ToString(), MIN) && IsToEnd(endCode.ToString(), MAX);
                }

                /// <summary>
                /// 開始文字列を取得します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <returns>開始文字列</returns>
                public static string GetStartString(int startCode)
                {
                    return IsFromBegin(startCode.ToString(), MIN) ? FROM_BEGIN : startCode.ToString(NUMBER_FORMAT);
                }

                /// <summary>
                /// 終了文字列を取得します。
                /// </summary>
                /// <param name="endCode">終了コード</param>
                /// <returns>終了文字列</returns>
                public static string GetEndString(int endCode)
                {
                    return IsToEnd(endCode.ToString(), MAX) ? TO_END : endCode.ToString(NUMBER_FORMAT);
                }
            }

            #endregion

            #region <商品メーカーコード/>

            /// <summary>
            /// メーカー：商品メーカーコード
            /// </summary>
            public static class GoodsMakerCode
            {
                /// <summary>ラベル</summary>
                public const string LABEL = "メーカー";
                /// <summary>最小値</summary>
                public const int MIN = 1;
                /// <summary>最大値</summary>
                public const int MAX = 9999;
                /// <summary>数値フォーマット</summary>
                public const string NUMBER_FORMAT = "0000";

                /// <summary>
                /// 全範囲か判定します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <param name="endCode">終了コード</param>
                /// <returns><c>true</c> :全範囲である<br/><c>false</c>:全範囲ではない</returns>
                public static bool IsAllRange(int startCode, int endCode)
                {
                    return IsFromBegin(startCode.ToString(), MIN) && IsToEnd(endCode.ToString(), MAX);
                }

                /// <summary>
                /// 開始文字列を取得します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <returns>開始文字列</returns>
                public static string GetStartString(int startCode)
                {
                    return IsFromBegin(startCode.ToString(), MIN) ? FROM_BEGIN : startCode.ToString(NUMBER_FORMAT);
                }

                /// <summary>
                /// 終了文字列を取得します。
                /// </summary>
                /// <param name="endCode">終了コード</param>
                /// <returns>終了文字列</returns>
                public static string GetEndString(int endCode)
                {
                    return IsToEnd(endCode.ToString(), MAX) ? TO_END : endCode.ToString(NUMBER_FORMAT);
                }
            }

            #endregion  // <商品メーカーコード/>

            #region <商品大分類コード/>

            /// <summary>
            /// 商品大分類：商品大分類コード
            /// </summary>
            public static class GoodsLGroupCode
            {
                /// <summary>ラベル</summary>
                public const string LABEL = "商品大分類";
                /// <summary>最小値</summary>
                public const int MIN = 1;
                /// <summary>最大値</summary>
                public const int MAX = 9999;
                /// <summary>数値フォーマット</summary>
                public const string NUMBER_FORMAT = "0000";

                /// <summary>
                /// 全範囲か判定します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <param name="endCode">終了コード</param>
                /// <returns><c>true</c> :全範囲である<br/><c>false</c>:全範囲ではない</returns>
                public static bool IsAllRange(int startCode, int endCode)
                {
                    return IsFromBegin(startCode.ToString(), MIN) && IsToEnd(endCode.ToString(), MAX);
                }

                /// <summary>
                /// 全範囲か判定します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <param name="endCode">終了コード</param>
                /// <returns><c>true</c> :全範囲である<br/><c>false</c>:全範囲ではない</returns>
                public static bool IsAllRange(string startCode, string endCode)
                {
                    return IsFromBegin(startCode, MIN) && IsToEnd(endCode, MAX);
                }

                /// <summary>
                /// 開始文字列を取得します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <returns>開始文字列</returns>
                public static string GetStartString(int startCode)
                {
                    return IsFromBegin(startCode.ToString(), MIN) ? FROM_BEGIN : startCode.ToString(NUMBER_FORMAT);
                }

                /// <summary>
                /// 終了文字列を取得します。
                /// </summary>
                /// <param name="endCode">終了コード</param>
                /// <returns>終了文字列</returns>
                public static string GetEndString(int endCode)
                {
                    return IsToEnd(endCode.ToString(), MAX) ? TO_END : endCode.ToString(NUMBER_FORMAT);
                }

                /// <summary>
                /// 開始文字列を取得します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <returns>開始文字列</returns>
                public static string GetStartString(string startCode)
                {
                    return IsFromBegin(startCode, MIN) ? FROM_BEGIN : startCode.PadLeft(NUMBER_FORMAT.Length, '0');
                }

                /// <summary>
                /// 終了文字列を取得します。
                /// </summary>
                /// <param name="endCode">終了コード</param>
                /// <returns>終了文字列</returns>
                public static string GetEndString(string endCode)
                {
                    return IsToEnd(endCode, MAX) ? TO_END : endCode.PadLeft(NUMBER_FORMAT.Length, '0');
                }
            }

            #endregion  // <商品大分類コード/>

            #region <商品中分類コード/>

            /// <summary>
            /// 商品中分類：商品中分類コード
            /// </summary>
            public static class GoodsMGroupCode
            {
                /// <summary>ラベル</summary>
                public const string LABEL = "商品中分類";
                /// <summary>最小値</summary>
                public const int MIN = 1;
                /// <summary>最大値</summary>
                public const int MAX = 9999;
                /// <summary>数値フォーマット</summary>
                public const string NUMBER_FORMAT = "0000";

                /// <summary>
                /// 全範囲か判定します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <param name="endCode">終了コード</param>
                /// <returns><c>true</c> :全範囲である<br/><c>false</c>:全範囲ではない</returns>
                public static bool IsAllRange(int startCode, int endCode)
                {
                    return IsFromBegin(startCode.ToString(), MIN) && IsToEnd(endCode.ToString(), MAX);
                }

                /// <summary>
                /// 全範囲か判定します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <param name="endCode">終了コード</param>
                /// <returns><c>true</c> :全範囲である<br/><c>false</c>:全範囲ではない</returns>
                public static bool IsAllRange(string startCode, string endCode)
                {
                    return IsFromBegin(startCode, MIN) && IsToEnd(endCode, MAX);
                }

                /// <summary>
                /// 開始文字列を取得します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <returns>開始文字列</returns>
                public static string GetStartString(int startCode)
                {
                    return IsFromBegin(startCode.ToString(), MIN) ? FROM_BEGIN : startCode.ToString(NUMBER_FORMAT);
                }

                /// <summary>
                /// 終了文字列を取得します。
                /// </summary>
                /// <param name="endCode">終了コード</param>
                /// <returns>終了文字列</returns>
                public static string GetEndString(int endCode)
                {
                    return IsToEnd(endCode.ToString(), MAX) ? TO_END : endCode.ToString(NUMBER_FORMAT);
                }

                /// <summary>
                /// 開始文字列を取得します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <returns>開始文字列</returns>
                public static string GetStartString(string startCode)
                {
                    return IsFromBegin(startCode, MIN) ? FROM_BEGIN : startCode.PadLeft(NUMBER_FORMAT.Length, '0');
                }

                /// <summary>
                /// 終了文字列を取得します。
                /// </summary>
                /// <param name="endCode">終了コード</param>
                /// <returns>終了文字列</returns>
                public static string GetEndString(string endCode)
                {
                    return IsToEnd(endCode, MAX) ? TO_END : endCode.PadLeft(NUMBER_FORMAT.Length, '0');
                }
            }

            #endregion  // <商品中分類コード/>

            #region <ＢＬグループコード/>

            /// <summary>
            /// グループコード：BLグループコード
            /// </summary>
            public static class BLGroupCode
            {
                /// <summary>ラベル</summary>
                public const string LABEL = "グループコード";
                /// <summary>最小値</summary>
                public const int MIN = 1;
                /// <summary>最大値</summary>
                public const int MAX = 99999;
                /// <summary>数値フォーマット</summary>
                public const string NUMBER_FORMAT = "00000";

                /// <summary>
                /// 全範囲か判定します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <param name="endCode">終了コード</param>
                /// <returns><c>true</c> :全範囲である<br/><c>false</c>:全範囲ではない</returns>
                public static bool IsAllRange(int startCode, int endCode)
                {
                    return IsFromBegin(startCode.ToString(), MIN) && IsToEnd(endCode.ToString(), MAX);
                }

                /// <summary>
                /// 全範囲か判定します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <param name="endCode">終了コード</param>
                /// <returns><c>true</c> :全範囲である<br/><c>false</c>:全範囲ではない</returns>
                public static bool IsAllRange(string startCode, string endCode)
                {
                    return IsFromBegin(startCode, MIN) && IsToEnd(endCode, MAX);
                }

                /// <summary>
                /// 開始文字列を取得します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <returns>開始文字列</returns>
                public static string GetStartString(int startCode)
                {
                    return IsFromBegin(startCode.ToString(), MIN) ? FROM_BEGIN : startCode.ToString(NUMBER_FORMAT);
                }

                /// <summary>
                /// 終了文字列を取得します。
                /// </summary>
                /// <param name="endCode">終了コード</param>
                /// <returns>終了文字列</returns>
                public static string GetEndString(int endCode)
                {
                    return IsToEnd(endCode.ToString(), MAX) ? TO_END : endCode.ToString(NUMBER_FORMAT);
                }

                /// <summary>
                /// 開始文字列を取得します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <returns>開始文字列</returns>
                public static string GetStartString(string startCode)
                {
                    return IsFromBegin(startCode, MIN) ? FROM_BEGIN : startCode.PadLeft(NUMBER_FORMAT.Length, '0');
                }

                /// <summary>
                /// 終了文字列を取得します。
                /// </summary>
                /// <param name="endCode">終了コード</param>
                /// <returns>終了文字列</returns>
                public static string GetEndString(string endCode)
                {
                    return IsToEnd(endCode, MAX) ? TO_END : endCode.PadLeft(NUMBER_FORMAT.Length, '0');
                }
            }

            #endregion  // <ＢＬグループコード/>

            #region <自社分類コード/>

            /// <summary>
            /// 商品区分：自社分類コード
            /// </summary>
            public static class EnterpriseGanreCode
            {
                /// <summary>ラベル</summary>
                public const string LABEL = "商品区分";
                /// <summary>最小値</summary>
                public const int MIN = 1;
                /// <summary>最大値</summary>
                public const int MAX = 9999;
                /// <summary>数値フォーマット</summary>
                public const string NUMBER_FORMAT = "0000";

                /// <summary>
                /// 全範囲か判定します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <param name="endCode">終了コード</param>
                /// <returns><c>true</c> :全範囲である<br/><c>false</c>:全範囲ではない</returns>
                public static bool IsAllRange(int startCode, int endCode)
                {
                    return IsFromBegin(startCode.ToString(), MIN) && IsToEnd(endCode.ToString(), MAX);
                }

                /// <summary>
                /// 開始文字列を取得します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <returns>開始文字列</returns>
                public static string GetStartString(int startCode)
                {
                    return IsFromBegin(startCode.ToString(), MIN) ? FROM_BEGIN : startCode.ToString(NUMBER_FORMAT);
                }

                /// <summary>
                /// 終了文字列を取得します。
                /// </summary>
                /// <param name="endCode">終了コード</param>
                /// <returns>終了文字列</returns>
                public static string GetEndString(int endCode)
                {
                    return IsToEnd(endCode.ToString(), MAX) ? TO_END : endCode.ToString(NUMBER_FORMAT);
                }
            }

            #endregion  // <自社分類コード/>

            #region <ＢＬコード/>

            /// <summary>
            /// BLコード：BLコード
            /// </summary>
            public static class BLGoodsCode
            {
                /// <summary>ラベル</summary>
                public const string LABEL = "ＢＬコード";
                /// <summary>最小値</summary>
                public const int MIN = 1;
                /// <summary>最大値</summary>
                public const int MAX = 99999;
                /// <summary>数値フォーマット</summary>
                public const string NUMBER_FORMAT = "00000";

                /// <summary>
                /// 全範囲か判定します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <param name="endCode">終了コード</param>
                /// <returns><c>true</c> :全範囲である<br/><c>false</c>:全範囲ではない</returns>
                public static bool IsAllRange(int startCode, int endCode)
                {
                    return IsFromBegin(startCode.ToString(), MIN) && IsToEnd(endCode.ToString(), MAX);
                }

                /// <summary>
                /// 開始文字列を取得します。
                /// </summary>
                /// <param name="startCode">開始コード</param>
                /// <returns>開始文字列</returns>
                public static string GetStartString(int startCode)
                {
                    return IsFromBegin(startCode.ToString(), MIN) ? FROM_BEGIN : startCode.ToString(NUMBER_FORMAT);
                }

                /// <summary>
                /// 終了文字列を取得します。
                /// </summary>
                /// <param name="endCode">終了コード</param>
                /// <returns>終了文字列</returns>
                public static string GetEndString(int endCode)
                {
                    return IsToEnd(endCode.ToString(), MAX) ? TO_END : endCode.ToString(NUMBER_FORMAT);
                }
            }

            #endregion  // <ＢＬコード：ＢＬコード/>
        }

        #endregion  // <範囲/>
        // ADD 2008/10/06 不具合対応[6074]----------<<<<<
		#endregion
	}
}
