//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3031
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.Controller.Agent {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("OperationSettingMasterDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class OperationSettingMasterDataSet : global::System.Data.DataSet {
        
        private OperationSettingMasterDataTable tableOperationSettingMaster;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OperationSettingMasterDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected OperationSettingMasterDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["OperationSettingMaster"] != null)) {
                    base.Tables.Add(new OperationSettingMasterDataTable(ds.Tables["OperationSettingMaster"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OperationSettingMasterDataTable OperationSettingMaster {
            get {
                return this.tableOperationSettingMaster;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            OperationSettingMasterDataSet cln = ((OperationSettingMasterDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["OperationSettingMaster"] != null)) {
                    base.Tables.Add(new OperationSettingMasterDataTable(ds.Tables["OperationSettingMaster"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableOperationSettingMaster = ((OperationSettingMasterDataTable)(base.Tables["OperationSettingMaster"]));
            if ((initTable == true)) {
                if ((this.tableOperationSettingMaster != null)) {
                    this.tableOperationSettingMaster.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "OperationSettingMasterDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/OperationSettingMasterDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableOperationSettingMaster = new OperationSettingMasterDataTable();
            base.Tables.Add(this.tableOperationSettingMaster);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOperationSettingMaster() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            OperationSettingMasterDataSet ds = new OperationSettingMasterDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void OperationSettingMasterRowChangeEventHandler(object sender, OperationSettingMasterRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OperationSettingMasterDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCreateDateTime;
            
            private global::System.Data.DataColumn columnUpdateDateTime;
            
            private global::System.Data.DataColumn columnEnterpriseCode;
            
            private global::System.Data.DataColumn columnFileHeaderGuid;
            
            private global::System.Data.DataColumn columnUpdEmployeeCode;
            
            private global::System.Data.DataColumn columnUpdAssemblyId1;
            
            private global::System.Data.DataColumn columnUpdAssemblyId2;
            
            private global::System.Data.DataColumn columnLogicalDeleteCode;
            
            private global::System.Data.DataColumn columnOperationStDiv;
            
            private global::System.Data.DataColumn columnCategoryCode;
            
            private global::System.Data.DataColumn columnPgId;
            
            private global::System.Data.DataColumn columnOperationCode;
            
            private global::System.Data.DataColumn columnAuthorityLevel1;
            
            private global::System.Data.DataColumn columnAuthorityLevel2;
            
            private global::System.Data.DataColumn columnEmployeeCode;
            
            private global::System.Data.DataColumn columnLimitDiv;
            
            private global::System.Data.DataColumn columnApplyStartDate;
            
            private global::System.Data.DataColumn columnApplyEndDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationSettingMasterDataTable() {
                this.TableName = "OperationSettingMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperationSettingMasterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OperationSettingMasterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateTimeColumn {
                get {
                    return this.columnCreateDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateTimeColumn {
                get {
                    return this.columnUpdateDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnterpriseCodeColumn {
                get {
                    return this.columnEnterpriseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileHeaderGuidColumn {
                get {
                    return this.columnFileHeaderGuid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdEmployeeCodeColumn {
                get {
                    return this.columnUpdEmployeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdAssemblyId1Column {
                get {
                    return this.columnUpdAssemblyId1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdAssemblyId2Column {
                get {
                    return this.columnUpdAssemblyId2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogicalDeleteCodeColumn {
                get {
                    return this.columnLogicalDeleteCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperationStDivColumn {
                get {
                    return this.columnOperationStDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryCodeColumn {
                get {
                    return this.columnCategoryCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PgIdColumn {
                get {
                    return this.columnPgId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperationCodeColumn {
                get {
                    return this.columnOperationCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuthorityLevel1Column {
                get {
                    return this.columnAuthorityLevel1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuthorityLevel2Column {
                get {
                    return this.columnAuthorityLevel2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LimitDivColumn {
                get {
                    return this.columnLimitDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplyStartDateColumn {
                get {
                    return this.columnApplyStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplyEndDateColumn {
                get {
                    return this.columnApplyEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationSettingMasterRow this[int index] {
                get {
                    return ((OperationSettingMasterRow)(this.Rows[index]));
                }
            }
            
            public event OperationSettingMasterRowChangeEventHandler OperationSettingMasterRowChanging;
            
            public event OperationSettingMasterRowChangeEventHandler OperationSettingMasterRowChanged;
            
            public event OperationSettingMasterRowChangeEventHandler OperationSettingMasterRowDeleting;
            
            public event OperationSettingMasterRowChangeEventHandler OperationSettingMasterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOperationSettingMasterRow(OperationSettingMasterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationSettingMasterRow AddOperationSettingMasterRow(
                        System.DateTime CreateDateTime, 
                        System.DateTime UpdateDateTime, 
                        string EnterpriseCode, 
                        System.Guid FileHeaderGuid, 
                        string UpdEmployeeCode, 
                        string UpdAssemblyId1, 
                        string UpdAssemblyId2, 
                        int LogicalDeleteCode, 
                        int OperationStDiv, 
                        int CategoryCode, 
                        string PgId, 
                        int OperationCode, 
                        int AuthorityLevel1, 
                        int AuthorityLevel2, 
                        string EmployeeCode, 
                        int LimitDiv, 
                        int ApplyStartDate, 
                        int ApplyEndDate) {
                OperationSettingMasterRow rowOperationSettingMasterRow = ((OperationSettingMasterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CreateDateTime,
                        UpdateDateTime,
                        EnterpriseCode,
                        FileHeaderGuid,
                        UpdEmployeeCode,
                        UpdAssemblyId1,
                        UpdAssemblyId2,
                        LogicalDeleteCode,
                        OperationStDiv,
                        CategoryCode,
                        PgId,
                        OperationCode,
                        AuthorityLevel1,
                        AuthorityLevel2,
                        EmployeeCode,
                        LimitDiv,
                        ApplyStartDate,
                        ApplyEndDate};
                rowOperationSettingMasterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOperationSettingMasterRow);
                return rowOperationSettingMasterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OperationSettingMasterDataTable cln = ((OperationSettingMasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OperationSettingMasterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCreateDateTime = base.Columns["CreateDateTime"];
                this.columnUpdateDateTime = base.Columns["UpdateDateTime"];
                this.columnEnterpriseCode = base.Columns["EnterpriseCode"];
                this.columnFileHeaderGuid = base.Columns["FileHeaderGuid"];
                this.columnUpdEmployeeCode = base.Columns["UpdEmployeeCode"];
                this.columnUpdAssemblyId1 = base.Columns["UpdAssemblyId1"];
                this.columnUpdAssemblyId2 = base.Columns["UpdAssemblyId2"];
                this.columnLogicalDeleteCode = base.Columns["LogicalDeleteCode"];
                this.columnOperationStDiv = base.Columns["OperationStDiv"];
                this.columnCategoryCode = base.Columns["CategoryCode"];
                this.columnPgId = base.Columns["PgId"];
                this.columnOperationCode = base.Columns["OperationCode"];
                this.columnAuthorityLevel1 = base.Columns["AuthorityLevel1"];
                this.columnAuthorityLevel2 = base.Columns["AuthorityLevel2"];
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnLimitDiv = base.Columns["LimitDiv"];
                this.columnApplyStartDate = base.Columns["ApplyStartDate"];
                this.columnApplyEndDate = base.Columns["ApplyEndDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCreateDateTime = new global::System.Data.DataColumn("CreateDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDateTime);
                this.columnUpdateDateTime = new global::System.Data.DataColumn("UpdateDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDateTime);
                this.columnEnterpriseCode = new global::System.Data.DataColumn("EnterpriseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnterpriseCode);
                this.columnFileHeaderGuid = new global::System.Data.DataColumn("FileHeaderGuid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileHeaderGuid);
                this.columnUpdEmployeeCode = new global::System.Data.DataColumn("UpdEmployeeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdEmployeeCode);
                this.columnUpdAssemblyId1 = new global::System.Data.DataColumn("UpdAssemblyId1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdAssemblyId1);
                this.columnUpdAssemblyId2 = new global::System.Data.DataColumn("UpdAssemblyId2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdAssemblyId2);
                this.columnLogicalDeleteCode = new global::System.Data.DataColumn("LogicalDeleteCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogicalDeleteCode);
                this.columnOperationStDiv = new global::System.Data.DataColumn("OperationStDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperationStDiv);
                this.columnCategoryCode = new global::System.Data.DataColumn("CategoryCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryCode);
                this.columnPgId = new global::System.Data.DataColumn("PgId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPgId);
                this.columnOperationCode = new global::System.Data.DataColumn("OperationCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperationCode);
                this.columnAuthorityLevel1 = new global::System.Data.DataColumn("AuthorityLevel1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorityLevel1);
                this.columnAuthorityLevel2 = new global::System.Data.DataColumn("AuthorityLevel2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorityLevel2);
                this.columnEmployeeCode = new global::System.Data.DataColumn("EmployeeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnLimitDiv = new global::System.Data.DataColumn("LimitDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLimitDiv);
                this.columnApplyStartDate = new global::System.Data.DataColumn("ApplyStartDate", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplyStartDate);
                this.columnApplyEndDate = new global::System.Data.DataColumn("ApplyEndDate", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplyEndDate);
                this.columnCreateDateTime.Caption = "作成日時";
                this.columnUpdateDateTime.Caption = "更新日時";
                this.columnEnterpriseCode.Caption = "企業コード";
                this.columnFileHeaderGuid.Caption = "GUID";
                this.columnUpdEmployeeCode.Caption = "更新従業員コード";
                this.columnUpdAssemblyId1.Caption = "更新アセンブリID1";
                this.columnUpdAssemblyId2.Caption = "更新アセンブリID2";
                this.columnLogicalDeleteCode.Caption = "論理削除区分";
                this.columnOperationStDiv.Caption = "オペレーション設定区分";
                this.columnCategoryCode.Caption = "カテゴリーコード";
                this.columnPgId.Caption = "プログラムＩＤ";
                this.columnOperationCode.Caption = "オペレーションコード";
                this.columnAuthorityLevel1.Caption = "権限レベル1";
                this.columnAuthorityLevel2.Caption = "権限レベル2";
                this.columnEmployeeCode.Caption = "従業員コード";
                this.columnLimitDiv.Caption = "制限区分";
                this.columnApplyStartDate.Caption = "適用開始日";
                this.columnApplyEndDate.Caption = "適用終了日";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationSettingMasterRow NewOperationSettingMasterRow() {
                return ((OperationSettingMasterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OperationSettingMasterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OperationSettingMasterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OperationSettingMasterRowChanged != null)) {
                    this.OperationSettingMasterRowChanged(this, new OperationSettingMasterRowChangeEvent(((OperationSettingMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OperationSettingMasterRowChanging != null)) {
                    this.OperationSettingMasterRowChanging(this, new OperationSettingMasterRowChangeEvent(((OperationSettingMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OperationSettingMasterRowDeleted != null)) {
                    this.OperationSettingMasterRowDeleted(this, new OperationSettingMasterRowChangeEvent(((OperationSettingMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OperationSettingMasterRowDeleting != null)) {
                    this.OperationSettingMasterRowDeleting(this, new OperationSettingMasterRowChangeEvent(((OperationSettingMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOperationSettingMasterRow(OperationSettingMasterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OperationSettingMasterDataSet ds = new OperationSettingMasterDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OperationSettingMasterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OperationSettingMasterRow : global::System.Data.DataRow {
            
            private OperationSettingMasterDataTable tableOperationSettingMaster;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperationSettingMasterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOperationSettingMaster = ((OperationSettingMasterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOperationSettingMaster.CreateDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'CreateDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.CreateDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOperationSettingMaster.UpdateDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'UpdateDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.UpdateDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnterpriseCode {
                get {
                    try {
                        return ((string)(this[this.tableOperationSettingMaster.EnterpriseCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'EnterpriseCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.EnterpriseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid FileHeaderGuid {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableOperationSettingMaster.FileHeaderGuidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'FileHeaderGuid\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.FileHeaderGuidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdEmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableOperationSettingMaster.UpdEmployeeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'UpdEmployeeCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.UpdEmployeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdAssemblyId1 {
                get {
                    try {
                        return ((string)(this[this.tableOperationSettingMaster.UpdAssemblyId1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'UpdAssemblyId1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.UpdAssemblyId1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdAssemblyId2 {
                get {
                    try {
                        return ((string)(this[this.tableOperationSettingMaster.UpdAssemblyId2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'UpdAssemblyId2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.UpdAssemblyId2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LogicalDeleteCode {
                get {
                    try {
                        return ((int)(this[this.tableOperationSettingMaster.LogicalDeleteCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'LogicalDeleteCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.LogicalDeleteCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OperationStDiv {
                get {
                    try {
                        return ((int)(this[this.tableOperationSettingMaster.OperationStDivColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'OperationStDiv\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.OperationStDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CategoryCode {
                get {
                    try {
                        return ((int)(this[this.tableOperationSettingMaster.CategoryCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'CategoryCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.CategoryCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PgId {
                get {
                    try {
                        return ((string)(this[this.tableOperationSettingMaster.PgIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'PgId\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.PgIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OperationCode {
                get {
                    try {
                        return ((int)(this[this.tableOperationSettingMaster.OperationCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'OperationCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.OperationCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AuthorityLevel1 {
                get {
                    try {
                        return ((int)(this[this.tableOperationSettingMaster.AuthorityLevel1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'AuthorityLevel1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.AuthorityLevel1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AuthorityLevel2 {
                get {
                    try {
                        return ((int)(this[this.tableOperationSettingMaster.AuthorityLevel2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'AuthorityLevel2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.AuthorityLevel2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableOperationSettingMaster.EmployeeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'EmployeeCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.EmployeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LimitDiv {
                get {
                    try {
                        return ((int)(this[this.tableOperationSettingMaster.LimitDivColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'LimitDiv\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.LimitDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ApplyStartDate {
                get {
                    try {
                        return ((int)(this[this.tableOperationSettingMaster.ApplyStartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'ApplyStartDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.ApplyStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ApplyEndDate {
                get {
                    try {
                        return ((int)(this[this.tableOperationSettingMaster.ApplyEndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationSettingMaster\' にある列 \'ApplyEndDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationSettingMaster.ApplyEndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreateDateTimeNull() {
                return this.IsNull(this.tableOperationSettingMaster.CreateDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreateDateTimeNull() {
                this[this.tableOperationSettingMaster.CreateDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateDateTimeNull() {
                return this.IsNull(this.tableOperationSettingMaster.UpdateDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateDateTimeNull() {
                this[this.tableOperationSettingMaster.UpdateDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnterpriseCodeNull() {
                return this.IsNull(this.tableOperationSettingMaster.EnterpriseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnterpriseCodeNull() {
                this[this.tableOperationSettingMaster.EnterpriseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileHeaderGuidNull() {
                return this.IsNull(this.tableOperationSettingMaster.FileHeaderGuidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileHeaderGuidNull() {
                this[this.tableOperationSettingMaster.FileHeaderGuidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdEmployeeCodeNull() {
                return this.IsNull(this.tableOperationSettingMaster.UpdEmployeeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdEmployeeCodeNull() {
                this[this.tableOperationSettingMaster.UpdEmployeeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdAssemblyId1Null() {
                return this.IsNull(this.tableOperationSettingMaster.UpdAssemblyId1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdAssemblyId1Null() {
                this[this.tableOperationSettingMaster.UpdAssemblyId1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdAssemblyId2Null() {
                return this.IsNull(this.tableOperationSettingMaster.UpdAssemblyId2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdAssemblyId2Null() {
                this[this.tableOperationSettingMaster.UpdAssemblyId2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogicalDeleteCodeNull() {
                return this.IsNull(this.tableOperationSettingMaster.LogicalDeleteCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogicalDeleteCodeNull() {
                this[this.tableOperationSettingMaster.LogicalDeleteCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperationStDivNull() {
                return this.IsNull(this.tableOperationSettingMaster.OperationStDivColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperationStDivNull() {
                this[this.tableOperationSettingMaster.OperationStDivColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryCodeNull() {
                return this.IsNull(this.tableOperationSettingMaster.CategoryCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryCodeNull() {
                this[this.tableOperationSettingMaster.CategoryCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPgIdNull() {
                return this.IsNull(this.tableOperationSettingMaster.PgIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPgIdNull() {
                this[this.tableOperationSettingMaster.PgIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperationCodeNull() {
                return this.IsNull(this.tableOperationSettingMaster.OperationCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperationCodeNull() {
                this[this.tableOperationSettingMaster.OperationCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorityLevel1Null() {
                return this.IsNull(this.tableOperationSettingMaster.AuthorityLevel1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorityLevel1Null() {
                this[this.tableOperationSettingMaster.AuthorityLevel1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorityLevel2Null() {
                return this.IsNull(this.tableOperationSettingMaster.AuthorityLevel2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorityLevel2Null() {
                this[this.tableOperationSettingMaster.AuthorityLevel2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeCodeNull() {
                return this.IsNull(this.tableOperationSettingMaster.EmployeeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeCodeNull() {
                this[this.tableOperationSettingMaster.EmployeeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLimitDivNull() {
                return this.IsNull(this.tableOperationSettingMaster.LimitDivColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLimitDivNull() {
                this[this.tableOperationSettingMaster.LimitDivColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplyStartDateNull() {
                return this.IsNull(this.tableOperationSettingMaster.ApplyStartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplyStartDateNull() {
                this[this.tableOperationSettingMaster.ApplyStartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplyEndDateNull() {
                return this.IsNull(this.tableOperationSettingMaster.ApplyEndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplyEndDateNull() {
                this[this.tableOperationSettingMaster.ApplyEndDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OperationSettingMasterRowChangeEvent : global::System.EventArgs {
            
            private OperationSettingMasterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationSettingMasterRowChangeEvent(OperationSettingMasterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationSettingMasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591