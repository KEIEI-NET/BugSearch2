//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3031
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.Controller.Agent {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("OperationHistoryLogDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class OperationHistoryLogDataSet : global::System.Data.DataSet {
        
        private OperationHistoryLogDataTable tableOperationHistoryLog;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OperationHistoryLogDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected OperationHistoryLogDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["OperationHistoryLog"] != null)) {
                    base.Tables.Add(new OperationHistoryLogDataTable(ds.Tables["OperationHistoryLog"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OperationHistoryLogDataTable OperationHistoryLog {
            get {
                return this.tableOperationHistoryLog;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            OperationHistoryLogDataSet cln = ((OperationHistoryLogDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["OperationHistoryLog"] != null)) {
                    base.Tables.Add(new OperationHistoryLogDataTable(ds.Tables["OperationHistoryLog"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableOperationHistoryLog = ((OperationHistoryLogDataTable)(base.Tables["OperationHistoryLog"]));
            if ((initTable == true)) {
                if ((this.tableOperationHistoryLog != null)) {
                    this.tableOperationHistoryLog.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "OperationHistoryLogDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/OperationHistoryLogDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableOperationHistoryLog = new OperationHistoryLogDataTable();
            base.Tables.Add(this.tableOperationHistoryLog);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOperationHistoryLog() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            OperationHistoryLogDataSet ds = new OperationHistoryLogDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void OperationHistoryLogRowChangeEventHandler(object sender, OperationHistoryLogRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OperationHistoryLogDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCreateDateTime;
            
            private global::System.Data.DataColumn columnUpdateDateTime;
            
            private global::System.Data.DataColumn columnEnterpriseCode;
            
            private global::System.Data.DataColumn columnFileHeaderGuid;
            
            private global::System.Data.DataColumn columnUpdEmployeeCode;
            
            private global::System.Data.DataColumn columnUpdAssemblyId1;
            
            private global::System.Data.DataColumn columnUpdAssemblyId2;
            
            private global::System.Data.DataColumn columnLogicalDeleteCode;
            
            private global::System.Data.DataColumn columnLogDataCreateDateTime;
            
            private global::System.Data.DataColumn columnLogDataGuid;
            
            private global::System.Data.DataColumn columnLoginSectionCd;
            
            private global::System.Data.DataColumn columnLogDataKindCd;
            
            private global::System.Data.DataColumn columnLogDataMachineName;
            
            private global::System.Data.DataColumn columnLogDataAgentCd;
            
            private global::System.Data.DataColumn columnLogDataAgentNm;
            
            private global::System.Data.DataColumn columnLogDataObjBootProgramNm;
            
            private global::System.Data.DataColumn columnLogDataObjAssemblyID;
            
            private global::System.Data.DataColumn columnLogDataObjAssemblyNm;
            
            private global::System.Data.DataColumn columnLogDataObjClassID;
            
            private global::System.Data.DataColumn columnLogDataObjProcNm;
            
            private global::System.Data.DataColumn columnLogDataOperationCd;
            
            private global::System.Data.DataColumn columnLogOperaterDtProcLvl;
            
            private global::System.Data.DataColumn columnLogOperaterFuncLvl;
            
            private global::System.Data.DataColumn columnLogDataSystemVersion;
            
            private global::System.Data.DataColumn columnLogOperationStatus;
            
            private global::System.Data.DataColumn columnLogDataMassage;
            
            private global::System.Data.DataColumn columnLogOperationData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationHistoryLogDataTable() {
                this.TableName = "OperationHistoryLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperationHistoryLogDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OperationHistoryLogDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateTimeColumn {
                get {
                    return this.columnCreateDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateTimeColumn {
                get {
                    return this.columnUpdateDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnterpriseCodeColumn {
                get {
                    return this.columnEnterpriseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileHeaderGuidColumn {
                get {
                    return this.columnFileHeaderGuid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdEmployeeCodeColumn {
                get {
                    return this.columnUpdEmployeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdAssemblyId1Column {
                get {
                    return this.columnUpdAssemblyId1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdAssemblyId2Column {
                get {
                    return this.columnUpdAssemblyId2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogicalDeleteCodeColumn {
                get {
                    return this.columnLogicalDeleteCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogDataCreateDateTimeColumn {
                get {
                    return this.columnLogDataCreateDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogDataGuidColumn {
                get {
                    return this.columnLogDataGuid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoginSectionCdColumn {
                get {
                    return this.columnLoginSectionCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogDataKindCdColumn {
                get {
                    return this.columnLogDataKindCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogDataMachineNameColumn {
                get {
                    return this.columnLogDataMachineName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogDataAgentCdColumn {
                get {
                    return this.columnLogDataAgentCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogDataAgentNmColumn {
                get {
                    return this.columnLogDataAgentNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogDataObjBootProgramNmColumn {
                get {
                    return this.columnLogDataObjBootProgramNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogDataObjAssemblyIDColumn {
                get {
                    return this.columnLogDataObjAssemblyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogDataObjAssemblyNmColumn {
                get {
                    return this.columnLogDataObjAssemblyNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogDataObjClassIDColumn {
                get {
                    return this.columnLogDataObjClassID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogDataObjProcNmColumn {
                get {
                    return this.columnLogDataObjProcNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogDataOperationCdColumn {
                get {
                    return this.columnLogDataOperationCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogOperaterDtProcLvlColumn {
                get {
                    return this.columnLogOperaterDtProcLvl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogOperaterFuncLvlColumn {
                get {
                    return this.columnLogOperaterFuncLvl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogDataSystemVersionColumn {
                get {
                    return this.columnLogDataSystemVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogOperationStatusColumn {
                get {
                    return this.columnLogOperationStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogDataMassageColumn {
                get {
                    return this.columnLogDataMassage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogOperationDataColumn {
                get {
                    return this.columnLogOperationData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationHistoryLogRow this[int index] {
                get {
                    return ((OperationHistoryLogRow)(this.Rows[index]));
                }
            }
            
            public event OperationHistoryLogRowChangeEventHandler OperationHistoryLogRowChanging;
            
            public event OperationHistoryLogRowChangeEventHandler OperationHistoryLogRowChanged;
            
            public event OperationHistoryLogRowChangeEventHandler OperationHistoryLogRowDeleting;
            
            public event OperationHistoryLogRowChangeEventHandler OperationHistoryLogRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOperationHistoryLogRow(OperationHistoryLogRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationHistoryLogRow AddOperationHistoryLogRow(
                        System.DateTime CreateDateTime, 
                        System.DateTime UpdateDateTime, 
                        string EnterpriseCode, 
                        System.Guid FileHeaderGuid, 
                        string UpdEmployeeCode, 
                        string UpdAssemblyId1, 
                        string UpdAssemblyId2, 
                        int LogicalDeleteCode, 
                        System.DateTime LogDataCreateDateTime, 
                        System.Guid LogDataGuid, 
                        string LoginSectionCd, 
                        int LogDataKindCd, 
                        string LogDataMachineName, 
                        string LogDataAgentCd, 
                        string LogDataAgentNm, 
                        string LogDataObjBootProgramNm, 
                        string LogDataObjAssemblyID, 
                        string LogDataObjAssemblyNm, 
                        string LogDataObjClassID, 
                        string LogDataObjProcNm, 
                        int LogDataOperationCd, 
                        string LogOperaterDtProcLvl, 
                        string LogOperaterFuncLvl, 
                        string LogDataSystemVersion, 
                        int LogOperationStatus, 
                        string LogDataMassage, 
                        string LogOperationData) {
                OperationHistoryLogRow rowOperationHistoryLogRow = ((OperationHistoryLogRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CreateDateTime,
                        UpdateDateTime,
                        EnterpriseCode,
                        FileHeaderGuid,
                        UpdEmployeeCode,
                        UpdAssemblyId1,
                        UpdAssemblyId2,
                        LogicalDeleteCode,
                        LogDataCreateDateTime,
                        LogDataGuid,
                        LoginSectionCd,
                        LogDataKindCd,
                        LogDataMachineName,
                        LogDataAgentCd,
                        LogDataAgentNm,
                        LogDataObjBootProgramNm,
                        LogDataObjAssemblyID,
                        LogDataObjAssemblyNm,
                        LogDataObjClassID,
                        LogDataObjProcNm,
                        LogDataOperationCd,
                        LogOperaterDtProcLvl,
                        LogOperaterFuncLvl,
                        LogDataSystemVersion,
                        LogOperationStatus,
                        LogDataMassage,
                        LogOperationData};
                rowOperationHistoryLogRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOperationHistoryLogRow);
                return rowOperationHistoryLogRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OperationHistoryLogDataTable cln = ((OperationHistoryLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OperationHistoryLogDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCreateDateTime = base.Columns["CreateDateTime"];
                this.columnUpdateDateTime = base.Columns["UpdateDateTime"];
                this.columnEnterpriseCode = base.Columns["EnterpriseCode"];
                this.columnFileHeaderGuid = base.Columns["FileHeaderGuid"];
                this.columnUpdEmployeeCode = base.Columns["UpdEmployeeCode"];
                this.columnUpdAssemblyId1 = base.Columns["UpdAssemblyId1"];
                this.columnUpdAssemblyId2 = base.Columns["UpdAssemblyId2"];
                this.columnLogicalDeleteCode = base.Columns["LogicalDeleteCode"];
                this.columnLogDataCreateDateTime = base.Columns["LogDataCreateDateTime"];
                this.columnLogDataGuid = base.Columns["LogDataGuid"];
                this.columnLoginSectionCd = base.Columns["LoginSectionCd"];
                this.columnLogDataKindCd = base.Columns["LogDataKindCd"];
                this.columnLogDataMachineName = base.Columns["LogDataMachineName"];
                this.columnLogDataAgentCd = base.Columns["LogDataAgentCd"];
                this.columnLogDataAgentNm = base.Columns["LogDataAgentNm"];
                this.columnLogDataObjBootProgramNm = base.Columns["LogDataObjBootProgramNm"];
                this.columnLogDataObjAssemblyID = base.Columns["LogDataObjAssemblyID"];
                this.columnLogDataObjAssemblyNm = base.Columns["LogDataObjAssemblyNm"];
                this.columnLogDataObjClassID = base.Columns["LogDataObjClassID"];
                this.columnLogDataObjProcNm = base.Columns["LogDataObjProcNm"];
                this.columnLogDataOperationCd = base.Columns["LogDataOperationCd"];
                this.columnLogOperaterDtProcLvl = base.Columns["LogOperaterDtProcLvl"];
                this.columnLogOperaterFuncLvl = base.Columns["LogOperaterFuncLvl"];
                this.columnLogDataSystemVersion = base.Columns["LogDataSystemVersion"];
                this.columnLogOperationStatus = base.Columns["LogOperationStatus"];
                this.columnLogDataMassage = base.Columns["LogDataMassage"];
                this.columnLogOperationData = base.Columns["LogOperationData"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCreateDateTime = new global::System.Data.DataColumn("CreateDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDateTime);
                this.columnUpdateDateTime = new global::System.Data.DataColumn("UpdateDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDateTime);
                this.columnEnterpriseCode = new global::System.Data.DataColumn("EnterpriseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnterpriseCode);
                this.columnFileHeaderGuid = new global::System.Data.DataColumn("FileHeaderGuid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileHeaderGuid);
                this.columnUpdEmployeeCode = new global::System.Data.DataColumn("UpdEmployeeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdEmployeeCode);
                this.columnUpdAssemblyId1 = new global::System.Data.DataColumn("UpdAssemblyId1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdAssemblyId1);
                this.columnUpdAssemblyId2 = new global::System.Data.DataColumn("UpdAssemblyId2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdAssemblyId2);
                this.columnLogicalDeleteCode = new global::System.Data.DataColumn("LogicalDeleteCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogicalDeleteCode);
                this.columnLogDataCreateDateTime = new global::System.Data.DataColumn("LogDataCreateDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDataCreateDateTime);
                this.columnLogDataGuid = new global::System.Data.DataColumn("LogDataGuid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDataGuid);
                this.columnLoginSectionCd = new global::System.Data.DataColumn("LoginSectionCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoginSectionCd);
                this.columnLogDataKindCd = new global::System.Data.DataColumn("LogDataKindCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDataKindCd);
                this.columnLogDataMachineName = new global::System.Data.DataColumn("LogDataMachineName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDataMachineName);
                this.columnLogDataAgentCd = new global::System.Data.DataColumn("LogDataAgentCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDataAgentCd);
                this.columnLogDataAgentNm = new global::System.Data.DataColumn("LogDataAgentNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDataAgentNm);
                this.columnLogDataObjBootProgramNm = new global::System.Data.DataColumn("LogDataObjBootProgramNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDataObjBootProgramNm);
                this.columnLogDataObjAssemblyID = new global::System.Data.DataColumn("LogDataObjAssemblyID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDataObjAssemblyID);
                this.columnLogDataObjAssemblyNm = new global::System.Data.DataColumn("LogDataObjAssemblyNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDataObjAssemblyNm);
                this.columnLogDataObjClassID = new global::System.Data.DataColumn("LogDataObjClassID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDataObjClassID);
                this.columnLogDataObjProcNm = new global::System.Data.DataColumn("LogDataObjProcNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDataObjProcNm);
                this.columnLogDataOperationCd = new global::System.Data.DataColumn("LogDataOperationCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDataOperationCd);
                this.columnLogOperaterDtProcLvl = new global::System.Data.DataColumn("LogOperaterDtProcLvl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogOperaterDtProcLvl);
                this.columnLogOperaterFuncLvl = new global::System.Data.DataColumn("LogOperaterFuncLvl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogOperaterFuncLvl);
                this.columnLogDataSystemVersion = new global::System.Data.DataColumn("LogDataSystemVersion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDataSystemVersion);
                this.columnLogOperationStatus = new global::System.Data.DataColumn("LogOperationStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogOperationStatus);
                this.columnLogDataMassage = new global::System.Data.DataColumn("LogDataMassage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDataMassage);
                this.columnLogOperationData = new global::System.Data.DataColumn("LogOperationData", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogOperationData);
                this.columnCreateDateTime.Caption = "作成日時";
                this.columnUpdateDateTime.Caption = "更新日時";
                this.columnEnterpriseCode.Caption = "企業コード";
                this.columnFileHeaderGuid.Caption = "GUID";
                this.columnUpdEmployeeCode.Caption = "更新従業員コード";
                this.columnUpdAssemblyId1.Caption = "更新アセンブリID1";
                this.columnUpdAssemblyId2.Caption = "更新アセンブリID2";
                this.columnLogicalDeleteCode.Caption = "論理削除区分";
                this.columnLogDataCreateDateTime.Caption = "ログデータ作成日時";
                this.columnLogDataGuid.Caption = "ログデータGUID";
                this.columnLoginSectionCd.Caption = "ログイン拠点コード";
                this.columnLogDataKindCd.Caption = "ログデータ種別区分コード";
                this.columnLogDataMachineName.Caption = "ログデータ端末名";
                this.columnLogDataAgentCd.Caption = "ログデータ担当者コード";
                this.columnLogDataAgentNm.Caption = "ログデータ担当者名";
                this.columnLogDataObjBootProgramNm.Caption = "ログデータ対象起動プログラム名称";
                this.columnLogDataObjAssemblyID.Caption = "ログデータ対象アセンブリID";
                this.columnLogDataObjAssemblyNm.Caption = "ログデータ対象アセンブリ名称";
                this.columnLogDataObjClassID.Caption = "ログデータ対象クラスID";
                this.columnLogDataObjProcNm.Caption = "ログデータ対象処理名";
                this.columnLogDataOperationCd.Caption = "ログデータオペレーションコード";
                this.columnLogOperaterDtProcLvl.Caption = "ログデータオペレーターデータ処理レベル";
                this.columnLogOperaterFuncLvl.Caption = "ログデータオペレーター機能処理レベル";
                this.columnLogDataSystemVersion.Caption = "ログデータシステムバージョン";
                this.columnLogOperationStatus.Caption = "ログオペレーションステータス";
                this.columnLogDataMassage.Caption = "ログデータメッセージ";
                this.columnLogOperationData.Caption = "ログオペレーションデータ";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationHistoryLogRow NewOperationHistoryLogRow() {
                return ((OperationHistoryLogRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OperationHistoryLogRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OperationHistoryLogRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OperationHistoryLogRowChanged != null)) {
                    this.OperationHistoryLogRowChanged(this, new OperationHistoryLogRowChangeEvent(((OperationHistoryLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OperationHistoryLogRowChanging != null)) {
                    this.OperationHistoryLogRowChanging(this, new OperationHistoryLogRowChangeEvent(((OperationHistoryLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OperationHistoryLogRowDeleted != null)) {
                    this.OperationHistoryLogRowDeleted(this, new OperationHistoryLogRowChangeEvent(((OperationHistoryLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OperationHistoryLogRowDeleting != null)) {
                    this.OperationHistoryLogRowDeleting(this, new OperationHistoryLogRowChangeEvent(((OperationHistoryLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOperationHistoryLogRow(OperationHistoryLogRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OperationHistoryLogDataSet ds = new OperationHistoryLogDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OperationHistoryLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OperationHistoryLogRow : global::System.Data.DataRow {
            
            private OperationHistoryLogDataTable tableOperationHistoryLog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperationHistoryLogRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOperationHistoryLog = ((OperationHistoryLogDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOperationHistoryLog.CreateDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'CreateDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.CreateDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOperationHistoryLog.UpdateDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'UpdateDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.UpdateDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnterpriseCode {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.EnterpriseCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'EnterpriseCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.EnterpriseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid FileHeaderGuid {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableOperationHistoryLog.FileHeaderGuidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'FileHeaderGuid\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.FileHeaderGuidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdEmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.UpdEmployeeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'UpdEmployeeCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.UpdEmployeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdAssemblyId1 {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.UpdAssemblyId1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'UpdAssemblyId1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.UpdAssemblyId1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdAssemblyId2 {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.UpdAssemblyId2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'UpdAssemblyId2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.UpdAssemblyId2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LogicalDeleteCode {
                get {
                    try {
                        return ((int)(this[this.tableOperationHistoryLog.LogicalDeleteCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogicalDeleteCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogicalDeleteCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LogDataCreateDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOperationHistoryLog.LogDataCreateDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogDataCreateDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogDataCreateDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid LogDataGuid {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableOperationHistoryLog.LogDataGuidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogDataGuid\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogDataGuidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoginSectionCd {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.LoginSectionCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LoginSectionCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LoginSectionCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LogDataKindCd {
                get {
                    try {
                        return ((int)(this[this.tableOperationHistoryLog.LogDataKindCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogDataKindCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogDataKindCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogDataMachineName {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.LogDataMachineNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogDataMachineName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogDataMachineNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogDataAgentCd {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.LogDataAgentCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogDataAgentCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogDataAgentCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogDataAgentNm {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.LogDataAgentNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogDataAgentNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogDataAgentNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogDataObjBootProgramNm {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.LogDataObjBootProgramNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogDataObjBootProgramNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogDataObjBootProgramNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogDataObjAssemblyID {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.LogDataObjAssemblyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogDataObjAssemblyID\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogDataObjAssemblyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogDataObjAssemblyNm {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.LogDataObjAssemblyNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogDataObjAssemblyNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogDataObjAssemblyNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogDataObjClassID {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.LogDataObjClassIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogDataObjClassID\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogDataObjClassIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogDataObjProcNm {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.LogDataObjProcNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogDataObjProcNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogDataObjProcNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LogDataOperationCd {
                get {
                    try {
                        return ((int)(this[this.tableOperationHistoryLog.LogDataOperationCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogDataOperationCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogDataOperationCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogOperaterDtProcLvl {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.LogOperaterDtProcLvlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogOperaterDtProcLvl\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogOperaterDtProcLvlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogOperaterFuncLvl {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.LogOperaterFuncLvlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogOperaterFuncLvl\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogOperaterFuncLvlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogDataSystemVersion {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.LogDataSystemVersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogDataSystemVersion\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogDataSystemVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LogOperationStatus {
                get {
                    try {
                        return ((int)(this[this.tableOperationHistoryLog.LogOperationStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogOperationStatus\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogOperationStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogDataMassage {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.LogDataMassageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogDataMassage\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogDataMassageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogOperationData {
                get {
                    try {
                        return ((string)(this[this.tableOperationHistoryLog.LogOperationDataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'OperationHistoryLog\' にある列 \'LogOperationData\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableOperationHistoryLog.LogOperationDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreateDateTimeNull() {
                return this.IsNull(this.tableOperationHistoryLog.CreateDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreateDateTimeNull() {
                this[this.tableOperationHistoryLog.CreateDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateDateTimeNull() {
                return this.IsNull(this.tableOperationHistoryLog.UpdateDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateDateTimeNull() {
                this[this.tableOperationHistoryLog.UpdateDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnterpriseCodeNull() {
                return this.IsNull(this.tableOperationHistoryLog.EnterpriseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnterpriseCodeNull() {
                this[this.tableOperationHistoryLog.EnterpriseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileHeaderGuidNull() {
                return this.IsNull(this.tableOperationHistoryLog.FileHeaderGuidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileHeaderGuidNull() {
                this[this.tableOperationHistoryLog.FileHeaderGuidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdEmployeeCodeNull() {
                return this.IsNull(this.tableOperationHistoryLog.UpdEmployeeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdEmployeeCodeNull() {
                this[this.tableOperationHistoryLog.UpdEmployeeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdAssemblyId1Null() {
                return this.IsNull(this.tableOperationHistoryLog.UpdAssemblyId1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdAssemblyId1Null() {
                this[this.tableOperationHistoryLog.UpdAssemblyId1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdAssemblyId2Null() {
                return this.IsNull(this.tableOperationHistoryLog.UpdAssemblyId2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdAssemblyId2Null() {
                this[this.tableOperationHistoryLog.UpdAssemblyId2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogicalDeleteCodeNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogicalDeleteCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogicalDeleteCodeNull() {
                this[this.tableOperationHistoryLog.LogicalDeleteCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogDataCreateDateTimeNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogDataCreateDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogDataCreateDateTimeNull() {
                this[this.tableOperationHistoryLog.LogDataCreateDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogDataGuidNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogDataGuidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogDataGuidNull() {
                this[this.tableOperationHistoryLog.LogDataGuidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoginSectionCdNull() {
                return this.IsNull(this.tableOperationHistoryLog.LoginSectionCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoginSectionCdNull() {
                this[this.tableOperationHistoryLog.LoginSectionCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogDataKindCdNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogDataKindCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogDataKindCdNull() {
                this[this.tableOperationHistoryLog.LogDataKindCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogDataMachineNameNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogDataMachineNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogDataMachineNameNull() {
                this[this.tableOperationHistoryLog.LogDataMachineNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogDataAgentCdNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogDataAgentCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogDataAgentCdNull() {
                this[this.tableOperationHistoryLog.LogDataAgentCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogDataAgentNmNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogDataAgentNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogDataAgentNmNull() {
                this[this.tableOperationHistoryLog.LogDataAgentNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogDataObjBootProgramNmNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogDataObjBootProgramNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogDataObjBootProgramNmNull() {
                this[this.tableOperationHistoryLog.LogDataObjBootProgramNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogDataObjAssemblyIDNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogDataObjAssemblyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogDataObjAssemblyIDNull() {
                this[this.tableOperationHistoryLog.LogDataObjAssemblyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogDataObjAssemblyNmNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogDataObjAssemblyNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogDataObjAssemblyNmNull() {
                this[this.tableOperationHistoryLog.LogDataObjAssemblyNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogDataObjClassIDNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogDataObjClassIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogDataObjClassIDNull() {
                this[this.tableOperationHistoryLog.LogDataObjClassIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogDataObjProcNmNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogDataObjProcNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogDataObjProcNmNull() {
                this[this.tableOperationHistoryLog.LogDataObjProcNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogDataOperationCdNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogDataOperationCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogDataOperationCdNull() {
                this[this.tableOperationHistoryLog.LogDataOperationCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogOperaterDtProcLvlNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogOperaterDtProcLvlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogOperaterDtProcLvlNull() {
                this[this.tableOperationHistoryLog.LogOperaterDtProcLvlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogOperaterFuncLvlNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogOperaterFuncLvlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogOperaterFuncLvlNull() {
                this[this.tableOperationHistoryLog.LogOperaterFuncLvlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogDataSystemVersionNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogDataSystemVersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogDataSystemVersionNull() {
                this[this.tableOperationHistoryLog.LogDataSystemVersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogOperationStatusNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogOperationStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogOperationStatusNull() {
                this[this.tableOperationHistoryLog.LogOperationStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogDataMassageNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogDataMassageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogDataMassageNull() {
                this[this.tableOperationHistoryLog.LogDataMassageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogOperationDataNull() {
                return this.IsNull(this.tableOperationHistoryLog.LogOperationDataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogOperationDataNull() {
                this[this.tableOperationHistoryLog.LogOperationDataColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OperationHistoryLogRowChangeEvent : global::System.EventArgs {
            
            private OperationHistoryLogRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationHistoryLogRowChangeEvent(OperationHistoryLogRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationHistoryLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591