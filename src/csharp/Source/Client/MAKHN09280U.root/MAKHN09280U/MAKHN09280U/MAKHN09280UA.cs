//****************************************************************************//
// システム         : .NSシリーズ
// プログラム名称   : 商品在庫マスタ
// プログラム概要   : 商品在庫の登録・変更・削除を行う
//----------------------------------------------------------------------------//
//                (c)Copyright  2008 Broadleaf Co.,Ltd.
//============================================================================//
// 履歴
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : Y.Sasaki
// 作 成 日  2006/01/09  修正内容 : 新規作成
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : Y.Sasaki
// 修 正 日  2007/07/02  修正内容 : 「Alt + S」で保存された場合、存在しない商品区分やメーカーで
//                                  登録できてしまう障害解除。
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 對馬 大輔
// 修 正 日  2007/08/30  修正内容 : DC.NS対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 對馬 大輔
// 修 正 日  2008/06/18  修正内容 : PM.NS対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 上野 俊治
// 修 正 日  2008/09/02  修正内容 : 完全削除、復活処理を追加
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 鈴木 正臣
// 修 正 日  2008/09/18  修正内容 : 在庫、単品売価の機能を追加。全体的に処理見直し・不具合修正など。
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 渋谷
// 修 正 日  2008/11/18  修正内容 : 在庫関連の仕様変更・不具合修正など。
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 宮津
// 修 正 日  2008/11/27  修正内容 : 新規モードで単価を入力した後、保存できない障害を修正。
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 宮津
// 修 正 日  2008/11/28  修正内容 : 新規作成後、即閉じるをしたとき、保存の確認メッセージが出るのを修正。
//                                  在庫の19番目が保存されない不具合を修正。
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 忍
// 修 正 日  2008/12/02  修正内容 : 起動時に品番・メーカーをパラメータへ追加し、起動時の初期値として表示可能へ修正。
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 行澤仁美
// 修 正 日  2008/12/15  修正内容 : 在庫情報の論理削除時の対応を追加。グリット内のTabキーでの移動対応。
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 忍
// 修 正 日  2008/12/18  修正内容 : 新規・更新・削除モードラベル追加。
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 忍
// 修 正 日  2008/12/25  修正内容 : 障害ID:9513対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 上野
// 修 正 日  2008/12/27  修正内容 : 障害ID:9521対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 忍
// 修 正 日  2008/01/06  修正内容 : 障害ID:9153、9478、9584、9617対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 忍
// 修 正 日  2008/01/13  修正内容 : 障害ID:9623対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 忍
// 修 正 日  2008/01/19  修正内容 : 障害ID:10122対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 忍
// 修 正 日  2008/01/20  修正内容 : 障害ID:9312,10175対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 忍
// 修 正 日  2008/01/26  修正内容 : 障害ID:10414対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 上野
// 修 正 日  2008/02/02  修正内容 : 保存処理時の排他制御処理追加。
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 忍
// 修 正 日  2008/02/03  修正内容 : 障害ID:10848対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 忍
// 修 正 日  2008/02/05  修正内容 : 障害ID:11019対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 忍
// 修 正 日  2008/02/10  修正内容 : 障害ID:11233対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 忍
// 修 正 日  2008/02/16  修正内容 : 障害ID:11376対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 上野
// 修 正 日  2008/02/18  修正内容 : 障害ID:11637対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 對馬 大輔
// 修 正 日  2008/02/18  修正内容 : 1.同一品番選択ウインドウの定価表示
//                                  2.フレーム側商品アクセスクラスと共有化
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 忍
// 修 正 日  2008/03/17  修正内容 : 障害ID:12441対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 上野
// 修 正 日  2008/04/06  修正内容 : 障害ID:13111対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 照田 貴志
// 修 正 日  2009/06/25  修正内容 : 不具合対応[13646][13647]
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 畠中 啓次朗
// 修 正 日  2009/07/21  修正内容 : 不具合対応[13646]
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 22008 長内
// 修 正 日  2009/08/04  修正内容 : MANTIS対応 13768
//                                  部品管理区分ゼロがNULLで登録される不具合の修正
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2009/11/16  修正内容 : 3次対応分
//                                  在庫仕入入力に在庫登録機能を追加に伴う
//                                  在庫情報の初期値指定型ShowDialog()の追加
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2009/11/20  修正内容 : 3次対応分 得意先掛率グループ改良
//                                  MANTIS対応 14598                               
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2009/11/24  修正内容 : MANTIS対応 14610 倉庫情報のデフォルト値を設定                               
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2009/11/25  修正内容 : MANTIS対応 14593 棚卸評価単価の再計算                               
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2009/11/26  修正内容 : MANTIS対応 13890 月次更新後の在庫データの更新は不可                               
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2009/12/16  修正内容 : MANTIS対応 14597 新規登録時も掛率マスタの情報を表示                              
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 21024 佐々木 健
// 修 正 日  2009/12/21  修正内容 : 検索の論理削除モード対応(MANTIS[0014661])
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2010/01/05  修正内容 : MANTIS対応 14816 価格情報の再計算処理の修正                             
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2010/01/07  修正内容 : MANTIS対応 14860 コードと名称を表示
//                                : MANTIS対応 14859 品名が未入力の場合、BLコードマスタのBLコード名を設定
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2010/01/12  修正内容 : MANTIS対応 14862 商品管理情報マスタの仕入先を表示
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2010/01/29  修正内容 : MANTIS対応 14959 在庫情報タブのデフォルト設定は新規登録時は必要なし                              
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2010/02/03  修正内容 : MANTIS対応 14963 論理削除されている在庫情報はデフォルト設定値の対象としない                              
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2010/02/09  修正内容 : MANTIS対応 14980 価格設定の掛率データが売価情報に表示される                              
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2010/03/15  修正内容 : MANTIS対応 15119 価格開始日の判断を修正                              
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 楊明俊
// 修 正 日  2010/06/08  修正内容 : 改良対応                               
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 楊明俊
// 修 正 日  2010/06/17  修正内容 : redmine #9744の対応                              
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30517 夏野 駿希
// 修 正 日  2010/07/14  修正内容 : Mantis.15812　在庫仕入入力から呼び出された時の画面内容の変更                              
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 高峰
// 修 正 日  2010/08/09  修正内容 : 障害改良対応（８月分） キーボード操作の改良を行う。                     
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 22018 鈴木 正臣
// 修 正 日  2010/11/25  修正内容 : ・商品自動登録の価格開始日を前回月次更新日＋１に変更
//                               : 　（※参照設定に追加：DCCMN00003C.dll、SFUKN09001E.dll、SFCMN00654D.dll、SFCMN00615C.dll）
//                               : ・最新情報取得時に一度クリアするように変更。
//----------------------------------------------------------------------------//
// 管理番号  10704766-00 作成担当 : caohh
// 修 正 日  2011/08/02  修正内容 : NSユーザー改良要望一覧連番265の対応
//----------------------------------------------------------------------------//
// 管理番号  10704766-00 作成担当 : wangf
// 修 正 日  2011/08/29  修正内容 : NSユーザー改良要望一覧連番1016の対応
//----------------------------------------------------------------------------//
// 管理番号  10704766-00 作成担当 : 周雨
// 修 正 日  2011/08/30  修正内容 : 連番265の対応 FOR redmine #24131
//----------------------------------------------------------------------------//
// 管理番号  10704766-00 作成担当 : 周雨
// 修 正 日  2011/09/01  修正内容 : 選択した在庫が初期表示されるよう修正の対応
//                                : 案件一覧 連番984 FOR redmine #24263
//----------------------------------------------------------------------------//
// 管理番号  10704766-00 作成担当 : 鄧潘ハン
// 修 正 日  2011/09/06  修正内容 : 案件一覧 連番265 でのテスト不具合についての修正 FOR redmine #24497
//----------------------------------------------------------------------------//
// 管理番号  10704766-00 作成担当 : wangf
// 修 正 日  2011/09/09  修正内容 : 案件一覧 連番265 でのテスト不具合についての修正 FOR redmine #24497
//----------------------------------------------------------------------------//
// 管理番号  10704766-00 作成担当 : wangf
// 修 正 日  2011/09/13  修正内容 : 案件一覧 連番265 でのテスト不具合についての修正 FOR redmine #24832、#24833
//----------------------------------------------------------------------------//
// 管理番号  10704766-00 作成担当 : yangmj
// 修 正 日  2011/09/15  修正内容 : 案件一覧 連番265 でのテスト不具合についての修正 FOR redmine #25140
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : zhuhh  
// 修 正 日  2012/11/21  修正内容 : 2013/01/16配信分 redmine #33230
//                                  掛率設定マスタ内に論理削除レコードが存在する状態で、
//                                  同商品の掛率の登録をしようとしているために発生して
//                                  いる不具合の対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : zhangy3
// 修 正 日  2012/12/01  修正内容 : 2013/01/16配信分 Redmine#33231 商品在庫マスタ
//----------------------------------------------------------------------------//
// 管理番号  10901273-00 作成担当 : 王君
// 修 正 日  K2013/05/13 修正内容 : 2013/06/18配信分
//                                  Redmine#35663 商品在庫マスタ・山形部品様個別組み込み
//----------------------------------------------------------------------------//
// 管理番号 10801804-00  作成担当 : donggy
// 修 正 日  2013/05/24  修正内容 : 2013/06/18配信分 
//                                  Redmine#35874 商品マスタ登録の速度改善について
//----------------------------------------------------------------------------//
// 管理番号  10901273-00 作成担当 : 王君
// 修 正 日  2013/06/14 修正内容 : 2013/06/18配信分
//                                  Redmine#35434 商品在庫マスタの復活
//----------------------------------------------------------------------------//
// 管理番号 10902175-00  作成担当 : 田建委
// 修 正 日  2013/09/18  修正内容 : Redmine#40423 旧商品在庫マスタの速度改善
//----------------------------------------------------------------------------//
// 管理番号 10904597-00  作成担当 : gezh
// 修 正 日  2014/01/14  修正内容 : Redmine#41448 商品在庫マスタの拠点コードが1で登録されている
//----------------------------------------------------------------------------//
// 管理番号  10904597-00 作成担当 : huangt
// 修 正 日  2014/01/15  修正内容 : Redmine#40998 貸出数の変更を可能にするように修正
//----------------------------------------------------------------------------//
// 管理番号 10970685-00  作成担当 : 高陽
// 修 正 日  2014/02/10  修正内容 : Redmine#41976 商品マスタⅡの追加
//----------------------------------------------------------------------------//
// 管理番号 10970685-00  作成担当 : 高陽
// 修 正 日  2014/04/22  修正内容 : Redmine#42312 システムテスト障害一覧No.61の対応
//----------------------------------------------------------------------------//
// 管理番号 10970685-00  作成担当 : 高陽
// 修 正 日  2014/04/23  修正内容 : Redmine#42312 システムテスト障害一覧No.62の対応
//----------------------------------------------------------------------------//
// 管理番号 11000127-00  作成担当 : 譚洪
// 修 正 日  2014/08/08  修正内容 : 保存処理で「enter、マウス、F10」を連続押下の時、同時に保存処理の障害の対応
//----------------------------------------------------------------------------//
// 管理番号 11170129-00  作成担当 : 黄興貴
// 修 正 日 2015/09/07   修正内容 : Redmine#47026 商品在庫マスタの障害対応
//                                  商品削除し、掛率を削除しないの対応
//----------------------------------------------------------------------------//
// 管理番号 11170129-00  作成担当 : 黄興貴
// 修 正 日 2015/09/10   修正内容 : Redmine#47026 商品在庫マスタの障害対応
//----------------------------------------------------------------------------//
// 管理番号 11170129-00  作成担当 : 黄興貴
// 修 正 日 2015/09/22   修正内容 : Redmine#47026 商品在庫マスタのフォーカス移動不正の障害対応
//----------------------------------------------------------------------------//
// 管理番号 11170129-00  作成担当 : 黄興貴
// 修 正 日 2015/09/22   修正内容 : Redmine#47026 商品在庫マスタの障害対応
//----------------------------------------------------------------------------//
// 管理番号 11170129-00  作成担当 : 黄興貴
// 修 正 日 2015/09/22   修正内容 : Redmine#47026 商品在庫マスタのフォーカス移動再修正
//----------------------------------------------------------------------------//

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using Broadleaf.Library.Windows.Forms;
using Broadleaf.Library.Resources;
using Broadleaf.Library.Text;
using Broadleaf.Application.Controller;
using Broadleaf.Application.UIData;
using Broadleaf.Application.Common;
using Broadleaf.Application.Remoting.ParamData;

using Microsoft.VisualBasic;
using Broadleaf.Library.Globarization;
using Infragistics.Win.UltraWinGrid;
using Broadleaf.Application.Resources;  // --- ADD m.suzuki 2010/11/25


namespace Broadleaf.Windows.Forms
{
	/// <summary>
	/// 商品入力クラス
	/// </summary>
	/// <remarks>
	/// <br>Note       : 商品の入力を行います。</br>
	/// <br>Programmer : 18012 Y.Sasaki</br>
	/// <br>Date       : 2006.1.9</br>
	/// <br>Update Note: 2007.07.02 Y.Sasaki</br>
	/// <br>           :・「Alt + S」で保存された場合、存在しない商品区分やメーカーで</br>
	/// <br>           :　登録できてしまう障害解除。</br>
    /// <br>Update Note: 2007.08.30 對馬 大輔</br>
    /// <br>           :・DC.NS対応</br>
    /// <br>-----------------------------------------------------------------------------------------</br>
    /// <br>UpdateNote : 2008.06.18 20056 對馬 大輔</br>
    /// <br>           : PM.NS対応(コメント無し)</br>
    /// <br>UpdateNote : 2008.09.02 30452 上野 俊治</br>
    /// <br>           : 完全削除、復活処理を追加</br>
    /// <br>UpdateNote : 2008.09.18 22018 鈴木 正臣</br>
    /// <br>           : 在庫、単品売価の機能を追加。全体的に処理見直し・不具合修正など。</br>
    /// <br>UpdateNote : 2008.11.18 30009 渋谷</br>
    /// <br>           : 在庫関連の仕様変更・不具合修正など。</br>
    /// <br>UpdateNote : 2008.11.27 30365 宮津</br>
    /// <br>           : 新規モードで単価を入力した後、保存できない障害を修正。</br>
    /// <br>UpdateNote : 2008.11.28 30365 宮津</br>
    /// <br>           : 新規作成後、即閉じるをしたとき、保存の確認メッセージが出るのを修正。</br>
    /// <br>           : 在庫の19番目が保存されない不具合を修正。</br>
    /// <br>UpdateNote : 2008.12.02 30414 忍</br>
    /// <br>           : 起動時に品番・メーカーをパラメータへ追加し、起動時の初期値として表示可能へ修正。</br>
    /// <br>UpdateNote : 2008/12/15 30462 行澤仁美　バグ修正</br>
    /// <br>           : 在庫情報の論理削除時の対応を追加。</br>
    /// <br>           : グリット内のTabキーでの移動対応。</br>
    /// <br>UpdateNote : 2008/12/18 30414 忍　バグ修正</br>
    /// <br>           : 新規・更新・削除モードラベル追加。</br>
    /// <br>UpdateNote : 2008/12/25 30414 忍　バグ修正</br>
    /// <br>           : 障害ID:9513対応</br>
    /// <br>UpdateNote : 2008/12/27 30452 上野　バグ修正</br>
    /// <br>           : 障害ID:9521対応</br>
    /// <br>           : 更新有無チェック時、登録済在庫テーブルを更新しないよう修正</br>
    /// <br>UpdateNote : 2009/01/06 30414 忍　幸史　バグ修正</br>
    /// <br>           : 障害ID:9153、9478、9584、9617対応</br>
    /// <br>UpdateNote : 2009/01/13 30414 忍　幸史　バグ修正</br>
    /// <br>           : 障害ID:9623対応</br>
    /// <br>UpdateNote : 2009/01/19 30414 忍　幸史　バグ修正</br>
    /// <br>           : 障害ID:10122対応</br>
    /// <br>UpdateNote : 2009/01/20 30414 忍　幸史　バグ修正</br>
    /// <br>           : 障害ID:9312,10175対応</br>
    /// <br>UpdateNote : 2009/01/26 30414 忍　幸史　バグ修正</br>
    /// <br>           : 障害ID:10414対応</br>
    /// <br>UpdateNote : 2009/02/02 30452 上野　俊治</br>
    /// <br>           : 保存処理時の排他制御処理追加。</br>
    /// <br>UpdateNote : 2009/02/03 30414 忍　幸史　バグ修正</br>
    /// <br>           : 障害ID:10848対応</br>
    /// <br>UpdateNote : 2009/02/05 30414 忍　幸史　バグ修正</br>
    /// <br>           : 障害ID:11019対応</br>
    /// <br>UpdateNote : 2009/02/10 30414 忍　幸史　バグ修正</br>
    /// <br>           : 障害ID:11233対応</br>
    /// <br>UpdateNote : 2009/02/16 30414 忍　幸史　バグ修正</br>
    /// <br>           : 障害ID:11376対応</br>
    /// <br>Update Note: 2009/02/18 30452 上野 俊治</br>
    /// <br>           : 障害ID:11637対応</br>
    /// <br>Update Note: 2009.02.18 20056 對馬 大輔</br>
    /// <br>           : 1.同一品番選択ウインドウの定価表示</br>
    /// <br>           : 2.フレーム側商品アクセスクラスと共有化</br>
    /// <br>UpdateNote : 2009/03/17 30414 忍　幸史　バグ修正</br>
    /// <br>           : 障害ID:12441対応</br>
    /// <br>Update Note: 2009/04/06 30452 上野 俊治　バグ修正</br>
    /// <br>           : 障害ID:13111対応</br>
    /// <br>Update Note: 2009/06/25       照田 貴志</br>
    /// <br>           : 不具合対応[13646][13647]</br>
    /// <br>Update Note: 2009/11/16       工藤 恵優</br>
    /// <br>           : 在庫仕入入力に在庫登録機能を追加に伴う在庫情報の初期値指定型ShowDialog()の追加</br>
    /// <br>Update Note: 2009/12/21　21024 佐々木 健</br>
    /// <br>           : 検索の論理削除モード対応(MANTIS[0014661])</br>
    /// <br>Update Note: 2010/01/05　30434 工藤 恵優</br>
    /// <br>           : 価格情報の再計算処理の修正(MANTIS[0014816])</br>
    /// <br>Update Note: 2010/01/07　30434 工藤 恵優</br>
    /// <br>           : コードと名称を表示(MANTIS[0014860])</br>
    /// <br>           : 品名が未入力の場合、BLコードマスタのBLコード名を設定(MANTIS[0014859])</br>
    /// <br>Update Note: 2010/01/12　30434 工藤 恵優</br>
    /// <br>           : 商品管理情報マスタの仕入先を表示(MANTIS[0014862])</br>
    /// <br>Update Note: 2010/03/15　30434 工藤 恵優</br>
    /// <br>           : 価格開始日の判断を修正(MANTIS[0015119])</br>
    /// <br>Update Note: 2010/06/08 楊明俊 不具合の対応</br>
    /// <br>Update Note: 2010/06/17 楊明俊 #9744</br>
    /// <br>Update Note: 2010/08/09 高峰 障害改良対応（８月分）キーボード操作の改良を行う。</br>
    /// <br>Update Note: 2010/11/25 22018 鈴木 正臣　・商品自動登録の価格開始日を前回月次更新日＋１に変更</br>
    /// <br>           :                            　（※参照設定に追加：DCCMN00003C.dll、SFUKN09001E.dll）</br>
    /// <br>           :                            ・最新情報取得時に一度クリアするように変更。</br>
    /// <br>Update Note: 2011/08/02 caohh　</br>
    /// <br>           : NSユーザー改良要望一覧連番265の対応</br>
    /// <br>Update Note: 2011/08/29 wangf</br>
    /// <br>           : NSユーザー改良要望一覧連番1016の対応</br>
    /// <br>Update Note: 2011/08/30 周雨　</br>
    /// <br>           : 連番265の対応 FOR redmine #24131</br>
    /// <br>Update Note: 2011/09/01 周雨　</br>
    /// <br>           : 案件一覧 連番984 の対応 選択した在庫が初期表示されるよう修正 FOR redmine #24263</br>
    /// <br>Update Note: 2011/09/06 鄧潘ハン　</br>
    /// <br>           : 案件一覧 連番265 でのテスト不具合についての修正 FOR redmine #24497</br>
    /// <br>Update Note: 2011/09/09 wangf　</br>
    /// <br>           : 案件一覧 連番265 でのテスト不具合についての修正 FOR redmine #24497</br>
    /// <br>Update Note: 2011/09/15 yangmj　</br>
    /// <br>           : 案件一覧 連番265 でのテスト不具合についての修正 FOR redmine #25140</br>
    /// <br>UpdateNote : 2012/11/21 zhuhh</br>
    /// <br>           : 2013/01/16配信分</br>
    /// <br>           : redmine #33230 掛率設定マスタ内に論理削除レコードが存在する状態で、</br>
    /// <br>           : 同商品の掛率の登録をしようとしているために発生して</br>
    /// <br>           : いる不具合の対応</br>
    /// <br>UpdateNote : 2012/12/01 zhangy3</br>
    /// <br>           : 2013/01/16配信分</br>
    /// <br>           : Redmine#33231 商品在庫マスタ</br>
    /// <br>Update Note: K2013/05/13 王君</br>
    /// <br>管理番号   : 10901273-00 2013/06/18配信分</br>
    /// <br>             Redmine#35663 商品在庫マスタ・山形部品様個別組み込み</br>
    /// <br>Update Note: 2013/05/24 donggy</br>
    /// <br>管理番号   : 10801804-00 2013/06/18配信分 </br>
    /// <br>             Redmine#35874 商品マスタ登録の速度改善について</br>
    /// <br>Update Note: 2013/06/14 王君</br>
    /// <br>管理番号   : 10901273-00 2013/06/18配信分</br>
    /// <br>             Redmine#35663 商品在庫マスタの復活</br>
    /// <br>Update Note: 2013/09/18 田建委</br>
    /// <br>管理番号   : 10902175-00</br>
    /// <br>             Redmine#40423 旧商品在庫マスタの速度改善</br>
    /// <br>Update Note: 2014/01/14 gezh</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : Redmine#41448 商品在庫マスタの拠点コードが1で登録されている</br>
    /// <br>Update Note: 2014/01/15 huangt</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : Redmine#40998 貸出数の変更を可能にするように修正</br>
    /// <br>Update Note: 2014/02/10 高陽</br>
    /// <br>管理番号   : 10970685-00</br>
    /// <br>             Redmine#41976 商品マスタⅡの追加</br>
    /// <br>Update Note: 2014/04/22 高陽</br>
    /// <br>管理番号   : 10970685-00</br>
    /// <br>             Redmine#42312 システムテスト障害一覧No.61の対応</br>
    /// <br>Update Note: 2014/04/23 高陽</br>
    /// <br>管理番号   : 10970685-00</br>
    /// <br>             Redmine#42312 システムテスト障害一覧No.62の対応</br>
    /// <br>Update Note: 2014/08/08 譚洪</br>
    /// <br>管理番号   : 11000127-00</br>
    /// <br>             保存処理で「enter、マウス、F10」を連続押下の時、同時に保存処理の障害の対応</br>
    /// <br>Update Note: 2015/09/07 黄興貴</br>
    /// <br>管理番号   : 11170129-00</br>
    /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
    /// <br>Update Note: 2015/09/10 黄興貴</br>
    /// <br>管理番号   : 11170129-00</br>
    /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
    /// <br>Update Note: 2015/09/22 黄興貴</br>
    /// <br>管理番号   : 11170129-00</br>
    /// <br>             Redmine#47026 商品在庫マスタのフォーカス移動不正の障害対応</br>
    /// <br>Update Note: 2015/09/22 黄興貴</br>
    /// <br>管理番号   : 11170129-00</br>
    /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
    /// <br>Update Note: 2015/09/22 黄興貴</br>
    /// <br>管理番号   : 11170129-00</br>
    /// <br>             Redmine#47026 商品在庫マスタのフォーカス移動再修正</br>
    /// </remarks>
	public partial class MAKHN09280UA : Form
	{
		//================================================================================
		//  コンストラクタ
		//================================================================================
		#region Constructor
		/// <summary>
		/// 商品入力クラスコンストラクタ
		/// </summary>
		/// <remarks>
		/// <br>Note       : 商品入力クラスの新しいインスタンスを初期化します。</br>
		/// <br>Programmer : 18012 Y.Sasaki</br>
		/// <br>Date       : 2006.1.9</br>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>             改良対応</br>
        /// <br>             在庫関連日付項目の追加</br>
        /// <br>Update Note: 2011/08/02 caohh　</br>
        /// <br>           : NSユーザー改良要望一覧連番265の対応</br>
        /// <br>Update Note: K2013/05/13 王君</br>
        /// <br>管理番号   : 10901273-00 2013/06/18配信分</br>
        /// <br>             Redmine#35663 商品在庫マスタ・山形部品様個別組み込み</br>
		/// </remarks>
        // 2009.02.18 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //public MAKHN09280UA()
        public MAKHN09280UA(GoodsAcs goodsAcs)
        // 2009.02.18 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        {
			InitializeComponent();

            //-----------------------------------------------------------------------------
            // 各種インスタンス生成
            //-----------------------------------------------------------------------------
            // 2009.02.18 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //this._goodsAcs = new GoodsAcs();
            this._goodsAcs = goodsAcs;
            // FIXME:仕入先情報も取得？…this._goodsAcs.IsGetSupplier = true;
            // 2009.02.18 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            this._userGuideAcs = new UserGuideAcs();
            this._controlScreenSkin = new ControlScreenSkin();
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
            //this._goodsPriceInput = new MAKHN09280UB();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
            this._goodsPriceInput = new MAKHN09280UB( _goodsAcs, new GoodsUnitData() );
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
            this._goodsPriceInput.GridKeyDownTopRow += new EventHandler(this.GoodsPriceInput_GridKeyDownTopRow);
            this._goodsPriceInput.GridKeyDownButtomRow += new EventHandler(this.GoodsPriceInput_GridKeyDownButtomRow);
            this._goodsPriceInput.SettingGoodsPrice += new MAKHN09280UB.SettingGoodsPriceEventHandler(GoodsPriceInput_CalcUnitPrice);

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
            // 単品売価情報入力ユーザーコントロール
            this.__rateList = new List<Rate>();
            this._unitSalesPriceInput = new MAKHN09280UC();
            this._unitSalesPriceInput.GridKeyDownTopRow += new EventHandler( this.UnitSalesPriceInput_GridKeyDownTopRow );
            this._unitSalesPriceInput.GridKeyDownButtomRow += new EventHandler( this.UnitSalesPriceInput_GridKeyDownButtomRow );
            //this._unitSalesPriceInput.SettingGoodsPrice += new MAKHN09280UB.SettingGoodsPriceEventHandler( GoodsPriceInput_CalcUnitPrice );

            // --- ADD 2009/03/05 障害ID:12131対応------------------------------------------------------>>>>>
            this._stockProcMoneyAcs = new StockProcMoneyAcs();
            // --- ADD 2009/03/05 障害ID:12131対応------------------------------------------------------<<<<<

            // 在庫登録済み倉庫テーブル初期設定
            InitializeStockWarehouseTable();

            // 変則フォーカス制御ディクショナリ生成
            this.CreateIrregularFocusControlDictionary();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

            //-----------------------------------------------------------------------------
            // 初期化
            //-----------------------------------------------------------------------------
            this._imageList16 = IconResourceManagement.ImageList16;
			this._enterpriseCode = LoginInfoAcquisition.EnterpriseCode;
            // --- ADD 2010/06/08 ---------->>>>>
            _dateGet = DateGetAcs.GetInstance();
            // --- ADD 2010/06/08 ----------<<<<<
            // --- ADD caohh 2011/08/02 ----------------------------->>>>>
            this._mAKHN09280UD = new MAKHN09280UD();
            this._goodsStockInputConstructionAcs = new GoodsStockInputConstructionAcs();
            _keepOnInfo = _goodsStockInputConstructionAcs.KeepOnInfo;
            _saveInfoDiv = _goodsStockInputConstructionAcs.SaveInfoDiv;
            // --- ADD caohh 2011/08/02 -----------------------------<<<<<
            //----- ADD K2013/05/13 王君 Redmine#35663 ----->>>>>
            // オプション情報キャッシュ
            CacheOptionInfo();
            if (this._opt_YamagataCtrl == (int)MAKHN09280UA.Option.ON)
            {
                this._goodsAcs.GetYmgtMngChangeEnable(this._enterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode, out this._cstChangeEnable, out this._stcChangeEnable); // 仕入率/原単価修正可否フラグ
            }
            //----- ADD K2013/05/13 王君 Redmine#35663 -----<<<<<
            // -------- ADD START 2014/02/10 高陽 -------->>>>>
            if (this._opt_KonmanGoodsMstCtl == (int)Option.ON)
            {
                // 規格/荷姿/POS.No/メーカー品番を表示する
                this.ultraLabel48.Visible = true;
                this.Standard_tEdit.Visible = true;
                this.ultraLabel50.Visible = true;
                this.Packing_tEdit.Visible = true;
                this.ultraLabel49.Visible = true;
                this.PosNo_tEdit.Visible = true;
                this.ultraLabel51.Visible = true;
                this.MakerGoodsNo_tEdit.Visible = true;
            }
            else
            {
                // 規格/荷姿/POS.No/メーカー品番を表示しない
                this.ultraLabel48.Visible = false;
                this.Standard_tEdit.Visible = false;
                this.ultraLabel50.Visible = false;
                this.Packing_tEdit.Visible = false;
                this.ultraLabel49.Visible = false;
                this.PosNo_tEdit.Visible = false;
                this.ultraLabel51.Visible = false;
                this.MakerGoodsNo_tEdit.Visible = false;
            }
            // -------- ADD END 2014/02/10 高陽 --------<<<<<
		}
		#endregion

		//================================================================================
		//  内部メンバー
		//================================================================================
		#region Private Members
		private string _enterpriseCode;
		private ImageList _imageList16;

        // TBOマスタより起動時に使用
        private bool _initialInsertFlg;
        private int _goodsMakerCode;
        private string _goodsNo;

        private bool _stockSlipFlg = false; // 2010/07/14 在庫仕入入力から呼び出されたかのフラグ Add

		// -------------------------------------------------------------------------------
		#region < 各種オブジェクト >
		/// <summary>商品入力アクセスクラス</summary>
		GoodsAcs _goodsAcs;
        /// <summary>価格情報入力クラス</summary>
        private MAKHN09280UB _goodsPriceInput;
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        /// <summary>単品売価情報入力クラス</summary>
        private MAKHN09280UC _unitSalesPriceInput;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
		/// <summary>編集用商品連結クラス</summary>
		private GoodsUnitData _editGoodsUnitData;
		/// <summary>Undo用商品連結クラス</summary>
		private GoodsUnitData __goodsUnitData;
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        /// <summary>Undo用掛率リスト</summary>
        private List<Rate> __rateList;
        /// <summary>編集用在庫クラス</summary>
        private Stock _editStock;
        /// <summary>Undo用在庫クラス</summary>
        private Stock __stock;
        /// <summary>在庫登録済み倉庫テーブル</summary>
        private DataTable _stockWarehouseTable;
        /// <summary>変更前在庫リストバッファ</summary>
        private List<Stock> _prevStockList;
        private double _shipmentPosCountOrigin;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
        /// <summary>保存中画面</summary>
		private SFCMN00299CA _waitDialog;
		/// <summary>画面デザイン変更部品</summary>
		private ControlScreenSkin _controlScreenSkin;
		/// <summary>スキャナ部品</summary>
		private OLEScannerController _OLEScannerController = new OLEScannerController();
        /// <summary>ユーザーガイドマスタ アクセスクラス</summary>
        private UserGuideAcs _userGuideAcs;
        /// <summary>ＢＬコードマスタ　アクセスクラス</summary>
        private BLGoodsCdAcs _bLGoodsCdAcs;
        /// <summary>メーカーマスタ　アクセスクラス</summary>
        private MakerAcs _makerAcs;
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        /// <summary>倉庫アクセスクラス</summary>
        private WarehouseAcs _warehouseAcs;
        /// <summary>拠点アクセスクラス</summary>
        private SecInfoSetAcs _secInfoSetAcs;
        /// <summary>仕入先アクセスクラス</summary>
        private SupplierAcs _supplierAcs;
        /// <summary>フォーカス制御ディクショナリ</summary>
        private Dictionary<IrregularFocusControlKey,Control> _irregularFocusControlDic;
        /// <summary>操作中在庫の倉庫コード</summary>
        private string _edittingWarehouseCode;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
        // -- add wangf 2011/08/29 ---------->>>>>
        /// <summary>在庫管理全体設定設定アクセスクラス</summary>
        private StockMngTtlStAcs _stockMngTtlStAcs;
        // -- add wangf 2011/08/29 ----------<<<<<
        #endregion
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        // ユーザーガイド区分値（部品管理区分１）
        private const int ct_UserGdDiv_PartsManagementDivide1 = 72;
        // ユーザーガイド区分値（部品管理区分２）
        private const int ct_UserGdDiv_PartsManagementDivide2 = 73;
        // ユーザーガイド区分値（自社分類）
        private const int ct_UserGdDiv_EnterpriseGanreCode = 41;

        // 在庫登録済み倉庫テーブル.倉庫コード
        private const string ct_Col_StockWarehouse_Code = "StockWarehouse_Code";
        // 在庫登録済み倉庫テーブル.倉庫名称
        private const string ct_Col_StockWarehouse_Name = "StockWarehouse_Name";
        // 在庫登録済み倉庫テーブル.在庫オブジェクト
        private const string ct_Col_StockWarehouse_Object = "StockWarehouse_Object";
        // 在庫登録済み倉庫テーブル.削除日
        private const string ct_Col_StockWarehouse_DeleteDate = "StockWarehouse_DeleteDate";
        // 在庫登録済み倉庫テーブル.論理削除区分
        private const string ct_Col_StockWarehouse_LogicalDeleteCode = "StockWarehouse_LogicalDeleteCode";

        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

        // --- ADD 2009/03/05 障害ID:12131対応------------------------------------------------------>>>>>
        private StockProcMoneyAcs _stockProcMoneyAcs;
        // --- ADD 2009/03/05 障害ID:12131対応------------------------------------------------------<<<<<

        // --- ADD 2010/08/09----------------------------->>>>>
        private object _preComboEditorValue = null;
        // --- ADD 2010/08/09-----------------------------<<<<<

        // --- ADD m.suzuki 2010/11/12 ---------->>>>>
        private TotalDayCalculator _totalDayCalculator; // 締日チェック部品
        private DateGetAcs _dateGetAcs; // 日付取得部品
        // --- ADD m.suzuki 2010/11/12 ----------<<<<<

        // --- ADD caohh 2011/08/02 ----------------------------->>>>>
        private MAKHN09280UD _mAKHN09280UD; // ユーザー設定画面
        private GoodsStockInputConstructionAcs _goodsStockInputConstructionAcs;//ユーザー設定クラスアクセスクラス
        private Stock stockBak;             // 在庫情報
        private bool setUpFlag = true;　　　// 新規時設定画面の設定が有効かどうか
        //private bool clearScreenFlag = false; // DEL 2011/09/06
        private bool clearScreenFlag = true; // ADD 2011/09/06
        private List<int> _keepOnInfo;// 保存前情報保持
        private int _saveInfoDiv;     // 保存前情報区分
        // --- ADD caohh 2011/08/02 -----------------------------<<<<<

        private GoodsAcs.GoodsMngSettingPattern curFoundGoodsMngPattern = GoodsAcs.GoodsMngSettingPattern.None;//商品管理情報取得//Add 2012/12/01 zhangy3 for Redmine#33231

        private bool _isSaveFlg = false;  // ADD 2014/08/08 譚洪
        // -------------------------------------------------------------------------------
		#region < 各種フラグ >
		/// <summary>初期起動フラグ[T:初期起動済]</summary>
		private bool _initializing = false;
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        /// <summary>在庫登録済み倉庫一覧更新済みフラグ[T:更新あり]</summary>
        private bool _updateStockWarehouseTable = false;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

        // --- ADD 2010/06/08 ---------->>>>>
        private DateGetAcs _dateGet;                    // 日付取得部品
        // --- ADD 2010/06/08 ----------<<<<<
        // --- ADD K2013/05/13 王君 Redmine#35663 ---------->>>>>
        /// <summary> 山形部品オプションフラグ</summary>
        private int _opt_YamagataCtrl;
        /// <summary> 入力不可の背景色</summary>
        private readonly Color BACKCOLOR_DISABLE = Color.FromArgb(224, 224, 224);
        /// <summary> 仕入率/原単価修正可否フラグ</summary>
        private bool _cstChangeEnable = false;
        /// <summary> 在庫数修正可否フラグ</summary>
        private bool _stcChangeEnable = false;
        // --- ADD K2013/05/13 王君 Redmine#35663 ----------<<<<<

        // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- >>>>>
        //入力可の背景色
        private readonly Color BACKCOLOR_ENABLE = Color.FromArgb(255, 255, 255);
        // 前回貸出数
        private double _preShipmentCnt = 0;
        // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- <<<<<
        // -------- ADD START 2014/02/10 高陽 -------->>>>>
        /// <summary> 商品マスタ表示用プションフラグ</summary>
        private int _opt_KonmanGoodsMstCtl;
        // -------- ADD END 2014/02/10 高陽 --------<<<<<

		#endregion
		#endregion

		// ===============================================================================
		// プライベート定数
		// ===============================================================================
		#region Private Constant
		private const string CT_PGID = "MAKHN09280U";

		// ツールバーツールキー設定
		private const string TOOLBAR_CLOSEBUTTON_KEY = "Close_ButtonTool";
		private const string TOOLBAR_SAVEBUTTON_KEY = "Save_ButtonTool";
		private const string TOOLBAR_NEWBUTTON_KEY = "New_ButtonTool";
		private const string TOOLBAR_DELETEBUTTON_KEY = "Delete_ButtonTool";
		private const string TOOLBAR_UNDOBUTTON_KEY = "Undo_ButtonTool";
        // --- ADD 2008/09/02 -------------------------------->>>>>
        private const string TOOLBAR_COMPLETEDELETEBUTTON_KEY = "CompleteDelete_ButtonTool";
        private const string TOOLBAR_REVIVEBUTTON_KEY = "Revive_ButtonTool";
        // --- ADD 2010/08/09 -------------------------------->>>>>
        private const string TOOLBAR_GUIDEBUTTON_KEY = "Guide_ButtonTool";
        private const string TOOLBAR_NEXTPAGEBUTTON_KEY = "NextPage_ButtonTool";
        // --- ADD 2010/08/09 --------------------------------<<<<<
        // --- ADD 2008/09/02 --------------------------------<<<<<
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        private const string TOOLBAR_STOCK_SAVEBUTTON_KEY = "Stock_Save_ButtonTool";
        private const string TOOLBAR_STOCK_DELETEBUTTON_KEY = "Stock_Delete_ButtonTool";
        private const string TOOLBAR_STOCK_REVIVEBUTTON_KEY = "Stock_Revive_ButtonTool";
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
        // --- ADD 2009/03/30 残案件No.14対応------------------------------------------------------>>>>>
        private const string TOOLBAR_RENEWALBUTTON_KEY = "Renewal_ButtonTool";
        // --- ADD 2009/03/30 残案件No.14対応------------------------------------------------------<<<<<

        // --- ADD caohh 2011/08/02 -------------------------------->>>>>
        private const string TOOLBAR_SETUPBUTTON_KEY = "SetUp_ButtonTool";
        // --- ADD caohh 2011/08/02 --------------------------------<<<<<

        // --- ADD 2008/12/18 --------------------------------------------------------------------->>>>>
        private const string NEW_INPUT_TITLE = "新規";
        private const string UPDATE_INPUT_TITLE = "更新";
        private const string DELETE_INPUT_TITLE = "削除";
        // --- ADD 2008/12/18 ---------------------------------------------------------------------<<<<<
        #endregion

        // --- ADD K2013/05/13 王君 Redmine#35663 ---------->>>>>
        #region 列挙体
        /// <summary>
        /// オプション有効有無
        /// </summary>
        public enum Option : int
        {
            /// <summary>無効</summary>
            OFF = 0,
            /// <summary>有効</summary>
            ON = 1,
        }
        #endregion
        // --- ADD K2013/05/13 王君 Redmine#35663 ----------<<<<<

		//================================================================================
		//  外部提供関数
		//================================================================================
		#region Public Methods
		/// <summary>
		/// 商品入力画面起動
		/// </summary>
		/// <param name="owner">オーナーフォーム</param>
		/// <param name="data">対象データ</param>
		/// <returns>DialogResult</returns>
        /// <remarks>
        /// <br>UpDate Note : 2013/06/14 王君</br>
        /// <br>            : Redmine#35434</br>
        /// <br>UpDate Note : 2014/04/23 高陽</br>
        /// <br>            : Redmine#42312 システムテスト障害一覧No.62の対応</br>
        /// <br>Update Note: 2015/09/10 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
        /// </remarks>
		public DialogResult ShowDialog(IWin32Window owner ,ref GoodsUnitData data)
		{
            //送られてきたdataが未入力かどうかチェック
            GoodsUnitData tmp = new GoodsUnitData();
            if (data.Equals(tmp))
			{
                //-----------------------------------------------------------------------------
                // 新規
                //-----------------------------------------------------------------------------
                this._editGoodsUnitData = new GoodsUnitData();
				this._editGoodsUnitData.EnterpriseCode = this._enterpriseCode;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  G.Miyatsu 2008/11/28 ADD
                List<GoodsPrice> goodsPriceList;
                this._goodsAcs.GetGoodsPriceListFromGoodsPriceDataTable(out goodsPriceList);
                this._editGoodsUnitData.GoodsPriceList = goodsPriceList;
                //List<Stock> stockList = this.GetStockListFromStockWarehouseTable(); // DEL 2008/12/27
                List<Stock> stockList = this.GetStockListFromStockWarehouseTable(false); // ADD 2008/12/27
                this._editGoodsUnitData.StockList = stockList;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  G.Miyatsu 2008/11/28 ADD
                this.__goodsUnitData = this._editGoodsUnitData.Clone();
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                this._editStock = new Stock();
                this._editStock.EnterpriseCode = this._enterpriseCode;
                this.__stock = this._editStock.Clone();
                this.__rateList = new List<Rate>(); // MEMO:新規登録でShowDialog()
                // --- ADD 黄興貴 2015/09/10 Redmine#47026 --------------->>>>>
                // 商品新規登録時にも、単品売価掛率情報情報を取得する。
                string msg = string.Empty;
                if (!string.IsNullOrEmpty(this._editGoodsUnitData.GoodsNo) &&
                    this._editGoodsUnitData.GoodsMakerCd != 0)
                {
                    __rateList = RateHelper.SearchAll(this._editGoodsUnitData, out msg);
                }
                else
                {
                    __rateList = new List<Rate>();
                }
                // --- ADD 黄興貴 2015/09/10 Redmine#47026 ---------------<<<<<
                this._prevStockList = new List<Stock>();
                _edittingWarehouseCode = string.Empty;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

                // --- ADD 2008/12/18 --------------------------------------------------------------------->>>>>
                this.uLabel_InputModeTitle.Text = NEW_INPUT_TITLE;
                // --- ADD 2008/12/18 ---------------------------------------------------------------------<<<<<
			}
			else
			{
                //-----------------------------------------------------------------------------
                // 編集
                //-----------------------------------------------------------------------------
                // -------- ADD START 2014/04/23 高陽 FOR Redmine#42312 -------->>>>>
                if (this._opt_KonmanGoodsMstCtl == (int)Option.ON)
                {
                    if (data.CreateDateTimeA == DateTime.MinValue)
                    {
                        // 該当ありの場合も品名カナや単品売価情報などを取得する為に再検索
                        GoodsUnitData wkGoodsUnitData;
                        List<Rate> wkRateList;
                        int wkStatus = this._goodsAcs.ReadGoodsWithRate(this._enterpriseCode, data.GoodsMakerCd, data.GoodsNo, ConstantManagement.LogicalMode.GetData01, out wkGoodsUnitData, out wkRateList);
                        if (wkStatus == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            data.Standard = wkGoodsUnitData.Standard; // 規格
                            data.Packing = wkGoodsUnitData.Packing; // 荷姿
                            data.PosNo = wkGoodsUnitData.PosNo; // ＰＯＳNo.
                            data.MakerGoodsNo = wkGoodsUnitData.MakerGoodsNo; // メーカー品番
                            data.CreateDateTimeA = wkGoodsUnitData.CreateDateTimeA; // 作成日時Ⅱ
                            data.UpdateDateTimeA = wkGoodsUnitData.UpdateDateTimeA; // 更新日時Ⅱ
                            data.FileHeaderGuidA = wkGoodsUnitData.FileHeaderGuidA; // GUIDⅡ
                        }
                    }
                }
                // -------- ADD END 2014/04/23 高陽 FOR Redmine#42312 --------<<<<<
                this._editGoodsUnitData = data.Clone();
				this.__goodsUnitData = this._editGoodsUnitData.Clone();
				this.__goodsUnitData.EnterpriseCode = this._enterpriseCode;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                // ※倉庫コードが決まるまで、対象の在庫レコードが確定しないので新規と同じ処理
                this._editStock = new Stock();
                this._editStock.EnterpriseCode = this._enterpriseCode;
                this.__stock = this._editStock.Clone();

                // DEL 2009/11/20 3次分対応 得意先掛率グループ改良 ---------->>>>>
                // 掛率は別途読み込みが必要。
                //this._goodsAcs.ReadUnitRate( _editGoodsUnitData, ConstantManagement.LogicalMode.GetDataAll, out __rateList );
                // DEL 2009/11/20 3次分対応 得意先掛率グループ改良 ----------<<<<<
                // ADD 2009/11/20 3次分対応 得意先掛率グループ改良 ---------->>>>>
                // TODO:掛率の表示用テーブルの初期値はココで決まる。
                string msg = string.Empty;
                //__rateList = RateHelper.SearchAll(_editGoodsUnitData, out msg);// DEL 黄興貴 2015/09/10 Redmine#47026
                // --- ADD 黄興貴 2015/09/10 Redmine#47026 --------------->>>>>
                if (!string.IsNullOrEmpty(this.__goodsUnitData.GoodsNo) &&
                    this.__goodsUnitData.GoodsMakerCd != 0)
                {
                    __rateList = RateHelper.SearchAll(this.__goodsUnitData, out msg);
                }
                else
                {
                    __rateList = new List<Rate>();
                }
                // --- ADD 黄興貴 2015/09/10 Redmine#47026 ---------------<<<<<
                // ADD 2009/11/20 3次分対応 得意先掛率グループ改良 ----------<<<<<

                // 在庫リストクローン取得
                this._prevStockList = GetStockListClone( this._editGoodsUnitData.StockList );
                _edittingWarehouseCode = string.Empty;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

                // --- ADD 2008/12/18 --------------------------------------------------------------------->>>>>
                if (this._editGoodsUnitData.LogicalDeleteCode == 0)
                {
                    this.uLabel_InputModeTitle.Text = UPDATE_INPUT_TITLE;
                }
                else
                {
                    this.uLabel_InputModeTitle.Text = DELETE_INPUT_TITLE;
                }
                // --- ADD 2008/12/18 ---------------------------------------------------------------------<<<<<
                // ----- ADD 王君 2013/06/14 Redmine#35434 ----->>>>>
                if (this._editGoodsUnitData.OfferKubun >= 3)
                {
                    this.uLabel_InputModeTitle.Text = NEW_INPUT_TITLE;
                }
                // ----- ADD 王君 2013/06/14 Redmine#35434 -----<<<<<
            }

            this._initialInsertFlg = false;
            this._goodsMakerCode = 0;
            this._goodsNo = "";

            DialogResult dr = base.ShowDialog(owner);
            data = this._editGoodsUnitData.Clone();

            if (_stockSlipFlg) enableButton();  // 2010/07/14 Add

			return dr;
        }

        // 2010/07/14 Add >>>
        /// <summary>
        /// 在庫仕入入力から呼び出された場合、各ボタンを無効化します。
        /// </summary>
        /// <remarks>
        /// <br>UpDate Note : 2014/04/22 高陽</br>
        /// <br>            : Redmine#42312 システムテスト障害一覧No.61の対応</br>
        /// </remarks>
        private void enableButton()
        {
            this.Main_tToolbarsManager.Tools[TOOLBAR_NEWBUTTON_KEY].SharedProps.Enabled = false;
            this.Main_tToolbarsManager.Tools[TOOLBAR_DELETEBUTTON_KEY].SharedProps.Enabled = false;
            this.Main_tToolbarsManager.Tools[TOOLBAR_COMPLETEDELETEBUTTON_KEY].SharedProps.Enabled = false;
            this.Main_tToolbarsManager.Tools[TOOLBAR_REVIVEBUTTON_KEY].SharedProps.Enabled = false;
            this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY].SharedProps.Enabled = false; // ADD 2010/08/09
            this.Main_tToolbarsManager.Tools[TOOLBAR_NEXTPAGEBUTTON_KEY].SharedProps.Enabled = false; // ADD 2010/08/09
            this.Main_tToolbarsManager.Tools[TOOLBAR_UNDOBUTTON_KEY].SharedProps.Enabled = false;
            this.Main_tToolbarsManager.Tools[TOOLBAR_STOCK_SAVEBUTTON_KEY].SharedProps.Enabled = false;
            this.Main_tToolbarsManager.Tools[TOOLBAR_STOCK_DELETEBUTTON_KEY].SharedProps.Enabled = false;
            this.Main_tToolbarsManager.Tools[TOOLBAR_RENEWALBUTTON_KEY].SharedProps.Enabled = false;
            this.Main_tToolbarsManager.Tools[TOOLBAR_SAVEBUTTON_KEY].SharedProps.Enabled = true;
            this.ultraTabControl1.Tabs["Price"].Enabled = false;
            this.ultraTabControl1.Tabs["UnitPrice"].Enabled = false;
            this.tEdit_GoodsNo.Enabled = false;
            this.tNedit_GoodsMakerCd.Enabled = false;
            this.tEdit_GoodsName.Enabled = false;
            this.tNedit_BLGoodsCode.Enabled = false;
            this.tNedit_EnterpriseGanreCode.Enabled = false;
            this.GoodsKindCode_tComboEditor.Enabled = false;
            this.TaxationCode_tComboEditor.Enabled = false;
            this.GoodsNote1_tEdit.Enabled = false;
            this.GoodsNote2_tEdit.Enabled = false;
            this.GoodsSpecialNote_tEdit.Enabled = false;
            this.GoodsRateRank_tEdit.Enabled = false;
            this.tEdit_Jan.Enabled = false;
            this.GoodsMakerGuide_uButton.Enabled = false;
            this.BLGoodsGuide_uButton.Enabled = false;
            this.uButton_EnterpriseGanreGuide.Enabled = false;
            this.tEdit_WarehouseCode.Enabled = false;
            this.uButton_WarehouseGuide.Enabled = false;
            // -------- ADD START 2014/04/22 高陽 -------->>>>>
            this.Standard_tEdit.Enabled = false;
            this.Packing_tEdit.Enabled = false;
            this.PosNo_tEdit.Enabled = false;
            this.MakerGoodsNo_tEdit.Enabled = false;
            // -------- ADD END 2014/04/22 高陽 --------<<<<<
            SettingLogicalDeleteStockVisible(true);
            DeleteIndication_CheckEditor.Checked = true;

        }
        // 2010/07/14 Add <<<

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  y.shinobu 2008/12/02 ADD
        /// <summary>
        /// 商品入力画面起動
        /// </summary>
        /// <param name="owner">オーナーフォーム</param>
        /// <param name="data">対象データ</param>
        /// <returns>DialogResult</returns>
        /// <br>Update Note: 2015/09/10 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
        public DialogResult ShowDialog(IWin32Window owner, ref GoodsUnitData data, int makerCode, string goodsNo)
        {
            //-----------------------------------------------------------------------------
            // 新規
            //-----------------------------------------------------------------------------
            this._editGoodsUnitData = new GoodsUnitData();
            this._editGoodsUnitData.EnterpriseCode = this._enterpriseCode;
            this._editGoodsUnitData.GoodsMakerCd = makerCode;
            this._editGoodsUnitData.GoodsNo = goodsNo.Trim();
            List<GoodsPrice> goodsPriceList;
            this._goodsAcs.GetGoodsPriceListFromGoodsPriceDataTable(out goodsPriceList);
            this._editGoodsUnitData.GoodsPriceList = goodsPriceList;
            //List<Stock> stockList = this.GetStockListFromStockWarehouseTable(); // DEL 2008/12/27
            List<Stock> stockList = this.GetStockListFromStockWarehouseTable(false); // ADD 2008/12/27
            this._editGoodsUnitData.StockList = stockList;
            this.__goodsUnitData = this._editGoodsUnitData.Clone();
            this._editStock = new Stock();
            this._editStock.EnterpriseCode = this._enterpriseCode;
            this.__stock = this._editStock.Clone();
            this.__rateList = new List<Rate>(); // MEMO:新規登録でShowDialog()
            // --- ADD 黄興貴 2015/09/10 Redmine#47026 --------------->>>>>
            string msg = string.Empty;
            if (!string.IsNullOrEmpty(this.__goodsUnitData.GoodsNo)
                && this.__goodsUnitData.GoodsMakerCd != 0)
            {
                __rateList = RateHelper.SearchAll(this.__goodsUnitData, out msg);
            }
            else
            {
                __rateList = new List<Rate>();
            }
            // --- ADD 黄興貴 2015/09/10 Redmine#47026 ---------------<<<<<
            this._prevStockList = new List<Stock>();
            _edittingWarehouseCode = string.Empty;

            // --- ADD 2008/12/18 --------------------------------------------------------------------->>>>>
            this.uLabel_InputModeTitle.Text = NEW_INPUT_TITLE;
            // --- ADD 2008/12/18 ---------------------------------------------------------------------<<<<<

            this._initialInsertFlg = true;
            this._goodsMakerCode = makerCode;
            this._goodsNo = goodsNo;

            DialogResult dr = base.ShowDialog(owner);
            data = this._editGoodsUnitData.Clone();

            return dr;
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  y.shinobu 2008/12/02 ADD

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        /// <summary>
        /// 在庫リストクローン取得処理
        /// </summary>
        /// <param name="originList">複製元在庫リスト</param>
        /// <returns>在庫リストクローン</returns>
        /// <remarks>在庫リストのクローン(メモリ上別実体の複製)を返します。</remarks>
        private List<Stock> GetStockListClone( List<Stock> originList )
        {
            List<Stock> cloneList = new List<Stock>();
            if ( originList == null ) return cloneList;

            foreach ( Stock stock in originList )
            {
                cloneList.Add( stock.Clone() );
            }
            return cloneList;
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

        // ADD 2009/11/16 3次分対応 在庫仕入入力に在庫登録機能を追加に伴う在庫情報の初期値指定型ShowDialog()の追加 ---------->>>>>
        #region 在庫情報タブの項目定義

        /// <summary>
        /// 在庫情報タブの項目クラス
        /// </summary>
        public sealed class StockTabItem
        {
            #region 倉庫

            /// <summary>倉庫コード</summary>
            private readonly string _warehouseCode;
            /// <summary>倉庫コードを取得します。</summary>
            public string WarehouseCode { get { return _warehouseCode; } }

            /// <summary>倉庫名称</summary>
            private readonly string _warehouseName;
            /// <summary>倉庫名称を取得します。</summary>
            public string WarehouseName { get { return _warehouseName; } } 

            #endregion // 倉庫

            #region 管理拠点

            /// <summary>管理拠点コード</summary>
            private readonly string _sectionCode;
            /// <summary>管理拠点コードを取得します。</summary>
            public string SectionCode { get { return _sectionCode; } }

            /// <summary>管理拠点名称</summary>
            private readonly string _sectionName;
            /// <summary>管理拠点名称を取得します。</summary>
            public string SectionName { get { return _sectionName; } } 

            #endregion // 管理拠点コード

            #region Constructor

            /// <summary>
            /// カスタムコンストラクタ
            /// </summary>
            /// <param name="warehouseCode">倉庫コード</param>
            public StockTabItem(string warehouseCode) : this(warehouseCode, string.Empty, string.Empty, string.Empty) { }

            /// <summary>
            /// カスタムコンストラクタ
            /// </summary>
            /// <param name="warehouseCode">倉庫コード</param>
            /// <param name="warehouseName">倉庫名称</param>
            /// <param name="sectionCode">管理拠点コード</param>
            /// <param name="sectonName">管理拠点名称</param>
            public StockTabItem(
                string warehouseCode,
                string warehouseName,
                string sectionCode,
                string sectonName
            )
            {
                _warehouseCode  = warehouseCode;
                _warehouseName  = warehouseName;
                _sectionCode    = sectionCode;
                _sectionName    = sectonName;
            }

            #endregion // Constructor
        }

        #endregion // 在庫情報タブの項目定義

        /// <summary>ロード時に取り込む在庫情報タブの項目</summary>
        private StockTabItem _loadingStockTabItem;
        /// <summary>ロード時に取り込む在庫情報タブの項目を取得または設定します。</summary>
        private StockTabItem LoadingStockTabItem
        {
            get { return _loadingStockTabItem; }
            set { _loadingStockTabItem = value; }
        }

        /// <summary>
        /// 在庫情報タブの項目をロードします。
        /// </summary>
        private void LoadStockTabItem()
        {
            if (LoadingStockTabItem == null) return;
            if (string.IsNullOrEmpty(LoadingStockTabItem.WarehouseCode)) return;

            string warehouseCode= string.Empty;
            string warehouseName= string.Empty;
            string sectionCode  = string.Empty;
            string sectionName  = string.Empty;
            bool isSuccess = ReadWarehouseWithSection(
                LoadingStockTabItem.WarehouseCode,
                out warehouseCode,
                out warehouseName,
                out sectionCode,
                out sectionName
            );
            if (!isSuccess) return;
            if (string.IsNullOrEmpty(warehouseCode)) return;

            this.tEdit_WarehouseCode.Text = warehouseCode;
            this.tEdit_WarehouseName.Text = warehouseName;
            this.tEdit_SectionCode.Text = string.IsNullOrEmpty(LoadingStockTabItem.SectionCode) ? sectionCode : LoadingStockTabItem.SectionCode;
            this.tEdit_SectionName.Text = string.IsNullOrEmpty(LoadingStockTabItem.SectionCode) ? sectionName : LoadingStockTabItem.SectionName;

            this.ultraTabControl1.Focus();
            this.ultraTabControl1.Tabs["Stock"].Active = true;
            this.ultraTabControl1.Tabs["Stock"].Selected = true;
            this.tEdit_WarehouseShelfNo.Focus();
            ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09
        }

        /// <summary>
        /// 在庫情報タブがアクティブな場合の初期表示を設定します。
        /// </summary>
        /// <returns>
        /// <c>true</c> :設定あり<br/>
        /// <c>false</c>:設定なし
        /// </returns>
        private bool ShownFirstStockTabItemIf()
        {
            if (!this.ultraTabControl1.ActiveTab.Key.Equals("Stock")) return false;

            if (!string.IsNullOrEmpty(this.tEdit_WarehouseCode.Text.Trim()))
            {
                int warehouseCode = int.Parse(this.tEdit_WarehouseCode.Text.Trim());
                ChoiceStockWarehouse(warehouseCode.ToString("d4"));
                this.tEdit_WarehouseShelfNo.Focus();
                ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09
            }
            else
            {
                this.tEdit_WarehouseCode.Focus();
                ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = true; // ADD 2010/08/09
            }
            return true;
        }

        /// <summary>保存後にフォームを閉じるフラグ</summary>
        private bool _isClosingAfterSave;
        /// <summary>保存後にフォームを閉じるフラグを取得または設定します。</summary>
        private bool IsClosingAfterSave
        {
            get { return _isClosingAfterSave; }
            set { _isClosingAfterSave = value; }
        }

        /// <summary>
        /// 商品入力画面起動
        /// </summary>
        /// <param name="owner">オーナーフォーム</param>
        /// <param name="data">対象データ</param>
        /// <param name="stockTabItem">ロード時の在庫情報タブの項目値</param>
        /// <returns>DialogResult</returns>
        public DialogResult ShowDialog(
            IWin32Window owner,
            ref GoodsUnitData data,
            StockTabItem loadingStockTabItem
        )
        {
            LoadingStockTabItem = loadingStockTabItem;
            IsClosingAfterSave = LoadingStockTabItem != null;
            _stockSlipFlg = true;   // 2010/07/14 在庫仕入入力から呼び出されたと判断する Add
            return ShowDialog(owner, ref data);
        }
        // ADD 2009/11/16 3次分対応 在庫仕入入力に在庫登録機能を追加に伴う在庫情報の初期値指定型ShowDialog()の追加 ----------<<<<<

		#endregion

		//================================================================================
		//  内部関数
		//================================================================================
		#region Private Methods
		/// <summary>
		/// 画面初期設定処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 画面の初期設定を行います。</br>
		/// <br>Programmer : 18012 Y.Sasaki</br>
		/// <br>Date       : 2007.1.16</br>
        /// <br>Update Note: 2011/08/02 caohh　</br>
        /// <br>           : NSユーザー改良要望一覧連番265の対応</br>
        /// <br>Update Note: 2012/12/01 zhangy3　</br>
        /// <br>           : 2013/01/16配信分 Redmine#33231 商品在庫マスタ</br>
		/// </remarks>
		private void InitialScreenSetting()
		{
			// ツールバーアイコンの設定
			this.Main_tToolbarsManager.ImageListSmall = IconResourceManagement.ImageList16;

			// 閉じるのアイコン設定
			Infragistics.Win.UltraWinToolbars.ButtonTool closeButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_CLOSEBUTTON_KEY];
			if (closeButton != null) closeButton.SharedProps.AppearancesSmall.Appearance.Image = Size16_Index.CLOSE;

			// 保存のアイコン設定
			Infragistics.Win.UltraWinToolbars.ButtonTool saveButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_SAVEBUTTON_KEY];
			if (saveButton != null) saveButton.SharedProps.AppearancesSmall.Appearance.Image = Size16_Index.SAVE;

			// 新規のアイコン設定
			Infragistics.Win.UltraWinToolbars.ButtonTool newButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_NEWBUTTON_KEY];
			if (newButton != null) newButton.SharedProps.AppearancesSmall.Appearance.Image = Size16_Index.NEW;

			// 削除のアイコン設定
			Infragistics.Win.UltraWinToolbars.ButtonTool delButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_DELETEBUTTON_KEY];
			if (delButton != null) delButton.SharedProps.AppearancesSmall.Appearance.Image = Size16_Index.DELETE;

            // --- ADD 2008/09/02 -------------------------------->>>>>
            // 完全削除のアイコン設定
            Infragistics.Win.UltraWinToolbars.ButtonTool compDelButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_COMPLETEDELETEBUTTON_KEY];
            if (compDelButton != null) compDelButton.SharedProps.AppearancesSmall.Appearance.Image = Size16_Index.DELETE;

            // 復活のアイコン設定
            Infragistics.Win.UltraWinToolbars.ButtonTool reviveButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_REVIVEBUTTON_KEY];
            if (reviveButton != null) reviveButton.SharedProps.AppearancesSmall.Appearance.Image = Size16_Index.MODIFY;

            // --- ADD 2008/09/02 --------------------------------<<<<< 

            // --- ADD 2010/08/09 -------------------------------->>>>>
            // ガイドのアイコン設定
            Infragistics.Win.UltraWinToolbars.ButtonTool guideButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY];
            if (guideButton != null) guideButton.SharedProps.AppearancesSmall.Appearance.Image = Size16_Index.GUIDE;

            // 次頁のアイコン設定
            Infragistics.Win.UltraWinToolbars.ButtonTool nextPageButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_NEXTPAGEBUTTON_KEY];
            if (nextPageButton != null) nextPageButton.SharedProps.AppearancesSmall.Appearance.Image = Size16_Index.INDICATIONCHANGE;

            // --- ADD 2010/08/09 --------------------------------<<<<<


			// 元に戻のアイコン設定
			Infragistics.Win.UltraWinToolbars.ButtonTool undoButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_UNDOBUTTON_KEY];
			if (undoButton != null) undoButton.SharedProps.AppearancesSmall.Appearance.Image = Size16_Index.UNDO;

		    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
            // 在庫保存アイコン
            Infragistics.Win.UltraWinToolbars.ButtonTool stockSaveButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_STOCK_SAVEBUTTON_KEY];
            if ( stockSaveButton != null ) stockSaveButton.SharedProps.AppearancesSmall.Appearance.Image = Size16_Index.SAVE;

            // 在庫削除アイコン
            Infragistics.Win.UltraWinToolbars.ButtonTool stockDeleteButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_STOCK_DELETEBUTTON_KEY];
            if ( stockDeleteButton != null ) stockDeleteButton.SharedProps.AppearancesSmall.Appearance.Image = Size16_Index.DELETE;
            
            // 在庫復活アイコン
            Infragistics.Win.UltraWinToolbars.ButtonTool stockReviveButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_STOCK_REVIVEBUTTON_KEY];
            if ( stockReviveButton != null ) stockReviveButton.SharedProps.AppearancesSmall.Appearance.Image = Size16_Index.MODIFY;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

            // --- ADD 2009/03/30 残案件No.14対応------------------------------------------------------>>>>>
            // 最新情報アイコン
            Infragistics.Win.UltraWinToolbars.ButtonTool renewalButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_RENEWALBUTTON_KEY];
            if (renewalButton != null) renewalButton.SharedProps.AppearancesSmall.Appearance.Image = Size16_Index.RENEWAL;
            // --- ADD 2009/03/30 残案件No.14対応------------------------------------------------------<<<<<

            // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
            // 設定アイコン
            Infragistics.Win.UltraWinToolbars.ButtonTool setUpButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_SETUPBUTTON_KEY];
            if (setUpButton != null) setUpButton.SharedProps.AppearancesSmall.Appearance.Image = Size16_Index.SETUP1;
            // --- ADD caohh 2011/08/02 ------------------------------------------------------<<<<<

			// アイコン設定
			this._imageList16 = IconResourceManagement.ImageList16;
            
			this.GoodsMakerGuide_uButton.Appearance.Image = this._imageList16.Images[(int)Size16_Index.STAR1];
			this.BLGoodsGuide_uButton.Appearance.Image = this._imageList16.Images[(int)Size16_Index.STAR1];
            this.PayeeCodeGuid_uButton.Appearance.Image = this._imageList16.Images[(int)Size16_Index.STAR1];
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
            this.uButton_EnterpriseGanreGuide.Appearance.Image = this._imageList16.Images[(int)Size16_Index.STAR1];
            this.uButton_WarehouseGuide.Appearance.Image = this._imageList16.Images[(int)Size16_Index.STAR1];
            this.uButton_SectionGuide.Appearance.Image = this._imageList16.Images[(int)Size16_Index.STAR1];
            this.uButton_SupplierGuide.Appearance.Image = this._imageList16.Images[(int)Size16_Index.STAR1];
            this.uButton_PartsManagementDivide1.Appearance.Image = this._imageList16.Images[(int)Size16_Index.STAR1];
            this.uButton_PartsManagementDivide2.Appearance.Image = this._imageList16.Images[(int)Size16_Index.STAR1];
　       　 // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

			// ラベルの色設定
			CustomUltraGridAppearance cuga = this._controlScreenSkin.GetGridAppearance();
			if (cuga != null)
			{
				this.Goods_uLbl.Appearance.BackColor = cuga.GridHeaderAppearance.BackColor;
				this.Goods_uLbl.Appearance.BackColor2 = cuga.GridHeaderAppearance.BackColor2;
				this.Goods_uLbl.Appearance.ForeColor = cuga.GridHeaderAppearance.ForeColor;
            }
            
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 DEL
            //// 自社分類名称情報取得
            //if (GoodsAcs.EnterpriseGanreCodeList != null)
            //{
            //    if (GoodsAcs.EnterpriseGanreCodeList.Count != 0)
            //    {
            //        int i = 0;
            //        int iGuideCode = 0;
            //        EnterpriseGanreCode_tComboEditor.Items.Clear();
            //        EnterpriseGanreCode_tComboEditor.Items.Add(0, " ");
            //        foreach (int guideCode in GoodsAcs.EnterpriseGanreCodeList.Keys)
            //        {
            //            if (i == 0)
            //            {
            //                iGuideCode = guideCode;
            //            }
            //            EnterpriseGanreCode_tComboEditor.Items.Add(guideCode, GoodsAcs.EnterpriseGanreCodeList[guideCode]);
            //            i++;
            //        }
            //        EnterpriseGanreCode_tComboEditor.MaxDropDownItems = EnterpriseGanreCode_tComboEditor.Items.Count;
            //        EnterpriseGanreCode_tComboEditor.Value = iGuideCode;
            //    }
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 DEL
		}

		/// <summary>
		/// 商品連結データ → 画面
		/// </summary>
		/// <param name="data">商品連結データ</param>
		/// <remarks>
		/// <br>Note       : 画面 → 商品連結データを行います。</br>
		/// <br>Programmer : 18012 Y.Sasaki</br>
		/// <br>Date       : 2007.1.16</br>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>               障害改良対応</br>
        /// <br>               品名入力項目の変更</br>
        /// <br>Update Note: 2011/08/02 caohh　</br>
        /// <br>           : NSユーザー改良要望一覧連番265の対応</br>
        /// <br>Update Note: 2012/12/01 zhangy3　</br>
        /// <br>           : 2013/01/16配信分 Redmine#33231 商品在庫マスタ</br>
        /// <br>Update Note: 2014/02/10 高陽</br>
        /// <br>           : Redmine#41976 規格/荷姿/POS.No/メーカー品番/更新日時Ⅱの追加</br>
		/// </remarks>
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
        //private void SetScreenFromGoodsUnitData(GoodsUnitData data)
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        private void SetScreenFromGoodsUnitData( GoodsUnitData data, List<Rate> rateList )
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
        {
			try
			{
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki
                // 描画を止める＞＞
                this.SuspendLayout();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki

                //-----------------------------------------------------------------------------
                // 不足情報設定
                //-----------------------------------------------------------------------------
                this._goodsAcs.SettingGoodsUnitDataFromVariousMst(ref data);

                //-----------------------------------------------------------------------------
                // 商品情報
                //-----------------------------------------------------------------------------
                // 作成日
				if (data.CreateDateTime != DateTime.MinValue)
				{
					this.CreateDateTime_tDateEdit.SetDateTime(data.CreateDateTime);
				}
				else
				{
					this.CreateDateTime_tDateEdit.Clear();
				}

				// 更新日
				if (data.UpdateDateTime != DateTime.MinValue)
				{
					this.UpdateDateTime_tDateEdit.SetDateTime(data.UpdateDateTime);
				}
				else
				{
					this.UpdateDateTime_tDateEdit.Clear();
				}
                // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
                // 保存前情報が『クリアする』場合
                if (this._saveInfoDiv == 1 && this.uLabel_InputModeTitle.Text.Equals(NEW_INPUT_TITLE)) 
                {
                    // 作成日
                    this.CreateDateTime_tDateEdit.Clear();
                    // 更新日
                    this.UpdateDateTime_tDateEdit.Clear();
                }
                // --- ADD caohh 2011/08/02 ------------------------------------------------------<<<<<

                // メーカーコード
                this.tNedit_GoodsMakerCd.SetInt(data.GoodsMakerCd);

                // メーカー名
                this.GoodsMakerName_tEdit.DataText = data.MakerName;

                // 品番
                this.tEdit_GoodsNo.DataText = data.GoodsNo;

                // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
                // 品番・メーカーがクリアする場合
                if (setUpFlag && this._saveInfoDiv == 1 && (this._keepOnInfo != null && this._keepOnInfo[0] == 0) && this.uLabel_InputModeTitle.Text.Equals(NEW_INPUT_TITLE))
                {
                    // メーカーコード
                    this.tNedit_GoodsMakerCd.SetInt(0);

                    // メーカー名
                    this.GoodsMakerName_tEdit.DataText = string.Empty;

                    // 品番
                    this.tEdit_GoodsNo.DataText = string.Empty;
                }
                // --- ADD caohh 2011/08/02 ------------------------------------------------------<<<<<

                // 品名
                this.tEdit_GoodsName.DataText = data.GoodsName;

                // --- DEL 2010/06/08 ---------->>>>>
                // 品名カナ
                // this.tEdit_GoodsNameKana.DataText = data.GoodsNameKana;
                // --- DEL 2010/06/08 ----------<<<<<

                // JANコード
                this.tEdit_Jan.DataText = data.Jan;

                // BLコード
                this.tNedit_BLGoodsCode.SetInt(data.BLGoodsCode);

                // BLコード名称
                                
                this.BLtEdit_GoodsName.DataText = data.BLGoodsFullName;

                // 商品掛率ランク
                this.GoodsRateRank_tEdit.DataText = data.GoodsRateRank.TrimEnd();

                // 商品属性
                this.GoodsKindCode_tComboEditor.Value = data.GoodsKindCode;

                // -------- ADD START 2014/02/10 高陽 -------->>>>>
                // 規格
                this.Standard_tEdit.DataText = data.Standard;

                // 荷姿
                this.Packing_tEdit.DataText = data.Packing;

                // ＰＯＳNo.
                this.PosNo_tEdit.DataText = data.PosNo;

                // メーカー品番
                this.MakerGoodsNo_tEdit.DataText = data.MakerGoodsNo;
                // -------- ADD END 2014/02/10 高陽 --------<<<<<

                // 自社分類コード
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 DEL
                //if (data.EnterpriseGanreCode == 0)
                //{
                //    this.EnterpriseGanreCode_tComboEditor.Value = this.EnterpriseGanreCode_tComboEditor.Items[0].DataValue;
                //}
                //else
                //{
                //    this.EnterpriseGanreCode_tComboEditor.Value = data.EnterpriseGanreCode;
                //}
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 ADD
                tNedit_EnterpriseGanreCode.SetInt( data.EnterpriseGanreCode );
                tEdit_EnterpriseGanreName.Text = data.EnterpriseGanreName.TrimEnd();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 ADD

                // 課税区分
                this.TaxationCode_tComboEditor.Value = data.TaxationDivCd;

                // 大分類名称(表示のみ)
                this.GoodsLGroupName_tEdit.DataText = data.GoodsLGroupName;
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                this.tNedit_GoodsLGroup.DataText = data.GoodsLGroup.ToString("d4");
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<

                // 中分類名称(表示のみ)
				this.GoodsMGroupName_tEdit.DataText = data.GoodsMGroupName;
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                this.tNedit_GoodsMGroup.DataText = data.GoodsMGroup.ToString("d4");
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<

                // UNDONE:商品掛率グループ名称(表示のみ)
                GoodsGroupU goodsMGroup;
                this._goodsAcs.GetGoodsMGroup(this._enterpriseCode, data.GoodsRateGrpCode, out goodsMGroup);
                this.GoodsRateGrpName_tEdit.Value = goodsMGroup.GoodsMGroupName;
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                this.tNedit_RateGrpCode.DataText = goodsMGroup.GoodsMGroup.ToString("d4");
                //this.GoodsRateGrpName_tEdit.Value = data.GoodsRateGrpName;
                //this.tNedit_RateGrpCode.DataText = data.GoodsRateGrpCode.ToString("d4");
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<

                // BLグループコード名称(表示のみ)
                this.BLGroupName_tEdit.DataText = data.BLGroupName;
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                this.tNedit_BLGloupCode.DataText = data.BLGroupCode.ToString("d5");
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<

                //// 表示順位
                //this.DisplayOrder_tNedit.SetInt(data.DisplayOrder);

                // 提供日付
                if (data.OfferDate != DateTime.MinValue)
                {
                    this.GoodsUOfferDate_tDateEdit.SetDateTime(data.OfferDate);
                }
                else
                {
                    this.GoodsUOfferDate_tDateEdit.Clear();
                }

                // 商品備考１
                this.GoodsNote1_tEdit.DataText = data.GoodsNote1;

                // 商品備考２
                this.GoodsNote2_tEdit.DataText = data.GoodsNote2;

                // 商品規格・特記事項
                this.GoodsSpecialNote_tEdit.DataText = data.GoodsSpecialNote;

                // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの仕入先を表示 ---------->>>>>
                // 商品管理情報マスタの仕入先
                SetGoodsMngSupplier(data);
                // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの仕入先を表示 ----------<<<<<
                // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
                // 商品情報がクリアする場合
                if (setUpFlag && this._saveInfoDiv == 1 && (this._keepOnInfo != null && this._keepOnInfo[1] == 0) && this.uLabel_InputModeTitle.Text.Equals(NEW_INPUT_TITLE))
                {
                    // 品名
                    this.tEdit_GoodsName.DataText = string.Empty;
                    // JANコード
                    this.tEdit_Jan.DataText = string.Empty;
                    // BLコード
                    this.tNedit_BLGoodsCode.SetInt(0);
                    // BLコード名称
                    this.BLtEdit_GoodsName.DataText = string.Empty;
                    // 商品掛率ランク
                    this.GoodsRateRank_tEdit.DataText = string.Empty;
                    // 商品属性
                    this.GoodsKindCode_tComboEditor.Value = 0;
                    // 自社分類コード
                    tNedit_EnterpriseGanreCode.SetInt(0);
                    tEdit_EnterpriseGanreName.Text = string.Empty;
                    // 課税区分
                    this.TaxationCode_tComboEditor.Value = 0;
                    // 大分類名称(表示のみ)
                    this.GoodsLGroupName_tEdit.DataText = string.Empty;
                    this.tNedit_GoodsLGroup.DataText = string.Empty;
                    // 中分類名称(表示のみ)
                    this.GoodsMGroupName_tEdit.DataText = string.Empty;
                    this.tNedit_GoodsMGroup.DataText = string.Empty;
                    // 商品掛率グループ名称(表示のみ)
                    this.GoodsRateGrpName_tEdit.Value = string.Empty;
                    this.tNedit_RateGrpCode.DataText = string.Empty;
                    // BLグループコード名称(表示のみ)
                    this.BLGroupName_tEdit.DataText = string.Empty;
                    this.tNedit_BLGloupCode.DataText = string.Empty;
                    // 提供日付
                    this.GoodsUOfferDate_tDateEdit.Clear();
                    // 商品備考１
                    this.GoodsNote1_tEdit.DataText = string.Empty;
                    // 商品備考２
                    this.GoodsNote2_tEdit.DataText = string.Empty;
                    // 商品規格・特記事項
                    this.GoodsSpecialNote_tEdit.DataText = string.Empty;
                    // 商品管理情報マスタの仕入先
                    this.tNedit_PayeeCode.Clear();
                    this.tEdit_PayeeName.Clear();
                    this.tEdit_PayeePattern.Clear();
                    curFoundGoodsMngPattern = GoodsAcs.GoodsMngSettingPattern.None;//Add 2012/12/01 zhangy3 for Redmine#33231 
                }
                // --- ADD caohh 2011/08/02 ------------------------------------------------------<<<<<

                //-----------------------------------------------------------------------------
                // 価格情報
                //-----------------------------------------------------------------------------
                if ((data.GoodsPriceList != null) && (data.GoodsPriceList.Count != 0))
                {
                    // TODO:価格情報キャッシュ
                    this._goodsAcs.CacheGoodsPrice(data);
                }
                else
                {
                    // 価格情報テーブルクリア
                    this._goodsAcs.ClearGoodsPriceDataTable();
                }

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/17 ADD
                this._goodsPriceInput.GoodsUnitData = data;
                this._goodsPriceInput.GoodsAcs = _goodsAcs;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/17 ADD

                // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
                // 価格情報がクリアする
                if (setUpFlag && this._saveInfoDiv == 1 && (this._keepOnInfo != null && this._keepOnInfo[2] == 0) && this.uLabel_InputModeTitle.Text.Equals(NEW_INPUT_TITLE))
                {
                    this._goodsAcs.ClearGoodsPriceDataTable();
                    DateTime priceStartDate = GetPriceStartDate();
                    this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateYearColumn.ColumnName].Value = priceStartDate.Year;
                    this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateMonthColumn.ColumnName].Value = priceStartDate.Month;
                    this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateDayColumn.ColumnName].Value = priceStartDate.Day;
                }
                // --- ADD caohh 2011/08/02 ------------------------------------------------------<<<<<

                //-----------------------------------------------------------------------------
                // 画面入力・非入力項目制御
                //-----------------------------------------------------------------------------
                this.ChangeEditMode(data);

                //-----------------------------------------------------------------------------
                // 価格情報グリッド設定処理
                //-----------------------------------------------------------------------------
                for (int i = 0; i < this._goodsAcs.GoodsPriceDataTable.Count; i++)
                {
                    this._goodsPriceInput.SettingGridRow(i);
                }

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                //-----------------------------------------------------------------------------
                // 単品売価情報
                //-----------------------------------------------------------------------------
                _unitSalesPriceInput.SetRateList( rateList );   // TODO:掛率の表示用テーブルを設定するタイミングはココだけ

                // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
                // 単品売価情報がクリアする
                if (setUpFlag && this._saveInfoDiv == 1 && (this._keepOnInfo != null && this._keepOnInfo[3] == 0) && this.uLabel_InputModeTitle.Text.Equals(NEW_INPUT_TITLE))
                {
                    _unitSalesPriceInput.ClearSalesPriceRateTable();
                }
                // --- ADD caohh 2011/08/02 ------------------------------------------------------<<<<<

                //-----------------------------------------------------------------------------
                // 在庫情報（このタイミングで登録済み倉庫一覧の最初のレコードを表示する）
                //-----------------------------------------------------------------------------
                ClearStockWarehouseTable();

                if ( data.StockList != null )
                {
                    foreach ( Stock stock in data.StockList )
                    {
                        AddToStockWarehouseTable( stock );
                    }
                }
                else
                {
                    data.StockList = new List<Stock>();
                }

                // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
                // 倉庫情報がクリアする
                if (setUpFlag && this._saveInfoDiv == 1 && (this._keepOnInfo != null && this._keepOnInfo[4] == 0) && this.uLabel_InputModeTitle.Text.Equals(NEW_INPUT_TITLE)) 
                {
                    ClearStockWarehouseTable();
                }
                // --- ADD caohh 2011/08/02 ------------------------------------------------------<<<<<

                // 在庫情報入力部
                //if ( data.StockList.Count > 0 )
                //{
                //    Stock wkEditStock = null;
                //    if ( _edittingWarehouseCode != string.Empty )
                //    {
                //        // 保存処理などの前に編集中だった在庫を表示
                //        foreach ( Stock stock in data.StockList )
                //        {
                //            if (stock.WarehouseCode == _edittingWarehouseCode)
                //            {
                //                wkEditStock = stock;
                //                break;
                //            }
                //        }
                //    }
                //    else
                //    {
                //        // 論理削除済みでない先頭の在庫を表示
                //        foreach ( Stock stock in data.StockList )
                //        {
                //            if ( stock.LogicalDeleteCode == 0 )
                //            {
                //                wkEditStock = stock;
                //                break;
                //            }
                //        }
                //    }
                //    if ( wkEditStock != null )
                //    {
                //        _editStock = wkEditStock;
                //    }
                //    else
                //    {
                //        // 先頭の在庫を表示
                //        _editStock = data.StockList[0];
                //    }

                //    // 在庫更新モード表示（更新）
                //    SetStockModeFromExists( true );
                //}
                //else
                //{
                //    // 在庫がなければ初期化
                //    _editStock = CreateNewStock( string.Empty );

                //    // 在庫更新モード表示（新規）
                //    SetStockModeFromExists( false );
                //}

                // 在庫がなければ初期化
                _editStock = CreateNewStock(string.Empty);

                // 在庫更新モード表示（新規）
                SetStockModeFromExists(false);

                __stock = _editStock.Clone();
                SetScreenFromStock(_editStock);

                // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
                // 新規時、画面クリア
                if (clearScreenFlag) 
                {
                    stockBak = new Stock();
                }
                // 在庫情報がクリアしない
                if (setUpFlag && this._saveInfoDiv == 1 && (this._keepOnInfo != null && this._keepOnInfo[4] == 1) && this.uLabel_InputModeTitle.Text.Equals(NEW_INPUT_TITLE))
                {
                    this.tEdit_WarehouseCode.Text = stockBak.WarehouseCode; //倉庫コード
                    this.tEdit_WarehouseName.Text = stockBak.WarehouseName; //倉庫名
                    tEdit_SectionCode.Text = stockBak.SectionCode;//管理拠点（拠点）コード
                    tEdit_SectionName.Text = this.GetSectionName(stockBak.SectionCode); // 管理拠点（拠点）名
                    tEdit_WarehouseShelfNo.Text = stockBak.WarehouseShelfNo; // 倉庫棚番
                    tEdit_DuplicationShelfNo1.Text = stockBak.DuplicationShelfNo1; // 重複棚番１
                    tEdit_DuplicationShelfNo2.Text = stockBak.DuplicationShelfNo2; // 重複棚番２
                    tComboEditor_StockDiv.Value = stockBak.StockDiv; // 在庫区分
                    tNedit_MinimumStockCnt.SetValue(stockBak.MinimumStockCnt); // 最低在庫数
                    tNedit_MaximumStockCnt.SetValue(stockBak.MaximumStockCnt); // 最高在庫数
                    tNedit_SalesOrderUnit.SetInt(stockBak.SalesOrderUnit); // 発注ロット
                    tNedit_SalesOrderCount.SetValue(stockBak.SalesOrderCount);   // 発注残
                    tNedit_SupplierCd.SetInt(stockBak.StockSupplierCode); // 発注先（仕入先）コード
                    tEdit_SupplierName.Text = stockBak.SupplierSnm; // 発注先（仕入先）名
                    tNedit_PartsManagementDivide1.SetInt(ToInt(stockBak.PartsManagementDivide1));//部品管理区分１
                    tEdit_PartsManagementDivide1Name.Text = this.GetUserGuideName(ct_UserGdDiv_PartsManagementDivide1, tNedit_PartsManagementDivide1.GetInt()).TrimEnd();//部品管理区分名１
                    tNedit_PartsManagementDivide2.SetInt(ToInt(stockBak.PartsManagementDivide2));//部品管理区分２
                    tEdit_PartsManagementDivide2Name.Text = this.GetUserGuideName(ct_UserGdDiv_PartsManagementDivide2, tNedit_PartsManagementDivide2.GetInt()).TrimEnd(); //部品管理区分名２
                    tDateEdit_stockCreateDate.SetDateTime(stockBak.StockCreateDate);// 登録日
                    tDateEdit_lastSalesDate.SetDateTime(stockBak.LastSalesDate);// 最終売上日
                    tDateEdit_lastStockDate.SetDateTime(stockBak.LastStockDate);// 最終仕入日
                    tNedit_SupplierStock.SetValue(stockBak.SupplierStock); // 仕入在庫数
                    tNedit_ArrivalCnt.SetValue(stockBak.ArrivalCnt); // 入荷数（未計上）
                    tNedit_ShipmentCnt.SetValue(stockBak.ShipmentCnt); // 出荷数（未計上）
                    tNedit_AcpOdrCount.SetValue(stockBak.AcpOdrCount); // 受注数
                    tNedit_MovingSupliStock.SetValue(stockBak.MovingSupliStock); // 移動中仕入在庫数
                    tNedit_ShipmentPosCnt.SetValue(stockBak.ShipmentPosCnt); // 出荷可能数(現在庫数)
                    tNedit_StockUnitPriceRate.SetValue(stockBak.SupplierLot); // 棚卸評価率
                    tNedit_StockUnitPriceFl.SetValue(stockBak.StockUnitPriceFl); // 棚卸評価単価
                    tEdit_StockNote1.DataText = stockBak.StockNote1;         // 在庫備考１
                    tEdit_StockNote2.DataText = stockBak.StockNote2;         // 在庫備考２
                }
                // --- ADD caohh 2011/08/02 ------------------------------------------------------<<<<<
                
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/20 ADD
                // 入力可・不可制御
                SettingControlsEnabled( (data.LogicalDeleteCode == 0) );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/20 ADD
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/12/01 ADD
                SettingControlsEnabledForStock( (_editStock.LogicalDeleteCode == 0) );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/12/01 ADD
            }
			catch (Exception ex)
			{
                MessageBox.Show(ex.Message);
            }
			finally
			{
                setUpFlag = true; // ADD caohh 2011/08/02 
                clearScreenFlag = false; // ADD caohh 2011/08/02 
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                // 描画を再開＜＜
                this.ResumeLayout();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
			}
        }
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        /// <summary>
        /// 在庫　→　画面
        /// </summary>
        /// <param name="data"></param>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>             改良対応</br>
        /// <br>             在庫関連日付項目の追加</br>
        /// <br>Update Note: 2011/08/29 wangf 連番1016の対応</br>
        private void SetScreenFromStock( Stock data )
        {
            try
            {
                // 描画を止める＞＞
                this.SuspendLayout();

                //----------------------------------------------
                // 項目のセット
                //----------------------------------------------
                // ADD 2008/12/15 不具合対応[8041] ---------->>>>>
                if (data.LogicalDeleteCode == 0 ||
                    DeleteIndication_CheckEditor.Checked == true)
                {
                // ADD 2008/12/15 不具合対応[8041] ----------<<<<<
                    // 倉庫コード
                    tEdit_WarehouseCode.Text = data.WarehouseCode.TrimEnd();
                    // 倉庫名称
                    tEdit_WarehouseName.Text = data.WarehouseName.TrimEnd();

                    // 管理拠点コード
                    tEdit_SectionCode.Text = data.SectionCode.TrimEnd();
                    // 管理拠点名称
                    tEdit_SectionName.Text = this.GetSectionName(data.SectionCode.TrimEnd());

                    // 棚番
                    tEdit_WarehouseShelfNo.Text = data.WarehouseShelfNo.TrimEnd();
                    // 重複棚番１
                    tEdit_DuplicationShelfNo1.Text = data.DuplicationShelfNo1.TrimEnd();
                    // 重複棚番２
                    tEdit_DuplicationShelfNo2.Text = data.DuplicationShelfNo2.TrimEnd();

                    // 最低在庫数
                    tNedit_MinimumStockCnt.SetValue(data.MinimumStockCnt);
                    // 最高在庫数
                    tNedit_MaximumStockCnt.SetValue(data.MaximumStockCnt);

                    // 発注ロット
                    tNedit_SalesOrderUnit.SetValue(data.SalesOrderUnit);
                    // 発注先コード
                    tNedit_SupplierCd.SetInt(data.StockSupplierCode);
                    // 発注先名称
                    tEdit_SupplierName.Text = this.GetSupplierName(data.StockSupplierCode).TrimEnd();
                    // --- ADD 2009/01/26 障害ID:10414対応------------------------------------------------------>>>>>
                    // 発注残
                    tNedit_SalesOrderCount.SetValue(data.SalesOrderCount);
                    // --- ADD 2009/01/26 障害ID:10414対応------------------------------------------------------<<<<<

                    // --- ADD 2009/03/05 障害ID:12131対応------------------------------------------------------>>>>>


                    // --- ADD 2010/06/08 ---------->>>>>
                    // 登録日
                    tDateEdit_stockCreateDate.SetDateTime(data.StockCreateDate);
                    // 最終売上日
                    tDateEdit_lastSalesDate.SetDateTime(data.LastSalesDate);
                    // 最終仕入日
                    tDateEdit_lastStockDate.SetDateTime(data.LastStockDate);
                    // --- ADD 2010/06/08 ----------<<<<< 

                    // 棚卸評価率
                    tNedit_StockUnitPriceRate.Clear();
                    // 棚卸評価単価
                    if (data.StockUnitPriceFl == 0)
                    {
                        tNedit_StockUnitPriceFl.Clear();
                    }
                    else
                    {
                        tNedit_StockUnitPriceFl.SetValue(data.StockUnitPriceFl);
                    }
                    // 在庫備考１
                    tEdit_StockNote1.DataText = data.StockNote1.Trim();
                    // 在庫備考２
                    tEdit_StockNote2.DataText = data.StockNote2.Trim();
                    // --- ADD 2009/03/05 障害ID:12131対応------------------------------------------------------<<<<<

                    // 管理区分１コード
                    tNedit_PartsManagementDivide1.SetInt(ToInt(data.PartsManagementDivide1));
                    // 管理区分１名称
                    tEdit_PartsManagementDivide1Name.Text = this.GetUserGuideName(ct_UserGdDiv_PartsManagementDivide1, tNedit_PartsManagementDivide1.GetInt()).TrimEnd();
                    // 管理区分２コード
                    tNedit_PartsManagementDivide2.SetInt(ToInt(data.PartsManagementDivide2));
                    // 管理区分２名称
                    tEdit_PartsManagementDivide2Name.Text = this.GetUserGuideName(ct_UserGdDiv_PartsManagementDivide2, tNedit_PartsManagementDivide2.GetInt()).TrimEnd();
                    // 在庫区分
                    tComboEditor_StockDiv.Value = data.StockDiv;
                // ADD 2008/12/15 不具合対応[8041] ---------->>>>>
                }
                // ADD 2008/12/15 不具合対応[8041] ----------<<<<<

                //-----------------------------------------------
                // （削除対応）
                //-----------------------------------------------
                if ( data.LogicalDeleteCode == 0 )
                {
                    // -- add wangf 2011/08/29 ---------->>>>>
                    if (this._stockMngTtlStAcs == null)
                    {
                        this._stockMngTtlStAcs = new StockMngTtlStAcs();
                    }
                    StockMngTtlSt stockMngTtlSt = new StockMngTtlSt();
                    this._stockMngTtlStAcs.Read(out stockMngTtlSt, this._enterpriseCode);
                    // -- add wangf 2011/08/29 ----------<<<<<
                    // 仕入在庫数
                    tNedit_SupplierStock.SetValue( data.SupplierStock );
                    // 2008.11.18 add >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    // 入荷数（未計上）
                    tNedit_ArrivalCnt.SetValue(data.ArrivalCnt);
                    // 出荷数（未計上）
                    tNedit_ShipmentCnt.SetValue(data.ShipmentCnt);
                    // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- >>>>>
                    this._preShipmentCnt = data.ShipmentCnt;
                    if (data.ShipmentCnt < 0)
                    {
                        tNedit_ShipmentCnt.Enabled = true;
                        tNedit_ShipmentCnt.Appearance.BackColor = BACKCOLOR_ENABLE;
                    }
                    else
                    {
                        tNedit_ShipmentCnt.Enabled = false;
                        tNedit_ShipmentCnt.Appearance.BackColor = BACKCOLOR_DISABLE;
                    }
                    // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- <<<<<
                    // ----- ADD c ----- <<<<<
                    // 受注数
                    tNedit_AcpOdrCount.SetValue(data.AcpOdrCount);
                    // 移動中仕入在庫数
                    tNedit_MovingSupliStock.SetValue(data.MovingSupliStock);
                    // 2008.11.18 add <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    // 現在庫数(出荷可能数)
                    tNedit_ShipmentPosCnt.SetValue( data.ShipmentPosCnt );
                    /* -- del wangf 2011/08/29 ---------->>>>>
                    // 2008.11.18 UPD >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //_shipmentPosCountOrigin = data.ShipmentPosCnt - data.SupplierStock;
                    _shipmentPosCountOrigin = data.ShipmentPosCnt - data.SupplierStock
                                                                  - data.ArrivalCnt
                                                                  + data.ShipmentCnt
                                                                  + data.AcpOdrCount
                                                                  + data.MovingSupliStock;
                    // 2008.11.18 UPD <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    // -- del wangf 2011/08/29 ----------<<<<<*/
                    // -- add wangf 2011/08/29 ---------->>>>>
                    if (stockMngTtlSt.PreStckCntDspDiv == 0)
                    {
                        // 受注分含む
                        _shipmentPosCountOrigin = data.ShipmentPosCnt - data.SupplierStock
                                                                  - data.ArrivalCnt
                                                                  + data.ShipmentCnt
                                                                  + data.AcpOdrCount
                                                                  + data.MovingSupliStock;
                    }
                    else
                    {
                        // 受注分含まない
                        _shipmentPosCountOrigin = data.ShipmentPosCnt - data.SupplierStock
                                                                  - data.ArrivalCnt
                                                                  + data.ShipmentCnt
                                                                  + data.MovingSupliStock;
                    }
                    // -- add wangf 2011/08/29 ----------<<<<<

                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/10 DEL
                    //// 入力可
                    //SettingControlsEnabledForStock( true );
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/10 DEL
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/10 ADD
                    if ( _editGoodsUnitData.LogicalDeleteCode == 0 )
                    {
                        // 入力可
                        SettingControlsEnabledForStock( true );
                    }
                    else
                    {
                        // 商品：削除済みならば、
                        // (通常ありえないが)在庫がデータ上削除済みでないとしても
                        // 在庫欄を入力不可にする。
                        SettingControlsEnabledForStock( false );
                    }
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/10 ADD
                }
                else
                {
                    //-----------------------------------------------------------------
                    // 論理削除or完全削除ならばゼロで表示
                    // （内部的には元の数量×マイナスで保持する必要がある為）
                    //-----------------------------------------------------------------
                    // 仕入在庫数
                    tNedit_SupplierStock.SetValue(0);
                    // 2008.11.18 add >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    // 入荷数（未計上）
                    tNedit_ArrivalCnt.SetValue(0);
                    // 出荷数（未計上）
                    tNedit_ShipmentCnt.SetValue(0);
                    // 受注数
                    tNedit_AcpOdrCount.SetValue(0);
                    // 移動中仕入在庫数
                    tNedit_MovingSupliStock.SetValue(0);
                    // 2008.11.18 add <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    // 現在庫数(出荷可能数)
                    tNedit_ShipmentPosCnt.SetValue( 0 );
                    _shipmentPosCountOrigin = 0;

                    // 入力不可
                    SettingControlsEnabledForStock( false );
                }

                //-----------------------------------------------
                // 在庫操作系ボタン制御
                //-----------------------------------------------
                SettingStockOperateButtonsEnabled();

                //-----------------------------------------------
                // グリッド表示更新
                //-----------------------------------------------
                ChangeWarehouseRowColorAll();

            }
            catch ( Exception ex )
            {
                MessageBox.Show( ex.Message );
            }
            finally
            {
                // 描画を再開＜＜
                this.ResumeLayout();
            }
        }
        /// <summary>
        /// 数値変換処理
        /// </summary>
        /// <param name="text"></param>
        /// <returns></returns>
        private int ToInt( string text )
        {
            try
            {
                return Int32.Parse( text );
            }
            catch
            {
                return 0;
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

        /// <summary>
		/// 提供・ユーザー画面切替
		/// </summary>
		/// <param name="goodsOfferCd">商品提供区分</param>
        /// <br>Update Note: 2011/08/02 caohh　</br>
        /// <br>           : NSユーザー改良要望一覧連番265の対応</br>
        /// <br>Update Note: 2011/09/13 wangf　</br>
        /// <br>           : RedMine24832、#24833の対応</br>
		private void ChangeEditMode(GoodsUnitData data)
		{
            // 2010/07/14 在庫仕入入力から呼び出された場合は切替を行わない Add >>>
            if (_stockSlipFlg)
            {
                enableButton();
                return;
            }
            // 2010/07/14 Add <<<
            // 削除のアイコン設定
            Infragistics.Win.UltraWinToolbars.ButtonTool delButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_DELETEBUTTON_KEY];
			if (delButton != null) delButton.SharedProps.Enabled = false;

            // --- ADD 2008/09/02 -------------------------------->>>>>
            // 削除アイコンの表示設定
            if (delButton != null) delButton.SharedProps.Visible = false;

            // 完全削除、復活アイコンの表示設定
            Infragistics.Win.UltraWinToolbars.ButtonTool compDelButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_COMPLETEDELETEBUTTON_KEY];
            if (compDelButton != null) compDelButton.SharedProps.Visible = false;
            Infragistics.Win.UltraWinToolbars.ButtonTool reviveButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_REVIVEBUTTON_KEY];
            if (reviveButton != null) reviveButton.SharedProps.Visible = false;


            // 保存ボタンの可否設定
            Infragistics.Win.UltraWinToolbars.ButtonTool saveButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_SAVEBUTTON_KEY];
            if (saveButton != null) saveButton.SharedProps.Enabled = false;

            // --- ADD 2009/03/30 残案件No.14対応------------------------------------------------------>>>>>
            // 最新情報ボタンの可否設定
            Infragistics.Win.UltraWinToolbars.ButtonTool renewalButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_RENEWALBUTTON_KEY];
            if (renewalButton != null) renewalButton.SharedProps.Enabled = false;
            // --- ADD 2009/03/30 残案件No.14対応------------------------------------------------------<<<<<

            // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
            // 設定ボタンの可否設定
            Infragistics.Win.UltraWinToolbars.ButtonTool setUpButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_SETUPBUTTON_KEY];
            if (setUpButton != null) setUpButton.SharedProps.Enabled = false;
            // --- ADD caohh 2011/08/02 ------------------------------------------------------<<<<<

            // --- ADD 2008/09/02 --------------------------------<<<<< 

            // コントロールEnabled設定(親コントロール値を反映させる)
            this.ChangeControlEnabled(true, this.Goods_Pnl);

            //-----------------------------------------------------------------------------
            // 新規・更新データによる表示制御
            //-----------------------------------------------------------------------------
            //if (data.CreateDateTime != DateTime.MinValue) // DEL caohh 2011/08/02
            if (data.CreateDateTime != DateTime.MinValue && !this.tEdit_GoodsNo.Text.TrimEnd().Equals(string.Empty)) // ADD caohh 2011/08/02
            {
                // メーカーコード変更不可
                this.tNedit_GoodsMakerCd.Enabled = false;
                this.GoodsMakerGuide_uButton.Enabled = false;

                // 品番変更不可
                this.tEdit_GoodsNo.Enabled = false;
                // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
                //if (this._saveInfoDiv == 1 && this.uLabel_InputModeTitle.Text.Equals(NEW_INPUT_TITLE)) // DEL wangf 2011/09/13
                if (this._saveInfoDiv == 1 && this.uLabel_InputModeTitle.Text.Equals(NEW_INPUT_TITLE) && data.LogicalDeleteCode == 0) // ADD wangf 2011/09/13
                {
                    // メーカーコード変更不可
                    this.tNedit_GoodsMakerCd.Enabled = true;
                    this.GoodsMakerGuide_uButton.Enabled = true;
                    // 品番変更不可
                    this.tEdit_GoodsNo.Enabled = true;
                }
                // --- ADD caohh 2011/08/02 ------------------------------------------------------<<<<<

                // --- ADD 2008/09/02 -------------------------------->>>>>

                if (data.LogicalDeleteCode == 0)
                {
                    // 削除可能
                    if (delButton != null) delButton.SharedProps.Enabled = true;
                    if (delButton != null) delButton.SharedProps.Visible = true;
                    if (saveButton != null) saveButton.SharedProps.Enabled = true;

                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                    this.SettingControlsEnabled( true );
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

                    // --- ADD 2009/03/30 残案件No.14対応------------------------------------------------------>>>>>
                    if (renewalButton != null) renewalButton.SharedProps.Enabled = true;
                    // --- ADD 2009/03/30 残案件No.14対応------------------------------------------------------<<<<<

                    // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
                    if (setUpButton != null) setUpButton.SharedProps.Enabled = true;
                    // --- ADD caohh 2011/08/02 ------------------------------------------------------<<<<<
                }
                else if (data.LogicalDeleteCode == 1)
                {
                    if (compDelButton != null) compDelButton.SharedProps.Visible = true;
                    if (reviveButton != null) reviveButton.SharedProps.Visible = true;

                    // 論理削除の場合は入力項目を全面不可にする
                    SettingControlsEnabled( false );
                }
                else
                {
                    // 論理削除の場合は入力項目を全面不可にする
                    SettingControlsEnabled( false );
                }
                // --- ADD 2008/09/02 --------------------------------<<<<<
            }
            else
            {
                // メーカーコード変更可能
                this.tNedit_GoodsMakerCd.Enabled = true;
                this.GoodsMakerGuide_uButton.Enabled = true;

                // 品番変更可能
                this.tEdit_GoodsNo.Enabled = true;

                // --- ADD 2008/09/02 -------------------------------->>>>>
                if (delButton != null) delButton.SharedProps.Visible = true;
                if (saveButton != null) saveButton.SharedProps.Enabled = true;
                // --- ADD 2008/09/02 --------------------------------<<<<<

                // --- ADD 2009/03/30 残案件No.14対応------------------------------------------------------>>>>>
                if (renewalButton != null) renewalButton.SharedProps.Enabled = true;
                // --- ADD 2009/03/30 残案件No.14対応------------------------------------------------------<<<<<

                // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
                if (setUpButton != null) setUpButton.SharedProps.Enabled = true;
                // --- ADD caohh 2011/08/02 ------------------------------------------------------<<<<<
            }

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 ADD
            GoodsUOfferDate_tDateEdit.Enabled = false;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 ADD
		}
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        /// <summary>
        /// 入力コントロールの入力可・不可設定処理（商品）
        /// </summary>
        /// <param name="enabled"></param>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>             改良対応</br>
        /// <br>             品名入力項目の変更</br>
        /// <br>Update Note: 2012/12/01 zhangy3　</br>
        /// <br>           : 2013/01/16配信分 Redmine#33231 商品在庫マスタ</br>
        /// <br>Update Note: 2014.02.10 高陽</br>
        /// <br>           : Redmine#41976 規格/荷姿/POS.No/メーカー品番/更新日時Ⅱの追加</br>
        private void SettingControlsEnabled( bool enabled )
        {
            // 2010/07/14 在庫仕入入力から呼び出された場合は切替を行わない Add >>>
            if (_stockSlipFlg)
                return;
            // 2010/07/14 Add <<<
            if ( enabled == false )
            {
                // フォーカスのあるコントロールがenabled=falseになると、
                // 次々フォーカス移動してしまうので回避する。
                ultraTabControl1.Focus();
            }

            this.tEdit_GoodsName.Enabled = enabled;

            // --- DEL 2010/06/08 ---------->>>>> 
            //this.tEdit_GoodsNameKana.Enabled = enabled;
            // --- DEL 2010/06/08 ----------<<<<< 

            this.tEdit_Jan.Enabled = enabled;
            this.tNedit_BLGoodsCode.Enabled = enabled;
            this.BLGoodsGuide_uButton.Enabled = enabled;
            this.uButton_EnterpriseGanreGuide.Enabled = enabled;
            this.GoodsRateRank_tEdit.Enabled = enabled;
            this.GoodsKindCode_tComboEditor.Enabled = enabled;
            //this.EnterpriseGanreCode_tComboEditor.Enabled = enabled;
            this.tNedit_EnterpriseGanreCode.Enabled = enabled;
            this.TaxationCode_tComboEditor.Enabled = enabled;
            //this.DisplayOrder_tNedit.Enabled = enabled;
            //this.GoodsUOfferDate_tDateEdit.Enabled = enabled;
            this.GoodsNote1_tEdit.Enabled = enabled;
            this.GoodsNote2_tEdit.Enabled = enabled;
            this.GoodsSpecialNote_tEdit.Enabled = enabled;

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 ADD
            SettingControlsEnabledOfChildren( enabled );
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 ADD
            // --- Add 2012/12/01 zhangy3 for Redmine#33231 ----->>>>>
            this.tNedit_PayeeCode.Enabled = enabled;
            this.PayeeCodeGuid_uButton.Enabled = enabled;
            // --- Add 2012/12/01 zhangy3 for Redmine#33231 -----<<<<<
            // -------- ADD START 2014/02/10 高陽 -------->>>>>
            this.Standard_tEdit.Enabled = enabled;
            this.Packing_tEdit.Enabled = enabled;
            this.PosNo_tEdit.Enabled = enabled;
            this.MakerGoodsNo_tEdit.Enabled = enabled;
            // -------- ADD END 2014/02/10 高陽 --------<<<<<
        }
        /// <summary>
        /// 入力コントロールの入力可・不可設定処理（各種子フォーム（価格・掛率・在庫））
        /// </summary>
        /// <param name="enabled"></param>
        private void SettingControlsEnabledOfChildren( bool enabled )
        {
            // 価格
            this._goodsPriceInput.SettingEnabled( enabled );

            // 掛率
            this._unitSalesPriceInput.SettingEnabled( enabled );

            // 在庫
            SettingControlsEnabledForStock( enabled );
        }
        /// <summary>
        /// 入力コントロールの入力可・不可設定処理（在庫）
        /// </summary>
        /// <param name="enabled"></param>
        /// <remarks>
        /// <br>Update Note: K2013/05/13 王君</br>
        /// <br>管理番号   : 10901273-00 2013/06/18配信分</br>
        /// <br>             Redmine#35663 商品在庫マスタ・山形部品様個別組み込み</br>
        /// </remarks>
        private void SettingControlsEnabledForStock( bool enabled )
        {
            if (enabled == false)
            {
                // フォーカスのあるコントロールがenabled=falseになると、
                // 次々フォーカス移動してしまうので回避する。
                // 2008.11.18 add >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //tEdit_WarehouseCode.Focus();
                tEdit_GoodsName.Focus();
                // 2008.11.18 add <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09

                // --- ADD 2009/01/19 障害ID:10122対応------------------------------------------------------>>>>>
                this.uLabel_StockMode.Visible = false;
                this.ultraLabel37.Visible = true;
                this.ultraLabel38.Visible = true;
            }
            else
            {
                this.uLabel_StockMode.Visible = true;
                this.ultraLabel37.Visible = false;
                this.ultraLabel38.Visible = false;
            }
            // --- ADD 2009/01/19 障害ID:10122対応------------------------------------------------------<<<<<

            // --- DEL 2009/01/19 障害ID:10122対応------------------------------------------------------>>>>>
            //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/11/04 ADD
            //tEdit_WarehouseCode.Enabled = enabled;
            //uButton_WarehouseGuide.Enabled = enabled;
            //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/11/04 ADD
            // --- DEL 2009/01/19 障害ID:10122対応------------------------------------------------------<<<<<
            tEdit_SectionCode.Enabled = enabled;
            tEdit_WarehouseShelfNo.Enabled = enabled;
            tEdit_DuplicationShelfNo1.Enabled = enabled;
            tEdit_DuplicationShelfNo2.Enabled = enabled;
            //tNedit_SupplierStock.Enabled = enabled; // DEL K2013/05/13 王君 Redmine#35663
            tNedit_MinimumStockCnt.Enabled = enabled;
            tNedit_MaximumStockCnt.Enabled = enabled;
            tNedit_SalesOrderUnit.Enabled = enabled;
            tNedit_SupplierCd.Enabled = enabled;
            tNedit_PartsManagementDivide1.Enabled = enabled;
            tNedit_PartsManagementDivide2.Enabled = enabled;
            tComboEditor_StockDiv.Enabled = enabled;
            //----- ADD K2013/05/13 王君 Redmine#35663 ----->>>>>
            if (this._opt_YamagataCtrl == (int)Option.ON)
            {
                // ｵﾌﾟｼｮﾝｺｰﾄﾞ:OPT-CPM0010の場合、セキュリティ設定を参照し、仕入在庫数を編集可能・不可とする。
                if (this._stcChangeEnable == true)
                {
                    this.tNedit_SupplierStock.Enabled = enabled;
                }
                else
                {
                    this.tNedit_SupplierStock.Enabled = false;
                    this.tNedit_SupplierStock.Appearance.BackColor = BACKCOLOR_DISABLE;
                    this.tNedit_SupplierStock.Appearance.BackColorDisabled = BACKCOLOR_DISABLE;
                }
            }
            else
            {
                tNedit_SupplierStock.Enabled = enabled;
            }
            //----- ADD ADD K2013/05/13 王君 Redmine#35663 -----<<<<<
            // --- CHG 2009/02/16 障害ID:11376対応------------------------------------------------------>>>>>
            //// 2008.11.18 add >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //tNedit_ArrivalCnt.Enabled = enabled;
            //tNedit_ShipmentCnt.Enabled = enabled;
            //tNedit_AcpOdrCount.Enabled = enabled;
            //tNedit_MovingSupliStock.Enabled = enabled;
            //// 2008.11.18 add <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            tNedit_ArrivalCnt.Enabled = false;
            //tNedit_ShipmentCnt.Enabled = false;   // DEL huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正
            tNedit_AcpOdrCount.Enabled = false;
            tNedit_MovingSupliStock.Enabled = false;
            // --- CHG 2009/02/16 障害ID:11376対応------------------------------------------------------<<<<<

            // --- ADD 2009/01/26 障害ID:10414対応------------------------------------------------------>>>>>
            tNedit_SalesOrderCount.Enabled = enabled;
            // --- ADD 2009/01/26 障害ID:10414対応------------------------------------------------------<<<<<

            // --- ADD 2009/03/05 障害ID:12131対応------------------------------------------------------>>>>>
            tNedit_StockUnitPriceRate.Enabled = enabled;
            tNedit_StockUnitPriceFl.Enabled = enabled;
            tEdit_StockNote1.Enabled = enabled;
            tEdit_StockNote2.Enabled = enabled;
            // --- ADD 2009/03/05 障害ID:12131対応------------------------------------------------------<<<<<

            uButton_SectionGuide.Enabled = enabled;
            uButton_SupplierGuide.Enabled = enabled;
            uButton_PartsManagementDivide1.Enabled = enabled;
            uButton_PartsManagementDivide2.Enabled = enabled;


            // 商品が論理削除のときはガイド不可にする
            if ( _editGoodsUnitData.LogicalDeleteCode == 1 )
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/11/04 DEL
                //uButton_WarehouseGuide.Enabled = false;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/11/04 DEL
                DeleteIndication_CheckEditor.Checked = true;
            }
            else
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/11/04 DEL
                //uButton_WarehouseGuide.Enabled = true;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/11/04 DEL
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
		
		/// <summary>
		/// コンポーネント参照コントロール
		/// </summary>
		/// <param name="enabled">参照モード</param>
		/// <param name="iParent">親コンポーネント</param>
		/// <remarks>
		/// <br>Note       : 親コントロールに配置されている各コントロールの参照モードを設定します。</br>
		/// <br>Programmer : 18012 Y.Sasaki</br>
		/// <br>Date       : 2006.10.26</br>
		/// </remarks>
		private bool ChangeControlEnabled(bool enabled, System.Windows.Forms.Control iParent)
		{
			for (int widx = 0; widx < iParent.Controls.Count; widx++)
			{
				// TEdit
				if (iParent.Controls[widx] is Broadleaf.Library.Windows.Forms.TEdit)
				{
					if (((Broadleaf.Library.Windows.Forms.TEdit)iParent.Controls[widx]).Tag != null)
					{
						if (((Broadleaf.Library.Windows.Forms.TEdit)iParent.Controls[widx]).Tag.ToString().Equals("False"))
						{
							continue;
						}
					}
					((Broadleaf.Library.Windows.Forms.TEdit)iParent.Controls[widx]).Enabled = enabled;
				}
				// TDateEdit
				if (iParent.Controls[widx] is Broadleaf.Library.Windows.Forms.TDateEdit)
				{
					if (((Broadleaf.Library.Windows.Forms.TDateEdit)iParent.Controls[widx]).Tag != null)
					{
						if (((Broadleaf.Library.Windows.Forms.TDateEdit)iParent.Controls[widx]).Tag.ToString().Equals("False"))
						{
							continue;
						}
					}
					((Broadleaf.Library.Windows.Forms.TDateEdit)iParent.Controls[widx]).Enabled = enabled;
				}
				// TComboEditor
				if (iParent.Controls[widx] is Broadleaf.Library.Windows.Forms.TComboEditor)
				{
					if (((Broadleaf.Library.Windows.Forms.TComboEditor)iParent.Controls[widx]).Tag != null)
					{
						if (((Broadleaf.Library.Windows.Forms.TComboEditor)iParent.Controls[widx]).Tag.ToString().Equals("False"))
						{
							continue;
						}
					}
					((Broadleaf.Library.Windows.Forms.TComboEditor)iParent.Controls[widx]).Enabled = enabled;
				}
				// UltraOptionSet
				if (iParent.Controls[widx] is Infragistics.Win.UltraWinEditors.UltraOptionSet)
				{
					if (((Infragistics.Win.UltraWinEditors.UltraOptionSet)iParent.Controls[widx]).Tag != null)
					{
						if (((Infragistics.Win.UltraWinEditors.UltraOptionSet)iParent.Controls[widx]).Tag.ToString().Equals("False"))
						{
							continue;
						}
					}
					((Infragistics.Win.UltraWinEditors.UltraOptionSet)iParent.Controls[widx]).Enabled = enabled;
				}
				// ListBox
				if (iParent.Controls[widx] is System.Windows.Forms.ListBox)
				{
					if (((System.Windows.Forms.ListBox)iParent.Controls[widx]).Tag != null)
					{
						if (((System.Windows.Forms.ListBox)iParent.Controls[widx]).Tag.ToString().Equals("False"))
						{
							continue;
						}
					}
					((System.Windows.Forms.ListBox)iParent.Controls[widx]).Enabled = enabled;
				}
				// UltraButton
				if (iParent.Controls[widx] is Infragistics.Win.Misc.UltraButton)
				{
					if (((Infragistics.Win.Misc.UltraButton)iParent.Controls[widx]).Tag != null)
					{
						if (((Infragistics.Win.Misc.UltraButton)iParent.Controls[widx]).Tag.ToString().Equals("False"))
						{
							continue;
						}
					}
					((Infragistics.Win.Misc.UltraButton)iParent.Controls[widx]).Enabled = enabled;
				}

				// Form以外のコンテナ（Tab,Panel等）がある場合はその内部のコントロールも対象とする
				if (!(iParent.Controls[widx] is System.Windows.Forms.Form))
				{
					ChangeControlEnabled(enabled, iParent.Controls[widx]);
				}
			}
			return true;
		}

        /// <summary>
        /// メーカー設定
        /// </summary>
        /// <param name="maker">メーカー</param>
        /// <param name="data">商品連結データ</param>
        /// <remarks>
        /// <br>Note       : メーカー → 商品連結データを行います。</br>
        /// <br>Programmer : 18012 Y.Sasaki</br>
        /// <br>Date       : 2007.1.18</br>
        /// </remarks>
        private void SetGoodsUnitDataFromMaker(MakerUMnt makerUMnt, ref GoodsUnitData data)
        {
            if (makerUMnt != null)
            {
                data.GoodsMakerCd = makerUMnt.GoodsMakerCd;
                data.MakerName = makerUMnt.MakerName;

                this.tNedit_GoodsMakerCd.SetInt(makerUMnt.GoodsMakerCd);
                this.GoodsMakerName_tEdit.DataText = makerUMnt.MakerName;
            }
            else
            {
                this.tNedit_GoodsMakerCd.SetInt(data.GoodsMakerCd);
                this.GoodsMakerName_tEdit.DataText = data.MakerName;
            }
        }

        /// <summary>
        /// BLコード設定
        /// </summary>
        /// <param name="bLGoodsCdWork">BL商品コード</param>
        /// <param name="data">商品連結データ</param>
        /// <remarks>
        /// <br>Note       : BL商品コード → 商品連結データを行います。</br>
        /// <br>Programmer : 18012 Y.Sasaki</br>
        /// <br>Date       : 2007.2.20</br>
        /// </remarks>
        private void SetGoodsUnitDataFromBLGoodsCd(BLGoodsCdUMnt bLGoodsCdUMnt, ref GoodsUnitData data)
        {
            if (bLGoodsCdUMnt != null)
            {
                data.BLGoodsCode = bLGoodsCdUMnt.BLGoodsCode;

                data.BLGoodsFullName = bLGoodsCdUMnt.BLGoodsFullName;

                data.GoodsRateGrpCode = bLGoodsCdUMnt.GoodsRateGrpCode;

                this.tNedit_BLGoodsCode.SetInt(bLGoodsCdUMnt.BLGoodsCode);

                // --- UPD 2010/06/08 ---------->>>>> 
                // this.BLtEdit_GoodsName.DataText = bLGoodsCdUMnt.BLGoodsFullName;
                this.BLtEdit_GoodsName.DataText = bLGoodsCdUMnt.BLGoodsHalfName;
                // --- UPD 2010/06/08 ----------<<<<< 

                GoodsGroupU goodsMGroup;
                this._goodsAcs.GetGoodsMGroup(this._enterpriseCode, bLGoodsCdUMnt.GoodsRateGrpCode, out goodsMGroup);
                if (goodsMGroup != null)
                {
                    this.GoodsRateGrpName_tEdit.DataText = goodsMGroup.GoodsMGroupName;
                    // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                    this.tNedit_RateGrpCode.DataText = goodsMGroup.GoodsMGroup.ToString("d4");
                    // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<
                }
                else
                {
                    this.GoodsRateGrpName_tEdit.DataText = string.Empty;
                    // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                    this.tNedit_RateGrpCode.Clear();
                    // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<
                }
            }
            else
            {
                data.BLGoodsCode = 0;
                data.BLGoodsFullName = string.Empty;
                data.GoodsRateGrpCode = 0;
                this.tNedit_BLGoodsCode.SetInt(data.BLGoodsCode);
                this.BLtEdit_GoodsName.DataText = data.BLGoodsFullName;
                this.GoodsRateGrpName_tEdit.DataText = string.Empty;
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                this.tNedit_RateGrpCode.Clear();
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<
            }
        }

        /// <summary>
        /// 大分類情報設定
        /// </summary>
        /// <param name="goodsLGroup">ユーザーガイドデータオブジェクト</param>
        /// <param name="data">商品連結データオブジェクト</param>
        private void SetGoodsUnitDataFromGoodsLGroup(UserGdBdU goodsLGroup, ref GoodsUnitData data)
        {
            if (goodsLGroup != null)
            {
                data.GoodsLGroup = goodsLGroup.GuideCode;
                data.GoodsLGroupName = goodsLGroup.GuideName;

                this.GoodsLGroupName_tEdit.DataText = goodsLGroup.GuideName;
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                this.tNedit_GoodsLGroup.DataText = goodsLGroup.GuideCode.ToString("d4");
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<
            }
            else
            {
                data.GoodsLGroup = 0;
                data.GoodsLGroupName = string.Empty;

                this.GoodsLGroupName_tEdit.DataText = data.GoodsLGroupName;
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                this.tNedit_GoodsLGroup.DataText = data.GoodsLGroup.ToString("d4");
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<
            }
        }

        /// <summary>
        /// 中分類情報設定
        /// </summary>
        /// <param name="goodsMGroup">中分類データオブジェクト</param>
        /// <param name="data">商品連結データオブジェクト</param>
        private void SetGoodsUnitDataFromGoodsMGroup(GoodsGroupU goodsMGroup, ref GoodsUnitData data)
        {
            if (goodsMGroup != null)
            {
                data.GoodsMGroup = goodsMGroup.GoodsMGroup;
                data.GoodsMGroupName = goodsMGroup.GoodsMGroupName;

                this.GoodsMGroupName_tEdit.DataText = goodsMGroup.GoodsMGroupName;
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                this.tNedit_GoodsMGroup.DataText = goodsMGroup.GoodsMGroup.ToString("d4");
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<
            }
            else
            {
                data.GoodsMGroup = 0;
                data.GoodsMGroupName = string.Empty;

                this.GoodsMGroupName_tEdit.DataText = data.GoodsMGroupName;
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                this.tNedit_GoodsMGroup.DataText = data.GoodsMGroup.ToString("d4");
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<
            }
        }

        /// <summary>
        /// BLグループコード情報設定
        /// </summary>
        /// <param name="dGoodsGanre">BLグループデータオブジェクト</param>
        /// <param name="data">商品連結データオブジェクト</param>
        private void SetGoodsUnitDataFromBLGroup(BLGroupU bLGroup, ref GoodsUnitData data)
        {
            if (bLGroup != null)
            {
                data.BLGroupCode = bLGroup.BLGroupCode;
                data.BLGroupName = bLGroup.BLGroupName;

                this.BLGroupName_tEdit.DataText = bLGroup.BLGroupName;
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                this.tNedit_BLGloupCode.DataText = bLGroup.BLGroupCode.ToString("d5");
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<
            }
            else
            {
                data.BLGroupCode = 0;
                data.BLGroupName = string.Empty;

                this.BLGroupName_tEdit.DataText = data.BLGroupName;
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                this.tNedit_BLGloupCode.DataText = data.BLGroupCode.ToString("d5");
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<
            }
        }

		/// <summary>
		/// 画面 → 商品連結データ
		/// </summary>
		/// <param name="data">商品連結データ</param>
		/// <remarks>
		/// <br>Note       : 画面 → 商品連結データを行います。</br>
		/// <br>Programmer : 18012 Y.Sasaki</br>
		/// <br>Date       : 2007.1.16</br>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>               障害改良対応</br>
        /// <br>               品名入力項目の変更</br>
        /// <br>Update Note: 2011/08/02 caohh　</br>
        /// <br>           : NSユーザー改良要望一覧連番265の対応</br>
        /// <br>Update Note: 2011/09/01 周雨　</br>
        /// <br>           :選択した在庫が初期表示されるよう修正の対応
        ///                : 案件一覧 連番984 FOR redmine #24263</br>
        /// <br>Update Note: 2012/12/01 zhangy3　</br>
        /// <br>           : 2013/01/16配信分 Redmine#33231 商品在庫マスタ</br>
        /// <br>Update Note: 2014/02/10 高陽</br>
        /// <br>             Redmine#41976 規格/荷姿/POS.No/メーカー品番の追加</br>
        /// <br>Update Note: 2015/09/10 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
		/// </remarks>
		// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
        //private void SetGoodsUnitDataFromScreen(ref GoodsUnitData data)
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        //private void SetGoodsUnitDataFromScreen(ref GoodsUnitData data, ref List<Rate> rateList)
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
        // --- ADD 2008/12/27 -------------------------------->>>>>
		private void SetGoodsUnitDataFromScreen(ref GoodsUnitData data, ref List<Rate> rateList, bool isCheck)
        // --- ADD 2008/12/27 --------------------------------<<<<<
        {
			// 企業コード
			data.EnterpriseCode = this._enterpriseCode;

            // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>
            // 拠点コード
            data.SectionCode = this._goodsAcs.LoginSectionCode;
            // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ----------<<<<<

            // メーカー
            data.GoodsMakerCd = this.tNedit_GoodsMakerCd.GetInt();
            data.MakerName = this.GoodsMakerName_tEdit.DataText;

			// 品番
			data.GoodsNo = this.tEdit_GoodsNo.DataText;

            // 品番（ハイフンなし）
            data.GoodsNoNoneHyphen = data.GoodsNo.Replace("-", "");

            // 品名
            data.GoodsName = this.tEdit_GoodsName.DataText;

            // --- UPD 2010/06/08 ---------->>>>>
            // 品名カナ
            //data.GoodsNameKana = this.tEdit_GoodsNameKana.DataText;
            data.GoodsNameKana = this.tEdit_GoodsName.DataText;
            // --- UPD 2010/06/08 ----------<<<<<

            // BLコード
            data.BLGoodsCode = this.tNedit_BLGoodsCode.GetInt();
            data.BLGoodsFullName = this.BLtEdit_GoodsName.DataText;

            // JANコード
            data.Jan = this.tEdit_Jan.DataText;

            // BLグループコード名称
            data.BLGroupName = this.BLGroupName_tEdit.DataText;
            // FIXME:BLグループコード　※入力不可のため、値は変化しない。よって、何もしない

            // 商品中分類コード名称
            data.GoodsMGroupName = this.GoodsMGroupName_tEdit.DataText;
            // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの仕入先を表示 ---------->>>>>
            // UNDONE:商品中分類コード　※商品管理情報マスタの仕入先を取得するために設定が必要
            data.GoodsMGroup = this.tNedit_GoodsMGroup.GetInt();
            // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの仕入先を表示 ----------<<<<<

            // 商品大分類コード名称
            data.GoodsLGroupName = this.GoodsLGroupName_tEdit.DataText;
            // FIXME:商品大分類コード　※入力不可のため、値は変化しない。よって、何もしない

            // 商品属性
            if (this.GoodsKindCode_tComboEditor.Value != null)
                data.GoodsKindCode = (Int32)this.GoodsKindCode_tComboEditor.Value;

            //// 表示順位
            //data.DisplayOrder = this.DisplayOrder_tNedit.GetInt();
            data.DisplayOrder = 0; // 表示順＝０固定

            // 商品掛率ランク
            data.GoodsRateRank = this.GoodsRateRank_tEdit.DataText;

            // 課税区分
            if (this.TaxationCode_tComboEditor.Value != null)
                data.TaxationDivCd = (Int32)this.TaxationCode_tComboEditor.Value;

            // 提供日付
            data.OfferDate = this.GoodsUOfferDate_tDateEdit.GetDateTime();
            
            // 商品備考１
            data.GoodsNote1 = this.GoodsNote1_tEdit.DataText;
            
            // 商品備考２
            data.GoodsNote2 = this.GoodsNote2_tEdit.DataText;
            
            // 規格特記事項
            data.GoodsSpecialNote = this.GoodsSpecialNote_tEdit.DataText;

            // 自社分類名称
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 DEL
            //if (this.EnterpriseGanreCode_tComboEditor.Value != null)
            //{
            //    data.EnterpriseGanreCode = (Int32)this.EnterpriseGanreCode_tComboEditor.Value;
            //    UserGdBdU enterpriseGanre;
            //    this._goodsAcs.GetEnterpriseGanre(this._enterpriseCode, (Int32)this.EnterpriseGanreCode_tComboEditor.Value, out enterpriseGanre);
            //    if ( enterpriseGanre != null)
            //    {
            //        data.EnterpriseGanreName = enterpriseGanre.GuideName;
            //    }
            //    else
            //    {
            //        data.EnterpriseGanreName = string.Empty;
            //    }
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 ADD
            data.EnterpriseGanreCode = this.tNedit_EnterpriseGanreCode.GetInt();
            data.EnterpriseGanreName = this.tEdit_EnterpriseGanreName.Text.TrimEnd();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 ADD
            data.SelectedWarehouseCode = this.tEdit_WarehouseCode.Text.Trim();   // ADD 2011/09/01

            data.SupplierCd = this.tNedit_PayeeCode.GetInt();//Add 2012/12/01 zhangy3 for Redmine#33231 
            // -------- ADD START 2014/02/10 高陽 -------->>>>>
            // 商品マスタ表示用オプション
            data.OptKonmanGoodsMstCtl = _opt_KonmanGoodsMstCtl;
            // 規格
            data.Standard = this.Standard_tEdit.DataText;
            // 荷姿
            data.Packing = this.Packing_tEdit.DataText;
            // ＰＯＳNo.
            data.PosNo = this.PosNo_tEdit.DataText;
            // メーカー品番
            data.MakerGoodsNo = this.MakerGoodsNo_tEdit.DataText;
            // -------- ADD END 2014/02/10 高陽 --------<<<<<
            // 価格情報
            //List<GoodsPrice> goodsPriceList = new List<GoodsPrice>();
            List<GoodsPrice> goodsPriceList;
            this._goodsAcs.GetGoodsPriceListFromGoodsPriceDataTable(out goodsPriceList);
            data.GoodsPriceList = goodsPriceList;

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> G.Miyatsu 2008/11/28 ADD
            this.__goodsUnitData.GoodsPriceList = goodsPriceList;

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
            // 単品売価(掛率)情報
            rateList = _unitSalesPriceInput.GetRateList();
            foreach(Rate temp in rateList)
            {
                temp.GoodsNo = data.GoodsNo;
                // --- ADD 2009/01/20 障害ID:10175対応------------------------------------------------------>>>>>
                temp.GoodsMakerCd = data.GoodsMakerCd;
                // --- ADD 2009/01/20 障害ID:10175対応------------------------------------------------------<<<<<
            }

            // 在庫情報
            //List<Stock> stockList = this.GetStockListFromStockWarehouseTable(); // DEL 2008/12/27
            List<Stock> stockList = this.GetStockListFromStockWarehouseTable(isCheck); // ADD 2008/12/27
            data.StockList = stockList;

            // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
            stockBak = new Stock();
            stockBak.WarehouseCode = this.tEdit_WarehouseCode.Text.TrimEnd(); //倉庫コード
            stockBak.WarehouseName = this.tEdit_WarehouseName.Text.TrimEnd(); //倉庫名
            stockBak.SectionCode = tEdit_SectionCode.Text.TrimEnd(); // 管理拠点（拠点）コード
            stockBak.WarehouseShelfNo = tEdit_WarehouseShelfNo.Text.TrimEnd(); // 倉庫棚番
            stockBak.DuplicationShelfNo1 = tEdit_DuplicationShelfNo1.Text.TrimEnd(); // 重複棚番１
            stockBak.DuplicationShelfNo2 = tEdit_DuplicationShelfNo2.Text.TrimEnd(); // 重複棚番２
            if (tComboEditor_StockDiv.Value != null)
            {
                stockBak.StockDiv = (int)tComboEditor_StockDiv.Value; // 在庫区分
            }
            stockBak.MinimumStockCnt = tNedit_MinimumStockCnt.GetValue(); // 最低在庫数
            stockBak.MaximumStockCnt = tNedit_MaximumStockCnt.GetValue(); // 最高在庫数
            stockBak.SalesOrderUnit = tNedit_SalesOrderUnit.GetInt(); // 発注ロット
            stockBak.SalesOrderCount = tNedit_SalesOrderCount.GetValue();   // 発注残
            stockBak.StockSupplierCode = tNedit_SupplierCd.GetInt(); // 発注先（仕入先）コード
            stockBak.SupplierSnm = tEdit_SupplierName.Text.TrimEnd(); // 発注先（仕入先）名
            stockBak.PartsManagementDivide1 = tNedit_PartsManagementDivide1.GetInt().ToString(); // 部品管理区分１
            stockBak.PartsManagementDivide2 = tNedit_PartsManagementDivide2.GetInt().ToString(); // 部品管理区分２
            stockBak.StockCreateDate = tDateEdit_stockCreateDate.GetDateTime();// 登録日
            stockBak.LastSalesDate = tDateEdit_lastSalesDate.GetDateTime();// 最終売上日
            stockBak.LastStockDate = tDateEdit_lastStockDate.GetDateTime();// 最終仕入日
            stockBak.SupplierStock = tNedit_SupplierStock.GetValue(); // 仕入在庫数
            stockBak.ArrivalCnt = tNedit_ArrivalCnt.GetValue(); // 入荷数（未計上）
            stockBak.ShipmentCnt = tNedit_ShipmentCnt.GetValue(); // 出荷数（未計上）
            stockBak.AcpOdrCount = tNedit_AcpOdrCount.GetValue(); // 受注数
            stockBak.MovingSupliStock = tNedit_MovingSupliStock.GetValue(); // 移動中仕入在庫数
            stockBak.ShipmentPosCnt = tNedit_ShipmentPosCnt.GetValue(); // 出荷可能数(現在庫数)
            stockBak.SupplierLot = tNedit_StockUnitPriceRate.GetValue(); // 棚卸評価率
            stockBak.StockUnitPriceFl = tNedit_StockUnitPriceFl.GetValue(); // 棚卸評価単価
            stockBak.StockNote1 = tEdit_StockNote1.DataText.Trim();         // 在庫備考１
            stockBak.StockNote2 = tEdit_StockNote2.DataText.Trim();         // 在庫備考２
            // --- ADD caohh 2011/08/02 ------------------------------------------------------<<<<<

            // 商品論理削除対応
            if ( data.LogicalDeleteCode == 1 )
            {
                # region [商品論理削除対応]
                // 価格
                foreach ( GoodsPrice goodsPrice in data.GoodsPriceList )
                {
                    goodsPrice.LogicalDeleteCode = 1;
                }
                // --- DEL 黄興貴 2015/09/10 Redmine#47026 --------------->>>>>
                // 仕様は掛率を削除しない
                // 削除する
                //// 単品売価(掛率)
                //foreach ( Rate rate in rateList )
                //{
                //    rate.LogicalDeleteCode = 3; // 掛率は論理削除未対応なので即削除する
                //}
                // --- DEL 黄興貴 2015/09/10 Redmine#47026 ---------------<<<<<
                // 在庫
                foreach ( Stock stock in data.StockList )
                {
                    stock.LogicalDeleteCode = 1;
                }
                # endregion
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
		}
		/// <summary>
		/// MEMO:画面初期化
		/// </summary>
        /// <br>Update Note: 2011/08/02 caohh　</br>
        /// <br>           : NSユーザー改良要望一覧連番265の対応</br>
        /// <br>Update Note: 2012/12/01 zhangy3　</br>
        /// <br>           : 2013/01/16配信分 Redmine#33231 商品在庫マスタ</br>
		private void ClearScreen()
		{
			this._editGoodsUnitData = new GoodsUnitData();
			this._editGoodsUnitData.EnterpriseCode = this._enterpriseCode;
            // TBO検索マスタから起動する場合は、初期値が入っている可能性有り
            if (this._initialInsertFlg)
            {
                this._editGoodsUnitData.GoodsMakerCd = this._goodsMakerCode;
                this._editGoodsUnitData.GoodsNo = this._goodsNo;
            }
            List<GoodsPrice> goodsPriceList = new List<GoodsPrice>();
            this._editGoodsUnitData.GoodsPriceList = goodsPriceList;
            this._goodsAcs.GoodsPriceDataTable.Clear();
            this._goodsAcs.ClearGoodsPriceDataTable();
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
            //this.SetScreenFromGoodsUnitData(this._editGoodsUnitData);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
            clearScreenFlag = true;// ADD caohh 2011/08/02
            List<Rate> rateList = new List<Rate>();
            this.SetScreenFromGoodsUnitData( this._editGoodsUnitData, rateList );
            _edittingWarehouseCode = string.Empty;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/03 ADD
            _prevStockList = new List<Stock>();
            __rateList = new List<Rate>();
            __stock = new Stock();

            // ロード処理実行
            _goodsPriceInput.Loading();
            _unitSalesPriceInput.Loading();

            // 入力可にする
            SettingControlsEnabled( true );
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/03 ADD

            // --- ADD 2008/12/18 --------------------------------------------------------------------->>>>>
            this.uLabel_InputModeTitle.Text = NEW_INPUT_TITLE;

            ultraTabControl1.Tabs[0].Selected = true;
            // --- ADD 2008/12/18 ---------------------------------------------------------------------<<<<<
            // --- Add 2012/12/01 zhangy3 for Redmine#33231 ----->>>>>
            this.tEdit_PayeeName.Clear();
            this.tNedit_PayeeCode.Clear();
            this.tEdit_PayeePattern.Clear();
            curFoundGoodsMngPattern = GoodsAcs.GoodsMngSettingPattern.None;
            // --- Add 2012/12/01 zhangy3 for Redmine#33231 -----<<<<<
        }

		/// <summary>
		/// 画面入力チェック
		/// </summary>
		/// <returns>ConstantManagement.MethodResult</returns>
		private int CheckInputScreen()
		{
			string msg;
			Control errCtrl = null;
            // 2008.11.18 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            tEdit_GoodsName.Focus();
            // 2008.11.18 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09

			// 画面入力データのチェック
			int status = this.CheckInputData(ref errCtrl, out msg);
			switch (status)
			{
				case (int)ConstantManagement.MethodResult.ctFNC_NORMAL:
					{
                        /*
						// JANコードの重複チェック
						if (!this.Jan_tEdit.DataText.Trim().Equals(string.Empty))
						{
							GoodsUnitData goodsUnitData;
							status = this._goodsAcs.ReadJan(this._enterpriseCode, this.Jan_tEdit.DataText, out goodsUnitData);
							if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
							{
								if (goodsUnitData.GoodsMakerCd != this.GoodsMakerCd_tNedit.GetInt() || !goodsUnitData.GoodsNo.Equals(this.tEdit_GoodsNo.DataText))
								{

									TMsgDisp.Show(emErrorLevel.ERR_LEVEL_EXCLAMATION,
										this.Name,
										"既にこのJANコードは、" + "\n\r\n\r" +
										string.Format("メーカー　　:　{0}", goodsUnitData.GoodsMakerName) + "\n\r" +
										string.Format("商品番号  　:　{0}", goodsUnitData.GoodsNo) + "\n\r" +
										string.Format("商品名称　　:　{0}", goodsUnitData.GoodsName) + "\n\r\n\r" + "で設定されている為、設定できません。",
										0,
										MessageBoxButtons.OK);

									this.Jan_tEdit.Focus();
									return (int)ConstantManagement.MethodResult.ctFNC_WARNING;
								}
							}
						}
                        */

						break;
					}
				case (int)ConstantManagement.MethodResult.ctFNC_CANCEL:
					{
						return status;
					}
				default:
					{
						TMsgDisp.Show(emErrorLevel.ERR_LEVEL_EXCLAMATION,
							this.Name,
							msg,
							0,
							MessageBoxButtons.OK);

						if (errCtrl != null) errCtrl.Focus();
                        // --- ADD 2010/08/09 ---------->>>>>
                        if (errCtrl == tNedit_GoodsMakerCd || errCtrl == tNedit_BLGoodsCode
                        || errCtrl == tNedit_EnterpriseGanreCode || errCtrl == tEdit_WarehouseCode
                        || errCtrl == tEdit_SectionCode || errCtrl == tNedit_SupplierCd
                        || errCtrl == tNedit_PartsManagementDivide1 || errCtrl == tNedit_PartsManagementDivide2)
                        {
                            ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = true;
                        }
                        else
                        {
                            ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false;
                        }
                        // --- ADD 2010/08/09 ----------<<<<<
						return status;
					}
			}


			return (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
		}
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
		/// <summary>
		/// 画面入力チェック（在庫）
		/// </summary>
		/// <returns>ConstantManagement.MethodResult</returns>
        private int CheckInputScreenForStock()
        {
            string msg;
            Control errCtrl = null;

            // 画面入力データのチェック
            int status = this.CheckInputDataOfStock( ref errCtrl, out msg );
            switch ( status )
            {
                case (int)ConstantManagement.MethodResult.ctFNC_NORMAL:
                case (int)ConstantManagement.MethodResult.ctFNC_CANCEL:
                    {
                        break;
                    }
                default:
                    {
                        TMsgDisp.Show( emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            this.Name,
                            msg,
                            0,
                            MessageBoxButtons.OK );

                        if ( errCtrl != null ) errCtrl.Focus();
                        // --- ADD 2010/08/09 ---------->>>>>
                        if (errCtrl == tNedit_GoodsMakerCd || errCtrl == tNedit_BLGoodsCode
                        || errCtrl == tNedit_EnterpriseGanreCode || errCtrl == tEdit_WarehouseCode
                        || errCtrl == tEdit_SectionCode || errCtrl == tNedit_SupplierCd
                        || errCtrl == tNedit_PartsManagementDivide1 || errCtrl == tNedit_PartsManagementDivide2)
                        {
                            ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = true;
                        }
                        else
                        {
                            ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false;
                        }
                        // --- ADD 2010/08/09 ----------<<<<<
                        break;
                    }
            }
            return status;
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

		/// <summary>
		/// データ入力チェック
		/// </summary>
		/// <param name="errCtrl">エラー対象コントロール</param>
		/// <param name="msg">エラーメッセージ</param>
		/// <returns>ConstantManagement.MethodResult</returns>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>             改良対応</br>
        /// <br>             品名入力項目の変更</br>
        /// <br>Update Note: 2013/06/14 王君　</br>
        /// <br>           : 2013/06/18配信分 Redmine#35434</br>
        /// <br>Update Note: 2015/09/10 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
		private int CheckInputData(ref Control errCtrl, out string msg)
		{
			msg = "";
			bool changedGoods = false;

			int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;

            //-----------------------------------------------------------------------------
            // BLコード
            //-----------------------------------------------------------------------------
            if (this._editGoodsUnitData.BLGoodsCode != this.tNedit_BLGoodsCode.GetInt())
			{
				if (this.tNedit_BLGoodsCode.GetInt() != 0)
				{
                    BLGoodsCdUMnt bLGoodsCdUMnt;

					// BL商品コード情報取得処理
					this._goodsAcs.GetBLGoodsCd(this.tNedit_BLGoodsCode.GetInt(), out bLGoodsCdUMnt);
					this.SetGoodsUnitDataFromBLGoodsCd(bLGoodsCdUMnt, ref this._editGoodsUnitData);
				}
				else
				{
					this.SetGoodsUnitDataFromBLGoodsCd(null, ref this._editGoodsUnitData);
				}
			}

            //-----------------------------------------------------------------------------
            // 品番
            //-----------------------------------------------------------------------------
            if (this._editGoodsUnitData.GoodsNo.CompareTo(this.tEdit_GoodsNo.DataText) != 0)
			{
				if (!this.tEdit_GoodsNo.DataText.Equals(string.Empty))
				{
					// メーカーコードは設定されているか？
					if (this.tNedit_GoodsMakerCd.GetInt() != 0)
						changedGoods = true;
				}
			}

            //-----------------------------------------------------------------------------
            // メーカーコード検索
            //-----------------------------------------------------------------------------
            if (this._editGoodsUnitData.GoodsMakerCd != this.tNedit_GoodsMakerCd.GetInt())
			{
				if (this.tNedit_GoodsMakerCd.GetInt() != 0)
				{
                    MakerUMnt makerUMnt;

					// メーカー情報取得処理
					status = this._goodsAcs.GetMaker(this._enterpriseCode, this.tNedit_GoodsMakerCd.GetInt(), out makerUMnt);
					this.SetGoodsUnitDataFromMaker(makerUMnt, ref this._editGoodsUnitData);

					// 品番は入力されているか　→　商品変更ON
					if (!this.tEdit_GoodsNo.DataText.Equals(string.Empty))
						changedGoods = true;
				}
				else
				{
					this.SetGoodsUnitDataFromMaker(null, ref this._editGoodsUnitData);
				}
			}

            //-----------------------------------------------------------------------------
            // 商品検索 
            //-----------------------------------------------------------------------------
            //if (changedGoods) // DEL wangf 2011/09/09
            //if (changedGoods || (this._saveInfoDiv == 1 && this.uLabel_InputModeTitle.Text.Equals(NEW_INPUT_TITLE))) // ADD wangf 2011/09/09 // DEL wangf 2011/09/13
            // -- add wangf 2011/09/13 ---------->>>>>
            if (changedGoods 
                || (!this.tEdit_GoodsNo.DataText.Equals(string.Empty) 
                //&& this.tNedit_GoodsMakerCd.GetInt() != 0 && this._saveInfoDiv == 1  // DEL 王君 2013/06/14 Redmine#35434 
                && this.tNedit_GoodsMakerCd.GetInt() != 0 // ADD 王君 2013/06/14 Redmine#35434 
                && !this.tEdit_GoodsName.DataText.Equals(string.Empty)
                && this._goodsAcs.CheckInputPriceStartDate()
                && this.uLabel_InputModeTitle.Text.Equals(NEW_INPUT_TITLE)))
            // -- add wangf 2011/09/13 ----------<<<<<
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                //GoodsUnitData dataBuff;
                //status = this._goodsAcs.ReadGoods(this._enterpriseCode, this.tNedit_GoodsMakerCd.GetInt(), this.tEdit_GoodsNo.DataText, ConstantManagement.LogicalMode.GetDataAll, out dataBuff);
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                GoodsUnitData dataBuff;
                List<Rate> rateList;
                status = this._goodsAcs.ReadGoodsWithRate( this._enterpriseCode, this.tNedit_GoodsMakerCd.GetInt(), this.tEdit_GoodsNo.DataText, ConstantManagement.LogicalMode.GetDataAll, out dataBuff, out rateList );

                // ADD 2009/11/20 3次分対応 得意先掛率グループ改良 ---------->>>>>
                // TODO:掛率を再検索
                if (dataBuff != null)
                {
                    string errMsg = string.Empty;
                    rateList = RateHelper.SearchAll(dataBuff, out errMsg);
                }
                // ADD 2009/11/20 3次分対応 得意先掛率グループ改良 ----------<<<<<

                // 在庫リストクローン取得
                this._prevStockList = GetStockListClone( dataBuff.StockList );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
                switch ( status )
				{
					case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
						{
                            if ( dataBuff.LogicalDeleteCode == 0 )
							{
								DialogResult dialogResult = TMsgDisp.Show(
									this,
									emErrorLevel.ERR_LEVEL_QUESTION,
									this.Name,
									"入力されたコードの商品情報が既に登録されています。" + "\r\n" + "\r\n" +
									"【メーカー名：" + dataBuff.MakerName + " " + "品名：" + dataBuff.GoodsName + "】" + "\r\n" + "\r\n" +
									"編集を行いますか？",
									0,
									MessageBoxButtons.YesNo,
									MessageBoxDefaultButton.Button1);

								switch (dialogResult)
								{
									case (DialogResult.Yes):
										{
											// 編集
											this._editGoodsUnitData = dataBuff.Clone();
											this.__goodsUnitData = this._editGoodsUnitData.Clone();
                                            this._goodsPriceInput.GoodsUnitData = this._editGoodsUnitData.Clone();
                                            // -- add wangf 2011/09/09 ---------->>>>>
                                            if (this._editGoodsUnitData.LogicalDeleteCode == 0)
                                            {
                                                if (this.__goodsUnitData.OfferKubun == 0)
                                                {
                                                    this.uLabel_InputModeTitle.Text = UPDATE_INPUT_TITLE;
                                                }
                                                else
                                                {
                                                    this.uLabel_InputModeTitle.Text = NEW_INPUT_TITLE;
                                                }
                                            }
                                            else
                                            {
                                                this.uLabel_InputModeTitle.Text = DELETE_INPUT_TITLE;
                                            }
                                            // -- add wangf 2011/09/09 ----------<<<<<

											// 画面再表示
                                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                                            //this.SetScreenFromGoodsUnitData(this._editGoodsUnitData);
                                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                                            this.SetScreenFromGoodsUnitData( this._editGoodsUnitData, rateList );
                                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

											return (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
										}
									default:
										{
											return (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
										}
								}
							}
							else
							{
								DialogResult dr = TMsgDisp.Show(this,
									emErrorLevel.ERR_LEVEL_INFO,
									this.Name,
									"入力されたコードの商品情報は既に削除されています。" + "\r\n" + "\r\n" + "復活しますか？",
									0,
									MessageBoxButtons.YesNo,
									MessageBoxDefaultButton.Button1);

								switch (dr)
								{
									case (DialogResult.Yes):
										{
											this._editGoodsUnitData = dataBuff.Clone();
										
                                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 DEL
                                            //status = this._goodsAcs.Revival(ref this._editGoodsUnitData, out msg);
                                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 DEL
                                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 ADD
                                            status = this._goodsAcs.Revival(ref this._editGoodsUnitData, ref rateList, out msg);
                                            rateList = RateHelper.SearchAll(this._editGoodsUnitData, out msg);// ADD 黄興貴 2015/09/10 Redmine#47026
                                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 ADD

											switch (status)
											{
												case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
													{
														this.__goodsUnitData = this._editGoodsUnitData.Clone();
                                                        this.uLabel_InputModeTitle.Text = UPDATE_INPUT_TITLE; //ADD 2013/06/14 王君 Redmine#35434

														// 画面再表示
                                                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                                                        //this.SetScreenFromGoodsUnitData(this._editGoodsUnitData);
                                                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                                                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                                                        this.SetScreenFromGoodsUnitData( this._editGoodsUnitData, rateList );
                                                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
                                                        return (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
													}
												default:
													{

														TMsgDisp.Show(this,
															emErrorLevel.ERR_LEVEL_STOPDISP,
															this.Name,
															msg,
															status,
															MessageBoxButtons.OK,
															MessageBoxDefaultButton.Button1);

														return (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
													}
                                            }
										}
									default:
										{
											return (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
										}
								}
							}
						}
					case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
					case (int)ConstantManagement.DB_Status.ctDB_EOF:
						{
							break;
						}
					default:
						TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP,
							CT_PGID,
							"商品情報の取得に失敗しました。",
							status,
							MessageBoxButtons.OK,
							MessageBoxDefaultButton.Button1);
						return (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
				}
			}

            // --- CHG 2009/02/05 障害ID:11019対応------------------------------------------------------>>>>>
            //// メーカーコード
            //if (this.tNedit_GoodsMakerCd.GetInt() == 0)
            //{
            //    msg = "メーカーコードを入力して下さい。";
            //    errCtrl = this.tNedit_GoodsMakerCd;
            //    return status;
            //}

            //// 品番
            //if (this.tEdit_GoodsNo.DataText.Equals(string.Empty))
            //{
            //    msg = "品番を入力して下さい。";
            //    errCtrl = this.tEdit_GoodsNo;
            //    return status;
            //}
            
            // 品番
            if (this.tEdit_GoodsNo.DataText.Equals(string.Empty))
            {
                msg = "品番を入力して下さい。";
                errCtrl = this.tEdit_GoodsNo;
                return status;
            }

            // メーカーコード
            if (this.tNedit_GoodsMakerCd.GetInt() == 0)
            {
                msg = "メーカーコードを入力して下さい。";
                errCtrl = this.tNedit_GoodsMakerCd;
                return status;
            }
            // --- CHG 2009/02/05 障害ID:11019対応------------------------------------------------------<<<<<

			// 品名
			if (this.tEdit_GoodsName.DataText.Equals(string.Empty))
			{
				msg = "品名を入力して下さい。";
				errCtrl = this.tEdit_GoodsName;
				return status;
			}
            // --- DEL 2010/06/08 ---------->>>>>
            //// 品名ｶﾅ
            //if ( !uiSetControl1.CheckMatchingSet( tEdit_GoodsNameKana ) )
            //{
            //    msg = "品名ｶﾅが不正です。";
            //    errCtrl = this.tEdit_GoodsNameKana;
            //    return status;
            //}
            // --- DEL 2010/06/08 ----------<<<<<<

            // 価格情報
            if (!this._goodsAcs.CheckInputPriceStartDate())
            {
                msg = "価格情報を入力して下さい。";
                errCtrl = this._goodsPriceInput;
                return status;
            }

            // --- ADD 2009/02/03 障害ID:10848対応------------------------------------------------------>>>>>
            // 価格開始日チェック
            for (int rowIndex = 0; rowIndex < this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows.Count; rowIndex++)
            {
                int yy = 0;
                int mm = 0;
                int dd = 0;

                UltraGridRow row = this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[rowIndex];

                if (row.Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateYearColumn.ColumnName].Value != DBNull.Value)
                {
                    yy = (Int32)row.Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateYearColumn.ColumnName].Value;
                }
                if (row.Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateMonthColumn.ColumnName].Value != DBNull.Value)
                {
                    mm = (Int32)row.Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateMonthColumn.ColumnName].Value;
                }
                if (row.Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateDayColumn.ColumnName].Value != DBNull.Value)
                {
                    dd = (Int32)row.Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateDayColumn.ColumnName].Value;
                }

                DateTime priceStartDate = this._goodsAcs.GoodsPriceDataTable[rowIndex].PriceStartDate;

                if ((yy != 0) && (mm != 0) && (dd != 0))
                {
                    if (priceStartDate == DateTime.MinValue)
                    {
                        msg = "価格開始日が不正です。";
                        errCtrl = this._goodsPriceInput;
                        this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[rowIndex].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateYearColumn.ColumnName].Activate();
                        this._goodsPriceInput.uGrid_GoodsPriceInfo.PerformAction(UltraGridAction.EnterEditMode);
                        return status;
                    }
                }
            }
            // --- ADD 2009/02/03 障害ID:10848対応------------------------------------------------------<<<<<

            // --- ADD 2009/01/06 障害ID:9153対応------------------------------------------------------>>>>>
            // 課税区分
            if (this.TaxationCode_tComboEditor.Value == null)
            {
                msg = "課税区分を選択して下さい。";
                errCtrl = this.TaxationCode_tComboEditor;
                return status;
            }
            // --- ADD 2009/01/06 障害ID:9153対応------------------------------------------------------<<<<<

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
            // 在庫情報
            if ( CheckInputDataOfStock( ref errCtrl, out msg ) != (int)ConstantManagement.MethodResult.ctFNC_NORMAL )
            {
                return status;
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
            
            return (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
		}
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        /// <summary>
        /// 入力チェック処理（在庫）
        /// </summary>
        /// <param name="errCtrl"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>             改良対応</br>
        /// <br>             在庫関連日付項目の追加</br>
        private int CheckInputDataOfStock( ref Control errCtrl, out string msg )
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            msg = string.Empty;

            // 倉庫コード入力時のみチェックする
            if ( tEdit_WarehouseCode.Text != string.Empty )
            {
                // 管理拠点
                if ( this.tEdit_SectionName.Text == string.Empty )
                {
                    msg = "管理拠点を入力して下さい。";
                    errCtrl = this.tEdit_SectionCode;
                    return status;
                }

                // 最低在庫数≦最大在庫数チェック
                if ( this.tNedit_MinimumStockCnt.GetValue() > this.tNedit_MaximumStockCnt.GetValue() )
                {
                    msg = "最低在庫数≦最大在庫数となるように入力して下さい。";
                    errCtrl = this.tNedit_MaximumStockCnt;
                    return status;
                }
            }

            // --- ADD 2010/06/08 ---------->>>>>
            // 最終売上日
            if (_dateGet.CheckDate(ref tDateEdit_lastSalesDate, true) == DateGetAcs.CheckDateResult.ErrorOfInvalid)
            {
                msg = "最終売上日が不正です。";
                errCtrl = this.tDateEdit_lastSalesDate;
                return status;
            }
            // 最終仕入日
            if (_dateGet.CheckDate(ref tDateEdit_lastStockDate, true) == DateGetAcs.CheckDateResult.ErrorOfInvalid)
            {
                msg = "最終仕入日が不正です。";
                errCtrl = this.tDateEdit_lastStockDate;
                return status;
            }
            // --- ADD 2010/06/08 ----------<<<<<
            return (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

        //----- ADD K2013/05/13 王君 Redmine#35663 ----->>>>>
        /// <summary>
        /// オプション情報キャッシュ
        /// </summary>
        /// <remarks>
        /// <br>Note       : オプション情報制御処理。</br>
        /// <br>Programmer : 王君</br>
        /// <br>Date       : K2013/05/13</br>
        /// <br>管理番号   : 10901273-00</br>
        /// </remarks>
        private void CacheOptionInfo()
        {
            Broadleaf.Application.Remoting.ParamData.PurchaseStatus ps;

            #region ●山形部品オプション
            ps = LoginInfoAcquisition.SoftwarePurchasedCheckForUSB(ConstantManagement_SF_PRO.SoftwareCode_OPT_CMN_YamagataCustomControl);
            if (ps == Broadleaf.Application.Remoting.ParamData.PurchaseStatus.Contract)
            {
                this._opt_YamagataCtrl = (int)Option.ON;
            }
            else
            {
                this._opt_YamagataCtrl = (int)Option.OFF;
            }
            #endregion

            // -------- ADD START 2014/02/10 高陽 -------->>>>>
            #region ●商品マスタ表示用オプション
            ps = LoginInfoAcquisition.SoftwarePurchasedCheckForUSB(ConstantManagement_SF_PRO.SoftwareCode_OPT_CPM_KonmanGoodsMstCtl);
            if (ps == Broadleaf.Application.Remoting.ParamData.PurchaseStatus.Contract)
            {
                this._opt_KonmanGoodsMstCtl = (int)Option.ON;
            }
            else
            {
                this._opt_KonmanGoodsMstCtl = (int)Option.OFF;
            }
            #endregion
            // -------- ADD END 2014/02/10 高陽 --------<<<<<
        }
        //----- ADD K2013/05/13 王君 Redmine#35663 -----<<<<<

		/// <summary>
		/// 保存処理
		/// </summary>
		/// <param name="isSavingDialog">保存中ダイアログ表示</param>
		/// <param name="isConfirmDialog">保存確認ダイアログ表示</param>
		/// <param name="isRefresh">再描画フラグ</param>
		/// <returns>ConstantManagement.DB_Status</returns>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>             改良対応</br>
        /// <br>             在庫マスタに、メッセージを修正する。</br>
        /// <br>Update Note: 2010/06/08 楊明俊 #9744</br>
        /// <br>Update Note: 2011/08/02 caohh　</br>
        /// <br>           : NSユーザー改良要望一覧連番265の対応</br>
        /// <br>Update Note: 2011/08/30 周雨</br>
        /// <br>           : NSユーザー改良要望一覧連番265の対応 redmine #24131</br>
        /// <br>Update Note: 2011/09/09 wangf　</br>
        /// <br>           : 案件一覧 連番265 でのテスト不具合についての修正 FOR redmine #24497</br>
        /// <br>Update Note: 2011/09/15 yangmj　</br>
        /// <br>           : 案件一覧 連番265 でのテスト不具合についての修正 FOR redmine #25140</br>
        /// <br>Update Note: 2012/12/01 zhangy3　</br>
        /// <br>           : 2013/01/16配信分 Redmine#33231 商品在庫マスタ</br>
        /// <br>Update Note: 2013/05/24 donggy</br>
        /// <br>管理番号   : 10801804-00 2013/06/18配信分 </br>
        /// <br>             Redmine#35874 商品マスタ登録の速度改善について</br>
        /// <br>Update Note: 2013/09/18 田建委</br>
        /// <br>管理番号   : 10902175-00</br>
        /// <br>             Redmine#40423 旧商品在庫マスタの速度改善</br>
        /// <br>Update Note: 2015/09/07 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
        private int SaveData(bool isSavingDialog, bool isConfirmDialog, bool isRefresh)
		{
            // --- ADD 2010/06/08 ---------->>>>>
            // 2010/07/14 Del >>>
            //if (IsClosingAfterSave)
            //{
            //    // 既存か？
            //    //Stock stock;
            //    List<GoodsUnitData> goodsUnitDataList = null;
            //    string goodsMsg = string.Empty;

            //    GoodsCndtn goodsCndtn = new GoodsCndtn();

            //    goodsCndtn.EnterpriseCode = LoginInfoAcquisition.EnterpriseCode;                         // 企業コード
            //    goodsCndtn.GoodsMakerCd = tNedit_GoodsMakerCd.GetInt();                                      // メーカーコード
            //    goodsCndtn.GoodsNoSrchTyp = 0; // 商品番号検索区分
            //    goodsCndtn.GoodsNo = tEdit_GoodsNo.Text;                                    // 品番
            //    goodsCndtn.GoodsKindCode = 9;                                                           // 商品属性(全て)
            //    goodsCndtn.SectionCode = tEdit_SectionCode.Text;                               // 拠点コード

            //    this._goodsAcs.Search(goodsCndtn, ConstantManagement.LogicalMode.GetData01, out goodsUnitDataList, out goodsMsg);

            //    if (goodsUnitDataList != null && goodsUnitDataList.Count > 0)
            //    {
            //        foreach (GoodsUnitData goodsUnitData in goodsUnitDataList)
            //        {
            //            foreach (Stock stock in goodsUnitData.StockList)
            //            {
            //                if ((LoadingStockTabItem.WarehouseCode == stock.WarehouseCode
            //                    || tEdit_WarehouseCode.Text == stock.WarehouseCode)
            //                    && stock.LogicalDeleteCode == 1)
            //                {
            //                    // 排他エラーの場合
            //                    // 2010/07/14 Add >>>
            //                    if (_stockSlipFlg)
            //                    {
            //                        TMsgDisp.Show(
            //                            this,
            //                            emErrorLevel.ERR_LEVEL_INFO,
            //                            this.Name,
            //                            "この倉庫コードで新規登録する場合は、" + "\r\n" + "\r\n" + "在庫マスタで完全削除してから" + "\r\n" + "\r\n" + "再度コードを入力して下さい。",
            //                            0,
            //                            MessageBoxButtons.OK);
            //                    }
            //                    else
            //                    {
            //                        // 2010/07/14 Add <<<
            //                        TMsgDisp.Show(
            //                            this,
            //                            emErrorLevel.ERR_LEVEL_INFO,
            //                            this.Name,
            //                            "この倉庫コードで新規登録する場合は、" + "\r\n" + "\r\n" + "完全削除してから再度コードを入力して下さい。",
            //                            0,
            //                            MessageBoxButtons.OK);

            //                    }   // 2010/07/14 Add
            //                    // --- DEL 2010/06/17 ---------->>>>>
            //                    //tEdit_WarehouseCode.Focus();
            //                    //// 在庫削除アイコン
            //                    //Infragistics.Win.UltraWinToolbars.ButtonTool stockDeleteButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_STOCK_DELETEBUTTON_KEY];
            //                    //// 在庫復活アイコン
            //                    //Infragistics.Win.UltraWinToolbars.ButtonTool stockReviveButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_STOCK_REVIVEBUTTON_KEY];

            //                    //if (stockDeleteButton != null) stockDeleteButton.SharedProps.Enabled = true;
            //                    //if (stockReviveButton != null) stockReviveButton.SharedProps.Enabled = true;
            //                    // --- DEL 2010/06/17 ---------->>>>>
            //                    return (-1);
            //                }
            //            }
            //        }
            //    }
            //}
            // 2010/07/14 Del <<<
            // --- ADD 2010/06/08 ----------<<<<<

            //-----------------------------------------------------------------------------
            // 初期処理
            //-----------------------------------------------------------------------------
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
			string msg = "";
            //-----------------------------------------------------------------------------
            // 画面情報取得
            //-----------------------------------------------------------------------------
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
            //this.SetGoodsUnitDataFromScreen(ref this._editGoodsUnitData);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
            List<Rate> rateList = new List<Rate>();
            //this.SetGoodsUnitDataFromScreen(ref this._editGoodsUnitData, ref rateList); // DEL 2008/12/27
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
            // --- ADD 2008/12/27 -------------------------------->>>>>
            this.SetGoodsUnitDataFromScreen(ref this._editGoodsUnitData, ref rateList, false);
            // --- ADD 2008/12/27 --------------------------------<<<<<

            // 2009.03.12 30413 犬飼 更新直前の倉庫情報を保持 >>>>>>START
            List<Stock> bkStockList = new List<Stock>();
            foreach (Stock stock in this._editGoodsUnitData.StockList)
            {
                bkStockList.Add(stock.Clone());
            }
            // 2009.03.12 30413 犬飼 更新直前の倉庫情報を保持 <<<<<<END
            // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ---------->>>>>
            // MEMO:月次更新後であれば在庫データの更新は行えない
            //if (!CanWrite(
            //    this._editGoodsUnitData.StockList,
            //    this._prevStockList,
            //    DateTime.Now
            //)) return (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            if (!CanWrite(DateTime.Now)) return (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ----------<<<<<
            // --- ADD 2009/01/13 障害ID:9623対応------------------------------------------------------>>>>>
            if ((this._editGoodsUnitData.StockList != null) && (this._editGoodsUnitData.StockList.Count != 0))
            {
                bool deleteFlg = false;
                bool logicalDeleteFlg = false;

                foreach (Stock stock in this._editGoodsUnitData.StockList)
                {
                    if (stock.LogicalDeleteCode == 1)
                    {
                        foreach (Stock stockPrev in this._prevStockList)
                        {
                            if ((stock.SectionCode.Trim() == stockPrev.SectionCode.Trim()) &&
                                (stock.WarehouseCode.Trim() == stockPrev.WarehouseCode.Trim()))
                            {
                                if (stockPrev.SupplierStock != 0)
                                {
                                    logicalDeleteFlg = true;
                                    break;
                                }
                            }
                        }
                    }
                    else if (stock.LogicalDeleteCode == 3)
                    {
                        deleteFlg = true;
                    }
                }

                if ((logicalDeleteFlg == true) || (deleteFlg == true))
                {
                    if ((logicalDeleteFlg == true) && (deleteFlg == true))
                    {
                        msg = "在庫情報が削除されていますが、登録してもよろしいですか？";
                    }
                    else if (logicalDeleteFlg == true)
                    {
                        msg = "在庫情報が削除されていますが、登録してもよろしいですか？";
                    }
                    else
                    {
                        msg = "在庫情報が完全削除されますが、登録してもよろしいですか？";
                    }
                    MessageBoxButtons buttons = MessageBoxButtons.OKCancel;
                    DialogResult dr2 = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION, CT_PGID, msg, 0, buttons);
                    if (dr2 == DialogResult.Cancel)
                    {
                        isSavingDialog = false;
                        isConfirmDialog = false;
                        isRefresh = false;
                        return (-1);
                    }
                }
            }
            // --- ADD 2009/01/13 障害ID:9623対応------------------------------------------------------<<<<<

			Cursor _localCursor = this.Cursor;

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
            bool progressFormClosed = false;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

            // --- Add 2012/12/01 zhangy3 for Redmine#33231 ----->>>>>
            GoodsMngWork curMngWork = null;
            if (!string.IsNullOrEmpty(tNedit_PayeeCode.DataText))
            {
                Dictionary<GoodsAcs.GoodsMngSettingPattern, GoodsMngWork> hitMngWorkDic = null;
                //_goodsAcs.GetMngWorkByGoodData(this._editGoodsUnitData, out hitMngWorkDic);// DEL donggy 2013/05/24 for Redmine#35874
                if (IsNewMode())
                {
                    _goodsAcs.GetMngWorkByGoodData(this._editGoodsUnitData, out hitMngWorkDic);// ADD donggy 2013/05/24 for Redmine#35874
                    GoodsAcs.GoodsMngSettingPattern existsedPattern = GoodsAcs.GoodsMngSettingPattern.None;
                    if (hitMngWorkDic != null && hitMngWorkDic.Keys.Count > 0)
                    {
                        GoodsMngWork tmpMngWork = null;
                        foreach (GoodsAcs.GoodsMngSettingPattern pattern in hitMngWorkDic.Keys)
                        {
                            tmpMngWork = (GoodsMngWork)hitMngWorkDic[pattern];
                            //仕入先と入力された仕入先が同じ場合
                            if (tmpMngWork.SupplierCd == tNedit_PayeeCode.GetInt())
                            {
                                existsedPattern = pattern;
                                curMngWork = tmpMngWork;
                                break;
                            }
                            else
                            {
                                //全社共通+メーカー＋品番
                                if (pattern == GoodsAcs.GoodsMngSettingPattern.AllSection_Maker_GoodsNo)
                                {
                                    existsedPattern = pattern;
                                    curMngWork = tmpMngWork;
                                    break;
                                }
                            }
                        }
                    }
                    if (curMngWork != null)
                    {
                        //仕入先入力有り、且つ「全社共通+メーカー＋品番」
                        if (existsedPattern == GoodsAcs.GoodsMngSettingPattern.AllSection_Maker_GoodsNo && curMngWork.SupplierCd != tNedit_PayeeCode.GetInt())
                        {
                            //curMngWork.SupplierCd = tNedit_PayeeCode.GetInt();//該当データを更新す // DEL 2013/09/18 田建委 Redmine#40423
                            //「全社共通+メーカー＋品番」を新規登録する
                            GetAllSecMarkerGoodsNo(ref curMngWork); // ADD 2013/09/18 田建委 Redmine#40423
                        }
                        else
                        {
                            curMngWork = null;//登録しない
                        }
                    }
                    else
                    {
                        //「全社共通+メーカー＋品番」を新規登録する
                        //GetAllSecMarkerGoodsNo(ref curMngWork);// DEL donggy 2013/05/24 for Redmine#35874
                        //GetAllSecMarkerGoodsNo(ref curMngWork, GoodsAcs.GoodsMngSettingPattern.AllSection_Maker_GoodsNo, false);// ADD donggy 2013/05/24 for Redmine#35874 // DEL 2013/09/18 田建委 Redmine#40423
                        GetAllSecMarkerGoodsNo(ref curMngWork); // ADD 2013/09/18 田建委 Redmine#40423
                    }
                }
                else
                {
                    //_goodsAcs.GetGoodsMngWorkFromGoodData(this._editGoodsUnitData, out curMngWork, curFoundGoodsMngPattern);// DEL donggy 2013/05/24 for Redmine#35874
                    //_goodsAcs.GetGoodsMngWorkFromGoodData(this._editGoodsUnitData, out curMngWork, curFoundGoodsMngPattern, false);// ADD donggy 2013/05/24 for Redmine#35874 // DEL 2013/09/18 田建委 Redmine#40423
                    _goodsAcs.GetGoodsMngWorkFromGoodData(this._editGoodsUnitData, out curMngWork, curFoundGoodsMngPattern); // ADD 2013/09/18 田建委 Redmine#40423
                    if (curMngWork == null)
                    {
                        //「全社共通+メーカー＋品番」を新規登録する
                        //GetAllSecMarkerGoodsNo(ref curMngWork);// DEL donggy 2013/05/24 for Redmine#35874
                        //GetAllSecMarkerGoodsNo(ref curMngWork, curFoundGoodsMngPattern, true);// ADD donggy 2013/05/24 for Redmine#35874 // DEL 2013/09/18 田建委 Redmine#40423
                        GetAllSecMarkerGoodsNo(ref curMngWork); // ADD 2013/09/18 田建委 Redmine#40423
                    }
                    else
                    {
                        /*----- DEL 2013/09/18 田建委 Redmine#40423 ---------->>>>>
                        if (curFoundGoodsMngPattern == GoodsAcs.GoodsMngSettingPattern.AllSection_Maker_GoodsNo)
                        {
                            curMngWork.SupplierCd = this.tNedit_PayeeCode.GetInt();
                        }
                        else
                        {
                            if (curMngWork.SupplierCd != tNedit_PayeeCode.GetInt())
                            {
                                //「全社共通+メーカー＋品番」を新規登録する
                                //GetAllSecMarkerGoodsNo(ref curMngWork);// DEL donggy 2013/05/24 for Redmine#35874
                                GetAllSecMarkerGoodsNo(ref curMngWork, curFoundGoodsMngPattern, true); // ADD donggy 2013/05/24 for Redmine#35874
                            }
                        }
                        ----- DEL 2013/09/18 田建委 Redmine#40423 ----------<<<<<*/

                        //----- ADD 2013/09/18 田建委 Redmine#40423 ---------->>>>>
                        if (curMngWork.SupplierCd != tNedit_PayeeCode.GetInt())
                        {
                            //「全社共通+メーカー＋品番」を新規登録する
                            GetAllSecMarkerGoodsNo(ref curMngWork);
                        }
                        else
                        {
                            curMngWork = null; // 登録しない
                        }
                        //----- ADD 2013/09/18 田建委 Redmine#40423 ----------<<<<<
                    }
                }
            }
            else
            {
                if (curFoundGoodsMngPattern == GoodsAcs.GoodsMngSettingPattern.AllSection_Maker_GoodsNo)
                {
                    // --- DEL donggy 2013/05/24 for Redmine#35874 --->>>>>>>
                    //_goodsAcs.GetGoodsMngWorkFromGoodData(this._editGoodsUnitData, out curMngWork, curFoundGoodsMngPattern);
                    //if (curMngWork != null)
                    //{
                    //    curMngWork.LogicalDeleteCode = 3;
                    //}
                    // --- DEL donggy 2013/05/24 for Redmine#35874 ---<<<<<<<
                    /*----- DEL 2013/09/18 田建委 Redmine#40423 ---------->>>>>
                    // --- ADD donggy 2013/05/24 for Redmine#35874 --->>>>>>>
                    if (!IsNewMode())
                    {
                        _goodsAcs.GetGoodsMngWorkFromGoodData(this._editGoodsUnitData, out curMngWork, curFoundGoodsMngPattern, true);
                        if (curMngWork != null)
                        {
                            curMngWork.LogicalDeleteCode = 3;
                        }
                    }
                    // --- ADD donggy 2013/05/24 for Redmine#35874 ---<<<<<<<
                    ----- DEL 2013/09/18 田建委 Redmine#40423 ----------<<<<<*/

                    //----- ADD 2013/09/18 田建委 Redmine#40423 ---------->>>>>
                    _goodsAcs.GetGoodsMngWorkFromGoodData(this._editGoodsUnitData, out curMngWork, curFoundGoodsMngPattern);
                    if (curMngWork != null)
                    {
                        curMngWork.LogicalDeleteCode = 3;
                    }
                    //----- ADD 2013/09/18 田建委 Redmine#40423 ----------<<<<<
                }
            }
            // --- Add 2012/12/01 zhangy3 for Redmine#33231 -----<<<<<
            try
            {
                try
                {
                    this.Cursor = Cursors.WaitCursor;

                    //-----------------------------------------------------------------------------
                    // 保存中ダイアログ表示
                    //-----------------------------------------------------------------------------
                    if (isSavingDialog)
                    {
                        if ( this._waitDialog == null )
                            this._waitDialog = new SFCMN00299CA();
                        this._waitDialog.Title = "保存中";
                        this._waitDialog.Message = "商品データの保存中です．．．";
                        this._waitDialog.Show();
                    }

                    //-----------------------------------------------------------------------------
                    // TODO:保存処理
                    //-----------------------------------------------------------------------------
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                    //status = this._goodsAcs.Write( ref this._editGoodsUnitData, out msg );
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                    // ---------------------- ADD 2011/08/30 FOR redmine #24131 ------------------- >>>>>
                    /* -- DEL wangf 2011/09/09 ---------->>>>>
                    if (this._prevStockList != null && this._prevStockList.Count != 0)
                    {
                        if (this._editGoodsUnitData.GoodsNo != this._prevStockList[0].GoodsNo
                            || this._editGoodsUnitData.GoodsMakerCd != this._prevStockList[0].GoodsMakerCd)
                    // -- DEL wangf 2011/09/09 ----------<<<<<*/
                    // -- ADD wangf 2011/09/09 ---------->>>>>
                    if (NEW_INPUT_TITLE.Equals(uLabel_InputModeTitle.Text))
                    // -- ADD wangf 2011/09/09 ----------<<<<<
                        {
                            this._editGoodsUnitData.FileHeaderGuid = Guid.Empty;
                            this._editGoodsUnitData.UpdateDateTime = DateTime.MinValue;
                            foreach (Rate rate in rateList)
                            {
                                // --- ADD 黄興貴 2015/09/07 Redmine#47026 仕掛対応 -------->>>>>
                                if (!string.IsNullOrEmpty(rate.UpdAssemblyId1))
                                {
                                    // 掛率は更新する場合、UpdateDateTimeを更新しない。
                                    continue;
                                }
                                // --- ADD 黄興貴 2015/09/07 Redmine#47026 仕掛対応 --------<<<<<
                                rate.FileHeaderGuid = Guid.Empty;
                                rate.UpdateDateTime = DateTime.MinValue;
                            }

                            foreach (GoodsPrice goodsPrice in this._editGoodsUnitData.GoodsPriceList)
                            {
                                goodsPrice.FileHeaderGuid = Guid.Empty;
                                goodsPrice.UpdateDateTime = DateTime.MinValue;
                            }

                            foreach (Stock stock in this._editGoodsUnitData.StockList)
                            {
                                stock.FileHeaderGuid = Guid.Empty;
                                stock.UpdateDateTime = DateTime.MinValue;
                            }
                            this._prevStockList.Clear();
                        }
                    //} // DEL wangf 2011/09/09
                    // ---------------------- ADD 2011/08/30 FOR redmine #24131 ------------------- <<<<<
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                    //status = this._goodsAcs.Write( ref this._editGoodsUnitData, this._prevStockList, ref rateList, out msg );//Del 2012/12/01 zhangy3 for Redmine#33231
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
                    //status = this._goodsAcs.Write(ref this._editGoodsUnitData, this._prevStockList, ref rateList, curMngWork, out msg);//Add 2012/12/01 zhangy3 for Redmine#33231      // DEL huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正
                    // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- >>>>>
                    if (this.tNedit_ShipmentCnt.GetValue().Equals(this._preShipmentCnt))
                    {
                        status = this._goodsAcs.Write(ref this._editGoodsUnitData, this._prevStockList, ref rateList, curMngWork, out msg);
                    }
                    else
                    {
                        status = this._goodsAcs.WriteForShipmentCnt(ref this._editGoodsUnitData, this._prevStockList, ref rateList, curMngWork, out msg);
                    }
                    // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- <<<<<

                    //-----------------------------------------------------------------------------
                    // ステータス判定
                    //-----------------------------------------------------------------------------
                    switch (status)
                    {
                        case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                            {
                                // --- ADD 2008/12/18 --------------------------------------------------------------------->>>>>
                                this.uLabel_InputModeTitle.Text = UPDATE_INPUT_TITLE;
                                // --- ADD 2008/12/18 ---------------------------------------------------------------------<<<<<
                                // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
                                // 保存前情報が『クリアする』場合
                                if (this._saveInfoDiv == 1)
                                {
                                    this.uLabel_InputModeTitle.Text = NEW_INPUT_TITLE;
                                }
                                // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
                                // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- >>>>>
                                tNedit_ShipmentCnt.Enabled = false;
                                tNedit_ShipmentCnt.Appearance.BackColor = BACKCOLOR_DISABLE;
                                this._preShipmentCnt = 0;
                                // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- <<<<<
                                break;
                            }
                        case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:
                        case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                        //case (int)ConstantManagement.DB_Status.ctDB_ENT_LOCK_TIMEOUT: // ADD 2009/02/02 // DEL 2009/02/18
                        //case (int)ConstantManagement.DB_Status.ctDB_SEC_LOCK_TIMEOUT: // ADD 2009/02/02 // DEL 2009/02/18
                        //case (int)ConstantManagement.DB_Status.ctDB_WAR_LOCK_TIMEOUT: // ADD 2009/02/02 // DEL 2009/02/18
                            {
                                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                                if ( !progressFormClosed )
                                {
                                    progressFormClosed = true;
                                    this._waitDialog.Close();
                                }
                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

                                // 排他エラーの場合
                                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    CT_PGID,
                                    msg,
                                    status,
                                    MessageBoxButtons.OK,
                                    MessageBoxDefaultButton.Button1);
                                break;
                            }
                        // --- ADD 2009/02/18 -------------------------------->>>>>
                        case (int)ConstantManagement.DB_Status.ctDB_ENT_LOCK_TIMEOUT: // ADD 2009/02/18
                        case (int)ConstantManagement.DB_Status.ctDB_SEC_LOCK_TIMEOUT: // ADD 2009/02/18
                        case (int)ConstantManagement.DB_Status.ctDB_WAR_LOCK_TIMEOUT: // ADD 2009/02/18
                            {
                                if (!progressFormClosed)
                                {
                                    progressFormClosed = true;
                                    this._waitDialog.Close();
                                }

                                // 排他エラーの場合
                                TMsgDisp.Show(
                                    this,
                                    emErrorLevel.ERR_LEVEL_STOPDISP,
                                    this.Name,
                                    "保存に失敗しました。" + "\r\n" + "\r\n" + msg,
                                    status,
                                    MessageBoxButtons.OK);
                                break;
                            }
                        // --- ADD 2009/02/18 --------------------------------<<<<<
                        default:
                            {
                                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                                if ( !progressFormClosed )
                                {
                                    progressFormClosed = true;
                                    this._waitDialog.Close();
                                }
                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

                                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP,
                                    CT_PGID,
                                    msg,
                                    status,
                                    MessageBoxButtons.OK,
                                    MessageBoxDefaultButton.Button1);
                                break;
                            }
                    }
                }
                catch (Exception ex)
                {
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                    if ( !progressFormClosed )
                    {
                        progressFormClosed = true;
                        this._waitDialog.Close();
                    }
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

                    msg = "商品データの登録にて例外が発生しました[" + ex.Message + "]";
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP,
                        CT_PGID,
                        msg,
                        status,
                        MessageBoxButtons.OK,
                        MessageBoxDefaultButton.Button1);
                }
               
            }
            finally
            {
                //----- ADD 2013/09/18 田建委 Redmine#40423 ----->>>>>
                if (!progressFormClosed)
                {
                    progressFormClosed = true;
                    this._waitDialog.Close();
                }
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // 保存確認ダイアログを表示する
                    if (isConfirmDialog)
                    {
                        SaveCompletionDialog dialog = new SaveCompletionDialog();
                        dialog.ShowDialog(2);
                    }
                }
                //----- ADD 2013/09/18 田建委 Redmine#40423 -----<<<<<

                // 2009.03.12 30413 犬飼 登録失敗時に倉庫情報を更新直前に戻すよう変更 >>>>>>START
                //-----------------------------------------------------------------------------
                // 保存内容画面反映
                //-----------------------------------------------------------------------------
                // if (isRefresh)
                if ((isRefresh) &&
                    (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL))
                {
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                    //this.SetScreenFromGoodsUnitData(this._editGoodsUnitData);
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                    // 在庫リストクローン取得
                    this._prevStockList = GetStockListClone( this._editGoodsUnitData.StockList );
                    // 保存内容画面反映
                    this.SetScreenFromGoodsUnitData( this._editGoodsUnitData, rateList );
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
                    this.__goodsUnitData = this._editGoodsUnitData.Clone();
                }
                else if ((isRefresh) &&
                         (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL))
                {
                    // 更新直前の倉庫情報に戻す
                    this._editGoodsUnitData.StockList = bkStockList;                    
                    // 保存内容画面反映
                    this.SetScreenFromGoodsUnitData(this._editGoodsUnitData, rateList);
                }
                // 2009.03.12 30413 犬飼 登録失敗時に倉庫情報を更新直前に戻すよう変更 <<<<<<END

                // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
                // 保存前情報が『クリアする』場合
                if (this._saveInfoDiv == 1)
                {
                    // 品番へフォーカス移動
                    this.tEdit_GoodsNo.Focus();
                    // --- UPD yangmj 2011/09/15 ------------------------------------------------------>>>>>
                    if (this.tEdit_GoodsNo.Enabled)
                    {
                        this.tEdit_GoodsNo.SelectionStart = this.tEdit_GoodsNo.Text.Length;
                    }
                    //this.tEdit_GoodsNo.SelectionStart = this.tEdit_GoodsNo.Text.Length;
                    // --- UPD yangmj 2011/09/15 ------------------------------------------------------<<<<<
                }
                // --- ADD caohh 2011/08/02 ------------------------------------------------------<<<<<

                // 登録中画面を非表示に
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                //if ( isSavingDialog ) this._waitDialog.Close();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                //----- DEL 2013/09/18 田建委 Redmine#40423 ----->>>>>
                //if ( !progressFormClosed )
                //{
                //    progressFormClosed = true;
                //    this._waitDialog.Close();
                //}
                //----- DEL 2013/09/18 田建委 Redmine#40423 -----<<<<<
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

                // カーソールを元に戻す
                this.Cursor = _localCursor;

                //----- DEL 2013/09/18 田建委 Redmine#40423 ----->>>>>
                //if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                //{
                //    // 保存確認ダイアログを表示する
                //    if (isConfirmDialog)
                //    {
                //        SaveCompletionDialog dialog = new SaveCompletionDialog();
                //        dialog.Show(2);
                //    }
                //}
                //----- DEL 2013/09/18 田建委 Redmine#40423 -----<<<<<
            }

			return status;
		}
        // --- Add 2012/12/01 zhangy3 for Redmine#33231 ----->>>>>
        /// <summary>
        /// 「全社共通+メーカー＋品番」を作成する
        /// </summary>
        /// <param name="curMngWork">商品管理情報</param>
        /// <param name="curFoundGoodsMngPattern">商品管理情報入力パターン</param>
        /// <param name="byGoodsNoFlag">品番フラグ</param>
        /// <remarks>
        /// <br>Note       : 「全社共通+メーカー＋品番」を作成します。</br>
        /// <br>Programmer : zhangy3</br>
        /// <br>Date       : 2012/12/01</br>
        /// <br>Update Note: 2013/05/24 donggy</br>
        /// <br>管理番号   : 10801804-00 2013/06/18配信分 </br>
        /// <br>             Redmine#35874 商品マスタ登録の速度改善について</br>
        /// <br>Update Note: 2013/09/18 田建委</br>
        /// <br>管理番号   : 10902175-00</br>
        /// <br>             Redmine#40423 旧商品在庫マスタの速度改善</br>
        /// </remarks>
        //private void GetAllSecMarkerGoodsNo(ref GoodsMngWork curMngWork)// DEL donggy 2013/05/24 for Redmine#35874
        //private void GetAllSecMarkerGoodsNo(ref GoodsMngWork curMngWork, GoodsAcs.GoodsMngSettingPattern curFoundGoodsMngPattern, bool byGoodsNoFlag) // ADD donggy 2013/05/24 for Redmine#35874 // DEL 2013/09/18 田建委 Redmine#40423
        private void GetAllSecMarkerGoodsNo(ref GoodsMngWork curMngWork) // ADD 2013/09/18 田建委 Redmine#40423
        {
            /*----- DEL 2013/09/18 田建委 Redmine#40423 ---------->>>>>
            //_goodsAcs.GetGoodsMngWorkFromGoodData(this._editGoodsUnitData, out curMngWork, GoodsAcs.GoodsMngSettingPattern.AllSection_Maker_GoodsNo);// DEL donggy 2013/05/24 for Redmine#35874
            // --- ADD donggy 2013/05/24 for Redmine#35874 --->>>>>
            if (curFoundGoodsMngPattern != GoodsAcs.GoodsMngSettingPattern.AllSection_Maker_GoodsNo)
            {
                _goodsAcs.GetGoodsMngWorkFromGoodData(this._editGoodsUnitData, out curMngWork, GoodsAcs.GoodsMngSettingPattern.AllSection_Maker_GoodsNo, byGoodsNoFlag);
            }
            // --- ADD donggy 2013/05/24 for Redmine#35874 ---<<<<<
            if (curMngWork == null)
            {
                //「全社共通+メーカー＋品番」を新規登録する
                curMngWork = new GoodsMngWork();
                curMngWork.SectionCode = "00";
                curMngWork.GoodsMakerCd = this._editGoodsUnitData.GoodsMakerCd;
                curMngWork.GoodsNo = this._editGoodsUnitData.GoodsNo;
                curMngWork.GoodsName = this._editGoodsUnitData.GoodsName;
                curMngWork.SupplierCd = this.tNedit_PayeeCode.GetInt();
                curMngWork.SupplierLot = this._editGoodsUnitData.SupplierLot;
                curMngWork.SupplierSnm = this.tEdit_PayeeName.DataText;
                curMngWork.EnterpriseCode = this._editGoodsUnitData.EnterpriseCode;
            }
            else
            {
                curMngWork.SupplierCd = this.tNedit_PayeeCode.GetInt();
                curMngWork.SupplierLot = this._editGoodsUnitData.SupplierLot;
                curMngWork.SupplierSnm = this.tEdit_PayeeName.DataText;
            }
            ----- DEL 2013/09/18 田建委 Redmine#40423 ----------<<<<<*/

            //----- ADD 2013/09/18 田建委 Redmine#40423 ---------->>>>>
            //「全社共通+メーカー＋品番」を新規登録する
            curMngWork = new GoodsMngWork();
            curMngWork.SectionCode = "00";
            curMngWork.GoodsMakerCd = this._editGoodsUnitData.GoodsMakerCd;
            curMngWork.GoodsNo = this._editGoodsUnitData.GoodsNo;
            curMngWork.GoodsName = this._editGoodsUnitData.GoodsName;
            curMngWork.SupplierCd = this.tNedit_PayeeCode.GetInt();
            curMngWork.SupplierLot = this._editGoodsUnitData.SupplierLot;
            curMngWork.SupplierSnm = this.tEdit_PayeeName.DataText;
            curMngWork.EnterpriseCode = this._editGoodsUnitData.EnterpriseCode;
            //----- ADD 2013/09/18 田建委 Redmine#40423 ----------<<<<<
        }
        // --- Add 2012/12/01 zhangy3 for Redmine#33231 -----<<<<<

		/// <summary>
		/// 削除処理
		/// </summary>
		/// <returns>ConstantManagement.DB_Status</returns>
        /// <br>Update Note: 2015/09/07 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
		private int DeleteData()
		{
			int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
			string msg = "";

			// 画面 →　編集用バッファ
			//this.SetGoodsUnitDataFromScreen(ref this._editGoodsUnitData);

			Cursor _localCursor = this.Cursor;

			try
			{
				this.Cursor = Cursors.WaitCursor;

                // -------------------------------------------------
                // 商品マスタ
                // -------------------------------------------------
                // 保存処理
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 DEL
                //status = this._goodsAcs.Delete(ref this._editGoodsUnitData, out msg);
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 ADD
                //__rateList = _unitSalesPriceInput.GetRateListForDelete();// DEL 黄興貴 2015/09/07 Redmine#47026 仕掛対応

                // --- ADD 黄興貴 2015/09/07 Redmine#47026 仕掛対応 -------->>>>>
                // 掛率を削除しない、クリアする
                __rateList = new List<Rate>();
                // --- ADD 黄興貴 2015/09/07 Redmine#47026 仕掛対応 --------<<<<<

                status = this._goodsAcs.Delete( ref this._editGoodsUnitData, this._prevStockList, ref __rateList, out msg );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 ADD
				if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
				{
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, CT_PGID, "削除しました。　　　　　　　　　", 0, MessageBoxButtons.OK);

                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                    //// 編集用バッファ  → 画面　
                    //this._editGoodsUnitData = new GoodsUnitData();
                    //this.__goodsUnitData = this._editGoodsUnitData.Clone();

                    //this.SetScreenFromGoodsUnitData(this._editGoodsUnitData);
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                    __rateList = RateHelper.SearchAll(this._editGoodsUnitData, out msg); // ADD 黄興貴 2015/09/07 Redmine#47026 仕掛対応
                    this.SetScreenFromGoodsUnitData( this._editGoodsUnitData, __rateList );
                    this.__goodsUnitData = this._editGoodsUnitData.Clone();
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

                    // --- ADD 2009/01/06 障害ID:9478対応------------------------------------------------------>>>>>
                    // 在庫リストクローン取得
                    this._prevStockList = GetStockListClone(this._editGoodsUnitData.StockList);
                    // --- ADD 2009/01/06 障害ID:9478対応------------------------------------------------------<<<<<

                    // --- ADD 2008/12/18 --------------------------------------------------------------------->>>>>
                    this.uLabel_InputModeTitle.Text = DELETE_INPUT_TITLE;
                    // --- ADD 2008/12/18 ---------------------------------------------------------------------<<<<<
				}
				else
				{
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, CT_PGID, msg, status, MessageBoxButtons.OK);
				}

            }
			finally
			{
				// カーソールを元に戻す
				this.Cursor = _localCursor;
			}

			return status;
		}

        // --- ADD 2008/09/02 -------------------------------->>>>>
        /// <summary>
        /// 完全削除処理
        /// </summary>
        /// <returns>ConstantManagement.DB_Status</returns>
        private int CompleteDeleteData()
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            string msg = "";

            Cursor _localCursor = this.Cursor;

            try
            {
                this.Cursor = Cursors.WaitCursor;

                // -------------------------------------------------
                // 商品マスタ
                // -------------------------------------------------
                // 保存処理
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 DEL
                //status = this._goodsAcs.CompleteDelete( this._editGoodsUnitData, out msg );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 ADD
                __rateList = _unitSalesPriceInput.GetRateListForDelete();
                status = this._goodsAcs.CompleteDelete( this._editGoodsUnitData, ref __rateList, out msg );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 ADD
                if ( status == (int)ConstantManagement.DB_Status.ctDB_NORMAL )
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, CT_PGID, "完全削除しました。　　　　　　　　　", 0, MessageBoxButtons.OK);

                    // 編集用バッファ  → 画面　
                    this._editGoodsUnitData = new GoodsUnitData();
                    this.__goodsUnitData = this._editGoodsUnitData.Clone();

                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                    //this.SetScreenFromGoodsUnitData(this._editGoodsUnitData);
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                    if ( this._editGoodsUnitData.GoodsPriceList == null )
                    {
                        this._editGoodsUnitData.GoodsPriceList = new List<GoodsPrice>();
                    }
                    __rateList = new List<Rate>();
                    this.SetScreenFromGoodsUnitData( this._editGoodsUnitData, __rateList );
                    this.__goodsUnitData = this._editGoodsUnitData.Clone();
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

                    // --- ADD 2009/01/06 障害ID:9584対応------------------------------------------------------>>>>>
                    // 価格情報
                    // --- UPD m.suzuki 2010/11/25 ---------->>>>>
                    //this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateYearColumn.ColumnName].Value = DateTime.Now.Year;
                    //this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateMonthColumn.ColumnName].Value = DateTime.Now.Month;
                    //this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateDayColumn.ColumnName].Value = DateTime.Now.Day;
                    DateTime priceStartDate = GetPriceStartDate();
                    this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateYearColumn.ColumnName].Value = priceStartDate.Year;
                    this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateMonthColumn.ColumnName].Value = priceStartDate.Month;
                    this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateDayColumn.ColumnName].Value = priceStartDate.Day;
                    // --- UPD m.suzuki 2010/11/25 ----------<<<<<
                    this._goodsPriceInput.ReturnKeyDown();

                    this.tEdit_GoodsNo.Focus();
                    // --- ADD 2009/01/06 障害ID:9584対応------------------------------------------------------<<<<<
                    ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09

                    // --- ADD 2008/12/18 --------------------------------------------------------------------->>>>>
                    this.uLabel_InputModeTitle.Text = NEW_INPUT_TITLE;

                    ultraTabControl1.Tabs[0].Selected = true;
                    // --- ADD 2008/12/18 ---------------------------------------------------------------------<<<<<
                }
                else
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, CT_PGID, msg, status, MessageBoxButtons.OK);
                }

            }
            finally
            {
                // カーソルを元に戻す
                this.Cursor = _localCursor;
            }

            return status;
        }

        // --- ADD m.suzuki 2010/11/25 ---------->>>>>
        /// <summary>
        /// 価格開始日取得処理
        /// </summary>
        /// <returns></returns>
        private DateTime GetPriceStartDate()
        {
            try
            {
                //--------------------------------------------------
                // 通常は、前回月次更新日の翌日
                //--------------------------------------------------
                DateTime prevTotalDay = GetHisTotalDayMonthly();
                if ( prevTotalDay != DateTime.MinValue )
                {
                    // 前回月次更新日の翌日
                    return prevTotalDay.AddDays( 1 );
                }

                //--------------------------------------------------
                // （※新規搬入して一度も月次更新をしていないような場合）自社.期首日
                //--------------------------------------------------
                if ( _dateGetAcs == null )
                {
                    _dateGetAcs = DateGetAcs.GetInstance();
                }
                else
                {
                    _dateGetAcs.ReloadCompanyInf(); // 必ず再取得する
                }
                List<DateTime> startMonthDateList;
                List<DateTime> endMonthDateList;

                CompanyInf companyInf = _dateGetAcs.GetCompanyInf();
                if ( companyInf != null && companyInf.CompanyBiginDate != 0 )
                {
                    _dateGetAcs.GetFinancialYearTable( out startMonthDateList, out endMonthDateList );
                    if ( startMonthDateList != null && startMonthDateList.Count > 0 )
                    {
                        // 期首日←最初の月の開始日
                        return startMonthDateList[0];
                    }
                }
            }
            catch
            {
            }

            // ※通常は発生しないが期首日も取得できなかった場合は既存処理と同様。
            return DateTime.Now;
        }
        /// <summary>
        /// 前回月次更新日取得
        /// </summary>
        /// <returns></returns>
        private DateTime GetHisTotalDayMonthly()
        {
            if ( _totalDayCalculator == null ) this._totalDayCalculator = TotalDayCalculator.GetInstance();

            int status;
            DateTime prevTotalDay;

            // 締日算出モジュールのキャッシュクリア
            this._totalDayCalculator.ClearCache();

            // 買掛オプション判定
            PurchaseStatus ps;
            ps = LoginInfoAcquisition.SoftwarePurchasedCheckForCompany( ConstantManagement_SF_PRO.SoftwareCode_OPT_CMN_StockingPayment );
            if ( ps == PurchaseStatus.Contract )
            {
                // 買掛オプションあり
                // 売上月次処理日、仕入月次処理日の古い年月取得
                this._totalDayCalculator.InitializeHisMonthly();
                status = this._totalDayCalculator.GetHisTotalDayMonthly( string.Empty, out prevTotalDay );
                if ( prevTotalDay == DateTime.MinValue )
                {
                    // 売上月次処理日取得
                    status = this._totalDayCalculator.GetHisTotalDayMonthlyAccRec( string.Empty, out prevTotalDay );
                    if ( prevTotalDay == DateTime.MinValue )
                    {
                        // 仕入月次処理日取得
                        status = this._totalDayCalculator.GetHisTotalDayMonthlyAccPay( string.Empty, out prevTotalDay );
                    }
                }
            }
            else
            {
                // 買掛オプションなし
                // 売上月次処理日取得
                this._totalDayCalculator.InitializeHisMonthlyAccRec();
                status = this._totalDayCalculator.GetHisTotalDayMonthlyAccRec( string.Empty, out prevTotalDay );
            }

            return prevTotalDay;
        }
        // --- ADD m.suzuki 2010/11/25 ----------<<<<<

        /// <summary>
        /// 復活処理
        /// </summary>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>
        /// <br>Update Note: 2012/11/21 zhuhh</br>
        /// <br>管理番号   : 2013/01/16配信分</br>
        /// <br>           : redmine #33230  論理削除データ含む</br>
        /// <br>Update Note: 2015/09/07 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
        /// </remarks>
        private int ReviveData()
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            string msg = "";

            Cursor _localCursor = this.Cursor;

            try
            {
                this.Cursor = Cursors.WaitCursor;

                // -------------------------------------------------
                // 商品マスタ
                // -------------------------------------------------
                // 保存処理
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 DEL
                //status = this._goodsAcs.Revival(ref this._editGoodsUnitData, out msg);
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 ADD
                //__rateList = _unitSalesPriceInput.GetRateListForRevive();// DEL 黄興貴 2015/09/07 Redmine#47026 仕掛対応

                // --- ADD 黄興貴 2015/09/07 Redmine#47026 仕掛対応 -------->>>>>
                // 掛率を削除しない、クリアする
                __rateList = new List<Rate>();
                // --- ADD 黄興貴 2015/09/07 Redmine#47026 仕掛対応 --------<<<<<

                status = this._goodsAcs.Revival( ref this._editGoodsUnitData, ref __rateList, out msg );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 ADD
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, CT_PGID, "復活しました。　　　　　　　　　", 0, MessageBoxButtons.OK);

                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                    //// 編集用バッファ  → 画面　
                    //this._editGoodsUnitData = new GoodsUnitData();
                    //this.__goodsUnitData = this._editGoodsUnitData.Clone();
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL

                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                    //this.SetScreenFromGoodsUnitData(this._editGoodsUnitData);
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                    __rateList = RateHelper.SearchAll(this._editGoodsUnitData,out msg); // ADD zhuhh 2012/11/21 for Redmine #33230
                    this.SetScreenFromGoodsUnitData( this._editGoodsUnitData, __rateList );
                    this.__goodsUnitData = this._editGoodsUnitData.Clone();
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

                    // --- ADD 2008/12/18 --------------------------------------------------------------------->>>>>
                    this.uLabel_InputModeTitle.Text = UPDATE_INPUT_TITLE;
                    // --- ADD 2008/12/18 ---------------------------------------------------------------------<<<<<

                    // 2010/07/14 Add >>>
                    //if (_stockSlipFlg)
                    //    enableButton();
                    // 2010/07/14 Add <<<
                }
                else
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, CT_PGID, msg, status, MessageBoxButtons.OK);
                }

            }
            finally
            {
                // カーソルを元に戻す
                this.Cursor = _localCursor;
            }

            return status;
        }
        // --- ADD 2008/09/02 --------------------------------<<<<<

		/// <summary>
		/// 変更有無チェック保存確認処理 
		/// </summary>
		/// <param name="messageMode">メッセージ表示モード[0:保存確認,1:破棄確認,2:初期状態に戻すか確認]</param>
		/// <returns>DialogResult[]</returns>
		/// <remarks>
		/// <br>Note       : データの変更有無をチェックし、確認ダイアログを表示します。</br>
		/// <br>Programmer : 18012 Y.Sasaki</br>
		/// <br>Date       : 2007.1.16</br>
        /// <br>Update Note: 2012/12/01 zhangy3　</br>
        /// <br>           : 2013/01/16配信分 Redmine#33231 商品在庫マスタ</br>
		/// </remarks>
		private DialogResult SaveCheckEditDat(int messageMode)
		{
			DialogResult dr = DialogResult.Ignore;

			// 編集有無チェック
			bool isConfirmDialog = false;

			bool isCompare = true;
			Dictionary<string, string> drDiffer = new Dictionary<string, string>();

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/17 ADD
            // 変更比較前の調整
            RemoveEmptyPriceRow( this._editGoodsUnitData );
            RemoveEmptyPriceRow( this.__goodsUnitData );
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/17 ADD
            // 比較処理
            isCompare = this._editGoodsUnitData.Equals( __goodsUnitData );
            isCompare = this._editGoodsUnitData.SupplierCd == __goodsUnitData.SupplierCd;// Add 2012/12/01 zhangy3 for Redmine#33231

			// 値の違うメンバを格納
			if (!isCompare)
			{
				System.Collections.ArrayList ret1 = this._editGoodsUnitData.Compare(__goodsUnitData);
				for (int i1 = 0; i1 < ret1.Count; i1++)
				{
					drDiffer.Add(ret1[i1].ToString(), ret1[i1].ToString());
				}
			}

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
            //if ( drDiffer.Count > 0 )
            //{
            //    // 企業コードは対象外
            //    if ( drDiffer.Count == 1 && drDiffer.ContainsKey( "EnterpriseCode" ) )
            //    {
            //        isConfirmDialog = false;
            //    }
            //    else
            //    {
            //        isConfirmDialog = true;
            //    }
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD

            //-----------------------------------------------------
            // 商品情報
            //-----------------------------------------------------
            // 企業コードと自社分類名は除外する
            int differCount = drDiffer.Count;
            if ( drDiffer.ContainsKey( "EnterpriseCode" ) ) differCount--;
            if ( drDiffer.ContainsKey( "EnterpriseGanreName" ) ) differCount--;
            // ADD 2010/01/07 MANTIS対応[14859]：品名が未入力の場合、BLコードマスタのBLコード名を設定 ---------->>>>>
            // MEMO:拠点コードも除外　∵__goodsUnitDataには拠点コードが設定されず、必ず不一致と判定されるので
            if (drDiffer.ContainsKey("SectionCode")) differCount--;
            // ADD 2010/01/07 MANTIS対応[14859]：品名が未入力の場合、BLコードマスタのBLコード名を設定 ----------<<<<<
            // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの仕入先を表示 ---------->>>>>
            // MEMO:以下の項目は商品管理情報マスタのものであるため除外する
            //if (drDiffer.ContainsKey("SupplierCd")) differCount--;//Del 2012/12/01 zhangy3 for Redmine#33231 
            if (drDiffer.ContainsKey("SupplierSnm"))differCount--;
            if (drDiffer.ContainsKey("SupplierLot"))differCount--;
            // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの仕入先を表示 ----------<<<<<

            //-----------------------------------------------------
            // 在庫登録済み倉庫テーブル
            //-----------------------------------------------------
            if (_updateStockWarehouseTable) differCount++;    // FIXME:初期値が設定されると、必ずカウントされる→要対応？

            isConfirmDialog = (differCount > 0);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

			// 編集有無チェック
			if (isConfirmDialog)
			{
				string msg = "現在、編集中のデータが存在します\n\n" + "登録してもよろしいですか？";
				MessageBoxButtons buttons = MessageBoxButtons.YesNoCancel;

				switch (messageMode)
				{
					case 0:
						{
							// 保存確認
							break;
						}
					case 1:
						{
							// 破棄確認
							msg = "現在、編集中のデータが存在します\n\n" + "破棄してもよろしいですか？";
							buttons = MessageBoxButtons.YesNo;
							break;
						}
					case 2:
						{
							// 初期状態に戻すか確認
							msg = "現在、編集中のデータが存在します\n\n" + "初期状態に戻しますか？";
							buttons = MessageBoxButtons.YesNo;
							break;
						}
					default:
						break;
				}

				dr = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION, CT_PGID, msg, 0, buttons);
			}

			return dr;
		}

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/17 ADD
        /// <summary>
        /// 空価格レコード削除処理
        /// </summary>
        /// <param name="_editGoodsUnitData"></param>
        /// <remarks>編集比較チェック前に空行を削除します</remarks>
        private void RemoveEmptyPriceRow( GoodsUnitData _editGoodsUnitData )
        {
            if ( _editGoodsUnitData == null ) return;
            if ( _editGoodsUnitData.GoodsPriceList == null ) return;

            List<GoodsPrice> deletePriceList = new List<GoodsPrice>();

            // 削除対象の洗い出し
            foreach ( GoodsPrice price in _editGoodsUnitData.GoodsPriceList )
            {
                if ( price.PriceStartDate == DateTime.MinValue )
                {
                    deletePriceList.Add( price );
                }
            }

            // 削除
            foreach ( GoodsPrice price in deletePriceList )
            {
                _editGoodsUnitData.GoodsPriceList.Remove( price );
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/17 ADD
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        /// <summary>
        /// 変更有無チェック保存確認処理 （在庫用）
        /// </summary>
        /// <param name="messageMode">メッセージ表示モード[0:保存確認,1:破棄確認,2:初期状態に戻すか確認]</param>
        /// <param name="existsUpdatingData">更新する在庫データが存在するかのフラグ</param>
        /// <returns>DialogResult[]</returns>
        private DialogResult SaveCheckEditDatOfStock( int messageMode )
        {
            DialogResult dr = DialogResult.Ignore;

            // 編集有無チェック
            bool isConfirmDialog = false;

            bool isCompare = true;
            Dictionary<string, string> drDiffer = new Dictionary<string, string>();

            // 比較処理
            isCompare = this._editStock.Equals( __stock );

            // 値の違うメンバを格納
            if ( !isCompare )
            {
                System.Collections.ArrayList ret1 = this._editStock.Compare( __stock );
                for ( int i1 = 0; i1 < ret1.Count; i1++ )
                {
                    drDiffer.Add( ret1[i1].ToString(), ret1[i1].ToString() );
                }
            }

            if ( drDiffer.Count > 0 )
            {
                // 企業コードと倉庫コードは無視して、他の項目に変更があるかをチェックする
                int differCount = drDiffer.Count;
                if ( drDiffer.ContainsKey( "EnterpriseCode" ) ) differCount--;
                if ( drDiffer.ContainsKey( "WarehouseCode" ) ) differCount--;
                if ( drDiffer.ContainsKey( "GoodsNoNoneHyphen" ) ) differCount--;
                if ( drDiffer.ContainsKey( "UpdateDate" ) ) differCount--;

                isConfirmDialog = (differCount > 0);
            }

            // 編集有無チェック
            if ( isConfirmDialog )
            {
                string msg = "現在、編集中のデータが存在します\n\n" + "登録してもよろしいですか？";
                MessageBoxButtons buttons = MessageBoxButtons.YesNoCancel;

                switch ( messageMode )
                {
                    case 0:
                        {
                            // 保存確認
                            break;
                        }
                    case 1:
                        {
                            // 破棄確認
                            msg = "現在、編集中のデータが存在します\n\n" + "破棄してもよろしいですか？";
                            buttons = MessageBoxButtons.YesNo;
                            break;
                        }
                    case 2:
                        {
                            // 初期状態に戻すか確認
                            msg = "現在、編集中のデータが存在します\n\n" + "初期状態に戻しますか？";
                            buttons = MessageBoxButtons.YesNo;
                            break;
                        }
                    default:
                        break;
                }

                dr = TMsgDisp.Show( emErrorLevel.ERR_LEVEL_QUESTION, CT_PGID, msg, 0, buttons );
            }

            return dr;
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

		/// <summary>
		/// 文字列→数値（Int32）変換処理（Object型が対象）
		/// </summary>
		/// <param name="obj">変換対象Object</param>
		/// <param name="defaultNo">初期値</param>
		/// <returns>int</returns>
		private int StrToIntDefOfValue(object obj, int defaultNo)
		{
			try
			{
				return (int)obj;
			}
			catch
			{
				return defaultNo;
			}
		}

        /// <summary>
        /// グリッド最上位行キーダウンイベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータクラス</param>
        private void GoodsPriceInput_GridKeyDownTopRow(object sender, EventArgs e)
        {
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 DEL
            //this.TaxationCode_tComboEditor.Focus();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 ADD
            GoodsSpecialNote_tEdit.Focus();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 ADD
            ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09
        }

        /// <summary>
        /// グリッド最下層行キーダウンイベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータクラス</param>
        private void GoodsPriceInput_GridKeyDownButtomRow(object sender, EventArgs e)
        {
        }
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        /// <summary>
        /// グリッド最上位行キーダウンイベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータクラス</param>
        private void UnitSalesPriceInput_GridKeyDownTopRow( object sender, EventArgs e )
        {
            this.GoodsSpecialNote_tEdit.Focus();
            ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09
        }

        /// <summary>
        /// グリッド最下層行キーダウンイベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータクラス</param>
        private void UnitSalesPriceInput_GridKeyDownButtomRow( object sender, EventArgs e )
        {
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

        // ADD 2010/03/15 MANTIS対応[15119]：価格開始日の判断を修正 ---------->>>>>
        /// <summary>
        /// 指定された日時に合う価格情報レコードを取得します。
        /// </summary>
        /// <param name="dateTime">日時</param>
        /// <returns>
        /// 価格開始日≦指定日時のレコードのうち、最近のものを返します。
        /// （指定日時より未来のレコードは無視されます）
        /// </returns>
        private GoodsInputDataSet.GoodsPriceRow GetGoodsPriceRowByPriceStartDate(DateTime dateTime)
        {
            // 価格情報グリッドの最大行数　※保存、起動のタイミングで開始日付の昇順にソートされる
            const int MAX_ROW_COUNT = 3;

            // 価格開始日で価格情報レコードをソート（降順）
            SortedList<DateTime, GoodsInputDataSet.GoodsPriceRow> sortedGoodsPriceRowList = new SortedList<DateTime, GoodsInputDataSet.GoodsPriceRow>();
            for (int i = 1; i <= MAX_ROW_COUNT; i++)
            {
                DateTime key = this._goodsAcs.GetGoodsPriceRowFromGoodsPriceDataTable(i).PriceStartDate;
                if (key.Equals(DateTime.MinValue))
                {
                    key = key.AddMilliseconds((double)(MAX_ROW_COUNT - i));
                }
                sortedGoodsPriceRowList.Add(
                    key,
                    this._goodsAcs.GetGoodsPriceRowFromGoodsPriceDataTable(i)
                );
            }
            // 価格開始日≦指定日時のレコードのうち、最近のものを返す
            for (int i = MAX_ROW_COUNT - 1; i >= 0; i--)
            {
                DateTime key = sortedGoodsPriceRowList.Keys[i];
                if (sortedGoodsPriceRowList[key].PriceStartDate <= dateTime)
                {
                    return sortedGoodsPriceRowList[key];
                }
            }
            return null;    // 価格開始日が未来のレコードしかない場合
        }
        // ADD 2010/03/15 MANTIS対応[15119]：価格開始日の判断を修正 ----------<<<<<

        /// <summary>
        /// FIXME:価格情報設定イベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="rowNo">上段より1～3</param>
        private void GoodsPriceInput_CalcUnitPrice(object sender, int rowNo)
        {
            GoodsInputDataSet.GoodsPriceRow goodsPriceRow = this._goodsAcs.GetGoodsPriceRowFromGoodsPriceDataTable(rowNo);

            // ADD 2010/03/15 MANTIS対応[15119]：価格開始日の判断を修正 ---------->>>>>
            // 価格開始日≦本日である価格情報のうち、最近のものを用いて価格情報を計算
            GoodsInputDataSet.GoodsPriceRow latestGoodsPriceRow = GetGoodsPriceRowByPriceStartDate(DateTime.Today);
            if (latestGoodsPriceRow != null)
            {
                goodsPriceRow = latestGoodsPriceRow;
            }
            else
            {
                // 価格開始日が全て未来の場合、計算結なし（表示を全てクリア）
                this.CalcStockRate_tNedit.Clear();      // 計算原価率
                this.CalcSalesUnitCost_tNedit.Clear();  // 計算原価額
                this.CalcMaster_tEdit.Clear();          // 算出マスタ
                this.PriorityOrder_tNedit.Clear();      // 優先順位
                return;
            }
            // ADD 2010/03/15 MANTIS対応[15119]：価格開始日の判断を修正 ----------<<<<<

            if (goodsPriceRow != null)
            {
                // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>
                // 価格情報を再計算するので初期化
                goodsPriceRow.CalcStockRate = 0.0;          // 計算原価率
                goodsPriceRow.CalcSalesUnitCost = 0.0;      // 計算原価額
                goodsPriceRow.CalcMaster = string.Empty;    // 算出マスタ
                goodsPriceRow.PriorityOrder = 0;            // 優先順位
                // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ----------<<<<<
                // ADD 2009/12/16 MANTIS対応[14597]：新規登録時も掛率マスタの情報を表示 ---------->>>>>
                // 価格情報を再計算
                UpdateEditingGoodsUnitDataFromScreen();
                goodsPriceRow.StockUnPrcFrcProcCd = this._editGoodsUnitData.StockUnPrcFrcProcCd;    // 仕入単価端数処理コード

                this._goodsAcs.CalclateUnitPrice(goodsPriceRow, this._editGoodsUnitData);   // 単価算出
                this._goodsAcs.SettingCalcMaster(goodsPriceRow);                            // 算出マスタ
                this._goodsAcs.SettingCalcStockRate(goodsPriceRow);                         // 算出用原価率
                this._goodsAcs.SettingCalcSalesUnitCost(goodsPriceRow);                     // 算出用原価単価
                // ADD 2009/12/16 MANTIS対応[14597]：新規登録時も掛率マスタの情報を表示 ----------<<<<<
                // DEL 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>
                //this.CalcStockRate_tNedit.SetValue(goodsPriceRow.CalcStockRate);
                //this.CalcSalesUnitCost_tNedit.SetValue(goodsPriceRow.CalcSalesUnitCost);
                //this.CalcMaster_tEdit.Text = goodsPriceRow.CalcMaster;
                //this.PriorityOrder_tNedit.SetInt(goodsPriceRow.PriorityOrder);
                // DEL 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ----------<<<<<
                // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>
                // 価格情報を再設定
                if (!goodsPriceRow.PriceStartDate.Equals(DateTime.MinValue))
                {
                    this.CalcStockRate_tNedit.SetValue(goodsPriceRow.CalcStockRate);            // 計算原価率
                    this.CalcSalesUnitCost_tNedit.SetValue(goodsPriceRow.CalcSalesUnitCost);    // 計算原価額
                    this.CalcMaster_tEdit.Text = goodsPriceRow.CalcMaster;                      // 算出マスタ
                    this.PriorityOrder_tNedit.SetInt(goodsPriceRow.PriorityOrder);              // 優先順位
                    return;
                }
                // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ----------<<<<<
            }
            // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>
            // グリッド行が不定または有効な価格情報がない場合、掛率情報の表示をクリア
            ClearRateInfoOnPriceInputTab();
            // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>
        }

        // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>
        /// <summary>
        /// 編集中の商品連結データを画面より更新します。
        /// </summary>
        private void UpdateEditingGoodsUnitDataFromScreen()
        {
            this._editGoodsUnitData = this._editGoodsUnitData ?? new GoodsUnitData();
            List<Rate> rateList = new List<Rate>();
            SetGoodsUnitDataFromScreen(ref this._editGoodsUnitData, ref rateList, false);
        }

        /// <summary>
        /// 価格情報タブの掛率情報をクリアします。
        /// </summary>
        private void ClearRateInfoOnPriceInputTab()
        {
            this.CalcStockRate_tNedit.SetValue(0.0);        // 計算原価率
            this.CalcSalesUnitCost_tNedit.SetValue(0.0);    // 計算原価額
            this.CalcMaster_tEdit.Text = string.Empty;      // 算出マスタ
            this.PriorityOrder_tNedit.SetInt(0);            // 優先順位
        }
        // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>

        // ADD 2009/12/16 MANTIS対応[14597]：新規登録時も掛率マスタの情報を表示 ---------->>>>>
        /// <summary>
        /// 新規品番であるか判断します。
        /// </summary>
        /// <returns>フォームの入力モードラベルが"新規"の場合、<c>true</c>を返します。</returns>
        private bool IsNewGoodsNo()
        {
            return this.uLabel_InputModeTitle.Text.Equals(NEW_INPUT_TITLE);
        }

        /// <summary>
        /// 価格情報タブを更新します。
        /// </summary>
        private void UpdatePriceInputTab()
        {
            int rowNo = this._goodsPriceInput.GetActiveRowRowNo();
            GoodsPriceInput_CalcUnitPrice(this, rowNo);
        }
        // ADD 2009/12/16 MANTIS対応[14597]：新規登録時も掛率マスタの情報を表示 ----------<<<<<

		#endregion

		// ===============================================================================
		// コントロールイベント
		// ===============================================================================
		#region Control Event
		
		/// <summary>
		/// 画面表示イベント
		/// </summary>
		/// <param name="sender">イベントソース</param>
		/// <param name="e">イベントデータ</param>
        /// <remarks>
        /// <br>Update Note: 2012/12/01 zhangy3</br>
        /// <br>           : 2013/01/16配信分 Redmine#33231 商品在庫マスタ</br>
        /// <br>Update Note: K2013/05/13 王君</br>
        /// <br>管理番号   : 10901273-00 2013/06/18配信分</br>
        /// <br>             Redmine#35663 商品在庫マスタ・山形部品様個別組み込み</br>
        /// </remarks>
		private void MAKHN09280UA_Load(object sender, EventArgs e)
		{
			try
			{
				if (!this._initializing)
				{
                    // 画面スキン変更
                    this._controlScreenSkin.LoadSkin();
                    this._controlScreenSkin.SettingScreenSkin( this );

					// 画面初期設定
					this.InitialScreenSetting();
                }

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/03 DEL
                //// 編集用データ → 画面
                //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                ////this.SetScreenFromGoodsUnitData(this._editGoodsUnitData);
                //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                //this.SetScreenFromGoodsUnitData( this._editGoodsUnitData, __rateList );
                //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/03 DEL


                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                //// 初期フォーカス
                //if (this._editGoodsUnitData.CreateDateTime == DateTime.MinValue)
                //{
                //    // 新規
                //    this.tNedit_GoodsMakerCd.Focus();
                //}
                //else
                //{
                //    // 更新
                //    this.tEdit_GoodsName.Focus();
                //}
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL

				// スキャナ部品のロード
				string msg = string.Empty;

				int status = this._OLEScannerController.LoadOleControl(ref msg);
				if (status == 0)
				{
					this._OLEScannerController.DataEvent += new DataEventHandler(this.OLEScanner_DataEvent);

					// オープン実行
					status = this._OLEScannerController.Open(ref msg);

					if (status == 0)
					{
						status = this._OLEScannerController.ClaimDevice(0, ref msg);
						this._OLEScannerController.DeviceEnabled = true;
						this._OLEScannerController.DataEventEnabled = true;
						this._OLEScannerController.DecodeData = true;
					}
				}

                // 価格情報画面
                this._goodsPriceInput.GoodsUnitData = this._editGoodsUnitData;
                this.Footer_Pnl.Controls.Add(this._goodsPriceInput);
                this._goodsPriceInput.Dock = DockStyle.Fill;

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                // 単品売価情報画面
                this._unitSalesPriceInput.GoodsUnitData = this._editGoodsUnitData;
                this.Rate_Panel.Controls.Add( this._unitSalesPriceInput );
                this._unitSalesPriceInput.Dock = DockStyle.Fill;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                // 在庫情報画面

                // 在庫操作ボタン＝許可しない
                ultraTabControl1.Tabs[0].Selected = true; 
                SettingStockOperateButtonsEnabled();

                // 削除済み表示＝しない
                DeleteIndication_CheckEditor.Checked = false;
                SettingLogicalDeleteStockVisible( DeleteIndication_CheckEditor.Checked );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/03 ADD
                // ロード処理実行
                _goodsPriceInput.Loading();
                _unitSalesPriceInput.Loading();

                // 編集データ表示
                this.SetScreenFromGoodsUnitData( this._editGoodsUnitData, __rateList );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/03 ADD

                // ADD 2009/11/16 3次分対応 在庫仕入入力に在庫登録機能を追加に伴う在庫情報の初期値指定型ShowDialog()の追加 ---------->>>>>
                // 在庫情報タブの項目をロード
                LoadStockTabItem();
                // ADD 2009/11/16 3次分対応 在庫仕入入力に在庫登録機能を追加に伴う在庫情報の初期値指定型ShowDialog()の追加 ----------<<<<<
                // Add Start 2012/12/01 zhangy3 for Redmine#33231 ----- >>>
                this.tNedit_PayeeCode.Clear();
                this.tEdit_PayeeName.Clear();
                this.tEdit_PayeePattern.Clear();
                // Add End   2012/12/01 zhangy3 for Redmine#33231 ----- <<<
                // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの仕入先を表示 ---------->>>>>
                // UNDONE:商品管理情報マスタの仕入先を表示
                SetGoodsMngSupplier(this._editGoodsUnitData);
                // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの仕入先を表示 ----------<<<<<
                //----- ADD K2013/05/13 王君 Redmine#35663 ----->>>>>
                if (this._opt_YamagataCtrl == (int)Option.ON)
                {
                    // ｵﾌﾟｼｮﾝｺｰﾄﾞ:OPT-CPM0010の場合、セキュリティ設定を参照し、仕入在庫数を編集可能・不可とする。
                    if (this._stcChangeEnable == false)
                    {
                        this.tNedit_SupplierStock.Enabled = false;
                        this.tNedit_SupplierStock.Appearance.BackColor = BACKCOLOR_DISABLE;
                        this.tNedit_SupplierStock.Appearance.BackColorDisabled = BACKCOLOR_DISABLE;
                    }
                }
                //----- ADD K2013/05/13 王君 Redmine#35663 -----<<<<<
            }
			catch (Exception)
			{
			}
			finally
			{
				this._initializing = true;
			}
		}

        // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの仕入先を表示 ---------->>>>>
        /// <summary>
        /// 商品管理情報マスタの仕入先を設定します。
        /// </summary>
        /// <param name="goodsUnitData">編集中の商品連結データ</param>
        /// <br>Update Note: 2012/12/01 zhangy3</br>
        /// <br>           : 2013/01/16配信分 Redmine#33231 商品在庫マスタ</br>
        private void SetGoodsMngSupplier(GoodsUnitData goodsUnitData)
        {
            this.lblPayee.Visible           = true;
            this.tNedit_PayeeCode.Visible   = true;
            this.tEdit_PayeeName.Visible    = true;
            this.tEdit_PayeePattern.Visible = true;

            if (goodsUnitData == null || IsNewMode())   // 新規モードは未設定
            {
               /* Del Start 2012/12/01 zhangy3 for Redmine#33231 ----- >>>
                this.tNedit_PayeeCode.Clear();
                this.tEdit_PayeeName.Clear();
                this.tEdit_PayeePattern.Clear();
               * Del End   2012/12/01 zhangy3 for Redmine#33231 ----- <<<*/
                // Add Start 2012/12/01 zhangy3 for Redmine#33231 ----- >>>
                if (string.IsNullOrEmpty(tNedit_PayeeCode.Text))
                {
                    this.tNedit_PayeeCode.Clear();
                    this.tEdit_PayeeName.Clear();
                    this.tEdit_PayeePattern.Clear();
                }
                // Add End   2012/12/01 zhangy3 for Redmine#33231 ----- <<<
                return;
            }

            // ↓全社設定("00")が設定されてくる(ログイン拠点と一致しない）。何か意味があるかもしれないので、保持しておく
            string originalSectionCode = goodsUnitData.SectionCode;
            goodsUnitData.SectionCode = _goodsAcs.LoginSectionCode; // ログイン拠点を設定
            GoodsAcs.GoodsMngSettingPattern foundGoodsMngPattern = _goodsAcs.SetGoodsMngInfoTo(goodsUnitData);
            goodsUnitData.SectionCode = originalSectionCode;        // 元に戻す
            curFoundGoodsMngPattern = foundGoodsMngPattern;//Add 2012/12/01 zhangy3 for Redmine#33231

            if (!foundGoodsMngPattern.Equals(GoodsAcs.GoodsMngSettingPattern.None))
            {
                this.tNedit_PayeeCode.DataText  = goodsUnitData.SupplierCd.ToString("d6");
                this.tEdit_PayeeName.DataText   = goodsUnitData.SupplierSnm;
                this.tEdit_PayeePattern.DataText= GetGoodsMngSettingPatternName(foundGoodsMngPattern);
            }
            else
            {
                /* Del Start 2012/12/01 zhangy3 for Redmine#33231 ----- >>>
                this.tNedit_PayeeCode.Clear();
                this.tEdit_PayeeName.Clear();
                this.tEdit_PayeePattern.Clear();
                * Del End   2012/12/01 zhangy3 for Redmine#33231 ----- <<<*/
                // Add Start 2012/12/01 zhangy3 for Redmine#33231 ----- >>>
                if (string.IsNullOrEmpty(tNedit_PayeeCode.Text) || uLabel_InputModeTitle.Text == DELETE_INPUT_TITLE)
                {
                   this.tNedit_PayeeCode.Clear();
                   this.tEdit_PayeeName.Clear();
                   this.tEdit_PayeePattern.Clear();
                }
                // Add End   2012/12/01 zhangy3 for Redmine#33231 ----- <<<
            }
        }

        /// <summary>
        /// 商品管理情報マスタの設定パターン名称を取得します。
        /// </summary>
        /// <param name="goodsMngSettingPattern">商品管理情報マスタの設定パターン</param>
        /// <returns>
        /// 拠点（ログイン拠点）＋メーカー＋品番        →拠点＋メーカー＋品番<br/>
        /// 拠点（全社設定）＋メーカー＋品番            →全社＋メーカー＋品番<br/>
        /// 拠点（ログイン拠点）＋メーカー＋中分類＋ＢＬ→拠点＋メーカー＋ＢＬ<br/>
        /// 拠点（全社設定）＋メーカー＋中分類＋ＢＬ    →全社＋メーカー＋ＢＬ<br/>
        /// 拠点（ログイン拠点）＋メーカー＋中分類	    →拠点＋メーカー＋中分類<br/>
        /// 拠点（全社設定）＋メーカー＋中分類	        →全社＋メーカー＋中分類<br/>
        /// 拠点（ログイン拠点）＋メーカー	            →拠点＋メーカー<br/>
        /// 拠点（全社設定）＋メーカー                  →全社＋メーカー
        /// </returns>
        private static string GetGoodsMngSettingPatternName(GoodsAcs.GoodsMngSettingPattern goodsMngSettingPattern)
        {
            switch (goodsMngSettingPattern)
            {
                case GoodsAcs.GoodsMngSettingPattern.Section_Maker_GoodsNo:
                    return "拠点＋メーカー＋品番";
                case GoodsAcs.GoodsMngSettingPattern.AllSection_Maker_GoodsNo:
                    return "全社＋メーカー＋品番";
                case GoodsAcs.GoodsMngSettingPattern.Section_Maker_MGroup_BL:
                    return "拠点＋メーカー＋ＢＬ";
                case GoodsAcs.GoodsMngSettingPattern.AllSection_Maker_MGroup_BL:
                    return "全社＋メーカー＋ＢＬ";
                case GoodsAcs.GoodsMngSettingPattern.Section_Maker_MGroup:
                    return "拠点＋メーカー＋中分類";
                case GoodsAcs.GoodsMngSettingPattern.AllSection_Maker_MGroup:
                    return "全社＋メーカー＋中分類";
                case GoodsAcs.GoodsMngSettingPattern.Section_Maker:
                    return "拠点＋メーカー";
                case GoodsAcs.GoodsMngSettingPattern.AllSection_Maker:
                    return "全社＋メーカー";
                default:
                    return string.Empty;
            }
        }

        /// <summary>
        /// 新規モードであるか判断します。
        /// </summary>
        /// <returns>モードの表示ラベルが"新規"の場合、新規モードと判断します。</returns>
        private bool IsNewMode()
        {
            return this.uLabel_InputModeTitle.Text.Equals(NEW_INPUT_TITLE);
        }
        // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの仕入先を表示 ----------<<<<<

        /// <summary>
        /// フォーム初期表示イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <br>Update Note: 2015/09/10 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
        private void MAKHN09280UA_Shown( object sender, EventArgs e )
        {
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
            // 初期フォーカス
            if ( this._editGoodsUnitData.CreateDateTime == DateTime.MinValue )
            {
                // 新規

                // 2008.12.12 30413 犬飼 画面初期化処理を追加 >>>>>>START
                this.ClearScreen(); // MEMO:Shownイベントでも画面クリア
                // 2008.12.12 30413 犬飼 画面初期化処理を追加 <<<<<<END

                // --- ADD 黄興貴 2015/09/10 Redmine#47026 --------------->>>>>
                // TBOから呼出すと、商品はＤＢから取得ではなく、画面に表示しない。
                // 掛率があれば、再検索する。
                string msg = string.Empty;
                if (!string.IsNullOrEmpty(this.__goodsUnitData.GoodsNo)
                    && this.__goodsUnitData.GoodsMakerCd != 0)
                {
                    __rateList = RateHelper.SearchAll(this.__goodsUnitData, out msg);
                }
                else
                {
                    __rateList = new List<Rate>();
                }
                _unitSalesPriceInput.SetRateList(__rateList);
                // --- ADD 黄興貴 2015/09/10 Redmine#47026 ---------------<<<<<

                // --- CHG 2009/02/05 障害ID:11019対応------------------------------------------------------>>>>>
                //this.tNedit_GoodsMakerCd.Focus();
                this.tEdit_GoodsNo.Focus();
                // --- CHG 2009/02/05 障害ID:11019対応------------------------------------------------------<<<<<
                ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09

                // 2008.11.18 add >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                // 価格情報
                // --- UPD m.suzuki 2010/11/25 ---------->>>>>
                //this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateYearColumn.ColumnName].Value = DateTime.Now.Year;
                //this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateMonthColumn.ColumnName].Value = DateTime.Now.Month;
                //this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateDayColumn.ColumnName].Value = DateTime.Now.Day;
                DateTime priceStartDate = GetPriceStartDate();
                this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateYearColumn.ColumnName].Value = priceStartDate.Year;
                this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateMonthColumn.ColumnName].Value = priceStartDate.Month;
                this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateDayColumn.ColumnName].Value = priceStartDate.Day;
                // --- UPD m.suzuki 2010/11/25 ----------<<<<<
                this._goodsPriceInput.ReturnKeyDown();
                // 2008.11.18 add <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            }
            else
            {
                // 更新
                if (!ShownFirstStockTabItemIf())    // ADD 2009/11/16 3次分対応 在庫仕入入力に在庫登録機能を追加に伴う在庫情報の初期値指定型ShowDialog()の追加
                {
                    this.tEdit_GoodsName.Focus();
                    ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09
                }
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
        }

		/// <summary>
		/// 商品属性ボタンクリックイベント
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void GoodsKind_Button_Click(object sender, EventArgs e)
		{
			//this.Genereral_Button.Appearance.ForeColor = Color.Black;
			//this.Mobile_Button.Appearance.ForeColor = Color.Black;
			//this.Service_Button.Appearance.ForeColor = Color.Black;

			//this.Genereral_Button.Appearance.FontData.SizeInPoints = 15.75F;
			//this.Mobile_Button.Appearance.FontData.SizeInPoints = 15.75F;
			//this.Service_Button.Appearance.FontData.SizeInPoints = 15.75F;

			//this.Genereral_Button.Appearance.FontData.Bold = Infragistics.Win.DefaultableBoolean.False;
			//this.Mobile_Button.Appearance.FontData.Bold = Infragistics.Win.DefaultableBoolean.False;
			//this.Service_Button.Appearance.FontData.Bold = Infragistics.Win.DefaultableBoolean.False;


			//if (((Infragistics.Win.Misc.UltraButton)sender).Appearance.ForeColor == Color.Blue)
			//{
			//  ((Infragistics.Win.Misc.UltraButton)sender).Appearance.ForeColor = Color.Black;
			//  ((Infragistics.Win.Misc.UltraButton)sender).Appearance.FontData.SizeInPoints = 15.75F;
			//  ((Infragistics.Win.Misc.UltraButton)sender).Appearance.FontData.Bold = Infragistics.Win.DefaultableBoolean.False;
			//}
			//else
			//{
			//  ((Infragistics.Win.Misc.UltraButton)sender).Appearance.ForeColor = Color.Blue;
			//  ((Infragistics.Win.Misc.UltraButton)sender).Appearance.FontData.SizeInPoints = 21.75F;
			//  ((Infragistics.Win.Misc.UltraButton)sender).Appearance.FontData.Bold = Infragistics.Win.DefaultableBoolean.True;
			//}
		}

		/// <summary>
		/// ツールバークリックイベント
		/// </summary>
		/// <param name="sender">イベントソース</param>
		/// <param name="e">イベントデータ</param>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>             改良対応</br>
        /// <br>             在庫マスタに、出力メッセージを修正する。</br>
        /// <br>Update Note: 2010/06/17 楊明俊 #9744</br>
        /// <br>Update Note: 2011/08/02 caohh　</br>
        /// <br>           : NSユーザー改良要望一覧連番265の対応</br>
        /// <br>Update Note: 2012/12/01 zhangy3　</br>
        /// <br>           : 2013/01/16配信分 Redmine#33231 商品在庫マスタ</br>
        /// <br>Update Note: 2015/09/22 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
		private void Main_tToolbarsManager_ToolClick(object sender, Infragistics.Win.UltraWinToolbars.ToolClickEventArgs e)
		{
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/12/01 ADD
            this.uiSetControl1.SettingAllControlsZeroPaddedText();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/12/01 ADD

			switch (e.Tool.Key)
			{
				// -------------------------------------------------------------------------------
				// 終了
				// -------------------------------------------------------------------------------
				case TOOLBAR_CLOSEBUTTON_KEY:
					{
						this.Close();
						break;
					}
				// -------------------------------------------------------------------------------
				// 保存
				// -------------------------------------------------------------------------------
				case TOOLBAR_SAVEBUTTON_KEY:
					{
                        // ADD 2014/08/08 譚洪 --- >>>
                        // 保存処理中、再保存処理不可
                        // _isSaveFlgがTrueの場合、保存不可。_isSaveFlgがFalseの場合、保存可
                        if (this._isSaveFlg)
                        {
                            return;
                        }
                        this._isSaveFlg = true;
                        // ADD 2014/08/08 譚洪 --- <<<


                        try  // ADD 2014/08/08 譚洪 
                        {
                            // 入力内容をチェックする
                            if (this.CheckInputScreen() != (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                                return;

                            // 保存処理
                            // --- DEL 2010/06/17 ---------->>>>>
                            // --- UPD 2010/06/08 ---------->>>>>
                            //this.SaveData(true, true, true);
                            //int status = this.SaveData(true, true, true);
                            // --- UPD 2010/06/08 ----------<<<<<
                            this.SaveData(true, true, true);
                            // --- DEL 2010/06/17 ----------<<<<<

                            // ADD 2009/11/16 3次分対応 在庫仕入入力に在庫登録機能を追加に伴う在庫情報の初期値指定型ShowDialog()の追加 ---------->>>>>
                            if (IsClosingAfterSave)
                            {
                                // --- UPD 2010/06/17 ---------->>>>>
                                // --- ADD 2010/06/08 ---------->>>>>
                                //if (status == 0) this.Close();
                                // --- ADD 2010/06/08 ----------<<<<<

                                this.FormClosing -= MAKHN09280UA_FormClosing;
                                this.Close();
                                this.FormClosing += MAKHN09280UA_FormClosing;
                                // --- UPD 2010/06/17 ---------->>>>>
                            }
                            // ADD 2009/11/16 3次分対応 在庫仕入入力に在庫登録機能を追加に伴う在庫情報の初期値指定型ShowDialog()の追加 ----------<<<<<

                        // ADD 2014/08/08 譚洪 --- >>>
                        }
                        finally
                        {
                            // 保存処理後、価格のグッリドのACTIVEメッソドを発生不可。
                            this._goodsPriceInput.uGrid_GoodsPriceInfo.ActiveRow = null;
                            // 保存処理完了。
                            this._isSaveFlg = false;
                        }
                        // ADD 2014/08/08 譚洪 --- <<<

                        break;
					}
				// -------------------------------------------------------------------------------
				// 新規
				// -------------------------------------------------------------------------------
				case TOOLBAR_NEWBUTTON_KEY:
					{
						// 編集内容を編集用バッファに設定する
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                        //this.SetGoodsUnitDataFromScreen(ref this._editGoodsUnitData);
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                        //this.SetGoodsUnitDataFromScreen(ref this._editGoodsUnitData, ref __rateList); // DEL 2008/12/27
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
                        // --- ADD 2008/12/27 -------------------------------->>>>>
                        this.SetGoodsUnitDataFromScreen(ref this._editGoodsUnitData, ref __rateList, true);
                        // --- ADD 2008/12/27 --------------------------------<<<<<
						// 破棄確認
						DialogResult dr = this.SaveCheckEditDat(1);
						switch (dr)
						{
							case DialogResult.No:
								return;
							case DialogResult.Yes:
							case DialogResult.Ignore:
								break;
							default:
								return;
						}

						// 画面を初期化する
						this.ClearScreen();
                        // 2008.11.18 add >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                        // 価格情報
                        // --- UPD m.suzuki 2010/11/25 ---------->>>>>
                        //this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateYearColumn.ColumnName].Value = DateTime.Now.Year;
                        //this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateMonthColumn.ColumnName].Value = DateTime.Now.Month;
                        //this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateDayColumn.ColumnName].Value = DateTime.Now.Day;
                        DateTime priceStartDate = GetPriceStartDate();
                        this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateYearColumn.ColumnName].Value = priceStartDate.Year;
                        this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateMonthColumn.ColumnName].Value = priceStartDate.Month;
                        this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateDayColumn.ColumnName].Value = priceStartDate.Day;
                        // --- UPD m.suzuki 2010/11/25 ----------<<<<<
                        this._goodsPriceInput.ReturnKeyDown();
                        // 2008.11.18 add <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

						// Undo用バッファにコピーする
						this.__goodsUnitData = this._editGoodsUnitData.Clone();

                        // --- CHG 2009/02/05 障害ID:11019対応------------------------------------------------------>>>>>
                        //// メーカーへフォーカス移動
                        //this.tNedit_GoodsMakerCd.Focus();
                        // 品番へフォーカス移動
                        this.tEdit_GoodsNo.Focus();
                        // --- CHG 2009/02/05 障害ID:11019対応------------------------------------------------------<<<<<
                        ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09
                        break;
					}

				// -------------------------------------------------------------------------------
				// 削除
				// -------------------------------------------------------------------------------
				case TOOLBAR_DELETEBUTTON_KEY:
					{
                        // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ---------->>>>>
                        // MEMO:月次更新後であれば在庫データの更新は行えない
                        //if (!CanWrite(
                        //    this._editGoodsUnitData.StockList,
                        //    this._prevStockList,
                        //    DateTime.Now
                        //)) return (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                        if (!CanWrite(DateTime.Now)) return;
                        // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ----------<<<<<

						string msg = "現在、表示中のデータを削除します\n\n" + "よろしいですか？";
						MessageBoxButtons buttons = MessageBoxButtons.YesNo;
						DialogResult dr = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION, CT_PGID, msg, 0, buttons);
						if (dr == DialogResult.Yes)
						{
							this.DeleteData();
						}

						break;
					}
                // --- ADD 2008/09/02 -------------------------------->>>>>
                // -------------------------------------------------------------------------------
                // 完全削除
                // -------------------------------------------------------------------------------
                case TOOLBAR_COMPLETEDELETEBUTTON_KEY:
                    {
                        // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ---------->>>>>
                        // MEMO:月次更新後であれば在庫データの更新は行えない
                        //if (!CanWrite(
                        //    this._editGoodsUnitData.StockList,
                        //    this._prevStockList,
                        //    DateTime.Now
                        //)) return (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                        if (!CanWrite(DateTime.Now)) return;
                        // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ----------<<<<<

                        string msg = "現在、表示中のデータを完全削除します\n\n" + "よろしいですか？";
                        MessageBoxButtons buttons = MessageBoxButtons.YesNo;
                        DialogResult dr = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION, CT_PGID, msg, 0, buttons);
                        if (dr == DialogResult.Yes)
                        {
                            this.CompleteDeleteData();
                        }

                        break;
                    }
                // -------------------------------------------------------------------------------
                // 復活
                // -------------------------------------------------------------------------------
                case TOOLBAR_REVIVEBUTTON_KEY:
                    {
                        Infragistics.Win.UltraWinToolbars.ButtonTool reviveButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_REVIVEBUTTON_KEY]; // ADD 2010/08/19
                        if (reviveButton.SharedProps.Visible && reviveButton.SharedProps.Enabled) // ADD 2010/08/19
                        { // ADD 2010/08/19
                            // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ---------->>>>>
                            // MEMO:月次更新後であれば在庫データの更新は行えない
                            //if (!CanWrite(
                            //    this._editGoodsUnitData.StockList,
                            //    this._prevStockList,
                            //    DateTime.Now
                            //)) return (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                            if (!CanWrite(DateTime.Now)) return;
                            // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ----------<<<<<

                            string msg = "現在、表示中のデータを復活します\n\n" + "よろしいですか？";
                            MessageBoxButtons buttons = MessageBoxButtons.YesNo;
                            DialogResult dr = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION, CT_PGID, msg, 0, buttons);
                            if (dr == DialogResult.Yes)
                            {
                                this.ReviveData();
                            }
                        } // ADD 2010/08/19

                        break;
                    }
                // --- ADD 2010/08/09 -------------------------------->>>>>
                // -------------------------------------------------------------------------------
                // ガイド
                // -------------------------------------------------------------------------------
                case TOOLBAR_GUIDEBUTTON_KEY:
                    {
                        if (this.tNedit_GoodsMakerCd.Focused)
                        {
                            MakerGuide_uButton_Click(sender, e);
                        }
                        else if (this.tNedit_BLGoodsCode.Focused)
                        {
                            BLGoodsGuide_uButton_Click(sender, e);
                        }
                        else if (this.tNedit_EnterpriseGanreCode.Focused)
                        {
                            uButton__EnterpriseGanreGuide_Click(sender, e);
                        }
                        else if (this.tEdit_WarehouseCode.Focused)
                        {
                            uButton_WarehouseGuide_Click(sender, e);
                        }
                        else if (this.tEdit_SectionCode.Focused)
                        {
                            uButton_SectionGuide_Click(sender, e);
                        }
                        else if (this.tNedit_SupplierCd.Focused)
                        {
                            uButton_SupplierGuide_Click(sender, e);
                        }
                        else if (this.tNedit_PartsManagementDivide1.Focused)
                        {
                            uButton_PartsManagementDivide1_Click(sender, e);
                        }
                        else if (this.tNedit_PartsManagementDivide2.Focused)
                        {
                            uButton_PartsManagementDivide2_Click(sender, e);
                        }
                        // Add Start 2012/12/01 zhangy3 for Redmine#33231 ----- >>>
                        else if (this.tNedit_PayeeCode.Focused)
                        {
                            PayeeCodeGuid_uButton_Click(sender, e);
                        }
                        // Add End   2012/12/01 zhangy3 for Redmine#33231 ----- <<<
                        break;
                    }

                // -------------------------------------------------------------------------------
                // 次頁
                // -------------------------------------------------------------------------------
                case TOOLBAR_NEXTPAGEBUTTON_KEY:
                    {
                        switch (this.ultraTabControl1.SelectedTab.Key)
                        {
                            case "Price":
                                {
                                    this.ultraTabControl1.Tabs["UnitPrice"].Active = true;
                                    this.ultraTabControl1.Tabs["UnitPrice"].Selected = true;
                                    break;
                                }
                            case "UnitPrice":
                                {
                                    this.ultraTabControl1.Tabs["Stock"].Active = true;
                                    this.ultraTabControl1.Tabs["Stock"].Selected = true;
                                    break;
                                }
                            case "Stock":
                                {
                                    this.ultraTabControl1.Tabs["Price"].Active = true;
                                    this.ultraTabControl1.Tabs["Price"].Selected = true;
                                    break;
                                }
                        }
                        break;
                    }

                // --- ADD 2010/08/09 --------------------------------<<<<< 

                // --- ADD 2008/09/02 --------------------------------<<<<< 
				// -------------------------------------------------------------------------------
				// 元に戻す
				// -------------------------------------------------------------------------------
				case TOOLBAR_UNDOBUTTON_KEY:
					{
						
						// 編集内容を編集用バッファに設定する
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                        //this.SetGoodsUnitDataFromScreen(ref this._editGoodsUnitData);
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                        //this.SetGoodsUnitDataFromScreen(ref this._editGoodsUnitData, ref __rateList); // DEL 2008/12/27
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
                        // --- ADD 2008/12/27 -------------------------------->>>>>
                        this.SetGoodsUnitDataFromScreen(ref this._editGoodsUnitData, ref __rateList, true);
                        // --- ADD 2008/12/27 --------------------------------<<<<<

						// 破棄確認
						DialogResult dr = this.SaveCheckEditDat(2);
						switch (dr)
						{
							case DialogResult.No:
								return;
							case DialogResult.Yes:
							case DialogResult.Ignore:
								break;
							default:
								return;
						}

						// 編集内容バッファをUndo用バッファでコピー
						this._editGoodsUnitData = this.__goodsUnitData.Clone();

						// 画面再表示
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                        //this.SetScreenFromGoodsUnitData(this._editGoodsUnitData);
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                        __rateList = _unitSalesPriceInput.GetRateListForRollBack();
                        this._editGoodsUnitData.StockList = GetStockListClone( this._prevStockList );
                        this.SetScreenFromGoodsUnitData( this._editGoodsUnitData, __rateList );
                        // --- ADD 黄興貴 2015/09/22 Redmine#47026 --------------->>>>>
                        string msg = string.Empty;
                        __rateList = RateHelper.SearchAll(this._editGoodsUnitData, out msg);
                        this._unitSalesPriceInput.SetRateList(__rateList,1);
                        // --- ADD 黄興貴 2015/09/22 Redmine#47026 ---------------<<<<<
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

						break;
					}
                // -------------------------------------------------------------------------------
                // 【在庫】保存
                // -------------------------------------------------------------------------------
                case TOOLBAR_STOCK_SAVEBUTTON_KEY:
                    {
                        // 2008.11.18 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                        //@@tEdit_GoodsName.Focus();
                        //tEdit_GoodsName.tArrowKeyControl1_ChangeFocus
                        //this.tArrowKeyControl1.ChangeFocus();
                        // 2008.11.18 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ---------->>>>>
                        // MEMO:月次更新後であれば在庫データの更新は行えない
                        //if (!CanWrite(
                        //    this._editGoodsUnitData.StockList,
                        //    this._prevStockList,
                        //    DateTime.Now
                        //)) return (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                        if (!CanWrite(DateTime.Now)) return;
                        // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ----------<<<<<

                        // 入力チェック
                        if ( CheckInputScreenForStock() != (int)ConstantManagement.MethodResult.ctFNC_NORMAL )
                        {
                            return;
                        }

                        // 2008.11.18 UPD >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                        //string warehouseCode = tEdit_WarehouseCode.Text.TrimEnd();
                        string warehouseCode = this.uiSetControl1.GetZeroPaddedText(this.tEdit_WarehouseCode.Name, this.tEdit_WarehouseCode.Text);
                        // 2008.11.18 UPD <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                        Stock inputStock;

                        // データテーブルから取得
                        if ( GetStockFromStockWarehouseTable( warehouseCode, out inputStock ) )
                        {
                            //----------------------------------
                            // 更新
                            //----------------------------------
                            // 画面入力内容に基づき更新
                            // (※object参照で渡るのでinputStockのref更新はデータテーブル更新を意味する)
                            SetStockFromScreen( ref inputStock );
                        }
                        else
                        {
                            //----------------------------------
                            // 新規
                            //----------------------------------
                            // 画面入力内容に基づき更新
                            SetStockFromScreen( ref inputStock );

                            // データテーブルに追加
                            AddToStockWarehouseTable( inputStock );
                        }

                        // ダイアログ
                        string msg = "在庫情報を登録しました。";
                        DialogResult dr = TMsgDisp.Show( emErrorLevel.ERR_LEVEL_INFO, CT_PGID, msg, 0, MessageBoxButtons.OK );
                        _updateStockWarehouseTable = true;

                        // 表示クリア
                        _editStock = CreateNewStock( string.Empty );
                        __stock = _editStock.Clone();
                        SetScreenFromStock( _editStock );

                        break;
                    }
                // -------------------------------------------------------------------------------
                // 【在庫】削除
                // -------------------------------------------------------------------------------
                case TOOLBAR_STOCK_DELETEBUTTON_KEY:
                    {
                        // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ---------->>>>>
                        // MEMO:月次更新後であれば在庫データの更新は行えない
                        //if (!CanWrite(
                        //    this._editGoodsUnitData.StockList,
                        //    this._prevStockList,
                        //    DateTime.Now
                        //)) return (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                        if (!CanWrite(DateTime.Now)) return;
                        // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ----------<<<<<
                        // --- ADD 2009/01/23 障害ID:9889対応------------------------------------------------------>>>>>
                        string msg = "";
                        DialogResult dr;
                        // --- ADD 2009/01/23 障害ID:9889対応------------------------------------------------------<<<<<

                        // 2008.11.18 UPD >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                        //string warehouseCode = tEdit_WarehouseCode.Text.TrimEnd();
                        string warehouseCode = this.uiSetControl1.GetZeroPaddedText(this.tEdit_WarehouseCode.Name, this.tEdit_WarehouseCode.Text);
                        // 2008.11.18 UPD <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                        Stock inputStock;

                        // データテーブルから取得
                        if ( GetStockFromStockWarehouseTable( warehouseCode, out inputStock ) )
                        {
                            if ( inputStock.LogicalDeleteCode == 0 )
                            {
                                // 論理削除する
                                // --- CHG 2009/01/23 障害ID:9889対応------------------------------------------------------>>>>>
                                //LogicalDeleteFromStockWarehouseTable(warehouseCode);
                                msg = "現在、表示中の在庫情報を削除します\n\n" + "よろしいですか？";
                                MessageBoxButtons buttons = MessageBoxButtons.YesNo;
                                dr = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION, CT_PGID, msg, 0, buttons);
                                if (dr == DialogResult.Yes)
                                {
                                    LogicalDeleteFromStockWarehouseTable(warehouseCode);
                                    msg = "在庫情報を削除しました。";
                                }
                                else
                                {
                                    return;
                                }
                                // --- CHG 2009/01/23 障害ID:9889対応------------------------------------------------------<<<<<
                            }
                            else
                            {
                                // 完全削除する
                                // --- CHG 2009/01/23 障害ID:9889対応------------------------------------------------------>>>>>
                                //RemoveStockFromStockWarehouseTable( warehouseCode );
                                msg = "現在、表示中の在庫情報を完全削除します\n\n" + "よろしいですか？";
                                MessageBoxButtons buttons = MessageBoxButtons.YesNo;
                                dr = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION, CT_PGID, msg, 0, buttons);
                                if (dr == DialogResult.Yes)
                                {
                                    RemoveStockFromStockWarehouseTable(warehouseCode);
                                    msg = "在庫情報を完全削除しました。";
                                }
                                else
                                {
                                    return;
                                }
                                // --- CHG 2009/01/23 障害ID:9889対応------------------------------------------------------<<<<<
                            }
                        }

                        // ダイアログ
                        // --- CHG 2009/01/23 障害ID:9889対応------------------------------------------------------>>>>>
                        //string msg = "在庫情報を削除しました。";
                        //DialogResult dr = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, CT_PGID, msg, 0, MessageBoxButtons.OK);
                        dr = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, CT_PGID, msg, 0, MessageBoxButtons.OK);
                        // --- CHG 2009/01/23 障害ID:9889対応------------------------------------------------------<<<<<

                        // 表示クリア
                        _editStock = CreateNewStock( string.Empty );
                        __stock = _editStock.Clone();
                        SetScreenFromStock( _editStock );

                        break;
                    }
                // -------------------------------------------------------------------------------
                // 【在庫】復活
                // -------------------------------------------------------------------------------
                case TOOLBAR_STOCK_REVIVEBUTTON_KEY:
                    {
                        // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ---------->>>>>
                        // MEMO:月次更新後であれば在庫データの更新は行えない
                        //if (!CanWrite(
                        //    this._editGoodsUnitData.StockList,
                        //    this._prevStockList,
                        //    DateTime.Now
                        //)) return (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                        if (!CanWrite(DateTime.Now)) return;
                        // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ----------<<<<<
                        // 2008.11.18 UPD >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                        //string warehouseCode = tEdit_WarehouseCode.Text.TrimEnd();
                        string warehouseCode = this.uiSetControl1.GetZeroPaddedText(this.tEdit_WarehouseCode.Name, this.tEdit_WarehouseCode.Text);
                        // 2008.11.18 UPD <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                        Stock inputStock;

                        // データテーブルから取得
                        if ( GetStockFromStockWarehouseTable( warehouseCode, out inputStock ) )
                        {
                            if ( inputStock.LogicalDeleteCode != 0 )
                            {
                                // 復旧する
                                RevivalFromStockWarehouseTable( warehouseCode );
                            }
                        }

                        // ダイアログ
                        string msg = "在庫情報を復活しました。";
                        DialogResult dr = TMsgDisp.Show( emErrorLevel.ERR_LEVEL_INFO, CT_PGID, msg, 0, MessageBoxButtons.OK );

                        // 表示クリア
                        _editStock = CreateNewStock( string.Empty );
                        __stock = _editStock.Clone();
                        SetScreenFromStock( _editStock );

                        break;
                    }
                // --- ADD 2009/03/30 残案件No.14対応------------------------------------------------------>>>>>
                // -------------------------------------------------------------------------------
                // 最新情報
                // -------------------------------------------------------------------------------
                case TOOLBAR_RENEWALBUTTON_KEY:
                    {
                        // --- ADD m.suzuki 2010/11/25 ---------->>>>>
                        DialogResult dialogResult = TMsgDisp.Show(
                                        this,
                                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                        this.Name,
                                        "画面情報はクリアされます。" + Environment.NewLine + Environment.NewLine + 
                                        "よろしいですか？",
                                        0,
                                        MessageBoxButtons.YesNo,
                                        MessageBoxDefaultButton.Button1 );

                        if ( dialogResult == DialogResult.No )
                        {
                            // Noならば処理中断
                            break;
                        }

                        // Yesならばクリアして処理続行
                        # region [クリア]

                        // 編集内容を編集用バッファに設定する
                        this.SetGoodsUnitDataFromScreen( ref this._editGoodsUnitData, ref __rateList, true );

                        // 画面を初期化する
                        this.ClearScreen();
                        // 価格
                        DateTime priceStartDate = GetPriceStartDate();
                        this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateYearColumn.ColumnName].Value = priceStartDate.Year;
                        this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateMonthColumn.ColumnName].Value = priceStartDate.Month;
                        this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows[0].Cells[this._goodsAcs.GoodsPriceDataTable.PriceStartDateDayColumn.ColumnName].Value = priceStartDate.Day;
                        this._goodsPriceInput.ReturnKeyDown();

                        // Undo用バッファにコピーする
                        this.__goodsUnitData = this._editGoodsUnitData.Clone();

                        // 品番へフォーカス移動
                        this.tEdit_GoodsNo.Focus();
                        ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09
                        
                        # endregion
                        // --- ADD m.suzuki 2010/11/25 ----------<<<<<

                        string msg;
                        this._goodsAcs.SearchInitial(this._enterpriseCode, LoginInfoAcquisition.Employee.BelongSectionCode, out msg);

                        TMsgDisp.Show(this,
                                      emErrorLevel.ERR_LEVEL_INFO,
                                      this.Name,
                                      "最新情報を取得しました。",
                                      0,
                                      MessageBoxButtons.OK);
                        break;
                    }
                // --- ADD 2009/03/30 残案件No.14対応------------------------------------------------------<<<<<
                // --- ADD caohh 2011/08/02 ------------------------------------------------------>>>>>
                // -------------------------------------------------------------------------------
                // 設定
                // -------------------------------------------------------------------------------
                case TOOLBAR_SETUPBUTTON_KEY:
                    {
                        // ユーザー設定画面
                        this._mAKHN09280UD.ShowDialog();
                        this._saveInfoDiv = this._mAKHN09280UD.SaveInfoDiv;
                        this._keepOnInfo = this._mAKHN09280UD.KeepOnInfo;
                        break;
                    }
                // --- ADD caohh 2011/08/02 ------------------------------------------------------<<<<<
			}
		}

		/// <summary>
		/// フォームクロージングイベント
		/// </summary>
		/// <param name="sender">イベントソース</param>
		/// <param name="e">イベントデータ</param>
        /// <br>Update Note: 2012/12/01 zhangy3　</br>
        /// <br>           : 2013/01/16配信分 Redmine#33231 商品在庫マスタ</br>
		private void MAKHN09280UA_FormClosing(object sender, FormClosingEventArgs e)
		{
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
            // 編集内容を編集用バッファに設定する(商品)
            //this.SetGoodsUnitDataFromScreen( ref this._editGoodsUnitData, ref __rateList ); // DEL 2008/12/27
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
            // --- ADD 2008/12/27 -------------------------------->>>>>
            this.SetGoodsUnitDataFromScreen(ref this._editGoodsUnitData, ref __rateList, true);
            // --- ADD 2008/12/27 --------------------------------<<<<<

			DialogResult dr = this.SaveCheckEditDat(0);
			switch (dr)
			{
				case DialogResult.Yes:
					{
						// 入力内容のチェック
						if (this.CheckInputScreen() != (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
						{
							e.Cancel = true;
							return;
						}
						
						// 商品データ保存処理
                        // --- CHG 2009/01/09 障害ID:9623対応------------------------------------------------------>>>>>
                        //this.SaveData(true, false, false);
						int status = SaveData(true, false, false);
                        if (status != 0)
                        {
                            e.Cancel = true;
                            return;
                        }
                        // --- CHG 2009/01/09 障害ID:9623対応------------------------------------------------------<<<<<
                        break;
					}
				case DialogResult.No:
				case DialogResult.Ignore:
					// 登録せず終了
                    // 2008.11.18 add >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    // 在庫が登録・削除・復活されていたら反映されない旨を再度確認
                    if (_updateStockWarehouseTable)
                    {
                        string msg = "変更した在庫データが反映されませんが\n\n" + "終了してもよろしいですか？\n\n" + "(在庫情報を登録するには商品情報を登録する必要があります)";
                        MessageBoxButtons buttons = MessageBoxButtons.OKCancel;
                        DialogResult dr2 = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION, CT_PGID, msg, 0, buttons);
                        switch (dr2)
                        {
                            case DialogResult.OK:
                                {
                                    break;
                                }
                            case DialogResult.Cancel:
                                {
                                    // 終了をキャンセル
                                    e.Cancel = true;
                                    break;
                                }
                        }
                    }
                    // 2008.11.18 add <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
					break;
				case DialogResult.Cancel:
					// 終了をキャンセル
					e.Cancel = true;
					break;
				default:
					break;
			}
            curFoundGoodsMngPattern = GoodsAcs.GoodsMngSettingPattern.None;//Add 2012/12/01 zhangy3 for Redmine#33231
            LoginSectionInfo = null;    // ADD 2009/11/24 MANTIS対応[14610]：倉庫情報のデフォルト値を設定
		}

        /// <summary>
		/// メーカーガイドボタンクリックイベント
		/// </summary>
		/// <param name="sender">イベントソース</param>
		/// <param name="e">イベントデータ</param>
        /// <br>Update Note: 2015/09/10 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
		private void MakerGuide_uButton_Click(object sender, EventArgs e)
		{
            MakerUMnt makerUMnt;

			// ガイド起動
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/17 DEL
            //int status = this._goodsAcs.ExecuteMakerGuid(this._enterpriseCode, out makerUMnt);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/17 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/17 ADD
            if ( _makerAcs == null )
            {
                _makerAcs = new MakerAcs();
            }
            int status = _makerAcs.ExecuteGuid( this._enterpriseCode, out makerUMnt );
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/17 ADD
			if (status != 0) return;

			// メーカーコードに変更があるか
			if (this.tNedit_GoodsMakerCd.GetInt() != makerUMnt.GoodsMakerCd)
			{
                this.tNedit_GoodsMakerCd.SetInt(makerUMnt.GoodsMakerCd);
                this.GoodsMakerName_tEdit.DataText = makerUMnt.MakerName;

                this.SetGoodsUnitDataFromMaker(makerUMnt, ref this._editGoodsUnitData);

                if ( !this.tEdit_GoodsNo.DataText.Equals( this._editGoodsUnitData.GoodsNo ) )
                {
                    // 商品を検索する
                    GoodsUnitData dataBuff;
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                    //status = this._goodsAcs.Read(this._enterpriseCode, this.tNedit_GoodsMakerCd.GetInt(), this.tEdit_GoodsNo.DataText, out dataBuff);
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                    List<Rate> rateList;
                    status = this._goodsAcs.ReadGoodsWithRate( this._enterpriseCode, this.tNedit_GoodsMakerCd.GetInt(), this.tEdit_GoodsNo.DataText, ConstantManagement.LogicalMode.GetDataAll, out dataBuff, out rateList );

                    // ADD 2009/11/20 3次分対応 得意先掛率グループ改良 ---------->>>>>
                    // TODO:掛率を再検索
                    if (dataBuff != null)
                    {
                        string errMsg = string.Empty;
                        rateList = RateHelper.SearchAll(dataBuff, out errMsg);
                    }
                    // ADD 2009/11/20 3次分対応 得意先掛率グループ改良 ----------<<<<<

                    // 在庫リストクローン取得
                    this._prevStockList = GetStockListClone( dataBuff.StockList );
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
                    switch ( status )
                    {
                        case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                            {
                                if ( dataBuff.LogicalDeleteCode == 0 )
                                {
                                    DialogResult dialogResult = TMsgDisp.Show(
                                        this,
                                        emErrorLevel.ERR_LEVEL_QUESTION,
                                        this.Name,
                                        "入力されたコードの商品情報が既に登録されています。" + "\r\n" + "\r\n" +
                                        "【メーカー名：" + dataBuff.MakerName + " " + "品名：" + dataBuff.GoodsName + "】" + "\r\n" + "\r\n" +
                                        "編集を行いますか？",
                                        0,
                                        MessageBoxButtons.YesNo,
                                        MessageBoxDefaultButton.Button1 );

                                    switch ( dialogResult )
                                    {
                                        case (DialogResult.Yes):
                                            {
                                                // 編集
                                                this._editGoodsUnitData = dataBuff.Clone();

                                                this.__goodsUnitData = this._editGoodsUnitData.Clone();
                                                this.__goodsUnitData.EnterpriseCode = this._enterpriseCode;


                                                // 画面再表示
                                                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                                                //this.SetScreenFromGoodsUnitData(this._editGoodsUnitData);
                                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                                                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                                                this.SetScreenFromGoodsUnitData( this._editGoodsUnitData, rateList );
                                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
                                                this.tEdit_GoodsName.Focus();
                                                ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09

                                                break;
                                            }
                                        default:
                                            {
                                                break;
                                            }
                                    }
                                }

                                break;
                            }
                        case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                        case (int)ConstantManagement.DB_Status.ctDB_EOF:
                            {
                                break;
                            }
                        default:
                            TMsgDisp.Show( emErrorLevel.ERR_LEVEL_STOPDISP,
                                CT_PGID,
                                "商品情報の取得に失敗しました。",
                                status,
                                MessageBoxButtons.OK,
                                MessageBoxDefaultButton.Button1 );


                            break;
                    }
                }
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 ADD
                else
                {
                    // 品番未入力なので、次は品番
                    //this.tEdit_GoodsNo.Focus(); // DEL 2010/08/17
                    this.tEdit_GoodsName.Focus(); // ADD 2010/08/17
                    ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 ADD
                // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>
                // MEMO:メーカーが設定されたので、価格情報を再計算
                UpdatePriceInputTab();
                // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ----------<<<<<
                // --- ADD 黄興貴 2015/09/10 Redmine#47026 --------------->>>>>
                string msg = string.Empty;

                // メーカーコードを変更すると、掛率を再検索すること必要です。
                List<Rate> rateListNew = RateHelper.SearchAll(this._editGoodsUnitData, out msg);

                if (rateListNew != null)
                {
                    if (this.tNedit_GoodsMakerCd.GetInt() == 0)
                    {
                        return;
                    }

                    this._unitSalesPriceInput.SetRateList(rateListNew,1);
                }
                // --- ADD 黄興貴 2015/09/10 Redmine#47026 ---------------<<<<<
			} 

		}

		/// <summary>
		/// BL商品コードガイドボタンクリックイベント
		/// </summary>
		/// <param name="sender">イベントソース</param>
		/// <param name="e">イベントデータ</param>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>             改良対応</br>
        /// <br>             BLコード入力時の品名取得処理変更</br>                    
		private void BLGoodsGuide_uButton_Click(object sender, EventArgs e)
		{
            BLGoodsCdUMnt bLGoodsCdUMnt;

			// ガイド起動
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/17 DEL
            //int status = this._goodsAcs.ExecuteBLGoodsCd(out bLGoodsCdUMnt);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/17 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/17 ADD
            if ( _bLGoodsCdAcs == null )
            {
                _bLGoodsCdAcs = new BLGoodsCdAcs();
            }
            int status = _bLGoodsCdAcs.ExecuteGuid( this._enterpriseCode, out bLGoodsCdUMnt );
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/17 ADD
			if (status != 0) return;

			this.tNedit_BLGoodsCode.SetInt(bLGoodsCdUMnt.BLGoodsCode);

            // --- UPD 2010/06/08 ---------->>>>> 
            //this.BLtEdit_GoodsName.DataText = bLGoodsCdUMnt.BLGoodsFullName;
            this.BLtEdit_GoodsName.DataText = bLGoodsCdUMnt.BLGoodsHalfName;
            // --- UPD 2010/06/08 ----------<<<<< 

            this.SetGoodsUnitDataFromBLGoodsCd( bLGoodsCdUMnt, ref this._editGoodsUnitData );
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 ADD
            SetGoodsUnitDataFromGoodsRelation( bLGoodsCdUMnt, ref this._editGoodsUnitData );
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 ADD
            // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>
            // MEMO:BLコードが設定されたので、価格情報を再計算
            UpdatePriceInputTab();
            // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ----------<<<<<
            // ADD 2010/01/07 MANTIS対応[14859]：品名が未入力の場合、BLコードマスタのBLコード名を設定 ---------->>>>>
            SetGoodsNameIf(this.tNedit_BLGoodsCode.GetInt());
            // ADD 2010/01/07 MANTIS対応[14859]：品名が未入力の場合、BLコードマスタのBLコード名を設定 ----------<<<<<
            // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの仕入先を表示 ---------->>>>>
            // MEMO:BLコードが設定されたので、商品在庫管理マスタの仕入先を更新
            UpdateEditingGoodsUnitDataFromScreen();
            SetGoodsMngSupplier(this._editGoodsUnitData);
            // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの仕入先を表示 ----------<<<<<
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/03 ADD
            // 次項目フォーカス
            //tNedit_EnterpriseGanreCode.Focus(); // DEL 2010/08/19
            tEdit_Jan.Focus(); // ADD 2010/08/19
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/03 ADD
            ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = true; // ADD 2010/08/09
        }

        /// <summary>
        /// 倉庫ガイドボタン　クリックイベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_WarehouseGuide_Click( object sender, EventArgs e )
        {
            // 在庫情報退避
            SetStockFromScreen( ref _editStock );
            // 在庫情報比較
            DialogResult dr = SaveCheckEditDatOfStock( 1 );
            switch ( dr )
            {
                case DialogResult.No:
                    tEdit_WarehouseCode.Text = _editStock.WarehouseCode;
                    tEdit_WarehouseCode.Focus();
                    ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = true; // ADD 2010/08/09
                    return;
                case DialogResult.Yes:
                case DialogResult.Ignore:
                    break;
                default:
                    return;
            }


            // アクセスクラスインスタンス生成
            if ( _warehouseAcs == null )
            {
                _warehouseAcs = new WarehouseAcs();
            }

            // ガイド実行
            Warehouse warehouse;
            int status = _warehouseAcs.ExecuteGuid( out warehouse, this._enterpriseCode );

            // 結果反映
            if ( status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL && warehouse != null )
            {
                if ( warehouse.WarehouseCode.TrimEnd() != _editStock.WarehouseCode )
                {
                    // 倉庫
                    tEdit_WarehouseCode.Text = warehouse.WarehouseCode.TrimEnd();

                    Stock readStock;
                    bool readStockStatus = GetStockFromStockWarehouseTable( warehouse.WarehouseCode.TrimEnd(), out readStock );

                    // 倉庫名称をマスタから取得する
                    readStock.WarehouseCode = tEdit_WarehouseCode.Text;
                    readStock.WarehouseName = GetWarehouseName( warehouse.WarehouseCode.TrimEnd() );

                    // 既に登録あり→更新

                    // 画面に在庫情報を表示
                    _editStock = readStock.Clone();
                    __stock = readStock.Clone();

                    SetScreenFromStock( _editStock );
                    SetStockModeFromExists( readStockStatus );

                    if ( !readStockStatus )
                    {
                        // 管理拠点(拠点)読み込み
                        string secCode;
                        string secName;
                        ReadSection( warehouse.SectionCode, out secCode, out secName );
                        tEdit_SectionCode.Text = secCode;
                        tEdit_SectionName.Text = secName;
                    }
                }

                // フォーカス移動(次項目)
                tEdit_SectionCode.Focus();
                ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = true; // ADD 2010/08/09
            }
            else
            {
                // フォーカス移動(移動しない)
            }
        }
        /// <summary>
        /// 拠点(管理拠点)ガイドボタン　クリックイベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_SectionGuide_Click( object sender, EventArgs e )
        {
            // アクセスクラスインスタンス生成
            if ( _secInfoSetAcs == null )
            {
                _secInfoSetAcs = new SecInfoSetAcs();
            }

            // ガイド実行
            SecInfoSet secInfoSet;
            int status = _secInfoSetAcs.ExecuteGuid( this._enterpriseCode, false, out secInfoSet );

            // 結果反映
            if ( status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL && secInfoSet != null )
            {
                tEdit_SectionCode.Text = secInfoSet.SectionCode.TrimEnd();
                tEdit_SectionName.Text = secInfoSet.SectionGuideNm.TrimEnd();

                // フォーカス移動(次項目)
                tEdit_WarehouseShelfNo.Focus();
                ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09
            }
            else
            {
                // フォーカス移動(移動しない)
            }
        }
        /// <summary>
        /// 仕入先(発注先)ガイドボタン　クリックイベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_SupplierGuide_Click( object sender, EventArgs e )
        {
            // アクセスクラスインスタンス生成
            if (_supplierAcs == null)
            {
                _supplierAcs = new SupplierAcs();
            }

            // ガイド実行
            Supplier supplier;
            int status = _supplierAcs.ExecuteGuid( out supplier, this._enterpriseCode, string.Empty );

            // 結果反映
            if ( status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL && supplier != null )
            {
                tNedit_SupplierCd.SetInt( supplier.SupplierCd );
                tEdit_SupplierName.Text = supplier.SupplierNm1.TrimEnd();
                
                // フォーカス移動(次項目)
                tNedit_PartsManagementDivide1.Focus();
                ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = true; // ADD 2010/08/09
            }
            else
            {
                // フォーカス移動(移動しない)
            }
        }
        /// <summary>
        /// 部品管理区分１ガイドボタン　クリックイベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_PartsManagementDivide1_Click( object sender, EventArgs e )
        {
            // アクセスクラスインスタンス生成
            if ( _userGuideAcs == null )
            {
                _userGuideAcs = new UserGuideAcs();
            }

            // 読み込み
            UserGdHd userGdHd;
            UserGdBd userGdBd;
            int status = _userGuideAcs.ExecuteGuid( this._enterpriseCode, out userGdHd, out userGdBd, ct_UserGdDiv_PartsManagementDivide1 );

            // 結果反映
            if ( status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL )
            {
                // 結果セット
                tNedit_PartsManagementDivide1.SetInt( userGdBd.GuideCode );
                tEdit_PartsManagementDivide1Name.Text = userGdBd.GuideName.TrimEnd();

                // フォーカス移動(次項目)
                tNedit_PartsManagementDivide2.Focus();
                ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = true; // ADD 2010/08/09
            }
            else
            {
                // フォーカス移動(移動しない)
            }
        }
        /// <summary>
        /// 部品管理区分２ガイドボタン　クリックイベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton_PartsManagementDivide2_Click( object sender, EventArgs e )
        {
            // アクセスクラスインスタンス生成
            if ( _userGuideAcs == null )
            {
                _userGuideAcs = new UserGuideAcs();
            }

            // 読み込み
            UserGdHd userGdHd;
            UserGdBd userGdBd;
            int status = _userGuideAcs.ExecuteGuid( this._enterpriseCode, out userGdHd, out userGdBd, ct_UserGdDiv_PartsManagementDivide2 );

            // 結果反映
            if ( status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL )
            {
                // 結果セット
                tNedit_PartsManagementDivide2.SetInt( userGdBd.GuideCode );
                tEdit_PartsManagementDivide2Name.Text = userGdBd.GuideName.TrimEnd();

                // フォーカス移動(次項目)
                //tComboEditor_StockDiv.Focus(); // DEL 2010/08/17
                tEdit_StockNote1.Focus(); // ADD 2010/08/17

                this._preComboEditorValue = tComboEditor_StockDiv.Value;
                ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09
            }
            else
            {
                // フォーカス移動(移動しない)
            }
        }

		/// <summary>
		/// 品名エディット値変更イベント
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>             改良対応</br>
        /// <br>             品名入力項目の変更</br>
		private void tEdit_GoodsName_ValueChanged(object sender, EventArgs e)
		{
            if ( !(sender is TEdit) )
            {
                return;
            }

            if ( ((TEdit)sender).Modified == false )
            {
                return;
            }

            // --- DEL 2010/06/08 ---------->>>>>
            //if ( ((TEdit)sender) == this.tEdit_GoodsName )
            //{
            //    if ( ((TEdit)sender).Text == "" )
            //    {
            //        this.tEdit_GoodsNameKana.Clear();
            //    }
            //    else
            //    {
            //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 DEL
            //        //string inputText = ((TEdit)sender).Text;
            //        //string outputText = Strings.StrConv( inputText, VbStrConv.Narrow, 0 );
            //        //this.tEdit_GoodsNameKana.Text = outputText;
            //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 DEL
            //    }
            //}
            // --- DEL 2010/06/08 ----------<<<<< 

		}

		/// <summary>
		/// コントロール
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
        /// <br>Update Note: 2011/08/02 caohh　</br>
        /// <br>           : NSユーザー改良要望一覧連番265の対応</br>
        /// <br>Update Note: 2011/09/01 周雨　</br>
        /// <br>           : 案件一覧 連番984 の対応 選択した在庫が初期表示されるよう修正 FOR redmine #24263</br>
        /// <br>Update Note: 2011/09/06 鄧潘ハン　</br>
        /// <br>           : 案件一覧 連番265 でのテスト不具合についての修正 FOR redmine #24497</br>
        /// <br>Update Note: 2012/12/01 zhangy3　</br>
        /// <br>           : 2013/01/16配信分 Redmine#33231 商品在庫マスタ</br>
        /// <br>Update Note: K2013/05/13 王君</br>
        /// <br>管理番号   : 10901273-00 2013/06/18配信分</br>
        /// <br>             Redmine#35663 商品在庫マスタ・山形部品様個別組み込み</br>
        /// <br>Update Note: 2015/09/07 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
        /// <br>Update Note: 2015/09/10 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
        /// <br>Update Note: 2015/09/22 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
        /// <br>Update Note: 2015/09/22 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタのフォーカス移動不正の障害対応</br>
        /// <br>Update Note: 2015/09/22 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタのフォーカス移動再修正</br>
		private void tArrowKeyControl1_ChangeFocus(object sender, ChangeFocusEventArgs e)
		{

            // ADD 2014/08/08 譚洪 --- >>>
            // 保存処理中、再保存処理不可
            // _isSaveFlgがTrueの場合、保存不可。_isSaveFlgがFalseの場合、保存可
            if (this._isSaveFlg)
            {
                return;
            }
            // ADD 2014/08/08 譚洪 --- <<<

			int status = 0;
			bool changedGoods = false;
            bool changeInfo = false;// ADD 黄興貴 2015/09/10 Redmine#47026

			if (e.PrevCtrl == null || e.NextCtrl == null) return;

                #region 項目処理
                switch (e.PrevCtrl.Name)
                {
                    // --- ADD 2009/03/05 障害ID:12131対応------------------------------------------------------>>>>>
                    // 棚卸評価率
                    case "tNedit_StockUnitPriceRate":
                        {
                            //---ADD 2010/08/09---------->>>>>
                            if (e.Key == Keys.Right) {
                                e.NextCtrl = this.tNedit_StockUnitPriceRate;
                            }
                            //---ADD 2010/08/09----------<<<<<
                            // --- ADD 黄興貴 2015/09/22 Redmine#47026 --------------->>>>>
                            if (e.ShiftKey)
                            {
                                // --- ADD 黄興貴 2015/09/22 Redmine#47026 フォーカス移動再修正 --------------->>>>>
                                if (e.Key == Keys.Enter || e.Key == Keys.Tab)
                                {
                                // --- ADD 黄興貴 2015/09/22 Redmine#47026 フォーカス移動再修正 ---------------<<<<<
                                    e.NextCtrl = this.tDateEdit_lastStockDate;
                                }// ADD 黄興貴 2015/09/22 Redmine#47026 フォーカス移動再修正
                            }
                            // --- ADD 黄興貴 2015/09/22 Redmine#47026 ---------------<<<<<
                            if (this.tNedit_StockUnitPriceRate.GetValue() == 0)
                            {
                                return;
                            }

                            if (_editStock == null)
                            {
                                return;
                            }

                            // DEL 2009/11/25 MANTIS対応[14593]：棚卸評価単価の再計算 ---------->>>>>
                            // 棚卸評価単価が入力されている場合、何もしない
                            //if (_editStock.StockUnitPriceFl != 0)
                            //{
                            //    return;
                            //}
                            // DEL 2009/11/25 MANTIS対応[14593]：棚卸評価単価の再計算 ----------<<<<<

                            List<GoodsPrice> goodsPriceList;
                            this._goodsAcs.GetGoodsPriceListFromGoodsPriceDataTable(out goodsPriceList);

                            GoodsPrice goodsPrice = this._goodsAcs.GetGoodsPriceFromGoodsPriceList(DateTime.Now, goodsPriceList);

                            // 棚卸評価率
                            double priceRate = this.tNedit_StockUnitPriceRate.GetValue();

                            this.tNedit_StockUnitPriceFl.SetValue(priceRate * goodsPrice.ListPrice / 100);

                            break;
                        }
                    // --- ADD 2009/03/05 障害ID:12131対応------------------------------------------------------<<<<<
                    //-----------------------------------------------------------------------
                    // 価格情報
                    //-----------------------------------------------------------------------
                    case "uGrid_GoodsPriceInfo":
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:  // ADD 2008/12/15 不具合対応[8733]
                                    {
                                        // ADD 2008/12/15 不具合対応[8733] ---------->>>>>
                                        if (e.ShiftKey == false)
                                        {
                                            // ADD 2008/12/15 不具合対応[8733] ----------<<<<<
                                            // 明細部にフォーカス有り(GridActive)
                                            if (this._goodsPriceInput.uGrid_GoodsPriceInfo.ActiveCell != null)
                                            {
                                                //--- ADD 2010/08/09---------->>>>>
                                                if (e.Key == Keys.Return)
                                                {
                                                    if (this._goodsPriceInput.uGrid_GoodsPriceInfo.ActiveCell.Row.Index == this._goodsPriceInput.uGrid_GoodsPriceInfo.Rows.Count - 1 
                                                        &&
                                                        ((this._goodsPriceInput.uGrid_GoodsPriceInfo.ActiveCell.Column.Key == this._goodsPriceInput._goodsPriceDataTable.PriceStartDateDayColumn.ColumnName
                                                        && string.Empty.Equals(this._goodsPriceInput.uGrid_GoodsPriceInfo.ActiveRow.Cells[this._goodsPriceInput._goodsPriceDataTable.PriceStartDateDayColumn.ColumnName].Text)
                                                        && string.Empty.Equals(this._goodsPriceInput.uGrid_GoodsPriceInfo.ActiveRow.Cells[this._goodsPriceInput._goodsPriceDataTable.PriceStartDateMonthColumn.ColumnName].Text)
                                                        && string.Empty.Equals(this._goodsPriceInput.uGrid_GoodsPriceInfo.ActiveRow.Cells[this._goodsPriceInput._goodsPriceDataTable.PriceStartDateYearColumn.ColumnName].Text)) 
                                                        || this._goodsPriceInput.uGrid_GoodsPriceInfo.ActiveCell.Column.Key == this._goodsPriceInput._goodsPriceDataTable.SalesUnitCostColumn.ColumnName))
                                                    {
                                                        DialogResult dialogResult = TMsgDisp.Show(this,
                                                                      emErrorLevel.ERR_LEVEL_QUESTION,
                                                                      this.Name,
                                                                      "登録してもよろしいですか。",
                                                                      0,
                                                                      MessageBoxButtons.YesNo);
                                                        if (dialogResult == DialogResult.Yes)
                                                        {
                                                            this.Save();
                                                        }
                                                    }
                                                }
                                                //--- ADD 2010/08/09----------<<<<<

                                                // 明細部キーダウン処理
                                                if (this._goodsPriceInput.ReturnKeyDown())
                                                {
                                                    this._goodsPriceInput.uGrid_GoodsPriceInfo.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                                                    e.NextCtrl = null;
                                                }
                                                //e.NextCtrl = e.PrevCtrl;
                                                //else
                                                //{
                                                //    e.NextCtrl = null;
                                                //}
                                            }

                                            //salesSlipCurrent = this._salesSlipInputAcs.SalesSlip;
                                            //salesSlip = salesSlipCurrent.Clone();
                                            //this._salesSlipDetailInput.DisplayOpenPrice();

                                            // ADD 2008/12/15 不具合対応[8733] ---------->>>>>
                                        }
                                        else
                                        {
                                            if (this._goodsPriceInput.uGrid_GoodsPriceInfo.ActiveCell != null)
                                            {
                                                // 明細部キーダウン処理
                                                if (this._goodsPriceInput.ShiftReturnKeyDown())
                                                {
                                                    this._goodsPriceInput.uGrid_GoodsPriceInfo.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                                                    e.NextCtrl = null;
                                                }
                                                else
                                                {
                                                    e.NextCtrl = this.GoodsSpecialNote_tEdit;
                                                }
                                            }
                                        }
                                        // ADD 2008/12/15 不具合対応[8733] ----------<<<<<  
                                        break;
                                    }
                            }
                            break;
                        }
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                    //-----------------------------------------------------------------------
                    // 単品売価情報
                    //-----------------------------------------------------------------------
                    case "uGrid_UnitSalesPriceInfo":
                        {
                            switch (e.Key)
                            {
                                case Keys.Return:
                                case Keys.Tab:  // ADD 2008/12/15 不具合対応[8733]
                                    {
                                        // ADD 2008/12/15 不具合対応[8733] ---------->>>>>
                                        if (e.ShiftKey == false)
                                        {
                                            // ADD 2008/12/15 不具合対応[8733] ----------<<<<<
                                            // 明細部にフォーカス有り(GridActive)
                                            if (this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.ActiveCell != null)
                                            {
                                                //--- ADD 2010/08/09---------->>>>>
                                                if (e.Key == Keys.Return)
                                                {
                                                    if (this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.ActiveCell.Row.Index == this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.Rows.Count - 1 && this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.ActiveCell.Column.Index == 20)
                                                    {
                                                        DialogResult dialogResult = TMsgDisp.Show(this,
                                                                      emErrorLevel.ERR_LEVEL_QUESTION,
                                                                      this.Name,
                                                                      "登録してもよろしいですか。",
                                                                      0,
                                                                      MessageBoxButtons.YesNo);
                                                        if (dialogResult == DialogResult.Yes)
                                                        {
                                                            this.Save();
                                                        }
                                                    }
                                                }
                                                //--- ADD 2010/08/09----------<<<<<

                                                // 明細部キーダウン処理
                                                if (this._unitSalesPriceInput.ReturnKeyDown())
                                                {
                                                    this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                                                    e.NextCtrl = null;

                                                    // --- ADD 2010/08/17 ---------->>>>>
                                                    if (this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.ActiveCell.Row.Index == 0 && this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.ActiveCell.Column.Index == 21)
                                                    {
                                                        this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.Rows[1].Cells[0].Activate();
                                                        this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                                                    }
                                                    if (this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.ActiveCell.Row.Index == 1 && this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.ActiveCell.Column.Index == 21)
                                                    {
                                                        e.NextCtrl = this.tEdit_GoodsName;
                                                    }
                                                    // --- ADD 2010/08/17 ----------<<<<<
                                                }
                                            }
                                            // ADD 2008/12/15 不具合対応[8733] ---------->>>>>
                                        }
                                        else
                                        {
                                            if (this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.ActiveCell != null)
                                            {
                                                // 明細部キーダウン処理
                                                if (this._unitSalesPriceInput.ShiftReturnKeyDown())
                                                {
                                                    this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                                                    e.NextCtrl = null;

                                                    // --- ADD 2010/08/19 ---------->>>>>
                                                    if (this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.ActiveCell.Row.Index == 0 && this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.ActiveCell.Column.Index == 41)
                                                    {
                                                        this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.Rows[0].Cells[20].Activate();
                                                        this._unitSalesPriceInput.uGrid_UnitSalesPriceInfo.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                                                    }
                                                    // --- ADD 2010/08/19 ----------<<<<<
                                                }
                                                else
                                                {
                                                    e.NextCtrl = this.GoodsSpecialNote_tEdit;
                                                }
                                            }
                                        }
                                        // ADD 2008/12/15 不具合対応[8733] ----------<<<<<  
                                        break;
                                    }
                            }
                            break;
                        }
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
                    // ----------------------------------------
                    // メーカーコード
                    case "tNedit_GoodsMakerCd":
                        {
                            if (this._editGoodsUnitData.GoodsMakerCd != this.tNedit_GoodsMakerCd.GetInt())
                            {
                                if (this.tNedit_GoodsMakerCd.GetInt() != 0)
                                {
                                    MakerUMnt makerUMnt;

                                    // メーカー情報取得処理
                                    status = this._goodsAcs.GetMaker(this._enterpriseCode, this.tNedit_GoodsMakerCd.GetInt(), out makerUMnt);
                                    this.SetGoodsUnitDataFromMaker(makerUMnt, ref this._editGoodsUnitData);

                                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                    {
                                        // 商品コードは入力されているか　→　商品変更ON
                                        if (!this.tEdit_GoodsNo.DataText.Equals(string.Empty))
                                            changedGoods = true;

                                        // --- DEL 2009/02/05 障害ID:11019対応------------------------------------------------------>>>>>
                                        //// メーカーが該当すれば商品コード入力へ
                                        //e.NextCtrl = this.tEdit_GoodsNo;
                                        // --- DEL 2009/02/05 障害ID:11019対応------------------------------------------------------<<<<<
                                    }
                                    else
                                    {
                                        TMsgDisp.Show(
                                            this,
                                            emErrorLevel.ERR_LEVEL_INFO,
                                            this.Name,
                                            "メーカーコードが存在しません。",
                                            -1,
                                            MessageBoxButtons.OK);
                                        // 非存在時はフォーカス移動無し
                                        e.NextCtrl = e.PrevCtrl;
                                        break;
                                    }

                                }
                                else
                                {
                                    this._editGoodsUnitData.GoodsMakerCd = 0;
                                    this._editGoodsUnitData.MakerName = "";
                                    this.SetGoodsUnitDataFromMaker(null, ref this._editGoodsUnitData);
                                }
                                changeInfo = true;// ADD 黄興貴 2015/09/10 Redmine#47026
                            }
                            // --- ADD 2009/02/10 障害ID:11233対応------------------------------------------------------>>>>>
                            else
                            {
                                if (this.tNedit_GoodsMakerCd.GetInt() == 0)
                                {
                                    this._editGoodsUnitData.GoodsMakerCd = 0;
                                    this._editGoodsUnitData.MakerName = "";
                                    this.SetGoodsUnitDataFromMaker(null, ref this._editGoodsUnitData);
                                }
                            }
                            // --- ADD 2009/02/10 障害ID:11233対応------------------------------------------------------<<<<<

                            if (this.tNedit_GoodsMakerCd.GetInt() != 0)
                            {
                                if (e.Key == Keys.Return && this.tEdit_GoodsNo.Enabled && this.tEdit_GoodsNo.Visible)
                                    // --- CHG 2009/02/05 障害ID:11019対応------------------------------------------------------>>>>>
                                    //e.NextCtrl = this.tEdit_GoodsNo;
                                    e.NextCtrl = this.tEdit_GoodsName;
                                // --- CHG 2009/02/05 障害ID:11019対応------------------------------------------------------<<<<<
                            }
                            // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>
                            // MEMO:新規品番の場合、メーカーが変化するので、価格情報を再設定する
                            UpdatePriceInputTab();
                            // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ----------<<<<<

                            break;
                        }

                    // ----------------------------------------
                    // 品番
                    case "tEdit_GoodsNo":
                        {
                            if (this._editGoodsUnitData.GoodsNo.CompareTo(this.tEdit_GoodsNo.DataText) != 0)
                            {
                                if (!this.tEdit_GoodsNo.DataText.Equals(string.Empty))
                                {
                                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 DEL
                                    //// メーカーコードは設定されているか？
                                    //if (this.tNedit_GoodsMakerCd.GetInt() != 0)
                                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 DEL
                                    changedGoods = true;
                                }
                                // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>
                                else
                                {
                                    // MEMO:品番が未入力に変化したので、価格情報の掛率情報をクリア
                                    ClearRateInfoOnPriceInputTab();
                                }
                                changeInfo = true;// ADD 黄興貴 2015/09/10 Redmine#47026
                                // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ----------<<<<<
                            }
                            /* -- DEL wangf 2011/09/13 ---------->>>>>
                            // --- ADD caohh 2011/08/02 ----------------------------->>>>>
                            // 保存前情報が『クリアする』場合
                            else
                            {
                                if (this._saveInfoDiv == 1 && this.uLabel_InputModeTitle.Text.Equals(NEW_INPUT_TITLE))
                                {
                                    if (!this.tEdit_GoodsNo.DataText.Equals(string.Empty))
                                    {
                                        //品番は設定されているか？
                                        changedGoods = true;
                                    }
                                }
                            }
                            // --- ADD caohh 2011/08/02 -----------------------------<<<<<
                            // -- DEL wangf 2011/09/13 ----------<<<<<*/
                            break;
                        }
                    // ----------------------------------------
                    // 品名
                    case "tEdit_GoodsName":
                        {
                            if (e.ShiftKey == false)
                            {
                                if (e.Key == Keys.Up)
                                {
                                    e.NextCtrl = this.tNedit_GoodsMakerCd;
                                }
                                // --- ADD 2010/08/09 ---------->>>>>
                                if (e.Key == Keys.Right)
                                {
                                    e.NextCtrl = this.tEdit_GoodsName;
                                }
                                // --- ADD 2010/08/09 ----------<<<<<
                            }
                            break;
                        }
                    // --- ADD 2010/08/09 ---------->>>>>
                    // --- Add 2012/12/01 zhangy3 for Redmine#33231 ----->>>>>
                    //仕入先
                    case "tNedit_PayeeCode":
                        {
                            if (!string.IsNullOrEmpty(tNedit_PayeeCode.DataText))
                            {
                                if (_supplierAcs == null)
                                    _supplierAcs = new SupplierAcs();
                                int code = 0;
                                string name;
                                bool serStatus = ReadSupplierCode(tNedit_PayeeCode.GetInt(), out code, out name);
                                if (!serStatus)
                                {
                                    TMsgDisp.Show(
                                    this,
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    this.Name,
                                    "仕入先コードが存在しません。",
                                    -1,
                                    MessageBoxButtons.OK);
                                    tNedit_PayeeCode.DataText = string.Empty;
                                    this.tEdit_PayeeName.Clear();
                                    this.tEdit_PayeePattern.Clear();
                                    e.NextCtrl = e.PrevCtrl;
                                    return;
                                }
                                if (string.IsNullOrEmpty(tEdit_PayeePattern.DataText))
                                {
                                    if (code != 0)
                                    {
                                        if (curFoundGoodsMngPattern == GoodsAcs.GoodsMngSettingPattern.None || curFoundGoodsMngPattern == GoodsAcs.GoodsMngSettingPattern.AllSection_Maker_GoodsNo)
                                        {
                                            this.tEdit_PayeeName.DataText = name;
                                            this.tEdit_PayeePattern.DataText = "全社＋メーカー＋品番";
                                            curFoundGoodsMngPattern = GoodsAcs.GoodsMngSettingPattern.AllSection_Maker_GoodsNo;
                                        }
                                        else
                                        {
                                            this.tEdit_PayeeName.DataText = name;
                                            this.tEdit_PayeePattern.DataText = GetGoodsMngSettingPatternName(curFoundGoodsMngPattern);
                                        }
                                    }
                                }
                                else
                                {
                                    if (code != 0)
                                    {
                                        this.tEdit_PayeeName.DataText = name;
                                        this.tEdit_PayeePattern.DataText = GetGoodsMngSettingPatternName(curFoundGoodsMngPattern);
                                    }
                                }
                            }
                            else
                            {
                                this.tNedit_PayeeCode.Clear();
                                this.tEdit_PayeeName.Clear();
                                this.tEdit_PayeePattern.Clear();
                            }
                            # region [フォーカス制御]
                            if (tNedit_PayeeCode.GetInt() != 0)
                            {
                                if (!e.ShiftKey)
                                {
                                    // NextCtrl制御
                                    switch (e.Key)
                                    {
                                        case Keys.Return:
                                        case Keys.Tab:
                                            {
                                                e.NextCtrl = GoodsKindCode_tComboEditor;
                                                break;
                                            }
                                    }
                                }
                            }
                            # endregion
                            break;
                        }
                    //仕入先ガイド
                    case "PayeeCodeGuid_uButton":
                        {
                            if (!e.ShiftKey)
                            {
                                // NextCtrl制御
                                switch (e.Key)
                                {
                                    case Keys.Return:
                                    case Keys.Tab:
                                        {
                                            e.NextCtrl = GoodsKindCode_tComboEditor;
                                            break;
                                        }
                                }
                            }
                            break;
                        }
                    // --- Add 2012/12/01 zhangy3 for Redmine#33231 -----<<<<<
                    // JAN コード
                    case "tEdit_Jan":
                        {
                            if (e.ShiftKey == false)
                            {
                                if (e.Key == Keys.Right)
                                {
                                    e.NextCtrl = this.tEdit_Jan;
                                }

                            }
                            break;
                        }
                    // 商品備考１
                    case "GoodsNote1_tEdit":
                        {
                            if (e.ShiftKey == false)
                            {
                                if (e.Key == Keys.Right)
                                {
                                    e.NextCtrl = this.GoodsNote1_tEdit;
                                }

                            }
                            break;
                        }
                    // 商品備考２
                    case "GoodsNote2_tEdit":
                        {
                            if (e.ShiftKey == false)
                            {
                                if (e.Key == Keys.Right)
                                {
                                    e.NextCtrl = this.GoodsNote2_tEdit;
                                }

                            }
                            break;
                        }
                    // --- ADD 2010/08/09 ----------<<<<<
                    // ----------------------------------------
                    // BLコード
                    case "tNedit_BLGoodsCode":
                        {
                            if (this._editGoodsUnitData.BLGoodsCode != this.tNedit_BLGoodsCode.GetInt())
                            {
                                if (this.tNedit_BLGoodsCode.GetInt() != 0)
                                {

                                    // BLコード情報取得＆設定
                                    BLGoodsCdUMnt bLGoodsCdUMnt;
                                    status = this._goodsAcs.GetBLGoodsCd(this.tNedit_BLGoodsCode.GetInt(), out bLGoodsCdUMnt);
                                    this.SetGoodsUnitDataFromBLGoodsCd(bLGoodsCdUMnt, ref this._editGoodsUnitData);

                                    if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                    {
                                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 ADD
                                        // クリア
                                        GoodsLGroupName_tEdit.Clear();
                                        GoodsMGroupName_tEdit.Clear();
                                        GoodsRateGrpName_tEdit.Clear();
                                        BLGroupName_tEdit.Clear();
                                        // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                                        tNedit_GoodsLGroup.Clear();
                                        tNedit_GoodsMGroup.Clear();
                                        tNedit_RateGrpCode.Clear();
                                        tNedit_BLGloupCode.Clear();
                                        // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<
                                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 ADD

                                        TMsgDisp.Show(
                                            this,
                                            emErrorLevel.ERR_LEVEL_INFO,
                                            this.Name,
                                            "ＢＬコードが存在しません。",
                                            -1,
                                            MessageBoxButtons.OK);
                                        // 非存在時はフォーカス移動無し
                                        e.NextCtrl = e.PrevCtrl;

                                        // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>
                                        // MEMO:BLコードが設定されたので、価格情報を再計算
                                        UpdatePriceInputTab();
                                        // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ----------<<<<<

                                        break;
                                    }
                                    else
                                    {
                                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 DEL
                                        //BLGroupU bLGroupU = null;
                                        //GoodsGroupU goodsMGroup = null;
                                        //UserGdBdU goodsLGroup = null;
                                        //if (bLGoodsCdUMnt != null)
                                        //{
                                        //    // BLグループコード情報取得＆設定
                                        //    this._goodsAcs.GetBLGroup(this._enterpriseCode, bLGoodsCdUMnt.BLGloupCode, out bLGroupU);
                                        //}
                                        //this.SetGoodsUnitDataFromBLGroup(bLGroupU, ref this._editGoodsUnitData);
                                        //if (bLGroupU != null)
                                        //{
                                        //    // 中分類コード情報取得＆設定
                                        //    this._goodsAcs.GetGoodsMGroup(this._enterpriseCode, bLGroupU.GoodsMGroup, out goodsMGroup);
                                        //    // 大分類コード情報取得＆設定
                                        //    this._goodsAcs.GetGoodsLGroup(this._enterpriseCode, bLGroupU.GoodsLGroup, out goodsLGroup);
                                        //}
                                        //this.SetGoodsUnitDataFromGoodsMGroup(goodsMGroup, ref this._editGoodsUnitData);
                                        //this.SetGoodsUnitDataFromGoodsLGroup(goodsLGroup, ref this._editGoodsUnitData);
                                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 DEL
                                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 ADD
                                        this.SetGoodsUnitDataFromGoodsRelation(bLGoodsCdUMnt, ref this._editGoodsUnitData);
                                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 ADD
                                    }
                                }
                                else
                                {
                                    this._editGoodsUnitData.BLGoodsCode = 0;
                                    this._editGoodsUnitData.BLGoodsFullName = "";
                                    this.SetGoodsUnitDataFromBLGoodsCd(null, ref this._editGoodsUnitData);

                                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 ADD
                                    // クリア
                                    GoodsLGroupName_tEdit.Clear();
                                    GoodsMGroupName_tEdit.Clear();
                                    GoodsRateGrpName_tEdit.Clear();
                                    BLGroupName_tEdit.Clear();
                                    // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                                    tNedit_GoodsLGroup.Clear();
                                    tNedit_GoodsMGroup.Clear();
                                    tNedit_RateGrpCode.Clear();
                                    tNedit_BLGloupCode.Clear();
                                    // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<
                                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 ADD
                                }
                            }

                            if (this.tNedit_BLGoodsCode.GetInt() != 0)
                            {
                                if (!e.ShiftKey)
                                {
                                    switch (e.Key)
                                    {
                                        case Keys.Tab:
                                        case Keys.Return:
                                            {
                                                // --- UPD 2010/06/08 ---->>>>>
                                                //e.NextCtrl = this.tNedit_EnterpriseGanreCode;
                                                e.NextCtrl = this.tEdit_Jan;
                                                // --- UPD 2010/06/08 ----<<<<<

                                                // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>
                                                // MEMO:BLコードが設定されたので、価格情報を再計算
                                                UpdatePriceInputTab();
                                                // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ----------<<<<<
                                            }
                                            break;
                                    }
                                }
                            }
                            // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>
                            // MEMO:BLコードが設定されたので、価格情報を再計算
                            UpdatePriceInputTab();
                            // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ----------<<<<<
                            // ADD 2010/01/07 MANTIS対応[14859]：品名が未入力の場合、BLコードマスタのBLコード名を設定 ---------->>>>>
                            // UNDONE:品名が未入力の場合、BLコードマスタのBLコード名およびBLコード名(ｶﾅ)を設定
                            SetGoodsNameIf(this.tNedit_BLGoodsCode.GetInt());
                            // ADD 2010/01/07 MANTIS対応[14859]：品名が未入力の場合、BLコードマスタのBLコード名を設定 ----------<<<<<
                            // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの仕入先を表示 ---------->>>>>
                            // MEMO:BLコードが設定されたので、商品在庫管理マスタの仕入先を更新
                            UpdateEditingGoodsUnitDataFromScreen();
                            SetGoodsMngSupplier(this._editGoodsUnitData);
                            // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの仕入先を表示 ----------<<<<<

                            break;
                        }
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki
                    // 商品区分（自社分類）
                    case "tNedit_EnterpriseGanreCode":
                        {
                            # region [自社分類]
                            bool readStatus;
                            if (tNedit_EnterpriseGanreCode.GetInt() == _editGoodsUnitData.EnterpriseGanreCode)
                            {
                                readStatus = true;
                            }
                            else
                            {
                                int code;
                                string name;

                                // ユーザーガイド読み込み
                                readStatus = ReadUserGuide(ct_UserGdDiv_EnterpriseGanreCode, tNedit_EnterpriseGanreCode.GetInt(), out code, out name);
                                //---ADD 2011/09/06----------------------------->>>>>
                                if (readStatus == false)
                                {
                                    _editGoodsUnitData.EnterpriseGanreCode = 0;
                                }
                                else
                                {
                                //---ADD 2011/09/06-----------------------------<<<<<
                                    _editGoodsUnitData.EnterpriseGanreCode = tNedit_EnterpriseGanreCode.GetInt();
                                }// ADD 2011/09/06
                                tNedit_EnterpriseGanreCode.SetInt(code);
                                tEdit_EnterpriseGanreName.Text = name;
                            }

                            // NextCtrl制御
                            if (readStatus)
                            {
                                if (!e.ShiftKey)
                                {
                                    switch (e.Key)
                                    {
                                        case Keys.Return:
                                        case Keys.Tab:
                                            {
                                                if (_editGoodsUnitData.EnterpriseGanreCode == 0)
                                                {
                                                    e.NextCtrl = this.uButton_EnterpriseGanreGuide;
                                                }
                                                else
                                                {
                                                    e.NextCtrl = this.GoodsRateRank_tEdit;
                                                }
                                                break;
                                            }
                                    }
                                }
                            }
                            else
                            {
                                e.NextCtrl = e.PrevCtrl;

                                TMsgDisp.Show(
                                    this,
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    this.Name,
                                    "商品区分コードが存在しません。",
                                    -1,
                                    MessageBoxButtons.OK);
                            }
                            # endregion
                            break;
                        }
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                    # region 在庫情報
                    // 倉庫コード → 在庫決定
                    case "tEdit_WarehouseCode":
                        {
                            string _prevWarehouseCode = _editStock.WarehouseCode.TrimEnd();
                            string inputWarehouseCode = tEdit_WarehouseCode.Text.TrimEnd();

                            # region [在庫]
                            if (inputWarehouseCode != _prevWarehouseCode)
                            {
                                // 在庫情報退避
                                SetStockFromScreen(ref _editStock);
                                // 在庫情報比較
                                DialogResult dr = SaveCheckEditDatOfStock(1);
                                switch (dr)
                                {
                                    case DialogResult.No:
                                        tEdit_WarehouseCode.Text = _editStock.WarehouseCode;
                                        return;
                                    case DialogResult.Yes:
                                    case DialogResult.Ignore:
                                        break;
                                    default:
                                        return;
                                }

                                Stock readStock;
                                bool readStockStatus = GetStockFromStockWarehouseTable(inputWarehouseCode, out readStock);
                                if (readStockStatus)
                                {
                                    //------------------------------
                                    // 既に登録あり→更新
                                    //------------------------------

                                    // 画面に在庫情報を表示
                                    _editStock = readStock.Clone();
                                    __stock = readStock.Clone();

                                    SetScreenFromStock(_editStock);

                                    # region [フォーカス制御]
                                    if (!e.ShiftKey)
                                    {
                                        // NextCtrl制御
                                        switch (e.Key)
                                        {
                                            case Keys.Return:
                                            case Keys.Tab:
                                                {
                                                    if (_editStock.WarehouseCode == string.Empty)
                                                    {
                                                        e.NextCtrl = this.uButton_WarehouseGuide;
                                                    }
                                                    else
                                                    {
                                                        e.NextCtrl = this.tEdit_SectionCode;
                                                    }
                                                    break;
                                                }
                                        }
                                    }
                                    # endregion
                                }
                                else if (_editGoodsUnitData.LogicalDeleteCode != 0)
                                {
                                    // 論理削除モードならば登録済みでない在庫を表示しない。
                                    tEdit_WarehouseCode.Text = _prevWarehouseCode.TrimEnd();
                                    e.NextCtrl = e.PrevCtrl;
                                }
                                else if (inputWarehouseCode != string.Empty)
                                {
                                    //------------------------------
                                    // まだ登録なし→新規
                                    //------------------------------
                                    bool readStatus;

                                    // 画面に在庫情報を表示
                                    SetScreenFromStock(readStock);

                                    # region [倉庫]
                                    if (tEdit_WarehouseCode.Text == _editStock.WarehouseCode)
                                    {
                                        readStatus = true;
                                    }
                                    else
                                    {
                                        _editStock = readStock.Clone();
                                        __stock = readStock.Clone();

                                        string code;
                                        string name;
                                        string sectionCode;
                                        string sectionName;

                                        // 倉庫(+管理拠点)読み込み
                                        readStatus = ReadWarehouseWithSection(tEdit_WarehouseCode.Text, out code, out name, out sectionCode, out sectionName);

                                        // コード・名称を更新
                                        _editStock.WarehouseCode = code;
                                        tEdit_WarehouseCode.Text = code;
                                        tEdit_WarehouseName.Text = name;
                                        _editStock.SectionCode = sectionCode;
                                        tEdit_SectionCode.Text = sectionCode;
                                        tEdit_SectionName.Text = sectionName;
                                    }
                                    # endregion

                                    # region [フォーカス制御]
                                    if (readStatus == true)
                                    {
                                        if (!e.ShiftKey)
                                        {
                                            // NextCtrl制御
                                            switch (e.Key)
                                            {
                                                case Keys.Return:
                                                case Keys.Tab:
                                                    {
                                                        if (_editStock.WarehouseCode == string.Empty)
                                                        {
                                                            e.NextCtrl = this.uButton_WarehouseGuide;
                                                        }
                                                        else
                                                        {
                                                            e.NextCtrl = this.tEdit_SectionCode;
                                                        }
                                                        break;
                                                    }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        e.NextCtrl = e.PrevCtrl;
                                        TMsgDisp.Show(
                                            this,
                                            emErrorLevel.ERR_LEVEL_INFO,
                                            this.Name,
                                            "倉庫が存在しません。", // TODO:倉庫が存在しません。
                                            -1,
                                            MessageBoxButtons.OK);
                                    }
                                    # endregion
                                }
                                else
                                {
                                    //------------------------------
                                    // 入力クリア
                                    //------------------------------

                                    // 画面に在庫情報を表示
                                    _editStock = readStock.Clone();
                                    __stock = readStock.Clone();

                                    SetScreenFromStock(_editStock);
                                }

                                // 在庫更新モード表示
                                SetStockModeFromExists(readStockStatus);
                            }
                            else
                            {
                                # region [フォーカス制御]
                                if (!e.ShiftKey)
                                {
                                    // NextCtrl制御
                                    switch (e.Key)
                                    {
                                        case Keys.Return:
                                        case Keys.Tab:
                                            {
                                                if (_editStock.WarehouseCode == string.Empty)
                                                {
                                                    e.NextCtrl = this.uButton_WarehouseGuide;
                                                }
                                                else
                                                {
                                                    e.NextCtrl = this.tEdit_SectionCode;
                                                }
                                                break;
                                            }
                                    }
                                }
                                # endregion
                            }

                            # endregion

                            break;
                        }
                    // 管理拠点コード
                    case "tEdit_SectionCode":
                        {
                            # region [拠点]
                            bool readStatus;
                            if (tEdit_SectionCode.Text == _editStock.SectionCode)
                            {
                                readStatus = true;
                            }
                            else
                            {
                                string code;
                                string name;

                                // 拠点読み込み
                                readStatus = ReadSection(tEdit_SectionCode.Text, out code, out name);

                                // コード・名称を更新
                                _editStock.SectionCode = code;
                                tEdit_SectionCode.Text = code;
                                tEdit_SectionName.Text = name;
                            }

                            if (readStatus == true)
                            {
                                if (!e.ShiftKey)
                                {
                                    // NextCtrl制御
                                    switch (e.Key)
                                    {
                                        case Keys.Return:
                                        case Keys.Tab:
                                            {
                                                if (_editStock.SectionCode == string.Empty)
                                                {
                                                    e.NextCtrl = this.uButton_SectionGuide;
                                                }
                                                else
                                                {
                                                    e.NextCtrl = this.tEdit_WarehouseShelfNo;
                                                }
                                                break;
                                            }
                                    }
                                }
                            }
                            else
                            {
                                e.NextCtrl = e.PrevCtrl;
                                TMsgDisp.Show(
                                    this,
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    this.Name,
                                    "拠点が存在しません。",
                                    -1,
                                    MessageBoxButtons.OK);
                            }
                            # endregion
                            break;
                        }
                    // 最低在庫数
                    case "tNedit_MinimumStockCnt":
                        {
                            // 最低在庫数からの脱出時は最低在庫数≦最大在庫数のチェックはしない。
                            break;
                        }
                    // 最高在庫数
                    case "tNedit_MaximumStockCnt":
                        {
                            # region [最高在庫数]
                            if (tNedit_MinimumStockCnt.GetValue() > tNedit_MaximumStockCnt.GetValue())
                            {
                                e.NextCtrl = e.PrevCtrl;
                                TMsgDisp.Show(
                                    this,
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    this.Name,
                                    "最低在庫数≦最高在庫数となるように入力して下さい。",
                                    -1,
                                    MessageBoxButtons.OK);
                            }
                            # endregion
                            break;
                        }
                    // 2008.11.18 add >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    // 発注ロット
                    case "tNedit_SalesOrderUnit":
                        {
                            # region [発注ロット]
                            if (tNedit_SalesOrderUnit.GetValue() > tNedit_MaximumStockCnt.GetValue())
                            {
                                e.NextCtrl = e.PrevCtrl;
                                TMsgDisp.Show(
                                    this,
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    this.Name,
                                    "発注ロット≦最高在庫数となるように入力して下さい。",
                                    -1,
                                    MessageBoxButtons.OK);
                            }
                            # endregion
                            break;
                        }
                    // 2008.11.18 add <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // 発注先コード
                    case "tNedit_SupplierCd":
                        {
                            # region [発注先（仕入先）]
                            bool readStatus;
                            if (tNedit_SupplierCd.GetInt() == _editStock.StockSupplierCode)
                            {
                                readStatus = true;
                            }
                            else
                            {
                                int code;
                                string name;

                                // 仕入先読み込み
                                readStatus = ReadSupplier(tNedit_SupplierCd.GetInt(), out code, out name);

                                // コード・名称を更新
                                _editStock.StockSupplierCode = code;
                                tNedit_SupplierCd.SetInt(code);
                                tEdit_SupplierName.Text = name;
                            }

                            if (readStatus == true)
                            {
                                if (!e.ShiftKey)
                                {
                                    // NextCtrl制御
                                    switch (e.Key)
                                    {
                                        case Keys.Return:
                                        case Keys.Tab:
                                            {
                                                if (_editStock.StockSupplierCode == 0)
                                                {
                                                    e.NextCtrl = this.uButton_SupplierGuide;
                                                }
                                                else
                                                {
                                                    e.NextCtrl = this.tNedit_PartsManagementDivide1;
                                                }
                                                break;
                                            }
                                    }
                                }
                            }
                            else
                            {
                                e.NextCtrl = e.PrevCtrl;
                                TMsgDisp.Show(
                                    this,
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    this.Name,
                                    "発注先が存在しません。",
                                    -1,
                                    MessageBoxButtons.OK);
                            }
                            # endregion
                            break;
                        }
                    // 管理区分１
                    case "tNedit_PartsManagementDivide1":
                        {
                            # region [管理区分１]
                            bool readStatus;
                            if (tNedit_PartsManagementDivide1.Text == _editStock.PartsManagementDivide1)
                            {
                                readStatus = true;
                            }
                            else
                            {
                                int code;
                                string name;

                                // ユーザーガイド読み込み
                                readStatus = ReadUserGuide(ct_UserGdDiv_PartsManagementDivide1, tNedit_PartsManagementDivide1.GetInt(), out code, out name);

                                // コード・名称を更新
                                // (※マスタ未登録コードでもＯＫ)
                                _editStock.PartsManagementDivide1 = tNedit_PartsManagementDivide1.Text;
                                if (readStatus)
                                {
                                    tEdit_PartsManagementDivide1Name.Text = name;
                                }
                                else
                                {
                                    tEdit_PartsManagementDivide1Name.Text = string.Empty;
                                }
                            }

                            // (※マスタ未登録コードでもＯＫ)
                            if (!e.ShiftKey)
                            {
                                // NextCtrl制御
                                switch (e.Key)
                                {
                                    case Keys.Return:
                                    case Keys.Tab:
                                        {
                                            // ---DEL 2009/06/25 不具合対応[13646][13647] ----------------------------->>>>>
                                            //if ( _editStock.PartsManagementDivide1 == string.Empty )
                                            //{
                                            //    e.NextCtrl = this.uButton_PartsManagementDivide1;
                                            //}
                                            //else
                                            //{
                                            //    e.NextCtrl = this.tNedit_PartsManagementDivide2;
                                            //}
                                            // ---DEL 2009/06/25 不具合対応[13646][13647] -----------------------------<<<<<
                                            // ---ADD 2009/06/25 不具合対応[13646][13647] ----------------------------->>>>>
                                            if (tEdit_PartsManagementDivide1Name.Text == string.Empty)
                                            {
                                                e.NextCtrl = this.uButton_PartsManagementDivide1;
                                            }
                                            else
                                            {
                                                e.NextCtrl = this.tNedit_PartsManagementDivide2;
                                            }
                                            // ---ADD 2009/06/25 不具合対応[13646][13647] -----------------------------<<<<<
                                            break;
                                        }
                                }
                            }

                            # endregion
                            break;
                        }
                    // 管理区分２
                    case "tNedit_PartsManagementDivide2":
                        {
                            # region [管理区分２]
                            bool readStatus;
                            if (tNedit_PartsManagementDivide2.Text == _editStock.PartsManagementDivide2)
                            {
                                readStatus = true;
                            }
                            else
                            {
                                int code;
                                string name;

                                // ユーザーガイド読み込み
                                readStatus = ReadUserGuide(ct_UserGdDiv_PartsManagementDivide2, tNedit_PartsManagementDivide2.GetInt(), out code, out name);

                                // コード・名称を更新
                                // (※マスタ未登録コードでもＯＫ)
                                _editStock.PartsManagementDivide2 = tNedit_PartsManagementDivide2.Text;
                                if (readStatus)
                                {
                                    tEdit_PartsManagementDivide2Name.Text = name;
                                }
                                else
                                {
                                    tEdit_PartsManagementDivide2Name.Text = string.Empty;
                                }
                            }

                            // (※マスタ未登録コードでもＯＫ)
                            if (!e.ShiftKey)
                            {
                                // NextCtrl制御
                                switch (e.Key)
                                {
                                    case Keys.Return:
                                    case Keys.Tab:
                                        {
                                            // ---DEL 2009/06/25 不具合対応[13646][13647] ----------------------------->>>>>
                                            //if ( _editStock.PartsManagementDivide2 == string.Empty )
                                            //{
                                            //    e.NextCtrl = this.uButton_PartsManagementDivide2;
                                            //}
                                            //else
                                            //{
                                            //    // 2008.12.12 30413 犬飼 最低在庫数にフォーカス遷移するように修正 >>>>>>START
                                            //    //e.NextCtrl = this.tComboEditor_StockDiv;
                                            //    e.NextCtrl = this.tNedit_MinimumStockCnt;
                                            //    // 2008.12.12 30413 犬飼 最低在庫数にフォーカス遷移するように修正 <<<<<<END
                                            //}
                                            // ---DEL 2009/06/25 不具合対応[13646][13647] -----------------------------<<<<<
                                            // ---ADD 2009/06/25 不具合対応[13646][13647] ----------------------------->>>>>
                                            if (tEdit_PartsManagementDivide2Name.Text == string.Empty)
                                            {
                                                e.NextCtrl = this.uButton_PartsManagementDivide2;
                                            }
                                            else
                                            {
                                                e.NextCtrl = this.tEdit_StockNote1;
                                            }
                                            // ---ADD 2009/06/25 不具合対応[13646][13647] -----------------------------<<<<<


                                            break;
                                        }
                                }
                            }

                            # endregion
                            break;
                        }
                    //--- ADD 2010/08/09---------->>>>>
                    //----- ADD K2013/05/13 王君 Redmine#35663 ----->>>>>
                    case "tNedit_StockUnitPriceFl":
                        {
                            // NextCtrl制御
                            if (!e.ShiftKey)
                            {
                                switch (e.Key)
                                {
                                    case Keys.Return:
                                    case Keys.Tab:
                                        {
                                            if (this.tNedit_SupplierStock.Enabled)
                                            {
                                                e.NextCtrl = this.tNedit_SupplierStock;
                                            }
                                            else
                                            {
                                                e.NextCtrl = this.uGrid_StockWarehouseInfo;
                                            }
                                            break;
                                        }
                                }
                            }
                            break;
                        }
                    // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- >>>>>
                    // 仕入在庫数
                    case "tNedit_SupplierStock":
                        {
                            if (!e.ShiftKey)
                            {
                                switch (e.Key)
                                {
                                    case Keys.Enter:
                                    case Keys.Tab:
                                        {
                                            if (this.tNedit_ShipmentCnt.Enabled)
                                            {
                                                e.NextCtrl = this.tNedit_ShipmentCnt;
                                            }
                                            else
                                            {
                                                e.NextCtrl = this.uGrid_StockWarehouseInfo;
                                            }
                                            break;
                                        }
                                }
                            }
                            break;
                        }
                    case "tNedit_ShipmentCnt":
                        {
                            if (!e.ShiftKey)
                            {
                                switch (e.Key)
                                {
                                    case Keys.Enter:
                                    case Keys.Tab:
                                        {
                                            e.NextCtrl = this.uGrid_StockWarehouseInfo;
                                            break;
                                        }
                                }
                            }
                            else
                            {
                                if (this.tNedit_SupplierStock.Enabled)
                                {
                                    e.NextCtrl = this.tNedit_SupplierStock;
                                }
                                else if (this.tNedit_StockUnitPriceFl.Enabled)
                                {
                                    e.NextCtrl = this.tNedit_StockUnitPriceFl;
                                }
                                else if (this.tDateEdit_lastStockDate.Enabled)
                                {
                                    e.NextCtrl = this.tDateEdit_lastStockDate;
                                }
                            }
                            break;
                        }
                    // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- <<<<<
                    // 在庫備考１
                    case "tEdit_StockNote1":
                        {
                            if (!e.ShiftKey)
                            {
                                switch (e.Key)
                                {
                                    case Keys.Up:
                                        {
                                            if (this.tNedit_SupplierStock.Enabled)
                                            {
                                                e.NextCtrl = this.tNedit_SupplierStock;
                                            }
                                            else
                                            {
                                                e.NextCtrl = this.tNedit_StockUnitPriceFl;
                                            }
                                            break;
                                        }
                                }
                            }
                            break;
                        }
                    //----- ADD K2013/05/13 王君 Redmine#35663 -----<<<<<
                    case "DeleteIndication_CheckEditor":
                        {
                            //----- ADD K2013/05/13 王君 Redmine#35663 ----->>>>>
                            if (e.ShiftKey)
                            {
                                switch (e.Key)
                                {
                                    case Keys.Enter:
                                    case Keys.Tab:
                                        {
                                            // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- >>>>>
                                            if (this.tNedit_ShipmentCnt.Enabled)
                                            {
                                                e.NextCtrl = this.tNedit_ShipmentCnt;
                                            }
                                            // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- <<<<<
                                            //if (this.tNedit_SupplierStock.Enabled)  // DEL huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正
                                            else if (this.tNedit_SupplierStock.Enabled)   // ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正
                                            {
                                                e.NextCtrl = this.tNedit_SupplierStock;
                                            }
                                            else if (this.tNedit_StockUnitPriceFl.Enabled)
                                            {
                                                e.NextCtrl = this.tNedit_StockUnitPriceFl;
                                            }
                                            else if (this.tDateEdit_lastStockDate.Enabled)
                                            {
                                                e.NextCtrl = this.tDateEdit_lastStockDate;
                                            }
                                            break;
                                        }
                                }
                            }
                            else
                            {
                                //----- ADD K2013/05/13 王君 Redmine#35663 -----<<<<<
                            if (_editGoodsUnitData.LogicalDeleteCode == 0)
                            {
                                if (e.Key == Keys.Return)
                                {
                                    DialogResult dialogResult = TMsgDisp.Show(this,
                                                  emErrorLevel.ERR_LEVEL_QUESTION,
                                                  this.Name,
                                                  "登録してもよろしいですか。",
                                                  0,
                                                  MessageBoxButtons.YesNo);
                                    if (dialogResult == DialogResult.Yes)
                                    {
                                        this.Save();
                                        e.NextCtrl = null;
                                    }
                                }
                            }
                            }
                            break;
                        }
                    //--- ADD 2010/08/09----------<<<<<
                    # endregion
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
                    // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ---------->>>>>
                    // 層別
                    case "GoodsRateRank_tEdit":
                        // MEMO:層別が設定されたので、価格情報を再計算
                        UpdatePriceInputTab();
                        break;
                    // ADD 2010/01/05 MANTIS対応[14816]：価格情報の再計算処理の修正 ----------<<<<<
                    // ADD 2008/12/18 不具合対応[9348] ---------->>>>>
                    case "GoodsSpecialNote_tEdit":
                        {
                            if (!e.ShiftKey)
                            {
                                // NextCtrl制御
                                switch (e.Key)
                                {
                                    case Keys.Return:
                                    case Keys.Tab:
                                        {
                                            if (this.ultraTabControl1.SelectedTab.Key == "Price")
                                            {
                                                e.NextCtrl = _goodsPriceInput;
                                            }
                                            else if (this.ultraTabControl1.SelectedTab.Key == "UnitPrice")
                                            {
                                                e.NextCtrl = _unitSalesPriceInput;
                                            }
                                            break;
                                        }
                                    // --- ADD 2010/08/09 ---------->>>>>
                                    case Keys.Right:
                                        {
                                            e.NextCtrl = this.GoodsSpecialNote_tEdit;
                                            break;
                                        }
                                    // --- ADD 2010/08/09 ----------<<<<<
                                }
                            }

                            break;
                        }
                    // ADD 2008/12/18 不具合対応[9348] ----------<<<<<

                    // --- ADD 2010/08/09----------------------------------->>>>>
                    case "GoodsKindCode_tComboEditor":
                    case "TaxationCode_tComboEditor":
                    case "tComboEditor_StockDiv":
                        {
                            this.setTComboEditorByName(e.PrevCtrl.Name);
                            break;
                        }

                    // --- ADD 2010/08/09-----------------------------------<<<<<
                    // --- ADD 黄興貴 2015/09/22 Redmine#47026 --------------->>>>>
                    case "tDateEdit_lastStockDate":
                        {
                            if (tNedit_StockUnitPriceRate.Enabled && !e.ShiftKey)
                            {
                                // --- ADD 黄興貴 2015/09/22 Redmine#47026 フォーカス移動再修正 --------------->>>>>
                                if (e.Key == Keys.Enter || e.Key == Keys.Tab)
                                {
                                // --- ADD 黄興貴 2015/09/22 Redmine#47026 フォーカス移動再修正 ---------------<<<<<
                                    e.NextCtrl = this.tNedit_StockUnitPriceRate;
                                }// ADD 黄興貴 2015/09/22 Redmine#47026 フォーカス移動再修正
                            }
                            break;
                        }
                    // --- ADD 黄興貴 2015/09/22 Redmine#47026 ---------------<<<<<
                }
                // --- ADD 2010/08/09----------------------------------->>>>>
                if (e.NextCtrl is TComboEditor)
                {
                    this._preComboEditorValue = ((TComboEditor)e.NextCtrl).Value;
                }
                // --- ADD 2010/08/09-----------------------------------<<<<<
                #endregion

                #region 商品検索
                // 商品コード変更あり！
                if (changedGoods)
                {
                    List<GoodsUnitData> goodsUnitDataList = new List<GoodsUnitData>();
                    GoodsUnitData goodsUnitData = new GoodsUnitData();
                    string msg = string.Empty;
                    GoodsCndtn cndtn = new GoodsCndtn();
                    cndtn.EnterpriseCode = this._enterpriseCode;
                    cndtn.GoodsMakerCd = this.tNedit_GoodsMakerCd.GetInt();
                    cndtn.GoodsNo = this.tEdit_GoodsNo.DataText;
                    cndtn.SectionCode = this._goodsAcs.LoginSectionCode;
                    cndtn.PriceApplyDate = DateTime.Today; // 2009.02.18
                    cndtn.LogicalMode = (int)ConstantManagement.LogicalMode.GetData01;  // 2009/12/21 Add
                    status = this._goodsAcs.SearchPartsFromGoodsNoNonVariousSearch(cndtn, out goodsUnitDataList, out msg);
                    if (goodsUnitDataList.Count > 0) goodsUnitData = goodsUnitDataList[0];

                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/10 ADD
                    if (goodsUnitData.OfferKubun == 0)
                    {
                        // ※デフォルト=0なので、newでインスタンス生成しただけなら0になっているという前提。

                        // <ユーザー>
                        // 　0:ユーザー登録　→　0:ユーザー
                        goodsUnitData.OfferDataDiv = 0;
                    }
                    else
                    {
                        // <ユーザー>
                        // 　1:提供純正編集,2:提供優良編集　→　1:提供（元は提供だった事を示す）
                        // <提供>
                        // 　3:提供純正,4:提供優良,5:TBO,7:オリジナル部品　→　1:提供
                        goodsUnitData.OfferDataDiv = 1;
                    }
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/10 ADD

                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 ADD
                    List<Rate> rateList = null;
                    if (status == (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN)
                    {
                        // 該当なし時は論理削除分の場合があるので再検索
                        status = this._goodsAcs.ReadGoodsWithRate(this._enterpriseCode, cndtn.GoodsMakerCd, cndtn.GoodsNo, ConstantManagement.LogicalMode.GetDataAll, out goodsUnitData, out rateList);

                        // ADD 2009/11/20 3次分対応 得意先掛率グループ改良 ---------->>>>>
                        // TODO:掛率を再検索
                        if (goodsUnitData != null)
                        {
                            string errMsg = string.Empty;
                            rateList = RateHelper.SearchAll(goodsUnitData, out errMsg);
                        }
                        // ADD 2009/11/20 3次分対応 得意先掛率グループ改良 ----------<<<<<

                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/26 ADD
                        // ReadGoodsWithRateの戻り値はDB_Statusなので、MethodResultの対応する値に変換する
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                        }
                        else if (status == (int)ConstantManagement.DB_Status.ctDB_ERROR)
                        {
                            status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
                        }
                        else
                        {
                            // ctDB_NORMAL・ctDB_ERROR以外はデータ無とみなす。
                            status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                        }
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/26 ADD
                    }
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 ADD
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/11/04 ADD
                    else if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                    {
                        // 該当ありの場合も品名カナや単品売価情報などを取得する為に再検索
                        GoodsUnitData wkGoodsUnitData;
                        List<Rate> wkRateList;
                        // --- CHG 2009/01/06 障害ID:9617対応------------------------------------------------------>>>>>
                        //int wkStatus = this._goodsAcs.ReadGoodsWithRate(this._enterpriseCode, goodsUnitData.GoodsMakerCd, goodsUnitData.GoodsNo, ConstantManagement.LogicalMode.GetData0, out wkGoodsUnitData, out wkRateList);
                        int wkStatus = this._goodsAcs.ReadGoodsWithRate(this._enterpriseCode, goodsUnitData.GoodsMakerCd, goodsUnitData.GoodsNo, ConstantManagement.LogicalMode.GetData01, out wkGoodsUnitData, out wkRateList);
                        // --- CHG 2009/01/06 障害ID:9617対応------------------------------------------------------<<<<<
                        if (wkStatus == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            // ----------------- ADD 2011/09/01 -------------------- >>>>>
                            if (goodsUnitData.SelectedWarehouseCode != null)
                            {
                                wkGoodsUnitData.SelectedWarehouseCode = goodsUnitData.SelectedWarehouseCode;
                            }
                            else 
                            {
                                wkGoodsUnitData.SelectedWarehouseCode = this._editGoodsUnitData.SelectedWarehouseCode;
                            }
                            // ----------------- ADD 2011/09/01 -------------------- <<<<<
                            goodsUnitData = wkGoodsUnitData;
                            rateList = wkRateList;

                            // TODO:掛率を再検索
                            // ADD 2009/11/20 3次分対応 得意先掛率グループ改良 ---------->>>>>
                            string errMsg = string.Empty;
                            rateList = RateHelper.SearchAll(goodsUnitData, out errMsg);
                            // ADD 2009/11/20 3次分対応 得意先掛率グループ改良 ----------<<<<<
                        }
                    }
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/11/04 ADD

                    //// --- ADD 2009/01/06 障害ID:9617対応------------------------------------------------------>>>>>
                    //string errMsg;
                    //List<GoodsUnitData> goodsUnitDataList2;
                    //List<Stock> stockList;
                    //int status2 = this._goodsAcs.Search(cndtn, ConstantManagement.LogicalMode.GetData01, out goodsUnitDataList2, out errMsg);
                    //if ((status2 == 0) && (goodsUnitDataList2 != null))
                    //{
                    //    stockList = goodsUnitDataList2[0].StockList;

                    //    goodsUnitData.StockList = new List<Stock>();

                    //    foreach (Stock stock in stockList)
                    //    {
                    //        goodsUnitData.StockList.Add(stock.Clone());
                    //    }
                    //}
                    //// --- ADD 2009/01/06 障害ID:9617対応------------------------------------------------------<<<<<

                    switch (status)
                    {
                        case (int)ConstantManagement.MethodResult.ctFNC_NORMAL:
                            {
                                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 DEL
                                //if (goodsUnitData.LogicalDeleteCode == 0)
                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 DEL
                                {
                                    DialogResult dialogResult = DialogResult.Yes;
                                    switch (goodsUnitData.OfferKubun)
                                    {
                                        case 0: // ユーザー登録
                                        case 1: // 提供純正編集
                                        case 2: // 提供優良編集
                                            dialogResult = TMsgDisp.Show(
                                                this,
                                                emErrorLevel.ERR_LEVEL_QUESTION,
                                                this.Name,
                                                "入力されたコードの商品情報が既に登録されています。" + "\r\n" + "\r\n" +
                                                "【メーカー名：" + goodsUnitData.MakerName + " " + "品名：" + goodsUnitData.GoodsName + "】" + "\r\n" + "\r\n" +
                                                "編集を行いますか？",
                                                0,
                                                MessageBoxButtons.YesNo,
                                                MessageBoxDefaultButton.Button1);
                                            break;
                                        case 3: // 提供純正
                                        case 4: // 提供優良
                                            break;
                                    }

                                    switch (dialogResult)
                                    {
                                        case (DialogResult.Yes):
                                            {
                                                // 編集
                                                this._editGoodsUnitData = goodsUnitData.Clone();
                                                this._prevStockList = new List<Stock>();
                                                foreach (Stock stock in goodsUnitData.StockList)
                                                {
                                                    this._prevStockList.Add(stock.Clone());
                                                }
                                                this.__goodsUnitData = this._editGoodsUnitData.Clone();
                                                this._goodsPriceInput.GoodsUnitData = this._editGoodsUnitData.Clone();

                                                // 画面再表示
                                                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                                                //this.SetScreenFromGoodsUnitData(this._editGoodsUnitData);
                                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                                                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                                                if (rateList == null)
                                                {
                                                    // 最初の検索でヒットした場合は掛率を別途取得する必要がある
                                                    this._goodsAcs.ReadUnitRate(_editGoodsUnitData, ConstantManagement.LogicalMode.GetData0, out rateList);

                                                    // ADD 2009/11/20 3次分対応 得意先掛率グループ改良 ---------->>>>>
                                                    // TODO:掛率を再検索
                                                    string errMsg = string.Empty;
                                                    //rateList = RateHelper.SearchAll(_editGoodsUnitData, out errMsg);// DEL 黄興貴 2015/09/07 Redmine#47026 仕掛対応
                                                    // --- ADD 黄興貴 2015/09/07 Redmine#47026 仕掛対応 -------->>>>>
                                                    // 提供分データ対して掛率が既に設定する場合、再検索する。
                                                    cndtn.GoodsNo = this._editGoodsUnitData.GoodsNo;
                                                    cndtn.GoodsMakerCd = this._editGoodsUnitData.GoodsMakerCd;

                                                    // 掛率取得
                                                    this.SetRateByNewGoodsNo(cndtn, ref rateList);
                                                    // --- ADD 黄興貴 2015/09/07 Redmine#47026 仕掛対応 --------<<<<<
                                                    // ADD 2009/11/20 3次分対応 得意先掛率グループ改良 ----------<<<<<
                                                }

                                                // --- ADD 2009/01/06 障害ID:9617対応------------------------------------------------------>>>>>
                                                if (this._editGoodsUnitData.LogicalDeleteCode == 0)
                                                {
                                                    // --- CHG 2009/03/17 障害ID:12441対応------------------------------------------------------>>>>>
                                                    if (this.__goodsUnitData.OfferKubun == 0)
                                                    {
                                                        this.uLabel_InputModeTitle.Text = UPDATE_INPUT_TITLE;
                                                    }
                                                    else
                                                    {
                                                        this.uLabel_InputModeTitle.Text = NEW_INPUT_TITLE;
                                                    }
                                                    // --- CHG 2009/03/17 障害ID:12441対応------------------------------------------------------<<<<<
                                                }
                                                else
                                                {
                                                    this.uLabel_InputModeTitle.Text = DELETE_INPUT_TITLE;
                                                }
                                                // --- ADD 2009/01/06 障害ID:9617対応------------------------------------------------------<<<<<

                                                setUpFlag = false; // ADD caohh 2011/08/02
                                               
                                                this.SetScreenFromGoodsUnitData(this._editGoodsUnitData, rateList);
                                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

                                                // ADD 2009/11/24 MANTIS対応[14610]：在庫情報のデフォルト値を設定 ---------->>>>>
                                                // TODO:倉庫情報のデフォルト値を設定
                                                InitializeWarehouseInfoIfCodeIsNullOrEmpty();
                                                // ADD 2009/11/24 MANTIS対応[14610]：在庫情報のデフォルト値を設定 ----------<<<<<

                                                e.NextCtrl = this.tEdit_GoodsName;

                                                break;
                                            }
                                        default:
                                            {
                                                break;
                                            }
                                    }
                                }
                                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 DEL
                                //else
                                //{
                                //    DialogResult dr = TMsgDisp.Show(this,
                                //        emErrorLevel.ERR_LEVEL_INFO,
                                //        this.Name,
                                //        "入力されたコードの商品情報は既に削除されています。" + "\r\n" + "\r\n" + "復活しますか？",
                                //        0,
                                //        MessageBoxButtons.YesNo,
                                //        MessageBoxDefaultButton.Button1);

                                //    switch (dr)
                                //    {
                                //        case (DialogResult.Yes):
                                //            {
                                //                this._editGoodsUnitData = goodsUnitData.Clone();
                                //                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 DEL
                                //                //status = this._goodsAcs.Revival( ref this._editGoodsUnitData, out msg );
                                //                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 DEL
                                //                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 ADD
                                //                __rateList = _unitSalesPriceInput.GetRateListForRevive();
                                //                status = this._goodsAcs.Revival( ref this._editGoodsUnitData, ref __rateList, out msg );
                                //                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 ADD

                                //                switch (status)
                                //                {
                                //                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                //                        {
                                //                            this.__goodsUnitData = this._editGoodsUnitData.Clone();

                                //                            // 画面再表示
                                //                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
                                //                            //this.SetScreenFromGoodsUnitData(this._editGoodsUnitData);
                                //                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
                                //                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                                //                            this.SetScreenFromGoodsUnitData( this._editGoodsUnitData, __rateList );
                                //                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
                                //                            e.NextCtrl = this.tEdit_GoodsName;
                                //                            break;
                                //                        }
                                //                    default:
                                //                        {

                                //                            TMsgDisp.Show(this,
                                //                                emErrorLevel.ERR_LEVEL_STOPDISP,
                                //                                this.Name,
                                //                                msg,
                                //                                status,
                                //                                MessageBoxButtons.OK,
                                //                                MessageBoxDefaultButton.Button1);

                                //                            break;
                                //                        }
                                //                }
                                //                break;
                                //            }
                                //        default:
                                //            {
                                //                e.NextCtrl = e.PrevCtrl;
                                //                break;
                                //            }
                                //    }
                                //}
                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 DEL

                                break;
                            }
                        case (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN:
                        case (int)ConstantManagement.MethodResult.ctFNC_CANCEL:
                            {
                                // 編集
                                this._editGoodsUnitData = goodsUnitData.Clone();
                                this.__goodsUnitData = this._editGoodsUnitData.Clone();
                                this._goodsPriceInput.GoodsUnitData = this._editGoodsUnitData.Clone();
                                // --- ADD 黄興貴 2015/09/07 Redmine#47026 仕掛対応 -------->>>>>
                                // 新規する場合、単品売価がDBに設定されていた場合は設定値を画面に表示する。
                                this.SetRateByNewGoodsNo(cndtn,ref rateList);

                                if (rateList != null)
                                {
                                    // 設定値を画面に表示する
                                    //this._unitSalesPriceInput.SetRateList(rateList);// DEL 黄興貴 2015/09/10 Redmine#47026
                                    //this._unitSalesPriceInput.SetRateList(rateList, 1);// ADD 黄興貴 2015/09/10 Redmine#47026// DEL 黄興貴 2015/09/22 Redmine#47026
                                    this._unitSalesPriceInput.SetRateList(rateList);// ADD 黄興貴 2015/09/22 Redmine#47026
                                }
                                // --- ADD 黄興貴 2015/09/07 Redmine#47026 仕掛対応 --------<<<<<
                                break;
                            }
                        default:
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP,
                                CT_PGID,
                                "商品情報の取得に失敗しました。",
                                status,
                                MessageBoxButtons.OK,
                                MessageBoxDefaultButton.Button1);
                            break;
                    }
                    // ADD 2009/12/16 MANTIS対応[14597]：新規登録時も掛率マスタの情報を表示 ---------->>>>>
                    // MEMO:新規品番の場合、品番が変化するので、価格情報を再設定する
                    UpdatePriceInputTab();
                    // ADD 2009/12/16 MANTIS対応[14597]：新規登録時も掛率マスタの情報を表示 ----------<<<<<
                }
                #endregion

                // --- ADD 黄興貴 2015/09/10 Redmine#47026 --------------->>>>>
                // 品番、またはメーカーが空になると、掛率情報をクリアする。
                if (changeInfo
                    && !changedGoods)
                {
                    string msg = string.Empty;
                    List<Rate> rateListNew;

                    // 商品情報変更すれば、品番、またはメーカーが空になると、掛率情報をクリアする。
                    // 品番又はメーカーが空白ではない場合、上記changedGoodsに処理を行う。
                    if (string.IsNullOrEmpty(this.tEdit_GoodsNo.Text)
                       || tNedit_GoodsMakerCd.GetInt() == 0)
                    {
                        rateListNew = new List<Rate>();

                        // 設定値を画面に表示する
                        this._unitSalesPriceInput.SetRateList(rateListNew);
                    }
                }
                // --- ADD 黄興貴 2015/09/10 Redmine#47026 ---------------<<<<<

                // ADD 2008/12/18 不具合対応[9348] ---------->>>>>
                if (!e.ShiftKey)
                {
                    // ADD 2010/08/11 --------------->>>>>
                    if ((e.PrevCtrl == tDateEdit_lastSalesDate || e.PrevCtrl == tDateEdit_lastStockDate) && e.Key == Keys.Right)
                    {
                        e.NextCtrl = null;
                    } else 
                    {
                    // ADD 2010/08/11 ---------------<<<<<
                        // ADD 2008/12/18 不具合対応[9348] ----------<<<<<
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki
                        // 変則フォーカス制御
                        Control wkNextControl = GetIrregularNextControl(e.PrevCtrl.Name, e.Key, e.ShiftKey);
                        if (wkNextControl != null)
                        {
                            e.NextCtrl = wkNextControl;
                        }
                    } // ADD 2010/08/11
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki
                    // ADD 2008/12/18 不具合対応[9348] ---------->>>>>
                }
                // ADD 2008/12/18 不具合対応[9348] ----------<<<<<

                //---ADD 2010/08/09---------->>>>>
                // ガイドの設定
                Infragistics.Win.UltraWinToolbars.ButtonTool guideButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY];
                if (guideButton != null && e.NextCtrl != null)
                {
                    switch (e.NextCtrl.Name)
                    {
                        case "tNedit_GoodsMakerCd":
                        case "tNedit_BLGoodsCode":
                        case "tNedit_EnterpriseGanreCode":
                        case "tEdit_WarehouseCode":
                        case "tEdit_SectionCode":
                        case "tNedit_SupplierCd":
                        case "tNedit_PartsManagementDivide1":
                        case "tNedit_PartsManagementDivide2":
                        case "tNedit_PayeeCode"://Add 2012/12/01 zhangy3 for Redmine#33231
                            {

                                guideButton.SharedProps.Enabled = true;
                                break;
                            }
                        default:
                            {
                                if (e.NextCtrl.CanFocus && e.NextCtrl.CanSelect) {
                                    guideButton.SharedProps.Enabled = false;
                                }
                                break;
                            }
                    }
                }
                //---ADD 2010/08/09----------<<<<<
        }

        // --- ADD 黄興貴 2015/09/07 Redmine#47026 仕掛対応 -------->>>>>
        /// <summary>
        /// メーカー商品を入力した時点で、単品売価がDBに設定されていた場合は設定値を画面に表示する。
        /// </summary>
        /// <param name="cndtn">画面入力条件「品番など」</param>
        /// <remarks>
        /// <br>Update Note: 2015/09/07 黄興貴</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47026 商品在庫マスタの障害対応</br>
        /// </remarks>
        private void SetRateByNewGoodsNo(GoodsCndtn cndtn, ref List<Rate> rateList)
        {
            // メーカー商品を入力した時点で、単品売価がDBに設定されていた場合は設定値を画面に表示する。
            if (string.IsNullOrEmpty(cndtn.GoodsNo) || cndtn.GoodsMakerCd == 0)
            {
                return;
            }

            GoodsUnitData getRateGoods = new GoodsUnitData();
            getRateGoods.GoodsNo = cndtn.GoodsNo;
            getRateGoods.GoodsMakerCd = cndtn.GoodsMakerCd;
            getRateGoods.EnterpriseCode = this._enterpriseCode;
            getRateGoods.SectionCode = "00";

            string msg = string.Empty;

            //税率を取得する
            rateList = RateHelper.SearchAll(getRateGoods, out msg);
        }
        // --- ADD 黄興貴 2015/09/07 Redmine#47026 仕掛対応 --------<<<<<

        // ADD 2010/01/07 MANTIS対応[14859]：品名が未入力の場合、BLコードマスタのBLコード名を設定 ---------->>>>>
        /// <summary>
        /// UNDONE:品名が未入力の場合、BLコードマスタのBLコード名およびBLコード名(ｶﾅ)を設定します。
        /// </summary>
        /// <param name="blCode">BLコード</param>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>             改良対応</br>
        /// <br>             品名入力項目の変更</br>
        private void SetGoodsNameIf(int blCode)
        {
            if (!string.IsNullOrEmpty(this.tEdit_GoodsName.DataText)) return;

            if (blCode <= 0)
            {
                this.tEdit_GoodsName.Clear();
                // --- DEL 2010/06/08 ---------->>>>>
                //this.tEdit_GoodsNameKana.Clear();
                // --- DEL 2010/06/08 ----------<<<<<
                return;
            }

            if (_bLGoodsCdAcs == null) _bLGoodsCdAcs = new BLGoodsCdAcs();

            BLGoodsCdUMnt blCodeInfo = null;
            _bLGoodsCdAcs.Read(out blCodeInfo, _enterpriseCode, blCode);
            if (blCodeInfo == null)
            {
                this.tEdit_GoodsName.Clear();
                // --- DEL 2010/06/08 ---------->>>>>
                //this.tEdit_GoodsNameKana.Clear();
                // --- DEL 2010/06/08 ----------<<<<<
                return;
            }
            // --- UPD 2010/06/08 ---------->>>>>
            //this.tEdit_GoodsName.DataText = blCodeInfo.BLGoodsFullName;     // 品名
            this.tEdit_GoodsName.DataText = blCodeInfo.BLGoodsHalfName;     // 品名
            // --- UPD 2010/06/08 ----------<<<<<

            // --- DEL 2010/06/08 ---------->>>>>
            // this.tEdit_GoodsNameKana.DataText = blCodeInfo.BLGoodsHalfName; // 品名ｶﾅ
            // --- DEL 2010/06/08 ----------<<<<<
        }
        // ADD 2010/01/07 MANTIS対応[14859]：品名が未入力の場合、BLコードマスタのBLコード名を設定 ----------<<<<<
        // --- ADD 2009/04/06 -------------------------------->>>>>
        /// <summary>
        /// tEdit_WarehouseShelfNo_KeyPressイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_WarehouseShelfNo_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!Char.IsControl(e.KeyChar))
            {
                string prevStr = this.tEdit_WarehouseShelfNo.Text;
                string resultStr = prevStr.Substring(0, this.tEdit_WarehouseShelfNo.SelectionStart) // 選択前の部分
                                 + e.KeyChar.ToString() // 選択部が入力キーに置換される部分
                                 + prevStr.Substring(this.tEdit_WarehouseShelfNo.SelectionStart + this.tEdit_WarehouseShelfNo.SelectionLength,
                                                      this.tEdit_WarehouseShelfNo.Text.Length - (this.tEdit_WarehouseShelfNo.SelectionStart + this.tEdit_WarehouseShelfNo.SelectionLength)); // 選択後の部分

                Encoding sjis = Encoding.GetEncoding("Shift_JIS");

                int byteLength = sjis.GetByteCount(resultStr);

                // 8バイト(半角8桁、全角4桁)まで入力可
                if (byteLength > 8)
                {
                    e.Handled = true;
                    return;
                }
            }
        }

        /// <summary>
        /// tEdit_DuplicationShelfNo1_KeyPressイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_DuplicationShelfNo1_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!Char.IsControl(e.KeyChar))
            {
                string prevStr = this.tEdit_DuplicationShelfNo1.Text;
                string resultStr = prevStr.Substring(0, this.tEdit_DuplicationShelfNo1.SelectionStart) // 選択前の部分
                                 + e.KeyChar.ToString() // 選択部が入力キーに置換される部分
                                 + prevStr.Substring(this.tEdit_DuplicationShelfNo1.SelectionStart + this.tEdit_DuplicationShelfNo1.SelectionLength,
                                                      this.tEdit_DuplicationShelfNo1.Text.Length - (this.tEdit_DuplicationShelfNo1.SelectionStart + this.tEdit_DuplicationShelfNo1.SelectionLength)); // 選択後の部分

                Encoding sjis = Encoding.GetEncoding("Shift_JIS");

                int byteLength = sjis.GetByteCount(resultStr);

                // 8バイト(半角8桁、全角4桁)まで入力可
                if (byteLength > 8)
                {
                    e.Handled = true;
                    return;
                }
            }
        }

        /// <summary>
        /// tEdit_DuplicationShelfNo2_KeyPressイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tEdit_DuplicationShelfNo2_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!Char.IsControl(e.KeyChar))
            {
                string prevStr = this.tEdit_DuplicationShelfNo2.Text;
                string resultStr = prevStr.Substring(0, this.tEdit_DuplicationShelfNo2.SelectionStart) // 選択前の部分
                                 + e.KeyChar.ToString() // 選択部が入力キーに置換される部分
                                 + prevStr.Substring(this.tEdit_DuplicationShelfNo2.SelectionStart + this.tEdit_DuplicationShelfNo2.SelectionLength,
                                                      this.tEdit_DuplicationShelfNo2.Text.Length - (this.tEdit_DuplicationShelfNo2.SelectionStart + this.tEdit_DuplicationShelfNo2.SelectionLength)); // 選択後の部分

                Encoding sjis = Encoding.GetEncoding("Shift_JIS");

                int byteLength = sjis.GetByteCount(resultStr);

                // 8バイト(半角8桁、全角4桁)まで入力可
                if (byteLength > 8)
                {
                    e.Handled = true;
                    return;
                }
            }
        }
        // --- ADD 2009/04/06 --------------------------------<<<<<
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        /// <summary>
        /// BLコード関連情報セット処理（画面表示更新用）
        /// </summary>
        /// <param name="bLGoodsCdUMnt"></param>
        /// <param name="goodsUnitData"></param>
        private void SetGoodsUnitDataFromGoodsRelation( BLGoodsCdUMnt bLGoodsCdUMnt, ref GoodsUnitData goodsUnitData )
        {
            int bLGoodsCode = bLGoodsCdUMnt.BLGoodsCode;
            int status = this._goodsAcs.GetBLGoodsCd( bLGoodsCode, out bLGoodsCdUMnt );
            if (status != 0) return;

            BLGroupU bLGroupU = null;
            GoodsGroupU goodsMGroup = null;
            GoodsGroupU goodsMGroupRG = null;
            UserGdBdU goodsLGroup = null;
            if ( bLGoodsCdUMnt != null )
            {
                // BLグループコード情報取得＆設定
                this._goodsAcs.GetBLGroup( this._enterpriseCode, bLGoodsCdUMnt.BLGloupCode, out bLGroupU );

                // 商品掛率グループ情報取得設定
                this._goodsAcs.GetGoodsMGroup( this._enterpriseCode, bLGoodsCdUMnt.GoodsRateGrpCode, out goodsMGroupRG );
            }
            if ( bLGroupU != null )
            {
                // 中分類コード情報取得＆設定
                this._goodsAcs.GetGoodsMGroup( this._enterpriseCode, bLGroupU.GoodsMGroup, out goodsMGroup );
                // 大分類コード情報取得＆設定
                this._goodsAcs.GetGoodsLGroup( this._enterpriseCode, bLGroupU.GoodsLGroup, out goodsLGroup );
            }
            // ＢＬグループ情報
            this.SetGoodsUnitDataFromBLGroup( bLGroupU, ref goodsUnitData );
            // 中分類情報
            this.SetGoodsUnitDataFromGoodsMGroup( goodsMGroup, ref goodsUnitData );
            // 大分類情報
            this.SetGoodsUnitDataFromGoodsLGroup( goodsLGroup, ref goodsUnitData );
            // 商品掛率グループ情報
            if ( goodsMGroupRG != null )
            {
                this.GoodsRateGrpName_tEdit.Value = goodsMGroupRG.GoodsMGroupName;
                goodsUnitData.GoodsRateGrpName = goodsMGroupRG.GoodsMGroupName;
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ---------->>>>>
                this.tNedit_RateGrpCode.DataText = goodsMGroupRG.GoodsMGroup.ToString("d4");
                // UNDONE:必要？goodsUnitData.GoodsRateGrpCode = goodsMGroupRG.GoodsMGroup;
                // ADD 2010/01/07 MANTIS対応[14860]：コードと名称を表示 ----------<<<<<
            }
        }
        /// <summary>
        /// 削除済み表示するチェック変更イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void DeleteIndication_CheckEditor_CheckedChanged( object sender, EventArgs e )
        {
            SettingLogicalDeleteStockVisible( DeleteIndication_CheckEditor.Checked );

            // 倉庫グリッドの文字色変更
            ChangeWarehouseRowColorAll();
        }

        /// <summary>
        /// 論理削除済み在庫の倉庫表示有無設定
        /// </summary>
        /// <param name="p"></param>
        private void SettingLogicalDeleteStockVisible( bool visible )
        {
            if ( visible )
            {
                // 削除日を表示
                uGrid_StockWarehouseInfo.DisplayLayout.Bands[0].Columns[ct_Col_StockWarehouse_DeleteDate].Hidden = false;

                // 通常OK,論理削除済=OK,完全削除済=NG
                _stockWarehouseTable.DefaultView.RowFilter = string.Format( "{0}<'{1}'",
                                                                            ct_Col_StockWarehouse_LogicalDeleteCode, 3 );
            }
            else
            {
                // 削除日を非表示
                uGrid_StockWarehouseInfo.DisplayLayout.Bands[0].Columns[ct_Col_StockWarehouse_DeleteDate].Hidden = true;

                // 通常OK,論理削除済=NG,完全削除済=NG
                _stockWarehouseTable.DefaultView.RowFilter = string.Format( "{0}<'{1}'", 
                                                                            ct_Col_StockWarehouse_LogicalDeleteCode, 1);
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
        // --- Add 2012/12/01 zhangy3 for Redmine#33231 ----->>>>>
        /// <summary>
        /// 仕入先ガイド
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void PayeeCodeGuid_uButton_Click(object sender, EventArgs e)
        {
            if (_supplierAcs == null)
                _supplierAcs = new SupplierAcs();
            Supplier supplier = null;
            int serStatus = _supplierAcs.ExecuteGuid(out supplier, this._enterpriseCode, "00");
            if (serStatus == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                this.tNedit_PayeeCode.DataText = supplier.PayeeCode.ToString();
                this.tEdit_PayeeName.DataText = supplier.PayeeSnm;
                if (string.IsNullOrEmpty(tEdit_PayeePattern.DataText))
                {
                    this.tEdit_PayeePattern.DataText = "全社+メーカー＋品番";
                }
                ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false;
                GoodsKindCode_tComboEditor.Focus();
            }
        }
        // --- Add 2012/12/01 zhangy3 for Redmine#33231 -----<<<<<
        // -------- ADD START 2014/02/10 高陽 -------->>>>>
        /// <summary>
        /// 規格
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Standard_tEdit_ValueChanged(object sender, EventArgs e)
        {
            byte[] bytes = Encoding.Default.GetBytes(this.Standard_tEdit.DataText);
            if (!this.Standard_tEdit.DataText.Length.Equals(bytes.Length))
            {
                this.Standard_tEdit.Clear();
            }

        }

        /// <summary>
        /// 荷姿
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void PosNo_tEdit_ValueChanged(object sender, EventArgs e)
        {
            byte[] bytes = Encoding.Default.GetBytes(this.PosNo_tEdit.DataText);
            if (!this.PosNo_tEdit.DataText.Length.Equals(bytes.Length))
            {
                this.PosNo_tEdit.Clear();
            }
        }

        /// <summary>
        /// ＰＯＳNo.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Packing_tEdit_ValueChanged(object sender, EventArgs e)
        {
            byte[] bytes = Encoding.Default.GetBytes(this.Packing_tEdit.DataText);
            if (!this.Packing_tEdit.DataText.Length.Equals(bytes.Length))
            {
                this.Packing_tEdit.Clear();
            }
        }

        /// <summary>
        /// メーカー品番
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void MakerGoodsNo_tEdit_ValueChanged(object sender, EventArgs e)
        {
            byte[] bytes = Encoding.Default.GetBytes(this.MakerGoodsNo_tEdit.DataText);
            if (!this.MakerGoodsNo_tEdit.DataText.Length.Equals(bytes.Length))
            {
                this.MakerGoodsNo_tEdit.Clear();
            }
        }
        // -------- ADD END  2014/02/10 高陽 -------->>>>>
        #endregion

		private void OLEScanner_DataEvent(int status)
		{
			//スキャナデータをリストに追加します。（e.statusには、常に０がセットされています。)
			this.ActiveControl.Text = this._OLEScannerController.ScanDataLabel;

			// イベントイネーブル実行
			this._OLEScannerController.DataEventEnabled = true;
        }

        # region [Read処理]
        /// <summary>
        /// 倉庫名称取得
        /// </summary>
        /// <param name="warehouseCode"></param>
        /// <returns></returns>
        private string GetWarehouseName( string warehouseCode )
        {
            string code;
            string name;
            ReadWarehouse( warehouseCode, out code, out name );

            return name;
        }
        /// <summary>
        /// 拠点名称取得処理
        /// </summary>
        /// <param name="sectionCode"></param>
        /// <returns></returns>
        private string GetSectionName( string sectionCode )
        {
            string code;
            string name;
            ReadSection( sectionCode, out code, out name );

            return name;
        }
        /// <summary>
        /// 仕入先名称取得処理
        /// </summary>
        /// <param name="supplierCd"></param>
        /// <returns></returns>
        private string GetSupplierName( int supplierCd )
        {
            int code;
            string name;
            ReadSupplier( supplierCd, out code, out name );

            return name;
        }
        /// <summary>
        /// ユーザーガイド名称取得処理
        /// </summary>
        /// <param name="div"></param>
        /// <param name="userGuideCode"></param>
        /// <returns></returns>
        private string GetUserGuideName( int div, int userGuideCode )
        {
            int code;
            string name;
            ReadUserGuide( div, userGuideCode, out code, out name );

            return name;
        }
        /// <summary>
        /// 拠点Read
        /// </summary>
        /// <param name="sectionCode"></param>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private bool ReadSection( string sectionCode, out string code, out string name )
        {
            bool result = false;

            // 未入力判定
            if ( sectionCode != string.Empty )
            {
                // 読み込み
                if ( _secInfoSetAcs == null )
                {
                    _secInfoSetAcs = new SecInfoSetAcs();
                }
                SecInfoSet secInfoSet;
                int status = _secInfoSetAcs.Read( out secInfoSet, this._enterpriseCode, sectionCode );

                if ( status == 0 && secInfoSet != null )
                {
                    // 該当あり→表示
                    code = secInfoSet.SectionCode.TrimEnd();
                    name = secInfoSet.SectionGuideNm.TrimEnd();

                    result = true;
                }
                else
                {
                    // 該当なし→クリア
                    code = string.Empty;
                    name = string.Empty;

                    // ＮＧにする
                    result = false;
                }
            }
            else
            {
                // 未入力→クリア
                code = string.Empty;
                name = string.Empty;

                result = true;
            }

            return result;
        }
        /// <summary>
        /// 倉庫Read
        /// </summary>
        /// <param name="p"></param>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private bool ReadWarehouse( string warehouseCode, out string code, out string name )
        {
            bool result = false;

            // 未入力判定
            if ( warehouseCode != string.Empty )
            {
                // 読み込み
                if ( _warehouseAcs == null )
                {
                    _warehouseAcs = new WarehouseAcs();
                }
                Warehouse warehouse;
                int status = _warehouseAcs.Read( out warehouse, this._enterpriseCode, string.Empty, warehouseCode );

                if ( status == 0 && warehouse != null )
                {
                    // 該当あり→表示
                    code = warehouse.WarehouseCode.TrimEnd();
                    name = warehouse.WarehouseName.TrimEnd();

                    result = true;
                }
                else
                {
                    // 該当なし→クリア
                    code = string.Empty;
                    name = string.Empty;

                    // ＮＧにする
                    result = false;
                }
            }
            else
            {
                // 未入力→クリア
                code = string.Empty;
                name = string.Empty;

                result = true;
            }

            return result;
        }
        /// <summary>
        /// 倉庫(+管理拠点)読み込み
        /// </summary>
        /// <param name="p"></param>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <param name="sectionCode"></param>
        /// <param name="sectionName"></param>
        /// <returns></returns>
        private bool ReadWarehouseWithSection( string warehouseCode, out string code, out string name, out string sectionCode, out string sectionName )
        {
            bool result = false;

            sectionCode = string.Empty;
            sectionName = string.Empty;


            // 未入力判定
            if ( warehouseCode != string.Empty )
            {
                // 読み込み
                if ( _warehouseAcs == null )
                {
                    _warehouseAcs = new WarehouseAcs();
                }
                Warehouse warehouse;
                int status = _warehouseAcs.Read( out warehouse, this._enterpriseCode, string.Empty, warehouseCode );

                if ( status == 0 && warehouse != null && warehouse.LogicalDeleteCode == 0 )
                {
                    // 該当あり→表示
                    code = warehouse.WarehouseCode.TrimEnd();
                    name = warehouse.WarehouseName.TrimEnd();

                    // 拠点読み込み
                    ReadSection( warehouse.SectionCode, out sectionCode, out sectionName );

                    result = true;
                }
                else
                {
                    // 該当なし→クリア
                    code = string.Empty;
                    name = string.Empty;

                    // ＮＧにする
                    result = false;
                }
            }
            else
            {
                // 未入力→クリア
                code = string.Empty;
                name = string.Empty;

                result = true;
            }

            return result;
        } 

        /// <summary>
        /// 仕入先Read
        /// </summary>
        /// <param name="p"></param>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private bool ReadSupplier( int supplierCd, out int code, out string name )
        {
            bool result = false;

            // 未入力判定
            if ( supplierCd != 0 )
            {
                // 読み込み
                if ( _supplierAcs == null )
                {
                    _supplierAcs = new SupplierAcs();
                }
                Supplier supplier;
                int status = _supplierAcs.Read( out supplier, this._enterpriseCode, supplierCd );

                if ( status == 0 && supplier != null && supplier.LogicalDeleteCode == 0 )
                {
                    // 該当あり→表示
                    code = supplier.SupplierCd;
                    name = supplier.SupplierNm1.TrimEnd();

                    result = true;
                }
                else
                {
                    // 該当なし→クリア
                    code = 0;
                    name = string.Empty;

                    // ＮＧにする
                    result = false;
                }
            }
            else
            {
                // 未入力→クリア
                code = 0;
                name = string.Empty;

                result = true;
            }

            return result;
        }
        // --- Add 2012/12/01 zhangy3 for Redmine#33231 ----->>>>>
        /// <summary>
        /// 仕入先Read
        /// </summary>
        /// <param name="p"></param>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <returns>FLAG</returns>
        /// <br>Note       : 仕入先Readします。</br>
        /// <br>Programmer : zhangy3</br>
        /// <br>Date       : 2012/12/01</br>
        private bool ReadSupplierCode(int supplierCd, out int code, out string name)
        {
            bool result = false;

            // 未入力判定
            if (supplierCd != 0)
            {
                // 読み込み
                if (_supplierAcs == null)
                {
                    _supplierAcs = new SupplierAcs();
                }
                Supplier supplier;
                int status = _supplierAcs.Read(out supplier, this._enterpriseCode, supplierCd);

                if (status == 0 && supplier != null && supplier.LogicalDeleteCode == 0)
                {
                    // 該当あり→表示
                    code = supplier.SupplierCd;
                    name = supplier.SupplierSnm.TrimEnd();

                    result = true;
                }
                else
                {
                    // 該当なし→クリア
                    code = 0;
                    name = string.Empty;

                    // ＮＧにする
                    result = false;
                }
            }
            else
            {
                // 未入力→クリア
                code = 0;
                name = string.Empty;

                result = true;
            }

            return result;
        }
        // --- Add 2012/12/01 zhangy3 for Redmine#33231 -----<<<<<
        /// <summary>
        /// ユーザーガイドRead
        /// </summary>
        /// <param name="partsManagementDivide1Code"></param>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private bool ReadUserGuide( int guideDivCode, int guideCode, out int code, out string name )
        {
            bool result = false;

            // 未入力判定
            // ---DEL 2009/06/25 不具合対応[13646][13647] --------->>>>>
            //if ( guideCode != 0 )
            //{
            // ---DEL 2009/06/25 不具合対応[13646][13647] ---------<<<<<
                // 読み込み
                if ( _userGuideAcs == null )
                {
                    _userGuideAcs = new UserGuideAcs();
                }
                UserGdBd userGdBd;
                UserGuideAcsData userGuideAcsData = UserGuideAcsData.UserBodyData;
                int status = _userGuideAcs.ReadBody( out userGdBd, this._enterpriseCode, guideDivCode, guideCode, ref userGuideAcsData );

                // 修正 2009/07/21 >>>
                //if ( status == 0 && userGdBd != null )
                if (status == 0 && userGdBd != null && userGdBd.LogicalDeleteCode == 0)
                // 修正 2009/07/21 <<<
                {
                    // 該当あり→表示
                    code = userGdBd.GuideCode;
                    name = userGdBd.GuideName.TrimEnd();

                    result = true;
                }
                else
                {
                    // 該当なし→クリア
                    code = 0;
                    name = string.Empty;

                    // ＮＧにする
                    result = false;
                }
            // ---DEL 2009/06/25 不具合対応[13646][13647] --------->>>>>
            //}
            //else
            //{
            //    // 未入力→クリア
            //    code = 0;
            //    name = string.Empty;

            //    result = true;
            //}
            // ---DEL 2009/06/25 不具合対応[13646][13647] ---------<<<<<

            return result;
        }

        # endregion

        # region [在庫登録済み倉庫テーブル操作]
        /// <summary>
        /// 在庫登録済み倉庫テーブル初期設定・グリッド初期設定
        /// </summary>
        private void InitializeStockWarehouseTable()
        {
            //------------------------------------------
            // テーブル生成
            //------------------------------------------
            // 生成
            _stockWarehouseTable = new DataTable();

            // カラム定義
            _stockWarehouseTable.Columns.Add( new DataColumn( ct_Col_StockWarehouse_DeleteDate, typeof( string ) ) );
            _stockWarehouseTable.Columns.Add( new DataColumn( ct_Col_StockWarehouse_Code, typeof( string ) ) );
            _stockWarehouseTable.Columns.Add( new DataColumn( ct_Col_StockWarehouse_Name, typeof( string ) ) );
            _stockWarehouseTable.Columns.Add( new DataColumn( ct_Col_StockWarehouse_Object, typeof( Stock ) ) );
            _stockWarehouseTable.Columns.Add( new DataColumn( ct_Col_StockWarehouse_LogicalDeleteCode, typeof( int ) ) );

            // プライマリキー定義（倉庫コード）
            _stockWarehouseTable.PrimaryKey = new DataColumn[] { _stockWarehouseTable.Columns[ct_Col_StockWarehouse_Code] };
            // 標準ソート順設定（倉庫コード）
            _stockWarehouseTable.DefaultView.Sort = string.Format( "{0} ASC", ct_Col_StockWarehouse_Code );

            //------------------------------------------
            // グリッド初期化
            //------------------------------------------
            // データソース
            uGrid_StockWarehouseInfo.DataSource = _stockWarehouseTable;

            Infragistics.Win.UltraWinGrid.UltraGridBand band = uGrid_StockWarehouseInfo.DisplayLayout.Bands[0];

            // [論理削除コード]
            band.Columns[ct_Col_StockWarehouse_LogicalDeleteCode].Header.Caption = string.Empty;
            band.Columns[ct_Col_StockWarehouse_LogicalDeleteCode].Hidden = true;

            // [削除日]
            band.Columns[ct_Col_StockWarehouse_DeleteDate].Header.Caption = "削除日";
            band.Columns[ct_Col_StockWarehouse_DeleteDate].Hidden = false;
            band.Columns[ct_Col_StockWarehouse_DeleteDate].Width = 68;
            band.Columns[ct_Col_StockWarehouse_DeleteDate].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
            band.Columns[ct_Col_StockWarehouse_DeleteDate].CellAppearance.ForeColor = Color.Red;

            // [コード]
            band.Columns[ct_Col_StockWarehouse_Code].Header.Caption = "倉庫コード";
            band.Columns[ct_Col_StockWarehouse_Code].Hidden = false;
            band.Columns[ct_Col_StockWarehouse_Code].Width = 75;
            band.Columns[ct_Col_StockWarehouse_Code].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;

            // [名称]
            band.Columns[ct_Col_StockWarehouse_Name].Header.Caption = "倉庫名";
            band.Columns[ct_Col_StockWarehouse_Name].Hidden = false;
            band.Columns[ct_Col_StockWarehouse_Name].Width = 100;
            band.Columns[ct_Col_StockWarehouse_Name].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;

            // [在庫クラスオブジェクト]
            band.Columns[ct_Col_StockWarehouse_Object].Header.Caption = string.Empty;
            band.Columns[ct_Col_StockWarehouse_Object].Hidden = true;

            _updateStockWarehouseTable = false;
        }
        /// <summary>
        /// 在庫登録済み倉庫テーブルへの追加（ＵＩ内部保持）
        /// </summary>
        /// <param name="stock"></param>
        private void AddToStockWarehouseTable( Stock stock )
        {
            // マスタから最新の名称を取得
            stock.WarehouseName = this.GetWarehouseName( stock.WarehouseCode );

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/11/04 ADD
            // 部品管理区分１
            try
            {
                int div1 = Int32.Parse( stock.PartsManagementDivide1 );

                // -- DEL 2009/08/04 ----------------------------------->>>
                //if (div1 == 0)
                //{
                //    stock.PartsManagementDivide1 = string.Empty;
                //}
                // -- DEL 2009/08/04 -----------------------------------<<<
            }
            catch
            {
                stock.PartsManagementDivide1 = string.Empty;
            }

            // 部品管理区分２
            try
            {
                int div2 = Int32.Parse( stock.PartsManagementDivide2 );

                // -- DEL 2009/08/04 ----------------------------------->>>
                //if (div2 == 0)
                //{
                //    stock.PartsManagementDivide2 = string.Empty;
                //}
                // -- DEL 2009/08/04 -----------------------------------<<<
            }
            catch
            {
                stock.PartsManagementDivide2 = string.Empty;
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/11/04 ADD

            DataRow row = _stockWarehouseTable.Rows.Find( stock.WarehouseCode );

            if ( row == null )
            {
                // 行生成
                row = _stockWarehouseTable.NewRow();

                // 内容を格納
                if ( stock.LogicalDeleteCode == 0 )
                {
                    row[ct_Col_StockWarehouse_DeleteDate] = string.Empty;
                }
                else
                {
                    row[ct_Col_StockWarehouse_DeleteDate] = TDateTime.DateTimeToString( "ggYY/MM/DD", stock.UpdateDateTime ); ;
                }
                row[ct_Col_StockWarehouse_Code] = stock.WarehouseCode.TrimEnd();
                row[ct_Col_StockWarehouse_Name] = stock.WarehouseName.TrimEnd();
                row[ct_Col_StockWarehouse_Object] = stock;
                row[ct_Col_StockWarehouse_LogicalDeleteCode] = stock.LogicalDeleteCode;

                // 行追加
                _stockWarehouseTable.Rows.Add( row );
            }
            else
            {
                // ＵＩ上物理削除済(ＤＢ未適用)の場合、既存行を更新する
                Stock deletedStock = (Stock)row[ct_Col_StockWarehouse_Object];

                // レコード固有の情報を引き継がせる
                stock.CreateDateTime = deletedStock.CreateDateTime;
                stock.UpdateDateTime = deletedStock.UpdateDateTime;
                stock.EnterpriseCode = deletedStock.EnterpriseCode;
                stock.FileHeaderGuid = deletedStock.FileHeaderGuid;
                stock.UpdEmployeeCode = deletedStock.UpdEmployeeCode;
                stock.UpdAssemblyId1 = deletedStock.UpdAssemblyId1;
                stock.UpdAssemblyId2 = deletedStock.UpdAssemblyId2;
                stock.LogicalDeleteCode = 0;

                // 内容を格納
                row[ct_Col_StockWarehouse_DeleteDate] = string.Empty;
                row[ct_Col_StockWarehouse_Name] = stock.WarehouseName.TrimEnd();
                row[ct_Col_StockWarehouse_LogicalDeleteCode] = stock.LogicalDeleteCode;
                row[ct_Col_StockWarehouse_Object] = stock;
            }
        }
        /// <summary>
        /// 在庫登録済み倉庫テーブルクリア（ＵＩ内部保持）
        /// </summary>
        private void ClearStockWarehouseTable()
        {
            // クリア
            _stockWarehouseTable.Rows.Clear();
            _updateStockWarehouseTable = false;
        }
        /// <summary>
        /// 在庫情報取得（ＵＩ内部保持）
        /// </summary>
        /// <returns>true: 在庫登録あり / false: 在庫登録なし</returns>
        private bool GetStockFromStockWarehouseTable( string warehouseCode, out Stock stock )
        {
            // ----- ADD 王君 K2013/05/13 Redmine#35663 ----->>>>>
            if (warehouseCode != null)
            {
            // ----- ADD 王君 K2013/05/13 Redmine#35663 -----<<<<<
            warehouseCode = warehouseCode.TrimEnd();
            }

            // 倉庫コードで検索する
            DataRow row = _stockWarehouseTable.Rows.Find( warehouseCode );
            if ( row != null )
            {
                // 該当あり
                if ( (int)row[ct_Col_StockWarehouse_LogicalDeleteCode] != 3 )
                {
                    stock = (Stock)row[ct_Col_StockWarehouse_Object];
                    return true;
                }
                else
                {
                    // ＵＩ上で物理削除された在庫を再作成する場合
                    stock = CreateNewStock( warehouseCode );
                    return false;
                }
            }
            else
            {
                // 該当なし
                stock = CreateNewStock( warehouseCode );
                return false;
            }
        }
        /// <summary>
        /// 在庫レコード論理削除（ＵＩ内部保持）
        /// </summary>
        /// <param name="warehouseCode"></param>
        private void LogicalDeleteFromStockWarehouseTable( string warehouseCode )
        {
            // 倉庫コードで検索する
            DataRow row = _stockWarehouseTable.Rows.Find( warehouseCode );

            if ( row != null )
            {
                // 該当あり→論理削除
                ((Stock)row[ct_Col_StockWarehouse_Object]).LogicalDeleteCode = 1;
                row[ct_Col_StockWarehouse_LogicalDeleteCode] = 1;
                // 削除日セット
                row[ct_Col_StockWarehouse_DeleteDate] = TDateTime.DateTimeToString( "ggYY/MM/DD", DateTime.Now );

                // 赤文字に変更
                ChangeWarehouseRowColor( row );

                _updateStockWarehouseTable = true;
            }
        }
        /// <summary>
        /// 倉庫グリッド全行文字色変更処理
        /// </summary>
        private void ChangeWarehouseRowColorAll()
        {
            foreach ( Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in uGrid_StockWarehouseInfo.Rows )
            {
                // 文字色変更処理
                ChangeWarehoseRowColorProc( gridRow );
            }
        }
        /// <summary>
        /// 倉庫グリッド行文字色変更処理
        /// </summary>
        /// <param name="row"></param>
        private void ChangeWarehouseRowColor( DataRow row )
        {
            if ( row == null ) return;

            //------------------------------------------------
            // 対象グリッド行の取得
            //------------------------------------------------
            Infragistics.Win.UltraWinGrid.UltraGridRow targetGridRow = null;

            foreach ( Infragistics.Win.UltraWinGrid.UltraGridRow gridRow in uGrid_StockWarehouseInfo.Rows )
            {
                if ( (string)gridRow.Cells[ct_Col_StockWarehouse_Code].Value == (string)row[ct_Col_StockWarehouse_Code] )
                {
                    targetGridRow = gridRow;
                    break;
                }
            }
            if ( targetGridRow == null ) return;

            // 文字色変更処理
            ChangeWarehoseRowColorProc( targetGridRow );
        }
        /// <summary>
        /// 倉庫グリッド行文字色変更処理
        /// </summary>
        /// <param name="gridRow"></param>
        private void ChangeWarehoseRowColorProc( Infragistics.Win.UltraWinGrid.UltraGridRow gridRow )
        {
            if ( gridRow == null ) return;

            //------------------------------------------------
            // 設定色の取得
            //------------------------------------------------
            Color settingColor;
            if ( (int)gridRow.Cells[ct_Col_StockWarehouse_LogicalDeleteCode].Value == 1 )
            {
                settingColor = Color.Red;
            }
            else
            {
                settingColor = SystemColors.WindowText;
            }

            //------------------------------------------------
            // 文字色の設定
            //------------------------------------------------
            foreach ( Infragistics.Win.UltraWinGrid.UltraGridCell gridCell in gridRow.Cells )
            {
                gridCell.Appearance.ForeColor = settingColor;
                gridCell.Appearance.ForeColorDisabled = settingColor;
            }
        }
        /// <summary>
        /// 在庫レコード復活（ＵＩ内部保持）
        /// </summary>
        /// <param name="warehouseCode"></param>
        private void RevivalFromStockWarehouseTable( string warehouseCode )
        {
            // 倉庫コードで検索する
            DataRow row = _stockWarehouseTable.Rows.Find( warehouseCode );

            if ( row != null )
            {
                // 該当あり→復活
                ((Stock)row[ct_Col_StockWarehouse_Object]).LogicalDeleteCode = 0;
                row[ct_Col_StockWarehouse_LogicalDeleteCode] = 0;

                // 削除日クリア
                row[ct_Col_StockWarehouse_DeleteDate] = string.Empty;

                // 黒文字に戻す
                ChangeWarehouseRowColor( row );

                _updateStockWarehouseTable = true;
            }
        }
        /// <summary>
        /// 在庫情報削除（ＵＩ内部保持）
        /// </summary>
        /// <param name="warehouseCode"></param>
        private void RemoveStockFromStockWarehouseTable( string warehouseCode )
        {
            // 倉庫コードで検索する
            DataRow row = _stockWarehouseTable.Rows.Find( warehouseCode );

            if ( row != null )
            {
                //// 該当あり
                //_stockWarehouseTable.Rows.Remove( row );
                
                // 該当あり→完全削除フラグ(在庫Rに渡す為)
                ((Stock)row[ct_Col_StockWarehouse_Object]).LogicalDeleteCode = 3;
                row[ct_Col_StockWarehouse_LogicalDeleteCode] = 3;

                _updateStockWarehouseTable = true;
            }
        }
        /// <summary>
        /// 在庫レコード新規作成
        /// </summary>
        /// <param name="warehouseCode"></param>
        /// <returns></returns>
        private Stock CreateNewStock( string warehouseCode )
        {
            Stock stock = new Stock();
            stock.EnterpriseCode = this._enterpriseCode;
            stock.WarehouseCode = warehouseCode;

            return stock;
        }
        /// <summary>
        /// 登録用在庫情報リスト取得
        /// </summary>
        /// <param name="isCheck">true:チェック用(登録済在庫テーブルを更新しない) false:更新用</param>
        /// <returns>登録用の在庫情報リスト(表示している商品に結びつく全ての在庫のリスト)</returns>
        private List<Stock> GetStockListFromStockWarehouseTable(bool isCheck)
        {
            // 倉庫コード取得
            // 2008.11.18 UPD >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //string warehouseCode = tEdit_WarehouseCode.Text.Trim();
            string warehouseCode = this.uiSetControl1.GetZeroPaddedText(this.tEdit_WarehouseCode.Name, this.tEdit_WarehouseCode.Text);
            // 2008.11.18 UPD <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            // --- ADD 2008/12/27 -------------------------------->>>>>
            DataTable tmpStockWarehouseTable = new DataTable();
            if (isCheck)
            {
                // チェックの場合は登録済み在庫テーブルを更新しない
                //（更新チェック用に在庫List作成は行い、DataTableは元に戻す）
                tmpStockWarehouseTable = this._stockWarehouseTable.Copy();
            }
            // --- ADD 2008/12/27 --------------------------------<<<<<
            
            if ( warehouseCode != string.Empty )
            {
                //-----------------------------------------------
                // DataTableから在庫情報を取得
                //-----------------------------------------------
                Stock retStock;
                Stock retStockClone;
                bool stockExists = GetStockFromStockWarehouseTable( warehouseCode, out retStock );
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/11/04 ADD
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/11/04 ADD
                retStockClone = retStock.Clone();

                //-----------------------------------------------
                // 値のセット（画面→在庫クラス）
                //-----------------------------------------------
                SetStockFromScreen( ref retStock );

                //-----------------------------------------------
                // 追加or更新
                //-----------------------------------------------
                if ( !stockExists )
                {
                    // 該当なし→DataTableに追加
                    AddToStockWarehouseTable( retStock );
                    _updateStockWarehouseTable = true;
                }
                else
                {
                    // 該当あり→DataTableを更新
                    //（※retStockを書き換えた時点で更新されているので処理不要）
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/17 DEL
                    //if ( !retStock.Equals( retStockClone ) )
                    //{
                    //    _updateStockWarehouseTable = true;
                    //}
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/17 DEL
                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/17 ADD
                    ArrayList differList = retStock.Compare( retStockClone );
                    int differCount = differList.Count;

                    if ( differList.Contains( "CreateDateTime" ) ) differCount--;
                    if ( differList.Contains( "UpdateDateTime" ) ) differCount--;
                    if ( differList.Contains( "UpdateDate" ) ) differCount--;
                    if ( differList.Contains( "GoodsNoNoneHyphen" ) ) differCount--;
                    if ( differCount > 0 )
                    {
                        _updateStockWarehouseTable = true;
                    }
                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/17 ADD
                }
            }

            //-----------------------------------------------
            // DataTableからListを生成
            //-----------------------------------------------
            List<Stock> retList = new List<Stock>();
            foreach ( DataRow row in _stockWarehouseTable.Rows )
            {
                retList.Add( (Stock)row[ct_Col_StockWarehouse_Object] );
            }

            if (isCheck)
            {
                this._stockWarehouseTable.Clear();
                foreach (DataRow dr in tmpStockWarehouseTable.Rows)
                {
                    // チェック用の場合、登録済在庫テーブルを更新しない(元に戻す)
                    this._stockWarehouseTable.ImportRow(dr);
                }
            }

            return retList;
        }
        /// <summary>
        /// データコピー処理（画面 → 在庫クラス）
        /// </summary>
        /// <param name="retStock"></param>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>             改良対応</br>
        /// <br>             在庫関連日付項目の追加</br>                    
        /// <br>Update Note: 2014/01/14 gezh</br>
        /// <br>             Redmine#41448 商品在庫マスタの拠点コードが1で登録されている</br> 
        private void SetStockFromScreen( ref Stock retStock )
        {
            //-----------------------------------------------
            // 在庫情報
            //-----------------------------------------------
            if ( retStock.WarehouseCode != string.Empty && retStock.LogicalDeleteCode == 0 )
            {
                //-----------------------------
                // ＵＩ入力項目
                //-----------------------------

                //retStock.EnterpriseCode = this._enterpriseCode;    // 企業コード（セット不要）
                //retStock.WarehouseCode = warehouseCode; // 倉庫コード(セット不要)

                //retStock.SectionCode = tEdit_SectionCode.Text.TrimEnd(); // 管理拠点（拠点）コード  // DEL gezh 2014/01/14 Redmine#41448
                retStock.SectionCode = tEdit_SectionCode.Text.TrimEnd().PadLeft(2,'0'); // 管理拠点（拠点）コード  // ADD gezh 2014/01/14 Redmine#41448
                retStock.WarehouseShelfNo = tEdit_WarehouseShelfNo.Text.TrimEnd(); // 倉庫棚番
                retStock.DuplicationShelfNo1 = tEdit_DuplicationShelfNo1.Text.TrimEnd(); // 重複棚番１
                retStock.DuplicationShelfNo2 = tEdit_DuplicationShelfNo2.Text.TrimEnd(); // 重複棚番２
                retStock.SupplierStock = tNedit_SupplierStock.GetValue(); // 仕入在庫数
                retStock.ShipmentPosCnt = tNedit_ShipmentPosCnt.GetValue(); // 出荷可能数(現在庫数)
                retStock.MinimumStockCnt = tNedit_MinimumStockCnt.GetValue(); // 最低在庫数
                retStock.MaximumStockCnt = tNedit_MaximumStockCnt.GetValue(); // 最高在庫数
                retStock.SalesOrderUnit = tNedit_SalesOrderUnit.GetInt(); // 発注ロット
                retStock.StockSupplierCode = tNedit_SupplierCd.GetInt(); // 発注先（仕入先）コード

                // --- ADD 2010/06/08 ---------->>>>> 
                // 登録日
                retStock.StockCreateDate = tDateEdit_stockCreateDate.GetDateTime();
                // 最終売上日
                retStock.LastSalesDate = tDateEdit_lastSalesDate.GetDateTime();
                // 最終仕入日
                retStock.LastStockDate = tDateEdit_lastStockDate.GetDateTime();
                // --- ADD 2010/06/08 ----------<<<<< 

                // 2008.11.18 add >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                retStock.ArrivalCnt = tNedit_ArrivalCnt.GetValue(); // 入荷数（未計上）
                retStock.ShipmentCnt = tNedit_ShipmentCnt.GetValue(); // 出荷数（未計上）
                retStock.AcpOdrCount = tNedit_AcpOdrCount.GetValue(); // 受注数
                retStock.MovingSupliStock = tNedit_MovingSupliStock.GetValue(); // 移動中仕入在庫数
                // 2008.11.18 add <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                // --- ADD 2009/01/26 障害ID:10414対応------------------------------------------------------>>>>>
                retStock.SalesOrderCount = tNedit_SalesOrderCount.GetValue();   // 発注残
                // --- ADD 2009/01/26 障害ID:10414対応------------------------------------------------------<<<<<

                // --- ADD 2009/03/05 障害ID:12131対応------------------------------------------------------>>>>>
                retStock.StockUnitPriceFl = tNedit_StockUnitPriceFl.GetValue(); // 棚卸評価単価
                retStock.StockNote1 = tEdit_StockNote1.DataText.Trim();         // 在庫備考１
                retStock.StockNote2 = tEdit_StockNote2.DataText.Trim();         // 在庫備考２
                // --- ADD 2009/03/05 障害ID:12131対応------------------------------------------------------<<<<<

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/11/04 DEL
                //retStock.PartsManagementDivide1 = tNedit_PartsManagementDivide1.GetInt().ToString(); // 部品管理区分１
                //retStock.PartsManagementDivide2 = tNedit_PartsManagementDivide2.GetInt().ToString(); // 部品管理区分２
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/11/04 DEL

                // -- DEL 2009/08/04 ----------------------------------->>>
                //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/11/04 ADD
                //int divide;
                //// 部品管理区分１
                //divide = tNedit_PartsManagementDivide1.GetInt();
                //if ( divide == 0 )
                //{
                //    retStock.PartsManagementDivide1 = string.Empty;
                //}
                //else
                //{
                //    retStock.PartsManagementDivide1 = divide.ToString();
                //}
                //// 部品管理区分２
                //divide = tNedit_PartsManagementDivide2.GetInt();
                //if ( divide == 0 )
                //{
                //    retStock.PartsManagementDivide2 = string.Empty;
                //}
                //else
                //{
                //    retStock.PartsManagementDivide2 = divide.ToString();
                //}
                //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/11/04 ADD
                // -- DEL 2009/08/04 -----------------------------------<<<

                // -- ADD 2009/08/04 ----------------------------------->>>
                retStock.PartsManagementDivide1 = tNedit_PartsManagementDivide1.GetInt().ToString(); // 部品管理区分１
                retStock.PartsManagementDivide2 = tNedit_PartsManagementDivide2.GetInt().ToString(); // 部品管理区分２
                // -- ADD 2009/08/04 -----------------------------------<<<

                retStock.StockDiv = (int)tComboEditor_StockDiv.Value; // 在庫区分

                //-----------------------------
                // 非入力項目
                //-----------------------------
                retStock.GoodsNoNoneHyphen = retStock.GoodsNo.Replace( "-", "" ).TrimEnd(); // ハイフン無品番

                DateTime today = DateTime.Today;
                retStock.UpdateDate = today; // 在庫更新日
                if ( retStock.UpdateDateTime == DateTime.MinValue )
                {
                    retStock.StockCreateDate = today; // 在庫登録日
                }
            }
            _edittingWarehouseCode = retStock.WarehouseCode;
        }
        # endregion

        private void uGrid_StockWarehouseInfo_Leave( object sender, EventArgs e )
        {
            if ( uGrid_StockWarehouseInfo.ActiveRow != null )
            {
                uGrid_StockWarehouseInfo.ActiveRow.Selected = false;
                uGrid_StockWarehouseInfo.ActiveRow = null;
                uGrid_StockWarehouseInfo.Invalidate();
            }
        }
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        /// <summary>
        /// 在庫登録済み倉庫一覧からの在庫選択
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uGrid_StockWarehouseInfo_DoubleClickRow( object sender, Infragistics.Win.UltraWinGrid.DoubleClickRowEventArgs e )
        {
            string warehouseCode = (string)e.Row.Cells[ct_Col_StockWarehouse_Code].Value;
            this.ChoiceStockWarehouse( warehouseCode );
        }
        /// <summary>
        /// 在庫登録済み倉庫選択（在庫選択）
        /// </summary>
        /// <param name="warehouseCode"></param>
        private void ChoiceStockWarehouse( string warehouseCode )
        {
            //if ( _editStock.WarehouseCode != warehouseCode )  // DEL 2008/12/15 不具合対応[8041]
            // ADD 2008/12/15 不具合対応[8041] ---------->>>>>
            if (_editStock.WarehouseCode != warehouseCode ||
                _editStock.LogicalDeleteCode != 0 )
            // ADD 2008/12/15 不具合対応[8041] ---------->>>>>
            {
                // 在庫情報退避
                SetStockFromScreen( ref _editStock );
                // 在庫情報比較
                DialogResult dr = SaveCheckEditDatOfStock( 1 );
                switch ( dr )
                {
                    case DialogResult.No:
                        tEdit_WarehouseCode.Text = _editStock.WarehouseCode;
                        tEdit_WarehouseCode.Focus();
                        ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = true; // ADD 2010/08/09
                        return;
                    case DialogResult.Yes:
                    case DialogResult.Ignore:
                        break;
                    default:
                        return;
                }

                Stock readStock;
                bool readStockStatus = GetStockFromStockWarehouseTable( warehouseCode, out readStock );
                if ( readStockStatus )
                {
                    // 既に登録あり→更新
                    SetStockModeFromExists( readStockStatus );

                    // 画面に在庫情報を表示
                    _editStock = readStock.Clone();
                    __stock = readStock.Clone();

                    SetScreenFromStock( _editStock );
                    SetStockModeFromExists( readStockStatus );
                }
            }

            // フォーカス移動（次項目）
            tEdit_SectionCode.Focus();
            ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = true; // ADD 2010/08/09
        }
        

        /// <summary>
        /// 在庫更新モード表示
        /// </summary>
        /// <param name="readStockStatus"></param>
        private void SetStockModeFromExists( bool readStockStatus )
        {
            if ( readStockStatus )
            {
                // 既存
                uLabel_StockMode.Text = "更新モード";
            }
            else
            {
                // 新規
                uLabel_StockMode.Text = "新規モード";
            }
        }
        /// <summary>
        /// 選択タブ変更時イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ultraTabControl1_SelectedTabChanged( object sender, Infragistics.Win.UltraWinTabControl.SelectedTabChangedEventArgs e )
        {
            // 2010/07/14 在庫仕入入力から呼び出された場合は切替を行わない Add >>>
            if (_stockSlipFlg)
            {
                return;
            }
            // 2010/07/14 Add <<<
            // 在庫系ボタン有効無効設定
            SettingStockOperateButtonsEnabled();

            // ADD 2009/11/24 MANTIS対応[14610]：在庫情報のデフォルト値を設定 ---------->>>>>
            // TODO:倉庫情報のデフォルト値を設定
            InitializeWarehouseInfoIfCodeIsNullOrEmpty();
            // ADD 2009/11/24 MANTIS対応[14610]：在庫情報のデフォルト値を設定 ----------<<<<<
        }

        /// <summary>
        /// 在庫操作系ボタン有効無効設定
        /// </summary>
        /// <param name="enabled"></param>
        private void SettingStockOperateButtonsEnabled()
        {
            // 在庫保存アイコン
            Infragistics.Win.UltraWinToolbars.ButtonTool stockSaveButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_STOCK_SAVEBUTTON_KEY];
            // 在庫削除アイコン
            Infragistics.Win.UltraWinToolbars.ButtonTool stockDeleteButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_STOCK_DELETEBUTTON_KEY];
            // 在庫復活アイコン
            Infragistics.Win.UltraWinToolbars.ButtonTool stockReviveButton = (Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_STOCK_REVIVEBUTTON_KEY];

            
            // 2008.11.18 UPD >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            // 商品が既存修正か？
            if (!tEdit_GoodsNo.Enabled)
            {
                // 在庫情報タブを選択しているか？
                if (ultraTabControl1.SelectedTab.Key == "Stock" && _editGoodsUnitData.LogicalDeleteCode == 0)
                {
                    // 倉庫コード(ゼロ詰め後)取得
                    string warehouseCode = this.uiSetControl1.GetZeroPaddedText(this.tEdit_WarehouseCode.Name, this.tEdit_WarehouseCode.Text);

                    // 倉庫が入力されているか？
                    if (warehouseCode != string.Empty)
                    {
                        // 既存か？
                        Stock stock;
                        bool stockExists = GetStockFromStockWarehouseTable(warehouseCode, out stock);
                        if (stockExists)
                        {
                            // 論理削除済みか？
                            if (stock.LogicalDeleteCode == 0)
                            {
                                // 2010/07/14 Add >>>
                                if (_stockSlipFlg)
                                {
                                    this.Main_tToolbarsManager.Tools[TOOLBAR_SAVEBUTTON_KEY].SharedProps.Enabled = true;
                                    if (stockReviveButton != null) stockReviveButton.SharedProps.Enabled = false;
                                    return;
                                }
                                // 2010/07/14 Add <<<
                                // 更新ＯＫ・削除ＯＫ・復活ＮＧ
                                if (stockSaveButton != null) stockSaveButton.SharedProps.Enabled = true;
                                if (stockDeleteButton != null) stockDeleteButton.SharedProps.Enabled = true;
                                if (stockReviveButton != null) stockReviveButton.SharedProps.Enabled = false;
                            }
                            else
                            {
                                // 2010/07/14 Add >>>
                                if (_stockSlipFlg)
                                {
                                    this.Main_tToolbarsManager.Tools[TOOLBAR_SAVEBUTTON_KEY].SharedProps.Enabled = false;
                                    if (stockReviveButton != null) stockReviveButton.SharedProps.Enabled = true;
                                    return;
                                }
                                // 2010/07/14 Add <<<
                                // 更新ＮＧ・削除ＯＫ・復活ＯＫ
                                if (stockSaveButton != null) stockSaveButton.SharedProps.Enabled = false;
                                if (stockDeleteButton != null) stockDeleteButton.SharedProps.Enabled = true;
                                if (stockReviveButton != null) stockReviveButton.SharedProps.Enabled = true;
                            }
                        }
                        else
                        {
                            // 2010/07/14 Add >>>
                            if (_stockSlipFlg)
                                return;
                            // 2010/07/14 Add <<<
                            // 更新ＯＫ・削除ＮＧ・復活ＮＧ
                            if (stockSaveButton != null) stockSaveButton.SharedProps.Enabled = true;
                            if (stockDeleteButton != null) stockDeleteButton.SharedProps.Enabled = false;
                            if (stockReviveButton != null) stockReviveButton.SharedProps.Enabled = false;
                        }
                    }
                    else
                    {
                        // 全て無効
                        if (stockSaveButton != null) stockSaveButton.SharedProps.Enabled = false;
                        if (stockDeleteButton != null) stockDeleteButton.SharedProps.Enabled = false;
                        if (stockReviveButton != null) stockReviveButton.SharedProps.Enabled = false;
                    }
                }
                else
                {
                    // 全て無効
                    if (stockSaveButton != null) stockSaveButton.SharedProps.Enabled = false;
                    if (stockDeleteButton != null) stockDeleteButton.SharedProps.Enabled = false;
                    if (stockReviveButton != null) stockReviveButton.SharedProps.Enabled = false;
                }
            }
            else
            {
                // 全て無効
                if (stockSaveButton != null) stockSaveButton.SharedProps.Enabled = false;
                if (stockDeleteButton != null) stockDeleteButton.SharedProps.Enabled = false;
                if (stockReviveButton != null) stockReviveButton.SharedProps.Enabled = false;
            }
            // 2008.11.18 UPD <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        }
        /// <summary>
        /// 在庫登録済み倉庫グリッドキーダウン（在庫選択）
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Update Note: K2013/05/13 王君</br>
        /// <br>管理番号   : 10901273-00 2013/06/18配信分</br>
        /// <br>             Redmine#35663 商品在庫マスタ・山形部品様個別組み込み</br>
        /// </remarks>
        private void uGrid_StockWarehouseInfo_KeyDown( object sender, KeyEventArgs e )
        {
            if ( !e.Shift )
            {
                switch ( e.KeyCode )
                {
                    case Keys.Return:
                        {
                            if ( uGrid_StockWarehouseInfo.ActiveRow != null )
                            {
                                string warehouseCode = (string)uGrid_StockWarehouseInfo.ActiveRow.Cells[ct_Col_StockWarehouse_Code].Value;
                                this.ChoiceStockWarehouse( warehouseCode.TrimEnd() );

                                // イベント処理済み扱いにしてデフォルト動作をキャンセルする
                                e.Handled = true;
                            }
                        }
                        break;
                    // --- ADD 2010/08/09---------->>>>>
                    case Keys.Left:
                        {
                            //tNedit_SupplierStock.Focus();// ADD K2013/05/13 王君 Redmine#35663
                            //----- ADD K2013/05/13 王君 Redmine#35663 ----->>>>>
                            if (this.tNedit_SupplierStock.Enabled)
                            {
                            tNedit_SupplierStock.Focus();
                            }
                            else
                            {
                                tNedit_StockUnitPriceFl.Focus();
                            }
                            //----- ADD K2013/05/13 王君 Redmine#35663 -----<<<<<
                            ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false;
                        }
                        break;
                    // --- ADD 2010/08/09----------<<<<<
                    default:
                        {
                        }
                        break;
                }
            }
        }
        /// <summary>
        /// 現在庫数算出処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <br>Update Note: 2011/08/29 wangf 連番1016の対応</br>
        private void tNedit_SupplierStock_ValueChanged( object sender, EventArgs e )
        {
            /* -- del wangf 2011/08/29 ---------->>>>>
            // 2008.11.18 UPD >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //tNedit_ShipmentPosCnt.SetValue(_shipmentPosCountOrigin + tNedit_SupplierStock.GetValue());
            tNedit_ShipmentPosCnt.SetValue(_shipmentPosCountOrigin + tNedit_SupplierStock.GetValue()
                                                                   + tNedit_ArrivalCnt.GetValue()
                                                                   - tNedit_ShipmentCnt.GetValue()
                                                                   - tNedit_AcpOdrCount.GetValue()
                                                                   - tNedit_MovingSupliStock.GetValue());
            // 2008.11.18 UPD <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            // -- del wangf 2011/08/29 ----------<<<<<*/
            // -- add wangf 2011/08/29 ---------->>>>>
            // 在庫管理全体設定の「現在庫表示区分」により、受注数は算出条件追加の判断
            if (this._stockMngTtlStAcs == null)
            {
                this._stockMngTtlStAcs = new StockMngTtlStAcs();
            }
            StockMngTtlSt stockMngTtlSt = new StockMngTtlSt();
            this._stockMngTtlStAcs.Read(out stockMngTtlSt, this._enterpriseCode);
            if (stockMngTtlSt.PreStckCntDspDiv == 0)
            {
                // 受注分含む
                tNedit_ShipmentPosCnt.SetValue(_shipmentPosCountOrigin + tNedit_SupplierStock.GetValue()
                                                                   + tNedit_ArrivalCnt.GetValue()
                                                                   - tNedit_ShipmentCnt.GetValue()
                                                                   - tNedit_AcpOdrCount.GetValue()
                                                                   - tNedit_MovingSupliStock.GetValue());
            }
            else
            {
                // 受注分含まない
                tNedit_ShipmentPosCnt.SetValue(_shipmentPosCountOrigin + tNedit_SupplierStock.GetValue()
                                                                   + tNedit_ArrivalCnt.GetValue()
                                                                   - tNedit_ShipmentCnt.GetValue()
                                                                   - tNedit_MovingSupliStock.GetValue());
            }
            // -- add wangf 2011/08/29 ----------<<<<<
        }
        /// <summary>
        /// 自社分類ガイド
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void uButton__EnterpriseGanreGuide_Click( object sender, EventArgs e )
        {
            // アクセスクラスインスタンス生成
            if ( _userGuideAcs == null )
            {
                _userGuideAcs = new UserGuideAcs();
            }

            // 読み込み
            UserGdHd userGdHd;
            UserGdBd userGdBd;
            int status = _userGuideAcs.ExecuteGuid( this._enterpriseCode, out userGdHd, out userGdBd, ct_UserGdDiv_EnterpriseGanreCode );

            // 結果反映
            if ( status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL )
            {
                // 結果セット
                tNedit_EnterpriseGanreCode.SetInt( userGdBd.GuideCode );
                tEdit_EnterpriseGanreName.Text = userGdBd.GuideName.TrimEnd();
                _editGoodsUnitData.EnterpriseGanreCode = userGdBd.GuideCode;

                // フォーカス移動(次項目)
                GoodsRateRank_tEdit.Focus();
                ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = false; // ADD 2010/08/09
            }
            else
            {
                // フォーカス移動(移動しない)
            }
        }
        /// <summary>
        /// 品名ｶﾅ変更時イベント処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>             改良対応</br>
        /// <br>             品名入力項目の変更</br>                    
        private void tEdit_GoodsNameKana_ValueChanged( object sender, EventArgs e )
        {
            // --- DEL 2010/06/08 ---------->>>>>
            //// 半角ｶﾅにして長さを最大長で丸める
            //string kana = ToHalf( tEdit_GoodsNameKana.Text );
            //tEdit_GoodsNameKana.Text = kana.Substring( 0, Math.Min( kana.Length, tEdit_GoodsNameKana.ExtEdit.Column ) );
            // --- DEL 2010/06/08 ----------<<<<<
        }
        /// <summary>
        /// 全角→半角 変換
        /// </summary>
        /// <param name="text"></param>
        private static string ToHalf( string text )
        {
            return Microsoft.VisualBasic.Strings.StrConv( text, Microsoft.VisualBasic.VbStrConv.Narrow, 0 );
        }
        # region [変則フォーカス制御]
        /// <summary>
        /// 変則フォーカス制御ディクショナリ生成処理
        /// </summary>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>             改良対応</br>
        /// <br>             品名入力項目の変更</br>                    
        /// <br>Update Note: 2012/12/01 zhangy3　</br>
        /// <br>           : 2013/01/16配信分 Redmine#33231 商品在庫マスタ</br>
        private void CreateIrregularFocusControlDictionary()
        {
            if ( _irregularFocusControlDic == null )
            {
                _irregularFocusControlDic = new Dictionary<IrregularFocusControlKey, Control>();

                # region [フォーカス制御一覧]
                //----------------------------------------------------------------------------------------------------------------------------
                // IrregularFocusControlKey( <フォーカス移動元.名前>, <Shiftキー押下=true>, <押下キー>, <Enable=falseだった時の優先順> ) → 移動先
                //----------------------------------------------------------------------------------------------------------------------------
                _irregularFocusControlDic.Add( new IrregularFocusControlKey( BLGoodsGuide_uButton.Name, false, Keys.Down, 0 ), tNedit_EnterpriseGanreCode );
                // --- UPD 2010/06/08 ---------->>>>>
                //_irregularFocusControlDic.Add( new IrregularFocusControlKey( BLGoodsGuide_uButton.Name, false, Keys.Right, 0 ), BLGoodsGuide_uButton );
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(BLGoodsGuide_uButton.Name, false, Keys.Right, 0), tEdit_Jan);
                // --- UPD 2010/06/08 ----------<<<<<
                // --- DEL 2010/06/08 ---------->>>>>
                // _irregularFocusControlDic.Add( new IrregularFocusControlKey( BLGoodsGuide_uButton.Name, false, Keys.Up, 0 ), tEdit_GoodsNameKana );
                // --- DEL 2010/06/08 ----------<<<<<
                _irregularFocusControlDic.Add( new IrregularFocusControlKey( GoodsMakerGuide_uButton.Name, false, Keys.Down, 0 ), tEdit_GoodsNo );
                // --- UPD 2010/06/08 ---------->>>>>
                //_irregularFocusControlDic.Add( new IrregularFocusControlKey( GoodsNote1_tEdit.Name, false, Keys.Up, 0 ), GoodsKindCode_tComboEditor );
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(GoodsNote1_tEdit.Name, false, Keys.Up, 0), TaxationCode_tComboEditor);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(GoodsRateRank_tEdit.Name, false, Keys.Up, 0), tEdit_Jan);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(GoodsKindCode_tComboEditor.Name, false, Keys.Right, 0), GoodsKindCode_tComboEditor);

                // --- UPD 2010/06/08 ----------<<<<<
                _irregularFocusControlDic.Add( new IrregularFocusControlKey( TaxationCode_tComboEditor.Name, false, Keys.Right, 0 ), TaxationCode_tComboEditor );
                // --- UPD 2010/06/08 ---------->>>>>
                //_irregularFocusControlDic.Add( new IrregularFocusControlKey( TaxationCode_tComboEditor.Name, false, Keys.Up, 0 ), GoodsRateRank_tEdit );
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(TaxationCode_tComboEditor.Name, false, Keys.Up, 0), GoodsKindCode_tComboEditor);
                // --- UPD 2010/06/08 ----------<<<<<

                _irregularFocusControlDic.Add( new IrregularFocusControlKey( tComboEditor_StockDiv.Name, false, Keys.Tab, 0 ), tComboEditor_StockDiv );
                // --- CHG 2008/12/12 [障害:9513対応]----------------------------------------------------------->>>>>
                //_irregularFocusControlDic.Add(new IrregularFocusControlKey(tEdit_DuplicationShelfNo1.Name, false, Keys.Right, 0), tEdit_DuplicationShelfNo1);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tEdit_DuplicationShelfNo1.Name, false, Keys.Right, 0), tNedit_MaximumStockCnt);
                // --- CHG 2008/12/12 [障害:9513対応]-----------------------------------------------------------<<<<<
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tEdit_GoodsName.Name, true, Keys.Return, 0), tEdit_GoodsNo);
                _irregularFocusControlDic.Add( new IrregularFocusControlKey( tEdit_GoodsName.Name, true, Keys.Return, 1 ), tEdit_GoodsName );
                _irregularFocusControlDic.Add( new IrregularFocusControlKey( tEdit_GoodsName.Name, true, Keys.Tab, 0 ), tEdit_GoodsNo );
                _irregularFocusControlDic.Add( new IrregularFocusControlKey( tEdit_GoodsName.Name, true, Keys.Tab, 1 ), tEdit_GoodsName );

                // --- DEL 2010/06/08 ---------->>>>>
                // _irregularFocusControlDic.Add( new IrregularFocusControlKey( tEdit_GoodsNameKana.Name, false, Keys.Down, 0 ), tNedit_BLGoodsCode );
                // --- DEL 2010/06/08 ----------<<<<<
                _irregularFocusControlDic.Add( new IrregularFocusControlKey( tEdit_GoodsNo.Name, false, Keys.Right, 0 ), tEdit_GoodsNo );
                // --- ADD 2010/06/08 ---------->>>>>
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tEdit_GoodsName.Name, false, Keys.Down, 0), tNedit_BLGoodsCode);
                //_irregularFocusControlDic.Add(new IrregularFocusControlKey(tEdit_Jan.Name, false, Keys.Down, 0), GoodsRateRank_tEdit);//Del 2012/12/01 zhangy3 for Redmine#33231
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tEdit_Jan.Name, false, Keys.Down, 0), tNedit_PayeeCode);//Add 2012/12/01 zhangy3 for Redmine#33231
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(GoodsRateRank_tEdit.Name, false, Keys.Down, 0), GoodsKindCode_tComboEditor);
                // --- ADD 2010/06/08 ----------<<<<<

                _irregularFocusControlDic.Add( new IrregularFocusControlKey( tEdit_WarehouseCode.Name, false, Keys.Up, 0 ), GoodsSpecialNote_tEdit );
                // --- CHG 2008/12/12 [障害:9513対応]----------------------------------------------------------->>>>>
                //_irregularFocusControlDic.Add(new IrregularFocusControlKey(tEdit_WarehouseShelfNo.Name, false, Keys.Right, 0), tEdit_WarehouseShelfNo);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tEdit_WarehouseShelfNo.Name, false, Keys.Right, 0), tNedit_MinimumStockCnt);
                // --- DEL 2010/06/08 ---------->>>>>
                // --- CHG 2008/12/12 [障害:9513対応]-----------------------------------------------------------<<<<<
                //_irregularFocusControlDic.Add(new IrregularFocusControlKey(tNedit_SalesOrderUnit.Name, false, Keys.Right, 0), tNedit_SalesOrderUnit);
                // --- CHG 2008/12/12 [障害:9513対応]----------------------------------------------------------->>>>>
                // --- DEL 2010/06/08 ----------<<<<<

                //_irregularFocusControlDic.Add(new IrregularFocusControlKey(tNedit_SalesOrderUnit.Name, false, Keys.Up, 0), tEdit_DuplicationShelfNo1);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tNedit_SalesOrderUnit.Name, false, Keys.Up, 0), tNedit_MaximumStockCnt);
                // --- CHG 2008/12/12 [障害:9513対応]-----------------------------------------------------------<<<<<
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(uButton_EnterpriseGanreGuide.Name, false, Keys.Down, 0), GoodsRateRank_tEdit);

                // --- UPD 2010/06/08 ---------->>>>>
                //_irregularFocusControlDic.Add( new IrregularFocusControlKey( uButton_EnterpriseGanreGuide.Name, false, Keys.Right, 0 ), uButton_EnterpriseGanreGuide );
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(uButton_EnterpriseGanreGuide.Name, false, Keys.Right, 0), GoodsRateRank_tEdit);
                //_irregularFocusControlDic.Add(new IrregularFocusControlKey(GoodsRateRank_tEdit.Name, false, Keys.Right, 0), GoodsRateRank_tEdit);//Del 2012/12/01 zhangy3 for Redmine#33231
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(GoodsRateRank_tEdit.Name, false, Keys.Right, 0), tNedit_PayeeCode);//Add 2012/12/01 zhangy3 for Redmine#33231

                // --- UPD 2010/06/08 ---------->>>>>

                _irregularFocusControlDic.Add( new IrregularFocusControlKey( uButton_EnterpriseGanreGuide.Name, false, Keys.Up, 0 ), tNedit_BLGoodsCode );
                _irregularFocusControlDic.Add( new IrregularFocusControlKey( uButton_PartsManagementDivide1.Name, false, Keys.Right, 0 ), uButton_PartsManagementDivide1 );
                _irregularFocusControlDic.Add( new IrregularFocusControlKey( uButton_PartsManagementDivide2.Name, false, Keys.Right, 0 ), uButton_PartsManagementDivide2 );
                _irregularFocusControlDic.Add( new IrregularFocusControlKey( uButton_SectionGuide.Name, false, Keys.Down, 0 ), tEdit_WarehouseShelfNo );
                // --- UPD 2010/06/08 ---------->>>>>
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(uButton_SectionGuide.Name, false, Keys.Right, 0), tDateEdit_lastSalesDate);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tNedit_MinimumStockCnt.Name, false, Keys.Right, 0), tDateEdit_lastStockDate);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tNedit_SalesOrderCount.Name, false, Keys.Right, 0), tNedit_StockUnitPriceFl);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tNedit_MaximumStockCnt.Name, false, Keys.Right, 0), tNedit_SupplierStock);
                // --- ADD 2010/08/09 ---------->>>>>
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tDateEdit_lastSalesDate.Name, false, Keys.Right, 0), tDateEdit_lastSalesDate);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tDateEdit_lastStockDate.Name, false, Keys.Right, 0), tDateEdit_lastStockDate);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tNedit_StockUnitPriceRate.Name, false, Keys.Right, 0), tNedit_StockUnitPriceRate);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tNedit_StockUnitPriceFl.Name, false, Keys.Right, 0), tNedit_StockUnitPriceFl);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tNedit_SupplierStock.Name, false, Keys.Right, 0), tNedit_SupplierStock);
                // --- ADD 2010/08/09 ----------<<<<<

                // --- UPD 2010/06/08 ---------->>>>>
                _irregularFocusControlDic.Add( new IrregularFocusControlKey( uButton_SupplierGuide.Name, false, Keys.Right, 0 ), uButton_SupplierGuide );
                _irregularFocusControlDic.Add( new IrregularFocusControlKey( uButton_WarehouseGuide.Name, false, Keys.Right, 0 ), uButton_WarehouseGuide );
                // --- Add 2012/12/01 zhangy3 for Redmine#33231 ----->>>>>
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tNedit_PayeeCode.Name, false, Keys.Right, 0), PayeeCodeGuid_uButton);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tNedit_PayeeCode.Name, false, Keys.Up, 0), tEdit_Jan);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(tNedit_PayeeCode.Name, false, Keys.Down, 0), GoodsKindCode_tComboEditor);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(PayeeCodeGuid_uButton.Name, false, Keys.Right, 0), PayeeCodeGuid_uButton);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(PayeeCodeGuid_uButton.Name, false, Keys.Up, 0), tEdit_Jan);
                _irregularFocusControlDic.Add(new IrregularFocusControlKey(PayeeCodeGuid_uButton.Name, false, Keys.Down, 0), GoodsKindCode_tComboEditor);
                // --- Add 2012/12/01 zhangy3 for Redmine#33231 -----<<<<<
                # endregion

            }
        }
        /// <summary>
        /// 変則的次フォーカス項目取得処理
        /// </summary>
        /// <param name="prevCtrlName"></param>
        /// <param name="key"></param>
        /// <param name="shiftKey"></param>
        /// <returns></returns>
        private Control GetIrregularNextControl( string prevCtrlName, Keys key, bool shiftKey )
        {
            Control irregularNextCtrl = null;

            if ( _irregularFocusControlDic == null )
            {
                CreateIrregularFocusControlDictionary();
            }

            int prim = 0;
            IrregularFocusControlKey dicKey = new IrregularFocusControlKey( prevCtrlName, shiftKey, key, prim );
            while ( _irregularFocusControlDic.ContainsKey( dicKey ) )
            {
                Control wkNextCtrl = _irregularFocusControlDic[dicKey];
                if ( wkNextCtrl.Enabled == true )
                {
                    // Enabled=trueならば確定
                    irregularNextCtrl = wkNextCtrl;
                    break;
                }
                else
                {
                    // Enabled=falseならば次の候補へ
                    prim++;
                    dicKey = new IrregularFocusControlKey( prevCtrlName, shiftKey, key, prim );
                }
            }

            return irregularNextCtrl;
        }

        # region [フォーカス制御キー]
        /// <summary>
        /// フォーカス制御キー
        /// </summary>
        private struct IrregularFocusControlKey
        {
            /// <summary>前コントロール名</summary>
            private string _prevCtrlName;
            /// <summary>押下キーシフト</summary>
            private bool _shiftKey;
            /// <summary>押下キー</summary>
            private Keys _key;
            /// <summary>優先順</summary>
            private int _enablePrim;
            /// <summary>
            /// 前コントロール名
            /// </summary>
            public string PrevCtrlName
            {
                get { return _prevCtrlName; }
                set { _prevCtrlName = value; }
            }
            /// <summary>
            /// 押下キーシフト
            /// </summary>
            /// <remarks>True:Shift押下</remarks>
            public bool ShiftKey
            {
                get { return _shiftKey; }
                set { _shiftKey = value; }
            }
            /// <summary>
            /// 押下キー
            /// </summary>
            public Keys Key
            {
                get { return _key; }
                set { _key = value; }
            }
            /// <summary>
            /// 優先順
            /// </summary>
            /// <remarks>通常は0を指定。フォーカス移動先がEnabled=falseなら1,2,3…と順番に参照する。</remarks>
            public int EnablePrim
            {
                get { return _enablePrim; }
                set { _enablePrim = value; }
            }
            /// <summary>
            /// コンストラクタ
            /// </summary>
            /// <param name="prevCtrlName">前コントロール名</param>
            /// <param name="shiftKey">押下キーシフト</param>
            /// <param name="key">押下キー</param>
            /// <param name="enablePrim">優先順</param>
            public IrregularFocusControlKey( string prevCtrlName, bool shiftKey, Keys key, int enablePrim )
            {
                _prevCtrlName = prevCtrlName;
                _shiftKey = shiftKey;
                _key = key;
                _enablePrim = enablePrim;
            }
        }
        # endregion

        # endregion
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

        // ADD 2009/11/20 3次分対応 得意先掛率グループ改良 ---------->>>>>
        #region 掛率マスタ

        /// <summary>
        /// 掛率のヘルパクラス
        /// </summary>
        private static class RateHelper
        {
            /// <summary>
            /// 掛率を全て検索します。
            /// </summary>
            /// <remarks>
            /// MAKHN04112A.GoodsAcs.ReadUnitRate()をアレンジ
            /// </remarks>
            /// <param name="goodsUnitData">商品データ</param>
            /// <param name="message">エラーメッセージ</param>
            /// <returns>結果コード</returns>
            /// <remarks>
            /// <br>Update Note: 2012/11/21 zhuhh</br>
            /// <br>管理番号   : 2013/01/16配信分</br>
            /// <br>           : redmine #33230  論理削除データ含む</br>
            /// </remarks>
            public static List<Rate> SearchAll(
                GoodsUnitData goodsUnitData,
                out string message
            )
            {
                // DEL 2010/02/09 MANTIS対応[14980]：価格設定の掛率データが売価情報に表示される ---------->>>>>
                #region 削除コード
                //ArrayList searchedList = null;      // 1パラ目
                //Rate searchingRate = new Rate();    // 2パラ目
                //{
                //    searchingRate.EnterpriseCode= goodsUnitData.EnterpriseCode; // 企業コード
                //    searchingRate.GoodsNo       = goodsUnitData.GoodsNo;        // 品番
                //    searchingRate.GoodsMakerCd  = goodsUnitData.GoodsMakerCd;   // メーカーコード

                //    searchingRate.SectionCode = "00";   // 拠点(←全社を指定)
                //    searchingRate.UnitPriceKind = "1";  // 1:売価設定

                //    searchingRate.RateSettingDivide = string.Empty; // "4A"と"6A"を取得するため指定しない
                //    searchingRate.CustRateGrpCode   = -1;           // 得意先掛率グループは無視
                //    searchingRate.UnitRateSetDivCd  = string.Empty; // "14A"; // 単価掛率設定区分(←売価設定,品番+メーカー,得意先グループ)
                //    searchingRate.LotCount = -1;    // ロット数(-1:無視)
                //}
                //RateAcs rateAccesser = new RateAcs();
                //int status = rateAccesser.SearchAll(out searchedList, ref searchingRate, out message);
                //if (searchedList == null || searchedList.Count.Equals(0))
                //{
                //    return new List<Rate>();
                //}
                //return new List<Rate>((Rate[])searchedList.ToArray(typeof(Rate)));
                #endregion
                // DEL 2010/02/09 MANTIS対応[14980]：価格設定の掛率データが売価情報に表示される ----------<<<<<
                // ADD 2010/02/09 MANTIS対応[14980]：価格設定の掛率データが売価情報に表示される ---------->>>>>
                List<Rate> searchedList = null;                 // 1パラ目
                List<Rate> searchingList = new List<Rate>();    // 2パラ目
                Rate searchingRate14A = new Rate();
                {
                    searchingRate14A.EnterpriseCode = goodsUnitData.EnterpriseCode; // 企業コード
                    searchingRate14A.GoodsNo        = goodsUnitData.GoodsNo;        // 品番
                    searchingRate14A.GoodsMakerCd   = goodsUnitData.GoodsMakerCd;   // メーカーコード

                    searchingRate14A.SectionCode    = "00"; // 拠点(←全社を指定)
                    searchingRate14A.UnitPriceKind  = "1";  // 1:売価設定

                    searchingRate14A.RateSettingDivide  = "4A";
                    searchingRate14A.CustRateGrpCode    = -1;    // 得意先掛率グループは無視
                    searchingRate14A.UnitRateSetDivCd   = "14A"; // 単価掛率設定区分(←売価設定,品番+メーカー,得意先グループ)
                    searchingRate14A.LotCount = -1;    // ロット数(-1:無視)
                }
                Rate searchingRate16A = new Rate();
                {
                    searchingRate16A.EnterpriseCode = goodsUnitData.EnterpriseCode; // 企業コード
                    searchingRate16A.GoodsNo        = goodsUnitData.GoodsNo;        // 品番
                    searchingRate16A.GoodsMakerCd   = goodsUnitData.GoodsMakerCd;   // メーカーコード

                    searchingRate16A.SectionCode    = "00"; // 拠点(←全社を指定)
                    searchingRate16A.UnitPriceKind  = "1";  // 1:売価設定

                    searchingRate16A.RateSettingDivide  = "6A";
                    searchingRate16A.CustRateGrpCode    = -1;       // 得意先掛率グループは無視
                    searchingRate16A.UnitRateSetDivCd   = "16A";    // 単価掛率設定区分(←売価設定,品番+メーカー)
                    searchingRate16A.LotCount = -1;    // ロット数(-1:無視)
                }
                searchingList.Add(searchingRate14A);
                searchingList.Add(searchingRate16A);

                RateAcs rateAccesser = new RateAcs();
                //int status = rateAccesser.Search(out searchedList, searchingList, out message);// DEL zhuhh 2012/11/21 for Redmine #33230
                int status = rateAccesser.SearchDel(out searchedList, searchingList, out message);// ADD zhuhh 2012/11/21 for Redmine #33230
                if (searchedList == null || searchedList.Count.Equals(0))
                {
                    return new List<Rate>();
                }
                return searchedList;
                // ADD 2010/02/09 MANTIS対応[14980]：価格設定の掛率データが売価情報に表示される ----------<<<<<
            }
        }

        #endregion // 掛率マスタ
        // ADD 2009/11/20 3次分対応 得意先掛率グループ改良 ----------<<<<<

        // ADD 2009/11/24 MANTIS対応[14610]：倉庫情報のデフォルト値を設定 ---------->>>>>
        #region 倉庫情報のデフォルト値

        #region 拠点情報

        /// <summary>
        /// 拠点情報のアクセサを取得します。
        /// </summary>
        private SecInfoSetAcs SectionInfoAccesser
        {
            get { return _secInfoSetAcs ?? new SecInfoSetAcs(); }
        }

        /// <summary>ログイン拠点情報</summary>
        private SecInfoSet _loginSectionInfo;
        /// <summary>ログイン拠点情報を取得します。</summary>
        private SecInfoSet LoginSectionInfo
        {
            get
            {
                if (_loginSectionInfo == null)
                {
                    ArrayList searchedList = null;
                    int status = SectionInfoAccesser.SearchAll(out searchedList, _enterpriseCode);
                    if (searchedList != null)
                    {
                        string loginSectionCode = LoginInfoAcquisition.Employee.BelongSectionCode.Trim();

                        List<SecInfoSet> searchedSecInfoList = new List<SecInfoSet>(
                            (SecInfoSet[])searchedList.ToArray(typeof(SecInfoSet))
                        );
                        _loginSectionInfo = searchedSecInfoList.Find(delegate(SecInfoSet item)
                        {
                            return item.SectionCode.Trim().Equals(loginSectionCode);
                        });
                    }
                }
                return _loginSectionInfo;
            }

            set { _loginSectionInfo = value; }
        }

        #endregion // 拠点情報

        #region 倉庫情報

        /// <summary>
        /// 倉庫マスタのアクセサを取得します。
        /// </summary>
        private WarehouseAcs WarehouseAccesser
        {
            get { return _warehouseAcs ?? new WarehouseAcs(); }
        }

        /// <summary>
        /// FIXME:デフォルト倉庫情報を取得します。
        /// </summary>
        /// <value>ログイン拠点の優先倉庫1 ＞ 優先倉庫2 ＞ 優先倉庫3　＞ <c>null</c></value>
        private Warehouse DefaultWarehouse
        {
            get
            {
                // ADD 2010/01/29 MANTIS対応[14959]：在庫情報タブのデフォルト設定は新規登録時は必要なし ---------->>>>>
                // [更新モード時の設定条件]
                // 登録済み倉庫にログイン拠点の優先倉庫を含まない場合、初期値は設定しません。
                // 優先倉庫を含む場合、その優先順に従い、初期値を設定します。
                if (this._editGoodsUnitData == null) return null;
                if (this._editGoodsUnitData.StockList == null || this._editGoodsUnitData.StockList.Count.Equals(0)) return null;

                string defaultWarehouseCode = string.Empty;

                // ログイン拠点の優先倉庫1を検索
                Stock foundStock = this._editGoodsUnitData.StockList.Find(delegate(Stock item)
                {
                    string warehouseCode = item.WarehouseCode.PadLeft(4, '0');
                    if (warehouseCode.Equals(LoginSectionInfo.SectWarehouseCd1.PadLeft(4, '0').Trim()))
                    {
                        // DEL 2010/02/03 MANTIS対応[14963]：論理削除されている在庫情報はデフォルト設定値の対象としない ---------->>>>>
                        // return true;
                        // DEL 2010/02/03 MANTIS対応[14963]：論理削除されている在庫情報はデフォルト設定値の対象としない ---------->>>>>
                        // ADD 2010/02/03 MANTIS対応[14963]：論理削除されている在庫情報はデフォルト設定値の対象としない ---------->>>>>
                        return item.LogicalDeleteCode.Equals(0);
                        // ADD 2010/02/03 MANTIS対応[14963]：論理削除されている在庫情報はデフォルト設定値の対象としない ----------<<<<<
                    }
                    return false;
                });
                if (foundStock != null) defaultWarehouseCode = foundStock.WarehouseCode;

                if (foundStock == null)
                {
                    // ログイン拠点の優先倉庫2を検索
                    foundStock = this._editGoodsUnitData.StockList.Find(delegate(Stock item)
                    {
                        string warehouseCode = item.WarehouseCode.PadLeft(4, '0');
                        if (warehouseCode.Equals(LoginSectionInfo.SectWarehouseCd2.PadLeft(4, '0').Trim()))
                        {
                            // DEL 2010/02/03 MANTIS対応[14963]：論理削除されている在庫情報はデフォルト設定値の対象としない ---------->>>>>
                            // return true;
                            // DEL 2010/02/03 MANTIS対応[14963]：論理削除されている在庫情報はデフォルト設定値の対象としない ---------->>>>>
                            // ADD 2010/02/03 MANTIS対応[14963]：論理削除されている在庫情報はデフォルト設定値の対象としない ---------->>>>>
                            return item.LogicalDeleteCode.Equals(0);
                            // ADD 2010/02/03 MANTIS対応[14963]：論理削除されている在庫情報はデフォルト設定値の対象としない ----------<<<<<
                        }
                        return false;
                    });
                    if (foundStock != null) defaultWarehouseCode = foundStock.WarehouseCode;
                }

                if (foundStock == null)
                {
                    // ログイン拠点の優先倉庫3を検索
                    foundStock = this._editGoodsUnitData.StockList.Find(delegate(Stock item)
                    {
                        string warehouseCode = item.WarehouseCode.PadLeft(4, '0');
                        if (warehouseCode.Equals(LoginSectionInfo.SectWarehouseCd3.PadLeft(4, '0').Trim()))
                        {
                            // DEL 2010/02/03 MANTIS対応[14963]：論理削除されている在庫情報はデフォルト設定値の対象としない ---------->>>>>
                            // return true;
                            // DEL 2010/02/03 MANTIS対応[14963]：論理削除されている在庫情報はデフォルト設定値の対象としない ---------->>>>>
                            // ADD 2010/02/03 MANTIS対応[14963]：論理削除されている在庫情報はデフォルト設定値の対象としない ---------->>>>>
                            return item.LogicalDeleteCode.Equals(0);
                            // ADD 2010/02/03 MANTIS対応[14963]：論理削除されている在庫情報はデフォルト設定値の対象としない ----------<<<<<
                        }
                        return false;
                    });
                    if (foundStock != null) defaultWarehouseCode = foundStock.WarehouseCode;
                }

                // ログイン拠点の優先倉庫は登録されていないので、nullを返す
                if (foundStock == null) return null;

                // 倉庫データに変換
                ArrayList searchedList = null;
                WarehouseAccesser.Search(out searchedList, _enterpriseCode);
                if (searchedList == null || searchedList.Count.Equals(0)) return null;

                List<Warehouse> searchedWarehouseList = new List<Warehouse>(
                    (Warehouse[])searchedList.ToArray(typeof(Warehouse))
                );
                return searchedWarehouseList.Find(delegate(Warehouse item)
                {
                    return item.WarehouseCode.Trim().Equals(defaultWarehouseCode.Trim());
                });
                // ADD 2010/01/29 MANTIS対応[14959]：在庫情報タブのデフォルト設定は新規登録時は必要なし ----------<<<<<
                // DEL 2010/01/29 MANTIS対応[14959]：在庫情報タブのデフォルト設定は新規登録時は必要なし ---------->>>>>
                #region 削除コード
                //string defaultWarehouseCode = string.Empty;
                //if (!string.IsNullOrEmpty(LoginSectionInfo.SectWarehouseCd1))
                //{
                //    defaultWarehouseCode = LoginSectionInfo.SectWarehouseCd1;
                //}   // ↑優先順位1:ログイン拠点の優先倉庫1
                //if (string.IsNullOrEmpty(defaultWarehouseCode) && !string.IsNullOrEmpty(LoginSectionInfo.SectWarehouseCd2))
                //{
                //    defaultWarehouseCode = LoginSectionInfo.SectWarehouseCd2;
                //}   // ↑優先順位2:ログイン拠点の優先倉庫2
                //if (string.IsNullOrEmpty(defaultWarehouseCode) && !string.IsNullOrEmpty(LoginSectionInfo.SectWarehouseCd3))
                //{
                //    defaultWarehouseCode = LoginSectionInfo.SectWarehouseCd3;
                //}   // ↑優先順位3:ログイン拠点の優先倉庫3
                //if (string.IsNullOrEmpty(defaultWarehouseCode))
                //{
                //    return null;
                //}   // ↑優先順位4:なし

                //ArrayList searchedList = null;
                //WarehouseAccesser.Search(out searchedList, _enterpriseCode);
                //if (searchedList == null || searchedList.Count.Equals(0)) return null;

                //List<Warehouse> searchedWarehouseList = new List<Warehouse>(
                //    (Warehouse[])searchedList.ToArray(typeof(Warehouse))
                //);
                //return searchedWarehouseList.Find(delegate(Warehouse item)
                //{
                //    return item.WarehouseCode.Trim().Equals(defaultWarehouseCode.Trim());
                //});
                #endregion // 削除コード
                // DEL 2010/01/29 MANTIS対応[14959]：在庫情報タブのデフォルト設定は新規登録時は必要なし ----------<<<<<
            }
        }

        #endregion // 倉庫情報

        /// <summary>
        /// 倉庫情報は空の場合、デフォルト倉庫情報を設定します。
        /// </summary>
        /// <remarks>
        /// <br>UpdateNote : 2011/09/01 周雨 案件一覧 連番984 の対応 選択した在庫が初期表示されるよう修正 FOR redmine #24263</br>
        /// </remarks>
        private void InitializeWarehouseInfoIfCodeIsNullOrEmpty()
        {
            // ADD 2010/01/29 MANTIS対応[14959]：在庫情報タブのデフォルト設定は新規登録時は必要なし ---------->>>>>
            // MEMO:新規登録時はデフォルト設定なし
            if (IsNewGoodsNo()) return;
            // ADD 2010/01/29 MANTIS対応[14959]：在庫情報タブのデフォルト設定は新規登録時は必要なし ----------<<<<<

            if (!string.IsNullOrEmpty(this.tEdit_WarehouseCode.Text)) return;
            /* ----------------- DEL 2011/09/01 --------------------- >>>>>
            if (DefaultWarehouse == null) return;

            int warehouseCode = 0;
            if (int.TryParse(DefaultWarehouse.WarehouseCode, out warehouseCode))
            {
                this.tEdit_WarehouseCode.Text = warehouseCode.ToString("d4");
                this.tEdit_WarehouseName.Text = DefaultWarehouse.WarehouseName;
            }

            int sectionCode = 0;
            if (int.TryParse(DefaultWarehouse.SectionCode, out sectionCode))
            {
                this.tEdit_SectionCode.Text = sectionCode.ToString("d2");
                this.tEdit_SectionName.Text = GetSectionName(DefaultWarehouse.SectionCode);
            }

            ChoiceStockWarehouse(DefaultWarehouse.WarehouseCode);
            ------------------- DEL 2011/09/01 -------------------- <<<<<*/
            // ---------------- ADD 2011/09/01 -------------------- >>>>>
            if (this._editGoodsUnitData == null) return ;
            if (this._editGoodsUnitData.StockList == null || this._editGoodsUnitData.StockList.Count.Equals(0)) return;
            foreach (Stock stock in this._editGoodsUnitData.StockList)
            {
                if (stock.WarehouseCode == this._editGoodsUnitData.SelectedWarehouseCode)
                {
                    this.tEdit_WarehouseCode.Text = stock.WarehouseCode.PadLeft(4, '0');
                    this.tEdit_WarehouseName.Text = stock.WarehouseName;
                    this.tEdit_SectionCode.Text = stock.SectionCode.PadLeft(2, '0');
                    this.tEdit_SectionName.Text = GetSectionName(stock.SectionCode);
                }
            }
            ChoiceStockWarehouse(this._editGoodsUnitData.SelectedWarehouseCode);
            // ---------------- ADD 2011/09/01 -------------------- <<<<<
            this.tEdit_WarehouseCode.Focus();
            ((Infragistics.Win.UltraWinToolbars.ButtonTool)this.Main_tToolbarsManager.Tools[TOOLBAR_GUIDEBUTTON_KEY]).SharedProps.Enabled = true; // ADD 2010/08/09
        }

        #endregion // 倉庫情報のデフォルト値
        // ADD 2009/11/24 MANTIS対応[14610]：倉庫情報のデフォルト値を設定 ----------<<<<<

        // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ---------->>>>>
        #region 月次更新後の在庫データの更新は不可

        /// <summary>
        /// 月次更新されているかチェックし、書込み可能であるか判断します。
        /// </summary>
        /// <remarks>
        /// 商品在庫マスタ（一括登録・修正）、在庫組立・分解処理、委託在庫補充処理用に公開
        /// </remarks>
        /// <param name="updatingDateTime">更新日</param>
        /// <returns>
        /// <c>true</c> :書込み可能です。<br/>
        /// <c>false</c>:書込み不可です。
        /// </returns>
        public static bool CanWrite(DateTime updateingDateTime)
        {
            return CanWrite(new List<Stock>(), null, updateingDateTime);
        }

        /// <summary>
        /// 月次更新されているかチェックし、書込み可能であるか判断します。
        /// </summary>
        /// <param name="writingStockList">書込む在庫レコードのリスト</param>
        /// <param name="previousStockList">書込む前の在庫レコードのリスト</param>
        /// <param name="updatingDateTime">更新日</param>
        /// <returns>
        /// <c>true</c> :書込み可能です。<br/>
        /// <c>false</c>:書込み不可です。
        /// </returns>
        private static bool CanWrite(
            List<Stock> writingStockList,
            List<Stock> previousStockList,
            DateTime updatingDateTime
        )
        {
            // 在庫データに変化がなければ書込み可能
            if (IsSame(writingStockList, previousStockList)) return true;

            // 月次更新のチェック
            DateTime updatingDate = new DateTime(updatingDateTime.Year, updatingDateTime.Month, updatingDateTime.Day);
            DateTime prevTotalDay = DateTime.Now;   // 3パラ目
            StockMoveInputInitDataAcs checker = StockMoveInputInitDataAcs.GetInstance();
            bool canWrite = checker.CheckHisTotalDayMonthly(
                string.Empty,   // LoginInfoAcquisition.Employee.BelongSectionCode.Trim(),
                updatingDate,
                out prevTotalDay
            );
            if (!canWrite)
            {
                string message = "更新日が前回月次更新日以前になっている為、登録できません。" + Environment.NewLine + Environment.NewLine;
                message += string.Format("　前回月次更新日 ： {0}", prevTotalDay.ToString("yyyy年MM月dd日"));
                ShowMessageBox(
                    emErrorLevel.ERR_LEVEL_INFO,
                    message,
                    0,
                    MessageBoxButtons.OK,
                    MessageBoxDefaultButton.Button1
                );
            }
            return canWrite;
        }

        /// <summary>
        /// 在庫レコードのリストが同じであるか判断します。
        /// </summary>
        /// <param name="writingStockList">書込む在庫レコードのリスト</param>
        /// <param name="previousStockList">書込む前の在庫レコード</param>
        /// <returns>
        /// <c>true</c> :同じ在庫レコードのリストです。<br/>
        /// <c>false</c>:同じ在庫レコードのリストではありません。
        /// </returns>
        private static bool IsSame(
            List<Stock> writingStockList,
            List<Stock> previousStockList
        )
        {
            // nullの場合
            if (writingStockList == null && previousStockList != null) return false;
            if (writingStockList != null && previousStockList == null) return false;
            if (writingStockList == null && previousStockList == null) return true;
            
            // 同じインスタンス
            if (writingStockList == previousStockList) return true;

            // 要素数が違う
            if (!writingStockList.Count.Equals(previousStockList.Count)) return false;

            // どちらも要素がない
            if (writingStockList.Count.Equals(0) && previousStockList.Count.Equals(0)) return true;

            bool isSame = false;
            foreach (Stock writingStock in writingStockList)
            {
                // 同じ倉庫コードのものを比較する
                string warehouseCode = writingStock.WarehouseCode.Trim();
                Stock previousStock = previousStockList.Find(delegate(Stock item)
                {
                    if (item.WarehouseCode.Trim().Equals(warehouseCode))
                    {
                        return true;
                    }
                    return false;
                });
                if (previousStock != null)
                {
                    isSame = IsSame(writingStock, previousStock);
                }
                else
                {
                    isSame = false;
                }
                if (!isSame) break; // 1つでも不一致なら比較中止
            }   // foreach (Stock writingStock in writingStockList)
            return isSame;
        }

        /// <summary>
        /// 同じ在庫レコードであるか判断します。
        /// </summary>
        /// <remarks>
        /// 以下のフィールドは比較しません。<br/>
        /// UpdateDate<br/>
        /// UpdateDateAdFormal<br/>
        /// UpdateDateAdInFormal<br/>
        /// UpdateDateJpFormal<br/>
        /// UpdateDateJpInFormal
        /// </remarks>
        /// <param name="writing">書込む在庫レコード</param>
        /// <param name="previous">書込む前の在庫レコード</param>
        /// <returns>
        /// <c>true</c> :同じ在庫レコードです。<br/>
        /// <c>false</c>:同じ在庫レコードではありません。
        /// </returns>
        private static bool IsSame(
            Stock writing,
            Stock previous
        )
        {
            #region それぞれのフィールドを比較

            if (!CompairUtil.IsSameVal<double>(writing.AcpOdrCount, previous.AcpOdrCount)) return false;
            if (!CompairUtil.IsSameVal<double>(writing.ArrivalCnt, previous.ArrivalCnt)) return false;
            if (!CompairUtil.IsSameVal<DateTime>(writing.CreateDateTime, previous.CreateDateTime)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.CreateDateTimeAdFormal, previous.CreateDateTimeAdFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.CreateDateTimeAdInFormal, previous.CreateDateTimeAdInFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.CreateDateTimeJpFormal, previous.CreateDateTimeJpFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.CreateDateTimeJpInFormal, previous.CreateDateTimeJpInFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.DuplicationShelfNo1, previous.DuplicationShelfNo1)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.DuplicationShelfNo2, previous.DuplicationShelfNo2)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.EnterpriseCode, previous.EnterpriseCode)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.EnterpriseName, previous.EnterpriseName)) return false;
            if (!CompairUtil.IsSameVal<Guid>(writing.FileHeaderGuid, previous.FileHeaderGuid)) return false;
            if (!CompairUtil.IsSameVal<int>(writing.GoodsMakerCd, previous.GoodsMakerCd)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.GoodsName, previous.GoodsName)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.GoodsNo, previous.GoodsNo)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.GoodsNoNoneHyphen, previous.GoodsNoNoneHyphen)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.GoodsSpecialNote, previous.GoodsSpecialNote)) return false;
            if (!CompairUtil.IsSameVal<DateTime>(writing.LastInventoryUpdate, previous.LastInventoryUpdate)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.LastInventoryUpdateAdFormal, previous.LastInventoryUpdateAdFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.LastInventoryUpdateAdInFormal, previous.LastInventoryUpdateAdInFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.LastInventoryUpdateJpFormal, previous.LastInventoryUpdateJpFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.LastInventoryUpdateJpInFormal, previous.LastInventoryUpdateJpInFormal)) return false;
            if (!CompairUtil.IsSameVal<DateTime>(writing.LastSalesDate, previous.LastSalesDate)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.LastSalesDateAdFormal, previous.LastSalesDateAdFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.LastSalesDateAdInFormal, previous.LastSalesDateAdInFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.LastSalesDateJpFormal, previous.LastSalesDateJpFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.LastSalesDateJpInFormal, previous.LastSalesDateJpInFormal)) return false;
            if (!CompairUtil.IsSameVal<DateTime>(writing.LastStockDate, previous.LastStockDate)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.LastStockDateAdFormal, previous.LastStockDateAdFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.LastStockDateAdInFormal, previous.LastStockDateAdInFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.LastStockDateJpFormal, previous.LastStockDateJpFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.LastStockDateJpInFormal, previous.LastStockDateJpInFormal)) return false;
            if (!CompairUtil.IsSameVal<int>(writing.LogicalDeleteCode, previous.LogicalDeleteCode)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.MakerName, previous.MakerName)) return false;
            if (!CompairUtil.IsSameVal<double>(writing.MaximumStockCnt, previous.MaximumStockCnt)) return false;
            if (!CompairUtil.IsSameVal<double>(writing.MinimumStockCnt, previous.MinimumStockCnt)) return false;
            if (!CompairUtil.IsSameVal<double>(writing.MonthOrderCount, previous.MonthOrderCount)) return false;
            if (!CompairUtil.IsSameVal<double>(writing.MovingSupliStock, previous.MovingSupliStock)) return false;
            if (!CompairUtil.IsSameVal<double>(writing.NmlSalOdrCount, previous.NmlSalOdrCount)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.PartsManagementDivide1, previous.PartsManagementDivide1)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.PartsManagementDivide2, previous.PartsManagementDivide2)) return false;
            if (!CompairUtil.IsSameVal<double>(writing.SalesOrderCount, previous.SalesOrderCount)) return false;
            if (!CompairUtil.IsSameVal<int>(writing.SalesOrderUnit, previous.SalesOrderUnit)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.SectionCode, previous.SectionCode)) return false;
            if (!CompairUtil.IsSameVal<double>(writing.ShipmentCnt, previous.ShipmentCnt)) return false;
            if (!CompairUtil.IsSameVal<double>(writing.ShipmentPosCnt, previous.ShipmentPosCnt)) return false;
            if (!CompairUtil.IsSameVal<DateTime>(writing.StockCreateDate, previous.StockCreateDate)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.StockCreateDateAdFormal, previous.StockCreateDateAdFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.StockCreateDateAdInFormal, previous.StockCreateDateAdInFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.StockCreateDateJpFormal, previous.StockCreateDateJpFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.StockCreateDateJpInFormal, previous.StockCreateDateJpInFormal)) return false;
            if (!CompairUtil.IsSameVal<int>(writing.StockDiv, previous.StockDiv)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.StockNote1, previous.StockNote1)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.StockNote2, previous.StockNote2)) return false;
            if (!CompairUtil.IsSameVal<int>(writing.StockSupplierCode, previous.StockSupplierCode)) return false;
            if (!CompairUtil.IsSameVal<long>(writing.StockTotalPrice, previous.StockTotalPrice)) return false;
            if (!CompairUtil.IsSameVal<double>(writing.StockUnitPriceFl, previous.StockUnitPriceFl)) return false;
            if (!CompairUtil.IsSameVal<int>(writing.SupplierCd, previous.SupplierCd)) return false;
            if (!CompairUtil.IsSameVal<double>(writing.SupplierLot, previous.SupplierLot)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.SupplierSnm, previous.SupplierSnm)) return false;
            if (!CompairUtil.IsSameVal<double>(writing.SupplierStock, previous.SupplierStock)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.UpdAssemblyId1, previous.UpdAssemblyId1)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.UpdAssemblyId2, previous.UpdAssemblyId2)) return false;
            //if (!Comparison.IsSameValue<DateTime>(writing.UpdateDate, previous.UpdateDate)) return false;
            //if (!Comparison.IsSame<string>(writing.UpdateDateAdFormal, previous.UpdateDateAdFormal)) return false;
            //if (!Comparison.IsSame<string>(writing.UpdateDateAdInFormal, previous.UpdateDateAdInFormal)) return false;
            //if (!Comparison.IsSame<string>(writing.UpdateDateJpFormal, previous.UpdateDateJpFormal)) return false;
            //if (!Comparison.IsSame<string>(writing.UpdateDateJpInFormal, previous.UpdateDateJpInFormal)) return false;
            if (!CompairUtil.IsSameVal<DateTime>(writing.UpdateDateTime, previous.UpdateDateTime)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.UpdateDateTimeAdFormal, previous.UpdateDateTimeAdFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.UpdateDateTimeAdInFormal, previous.UpdateDateTimeAdInFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.UpdateDateTimeJpFormal, previous.UpdateDateTimeJpFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.UpdateDateTimeJpInFormal, previous.UpdateDateTimeJpInFormal)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.UpdEmployeeCode, previous.UpdEmployeeCode)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.UpdEmployeeName, previous.UpdEmployeeName)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.WarehouseCode, previous.WarehouseCode)) return false;
            if (!CompairUtil.IsSameRef<string>(writing.WarehouseName, previous.WarehouseName)) return false;

            #endregion // それぞれのフィールドを比較

            return true;
        }

        #region 比較ユーティリティ

        /// <summary>
        /// 比較ユーティリティクラス
        /// </summary>
        private static class CompairUtil
        {
            /// <summary>
            /// 同じであるか判断します。
            /// </summary>
            /// <typeparam name="TRef">参照型</typeparam>
            /// <param name="lhs">左辺</param>
            /// <param name="rhs">右辺</param>
            /// <returns>
            /// lhs == rhs<br/>
            /// <c>true</c> :同じです。<br/>
            /// <c>false</c>:同じではありません。
            /// </returns>
            public static bool IsSameRef<TRef>(
                TRef lhs,
                TRef rhs
            ) where TRef : class
            {
                if (lhs != null && rhs == null) return false;
                if (lhs == null && rhs != null) return false;
                if (lhs == rhs) return true;

                return lhs.Equals(rhs);
            }

            /// <summary>
            /// 同じ値であるか判断します。
            /// </summary>
            /// <typeparam name="TVal">値型</typeparam>
            /// <param name="lhs">左辺</param>
            /// <param name="rhs">右辺</param>
            /// <returns>
            /// lhs == rhs<br/>
            /// <c>true</c> :同じ値です。<br/>
            /// <c>false</c>:同じ値ではありません。
            /// </returns>
            public static bool IsSameVal<TVal>(
                Nullable<TVal> lhs,
                Nullable<TVal> rhs
            ) where TVal : struct
            {
                if (lhs != null && rhs == null) return false;
                if (lhs == null && rhs != null) return false;
                if (lhs == null && rhs == null) return true;

                return lhs.Equals(rhs);
            }
        }

        #endregion // 比較ユーティリティ

        #endregion // 月次更新後の在庫データの更新は不可

        /// <summary>
        /// メッセージボックス表示処理
        /// </summary>
        /// <param name="errLevel">エラーレベル</param>
        /// <param name="message">表示するメッセージ</param>
        /// <param name="status">ステータス値</param>
        /// <param name="msgButton">表示するボタン</param>
        /// <param name="defaultButton">初期表示ボタン</param>
        /// <returns>DialogResult</returns>
        private static DialogResult ShowMessageBox(
            emErrorLevel errLevel,
            string message,
            int status,
            MessageBoxButtons msgButton,
            MessageBoxDefaultButton defaultButton
        )
        {
            DialogResult dialogResult = TMsgDisp.Show(
                errLevel,       // エラーレベル
                "MAKHN04100U",  // アセンブリID
                message,        // 表示するメッセージ
                status,         // ステータス値
                msgButton,      // 表示するボタン
                defaultButton   // 初期表示ボタン
            );
            return dialogResult;
        }
        // ADD 2009/11/26 MANTIS対応[13890]：月次更新後の在庫データの更新は不可 ----------<<<<<

        //---ADD 2010/08/09---------->>>>>
        /// <summary>
        /// 保存処理
        /// </summary>
        private void Save()
        {
            // 保存処理開始中、フラグがTrueです。
            this._isSaveFlg = true;  // ADD 2014/08/08 譚洪

            try  // ADD 2014/08/08 譚洪 
            {
                this.uiSetControl1.SettingAllControlsZeroPaddedText();
                // 入力内容をチェックする
                if (this.CheckInputScreen() != (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                    return;

                // 保存処理
                this.SaveData(true, true, true);

                if (IsClosingAfterSave)
                {
                    this.FormClosing -= MAKHN09280UA_FormClosing;
                    this.Close();
                    this.FormClosing += MAKHN09280UA_FormClosing;
                }
            // ADD 2014/08/08 譚洪 --- >>>
            }
            finally
            {
                // 保存処理完了しました、フラグがFalseです。
                this._isSaveFlg = false;
            }
            // ADD 2014/08/08 譚洪 --- <<<
        }

        /// <summary>
        /// コードからの選択を可能へ変更する
        /// </summary>
        /// <param name="name"></param>
        private void setTComboEditorByName(string name)
        {
            TComboEditor control = (TComboEditor)(this.GetType().GetField(name, System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.IgnoreCase).GetValue(this));

            bool inputErrorFlg = true;
            foreach (Infragistics.Win.ValueListItem item in control.Items)
            {
                if (item.DataValue == control.Value)
                {
                    inputErrorFlg = false;
                    break;
                }
            }

            if (inputErrorFlg)
            {
                control.Value = this._preComboEditorValue;
            }
            else
            {
                this._preComboEditorValue = control.Value;
            }
        }

       

        //---ADD 2010/08/09----------<<<<<
    }   
}
