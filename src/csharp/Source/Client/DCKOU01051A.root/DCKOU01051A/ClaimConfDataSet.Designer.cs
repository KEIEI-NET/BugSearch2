//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3053
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.Controller {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ClaimConfDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    internal partial class ClaimConfDataSet : global::System.Data.DataSet {
        
        private SalesProcMoneyDataTable tableSalesProcMoney;
        
        private StockProcMoneyDataTable tableStockProcMoney;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClaimConfDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ClaimConfDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SalesProcMoney"] != null)) {
                    base.Tables.Add(new SalesProcMoneyDataTable(ds.Tables["SalesProcMoney"]));
                }
                if ((ds.Tables["StockProcMoney"] != null)) {
                    base.Tables.Add(new StockProcMoneyDataTable(ds.Tables["StockProcMoney"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SalesProcMoneyDataTable SalesProcMoney {
            get {
                return this.tableSalesProcMoney;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockProcMoneyDataTable StockProcMoney {
            get {
                return this.tableStockProcMoney;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ClaimConfDataSet cln = ((ClaimConfDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SalesProcMoney"] != null)) {
                    base.Tables.Add(new SalesProcMoneyDataTable(ds.Tables["SalesProcMoney"]));
                }
                if ((ds.Tables["StockProcMoney"] != null)) {
                    base.Tables.Add(new StockProcMoneyDataTable(ds.Tables["StockProcMoney"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSalesProcMoney = ((SalesProcMoneyDataTable)(base.Tables["SalesProcMoney"]));
            if ((initTable == true)) {
                if ((this.tableSalesProcMoney != null)) {
                    this.tableSalesProcMoney.InitVars();
                }
            }
            this.tableStockProcMoney = ((StockProcMoneyDataTable)(base.Tables["StockProcMoney"]));
            if ((initTable == true)) {
                if ((this.tableStockProcMoney != null)) {
                    this.tableStockProcMoney.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ClaimConfDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSalesProcMoney = new SalesProcMoneyDataTable();
            base.Tables.Add(this.tableSalesProcMoney);
            this.tableStockProcMoney = new StockProcMoneyDataTable();
            base.Tables.Add(this.tableStockProcMoney);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSalesProcMoney() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStockProcMoney() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ClaimConfDataSet ds = new ClaimConfDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SalesProcMoneyRowChangeEventHandler(object sender, SalesProcMoneyRowChangeEvent e);
        
        public delegate void StockProcMoneyRowChangeEventHandler(object sender, StockProcMoneyRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SalesProcMoneyDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFracProcMoneyDiv;
            
            private global::System.Data.DataColumn columnFractionProcCode;
            
            private global::System.Data.DataColumn columnUpperLimitPrice;
            
            private global::System.Data.DataColumn columnFractionProcUnit;
            
            private global::System.Data.DataColumn columnFractionProcCd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesProcMoneyDataTable() {
                this.TableName = "SalesProcMoney";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalesProcMoneyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SalesProcMoneyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FracProcMoneyDivColumn {
                get {
                    return this.columnFracProcMoneyDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionProcCodeColumn {
                get {
                    return this.columnFractionProcCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpperLimitPriceColumn {
                get {
                    return this.columnUpperLimitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionProcUnitColumn {
                get {
                    return this.columnFractionProcUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionProcCdColumn {
                get {
                    return this.columnFractionProcCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesProcMoneyRow this[int index] {
                get {
                    return ((SalesProcMoneyRow)(this.Rows[index]));
                }
            }
            
            public event SalesProcMoneyRowChangeEventHandler SalesProcMoneyRowChanging;
            
            public event SalesProcMoneyRowChangeEventHandler SalesProcMoneyRowChanged;
            
            public event SalesProcMoneyRowChangeEventHandler SalesProcMoneyRowDeleting;
            
            public event SalesProcMoneyRowChangeEventHandler SalesProcMoneyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSalesProcMoneyRow(SalesProcMoneyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesProcMoneyRow AddSalesProcMoneyRow(int FracProcMoneyDiv, int FractionProcCode, double UpperLimitPrice, double FractionProcUnit, int FractionProcCd) {
                SalesProcMoneyRow rowSalesProcMoneyRow = ((SalesProcMoneyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FracProcMoneyDiv,
                        FractionProcCode,
                        UpperLimitPrice,
                        FractionProcUnit,
                        FractionProcCd};
                rowSalesProcMoneyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSalesProcMoneyRow);
                return rowSalesProcMoneyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesProcMoneyRow FindByFracProcMoneyDivFractionProcCodeUpperLimitPrice(int FracProcMoneyDiv, int FractionProcCode, double UpperLimitPrice) {
                return ((SalesProcMoneyRow)(this.Rows.Find(new object[] {
                            FracProcMoneyDiv,
                            FractionProcCode,
                            UpperLimitPrice})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SalesProcMoneyDataTable cln = ((SalesProcMoneyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SalesProcMoneyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFracProcMoneyDiv = base.Columns["FracProcMoneyDiv"];
                this.columnFractionProcCode = base.Columns["FractionProcCode"];
                this.columnUpperLimitPrice = base.Columns["UpperLimitPrice"];
                this.columnFractionProcUnit = base.Columns["FractionProcUnit"];
                this.columnFractionProcCd = base.Columns["FractionProcCd"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFracProcMoneyDiv = new global::System.Data.DataColumn("FracProcMoneyDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFracProcMoneyDiv);
                this.columnFractionProcCode = new global::System.Data.DataColumn("FractionProcCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionProcCode);
                this.columnUpperLimitPrice = new global::System.Data.DataColumn("UpperLimitPrice", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpperLimitPrice);
                this.columnFractionProcUnit = new global::System.Data.DataColumn("FractionProcUnit", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionProcUnit);
                this.columnFractionProcCd = new global::System.Data.DataColumn("FractionProcCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionProcCd);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFracProcMoneyDiv,
                                this.columnFractionProcCode,
                                this.columnUpperLimitPrice}, true));
                this.columnFracProcMoneyDiv.AllowDBNull = false;
                this.columnFracProcMoneyDiv.DefaultValue = ((int)(0));
                this.columnFractionProcCode.AllowDBNull = false;
                this.columnFractionProcCode.DefaultValue = ((int)(0));
                this.columnUpperLimitPrice.AllowDBNull = false;
                this.columnUpperLimitPrice.DefaultValue = ((double)(0));
                this.columnFractionProcUnit.DefaultValue = ((double)(0));
                this.columnFractionProcCd.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesProcMoneyRow NewSalesProcMoneyRow() {
                return ((SalesProcMoneyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SalesProcMoneyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SalesProcMoneyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SalesProcMoneyRowChanged != null)) {
                    this.SalesProcMoneyRowChanged(this, new SalesProcMoneyRowChangeEvent(((SalesProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SalesProcMoneyRowChanging != null)) {
                    this.SalesProcMoneyRowChanging(this, new SalesProcMoneyRowChangeEvent(((SalesProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SalesProcMoneyRowDeleted != null)) {
                    this.SalesProcMoneyRowDeleted(this, new SalesProcMoneyRowChangeEvent(((SalesProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SalesProcMoneyRowDeleting != null)) {
                    this.SalesProcMoneyRowDeleting(this, new SalesProcMoneyRowChangeEvent(((SalesProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSalesProcMoneyRow(SalesProcMoneyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ClaimConfDataSet ds = new ClaimConfDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SalesProcMoneyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockProcMoneyDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFracProcMoneyDiv;
            
            private global::System.Data.DataColumn columnFractionProcCode;
            
            private global::System.Data.DataColumn columnUpperLimitPrice;
            
            private global::System.Data.DataColumn columnFractionProcUnit;
            
            private global::System.Data.DataColumn columnFractionProcCd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockProcMoneyDataTable() {
                this.TableName = "StockProcMoney";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockProcMoneyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockProcMoneyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FracProcMoneyDivColumn {
                get {
                    return this.columnFracProcMoneyDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionProcCodeColumn {
                get {
                    return this.columnFractionProcCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpperLimitPriceColumn {
                get {
                    return this.columnUpperLimitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionProcUnitColumn {
                get {
                    return this.columnFractionProcUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionProcCdColumn {
                get {
                    return this.columnFractionProcCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockProcMoneyRow this[int index] {
                get {
                    return ((StockProcMoneyRow)(this.Rows[index]));
                }
            }
            
            public event StockProcMoneyRowChangeEventHandler StockProcMoneyRowChanging;
            
            public event StockProcMoneyRowChangeEventHandler StockProcMoneyRowChanged;
            
            public event StockProcMoneyRowChangeEventHandler StockProcMoneyRowDeleting;
            
            public event StockProcMoneyRowChangeEventHandler StockProcMoneyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockProcMoneyRow(StockProcMoneyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockProcMoneyRow AddStockProcMoneyRow(int FracProcMoneyDiv, int FractionProcCode, double UpperLimitPrice, double FractionProcUnit, int FractionProcCd) {
                StockProcMoneyRow rowStockProcMoneyRow = ((StockProcMoneyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FracProcMoneyDiv,
                        FractionProcCode,
                        UpperLimitPrice,
                        FractionProcUnit,
                        FractionProcCd};
                rowStockProcMoneyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStockProcMoneyRow);
                return rowStockProcMoneyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockProcMoneyRow FindByUpperLimitPriceFractionProcCodeFracProcMoneyDiv(double UpperLimitPrice, int FractionProcCode, int FracProcMoneyDiv) {
                return ((StockProcMoneyRow)(this.Rows.Find(new object[] {
                            UpperLimitPrice,
                            FractionProcCode,
                            FracProcMoneyDiv})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StockProcMoneyDataTable cln = ((StockProcMoneyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StockProcMoneyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFracProcMoneyDiv = base.Columns["FracProcMoneyDiv"];
                this.columnFractionProcCode = base.Columns["FractionProcCode"];
                this.columnUpperLimitPrice = base.Columns["UpperLimitPrice"];
                this.columnFractionProcUnit = base.Columns["FractionProcUnit"];
                this.columnFractionProcCd = base.Columns["FractionProcCd"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFracProcMoneyDiv = new global::System.Data.DataColumn("FracProcMoneyDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFracProcMoneyDiv);
                this.columnFractionProcCode = new global::System.Data.DataColumn("FractionProcCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionProcCode);
                this.columnUpperLimitPrice = new global::System.Data.DataColumn("UpperLimitPrice", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpperLimitPrice);
                this.columnFractionProcUnit = new global::System.Data.DataColumn("FractionProcUnit", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionProcUnit);
                this.columnFractionProcCd = new global::System.Data.DataColumn("FractionProcCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionProcCd);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUpperLimitPrice,
                                this.columnFractionProcCode,
                                this.columnFracProcMoneyDiv}, true));
                this.columnFracProcMoneyDiv.AllowDBNull = false;
                this.columnFracProcMoneyDiv.DefaultValue = ((int)(0));
                this.columnFractionProcCode.AllowDBNull = false;
                this.columnFractionProcCode.DefaultValue = ((int)(0));
                this.columnUpperLimitPrice.AllowDBNull = false;
                this.columnUpperLimitPrice.DefaultValue = ((double)(0));
                this.columnFractionProcUnit.DefaultValue = ((double)(0));
                this.columnFractionProcCd.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockProcMoneyRow NewStockProcMoneyRow() {
                return ((StockProcMoneyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StockProcMoneyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StockProcMoneyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockProcMoneyRowChanged != null)) {
                    this.StockProcMoneyRowChanged(this, new StockProcMoneyRowChangeEvent(((StockProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockProcMoneyRowChanging != null)) {
                    this.StockProcMoneyRowChanging(this, new StockProcMoneyRowChangeEvent(((StockProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockProcMoneyRowDeleted != null)) {
                    this.StockProcMoneyRowDeleted(this, new StockProcMoneyRowChangeEvent(((StockProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockProcMoneyRowDeleting != null)) {
                    this.StockProcMoneyRowDeleting(this, new StockProcMoneyRowChangeEvent(((StockProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockProcMoneyRow(StockProcMoneyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ClaimConfDataSet ds = new ClaimConfDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockProcMoneyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SalesProcMoneyRow : global::System.Data.DataRow {
            
            private SalesProcMoneyDataTable tableSalesProcMoney;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalesProcMoneyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSalesProcMoney = ((SalesProcMoneyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FracProcMoneyDiv {
                get {
                    return ((int)(this[this.tableSalesProcMoney.FracProcMoneyDivColumn]));
                }
                set {
                    this[this.tableSalesProcMoney.FracProcMoneyDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FractionProcCode {
                get {
                    return ((int)(this[this.tableSalesProcMoney.FractionProcCodeColumn]));
                }
                set {
                    this[this.tableSalesProcMoney.FractionProcCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UpperLimitPrice {
                get {
                    return ((double)(this[this.tableSalesProcMoney.UpperLimitPriceColumn]));
                }
                set {
                    this[this.tableSalesProcMoney.UpperLimitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FractionProcUnit {
                get {
                    try {
                        return ((double)(this[this.tableSalesProcMoney.FractionProcUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SalesProcMoney\' にある列 \'FractionProcUnit\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesProcMoney.FractionProcUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FractionProcCd {
                get {
                    try {
                        return ((int)(this[this.tableSalesProcMoney.FractionProcCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SalesProcMoney\' にある列 \'FractionProcCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesProcMoney.FractionProcCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFractionProcUnitNull() {
                return this.IsNull(this.tableSalesProcMoney.FractionProcUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFractionProcUnitNull() {
                this[this.tableSalesProcMoney.FractionProcUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFractionProcCdNull() {
                return this.IsNull(this.tableSalesProcMoney.FractionProcCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFractionProcCdNull() {
                this[this.tableSalesProcMoney.FractionProcCdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockProcMoneyRow : global::System.Data.DataRow {
            
            private StockProcMoneyDataTable tableStockProcMoney;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockProcMoneyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStockProcMoney = ((StockProcMoneyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FracProcMoneyDiv {
                get {
                    return ((int)(this[this.tableStockProcMoney.FracProcMoneyDivColumn]));
                }
                set {
                    this[this.tableStockProcMoney.FracProcMoneyDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FractionProcCode {
                get {
                    return ((int)(this[this.tableStockProcMoney.FractionProcCodeColumn]));
                }
                set {
                    this[this.tableStockProcMoney.FractionProcCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UpperLimitPrice {
                get {
                    return ((double)(this[this.tableStockProcMoney.UpperLimitPriceColumn]));
                }
                set {
                    this[this.tableStockProcMoney.UpperLimitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FractionProcUnit {
                get {
                    try {
                        return ((double)(this[this.tableStockProcMoney.FractionProcUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockProcMoney\' にある列 \'FractionProcUnit\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockProcMoney.FractionProcUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FractionProcCd {
                get {
                    try {
                        return ((int)(this[this.tableStockProcMoney.FractionProcCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockProcMoney\' にある列 \'FractionProcCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockProcMoney.FractionProcCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFractionProcUnitNull() {
                return this.IsNull(this.tableStockProcMoney.FractionProcUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFractionProcUnitNull() {
                this[this.tableStockProcMoney.FractionProcUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFractionProcCdNull() {
                return this.IsNull(this.tableStockProcMoney.FractionProcCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFractionProcCdNull() {
                this[this.tableStockProcMoney.FractionProcCdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SalesProcMoneyRowChangeEvent : global::System.EventArgs {
            
            private SalesProcMoneyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesProcMoneyRowChangeEvent(SalesProcMoneyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesProcMoneyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockProcMoneyRowChangeEvent : global::System.EventArgs {
            
            private StockProcMoneyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockProcMoneyRowChangeEvent(StockProcMoneyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockProcMoneyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591