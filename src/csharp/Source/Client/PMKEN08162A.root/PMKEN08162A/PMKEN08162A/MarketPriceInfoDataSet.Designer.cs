//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3603
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.Controller {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MarketPriceInfoDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MarketPriceInfoDataSet : global::System.Data.DataSet {
        
        private MarketPriceInfoDataTable tableMarketPriceInfo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MarketPriceInfoDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MarketPriceInfoDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["MarketPriceInfo"] != null)) {
                    base.Tables.Add(new MarketPriceInfoDataTable(ds.Tables["MarketPriceInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MarketPriceInfoDataTable MarketPriceInfo {
            get {
                return this.tableMarketPriceInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MarketPriceInfoDataSet cln = ((MarketPriceInfoDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MarketPriceInfo"] != null)) {
                    base.Tables.Add(new MarketPriceInfoDataTable(ds.Tables["MarketPriceInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMarketPriceInfo = ((MarketPriceInfoDataTable)(base.Tables["MarketPriceInfo"]));
            if ((initTable == true)) {
                if ((this.tableMarketPriceInfo != null)) {
                    this.tableMarketPriceInfo.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MarketPriceInfoDataSet";
            this.Prefix = "";
            this.Namespace = "Broadleaf.Application.Controller";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMarketPriceInfo = new MarketPriceInfoDataTable();
            base.Tables.Add(this.tableMarketPriceInfo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMarketPriceInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MarketPriceInfoDataSet ds = new MarketPriceInfoDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void MarketPriceInfoRowChangeEventHandler(object sender, MarketPriceInfoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MarketPriceInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnPriority;
            
            private global::System.Data.DataColumn columnMarketPriceAreaCd;
            
            private global::System.Data.DataColumn columnMarketPriceAreaNm;
            
            private global::System.Data.DataColumn columnMarketPriceKindCd;
            
            private global::System.Data.DataColumn columnMarketPriceKindNm;
            
            private global::System.Data.DataColumn columnMarketPriceQualityCd;
            
            private global::System.Data.DataColumn columnMarketPriceQualityNm;
            
            private global::System.Data.DataColumn columnDstrMarketPrice;
            
            private global::System.Data.DataColumn columnMarketPrice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarketPriceInfoDataTable() {
                this.TableName = "MarketPriceInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MarketPriceInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MarketPriceInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketPriceAreaCdColumn {
                get {
                    return this.columnMarketPriceAreaCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketPriceAreaNmColumn {
                get {
                    return this.columnMarketPriceAreaNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketPriceKindCdColumn {
                get {
                    return this.columnMarketPriceKindCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketPriceKindNmColumn {
                get {
                    return this.columnMarketPriceKindNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketPriceQualityCdColumn {
                get {
                    return this.columnMarketPriceQualityCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketPriceQualityNmColumn {
                get {
                    return this.columnMarketPriceQualityNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DstrMarketPriceColumn {
                get {
                    return this.columnDstrMarketPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketPriceColumn {
                get {
                    return this.columnMarketPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarketPriceInfoRow this[int index] {
                get {
                    return ((MarketPriceInfoRow)(this.Rows[index]));
                }
            }
            
            public event MarketPriceInfoRowChangeEventHandler MarketPriceInfoRowChanging;
            
            public event MarketPriceInfoRowChangeEventHandler MarketPriceInfoRowChanged;
            
            public event MarketPriceInfoRowChangeEventHandler MarketPriceInfoRowDeleting;
            
            public event MarketPriceInfoRowChangeEventHandler MarketPriceInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMarketPriceInfoRow(MarketPriceInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarketPriceInfoRow AddMarketPriceInfoRow(bool Selected, int Priority, int MarketPriceAreaCd, string MarketPriceAreaNm, int MarketPriceKindCd, string MarketPriceKindNm, int MarketPriceQualityCd, string MarketPriceQualityNm, long DstrMarketPrice, long MarketPrice) {
                MarketPriceInfoRow rowMarketPriceInfoRow = ((MarketPriceInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Selected,
                        Priority,
                        MarketPriceAreaCd,
                        MarketPriceAreaNm,
                        MarketPriceKindCd,
                        MarketPriceKindNm,
                        MarketPriceQualityCd,
                        MarketPriceQualityNm,
                        DstrMarketPrice,
                        MarketPrice};
                rowMarketPriceInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMarketPriceInfoRow);
                return rowMarketPriceInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MarketPriceInfoDataTable cln = ((MarketPriceInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MarketPriceInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSelected = base.Columns["Selected"];
                this.columnPriority = base.Columns["Priority"];
                this.columnMarketPriceAreaCd = base.Columns["MarketPriceAreaCd"];
                this.columnMarketPriceAreaNm = base.Columns["MarketPriceAreaNm"];
                this.columnMarketPriceKindCd = base.Columns["MarketPriceKindCd"];
                this.columnMarketPriceKindNm = base.Columns["MarketPriceKindNm"];
                this.columnMarketPriceQualityCd = base.Columns["MarketPriceQualityCd"];
                this.columnMarketPriceQualityNm = base.Columns["MarketPriceQualityNm"];
                this.columnDstrMarketPrice = base.Columns["DstrMarketPrice"];
                this.columnMarketPrice = base.Columns["MarketPrice"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnPriority = new global::System.Data.DataColumn("Priority", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriority);
                this.columnMarketPriceAreaCd = new global::System.Data.DataColumn("MarketPriceAreaCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketPriceAreaCd);
                this.columnMarketPriceAreaNm = new global::System.Data.DataColumn("MarketPriceAreaNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketPriceAreaNm);
                this.columnMarketPriceKindCd = new global::System.Data.DataColumn("MarketPriceKindCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketPriceKindCd);
                this.columnMarketPriceKindNm = new global::System.Data.DataColumn("MarketPriceKindNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketPriceKindNm);
                this.columnMarketPriceQualityCd = new global::System.Data.DataColumn("MarketPriceQualityCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketPriceQualityCd);
                this.columnMarketPriceQualityNm = new global::System.Data.DataColumn("MarketPriceQualityNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketPriceQualityNm);
                this.columnDstrMarketPrice = new global::System.Data.DataColumn("DstrMarketPrice", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDstrMarketPrice);
                this.columnMarketPrice = new global::System.Data.DataColumn("MarketPrice", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketPrice);
                this.columnSelected.Caption = "選択";
                this.columnSelected.DefaultValue = ((bool)(false));
                this.columnPriority.DefaultValue = ((int)(0));
                this.columnMarketPriceAreaCd.DefaultValue = ((int)(0));
                this.columnMarketPriceAreaNm.DefaultValue = ((string)(""));
                this.columnMarketPriceKindCd.DefaultValue = ((int)(0));
                this.columnMarketPriceKindNm.Caption = "種別";
                this.columnMarketPriceKindNm.DefaultValue = ((string)(""));
                this.columnMarketPriceQualityCd.DefaultValue = ((int)(0));
                this.columnMarketPriceQualityNm.Caption = "品質";
                this.columnMarketPriceQualityNm.DefaultValue = ((string)(""));
                this.columnDstrMarketPrice.DefaultValue = ((long)(0));
                this.columnMarketPrice.Caption = "相場価格";
                this.columnMarketPrice.DefaultValue = ((long)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarketPriceInfoRow NewMarketPriceInfoRow() {
                return ((MarketPriceInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MarketPriceInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MarketPriceInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MarketPriceInfoRowChanged != null)) {
                    this.MarketPriceInfoRowChanged(this, new MarketPriceInfoRowChangeEvent(((MarketPriceInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MarketPriceInfoRowChanging != null)) {
                    this.MarketPriceInfoRowChanging(this, new MarketPriceInfoRowChangeEvent(((MarketPriceInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MarketPriceInfoRowDeleted != null)) {
                    this.MarketPriceInfoRowDeleted(this, new MarketPriceInfoRowChangeEvent(((MarketPriceInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MarketPriceInfoRowDeleting != null)) {
                    this.MarketPriceInfoRowDeleting(this, new MarketPriceInfoRowChangeEvent(((MarketPriceInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMarketPriceInfoRow(MarketPriceInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MarketPriceInfoDataSet ds = new MarketPriceInfoDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MarketPriceInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MarketPriceInfoRow : global::System.Data.DataRow {
            
            private MarketPriceInfoDataTable tableMarketPriceInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MarketPriceInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMarketPriceInfo = ((MarketPriceInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableMarketPriceInfo.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'MarketPriceInfo\' にある列 \'Selected\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableMarketPriceInfo.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Priority {
                get {
                    try {
                        return ((int)(this[this.tableMarketPriceInfo.PriorityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'MarketPriceInfo\' にある列 \'Priority\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableMarketPriceInfo.PriorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MarketPriceAreaCd {
                get {
                    try {
                        return ((int)(this[this.tableMarketPriceInfo.MarketPriceAreaCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'MarketPriceInfo\' にある列 \'MarketPriceAreaCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableMarketPriceInfo.MarketPriceAreaCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MarketPriceAreaNm {
                get {
                    try {
                        return ((string)(this[this.tableMarketPriceInfo.MarketPriceAreaNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'MarketPriceInfo\' にある列 \'MarketPriceAreaNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableMarketPriceInfo.MarketPriceAreaNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MarketPriceKindCd {
                get {
                    try {
                        return ((int)(this[this.tableMarketPriceInfo.MarketPriceKindCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'MarketPriceInfo\' にある列 \'MarketPriceKindCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableMarketPriceInfo.MarketPriceKindCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MarketPriceKindNm {
                get {
                    try {
                        return ((string)(this[this.tableMarketPriceInfo.MarketPriceKindNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'MarketPriceInfo\' にある列 \'MarketPriceKindNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableMarketPriceInfo.MarketPriceKindNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MarketPriceQualityCd {
                get {
                    try {
                        return ((int)(this[this.tableMarketPriceInfo.MarketPriceQualityCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'MarketPriceInfo\' にある列 \'MarketPriceQualityCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableMarketPriceInfo.MarketPriceQualityCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MarketPriceQualityNm {
                get {
                    try {
                        return ((string)(this[this.tableMarketPriceInfo.MarketPriceQualityNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'MarketPriceInfo\' にある列 \'MarketPriceQualityNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableMarketPriceInfo.MarketPriceQualityNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DstrMarketPrice {
                get {
                    try {
                        return ((long)(this[this.tableMarketPriceInfo.DstrMarketPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'MarketPriceInfo\' にある列 \'DstrMarketPrice\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableMarketPriceInfo.DstrMarketPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MarketPrice {
                get {
                    try {
                        return ((long)(this[this.tableMarketPriceInfo.MarketPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'MarketPriceInfo\' にある列 \'MarketPrice\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableMarketPriceInfo.MarketPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableMarketPriceInfo.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableMarketPriceInfo.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriorityNull() {
                return this.IsNull(this.tableMarketPriceInfo.PriorityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriorityNull() {
                this[this.tableMarketPriceInfo.PriorityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarketPriceAreaCdNull() {
                return this.IsNull(this.tableMarketPriceInfo.MarketPriceAreaCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarketPriceAreaCdNull() {
                this[this.tableMarketPriceInfo.MarketPriceAreaCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarketPriceAreaNmNull() {
                return this.IsNull(this.tableMarketPriceInfo.MarketPriceAreaNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarketPriceAreaNmNull() {
                this[this.tableMarketPriceInfo.MarketPriceAreaNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarketPriceKindCdNull() {
                return this.IsNull(this.tableMarketPriceInfo.MarketPriceKindCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarketPriceKindCdNull() {
                this[this.tableMarketPriceInfo.MarketPriceKindCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarketPriceKindNmNull() {
                return this.IsNull(this.tableMarketPriceInfo.MarketPriceKindNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarketPriceKindNmNull() {
                this[this.tableMarketPriceInfo.MarketPriceKindNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarketPriceQualityCdNull() {
                return this.IsNull(this.tableMarketPriceInfo.MarketPriceQualityCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarketPriceQualityCdNull() {
                this[this.tableMarketPriceInfo.MarketPriceQualityCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarketPriceQualityNmNull() {
                return this.IsNull(this.tableMarketPriceInfo.MarketPriceQualityNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarketPriceQualityNmNull() {
                this[this.tableMarketPriceInfo.MarketPriceQualityNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDstrMarketPriceNull() {
                return this.IsNull(this.tableMarketPriceInfo.DstrMarketPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDstrMarketPriceNull() {
                this[this.tableMarketPriceInfo.DstrMarketPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarketPriceNull() {
                return this.IsNull(this.tableMarketPriceInfo.MarketPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarketPriceNull() {
                this[this.tableMarketPriceInfo.MarketPriceColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MarketPriceInfoRowChangeEvent : global::System.EventArgs {
            
            private MarketPriceInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarketPriceInfoRowChangeEvent(MarketPriceInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarketPriceInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591