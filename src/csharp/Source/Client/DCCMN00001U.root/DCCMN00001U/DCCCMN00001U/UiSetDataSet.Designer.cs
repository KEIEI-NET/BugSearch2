//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.42
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Windows.Forms {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("UiSetDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class UiSetDataSet : System.Data.DataSet {
        
        private UiSetDataTable tableUiSet;
        
        private SetDDDataTable tableSetDD;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UiSetDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected UiSetDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["UiSet"] != null)) {
                    base.Tables.Add(new UiSetDataTable(ds.Tables["UiSet"]));
                }
                if ((ds.Tables["SetDD"] != null)) {
                    base.Tables.Add(new SetDDDataTable(ds.Tables["SetDD"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UiSetDataTable UiSet {
            get {
                return this.tableUiSet;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SetDDDataTable SetDD {
            get {
                return this.tableSetDD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            UiSetDataSet cln = ((UiSetDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["UiSet"] != null)) {
                    base.Tables.Add(new UiSetDataTable(ds.Tables["UiSet"]));
                }
                if ((ds.Tables["SetDD"] != null)) {
                    base.Tables.Add(new SetDDDataTable(ds.Tables["SetDD"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableUiSet = ((UiSetDataTable)(base.Tables["UiSet"]));
            if ((initTable == true)) {
                if ((this.tableUiSet != null)) {
                    this.tableUiSet.InitVars();
                }
            }
            this.tableSetDD = ((SetDDDataTable)(base.Tables["SetDD"]));
            if ((initTable == true)) {
                if ((this.tableSetDD != null)) {
                    this.tableSetDD.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "UiSetDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/UiSetDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUiSet = new UiSetDataTable();
            base.Tables.Add(this.tableUiSet);
            this.tableSetDD = new SetDDDataTable();
            base.Tables.Add(this.tableSetDD);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUiSet() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSetDD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            UiSetDataSet ds = new UiSetDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void UiSetRowChangeEventHandler(object sender, UiSetRowChangeEvent e);
        
        public delegate void SetDDRowChangeEventHandler(object sender, SetDDRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UiSetDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNewMark;
            
            private System.Data.DataColumn columnAssemblyName;
            
            private System.Data.DataColumn columnFormName;
            
            private System.Data.DataColumn columnItemName;
            
            private System.Data.DataColumn columnDDName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UiSetDataTable() {
                this.TableName = "UiSet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UiSetDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UiSetDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NewMarkColumn {
                get {
                    return this.columnNewMark;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AssemblyNameColumn {
                get {
                    return this.columnAssemblyName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FormNameColumn {
                get {
                    return this.columnFormName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ItemNameColumn {
                get {
                    return this.columnItemName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DDNameColumn {
                get {
                    return this.columnDDName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UiSetRow this[int index] {
                get {
                    return ((UiSetRow)(this.Rows[index]));
                }
            }
            
            public event UiSetRowChangeEventHandler UiSetRowChanging;
            
            public event UiSetRowChangeEventHandler UiSetRowChanged;
            
            public event UiSetRowChangeEventHandler UiSetRowDeleting;
            
            public event UiSetRowChangeEventHandler UiSetRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUiSetRow(UiSetRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UiSetRow AddUiSetRow(string NewMark, string AssemblyName, string FormName, string ItemName, string DDName) {
                UiSetRow rowUiSetRow = ((UiSetRow)(this.NewRow()));
                rowUiSetRow.ItemArray = new object[] {
                        NewMark,
                        AssemblyName,
                        FormName,
                        ItemName,
                        DDName};
                this.Rows.Add(rowUiSetRow);
                return rowUiSetRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UiSetDataTable cln = ((UiSetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UiSetDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNewMark = base.Columns["NewMark"];
                this.columnAssemblyName = base.Columns["AssemblyName"];
                this.columnFormName = base.Columns["FormName"];
                this.columnItemName = base.Columns["ItemName"];
                this.columnDDName = base.Columns["DDName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNewMark = new System.Data.DataColumn("NewMark", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewMark);
                this.columnAssemblyName = new System.Data.DataColumn("AssemblyName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssemblyName);
                this.columnFormName = new System.Data.DataColumn("FormName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormName);
                this.columnItemName = new System.Data.DataColumn("ItemName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemName);
                this.columnDDName = new System.Data.DataColumn("DDName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDDName);
                this.columnNewMark.DefaultValue = ((string)("NEW"));
                this.columnAssemblyName.Caption = "アセンブリ";
                this.columnAssemblyName.DefaultValue = ((string)(""));
                this.columnFormName.Caption = "フォームＩＤ";
                this.columnFormName.DefaultValue = ((string)(""));
                this.columnItemName.Caption = "入力項目名";
                this.columnItemName.DefaultValue = ((string)(""));
                this.columnDDName.Caption = "ＤＤ";
                this.columnDDName.DefaultValue = ((string)(""));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UiSetRow NewUiSetRow() {
                return ((UiSetRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UiSetRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UiSetRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UiSetRowChanged != null)) {
                    this.UiSetRowChanged(this, new UiSetRowChangeEvent(((UiSetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UiSetRowChanging != null)) {
                    this.UiSetRowChanging(this, new UiSetRowChangeEvent(((UiSetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UiSetRowDeleted != null)) {
                    this.UiSetRowDeleted(this, new UiSetRowChangeEvent(((UiSetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UiSetRowDeleting != null)) {
                    this.UiSetRowDeleting(this, new UiSetRowChangeEvent(((UiSetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUiSetRow(UiSetRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                UiSetDataSet ds = new UiSetDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UiSetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SetDDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAssemblyName;
            
            private System.Data.DataColumn columnRemarks;
            
            private System.Data.DataColumn columnDDName;
            
            private System.Data.DataColumn columnColumns;
            
            private System.Data.DataColumn columnAllowAlpha;
            
            private System.Data.DataColumn columnAllowKana;
            
            private System.Data.DataColumn columnAllowNum;
            
            private System.Data.DataColumn columnAllowNumSign;
            
            private System.Data.DataColumn columnAllowSign;
            
            private System.Data.DataColumn columnAllowSpace;
            
            private System.Data.DataColumn columnAllowWord;
            
            private System.Data.DataColumn columnHAlign;
            
            private System.Data.DataColumn columnPadZero;
            
            private System.Data.DataColumn columnAllowZeroCode;
            
            private System.Data.DataColumn columnImeMode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetDDDataTable() {
                this.TableName = "SetDD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SetDDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SetDDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AssemblyNameColumn {
                get {
                    return this.columnAssemblyName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DDNameColumn {
                get {
                    return this.columnDDName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ColumnsColumn {
                get {
                    return this.columnColumns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AllowAlphaColumn {
                get {
                    return this.columnAllowAlpha;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AllowKanaColumn {
                get {
                    return this.columnAllowKana;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AllowNumColumn {
                get {
                    return this.columnAllowNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AllowNumSignColumn {
                get {
                    return this.columnAllowNumSign;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AllowSignColumn {
                get {
                    return this.columnAllowSign;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AllowSpaceColumn {
                get {
                    return this.columnAllowSpace;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AllowWordColumn {
                get {
                    return this.columnAllowWord;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HAlignColumn {
                get {
                    return this.columnHAlign;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PadZeroColumn {
                get {
                    return this.columnPadZero;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AllowZeroCodeColumn {
                get {
                    return this.columnAllowZeroCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ImeModeColumn {
                get {
                    return this.columnImeMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetDDRow this[int index] {
                get {
                    return ((SetDDRow)(this.Rows[index]));
                }
            }
            
            public event SetDDRowChangeEventHandler SetDDRowChanging;
            
            public event SetDDRowChangeEventHandler SetDDRowChanged;
            
            public event SetDDRowChangeEventHandler SetDDRowDeleting;
            
            public event SetDDRowChangeEventHandler SetDDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSetDDRow(SetDDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetDDRow AddSetDDRow(string AssemblyName, string Remarks, string DDName, int Columns, bool AllowAlpha, bool AllowKana, bool AllowNum, bool AllowNumSign, bool AllowSign, bool AllowSpace, bool AllowWord, string HAlign, bool PadZero, bool AllowZeroCode, string ImeMode) {
                SetDDRow rowSetDDRow = ((SetDDRow)(this.NewRow()));
                rowSetDDRow.ItemArray = new object[] {
                        AssemblyName,
                        Remarks,
                        DDName,
                        Columns,
                        AllowAlpha,
                        AllowKana,
                        AllowNum,
                        AllowNumSign,
                        AllowSign,
                        AllowSpace,
                        AllowWord,
                        HAlign,
                        PadZero,
                        AllowZeroCode,
                        ImeMode};
                this.Rows.Add(rowSetDDRow);
                return rowSetDDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SetDDDataTable cln = ((SetDDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SetDDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssemblyName = base.Columns["AssemblyName"];
                this.columnRemarks = base.Columns["Remarks"];
                this.columnDDName = base.Columns["DDName"];
                this.columnColumns = base.Columns["Columns"];
                this.columnAllowAlpha = base.Columns["AllowAlpha"];
                this.columnAllowKana = base.Columns["AllowKana"];
                this.columnAllowNum = base.Columns["AllowNum"];
                this.columnAllowNumSign = base.Columns["AllowNumSign"];
                this.columnAllowSign = base.Columns["AllowSign"];
                this.columnAllowSpace = base.Columns["AllowSpace"];
                this.columnAllowWord = base.Columns["AllowWord"];
                this.columnHAlign = base.Columns["HAlign"];
                this.columnPadZero = base.Columns["PadZero"];
                this.columnAllowZeroCode = base.Columns["AllowZeroCode"];
                this.columnImeMode = base.Columns["ImeMode"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssemblyName = new System.Data.DataColumn("AssemblyName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssemblyName);
                this.columnRemarks = new System.Data.DataColumn("Remarks", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemarks);
                this.columnDDName = new System.Data.DataColumn("DDName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDDName);
                this.columnColumns = new System.Data.DataColumn("Columns", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumns);
                this.columnAllowAlpha = new System.Data.DataColumn("AllowAlpha", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowAlpha);
                this.columnAllowKana = new System.Data.DataColumn("AllowKana", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowKana);
                this.columnAllowNum = new System.Data.DataColumn("AllowNum", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowNum);
                this.columnAllowNumSign = new System.Data.DataColumn("AllowNumSign", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowNumSign);
                this.columnAllowSign = new System.Data.DataColumn("AllowSign", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowSign);
                this.columnAllowSpace = new System.Data.DataColumn("AllowSpace", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowSpace);
                this.columnAllowWord = new System.Data.DataColumn("AllowWord", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowWord);
                this.columnHAlign = new System.Data.DataColumn("HAlign", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHAlign);
                this.columnPadZero = new System.Data.DataColumn("PadZero", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPadZero);
                this.columnAllowZeroCode = new System.Data.DataColumn("AllowZeroCode", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowZeroCode);
                this.columnImeMode = new System.Data.DataColumn("ImeMode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnImeMode);
                this.columnColumns.DefaultValue = ((int)(0));
                this.columnAllowAlpha.DefaultValue = ((bool)(false));
                this.columnAllowKana.DefaultValue = ((bool)(false));
                this.columnAllowNum.DefaultValue = ((bool)(false));
                this.columnAllowNumSign.DefaultValue = ((bool)(false));
                this.columnAllowSign.DefaultValue = ((bool)(false));
                this.columnAllowSpace.DefaultValue = ((bool)(false));
                this.columnAllowWord.DefaultValue = ((bool)(false));
                this.columnPadZero.DefaultValue = ((bool)(false));
                this.columnAllowZeroCode.DefaultValue = ((bool)(false));
                this.columnImeMode.DefaultValue = ((string)(""));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetDDRow NewSetDDRow() {
                return ((SetDDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SetDDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SetDDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SetDDRowChanged != null)) {
                    this.SetDDRowChanged(this, new SetDDRowChangeEvent(((SetDDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SetDDRowChanging != null)) {
                    this.SetDDRowChanging(this, new SetDDRowChangeEvent(((SetDDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SetDDRowDeleted != null)) {
                    this.SetDDRowDeleted(this, new SetDDRowChangeEvent(((SetDDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SetDDRowDeleting != null)) {
                    this.SetDDRowDeleting(this, new SetDDRowChangeEvent(((SetDDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSetDDRow(SetDDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                UiSetDataSet ds = new UiSetDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SetDDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UiSetRow : System.Data.DataRow {
            
            private UiSetDataTable tableUiSet;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UiSetRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUiSet = ((UiSetDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewMark {
                get {
                    if (this.IsNewMarkNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUiSet.NewMarkColumn]));
                    }
                }
                set {
                    this[this.tableUiSet.NewMarkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssemblyName {
                get {
                    if (this.IsAssemblyNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUiSet.AssemblyNameColumn]));
                    }
                }
                set {
                    this[this.tableUiSet.AssemblyNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormName {
                get {
                    if (this.IsFormNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUiSet.FormNameColumn]));
                    }
                }
                set {
                    this[this.tableUiSet.FormNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemName {
                get {
                    if (this.IsItemNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUiSet.ItemNameColumn]));
                    }
                }
                set {
                    this[this.tableUiSet.ItemNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DDName {
                get {
                    if (this.IsDDNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUiSet.DDNameColumn]));
                    }
                }
                set {
                    this[this.tableUiSet.DDNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewMarkNull() {
                return this.IsNull(this.tableUiSet.NewMarkColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewMarkNull() {
                this[this.tableUiSet.NewMarkColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssemblyNameNull() {
                return this.IsNull(this.tableUiSet.AssemblyNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssemblyNameNull() {
                this[this.tableUiSet.AssemblyNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormNameNull() {
                return this.IsNull(this.tableUiSet.FormNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormNameNull() {
                this[this.tableUiSet.FormNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNameNull() {
                return this.IsNull(this.tableUiSet.ItemNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNameNull() {
                this[this.tableUiSet.ItemNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDDNameNull() {
                return this.IsNull(this.tableUiSet.DDNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDDNameNull() {
                this[this.tableUiSet.DDNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SetDDRow : System.Data.DataRow {
            
            private SetDDDataTable tableSetDD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SetDDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSetDD = ((SetDDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssemblyName {
                get {
                    if (this.IsAssemblyNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSetDD.AssemblyNameColumn]));
                    }
                }
                set {
                    this[this.tableSetDD.AssemblyNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remarks {
                get {
                    if (this.IsRemarksNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSetDD.RemarksColumn]));
                    }
                }
                set {
                    this[this.tableSetDD.RemarksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DDName {
                get {
                    if (this.IsDDNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSetDD.DDNameColumn]));
                    }
                }
                set {
                    this[this.tableSetDD.DDNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Columns {
                get {
                    try {
                        return ((int)(this[this.tableSetDD.ColumnsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SetDD\' にある列 \'Columns\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetDD.ColumnsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AllowAlpha {
                get {
                    try {
                        return ((bool)(this[this.tableSetDD.AllowAlphaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SetDD\' にある列 \'AllowAlpha\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetDD.AllowAlphaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AllowKana {
                get {
                    try {
                        return ((bool)(this[this.tableSetDD.AllowKanaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SetDD\' にある列 \'AllowKana\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetDD.AllowKanaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AllowNum {
                get {
                    try {
                        return ((bool)(this[this.tableSetDD.AllowNumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SetDD\' にある列 \'AllowNum\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetDD.AllowNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AllowNumSign {
                get {
                    try {
                        return ((bool)(this[this.tableSetDD.AllowNumSignColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SetDD\' にある列 \'AllowNumSign\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetDD.AllowNumSignColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AllowSign {
                get {
                    try {
                        return ((bool)(this[this.tableSetDD.AllowSignColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SetDD\' にある列 \'AllowSign\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetDD.AllowSignColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AllowSpace {
                get {
                    try {
                        return ((bool)(this[this.tableSetDD.AllowSpaceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SetDD\' にある列 \'AllowSpace\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetDD.AllowSpaceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AllowWord {
                get {
                    try {
                        return ((bool)(this[this.tableSetDD.AllowWordColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SetDD\' にある列 \'AllowWord\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetDD.AllowWordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HAlign {
                get {
                    if (this.IsHAlignNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSetDD.HAlignColumn]));
                    }
                }
                set {
                    this[this.tableSetDD.HAlignColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PadZero {
                get {
                    try {
                        return ((bool)(this[this.tableSetDD.PadZeroColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SetDD\' にある列 \'PadZero\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetDD.PadZeroColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AllowZeroCode {
                get {
                    try {
                        return ((bool)(this[this.tableSetDD.AllowZeroCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SetDD\' にある列 \'AllowZeroCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetDD.AllowZeroCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImeMode {
                get {
                    if (this.IsImeModeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSetDD.ImeModeColumn]));
                    }
                }
                set {
                    this[this.tableSetDD.ImeModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssemblyNameNull() {
                return this.IsNull(this.tableSetDD.AssemblyNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssemblyNameNull() {
                this[this.tableSetDD.AssemblyNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarksNull() {
                return this.IsNull(this.tableSetDD.RemarksColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarksNull() {
                this[this.tableSetDD.RemarksColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDDNameNull() {
                return this.IsNull(this.tableSetDD.DDNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDDNameNull() {
                this[this.tableSetDD.DDNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumnsNull() {
                return this.IsNull(this.tableSetDD.ColumnsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumnsNull() {
                this[this.tableSetDD.ColumnsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowAlphaNull() {
                return this.IsNull(this.tableSetDD.AllowAlphaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowAlphaNull() {
                this[this.tableSetDD.AllowAlphaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowKanaNull() {
                return this.IsNull(this.tableSetDD.AllowKanaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowKanaNull() {
                this[this.tableSetDD.AllowKanaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowNumNull() {
                return this.IsNull(this.tableSetDD.AllowNumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowNumNull() {
                this[this.tableSetDD.AllowNumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowNumSignNull() {
                return this.IsNull(this.tableSetDD.AllowNumSignColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowNumSignNull() {
                this[this.tableSetDD.AllowNumSignColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowSignNull() {
                return this.IsNull(this.tableSetDD.AllowSignColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowSignNull() {
                this[this.tableSetDD.AllowSignColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowSpaceNull() {
                return this.IsNull(this.tableSetDD.AllowSpaceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowSpaceNull() {
                this[this.tableSetDD.AllowSpaceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowWordNull() {
                return this.IsNull(this.tableSetDD.AllowWordColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowWordNull() {
                this[this.tableSetDD.AllowWordColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHAlignNull() {
                return this.IsNull(this.tableSetDD.HAlignColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHAlignNull() {
                this[this.tableSetDD.HAlignColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPadZeroNull() {
                return this.IsNull(this.tableSetDD.PadZeroColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPadZeroNull() {
                this[this.tableSetDD.PadZeroColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowZeroCodeNull() {
                return this.IsNull(this.tableSetDD.AllowZeroCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowZeroCodeNull() {
                this[this.tableSetDD.AllowZeroCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImeModeNull() {
                return this.IsNull(this.tableSetDD.ImeModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImeModeNull() {
                this[this.tableSetDD.ImeModeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UiSetRowChangeEvent : System.EventArgs {
            
            private UiSetRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UiSetRowChangeEvent(UiSetRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UiSetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SetDDRowChangeEvent : System.EventArgs {
            
            private SetDDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetDDRowChangeEvent(SetDDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetDDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591