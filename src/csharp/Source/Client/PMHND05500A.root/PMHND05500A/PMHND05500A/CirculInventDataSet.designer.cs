//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.8762
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.Controller {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("CirculInventDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CirculInventDataSet : global::System.Data.DataSet {
        
        private InventListDataTable tableInventList;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CirculInventDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CirculInventDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["InventList"] != null)) {
                    base.Tables.Add(new InventListDataTable(ds.Tables["InventList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InventListDataTable InventList {
            get {
                return this.tableInventList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            CirculInventDataSet cln = ((CirculInventDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["InventList"] != null)) {
                    base.Tables.Add(new InventListDataTable(ds.Tables["InventList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableInventList = ((InventListDataTable)(base.Tables["InventList"]));
            if ((initTable == true)) {
                if ((this.tableInventList != null)) {
                    this.tableInventList.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "CirculInventDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CirculInventDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableInventList = new InventListDataTable();
            base.Tables.Add(this.tableInventList);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInventList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            CirculInventDataSet ds = new CirculInventDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void InventListRowChangeEventHandler(object sender, InventListRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InventListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnInventoryDate;
            
            private global::System.Data.DataColumn columnInventoryDateTime;
            
            private global::System.Data.DataColumn columnInventoryTime;
            
            private global::System.Data.DataColumn columnWarehouseCode;
            
            private global::System.Data.DataColumn columnWarehouseName;
            
            private global::System.Data.DataColumn columnWarehouseShelfNo;
            
            private global::System.Data.DataColumn columnMakerName;
            
            private global::System.Data.DataColumn columnGoodsName;
            
            private global::System.Data.DataColumn columnGoodsNo;
            
            private global::System.Data.DataColumn columnStockTotal;
            
            private global::System.Data.DataColumn columnInventoryStockCnt;
            
            private global::System.Data.DataColumn columnEmployeeCode;
            
            private global::System.Data.DataColumn columnNote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventListDataTable() {
                this.TableName = "InventList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InventListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InventListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryDateColumn {
                get {
                    return this.columnInventoryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryDateTimeColumn {
                get {
                    return this.columnInventoryDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryTimeColumn {
                get {
                    return this.columnInventoryTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseCodeColumn {
                get {
                    return this.columnWarehouseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseNameColumn {
                get {
                    return this.columnWarehouseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseShelfNoColumn {
                get {
                    return this.columnWarehouseShelfNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MakerNameColumn {
                get {
                    return this.columnMakerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNameColumn {
                get {
                    return this.columnGoodsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNoColumn {
                get {
                    return this.columnGoodsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockTotalColumn {
                get {
                    return this.columnStockTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryStockCntColumn {
                get {
                    return this.columnInventoryStockCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventListRow this[int index] {
                get {
                    return ((InventListRow)(this.Rows[index]));
                }
            }
            
            public event InventListRowChangeEventHandler InventListRowChanging;
            
            public event InventListRowChangeEventHandler InventListRowChanged;
            
            public event InventListRowChangeEventHandler InventListRowDeleting;
            
            public event InventListRowChangeEventHandler InventListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInventListRow(InventListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventListRow AddInventListRow(string InventoryDate, string InventoryDateTime, string InventoryTime, string WarehouseCode, string WarehouseName, string WarehouseShelfNo, string MakerName, string GoodsName, string GoodsNo, string StockTotal, string InventoryStockCnt, string EmployeeCode, string Note) {
                InventListRow rowInventListRow = ((InventListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InventoryDate,
                        InventoryDateTime,
                        InventoryTime,
                        WarehouseCode,
                        WarehouseName,
                        WarehouseShelfNo,
                        MakerName,
                        GoodsName,
                        GoodsNo,
                        StockTotal,
                        InventoryStockCnt,
                        EmployeeCode,
                        Note};
                rowInventListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInventListRow);
                return rowInventListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InventListDataTable cln = ((InventListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InventListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInventoryDate = base.Columns["InventoryDate"];
                this.columnInventoryDateTime = base.Columns["InventoryDateTime"];
                this.columnInventoryTime = base.Columns["InventoryTime"];
                this.columnWarehouseCode = base.Columns["WarehouseCode"];
                this.columnWarehouseName = base.Columns["WarehouseName"];
                this.columnWarehouseShelfNo = base.Columns["WarehouseShelfNo"];
                this.columnMakerName = base.Columns["MakerName"];
                this.columnGoodsName = base.Columns["GoodsName"];
                this.columnGoodsNo = base.Columns["GoodsNo"];
                this.columnStockTotal = base.Columns["StockTotal"];
                this.columnInventoryStockCnt = base.Columns["InventoryStockCnt"];
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnNote = base.Columns["Note"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInventoryDate = new global::System.Data.DataColumn("InventoryDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryDate);
                this.columnInventoryDateTime = new global::System.Data.DataColumn("InventoryDateTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryDateTime);
                this.columnInventoryTime = new global::System.Data.DataColumn("InventoryTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryTime);
                this.columnWarehouseCode = new global::System.Data.DataColumn("WarehouseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseCode);
                this.columnWarehouseName = new global::System.Data.DataColumn("WarehouseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseName);
                this.columnWarehouseShelfNo = new global::System.Data.DataColumn("WarehouseShelfNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseShelfNo);
                this.columnMakerName = new global::System.Data.DataColumn("MakerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMakerName);
                this.columnGoodsName = new global::System.Data.DataColumn("GoodsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsName);
                this.columnGoodsNo = new global::System.Data.DataColumn("GoodsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsNo);
                this.columnStockTotal = new global::System.Data.DataColumn("StockTotal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockTotal);
                this.columnInventoryStockCnt = new global::System.Data.DataColumn("InventoryStockCnt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryStockCnt);
                this.columnEmployeeCode = new global::System.Data.DataColumn("EmployeeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnInventoryDate.Caption = "棚卸日";
                this.columnInventoryDateTime.Caption = "棚卸日時";
                this.columnInventoryTime.Caption = "棚卸時間";
                this.columnWarehouseCode.Caption = "倉庫コード";
                this.columnWarehouseName.Caption = "倉庫名";
                this.columnWarehouseShelfNo.Caption = "棚番";
                this.columnMakerName.Caption = "メーカー";
                this.columnGoodsName.Caption = "品名";
                this.columnGoodsNo.Caption = "品番";
                this.columnStockTotal.Caption = "帳簿数";
                this.columnInventoryStockCnt.Caption = "棚卸数";
                this.columnEmployeeCode.Caption = "棚卸担当者";
                this.columnNote.Caption = "備考";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventListRow NewInventListRow() {
                return ((InventListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InventListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InventListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InventListRowChanged != null)) {
                    this.InventListRowChanged(this, new InventListRowChangeEvent(((InventListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InventListRowChanging != null)) {
                    this.InventListRowChanging(this, new InventListRowChangeEvent(((InventListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InventListRowDeleted != null)) {
                    this.InventListRowDeleted(this, new InventListRowChangeEvent(((InventListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InventListRowDeleting != null)) {
                    this.InventListRowDeleting(this, new InventListRowChangeEvent(((InventListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInventListRow(InventListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CirculInventDataSet ds = new CirculInventDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InventListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InventListRow : global::System.Data.DataRow {
            
            private InventListDataTable tableInventList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InventListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInventList = ((InventListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InventoryDate {
                get {
                    try {
                        return ((string)(this[this.tableInventList.InventoryDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InventList\' にある列 \'InventoryDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventList.InventoryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InventoryDateTime {
                get {
                    try {
                        return ((string)(this[this.tableInventList.InventoryDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InventList\' にある列 \'InventoryDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventList.InventoryDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InventoryTime {
                get {
                    try {
                        return ((string)(this[this.tableInventList.InventoryTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InventList\' にある列 \'InventoryTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventList.InventoryTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseCode {
                get {
                    try {
                        return ((string)(this[this.tableInventList.WarehouseCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InventList\' にある列 \'WarehouseCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventList.WarehouseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseName {
                get {
                    try {
                        return ((string)(this[this.tableInventList.WarehouseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InventList\' にある列 \'WarehouseName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventList.WarehouseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseShelfNo {
                get {
                    try {
                        return ((string)(this[this.tableInventList.WarehouseShelfNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InventList\' にある列 \'WarehouseShelfNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventList.WarehouseShelfNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MakerName {
                get {
                    try {
                        return ((string)(this[this.tableInventList.MakerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InventList\' にある列 \'MakerName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventList.MakerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsName {
                get {
                    try {
                        return ((string)(this[this.tableInventList.GoodsNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InventList\' にある列 \'GoodsName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventList.GoodsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsNo {
                get {
                    try {
                        return ((string)(this[this.tableInventList.GoodsNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InventList\' にある列 \'GoodsNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventList.GoodsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockTotal {
                get {
                    try {
                        return ((string)(this[this.tableInventList.StockTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InventList\' にある列 \'StockTotal\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventList.StockTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InventoryStockCnt {
                get {
                    try {
                        return ((string)(this[this.tableInventList.InventoryStockCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InventList\' にある列 \'InventoryStockCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventList.InventoryStockCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableInventList.EmployeeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InventList\' にある列 \'EmployeeCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventList.EmployeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableInventList.NoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InventList\' にある列 \'Note\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventList.NoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInventoryDateNull() {
                return this.IsNull(this.tableInventList.InventoryDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInventoryDateNull() {
                this[this.tableInventList.InventoryDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInventoryDateTimeNull() {
                return this.IsNull(this.tableInventList.InventoryDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInventoryDateTimeNull() {
                this[this.tableInventList.InventoryDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInventoryTimeNull() {
                return this.IsNull(this.tableInventList.InventoryTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInventoryTimeNull() {
                this[this.tableInventList.InventoryTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseCodeNull() {
                return this.IsNull(this.tableInventList.WarehouseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseCodeNull() {
                this[this.tableInventList.WarehouseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNameNull() {
                return this.IsNull(this.tableInventList.WarehouseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNameNull() {
                this[this.tableInventList.WarehouseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseShelfNoNull() {
                return this.IsNull(this.tableInventList.WarehouseShelfNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseShelfNoNull() {
                this[this.tableInventList.WarehouseShelfNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMakerNameNull() {
                return this.IsNull(this.tableInventList.MakerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMakerNameNull() {
                this[this.tableInventList.MakerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsNameNull() {
                return this.IsNull(this.tableInventList.GoodsNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsNameNull() {
                this[this.tableInventList.GoodsNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsNoNull() {
                return this.IsNull(this.tableInventList.GoodsNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsNoNull() {
                this[this.tableInventList.GoodsNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockTotalNull() {
                return this.IsNull(this.tableInventList.StockTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockTotalNull() {
                this[this.tableInventList.StockTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInventoryStockCntNull() {
                return this.IsNull(this.tableInventList.InventoryStockCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInventoryStockCntNull() {
                this[this.tableInventList.InventoryStockCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeCodeNull() {
                return this.IsNull(this.tableInventList.EmployeeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeCodeNull() {
                this[this.tableInventList.EmployeeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteNull() {
                return this.IsNull(this.tableInventList.NoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteNull() {
                this[this.tableInventList.NoteColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InventListRowChangeEvent : global::System.EventArgs {
            
            private InventListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventListRowChangeEvent(InventListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591