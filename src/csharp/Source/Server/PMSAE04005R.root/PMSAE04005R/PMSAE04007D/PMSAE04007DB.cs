//****************************************************************************//
// システム         : PM.NS
// プログラム名称   : 売上データ送信ログ
// プログラム概要   : 売上データ送信ログデータパラメータ
//----------------------------------------------------------------------------//
//                (c)Copyright  2013 Broadleaf Co.,Ltd.
//============================================================================//
// 履歴
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 自動生成
// 作 成 日  2013.06.26  修正内容 : 新規作成
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 
// 修 正 日              修正内容 : 
//----------------------------------------------------------------------------//

using System;
using System.Collections;
using Broadleaf.Library.Data;
using Broadleaf.Library.Runtime.Serialization;

namespace Broadleaf.Application.Remoting.ParamData
{
    /// public class name:   SAndESalSndLogListResultWork
    /// <summary>
    /// 売上データ送信ログワーク
    /// </summary>
    /// <remarks>
    /// <br>note             :   売上データ送信ログワークヘッダファイル</br>
    /// <br>Programmer       :   自動生成</br>
    /// <br>Date             :   </br>
    /// <br>Genarated Date   :   2013.06.26  (CSharp File Generated Date)</br>
    /// <br>Update Note      :   </br>
    /// </remarks>
    [Serializable]
    [Broadleaf.Library.Runtime.Serialization.CustomSerializationData]
    public class SAndESalSndLogListResultWork : IFileHeader
    {
        /// <summary>作成日時</summary>
        /// <remarks>共通ファイルヘッダ（DateTime:精度は100ナノ秒）</remarks>
        private DateTime _createDateTime;

        /// <summary>更新日時</summary>
        /// <remarks>共通ファイルヘッダ（DateTime:精度は100ナノ秒）</remarks>
        private DateTime _updateDateTime;

        /// <summary>企業コード</summary>
        /// <remarks>共通ファイルヘッダ（国2桁+県2桁+業種2桁+ユーザーコード10桁）</remarks>
        private string _enterpriseCode = "";

        /// <summary>GUID</summary>
        /// <remarks>共通ファイルヘッダ</remarks>
        private Guid _fileHeaderGuid;

        /// <summary>更新従業員コード</summary>
        /// <remarks>共通ファイルヘッダ</remarks>
        private string _updEmployeeCode = "";

        /// <summary>更新アセンブリID1</summary>
        /// <remarks>共通ファイルヘッダ（UI側の更新アセンブリID+「:」+バージョン）</remarks>
        private string _updAssemblyId1 = "";

        /// <summary>更新アセンブリID2</summary>
        /// <remarks>共通ファイルヘッダ（Server側の更新アセンブリID+「:」+バージョン）</remarks>
        private string _updAssemblyId2 = "";

        /// <summary>論理削除区分</summary>
        /// <remarks>共通ファイルヘッダ(0:有効,1:論理削除,2:保留,3:完全削除)</remarks>
        private Int32 _logicalDeleteCode;

        /// <summary>拠点コード</summary>
        private string _sectionCode = "";

        /// <summary>自動送信区分</summary>
        /// <remarks>0:手動,1:自動</remarks>
        private Int32 _sAndEAutoSendDiv;

        /// <summary>送信日時（開始）</summary>
        /// <remarks>送信開始時間（200601011212(西暦日付＋時分）</remarks>
        private Int64 _sendDateTimeStart;

        /// <summary>送信日時（終了）</summary>
        /// <remarks>送信完了時間（200601011212(西暦日付＋時分）</remarks>
        private Int64 _sendDateTimeEnd;

        /// <summary>送信対象日付（開始）</summary>
        /// <remarks>YYYYMMDD</remarks>
        private Int32 _sendObjDateStart;

        /// <summary>送信対象日付（終了）</summary>
        /// <remarks>YYYYMMDD</remarks>
        private Int32 _sendObjDateEnd;

        /// <summary>送信対象得意先（開始）</summary>
        private Int32 _sendObjCustStart;

        /// <summary>送信対象得意先（終了）</summary>
        private Int32 _sendObjCustEnd;

        /// <summary>送信対象区分</summary>
        /// <remarks>0:全て,1:未送信,2：送信済</remarks>
        private Int32 _sendObjDiv;

        /// <summary>送信結果</summary>
        /// <remarks>0:正常完了,1：失敗</remarks>
        private Int32 _sendResults;

        /// <summary>送信エラー内容</summary>
        private string _sendErrorContents = "";

        /// <summary>送信伝票枚数</summary>
        /// <remarks>送信した伝票枚数</remarks>
        private Int32 _sendSlipCount;

        /// <summary>送信伝票明細数</summary>
        /// <remarks>送信した伝票明細数表示</remarks>
        private Int32 _sendSlipDtlCnt;

        /// <summary>送信伝票合計金額</summary>
        /// <remarks>送信した伝票の合計金額</remarks>
        private Int64 _sendSlipTotalMny;

        /// public propaty name  :  CreateDateTime
        /// <summary>作成日時</summary>
        /// <value>共通ファイルヘッダ（DateTime:精度は100ナノ秒）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   作成日時</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public DateTime CreateDateTime
        {
            get { return _createDateTime; }
            set { _createDateTime = value; }
        }

        /// public propaty name  :  UpdateDateTime
        /// <summary>更新日時</summary>
        /// <value>共通ファイルヘッダ（DateTime:精度は100ナノ秒）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   更新日時</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public DateTime UpdateDateTime
        {
            get { return _updateDateTime; }
            set { _updateDateTime = value; }
        }

        /// public propaty name  :  EnterpriseCode
        /// <summary>企業コード</summary>
        /// <value>共通ファイルヘッダ（国2桁+県2桁+業種2桁+ユーザーコード10桁）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   企業コード</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string EnterpriseCode
        {
            get { return _enterpriseCode; }
            set { _enterpriseCode = value; }
        }

        /// public propaty name  :  FileHeaderGuid
        /// <summary>GUID</summary>
        /// <value>共通ファイルヘッダ</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   GUID</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Guid FileHeaderGuid
        {
            get { return _fileHeaderGuid; }
            set { _fileHeaderGuid = value; }
        }

        /// public propaty name  :  UpdEmployeeCode
        /// <summary>更新従業員コード</summary>
        /// <value>共通ファイルヘッダ</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   更新従業員コード</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string UpdEmployeeCode
        {
            get { return _updEmployeeCode; }
            set { _updEmployeeCode = value; }
        }

        /// public propaty name  :  UpdAssemblyId1
        /// <summary>更新アセンブリID1</summary>
        /// <value>共通ファイルヘッダ（UI側の更新アセンブリID+「:」+バージョン）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   更新アセンブリID1</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string UpdAssemblyId1
        {
            get { return _updAssemblyId1; }
            set { _updAssemblyId1 = value; }
        }

        /// public propaty name  :  UpdAssemblyId2
        /// <summary>更新アセンブリID2</summary>
        /// <value>共通ファイルヘッダ（Server側の更新アセンブリID+「:」+バージョン）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   更新アセンブリID2</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string UpdAssemblyId2
        {
            get { return _updAssemblyId2; }
            set { _updAssemblyId2 = value; }
        }

        /// public propaty name  :  LogicalDeleteCode
        /// <summary>論理削除区分</summary>
        /// <value>共通ファイルヘッダ(0:有効,1:論理削除,2:保留,3:完全削除)</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   論理削除区分</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 LogicalDeleteCode
        {
            get { return _logicalDeleteCode; }
            set { _logicalDeleteCode = value; }
        }

        /// public propaty name  :  SectionCode
        /// <summary>拠点コード</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   拠点コード</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string SectionCode
        {
            get { return _sectionCode; }
            set { _sectionCode = value; }
        }

        /// public propaty name  :  SAndEAutoSendDiv
        /// <summary>自動送信区分</summary>
        /// <value>0:手動,1:自動</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   自動送信区分</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 SAndEAutoSendDiv
        {
            get { return _sAndEAutoSendDiv; }
            set { _sAndEAutoSendDiv = value; }
        }

        /// public propaty name  :  SendDateTimeStart
        /// <summary>送信日時（開始）</summary>
        /// <value>送信開始時間（200601011212(西暦日付＋時分）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   送信日時（開始）</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int64 SendDateTimeStart
        {
            get { return _sendDateTimeStart; }
            set { _sendDateTimeStart = value; }
        }

        /// public propaty name  :  SendDateTimeEnd
        /// <summary>送信日時（終了）</summary>
        /// <value>送信完了時間（200601011212(西暦日付＋時分）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   送信日時（終了）</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int64 SendDateTimeEnd
        {
            get { return _sendDateTimeEnd; }
            set { _sendDateTimeEnd = value; }
        }

        /// public propaty name  :  SendObjDateStart
        /// <summary>送信対象日付（開始）</summary>
        /// <value>YYYYMMDD</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   送信対象日付（開始）</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 SendObjDateStart
        {
            get { return _sendObjDateStart; }
            set { _sendObjDateStart = value; }
        }

        /// public propaty name  :  SendObjDateEnd
        /// <summary>送信対象日付（終了）</summary>
        /// <value>YYYYMMDD</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   送信対象日付（終了）</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 SendObjDateEnd
        {
            get { return _sendObjDateEnd; }
            set { _sendObjDateEnd = value; }
        }

        /// public propaty name  :  SendObjCustStart
        /// <summary>送信対象得意先（開始）</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   送信対象得意先（開始）</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 SendObjCustStart
        {
            get { return _sendObjCustStart; }
            set { _sendObjCustStart = value; }
        }

        /// public propaty name  :  SendObjCustEnd
        /// <summary>送信対象得意先（終了）</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   送信対象得意先（終了）</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 SendObjCustEnd
        {
            get { return _sendObjCustEnd; }
            set { _sendObjCustEnd = value; }
        }

        /// public propaty name  :  SendObjDiv
        /// <summary>送信対象区分</summary>
        /// <value>0:全て,1:未送信,2：送信済</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   送信対象区分</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 SendObjDiv
        {
            get { return _sendObjDiv; }
            set { _sendObjDiv = value; }
        }

        /// public propaty name  :  SendResults
        /// <summary>送信結果</summary>
        /// <value>0:正常完了,1：失敗</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   送信結果</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 SendResults
        {
            get { return _sendResults; }
            set { _sendResults = value; }
        }

        /// public propaty name  :  SendErrorContents
        /// <summary>送信エラー内容</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   送信エラー内容</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string SendErrorContents
        {
            get { return _sendErrorContents; }
            set { _sendErrorContents = value; }
        }

        /// public propaty name  :  SendSlipCount
        /// <summary>送信伝票枚数</summary>
        /// <value>送信した伝票枚数</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   送信伝票枚数</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 SendSlipCount
        {
            get { return _sendSlipCount; }
            set { _sendSlipCount = value; }
        }

        /// public propaty name  :  SendSlipDtlCnt
        /// <summary>送信伝票明細数</summary>
        /// <value>送信した伝票明細数表示</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   送信伝票明細数</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 SendSlipDtlCnt
        {
            get { return _sendSlipDtlCnt; }
            set { _sendSlipDtlCnt = value; }
        }

        /// public propaty name  :  SendSlipTotalMny
        /// <summary>送信伝票合計金額</summary>
        /// <value>送信した伝票の合計金額</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   送信伝票合計金額</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int64 SendSlipTotalMny
        {
            get { return _sendSlipTotalMny; }
            set { _sendSlipTotalMny = value; }
        }

        /// <summary>
        /// 売上データ送信ログワークコンストラクタ
        /// </summary>
        /// <returns>SAndESalSndLogListResultWorkクラスのインスタンス</returns>
        /// <remarks>
        /// <br>Note　　　　　　 :   SAndESalSndLogListResultWorkクラスの新しいインスタンスを生成します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public SAndESalSndLogListResultWork()
        {
        }

    }

    /// <summary>
    ///  Ver5.10.1.0用のカスタムシライアライザです。
    /// </summary>
    /// <returns>SAndESalSndLogListResultWorkクラスのインスタンス(object)</returns>
    /// <remarks>
    /// <br>Note　　　　　　 :   SAndESalSndLogListResultWorkクラスのカスタムシリアライザを定義します</br>
    /// <br>Programer        :   自動生成</br>
    /// </remarks>
    public class SAndESalSndLogListResultWork_SerializationSurrogate_For_V51010 : Broadleaf.Library.Runtime.Serialization.ICustomSerializationSurrogate
    {
        #region ICustomSerializationSurrogate メンバ

        /// <summary>
        ///  Ver5.10.1.0用のカスタムシリアライザです
        /// </summary>
        /// <remarks>
        /// <br>Note　　　　　　 :   SAndESalSndLogListResultWorkクラスのカスタムシリアライザを定義します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public void Serialize(System.IO.BinaryWriter writer, object graph)
        {
            // TODO:  SAndESalSndLogListResultWork_SerializationSurrogate_For_V51010.Serialize 実装を追加します。
            if (writer == null)
                throw new ArgumentNullException();

            if (graph != null && !(graph is SAndESalSndLogListResultWork || graph is ArrayList || graph is SAndESalSndLogListResultWork[]))
                throw new ArgumentException(string.Format("graphが{0}のインスタンスでありません", typeof(SAndESalSndLogListResultWork).FullName));

            if (graph != null && graph is SAndESalSndLogListResultWork)
            {
                Type t = graph.GetType();
                if (!CustomFormatterServices.NeedCustomSerialization(t))
                    throw new ArgumentException(string.Format("graphの型:{0}がカスタムシリアライズの対象でありません", t.FullName));
            }

            //SerializationTypeInfo
            Broadleaf.Library.Runtime.Serialization.TypeSerializationInfo serInfo = new Broadleaf.Library.Runtime.Serialization.TypeSerializationInfo(", Version=5.10.1.0, Culture=neutral, publicKeyToken=null", "Broadleaf.Application.Remoting.ParamData.SAndESalSndLogListResultWork");

            //繰り返し数の判定を行います。この部分は適宜業務要件に応じて行ってください。
            int occurrence = 0;     //一般にゼロの場合もありえます
            if (graph is ArrayList)
            {
                serInfo.RetTypeInfo = 0;
                occurrence = ((ArrayList)graph).Count;
            }
            else if (graph is SAndESalSndLogListResultWork[])
            {
                serInfo.RetTypeInfo = 2;
                occurrence = ((SAndESalSndLogListResultWork[])graph).Length;
            }
            else if (graph is SAndESalSndLogListResultWork)
            {
                serInfo.RetTypeInfo = 1;
                occurrence = 1;
            }

            serInfo.Occurrence = occurrence;		 //繰り返し数	

            //作成日時
            serInfo.MemberInfo.Add(typeof(Int64)); //CreateDateTime
            //更新日時
            serInfo.MemberInfo.Add(typeof(Int64)); //UpdateDateTime
            //企業コード
            serInfo.MemberInfo.Add(typeof(string)); //EnterpriseCode
            //GUID
            serInfo.MemberInfo.Add(typeof(byte[])); //FileHeaderGuid
            //更新従業員コード
            serInfo.MemberInfo.Add(typeof(string)); //UpdEmployeeCode
            //更新アセンブリID1
            serInfo.MemberInfo.Add(typeof(string)); //UpdAssemblyId1
            //更新アセンブリID2
            serInfo.MemberInfo.Add(typeof(string)); //UpdAssemblyId2
            //論理削除区分
            serInfo.MemberInfo.Add(typeof(Int32)); //LogicalDeleteCode
            //拠点コード
            serInfo.MemberInfo.Add(typeof(string)); //SectionCode
            //S&E自動送信区分
            serInfo.MemberInfo.Add(typeof(Int32)); //SAndEAutoSendDiv
            //送信日時（開始）
            serInfo.MemberInfo.Add(typeof(Int64)); //SendDateTimeStart
            //送信日時（終了）
            serInfo.MemberInfo.Add(typeof(Int64)); //SendDateTimeEnd
            //送信対象日付（開始）
            serInfo.MemberInfo.Add(typeof(Int32)); //SendObjDateStart
            //送信対象日付（終了）
            serInfo.MemberInfo.Add(typeof(Int32)); //SendObjDateEnd
            //送信対象得意先（開始）
            serInfo.MemberInfo.Add(typeof(Int32)); //SendObjCustStart
            //送信対象得意先（終了）
            serInfo.MemberInfo.Add(typeof(Int32)); //SendObjCustEnd
            //送信対象区分
            serInfo.MemberInfo.Add(typeof(Int32)); //SendObjDiv
            //送信結果
            serInfo.MemberInfo.Add(typeof(Int32)); //SendResults
            //送信エラー内容
            serInfo.MemberInfo.Add(typeof(string)); //SendErrorContents
            //送信伝票枚数
            serInfo.MemberInfo.Add(typeof(Int32)); //SendSlipCount
            //送信伝票明細数
            serInfo.MemberInfo.Add(typeof(Int32)); //SendSlipDtlCnt
            //送信伝票合計金額
            serInfo.MemberInfo.Add(typeof(Int64)); //SendSlipTotalMny



            serInfo.Serialize(writer, serInfo);
            if (graph is SAndESalSndLogListResultWork)
            {
                SAndESalSndLogListResultWork temp = (SAndESalSndLogListResultWork)graph;

                SetSAndESalSndLogListResultWork(writer, temp);
            }
            else
            {
                ArrayList lst = null;
                if (graph is SAndESalSndLogListResultWork[])
                {
                    lst = new ArrayList();
                    lst.AddRange((SAndESalSndLogListResultWork[])graph);
                }
                else
                {
                    lst = (ArrayList)graph;
                }

                foreach (SAndESalSndLogListResultWork temp in lst)
                {
                    SetSAndESalSndLogListResultWork(writer, temp);
                }

            }


        }


        /// <summary>
        /// SAndESalSndLogListResultWorkメンバ数(publicプロパティ数)
        /// </summary>
        private const int currentMemberCount = 22;

        /// <summary>
        ///  SAndESalSndLogListResultWorkインスタンス書き込み
        /// </summary>
        /// <remarks>
        /// <br>Note　　　　　　 :   SAndESalSndLogListResultWorkのインスタンスを書き込み</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        private void SetSAndESalSndLogListResultWork(System.IO.BinaryWriter writer, SAndESalSndLogListResultWork temp)
        {
            //作成日時
            writer.Write((Int64)temp.CreateDateTime.Ticks);
            //更新日時
            writer.Write((Int64)temp.UpdateDateTime.Ticks);
            //企業コード
            writer.Write(temp.EnterpriseCode);
            //GUID
            byte[] fileHeaderGuidArray = temp.FileHeaderGuid.ToByteArray();
            writer.Write(fileHeaderGuidArray.Length);
            writer.Write(temp.FileHeaderGuid.ToByteArray());
            //更新従業員コード
            writer.Write(temp.UpdEmployeeCode);
            //更新アセンブリID1
            writer.Write(temp.UpdAssemblyId1);
            //更新アセンブリID2
            writer.Write(temp.UpdAssemblyId2);
            //論理削除区分
            writer.Write((Int32)temp.LogicalDeleteCode);
            //拠点コード
            writer.Write(temp.SectionCode);
            //S&E自動送信区分
            writer.Write((Int32)temp.SAndEAutoSendDiv);
            //送信日時（開始）
            writer.Write((Int64)temp.SendDateTimeStart);
            //送信日時（終了）
            writer.Write((Int64)temp.SendDateTimeEnd);
            //送信対象日付（開始）
            writer.Write((Int32)temp.SendObjDateStart);
            //送信対象日付（終了）
            writer.Write((Int32)temp.SendObjDateEnd);
            //送信対象得意先（開始）
            writer.Write((Int32)temp.SendObjCustStart);
            //送信対象得意先（終了）
            writer.Write((Int32)temp.SendObjCustEnd);
            //送信対象区分
            writer.Write((Int32)temp.SendObjDiv);
            //送信結果
            writer.Write((Int32)temp.SendResults);
            //送信エラー内容
            writer.Write(temp.SendErrorContents);
            //送信伝票枚数
            writer.Write((Int32)temp.SendSlipCount);
            //送信伝票明細数
            writer.Write((Int32)temp.SendSlipDtlCnt);
            //送信伝票合計金額
            writer.Write((Int64)temp.SendSlipTotalMny);


        }

        /// <summary>
        ///  SAndESalSndLogListResultWorkインスタンス取得
        /// </summary>
        /// <returns>SAndESalSndLogListResultWorkクラスのインスタンス</returns>
        /// <remarks>
        /// <br>Note　　　　　　 :   SAndESalSndLogListResultWorkのインスタンスを取得します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        private SAndESalSndLogListResultWork GetSAndESalSndLogListResultWork(System.IO.BinaryReader reader, Broadleaf.Library.Runtime.Serialization.TypeSerializationInfo serInfo)
        {
            // V5.1.0.0なので不要ですが、V5.1.0.1以降では
            // serInfo.MemberInfo.Count < currentMemberCount
            // のケースについての配慮が必要になります。

            SAndESalSndLogListResultWork temp = new SAndESalSndLogListResultWork();

            //作成日時
            temp.CreateDateTime = new DateTime(reader.ReadInt64());
            //更新日時
            temp.UpdateDateTime = new DateTime(reader.ReadInt64());
            //企業コード
            temp.EnterpriseCode = reader.ReadString();
            //GUID
            int lenOfFileHeaderGuidArray = reader.ReadInt32();
            byte[] fileHeaderGuidArray = reader.ReadBytes(lenOfFileHeaderGuidArray);
            temp.FileHeaderGuid = new Guid(fileHeaderGuidArray);
            //更新従業員コード
            temp.UpdEmployeeCode = reader.ReadString();
            //更新アセンブリID1
            temp.UpdAssemblyId1 = reader.ReadString();
            //更新アセンブリID2
            temp.UpdAssemblyId2 = reader.ReadString();
            //論理削除区分
            temp.LogicalDeleteCode = reader.ReadInt32();
            //拠点コード
            temp.SectionCode = reader.ReadString();
            //S&E自動送信区分
            temp.SAndEAutoSendDiv = reader.ReadInt32();
            //送信日時（開始）
            temp.SendDateTimeStart = reader.ReadInt64();
            //送信日時（終了）
            temp.SendDateTimeEnd = reader.ReadInt64();
            //送信対象日付（開始）
            temp.SendObjDateStart = reader.ReadInt32();
            //送信対象日付（終了）
            temp.SendObjDateEnd = reader.ReadInt32();
            //送信対象得意先（開始）
            temp.SendObjCustStart = reader.ReadInt32();
            //送信対象得意先（終了）
            temp.SendObjCustEnd = reader.ReadInt32();
            //送信対象区分
            temp.SendObjDiv = reader.ReadInt32();
            //送信結果
            temp.SendResults = reader.ReadInt32();
            //送信エラー内容
            temp.SendErrorContents = reader.ReadString();
            //送信伝票枚数
            temp.SendSlipCount = reader.ReadInt32();
            //送信伝票明細数
            temp.SendSlipDtlCnt = reader.ReadInt32();
            //送信伝票合計金額
            temp.SendSlipTotalMny = reader.ReadInt64();



            //以下は読み飛ばしです。このバージョンが想定する EmployeeWork型以降のバージョンの
            //データをデシリアライズする場合、シリアライズしたフォーマッタが記述した
            //型情報にしたがって、ストリームから情報を読み出します...といっても
            //読み出して捨てることになります。
            for (int k = currentMemberCount; k < serInfo.MemberInfo.Count; ++k)
            {
                //byte[],char[]をデシリアライズする直前に、そのlengthが
                //デシリアライズされているケースがある、byte[],char[]の
                //デシリアライズにはlengthが必要なのでint型のデータをデ
                //シリアライズした場合は、この値をこの変数に退避します。
                int optCount = 0;
                object oMemberType = serInfo.MemberInfo[k];
                if (oMemberType is Type)
                {
                    Type t = (Type)oMemberType;
                    object oData = TypeDeserializer.DeserializePrimitiveType(reader, t, optCount);
                    if (t.Equals(typeof(int)))
                    {
                        optCount = Convert.ToInt32(oData);
                    }
                    else
                    {
                        optCount = 0;
                    }
                }
                else if (oMemberType is string)
                {
                    Broadleaf.Library.Runtime.Serialization.ICustomSerializationSurrogate formatter = CustomFormatterServices.GetSurrogate((string)oMemberType);
                    object userData = formatter.Deserialize(reader);  //読み飛ばし
                }
            }
            return temp;
        }

        /// <summary>
        ///  Ver5.10.1.0用のカスタムデシリアライザです
        /// </summary>
        /// <returns>SAndESalSndLogListResultWorkクラスのインスタンス(object)</returns>
        /// <remarks>
        /// <br>Note　　　　　　 :   SAndESalSndLogListResultWorkクラスのカスタムデシリアライザを定義します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            object retValue = null;
            Broadleaf.Library.Runtime.Serialization.TypeSerializationInfo serInfo = TypeSerializationInfo.DeserializedObject(reader);
            ArrayList lst = new ArrayList();
            for (int cnt = 0; cnt < serInfo.Occurrence; ++cnt)
            {
                SAndESalSndLogListResultWork temp = GetSAndESalSndLogListResultWork(reader, serInfo);
                lst.Add(temp);
            }
            switch (serInfo.RetTypeInfo)
            {
                case 0:
                    retValue = lst;
                    break;
                case 1:
                    retValue = lst[0];
                    break;
                case 2:
                    retValue = (SAndESalSndLogListResultWork[])lst.ToArray(typeof(SAndESalSndLogListResultWork));
                    break;
            }
            return retValue;
        }

        #endregion
    }

}
