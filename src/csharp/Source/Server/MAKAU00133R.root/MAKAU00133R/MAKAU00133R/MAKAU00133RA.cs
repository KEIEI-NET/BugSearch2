//****************************************************************************//
// システム         : PM.NS
// プログラム名称   : 売掛・買掛金額マスタ更新リモートオブジェクト
// プログラム概要   : 売掛・買掛金額マスタの実データ操作を行うクラスです。
//----------------------------------------------------------------------------//
//                (c)Copyright  2007 Broadleaf Co.,Ltd.
//============================================================================//
// 履歴
//----------------------------------------------------------------------------//
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 20081  疋田 勇人
// 作 成 日  2008.07.28  修正内容 : ＰＭ.ＮＳ用に変更
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23015  森本 大輝
// 作 成 日  2008.09.17  修正内容 : ＰＭ.ＮＳ用に変更
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23015  森本 大輝
// 作 成 日  2008.10.01  修正内容 : 月次締更新履歴マスタテーブルレイアウト変更対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2008.11.05  修正内容 : 不具合修正対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2008.11.10  修正内容 : 不具合修正対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2008.11.19  修正内容 : 不具合修正対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2008.12.22  修正内容 : 仕様・動作の全面見直し
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2009.01.13  修正内容 : 売掛・買掛金額集計メソッドの修正(売掛・買掛残高元帳用)
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2009.01.22  修正内容 : 未使用メソッド削除(日付・コメント行は残しません)
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2009.02.10  修正内容 : タイムアウトエラー対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2009.03.24  修正内容 : PM.NS(1.5次分)対応
//                                  行値引・商品値引集計仕様の変更 
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2009/04/02　修正内容 : PM.NS(1.5次分)対応
//                                  全拠点締対応＆会計年度更新処理追加
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2009/04/17　修正内容 : PM.NS(1.5次分)対応
//                                  消費税算出処理の仕様変更(MANTIS:12850/12851)
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2009/04/24　修正内容 : PM.NS(1.5次分)対応
//                                  在庫履歴・仕入単価取得処理の仕様変更(MANTIS:12853)
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2009/05/25　修正内容 : 売上仕入月次集計データの集計仕様の変更(MANTIS:13512)
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2009/06/01　修正内容 : PM.NS(1.5次分)対応
//                                  在庫履歴集計不具合の修正(MANTIS:12852)
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2009/06/08　修正内容 : PM.NS(1.5次分)対応
//                                  在庫履歴集計不具合の修正(MANTIS:13438)
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2009/06/10　修正内容 : PM.NS(1.5次分)対応
//                                  当月消費税算出[対象日付期間]の修正(MANTIS:13454)
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2009/07/03　修正内容 : PM.NS(1.5次分)対応
//                                  更新処理の修正(MANTIS:13549)
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 23012　畠中 啓次朗
// 作 成 日  2009/07/14　修正内容 : PM.NS(3次分)対応
//                                  更新処理の修正(MANTIS:13807)
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 22008　長内 数馬
// 作 成 日  2009/10/23　修正内容 : MANTIS対応(14383)
//                                  ①仕入処理に売上2009/06/18分の修正と同様の修正を入れる
//                                  ②売上処理の拠点違いの同一得意先の場合のレコード（集計レコードではない）の伝票枚数が不正
//                                  ③前月の月次履歴がない、または自社締めと締め日が違う場合の消費税の計算に拠点コードのキー追加（売上仕入ともに）
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 22008　長内 数馬
// 作 成 日  2010/06/02　修正内容 : 速度チューニング対応
//                                  在庫履歴の抽出処理に関して、単価の取得を行わないモードを追加
//                                  他帳票、照会系ＰＧの呼出に使用
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : LDNS  
// 作 成 日  2010/09/17　修正内容 : テキスト出力対応
//           2010/09/21                       
//           2010/09/28                       
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 22008　長内 数馬
// 作 成 日  2010/10/06　修正内容 : ①得意先マスタの請求拠点を変更した場合の不具合対応(MANTIS:16184)
//                                  ②仕入先マスタの支払拠点を変更した場合の不具合対応(MANTIS:16186)
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 22008　長内 数馬
// 作 成 日  2011/03/14　修正内容 : READUNCOMMITTED対応
//----------------------------------------------------------------------------//
// 管理番号  10704766-00 作成担当 : zhouyu
// 作 成 日  2011/07/15　修正内容 : 連番 42 月次更新で、古いデータを削除sの対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 李小路
// 作 成 日  2011/12/09　修正内容 : 月次更新処理(売上・仕入)タイムアウト発生箇所と原因特定の調査 Redmine#7727
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : FSI佐々木　貴英
// 作 成 日  2012/09/13  修正内容 : 仕入月次更新処理の集計単位をオプションコードで変更する仕様を追加
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : YANGMJ
// 作 成 日  2012/11/01　修正内容 : REDMINE#32893 仕入月次更新処理をして仕入実績修正より確認したところ、合計した消費税額は不正
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 王君
// 作 成 日  2013/08/06　修正内容 : REDMINE#38955№2059　瀬戸内部品の買掛残高一覧表の調査
//----------------------------------------------------------------------------//
// 管理番号  11070071-00 作成担当 : 宮本 利明
// 作 成 日  2014/04/22　修正内容 : Redmine#42539 税率設定マスタ参照条件を修正
//----------------------------------------------------------------------------//
// 管理番号  11370030-00 作成担当 : 宋剛
// 作 成 日  2017/04/05　修正内容 : REDMINE#49285 在庫履歴データ作成処理　開始日に前月末日が含まれる障害対応
//----------------------------------------------------------------------------//
// 管理番号  11900025-00 作成担当 : 田村顕成
// 作 成 日  2023/11/24　修正内容 : 売掛残高一覧消費税額相違不具合修正
//----------------------------------------------------------------------------//

using System;
using System.IO;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Reflection;
using Broadleaf.Application.Remoting.ParamData;
using Broadleaf.Library;
using Broadleaf.Library.Resources;
using Broadleaf.Library.Data;
using Broadleaf.Library.Data.SqlTypes;
using Broadleaf.Library.Data.SqlClient;
using Broadleaf.Library.Collections;
using Broadleaf.Xml.Serialization;
using Broadleaf.Application.Resources;
using Broadleaf.Application.Common;
using System.Collections.Generic;
using Broadleaf.Library.Globarization;
using Broadleaf.Library.Diagnostics;

namespace Broadleaf.Application.Remoting
{
    /// <summary>
    /// 売掛・買掛金額マスタ更新リモートオブジェクト
    /// </summary>
    /// <remarks>
    /// <br>Note       : 売掛・買掛金額マスタの実データ操作を行うクラスです。</br>
    /// <br>Programmer : 20036　斉藤　雅明</br>
    /// <br>Date       : 2007.04.05</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Update Note: 分離レベル最適化処理追加(クエリヒント追加)</br>
    /// <br>Programmer : 20036　斉藤　雅明</br>
    /// <br>Date       : 2007.04.12</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Update Note: 他リモートからの呼び出し対応</br>
    /// <br>Programmer : 20036　斉藤　雅明</br>
    /// <br>Date       : </br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 端数処理区分を売上金額処理区分設定マスタから取得</br>
    /// <br>Programmer : 20036　斉藤　雅明</br>
    /// <br>Date       : 2007.07.13</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 流通基幹対応</br>
    /// <br>           : 消費税は請求・支払処理で算出済なので加算のみとする</br>
    /// <br>Programmer : 980081  山田 明友</br>
    /// <br>Date       : 2007.11.07</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 新レイアウトの金額集計対応</br>
    /// <br>Programmer : 980081  山田 明友</br>
    /// <br>Date       : 2007.12.08</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 月次集計企業管理テーブルを更新更新対応</br>
    /// <br>Programmer : 980081  山田 明友</br>
    /// <br>Date       : 2008.02.26</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 残高調整・消費税調整に(売掛用)が集計されていない修正</br>
    /// <br>Programmer : 980081  山田 明友</br>
    /// <br>Date       : 2008.03.12</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 現金売上・現金仕入を集計するよう修正</br>
    /// <br>Programmer : 980081  山田 明友</br>
    /// <br>Date       : 2008.03.14</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 管理拠点分の得意先・仕入先のみを更新するよう修正</br>
    /// <br>           : 未実装だった未決済手形・決済手形処理を実装</br>
    /// <br>Programmer : 980081  山田 明友</br>
    /// <br>Date       : 2008.03.17</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 月次集計企業管理テーブルの集計開始値の算出を修正</br>
    /// <br>Programmer : 980081  山田 明友</br>
    /// <br>Date       : 2008.03.27</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : ＰＭ.ＮＳ用に変更</br>
    /// <br>Programmer : 20081  疋田 勇人</br>
    /// <br>Date       : 2008.07.28</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : ＰＭ.ＮＳ用に変更</br>
    /// <br>Programmer : 23015  森本 大輝</br>
    /// <br>Date       : 2008.09.17</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 月次締更新履歴マスタテーブルレイアウト変更対応</br>
    /// <br>Programmer : 23015  森本 大輝</br>
    /// <br>Date       : 2008.10.01</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 不具合修正対応</br>
    /// <br>Programmer : 23012  畠中 啓次朗</br>
    /// <br>Date       : 2008.11.05</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 不具合修正対応</br>
    /// <br>Programmer : 23012  畠中 啓次朗</br>
    /// <br>Date       : 2008.11.10</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 不具合修正対応</br>
    /// <br>Programmer : 23012  畠中 啓次朗</br>
    /// <br>Date       : 2008.11.19</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 仕様・動作の全面見直し</br>
    /// <br>Programmer : 23012  畠中 啓次朗</br>
    /// <br>Date       : 2008.12.22</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 売掛・買掛金額集計メソッドの修正(売掛・買掛残高元帳用)</br>
    /// <br>Programmer : 23012  畠中 啓次朗</br>
    /// <br>Date       : 2009.01.13</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 不具合修正</br>
    /// <br>Programmer : 23012  畠中 啓次朗</br>
    /// <br>Date       : 2009.01.16</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 未使用メソッド削除(日付・コメント行は残しません)</br>
    /// <br>Programmer : 23012  畠中 啓次朗</br>
    /// <br>Date       : 2009.01.22</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : タイムアウトエラー対応</br>
    /// <br>Programmer : 23012  畠中 啓次朗</br>
    /// <br>Date       : 2009.02.10</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 行値引・商品値引対応</br>
    /// <br>Programmer : 23012  畠中 啓次朗</br>
    /// <br>Date       : 2009.03.24</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : PM.NS(1.5次分)対応 全拠点締対応＆会計年度更新処理追加</br>
    /// <br>Programmer : 23012  畠中 啓次朗</br>
    /// <br>Date       : 2009/04/02</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : PM.NS(1.5次分)対応 消費税算出処理の仕様変更(MANTIS:12850/12851)</br>
    /// <br>Programmer : 23012  畠中 啓次朗</br>
    /// <br>Date       : 2009/04/17</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : PM.NS(1.5次分)対応 在庫履歴・仕入単価取得処理の仕様変更(MANTIS:12853)</br>
    /// <br>Programmer : 23012  畠中 啓次朗</br>
    /// <br>Date       : 2009/04/24</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : PM.NS(1.5次分)対応 在庫履歴集計不具合の修正(MANTIS:12852)</br>
    /// <br>Programmer : 23012  畠中 啓次朗</br>
    /// <br>Date       : 2009/06/01</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : PM.NS(1.5次分)対応 在庫履歴集計不具合の修正(MANTIS:13438)</br>
    /// <br>Programmer : 23012  畠中 啓次朗</br>
    /// <br>Date       : 2009/06/08</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 連番 42 月次更新で、古いデータを削除sの対応</br>
    /// <br>Programmer : zhouyu </br>
    /// <br>Date       : 2011/07/12 </br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Update Note: 2011/08/23  連番806 梁森東</br>
    /// </br>            : 「対象月を指定しても当月分しか集計していないようです」の対応</br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 月次更新処理(売上・仕入)タイムアウト発生箇所と原因特定の調査 Redmine#7727</br>
    /// <br>Programmer : 李小路</br>
    /// <br>Date       : 2011/12/09 </br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : 仕入月次更新処理の集計単位をオプションコードで変更する仕様を追加</br>
    /// <br>Programmer : FSI佐々木　貴英</br>
    /// <br>Date       : 2012/09/13 </br>
    /// <br>-----------------------------------------------------------------</br>
    /// <br>Note       : REDMINE#32893 仕入月次更新処理をして仕入実績修正より確認したところ、合計した消費税額は不正</br>
    /// <br>Programmer : YANGMJ</br>
    /// <br>Date       : 2012/11/01 </br>
    /// <br>-----------------------------------------------------------------</br>   
    /// <br>Note       : REDMINE#38955№2059　瀬戸内部品の買掛残高一覧表の調査</br>
    /// <br>Programmer : 王君</br>
    /// <br>Date       : 2013/08/06 </br>
    /// <br>-----------------------------------------------------------------</br>
    /// </remarks>
    /// 
    [Serializable]
    public class MonthlyAddUpDB : RemoteWithAppLockDB, IMonthlyAddUpDB
    {
        /// <summary>
        /// 売掛・買掛金額マスタ更新リモートオブジェクトクラスコンストラクタ
        /// </summary>
        /// <remarks>
        /// <br>Note       : 特になし</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// </remarks>
        public MonthlyAddUpDB()
            :
            base("MAKAU00135D", "Broadleaf.Application.Remoting.ParamData.CustAccRecWork", "CUSTACCRECRF")
        {
        }

        int TimeOut = 3600; // ADD 2009.02.10

        #region [Write 月次更新]
        /// <summary>
        /// 売掛・買掛金額マスタを更新します。
        /// </summary>
        /// <param name="paraObj">月次更新パラメータ</param>
        /// <param name="retList">月次更新有無ステータスList</param>
        /// <param name="msgDiv">エラーメッセージ有無区分</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="monAddUpUpdDiv">月次更新区分→0:売上月次更新,1:仕入月次更新</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 売掛・買掛金額マスタを更新します。</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// <br>Update Note: YANGMJ 2012/11/01</br>
        /// <br>             REDMINE#32893 仕入月次更新処理をして仕入実績修正より確認したところ、合計した消費税額は不正</br>
        /// <br>Update Note: 宋剛 2017/04/05</br>
        /// <br>             REDMINE#49285 在庫履歴データ作成処理　開始日に前月末日が含まれる障害対応</br>
        /// </remarks>
        public int Write(ref object paraObj, out object retList, out bool msgDiv, out string retMsg, int monAddUpUpdDiv)
        {
            //●STATUS初期化
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            retList = null;
            msgDiv = false;//メッセージなし：false
            retMsg = null;

            //売掛金額マスタList(更新用)
            ArrayList custAccRecWorkList = new ArrayList();
            //売掛金額マスタList(子レコード更新用)
            ArrayList custAccRecChildWorkList = new ArrayList();
            //買掛金額マスタList(更新用)
            ArrayList suplAccPayWorkList = new ArrayList();
            //買掛金額マスタList(子レコード更新用)
            ArrayList suplAccPayChildWorkList = new ArrayList();

            //売掛入金集計データList(更新用)
            ArrayList accRecDepoTotalList = new ArrayList();
            //買掛支払集計データList(更新用)
            ArrayList aCalcPayTotalList = new ArrayList();

            //在庫履歴データList(更新用)
            List<StockHistoryWork> stockHistoryWorkList = new List<StockHistoryWork>();

            //売上仕入月次集計データList(更新用)
            List<MTtlSalesStockSlipWork> mTtlSalesStockSlipWorkList = new List<MTtlSalesStockSlipWork>();

            //得意先売掛金額マスタ
            CustAccRecWork custAccRecWork = null;
            //仕入先買掛金額マスタ
            //SuplAccPayWork suplAccPayWork = null;

            //得意先単位の更新ステータスList(UI側にリターン)
            ArrayList updateStatusList = new ArrayList();
            //月次更新有無ステータス
            MonthlyAddUpStatusWork monthlyAddUpStatusWork = null;
            //月次締更新履歴マスタ
            //MonthlyAddUpHisWork monthlyAddUpHisWork = null;
            ArrayList monthlyAddUpHisWorkList = new ArrayList(); 

            //コネクション・トランザクション
            SqlConnection sqlConnection = null;
            SqlTransaction sqlTransaction = null;
            SqlConnection sqlConnection_read = null;
            //伝票更新排他制御部品
            //ControlExclusiveOrderAccess ctrlExclsvOdAcs = null; // DEL 2008.12.22

            ShareCheckInfo info = new ShareCheckInfo();

            try
            {
                //●パラメータセット
                MonthlyAddUpWork monthlyAddUpWork = paraObj as MonthlyAddUpWork;

                if (monthlyAddUpWork == null)
                {
                    base.WriteErrorLog(null, "プログラムエラー。パラメータが未設定です");
                    return status;
                }

                //メソッド開始時にコネクション文字列を取得
                SqlConnectionInfo sqlConnectionInfo = new SqlConnectionInfo();
                string connectionText = sqlConnectionInfo.GetConnectionInfo(ConstantManagement_SF_PRO.IndexCode_UserDB);
                if (connectionText == null || connectionText == "") return status;

                using (sqlConnection = new SqlConnection(connectionText))
                {
                    //SqlEncryptInfo sqlEncryptInfo = null;
                    try
                    {
                        sqlConnection.Open();
                        //●トランザクション開始
                        sqlTransaction = sqlConnection.BeginTransaction((IsolationLevel)ConstantManagement.DB_IsolationLevel.ctDB_Default);

                        #region 排他制御
                        if (monthlyAddUpWork.AddUpSecCode == "" || monthlyAddUpWork.AddUpSecCode == "00")
                        {
                            //システムロック(企業) //2009/1/27 Add sakurai
                            info.Keys.Add(monthlyAddUpWork.EnterpriseCode, ShareCheckType.Enterprise, "", "");
                            status = this.ShareCheck(info, LockControl.Locke, sqlConnection, sqlTransaction);
                        }
                        else
                        {
                            //システムロック(拠点) //2009/1/27 Add sakurai
                            info.Keys.Add(monthlyAddUpWork.EnterpriseCode, ShareCheckType.Section, monthlyAddUpWork.AddUpSecCode, "");
                            status = this.ShareCheck(info, LockControl.Locke, sqlConnection, sqlTransaction);
                        }

                        if (status != 0)
                        {
                            return status;
                        }
                        #endregion

                        // Read用コネクションをインスタンス化
                        sqlConnection_read = new SqlConnection(connectionText);
                        sqlConnection_read.Open();

                        //●月次締更新履歴マスタのチェック
                        status = CheckMonthlyAddUp(ref monthlyAddUpWork, monAddUpUpdDiv, ref sqlConnection_read);
                        if (status == (int)ConstantManagement.DB_Status.ctDB_WARNING)
                        {
                            msgDiv = true;
                            retMsg = "既に更新されています。\r\n更新件数は0件です。";
                            return status;
                        }
                        else if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                        {
                            //STATUS初期化(正常処理)
                            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                        }

                        if (monAddUpUpdDiv == 0) // 売上月次更新
                        {
                            //●得意先マスタ
                            status = GetCustomer(ref monthlyAddUpWork, ref custAccRecWorkList, ref sqlConnection_read);
                            if (custAccRecWorkList.Count == 0)
                            {
                                msgDiv = true;
                                retMsg = "更新対象の得意先が存在しません。\r\n更新件数は0件です。";
                                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                                return status;
                            }
                        }
                        else                     // 仕入月次更新
                        {
                            //●仕入先マスタ
                            status = GetSupplier(ref monthlyAddUpWork, ref suplAccPayWorkList, ref sqlConnection_read);
                            // ADD 2008.11.19 >>>
                            if (suplAccPayWorkList.Count == 0)
                            {
                                msgDiv = true;
                                retMsg = "更新対象の仕入先が存在しません。\r\n更新件数は0件です。";
                                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                                return status;
                            }
                            // ADD 2008.11.19 <<<
                        }
                        
                        //●売掛・買掛金額マスタ更新パラメータList作成
                        //●売掛入金集金・買掛支払集金データ更新パラメータList作成
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            if (monAddUpUpdDiv == 0) // 売上月次更新
                            {
                                // 修正 2009/04/02 >>>
                                //status = MakeMonthlyAddUpCustAccRecParametersProc(ref monthlyAddUpWork, ref custAccRecWorkList, ref custAccRecChildWorkList, ref accRecDepoTotalList, out monthlyAddUpHisWork, 0, out msgDiv, out retMsg, ref sqlConnection_read);
                                status = MakeMonthlyAddUpCustAccRecParametersProc(ref monthlyAddUpWork, ref custAccRecWorkList, ref custAccRecChildWorkList, ref accRecDepoTotalList, out monthlyAddUpHisWorkList, 0, out msgDiv, out retMsg, ref sqlConnection_read);
                                // 修正 2009/04/02 <<<
                            }
                            else                     // 仕入月次更新
                            {
                                // 修正 2009/04/02 >>>
                                //status = MakeMonthlyAddUpSuplAccPayParametersProc(ref monthlyAddUpWork, ref suplAccPayWorkList, ref suplAccPayChildWorkList, ref aCalcPayTotalList, out monthlyAddUpHisWork, 0, out msgDiv, out retMsg, ref sqlConnection_read);
                                //status = MakeMonthlyAddUpSuplAccPayParametersProc(ref monthlyAddUpWork, ref suplAccPayWorkList, ref suplAccPayChildWorkList, ref aCalcPayTotalList, out monthlyAddUpHisWorkList, 0, out msgDiv, out retMsg, ref sqlConnection_read);//DEL YANGMJ 2012/11/01 REDMINE#32893
                                // 修正 2009/04/02 <<<
                                // 仕入月次処理以外のプログラムに影響が出ないように新しくメソッドを作成
                                status = MakeMonthlyAddUpSuplAccPayProc(ref monthlyAddUpWork, ref suplAccPayWorkList, ref suplAccPayChildWorkList, ref aCalcPayTotalList, out monthlyAddUpHisWorkList, 0, out msgDiv, out retMsg, ref sqlConnection_read);//ADD YANGMJ 2012/11/01 REDMINE#32893

                            }

                            //●在庫履歴・売上仕入月次集計データの更新パラメータList作成
                            if (monthlyAddUpWork.StockUpdDiv == 1)
                            {
                                //●在庫履歴データ作成
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    // UPD 2017/04/05 宋剛 FOR REDMINE#49285 在庫履歴データ作成処理　開始日に前月末日が含まれる障害対応 ---->>>>>
                                    MonthlyAddUpWork changedAddUpDateStMonthlyAddUpWork = GetChangedAddUpDateStMonthlyAddUpWork(monthlyAddUpWork);
                                    // 在庫受払履歴データ集計
                                    //status = MakeStockHistoryParametersProc(ref monthlyAddUpWork, ref stockHistoryWorkList, out msgDiv, out retMsg, ref sqlConnection_read);
                                    status = MakeStockHistoryParametersProc(ref changedAddUpDateStMonthlyAddUpWork, ref stockHistoryWorkList, out msgDiv, out retMsg, ref sqlConnection_read);
                                    // UPD 2017/04/05 宋剛 FOR REDMINE#49285 在庫履歴データ作成処理　開始日に前月末日が含まれる障害対応 ----<<<<<
                                }

                                //●売上仕入月次集計データ作成
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    // 売上・仕入・在庫移動データ集計
                                    status = MakeMTtlSalesStockSlipParametersProc(ref monthlyAddUpWork, ref mTtlSalesStockSlipWorkList, out msgDiv, out retMsg, ref sqlConnection_read);
                                }
                            }
                        }

                        if (sqlConnection_read != null) sqlConnection_read.Close();

                        if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL) return status;
                        try
                        {
                            #region DEL 2009/04/17
                            /*
                            int listCount = 0;

                            if (monAddUpUpdDiv == 0) // 売上月次更新
                            {
                                for (int i = 0; i < custAccRecWorkList.Count; i++)
                                {
                                    listCount += 1;
                                }

                                Int32[] customerCodeList = new Int32[listCount];
                                ArrayList al = new ArrayList();//ワーク用
                                
                                //得意先コードList作成
                                for (int i = 0; i < custAccRecWorkList.Count; i++)
                                {
                                    custAccRecWork = custAccRecWorkList[i] as CustAccRecWork;
                                    //更新得意先コード抽出
                                    if (custAccRecWork.CustomerCode == custAccRecWork.ClaimCode)
                                    {
                                        al.Add(custAccRecWork.CustomerCode);
                                    }
                                }
                                customerCodeList = (Int32[])al.ToArray(typeof(Int32));
                            }
                            else                     // 仕入月次更新
                            {
                                for (int i = 0; i < suplAccPayWorkList.Count; i++)
                                {
                                    listCount += 1;
                                }

                                Int32[] supplierCodeList = new Int32[listCount];
                                ArrayList al = new ArrayList();//ワーク用
                                //仕入先コードList作成
                                for (int i = 0; i < suplAccPayWorkList.Count; i++)
                                {
                                    suplAccPayWork = suplAccPayWorkList[i] as SuplAccPayWork;
                                    //更新得意先コード抽出
                                    if (suplAccPayWork.SupplierCd == suplAccPayWork.PayeeCode)
                                    {
                                        al.Add(suplAccPayWork.SupplierCd);
                                    }
                                }
                                supplierCodeList = (Int32[])al.ToArray(typeof(Int32));
                            }
                            */
                            #endregion

                            if (monAddUpUpdDiv == 0) // 売上月次更新
                            {
                                //●売掛金額マスタ更新処理
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    status = WriteCustAccRec(ref custAccRecWorkList, ref custAccRecChildWorkList, ref sqlConnection, ref sqlTransaction);
                                }
                                //●売掛入金集計データ更新処理
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    status = WriteAccRecDepoTotal(ref accRecDepoTotalList, ref sqlConnection, ref sqlTransaction);
                                }
                            }
                            else
                            {
                                //●買掛金額マスタ更新処理
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    status = WriteSuplAccPay(ref suplAccPayWorkList, ref suplAccPayChildWorkList, ref sqlConnection, ref sqlTransaction);
                                }
                                //●買掛支払集計データ更新処理
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    status = WriteACalcPayTotal(ref aCalcPayTotalList, ref sqlConnection, ref sqlTransaction);
                                }
                            }

                            //●月次締更新履歴マスタ更新処理
                            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                            {
                                if (monthlyAddUpWork.ProcCntntsFlag == 2)
                                {
                                    //月次更新処理実行時
                                    // 修正 2009/04/02 >>>
                                    //status = WriteMonthlyAddUpHis(ref monthlyAddUpHisWork, ref sqlConnection, ref sqlTransaction);
                                    status = WriteMonthlyAddUpHis(ref monthlyAddUpHisWorkList, ref sqlConnection, ref sqlTransaction);
                                    // 修正 2009/04/02 <<<
                                }
                            }

                            //●在庫履歴データの更新処理
                            //●売上仕入月次集計データの更新処理
                            if (monthlyAddUpWork.StockUpdDiv == 1)
                            {
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    status = WriteStockHistory(ref stockHistoryWorkList, ref sqlConnection, ref sqlTransaction);
                                }

                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    status = WriteMTtlSalesStockSlip(ref mTtlSalesStockSlipWorkList, ref sqlConnection, ref sqlTransaction);
                                }
                            }

                            //●自社情報マスタの更新処理
                            if (monthlyAddUpWork.TermLastDiv == 1) // 期末
                            {
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    status = WriteCompanyInf(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction,0);
                                }
                            }

                            //●更新ステータス情報生成
                            for (int i = 0; i < custAccRecWorkList.Count; i++)
                            {
                                custAccRecWork = custAccRecWorkList[i] as CustAccRecWork;
                                monthlyAddUpStatusWork = new MonthlyAddUpStatusWork();

                                monthlyAddUpStatusWork.EnterpriseCode = custAccRecWork.EnterpriseCode;
                                monthlyAddUpStatusWork.CustomerCode = custAccRecWork.ClaimCode;
                                monthlyAddUpStatusWork.AddUpSecCode = custAccRecWork.AddUpSecCode;
                                monthlyAddUpStatusWork.UpdateStatus = 0;
                                monthlyAddUpStatusWork.AddUpDate = custAccRecWork.AddUpDate;
                                monthlyAddUpStatusWork.AddUpYearMonth = custAccRecWork.AddUpYearMonth;
                                monthlyAddUpStatusWork.MonthAddUpExpDate = custAccRecWork.MonthAddUpExpDate;
                                updateStatusList.Add(monthlyAddUpStatusWork);
                            }

                            //●戻り値をセット
                            retList = (object)updateStatusList;
                        }
                        catch (SqlException ex)
                        {
                            status = base.WriteSQLErrorLog(ex);
                        }
                        catch (Exception ex)
                        {
                            base.WriteErrorLog(ex, "MonthlyAddUpDB.Write Exception=" + ex.Message);
                            status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                        }
                        finally
                        {
                            /*
                            //システムロック解除 //2009/1/27 Add sakurai
                            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                            {
                                status = this.ShareCheck(info, LockControl.Release, sqlConnection, sqlTransaction);
                            }                           
                                
          
                            //●コミットorロールバック
                            //正常更新時コミット、異常発生時ロールバック
                            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL) sqlTransaction.Commit();
                            else sqlTransaction.Rollback();
                            */
                            ////●更新時ロック解除
                            //if (ctrlExclsvOdAcs != null) ctrlExclsvOdAcs.UnlockDB();
                        }
                    }
                    finally
                    {
                        //システムロック解除 //2009/1/27 Add sakurai
                        int st = this.ShareCheck(info, LockControl.Release, sqlConnection, sqlTransaction);

                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = st;
                        }
                        //●コミットorロールバック
                        //正常更新時コミット、異常発生時ロールバック
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL) sqlTransaction.Commit();
                        else sqlTransaction.Rollback();

                        if (sqlConnection_read != null) sqlConnection_read.Close();

                        //●コネクション破棄
                        if (sqlConnection != null) sqlConnection.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                status = base.WriteSQLErrorLog(ex);
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.Write Exception=" + ex.Message);
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }
            finally
            {
                //データ無しの場合はステータスを警告ステータスに変更する
                if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND ||
                    status == (int)ConstantManagement.DB_Status.ctDB_EOF) status = (int)ConstantManagement.DB_Status.ctDB_WARNING;
            }

            return status;
        }

        // ADD 2017/04/05 宋剛 FOR REDMINE#49285 在庫履歴データ作成処理　開始日に前月末日が含まれる障害対応 ---->>>>>
        /// <summary>
        /// 月次更新開始日変更した月次更新パラメータ取得処理
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ情報</param>
        /// <returns>月次更新開始日変更した月次更新パラメータ情報</returns>
        /// <remarks>
        /// <br>Note       : 月次更新開始日変更した月次更新パラメータを取得処理（月次更新開始日 = 月次更新開始日 + 1D）</br>
        /// <br>Programmer : 宋剛</br>
        /// <br>Date       : 2017/04/05</br>
        /// </remarks>
        private MonthlyAddUpWork GetChangedAddUpDateStMonthlyAddUpWork(MonthlyAddUpWork monthlyAddUpWork)
        {
            MonthlyAddUpWork changedAddUpDateStMonthlyAddUpWork = new MonthlyAddUpWork();
            // 企業コード// 企業コード
            // 共通ファイルヘッダ（国2桁+県2桁+業種2桁+ユーザーコード10桁）
            changedAddUpDateStMonthlyAddUpWork.EnterpriseCode = monthlyAddUpWork.EnterpriseCode;

            // 計上拠点コード// 計上拠点コード
            // 集計の対象となっている拠点コード,全社：""またはNull
            changedAddUpDateStMonthlyAddUpWork.AddUpSecCode = monthlyAddUpWork.AddUpSecCode;

            // 計上年月日// 計上年月日
            // YYYYMMDD　月次締を行った日
            changedAddUpDateStMonthlyAddUpWork.AddUpDate = monthlyAddUpWork.AddUpDate;

            // 計上年月// 計上年月
            // YYYYMM
            changedAddUpDateStMonthlyAddUpWork.AddUpYearMonth = monthlyAddUpWork.AddUpYearMonth;

            // 自社締日// 自社締日
            // DD// DD
            changedAddUpDateStMonthlyAddUpWork.CompanyTotalDay = monthlyAddUpWork.CompanyTotalDay;

            // 処理内容フラグ
            // 1:締取消,2:月次更新処理
            changedAddUpDateStMonthlyAddUpWork.ProcCntntsFlag = monthlyAddUpWork.ProcCntntsFlag;

            // 在庫更新区分
            // 1:更新,2:更新なし
            changedAddUpDateStMonthlyAddUpWork.StockUpdDiv = monthlyAddUpWork.StockUpdDiv;

            // 期末更新区分
            // 0:期末以外,1:期末
            changedAddUpDateStMonthlyAddUpWork.TermLastDiv = monthlyAddUpWork.TermLastDiv;

            // 前回月次処理日
            changedAddUpDateStMonthlyAddUpWork.LstMonAddUpProcDay = monthlyAddUpWork.LstMonAddUpProcDay;

            // 今回月次処理日
            changedAddUpDateStMonthlyAddUpWork.ThisMonAddUpProcDay = monthlyAddUpWork.ThisMonAddUpProcDay;

            // 開始計上日付
            // 在庫開始集計日（月次更新日を「月次更新日 + 1D」に更新する）
            changedAddUpDateStMonthlyAddUpWork.AddUpDateSt = monthlyAddUpWork.AddUpDateSt.AddDays(1);

            // 終了計上日付
            // 在庫終了集計日
            changedAddUpDateStMonthlyAddUpWork.AddUpDateEd = monthlyAddUpWork.AddUpDateEd;

            // 在庫評価方法
            // 1:最終仕入原価法,2:移動平均法,3:個別単価法
            changedAddUpDateStMonthlyAddUpWork.StockPointWay = monthlyAddUpWork.StockPointWay;

            // 端数処理区分
            // 1:切捨て,2:四捨五入,3:切上げ
            changedAddUpDateStMonthlyAddUpWork.FractionProcCd = monthlyAddUpWork.FractionProcCd;

            // データ保存月数
            changedAddUpDateStMonthlyAddUpWork.DataSaveMonths = monthlyAddUpWork.DataSaveMonths;

            // 実績データ保存月数
            changedAddUpDateStMonthlyAddUpWork.ResultDtSaveMonths = monthlyAddUpWork.ResultDtSaveMonths;

            // 車輌部品データ保存月数
            changedAddUpDateStMonthlyAddUpWork.CaPrtsDtSaveMonths = monthlyAddUpWork.CaPrtsDtSaveMonths;

            // マスタ保存月数
            changedAddUpDateStMonthlyAddUpWork.MasterSaveMonths = monthlyAddUpWork.MasterSaveMonths;


            return changedAddUpDateStMonthlyAddUpWork;
        }
        // ADD 2017/04/05 宋剛 FOR REDMINE#49285 在庫履歴データ作成処理　開始日に前月末日が含まれる障害対応 ----<<<<<
        // --- ADD 2012/09/13 ----------->>>>>
        /// <summary>
        /// 仕入総括形式で売掛・買掛金額マスタを更新します。
        /// </summary>
        /// <param name="paraObj">月次更新パラメータ</param>
        /// <param name="retList">月次更新有無ステータスList</param>
        /// <param name="msgDiv">エラーメッセージ有無区分</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="monAddUpUpdDiv">月次更新区分→0:売上月次更新,1:仕入月次更新</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入総括形式で仕入月次更新処理を行います</br>
        /// <br>Programmer : FSI佐々木 貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// <br>Update Note: 宋剛 2017/04/05</br>
        /// <br>             REDMINE#49285 在庫履歴データ作成処理　開始日に前月末日が含まれる障害対応</br>
        /// </remarks>
        public int WriteByAddUpSecCode(ref object paraObj, out object retList, out bool msgDiv, out string retMsg, int monAddUpUpdDiv)
        {
            //●STATUS初期化
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            retList = null;
            msgDiv = false;//メッセージなし：false
            retMsg = null;

            //売掛金額マスタList(更新用)
            ArrayList custAccRecWorkList = new ArrayList();
            //売掛金額マスタList(子レコード更新用)
            ArrayList custAccRecChildWorkList = new ArrayList();
            //買掛金額マスタList(更新用)
            ArrayList suplAccPayWorkList = new ArrayList();
            //買掛金額マスタList(子レコード更新用)
            ArrayList suplAccPayChildWorkList = new ArrayList();

            //売掛入金集計データList(更新用)
            ArrayList accRecDepoTotalList = new ArrayList();
            //買掛支払集計データList(更新用)
            ArrayList aCalcPayTotalList = new ArrayList();

            //在庫履歴データList(更新用)
            List<StockHistoryWork> stockHistoryWorkList = new List<StockHistoryWork>();

            //売上仕入月次集計データList(更新用)
            List<MTtlSalesStockSlipWork> mTtlSalesStockSlipWorkList = new List<MTtlSalesStockSlipWork>();

            //得意先売掛金額マスタ
            CustAccRecWork custAccRecWork = null;
            //仕入先買掛金額マスタ
            //SuplAccPayWork suplAccPayWork = null;

            //得意先単位の更新ステータスList(UI側にリターン)
            ArrayList updateStatusList = new ArrayList();
            //月次更新有無ステータス
            MonthlyAddUpStatusWork monthlyAddUpStatusWork = null;
            //月次締更新履歴マスタ
            ArrayList monthlyAddUpHisWorkList = new ArrayList();

            //コネクション・トランザクション
            SqlConnection sqlConnection = null;
            SqlTransaction sqlTransaction = null;
            SqlConnection sqlConnection_read = null;

            ShareCheckInfo info = new ShareCheckInfo();

            try
            {
                //●パラメータセット
                MonthlyAddUpWork monthlyAddUpWork = paraObj as MonthlyAddUpWork;

                if (monthlyAddUpWork == null)
                {
                    base.WriteErrorLog(null, "プログラムエラー。パラメータが未設定です");
                    return status;
                }

                //メソッド開始時にコネクション文字列を取得
                SqlConnectionInfo sqlConnectionInfo = new SqlConnectionInfo();
                string connectionText = sqlConnectionInfo.GetConnectionInfo(ConstantManagement_SF_PRO.IndexCode_UserDB);
                if (connectionText == null || connectionText == "") return status;

                using (sqlConnection = new SqlConnection(connectionText))
                {
                    try
                    {
                        sqlConnection.Open();
                        //●トランザクション開始
                        sqlTransaction = sqlConnection.BeginTransaction((IsolationLevel)ConstantManagement.DB_IsolationLevel.ctDB_Default);

                        #region 排他制御
                        if (monthlyAddUpWork.AddUpSecCode == "" || monthlyAddUpWork.AddUpSecCode == "00")
                        {
                            //システムロック(企業)
                            info.Keys.Add(monthlyAddUpWork.EnterpriseCode, ShareCheckType.Enterprise, "", "");
                            status = this.ShareCheck(info, LockControl.Locke, sqlConnection, sqlTransaction);
                        }
                        else
                        {
                            //システムロック(拠点)
                            info.Keys.Add(monthlyAddUpWork.EnterpriseCode, ShareCheckType.Section, monthlyAddUpWork.AddUpSecCode, "");
                            status = this.ShareCheck(info, LockControl.Locke, sqlConnection, sqlTransaction);
                        }

                        if (status != 0)
                        {
                            return status;
                        }
                        #endregion

                        // Read用コネクションをインスタンス化
                        sqlConnection_read = new SqlConnection(connectionText);
                        sqlConnection_read.Open();

                        //●月次締更新履歴マスタのチェック
                        status = CheckMonthlyAddUp(ref monthlyAddUpWork, monAddUpUpdDiv, ref sqlConnection_read);
                        if (status == (int)ConstantManagement.DB_Status.ctDB_WARNING)
                        {
                            msgDiv = true;
                            retMsg = "既に更新されています。\r\n更新件数は0件です。";
                            return status;
                        }
                        else if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                        {
                            //STATUS初期化(正常処理)
                            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                        }

                        if (monAddUpUpdDiv == 0) // 売上月次更新
                        {
                            //●得意先マスタ
                            status = GetCustomer(ref monthlyAddUpWork, ref custAccRecWorkList, ref sqlConnection_read);
                            if (custAccRecWorkList.Count == 0)
                            {
                                msgDiv = true;
                                retMsg = "更新対象の得意先が存在しません。\r\n更新件数は0件です。";
                                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                                return status;
                            }
                        }
                        else                     // 仕入月次更新
                        {
                            //●仕入先マスタ
                            status = GetSupplierByAddUpSecCode(
                                  ref monthlyAddUpWork, ref suplAccPayWorkList, ref sqlConnection_read);
                            if (suplAccPayWorkList.Count == 0)
                            {
                                msgDiv = true;
                                retMsg = "更新対象の仕入先が存在しません。\r\n更新件数は0件です。";
                                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                                return status;
                            }
                        }

                        //●売掛・買掛金額マスタ更新パラメータList作成
                        //●売掛入金集金・買掛支払集金データ更新パラメータList作成
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            if (monAddUpUpdDiv == 0) // 売上月次更新
                            {
                                status = MakeMonthlyAddUpCustAccRecParametersProc(ref monthlyAddUpWork, ref custAccRecWorkList, ref custAccRecChildWorkList, ref accRecDepoTotalList, out monthlyAddUpHisWorkList, 0, out msgDiv, out retMsg, ref sqlConnection_read);
                            }
                            else                     // 仕入月次更新
                            {
                                status = MakeMonthlyAddUpSuplAccPayParamProcBySecCode(
                                      ref monthlyAddUpWork
                                    , ref suplAccPayWorkList
                                    , ref suplAccPayChildWorkList
                                    , ref aCalcPayTotalList
                                    , out monthlyAddUpHisWorkList
                                    , 0
                                    , out msgDiv
                                    , out retMsg
                                    , ref sqlConnection_read);
                            }

                            //●在庫履歴・売上仕入月次集計データの更新パラメータList作成
                            if (monthlyAddUpWork.StockUpdDiv == 1)
                            {
                                //●在庫履歴データ作成
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    // UPD 2017/04/05 宋剛 FOR REDMINE#49285 在庫履歴データ作成処理　開始日に前月末日が含まれる障害対応 ---->>>>>
                                    MonthlyAddUpWork changedAddUpDateStMonthlyAddUpWork = GetChangedAddUpDateStMonthlyAddUpWork(monthlyAddUpWork);

                                    // 在庫受払履歴データ集計
                                    //status = MakeStockHistoryParametersProc(ref monthlyAddUpWork, ref stockHistoryWorkList, out msgDiv, out retMsg, ref sqlConnection_read);
                                    status = MakeStockHistoryParametersProc(ref changedAddUpDateStMonthlyAddUpWork, ref stockHistoryWorkList, out msgDiv, out retMsg, ref sqlConnection_read);
                                    // UPD 2017/04/05 宋剛 FOR REDMINE#49285 在庫履歴データ作成処理　開始日に前月末日が含まれる障害対応 ----<<<<<
                                }

                                //●売上仕入月次集計データ作成
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    // 売上・仕入・在庫移動データ集計
                                    status = MakeMTtlSalesStockSlipParametersProc(ref monthlyAddUpWork, ref mTtlSalesStockSlipWorkList, out msgDiv, out retMsg, ref sqlConnection_read);
                                }
                            }
                        }

                        if (sqlConnection_read != null) sqlConnection_read.Close();

                        if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL) return status;
                        try
                        {
                            if (monAddUpUpdDiv == 0) // 売上月次更新
                            {
                                //●売掛金額マスタ更新処理
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    status = WriteCustAccRec(ref custAccRecWorkList, ref custAccRecChildWorkList, ref sqlConnection, ref sqlTransaction);
                                }
                                //●売掛入金集計データ更新処理
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    status = WriteAccRecDepoTotal(ref accRecDepoTotalList, ref sqlConnection, ref sqlTransaction);
                                }
                            }
                            else
                            {
                                //●買掛金額マスタ更新処理
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    status = WriteSuplAccPayByAddUpSecCode(ref suplAccPayWorkList, ref suplAccPayChildWorkList, ref sqlConnection, ref sqlTransaction);
                                }
                                //●買掛支払集計データ更新処理
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    status = WriteACalcPayTotal(ref aCalcPayTotalList, ref sqlConnection, ref sqlTransaction);
                                }
                            }

                            //●月次締更新履歴マスタ更新処理
                            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                            {
                                if (monthlyAddUpWork.ProcCntntsFlag == 2)
                                {
                                    //月次更新処理実行時
                                    status = WriteMonthlyAddUpHis(ref monthlyAddUpHisWorkList, ref sqlConnection, ref sqlTransaction);
                                }
                            }

                            //●在庫履歴データの更新処理
                            //●売上仕入月次集計データの更新処理
                            if (monthlyAddUpWork.StockUpdDiv == 1)
                            {
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    status = WriteStockHistory(ref stockHistoryWorkList, ref sqlConnection, ref sqlTransaction);
                                }

                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    status = WriteMTtlSalesStockSlip(ref mTtlSalesStockSlipWorkList, ref sqlConnection, ref sqlTransaction);
                                }
                            }

                            //●自社情報マスタの更新処理
                            if (monthlyAddUpWork.TermLastDiv == 1) // 期末
                            {
                                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    status = WriteCompanyInf(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction, 0);
                                }
                            }

                            //●更新ステータス情報生成
                            for (int i = 0; i < custAccRecWorkList.Count; i++)
                            {
                                custAccRecWork = custAccRecWorkList[i] as CustAccRecWork;
                                monthlyAddUpStatusWork = new MonthlyAddUpStatusWork();

                                monthlyAddUpStatusWork.EnterpriseCode = custAccRecWork.EnterpriseCode;
                                monthlyAddUpStatusWork.CustomerCode = custAccRecWork.ClaimCode;
                                monthlyAddUpStatusWork.AddUpSecCode = custAccRecWork.AddUpSecCode;
                                monthlyAddUpStatusWork.UpdateStatus = 0;
                                monthlyAddUpStatusWork.AddUpDate = custAccRecWork.AddUpDate;
                                monthlyAddUpStatusWork.AddUpYearMonth = custAccRecWork.AddUpYearMonth;
                                monthlyAddUpStatusWork.MonthAddUpExpDate = custAccRecWork.MonthAddUpExpDate;
                                updateStatusList.Add(monthlyAddUpStatusWork);
                            }

                            //●戻り値をセット
                            retList = (object)updateStatusList;
                        }
                        catch (SqlException ex)
                        {
                            status = base.WriteSQLErrorLog(ex);
                        }
                        catch (Exception ex)
                        {
                            base.WriteErrorLog(ex, "MonthlyAddUpDB.Write Exception=" + ex.Message);
                            status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                        }
                        finally
                        {
                        }
                    }
                    finally
                    {
                        //システムロック解除
                        int st = this.ShareCheck(info, LockControl.Release, sqlConnection, sqlTransaction);

                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = st;
                        }
                        //●コミットorロールバック
                        //正常更新時コミット、異常発生時ロールバック
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL) sqlTransaction.Commit();
                        else sqlTransaction.Rollback();

                        if (sqlConnection_read != null) sqlConnection_read.Close();

                        //●コネクション破棄
                        if (sqlConnection != null) sqlConnection.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                status = base.WriteSQLErrorLog(ex);
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.Write Exception=" + ex.Message);
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }
            finally
            {
                //データ無しの場合はステータスを警告ステータスに変更する
                if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND ||
                    status == (int)ConstantManagement.DB_Status.ctDB_EOF) status = (int)ConstantManagement.DB_Status.ctDB_WARNING;
            }

            return status;
        }
        // --- ADD 2012/09/13 -----------<<<<<

        /// <summary>
        /// 得意先売掛金額マスタを更新します。
        /// </summary>
        /// <param name="custAccRecWorkList">売掛金額マスタ更新List</param>
        /// <param name="custAccRecChildWorkList">売掛金額マスタ更新List(子レコード用)</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 売掛金額マスタを更新します。</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// </remarks>
        // ↓ 2007.11.07 980081 c
        //private int WriteCustAccRec(ref ArrayList custAccRecWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        private int WriteCustAccRec(ref ArrayList custAccRecWorkList, ref ArrayList custAccRecChildWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        // ↑ 2007.11.07 980081 c
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            String sqlText = String.Empty;

            //Selectコマンドの生成
            try
            {
                // 修正 2008.12.22 >>>
                #region 集計レコードInsert
                CustAccRecWork custAccRecWork = new CustAccRecWork();

                for (int i = 0; i < custAccRecWorkList.Count; i++)
                {
                    custAccRecWork = custAccRecWorkList[i] as CustAccRecWork;
                    sqlText = String.Empty;
                    sqlText += "DELETE" + Environment.NewLine;
                    sqlText += "FROM CUSTACCRECRF" + Environment.NewLine;
                    sqlText += "WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                    sqlText += "  AND CLAIMCODERF=@CLAIMCODE" + Environment.NewLine;
                    // 修正 2009/07/03 >>>
                    //sqlText += "  AND ADDUPDATERF>=@FINDSTMONCADDUPUPDDATE" + Environment.NewLine;
                    //sqlText += "  AND ADDUPDATERF<=@FINDADDUPDATE" + Environment.NewLine;
                    sqlText += "  AND ADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine; 
                    // 修正 2009/07/03 <<<

                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                    {
                        sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                        //Prameterオブジェクトの作成
                        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                        //SqlParameter findParaStMonCAddUpUpdDate = sqlCommand.Parameters.Add("@FINDSTMONCADDUPUPDDATE", SqlDbType.Int);// DEL 2009/07/03
                        SqlParameter findParaClaimCode = sqlCommand.Parameters.Add("@CLAIMCODE", SqlDbType.Int); 

                        //Parameterオブジェクトへ値設定
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.AddUpSecCode);
                        findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.AddUpDate);
                        // DEL 2009/07/03 >>>
                        //findParaStMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.StMonCAddUpUpdDate);
                        //// add 2007.06.05 saito
                        //if (custAccRecWork.StMonCAddUpUpdDate == DateTime.MinValue)
                        //    findParaStMonCAddUpUpdDate.Value = 20000101;
                        // DEL 2009/07/03 <<<
                        findParaClaimCode.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.ClaimCode);

                        sqlCommand.ExecuteNonQuery();
                    }

                    status = InsertCustAccRec(custAccRecWork, ref sqlConnection, ref sqlTransaction,0);
                    if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        return status;
                }
                #endregion

                #region 親子レコードInsert
                CustAccRecWork custAccRecChildWork = new CustAccRecWork();

                for (int i = 0; i < custAccRecChildWorkList.Count; i++)
                {
                    custAccRecChildWork = custAccRecChildWorkList[i] as CustAccRecWork;

                    status = InsertCustAccRec(custAccRecChildWork, ref sqlConnection, ref sqlTransaction,1);
                    if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        return status;
                }
                #endregion
                // 修正 2008.12.22 <<<

            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        // ↓ 2007.11.07 980081
        // 修正 2008.12.22 >>>
        //private int InsertCustAccRec(CustAccRecWork custAccRecWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        private int InsertCustAccRec(CustAccRecWork custAccRecWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction, int insertDiv)
        // 修正 2008.12.22 <<<
        {
            string sqlText = string.Empty;

            try
            {
                // 2008.07.28 upd start ----------------------------------------------------------->>
                //using (SqlCommand sqlCommand = new SqlCommand("INSERT INTO CUSTACCRECRF (CREATEDATETIMERF, UPDATEDATETIMERF, ENTERPRISECODERF, FILEHEADERGUIDRF, UPDEMPLOYEECODERF, UPDASSEMBLYID1RF, UPDASSEMBLYID2RF, LOGICALDELETECODERF, ADDUPSECCODERF, CLAIMCODERF, CLAIMNAMERF, CLAIMNAME2RF, CLAIMSNMRF, CUSTOMERCODERF, CUSTOMERNAMERF, CUSTOMERNAME2RF, CUSTOMERSNMRF, ADDUPDATERF, ADDUPYEARMONTHRF, LASTTIMEACCRECRF, THISTIMEFEEDMDNRMLRF, THISTIMEDISDMDNRMLRF, THISTIMEDMDNRMLRF, THISTIMETTLBLCACCRF, OFSTHISTIMESALESRF, OFSTHISSALESTAXRF, ITDEDOFFSETOUTTAXRF, ITDEDOFFSETINTAXRF, ITDEDOFFSETTAXFREERF, OFFSETOUTTAXRF, OFFSETINTAXRF, THISTIMESALESRF, THISSALESTAXRF, ITDEDSALESOUTTAXRF, ITDEDSALESINTAXRF, ITDEDSALESTAXFREERF, SALESOUTTAXRF, SALESINTAXRF, THISSALESPRICRGDSRF, THISSALESPRCTAXRGDSRF, TTLITDEDRETOUTTAXRF, TTLITDEDRETINTAXRF, TTLITDEDRETTAXFREERF, TTLRETOUTERTAXRF, TTLRETINNERTAXRF, THISSALESPRICDISRF, THISSALESPRCTAXDISRF, TTLITDEDDISOUTTAXRF, TTLITDEDDISINTAXRF, TTLITDEDDISTAXFREERF, TTLDISOUTERTAXRF, TTLDISINNERTAXRF, THISPAYOFFSETRF, THISPAYOFFSETTAXRF, ITDEDPAYMOUTTAXRF, ITDEDPAYMINTAXRF, ITDEDPAYMTAXFREERF, PAYMENTOUTTAXRF, PAYMENTINTAXRF, TAXADJUSTRF, BALANCEADJUSTRF, AFCALTMONTHACCRECRF, ACPODRTTL2TMBFACCRECRF, ACPODRTTL3TMBFACCRECRF, MONTHADDUPEXPDATERF, STMONCADDUPUPDDATERF, LAMONCADDUPUPDDATERF, SALESSLIPCOUNTRF, NONSTMNTAPPEARANCERF, NONSTMNTISDONERF, STMNTAPPEARANCERF, STMNTISDONERF, CONSTAXLAYMETHODRF, CONSTAXRATERF, FRACTIONPROCCDRF) VALUES (@CREATEDATETIME, @UPDATEDATETIME, @ENTERPRISECODE, @FILEHEADERGUID, @UPDEMPLOYEECODE, @UPDASSEMBLYID1, @UPDASSEMBLYID2, @LOGICALDELETECODE, @ADDUPSECCODE, @CLAIMCODE, @CLAIMNAME, @CLAIMNAME2, @CLAIMSNM, @CUSTOMERCODE, @CUSTOMERNAME, @CUSTOMERNAME2, @CUSTOMERSNM, @ADDUPDATE, @ADDUPYEARMONTH, @LASTTIMEACCREC, @THISTIMEFEEDMDNRML, @THISTIMEDISDMDNRML, @THISTIMEDMDNRML, @THISTIMETTLBLCACC, @OFSTHISTIMESALES, @OFSTHISSALESTAX, @ITDEDOFFSETOUTTAX, @ITDEDOFFSETINTAX, @ITDEDOFFSETTAXFREE, @OFFSETOUTTAX, @OFFSETINTAX, @THISTIMESALES, @THISSALESTAX, @ITDEDSALESOUTTAX, @ITDEDSALESINTAX, @ITDEDSALESTAXFREE, @SALESOUTTAX, @SALESINTAX, @THISSALESPRICRGDS, @THISSALESPRCTAXRGDS, @TTLITDEDRETOUTTAX, @TTLITDEDRETINTAX, @TTLITDEDRETTAXFREE, @TTLRETOUTERTAX, @TTLRETINNERTAX, @THISSALESPRICDIS, @THISSALESPRCTAXDIS, @TTLITDEDDISOUTTAX, @TTLITDEDDISINTAX, @TTLITDEDDISTAXFREE, @TTLDISOUTERTAX, @TTLDISINNERTAX, @THISPAYOFFSET, @THISPAYOFFSETTAX, @ITDEDPAYMOUTTAX, @ITDEDPAYMINTAX, @ITDEDPAYMTAXFREE, @PAYMENTOUTTAX, @PAYMENTINTAX, @TAXADJUST, @BALANCEADJUST, @AFCALTMONTHACCREC, @ACPODRTTL2TMBFACCREC, @ACPODRTTL3TMBFACCREC, @MONTHADDUPEXPDATE, @STMONCADDUPUPDDATE, @LAMONCADDUPUPDDATE, @SALESSLIPCOUNT, @NONSTMNTAPPEARANCE, @NONSTMNTISDONE, @STMNTAPPEARANCE, @STMNTISDONE, @CONSTAXLAYMETHOD, @CONSTAXRATE, @FRACTIONPROCCD)", sqlConnection, sqlTransaction))
                #region [Insert文作成]
                sqlText += "INSERT INTO CUSTACCRECRF" + Environment.NewLine;
                sqlText += " (CREATEDATETIMERF" + Environment.NewLine;
                sqlText += "    ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += "    ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "    ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += "    ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += "    ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += "    ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += "    ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += "    ,ADDUPSECCODERF" + Environment.NewLine;
                sqlText += "    ,CLAIMCODERF" + Environment.NewLine;
                sqlText += "    ,CLAIMNAMERF" + Environment.NewLine;
                sqlText += "    ,CLAIMNAME2RF" + Environment.NewLine;
                sqlText += "    ,CLAIMSNMRF" + Environment.NewLine;
                sqlText += "    ,CUSTOMERCODERF" + Environment.NewLine;
                sqlText += "    ,CUSTOMERNAMERF" + Environment.NewLine;
                sqlText += "    ,CUSTOMERNAME2RF" + Environment.NewLine;
                sqlText += "    ,CUSTOMERSNMRF" + Environment.NewLine;
                sqlText += "    ,ADDUPDATERF" + Environment.NewLine;
                sqlText += "    ,ADDUPYEARMONTHRF" + Environment.NewLine;
                sqlText += "    ,LASTTIMEACCRECRF" + Environment.NewLine;
                sqlText += "    ,THISTIMEFEEDMDNRMLRF" + Environment.NewLine;
                sqlText += "    ,THISTIMEDISDMDNRMLRF" + Environment.NewLine;
                sqlText += "    ,THISTIMEDMDNRMLRF" + Environment.NewLine;
                sqlText += "    ,THISTIMETTLBLCACCRF" + Environment.NewLine;
                sqlText += "    ,OFSTHISTIMESALESRF" + Environment.NewLine;
                sqlText += "    ,OFSTHISSALESTAXRF" + Environment.NewLine;
                sqlText += "    ,ITDEDOFFSETOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,ITDEDOFFSETINTAXRF" + Environment.NewLine;
                sqlText += "    ,ITDEDOFFSETTAXFREERF" + Environment.NewLine;
                sqlText += "    ,OFFSETOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,OFFSETINTAXRF" + Environment.NewLine;
                sqlText += "    ,THISTIMESALESRF" + Environment.NewLine;
                sqlText += "    ,THISSALESTAXRF" + Environment.NewLine;
                sqlText += "    ,ITDEDSALESOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,ITDEDSALESINTAXRF" + Environment.NewLine;
                sqlText += "    ,ITDEDSALESTAXFREERF" + Environment.NewLine;
                sqlText += "    ,SALESOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,SALESINTAXRF" + Environment.NewLine;
                sqlText += "    ,THISSALESPRICRGDSRF" + Environment.NewLine;
                sqlText += "    ,THISSALESPRCTAXRGDSRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDRETOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDRETINTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDRETTAXFREERF" + Environment.NewLine;
                sqlText += "    ,TTLRETOUTERTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLRETINNERTAXRF" + Environment.NewLine;
                sqlText += "    ,THISSALESPRICDISRF" + Environment.NewLine;
                sqlText += "    ,THISSALESPRCTAXDISRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDDISOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDDISINTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDDISTAXFREERF" + Environment.NewLine;
                sqlText += "    ,TTLDISOUTERTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLDISINNERTAXRF" + Environment.NewLine;
                sqlText += "    ,TAXADJUSTRF" + Environment.NewLine;
                sqlText += "    ,BALANCEADJUSTRF" + Environment.NewLine;
                sqlText += "    ,AFCALTMONTHACCRECRF" + Environment.NewLine;
                sqlText += "    ,ACPODRTTL2TMBFACCRECRF" + Environment.NewLine;
                sqlText += "    ,ACPODRTTL3TMBFACCRECRF" + Environment.NewLine;
                sqlText += "    ,MONTHADDUPEXPDATERF" + Environment.NewLine;
                sqlText += "    ,STMONCADDUPUPDDATERF" + Environment.NewLine;
                sqlText += "    ,LAMONCADDUPUPDDATERF" + Environment.NewLine;
                sqlText += "    ,SALESSLIPCOUNTRF" + Environment.NewLine;
                sqlText += "    ,CONSTAXLAYMETHODRF" + Environment.NewLine;
                sqlText += "    ,CONSTAXRATERF" + Environment.NewLine;
                sqlText += "    ,FRACTIONPROCCDRF" + Environment.NewLine;
                sqlText += " )" + Environment.NewLine;
                sqlText += " VALUES" + Environment.NewLine;
                sqlText += " (@CREATEDATETIME" + Environment.NewLine;
                sqlText += "    ,@UPDATEDATETIME" + Environment.NewLine;
                sqlText += "    ,@ENTERPRISECODE" + Environment.NewLine;
                sqlText += "    ,@FILEHEADERGUID" + Environment.NewLine;
                sqlText += "    ,@UPDEMPLOYEECODE" + Environment.NewLine;
                sqlText += "    ,@UPDASSEMBLYID1" + Environment.NewLine;
                sqlText += "    ,@UPDASSEMBLYID2" + Environment.NewLine;
                sqlText += "    ,@LOGICALDELETECODE" + Environment.NewLine;
                sqlText += "    ,@ADDUPSECCODE" + Environment.NewLine;
                sqlText += "    ,@CLAIMCODE" + Environment.NewLine;
                sqlText += "    ,@CLAIMNAME" + Environment.NewLine;
                sqlText += "    ,@CLAIMNAME2" + Environment.NewLine;
                sqlText += "    ,@CLAIMSNM" + Environment.NewLine;
                sqlText += "    ,@CUSTOMERCODE" + Environment.NewLine;
                sqlText += "    ,@CUSTOMERNAME" + Environment.NewLine;
                sqlText += "    ,@CUSTOMERNAME2" + Environment.NewLine;
                sqlText += "    ,@CUSTOMERSNM" + Environment.NewLine;
                sqlText += "    ,@ADDUPDATE" + Environment.NewLine;
                sqlText += "    ,@ADDUPYEARMONTH" + Environment.NewLine;
                sqlText += "    ,@LASTTIMEACCREC" + Environment.NewLine;
                sqlText += "    ,@THISTIMEFEEDMDNRML" + Environment.NewLine;
                sqlText += "    ,@THISTIMEDISDMDNRML" + Environment.NewLine;
                sqlText += "    ,@THISTIMEDMDNRML" + Environment.NewLine;
                sqlText += "    ,@THISTIMETTLBLCACC" + Environment.NewLine;
                sqlText += "    ,@OFSTHISTIMESALES" + Environment.NewLine;
                sqlText += "    ,@OFSTHISSALESTAX" + Environment.NewLine;
                sqlText += "    ,@ITDEDOFFSETOUTTAX" + Environment.NewLine;
                sqlText += "    ,@ITDEDOFFSETINTAX" + Environment.NewLine;
                sqlText += "    ,@ITDEDOFFSETTAXFREE" + Environment.NewLine;
                sqlText += "    ,@OFFSETOUTTAX" + Environment.NewLine;
                sqlText += "    ,@OFFSETINTAX" + Environment.NewLine;
                sqlText += "    ,@THISTIMESALES" + Environment.NewLine;
                sqlText += "    ,@THISSALESTAX" + Environment.NewLine;
                sqlText += "    ,@ITDEDSALESOUTTAX" + Environment.NewLine;
                sqlText += "    ,@ITDEDSALESINTAX" + Environment.NewLine;
                sqlText += "    ,@ITDEDSALESTAXFREE" + Environment.NewLine;
                sqlText += "    ,@SALESOUTTAX" + Environment.NewLine;
                sqlText += "    ,@SALESINTAX" + Environment.NewLine;
                sqlText += "    ,@THISSALESPRICRGDS" + Environment.NewLine;
                sqlText += "    ,@THISSALESPRCTAXRGDS" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDRETOUTTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDRETINTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDRETTAXFREE" + Environment.NewLine;
                sqlText += "    ,@TTLRETOUTERTAX" + Environment.NewLine;
                sqlText += "    ,@TTLRETINNERTAX" + Environment.NewLine;
                sqlText += "    ,@THISSALESPRICDIS" + Environment.NewLine;
                sqlText += "    ,@THISSALESPRCTAXDIS" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDDISOUTTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDDISINTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDDISTAXFREE" + Environment.NewLine;
                sqlText += "    ,@TTLDISOUTERTAX" + Environment.NewLine;
                sqlText += "    ,@TTLDISINNERTAX" + Environment.NewLine;
                sqlText += "    ,@TAXADJUST" + Environment.NewLine;
                sqlText += "    ,@BALANCEADJUST" + Environment.NewLine;
                sqlText += "    ,@AFCALTMONTHACCREC" + Environment.NewLine;
                sqlText += "    ,@ACPODRTTL2TMBFACCREC" + Environment.NewLine;
                sqlText += "    ,@ACPODRTTL3TMBFACCREC" + Environment.NewLine;
                sqlText += "    ,@MONTHADDUPEXPDATE" + Environment.NewLine;
                sqlText += "    ,@STMONCADDUPUPDDATE" + Environment.NewLine;
                sqlText += "    ,@LAMONCADDUPUPDDATE" + Environment.NewLine;
                sqlText += "    ,@SALESSLIPCOUNT" + Environment.NewLine;
                sqlText += "    ,@CONSTAXLAYMETHOD" + Environment.NewLine;
                sqlText += "    ,@CONSTAXRATE" + Environment.NewLine;
                sqlText += "    ,@FRACTIONPROCCD" + Environment.NewLine;
                sqlText += " )" + Environment.NewLine;
                #endregion  //[Insert文作成]

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                // 2008.07.28 upd end -------------------------------------------------------------<<
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //登録ヘッダ情報を設定
                    object obj = (object)this;
                    IFileHeader flhd = (IFileHeader)custAccRecWork;
                    FileHeader fileHeader = new FileHeader(obj);
                    fileHeader.SetInsertHeader(ref flhd, obj);

                    #region Parameterオブジェクト作成
                    SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);
                    SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);
                    SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);
                    SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);
                    SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                    SqlParameter paraAddUpSecCode = sqlCommand.Parameters.Add("@ADDUPSECCODE", SqlDbType.NChar);
                    SqlParameter paraClaimCode = sqlCommand.Parameters.Add("@CLAIMCODE", SqlDbType.Int);
                    SqlParameter paraClaimName = sqlCommand.Parameters.Add("@CLAIMNAME", SqlDbType.NVarChar);
                    SqlParameter paraClaimName2 = sqlCommand.Parameters.Add("@CLAIMNAME2", SqlDbType.NVarChar);
                    SqlParameter paraClaimSnm = sqlCommand.Parameters.Add("@CLAIMSNM", SqlDbType.NVarChar);
                    SqlParameter paraCustomerCode = sqlCommand.Parameters.Add("@CUSTOMERCODE", SqlDbType.Int);
                    SqlParameter paraCustomerName = sqlCommand.Parameters.Add("@CUSTOMERNAME", SqlDbType.NVarChar);
                    SqlParameter paraCustomerName2 = sqlCommand.Parameters.Add("@CUSTOMERNAME2", SqlDbType.NVarChar);
                    SqlParameter paraCustomerSnm = sqlCommand.Parameters.Add("@CUSTOMERSNM", SqlDbType.NVarChar);
                    SqlParameter paraAddUpDate = sqlCommand.Parameters.Add("@ADDUPDATE", SqlDbType.Int);
                    SqlParameter paraAddUpYearMonth = sqlCommand.Parameters.Add("@ADDUPYEARMONTH", SqlDbType.Int);
                    SqlParameter paraLastTimeAccRec = sqlCommand.Parameters.Add("@LASTTIMEACCREC", SqlDbType.BigInt);
                    SqlParameter paraThisTimeFeeDmdNrml = sqlCommand.Parameters.Add("@THISTIMEFEEDMDNRML", SqlDbType.BigInt);
                    SqlParameter paraThisTimeDisDmdNrml = sqlCommand.Parameters.Add("@THISTIMEDISDMDNRML", SqlDbType.BigInt);
                    SqlParameter paraThisTimeDmdNrml = sqlCommand.Parameters.Add("@THISTIMEDMDNRML", SqlDbType.BigInt);
                    SqlParameter paraThisTimeTtlBlcAcc = sqlCommand.Parameters.Add("@THISTIMETTLBLCACC", SqlDbType.BigInt);
                    SqlParameter paraOfsThisTimeSales = sqlCommand.Parameters.Add("@OFSTHISTIMESALES", SqlDbType.BigInt);
                    SqlParameter paraOfsThisSalesTax = sqlCommand.Parameters.Add("@OFSTHISSALESTAX", SqlDbType.BigInt);
                    SqlParameter paraItdedOffsetOutTax = sqlCommand.Parameters.Add("@ITDEDOFFSETOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraItdedOffsetInTax = sqlCommand.Parameters.Add("@ITDEDOFFSETINTAX", SqlDbType.BigInt);
                    SqlParameter paraItdedOffsetTaxFree = sqlCommand.Parameters.Add("@ITDEDOFFSETTAXFREE", SqlDbType.BigInt);
                    SqlParameter paraOffsetOutTax = sqlCommand.Parameters.Add("@OFFSETOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraOffsetInTax = sqlCommand.Parameters.Add("@OFFSETINTAX", SqlDbType.BigInt);
                    SqlParameter paraThisTimeSales = sqlCommand.Parameters.Add("@THISTIMESALES", SqlDbType.BigInt);
                    SqlParameter paraThisSalesTax = sqlCommand.Parameters.Add("@THISSALESTAX", SqlDbType.BigInt);
                    SqlParameter paraItdedSalesOutTax = sqlCommand.Parameters.Add("@ITDEDSALESOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraItdedSalesInTax = sqlCommand.Parameters.Add("@ITDEDSALESINTAX", SqlDbType.BigInt);
                    SqlParameter paraItdedSalesTaxFree = sqlCommand.Parameters.Add("@ITDEDSALESTAXFREE", SqlDbType.BigInt);
                    SqlParameter paraSalesOutTax = sqlCommand.Parameters.Add("@SALESOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraSalesInTax = sqlCommand.Parameters.Add("@SALESINTAX", SqlDbType.BigInt);
                    SqlParameter paraThisSalesPricRgds = sqlCommand.Parameters.Add("@THISSALESPRICRGDS", SqlDbType.BigInt);
                    SqlParameter paraThisSalesPrcTaxRgds = sqlCommand.Parameters.Add("@THISSALESPRCTAXRGDS", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedRetOutTax = sqlCommand.Parameters.Add("@TTLITDEDRETOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedRetInTax = sqlCommand.Parameters.Add("@TTLITDEDRETINTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedRetTaxFree = sqlCommand.Parameters.Add("@TTLITDEDRETTAXFREE", SqlDbType.BigInt);
                    SqlParameter paraTtlRetOuterTax = sqlCommand.Parameters.Add("@TTLRETOUTERTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlRetInnerTax = sqlCommand.Parameters.Add("@TTLRETINNERTAX", SqlDbType.BigInt);
                    SqlParameter paraThisSalesPricDis = sqlCommand.Parameters.Add("@THISSALESPRICDIS", SqlDbType.BigInt);
                    SqlParameter paraThisSalesPrcTaxDis = sqlCommand.Parameters.Add("@THISSALESPRCTAXDIS", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedDisOutTax = sqlCommand.Parameters.Add("@TTLITDEDDISOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedDisInTax = sqlCommand.Parameters.Add("@TTLITDEDDISINTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedDisTaxFree = sqlCommand.Parameters.Add("@TTLITDEDDISTAXFREE", SqlDbType.BigInt);
                    SqlParameter paraTtlDisOuterTax = sqlCommand.Parameters.Add("@TTLDISOUTERTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlDisInnerTax = sqlCommand.Parameters.Add("@TTLDISINNERTAX", SqlDbType.BigInt);
                    SqlParameter paraTaxAdjust = sqlCommand.Parameters.Add("@TAXADJUST", SqlDbType.BigInt);
                    SqlParameter paraBalanceAdjust = sqlCommand.Parameters.Add("@BALANCEADJUST", SqlDbType.BigInt);
                    SqlParameter paraAfCalTMonthAccRec = sqlCommand.Parameters.Add("@AFCALTMONTHACCREC", SqlDbType.BigInt);
                    SqlParameter paraAcpOdrTtl2TmBfAccRec = sqlCommand.Parameters.Add("@ACPODRTTL2TMBFACCREC", SqlDbType.BigInt);
                    SqlParameter paraAcpOdrTtl3TmBfAccRec = sqlCommand.Parameters.Add("@ACPODRTTL3TMBFACCREC", SqlDbType.BigInt);
                    SqlParameter paraMonthAddUpExpDate = sqlCommand.Parameters.Add("@MONTHADDUPEXPDATE", SqlDbType.Int);
                    SqlParameter paraStMonCAddUpUpdDate = sqlCommand.Parameters.Add("@STMONCADDUPUPDDATE", SqlDbType.Int);
                    SqlParameter paraLaMonCAddUpUpdDate = sqlCommand.Parameters.Add("@LAMONCADDUPUPDDATE", SqlDbType.Int);
                    SqlParameter paraSalesSlipCount = sqlCommand.Parameters.Add("@SALESSLIPCOUNT", SqlDbType.Int);
                    SqlParameter paraConsTaxLayMethod = sqlCommand.Parameters.Add("@CONSTAXLAYMETHOD", SqlDbType.Int);
                    SqlParameter paraConsTaxRate = sqlCommand.Parameters.Add("@CONSTAXRATE", SqlDbType.Float);
                    SqlParameter paraFractionProcCd = sqlCommand.Parameters.Add("@FRACTIONPROCCD", SqlDbType.Int);
                    #endregion
                    if (insertDiv == 0) // 集計レコードセット用
                    {
                        #region 集計レコードParameterオブジェクト設定
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(custAccRecWork.CreateDateTime);
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(custAccRecWork.UpdateDateTime);
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(custAccRecWork.FileHeaderGuid);
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.UpdEmployeeCode);
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(custAccRecWork.UpdAssemblyId1);
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(custAccRecWork.UpdAssemblyId2);
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.LogicalDeleteCode);
                        paraAddUpSecCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.AddUpSecCode);
                        paraClaimCode.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.ClaimCode);
                        paraClaimName.Value = SqlDataMediator.SqlSetString(custAccRecWork.ClaimName);
                        paraClaimName2.Value = SqlDataMediator.SqlSetString(custAccRecWork.ClaimName2);
                        paraClaimSnm.Value = SqlDataMediator.SqlSetString(custAccRecWork.ClaimSnm);
                        // 未セット項目↓↓
                        paraCustomerCode.Value = 0;
                        paraCustomerName.Value = string.Empty;
                        paraCustomerName2.Value = string.Empty;
                        paraCustomerSnm.Value = string.Empty;
                        // 未セット項目↑↑
                        paraAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.AddUpDate);
                        paraAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(custAccRecWork.AddUpYearMonth);
                        paraLastTimeAccRec.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.LastTimeAccRec);
                        paraThisTimeFeeDmdNrml.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisTimeFeeDmdNrml);
                        paraThisTimeDisDmdNrml.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisTimeDisDmdNrml);
                        paraThisTimeDmdNrml.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisTimeDmdNrml);
                        paraThisTimeTtlBlcAcc.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisTimeTtlBlcAcc);
                        paraOfsThisTimeSales.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.OfsThisTimeSales);
                        paraOfsThisSalesTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.OfsThisSalesTax);
                        paraItdedOffsetOutTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ItdedOffsetOutTax);
                        paraItdedOffsetInTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ItdedOffsetInTax);
                        paraItdedOffsetTaxFree.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ItdedOffsetTaxFree);
                        paraOffsetOutTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.OffsetOutTax);
                        paraOffsetInTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.OffsetInTax);
                        paraThisTimeSales.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisTimeSales);
                        paraThisSalesTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisSalesTax);
                        paraItdedSalesOutTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ItdedSalesOutTax);
                        paraItdedSalesInTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ItdedSalesInTax);
                        paraItdedSalesTaxFree.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ItdedSalesTaxFree);
                        paraSalesOutTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.SalesOutTax);
                        paraSalesInTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.SalesInTax);
                        paraThisSalesPricRgds.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisSalesPricRgds);
                        paraThisSalesPrcTaxRgds.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisSalesPrcTaxRgds);
                        paraTtlItdedRetOutTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlItdedRetOutTax);
                        paraTtlItdedRetInTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlItdedRetInTax);
                        paraTtlItdedRetTaxFree.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlItdedRetTaxFree);
                        paraTtlRetOuterTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlRetOuterTax);
                        paraTtlRetInnerTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlRetInnerTax);
                        paraThisSalesPricDis.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisSalesPricDis);
                        paraThisSalesPrcTaxDis.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisSalesPrcTaxDis);
                        paraTtlItdedDisOutTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlItdedDisOutTax);
                        paraTtlItdedDisInTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlItdedDisInTax);
                        paraTtlItdedDisTaxFree.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlItdedDisTaxFree);
                        paraTtlDisOuterTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlDisOuterTax);
                        paraTtlDisInnerTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlDisInnerTax);
                        // 未セット項目↓↓
                        paraTaxAdjust.Value = 0;
                        paraBalanceAdjust.Value = 0;
                        // 未セット項目↑↑
                        paraAfCalTMonthAccRec.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.AfCalTMonthAccRec);
                        // 未セット項目↓↓
                        paraAcpOdrTtl2TmBfAccRec.Value = 0;
                        paraAcpOdrTtl3TmBfAccRec.Value = 0;
                        // 未セット項目↑↑
                        paraMonthAddUpExpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.MonthAddUpExpDate);
                        paraStMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.StMonCAddUpUpdDate);
                        paraLaMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.LaMonCAddUpUpdDate);
                        paraSalesSlipCount.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.SalesSlipCount);
                        paraConsTaxLayMethod.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.ConsTaxLayMethod);
                        paraConsTaxRate.Value = SqlDataMediator.SqlSetDouble(custAccRecWork.ConsTaxRate);
                        paraFractionProcCd.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.FractionProcCd);
                        #endregion
                    }
                    else if (insertDiv == 1) // 親子レコードセット用
                    {
                        #region 親子レコードParameterオブジェクト設定
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(custAccRecWork.CreateDateTime);
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(custAccRecWork.UpdateDateTime);
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(custAccRecWork.FileHeaderGuid);
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.UpdEmployeeCode);
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(custAccRecWork.UpdAssemblyId1);
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(custAccRecWork.UpdAssemblyId2);
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.LogicalDeleteCode);
                        paraAddUpSecCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.AddUpSecCode);
                        paraClaimCode.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.ClaimCode);
                        paraClaimName.Value = SqlDataMediator.SqlSetString(custAccRecWork.ClaimName);
                        paraClaimName2.Value = SqlDataMediator.SqlSetString(custAccRecWork.ClaimName2);
                        paraClaimSnm.Value = SqlDataMediator.SqlSetString(custAccRecWork.ClaimSnm);
                        paraCustomerCode.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.CustomerCode);
                        paraCustomerName.Value = SqlDataMediator.SqlSetString(custAccRecWork.CustomerName);
                        paraCustomerName2.Value = SqlDataMediator.SqlSetString(custAccRecWork.CustomerName2);
                        paraCustomerSnm.Value = SqlDataMediator.SqlSetString(custAccRecWork.CustomerSnm);
                        paraAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.AddUpDate);
                        paraAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(custAccRecWork.AddUpYearMonth);
                        // 未セット項目↓↓
                        paraLastTimeAccRec.Value = 0;
                        paraThisTimeFeeDmdNrml.Value = 0;
                        paraThisTimeDisDmdNrml.Value = 0;
                        paraThisTimeDmdNrml.Value = 0;
                        paraThisTimeTtlBlcAcc.Value = 0;
                        // 未セット項目↑↑
                        paraOfsThisTimeSales.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.OfsThisTimeSales);
                        paraOfsThisSalesTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.OfsThisSalesTax);
                        paraItdedOffsetOutTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ItdedOffsetOutTax);
                        paraItdedOffsetInTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ItdedOffsetInTax);
                        paraItdedOffsetTaxFree.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ItdedOffsetTaxFree);
                        paraOffsetOutTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.OffsetOutTax);
                        paraOffsetInTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.OffsetInTax);
                        paraThisTimeSales.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisTimeSales);
                        paraThisSalesTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisSalesTax);
                        paraItdedSalesOutTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ItdedSalesOutTax);
                        paraItdedSalesInTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ItdedSalesInTax);
                        paraItdedSalesTaxFree.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ItdedSalesTaxFree);
                        paraSalesOutTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.SalesOutTax);
                        paraSalesInTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.SalesInTax);
                        paraThisSalesPricRgds.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisSalesPricRgds);
                        paraThisSalesPrcTaxRgds.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisSalesPrcTaxRgds);
                        paraTtlItdedRetOutTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlItdedRetOutTax);
                        paraTtlItdedRetInTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlItdedRetInTax);
                        paraTtlItdedRetTaxFree.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlItdedRetTaxFree);
                        paraTtlRetOuterTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlRetOuterTax);
                        paraTtlRetInnerTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlRetInnerTax);
                        paraThisSalesPricDis.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisSalesPricDis);
                        paraThisSalesPrcTaxDis.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.ThisSalesPrcTaxDis);
                        paraTtlItdedDisOutTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlItdedDisOutTax);
                        paraTtlItdedDisInTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlItdedDisInTax);
                        paraTtlItdedDisTaxFree.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlItdedDisTaxFree);
                        paraTtlDisOuterTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlDisOuterTax);
                        paraTtlDisInnerTax.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.TtlDisInnerTax);
                        // 未セット項目↓↓
                        paraTaxAdjust.Value = 0;
                        paraBalanceAdjust.Value = 0;
                        // 未セット項目↑↑
                        paraAfCalTMonthAccRec.Value = SqlDataMediator.SqlSetInt64(custAccRecWork.AfCalTMonthAccRec);
                        // 未セット項目↓↓
                        paraAcpOdrTtl2TmBfAccRec.Value = 0;
                        paraAcpOdrTtl3TmBfAccRec.Value = 0;
                        // 未セット項目↑↑                        
                        paraMonthAddUpExpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.MonthAddUpExpDate);
                        paraStMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.StMonCAddUpUpdDate);
                        paraLaMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.LaMonCAddUpUpdDate);
                        paraSalesSlipCount.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.SalesSlipCount);
                        paraConsTaxLayMethod.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.ConsTaxLayMethod);
                        paraConsTaxRate.Value = SqlDataMediator.SqlSetDouble(custAccRecWork.ConsTaxRate);
                        paraFractionProcCd.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.FractionProcCd);
                        #endregion
                    }

                    sqlCommand.ExecuteNonQuery();
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                return base.WriteSQLErrorLog(ex);
            }
            return (int)ConstantManagement.DB_Status.ctDB_NORMAL;
        }
        // ↑ 2007.11.07 980081

        /// <summary>
        /// 売掛入金集計データを更新します
        /// </summary>
        /// <param name="accRecDepoTotalList">売掛入金集計データList</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 売掛入金集計データを更新します</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        private int WriteAccRecDepoTotal(ref ArrayList accRecDepoTotalList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            string sqlText = string.Empty;
            //DELETEコマンドの生成
            try
            {
                for (int i = 0; i < accRecDepoTotalList.Count; i++)
                {
                    AccRecDepoTotalWork accRecDepoTotalWork = accRecDepoTotalList[i] as AccRecDepoTotalWork;

                    sqlText = string.Empty;
                    sqlText += "DELETE" + Environment.NewLine;
                    sqlText += " FROM ACCRECDEPOTOTALRF" + Environment.NewLine;
                    sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                    sqlText += "    AND CLAIMCODERF=@FINDCLAIMCODE" + Environment.NewLine;
                    sqlText += "    AND ADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;
                    //sqlText += "    AND MONEYKINDCODERF=@FINDMONEYKINDCODE" + Environment.NewLine; // ADD 2008.12.22


                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                    {
                        sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                        //Prameterオブジェクトの作成
                        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        SqlParameter findParaClaimCode = sqlCommand.Parameters.Add("@FINDCLAIMCODE", SqlDbType.Int);
                        SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                        //SqlParameter findMoneyKindCode = sqlCommand.Parameters.Add("@FINDMONEYKINDCODE", SqlDbType.Int); // ADD 2008.12.22

                        //Parameterオブジェクトへ値設定
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(accRecDepoTotalWork.EnterpriseCode);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(accRecDepoTotalWork.AddUpSecCode);
                        findParaClaimCode.Value = SqlDataMediator.SqlSetInt32(accRecDepoTotalWork.ClaimCode);
                        findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(accRecDepoTotalWork.AddUpDate);
                        //findMoneyKindCode.Value = SqlDataMediator.SqlSetInt32(accRecDepoTotalWork.MoneyKindCode); // ADD 2008.12.22

                        sqlCommand.ExecuteNonQuery();
                    }
                // ADD 2008.12.22 >>>
                }
                for (int i = 0; i < accRecDepoTotalList.Count; i++)
                {
                    AccRecDepoTotalWork accRecDepoTotalWork = accRecDepoTotalList[i] as AccRecDepoTotalWork;
                // ADD 2008.12.22 <<<

                    #region [Insert文作成]
                    sqlText = string.Empty;
                    sqlText += "INSERT INTO ACCRECDEPOTOTALRF" + Environment.NewLine;
                    sqlText += " (CREATEDATETIMERF" + Environment.NewLine;
                    sqlText += "    ,UPDATEDATETIMERF" + Environment.NewLine;
                    sqlText += "    ,ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    ,FILEHEADERGUIDRF" + Environment.NewLine;
                    sqlText += "    ,UPDEMPLOYEECODERF" + Environment.NewLine;
                    sqlText += "    ,UPDASSEMBLYID1RF" + Environment.NewLine;
                    sqlText += "    ,UPDASSEMBLYID2RF" + Environment.NewLine;
                    sqlText += "    ,LOGICALDELETECODERF" + Environment.NewLine;
                    sqlText += "    ,ADDUPSECCODERF" + Environment.NewLine;
                    sqlText += "    ,CLAIMCODERF" + Environment.NewLine;
                    sqlText += "    ,CUSTOMERCODERF" + Environment.NewLine;
                    sqlText += "    ,ADDUPDATERF" + Environment.NewLine;
                    sqlText += "    ,MONEYKINDCODERF" + Environment.NewLine;
                    sqlText += "    ,MONEYKINDNAMERF" + Environment.NewLine;
                    sqlText += "    ,MONEYKINDDIVRF" + Environment.NewLine;
                    sqlText += "    ,DEPOSITRF" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;
                    sqlText += " VALUES" + Environment.NewLine;
                    sqlText += " (@CREATEDATETIME" + Environment.NewLine;
                    sqlText += "    ,@UPDATEDATETIME" + Environment.NewLine;
                    sqlText += "    ,@ENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    ,@FILEHEADERGUID" + Environment.NewLine;
                    sqlText += "    ,@UPDEMPLOYEECODE" + Environment.NewLine;
                    sqlText += "    ,@UPDASSEMBLYID1" + Environment.NewLine;
                    sqlText += "    ,@UPDASSEMBLYID2" + Environment.NewLine;
                    sqlText += "    ,@LOGICALDELETECODE" + Environment.NewLine;
                    sqlText += "    ,@ADDUPSECCODE" + Environment.NewLine;
                    sqlText += "    ,@CLAIMCODE" + Environment.NewLine;
                    sqlText += "    ,@CUSTOMERCODE" + Environment.NewLine;
                    sqlText += "    ,@ADDUPDATE" + Environment.NewLine;
                    sqlText += "    ,@MONEYKINDCODE" + Environment.NewLine;
                    sqlText += "    ,@MONEYKINDNAME" + Environment.NewLine;
                    sqlText += "    ,@MONEYKINDDIV" + Environment.NewLine;
                    sqlText += "    ,@DEPOSIT" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;
                    #endregion  //[Insert文作成]

                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                    {
                        sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                        //登録ヘッダ情報を設定
                        object obj = (object)this;
                        IFileHeader flhd = (IFileHeader)accRecDepoTotalWork;
                        FileHeader fileHeader = new FileHeader(obj);
                        fileHeader.SetInsertHeader(ref flhd, obj);

                        #region Parameterオブジェクト作成
                        SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                        SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                        SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);
                        SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);
                        SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);
                        SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);
                        SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                        SqlParameter paraAddUpSecCode = sqlCommand.Parameters.Add("@ADDUPSECCODE", SqlDbType.NChar);
                        SqlParameter paraClaimCode = sqlCommand.Parameters.Add("@CLAIMCODE", SqlDbType.Int);
                        SqlParameter paraCustomerCode = sqlCommand.Parameters.Add("@CUSTOMERCODE", SqlDbType.Int);
                        SqlParameter paraAddUpDate = sqlCommand.Parameters.Add("@ADDUPDATE", SqlDbType.Int);
                        SqlParameter paraMoneyKindCode = sqlCommand.Parameters.Add("@MONEYKINDCODE", SqlDbType.Int);
                        SqlParameter paraMoneyKindName = sqlCommand.Parameters.Add("@MONEYKINDNAME", SqlDbType.NVarChar);
                        SqlParameter paraMoneyKindDiv = sqlCommand.Parameters.Add("@MONEYKINDDIV", SqlDbType.Int);
                        SqlParameter paraDeposit = sqlCommand.Parameters.Add("@DEPOSIT", SqlDbType.BigInt);
                        #endregion

                        #region Parameterオブジェクト設定
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(accRecDepoTotalWork.CreateDateTime);
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(accRecDepoTotalWork.UpdateDateTime);
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(accRecDepoTotalWork.EnterpriseCode);
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(accRecDepoTotalWork.FileHeaderGuid);
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(accRecDepoTotalWork.UpdEmployeeCode);
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(accRecDepoTotalWork.UpdAssemblyId1);
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(accRecDepoTotalWork.UpdAssemblyId2);
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(accRecDepoTotalWork.LogicalDeleteCode);
                        paraAddUpSecCode.Value = SqlDataMediator.SqlSetString(accRecDepoTotalWork.AddUpSecCode);
                        paraClaimCode.Value = SqlDataMediator.SqlSetInt32(accRecDepoTotalWork.ClaimCode);
                        paraCustomerCode.Value = SqlDataMediator.SqlSetInt32(accRecDepoTotalWork.CustomerCode);
                        paraAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(accRecDepoTotalWork.AddUpDate);
                        paraMoneyKindCode.Value = SqlDataMediator.SqlSetInt32(accRecDepoTotalWork.MoneyKindCode);
                        paraMoneyKindName.Value = SqlDataMediator.SqlSetString(accRecDepoTotalWork.MoneyKindName);
                        paraMoneyKindDiv.Value = SqlDataMediator.SqlSetInt32(accRecDepoTotalWork.MoneyKindDiv);
                        paraDeposit.Value = SqlDataMediator.SqlSetInt64(accRecDepoTotalWork.Deposit);
                        #endregion

                        sqlCommand.ExecuteNonQuery();
                    }

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                 }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 仕入先買掛金額マスタを更新します。
        /// </summary>
        /// <param name="suplAccPayWorkList">売掛金額マスタ更新List</param>
        /// <param name="suplAccPayChildWorkList">売掛金額マスタ更新List(子レコード用)</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先買掛金額マスタを更新します。</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// </remarks>
        // ↓ 2007.11.07 980081 c
        //private int WriteSuplAccPay(ref ArrayList suplAccPayWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        private int WriteSuplAccPay(ref ArrayList suplAccPayWorkList, ref ArrayList suplAccPayChildWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        // ↑ 2007.11.07 980081 c
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            //Selectコマンドの生成
            try
            {
                // 修正 2008.12.22 >>>
                #region 集計レコードInsert
                SuplAccPayWork suplAccPayWork = new SuplAccPayWork();
                String sqlText = string.Empty;

                for (int i = 0; i < suplAccPayWorkList.Count; i++)
                {
                    suplAccPayWork = suplAccPayWorkList[i] as SuplAccPayWork;
                    sqlText = String.Empty;
                    sqlText += "DELETE" + Environment.NewLine;
                    sqlText += "FROM SUPLACCPAYRF" + Environment.NewLine;
                    sqlText += "WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += " AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                    sqlText += " AND PAYEECODERF=@FINDPAYEECODERF" + Environment.NewLine;
                    // 修正 2009/07/03 >>>
                    //sqlText += " AND ADDUPDATERF>=@FINDSTMONCADDUPUPDDATE" + Environment.NewLine;
                    //sqlText += " AND ADDUPDATERF<=@FINDADDUPDATE" + Environment.NewLine;
                    sqlText += " AND ADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;
                    // 修正1 2009/07/03 <<<

                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                    {
                        sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                        //Prameterオブジェクトの作成
                        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                        //SqlParameter findParaStMonCAddUpUpdDate = sqlCommand.Parameters.Add("@FINDSTMONCADDUPUPDDATE", SqlDbType.Int); // DEL 2009/07/03
                        SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDPAYEECODERF", SqlDbType.Int);

                        //Parameterオブジェクトへ値設定
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);
                        findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                        // DEL 2009/07/03 >>>
                        //findParaStMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.StMonCAddUpUpdDate);
                        //// add 2007.06.05 saito
                        //if (suplAccPayWork.StMonCAddUpUpdDate == DateTime.MinValue)
                        //    findParaStMonCAddUpUpdDate.Value = 20000101;
                        // DEL 2009/07/03 <<<
                        findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
                        sqlCommand.ExecuteNonQuery();
                    }

                    status = InsertSuplAccPay(suplAccPayWork, ref sqlConnection, ref sqlTransaction,0);
                    if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        return status;
                }
                #endregion

                #region 親子レコードInsert
                SuplAccPayWork suplAccPayChildWork = new SuplAccPayWork();
                for (int i = 0; i < suplAccPayChildWorkList.Count; i++)
                {
                    suplAccPayChildWork = suplAccPayChildWorkList[i] as SuplAccPayWork;
                    status = InsertSuplAccPay(suplAccPayChildWork, ref sqlConnection, ref sqlTransaction, 1);
                    if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        return status;
                }
                #endregion

                // 修正 2008.12.22 <<<
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        private int InsertSuplAccPay(SuplAccPayWork suplAccPayWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction, int InsertDiv)
        {
            string sqlText = string.Empty;

            try
            {
                // 2008.07.28 upd start ----------------------------------------------->>
                //using (SqlCommand sqlCommand = new SqlCommand("INSERT INTO SUPLACCPAYRF (CREATEDATETIMERF, UPDATEDATETIMERF, ENTERPRISECODERF, FILEHEADERGUIDRF, UPDEMPLOYEECODERF, UPDASSEMBLYID1RF, UPDASSEMBLYID2RF, LOGICALDELETECODERF, ADDUPSECCODERF, PAYEECODERF, PAYEENAMERF, PAYEENAME2RF, PAYEESNMRF, CUSTOMERCODERF, CUSTOMERNAMERF, CUSTOMERNAME2RF, CUSTOMERSNMRF, ADDUPDATERF, ADDUPYEARMONTHRF, LASTTIMEACCPAYRF, THISTIMEFEEPAYNRMLRF, THISTIMEDISPAYNRMLRF, THISTIMEPAYNRMLRF, THISTIMETTLBLCACPAYRF, OFSTHISTIMESTOCKRF, OFSTHISSTOCKTAXRF, ITDEDOFFSETOUTTAXRF, ITDEDOFFSETINTAXRF, ITDEDOFFSETTAXFREERF, OFFSETOUTTAXRF, OFFSETINTAXRF, THISTIMESTOCKPRICERF, THISSTCPRCTAXRF, TTLITDEDSTCOUTTAXRF, TTLITDEDSTCINTAXRF, TTLITDEDSTCTAXFREERF, TTLSTOCKOUTERTAXRF, TTLSTOCKINNERTAXRF, THISSTCKPRICRGDSRF, THISSTCPRCTAXRGDSRF, TTLITDEDRETOUTTAXRF, TTLITDEDRETINTAXRF, TTLITDEDRETTAXFREERF, TTLRETOUTERTAXRF, TTLRETINNERTAXRF, THISSTCKPRICDISRF, THISSTCPRCTAXDISRF, TTLITDEDDISOUTTAXRF, TTLITDEDDISINTAXRF, TTLITDEDDISTAXFREERF, TTLDISOUTERTAXRF, TTLDISINNERTAXRF, THISRECVOFFSETRF, THISRECVOFFSETTAXRF, THISRECVOUTTAXRF, THISRECVINTAXRF, THISRECVTAXFREERF, THISRECVOUTERTAXRF, THISRECVINNERTAXRF, TAXADJUSTRF, BALANCEADJUSTRF, STCKTTLACCPAYBALANCERF, STCKTTL2TMBFBLACCPAYRF, STCKTTL3TMBFBLACCPAYRF, MONTHADDUPEXPDATERF, STMONCADDUPUPDDATERF, LAMONCADDUPUPDDATERF, STOCKSLIPCOUNTRF, NONSTMNTAPPEARANCERF, NONSTMNTISDONERF, STMNTAPPEARANCERF, STMNTISDONERF, SUPPCTAXLAYCDRF, SUPPLIERCONSTAXRATERF, FRACTIONPROCCDRF) VALUES (@CREATEDATETIME, @UPDATEDATETIME, @ENTERPRISECODE, @FILEHEADERGUID, @UPDEMPLOYEECODE, @UPDASSEMBLYID1, @UPDASSEMBLYID2, @LOGICALDELETECODE, @ADDUPSECCODE, @PAYEECODE, @PAYEENAME, @PAYEENAME2, @PAYEESNM, @CUSTOMERCODE, @CUSTOMERNAME, @CUSTOMERNAME2, @CUSTOMERSNM, @ADDUPDATE, @ADDUPYEARMONTH, @LASTTIMEACCPAY, @THISTIMEFEEPAYNRML, @THISTIMEDISPAYNRML, @THISTIMEPAYNRML, @THISTIMETTLBLCACPAY, @OFSTHISTIMESTOCK, @OFSTHISSTOCKTAX, @ITDEDOFFSETOUTTAX, @ITDEDOFFSETINTAX, @ITDEDOFFSETTAXFREE, @OFFSETOUTTAX, @OFFSETINTAX, @THISTIMESTOCKPRICE, @THISSTCPRCTAX, @TTLITDEDSTCOUTTAX, @TTLITDEDSTCINTAX, @TTLITDEDSTCTAXFREE, @TTLSTOCKOUTERTAX, @TTLSTOCKINNERTAX, @THISSTCKPRICRGDS, @THISSTCPRCTAXRGDS, @TTLITDEDRETOUTTAX, @TTLITDEDRETINTAX, @TTLITDEDRETTAXFREE, @TTLRETOUTERTAX, @TTLRETINNERTAX, @THISSTCKPRICDIS, @THISSTCPRCTAXDIS, @TTLITDEDDISOUTTAX, @TTLITDEDDISINTAX, @TTLITDEDDISTAXFREE, @TTLDISOUTERTAX, @TTLDISINNERTAX, @THISRECVOFFSET, @THISRECVOFFSETTAX, @THISRECVOUTTAX, @THISRECVINTAX, @THISRECVTAXFREE, @THISRECVOUTERTAX, @THISRECVINNERTAX, @TAXADJUST, @BALANCEADJUST, @STCKTTLACCPAYBALANCE, @STCKTTL2TMBFBLACCPAY, @STCKTTL3TMBFBLACCPAY, @MONTHADDUPEXPDATE, @STMONCADDUPUPDDATE, @LAMONCADDUPUPDDATE, @STOCKSLIPCOUNT, @NONSTMNTAPPEARANCE, @NONSTMNTISDONE, @STMNTAPPEARANCE, @STMNTISDONE, @SUPPCTAXLAYCD, @SUPPLIERCONSTAXRATE, @FRACTIONPROCCD)", sqlConnection, sqlTransaction))
                #region [Insert文作成]
                sqlText += "INSERT INTO SUPLACCPAYRF" + Environment.NewLine;
                sqlText += " (CREATEDATETIMERF" + Environment.NewLine;
                sqlText += "    ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += "    ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "    ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += "    ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += "    ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += "    ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += "    ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += "    ,ADDUPSECCODERF" + Environment.NewLine;
                sqlText += "    ,PAYEECODERF" + Environment.NewLine;
                sqlText += "    ,PAYEENAMERF" + Environment.NewLine;
                sqlText += "    ,PAYEENAME2RF" + Environment.NewLine;
                sqlText += "    ,PAYEESNMRF" + Environment.NewLine;
                sqlText += "    ,SUPPLIERCDRF" + Environment.NewLine;
                sqlText += "    ,SUPPLIERNM1RF" + Environment.NewLine;
                sqlText += "    ,SUPPLIERNM2RF" + Environment.NewLine;
                sqlText += "    ,SUPPLIERSNMRF" + Environment.NewLine;
                sqlText += "    ,ADDUPDATERF" + Environment.NewLine;
                sqlText += "    ,ADDUPYEARMONTHRF" + Environment.NewLine;
                sqlText += "    ,LASTTIMEACCPAYRF" + Environment.NewLine;
                sqlText += "    ,THISTIMEFEEPAYNRMLRF" + Environment.NewLine;
                sqlText += "    ,THISTIMEDISPAYNRMLRF" + Environment.NewLine;
                sqlText += "    ,THISTIMEPAYNRMLRF" + Environment.NewLine;
                sqlText += "    ,THISTIMETTLBLCACPAYRF" + Environment.NewLine;
                sqlText += "    ,OFSTHISTIMESTOCKRF" + Environment.NewLine;
                sqlText += "    ,OFSTHISSTOCKTAXRF" + Environment.NewLine;
                sqlText += "    ,ITDEDOFFSETOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,ITDEDOFFSETINTAXRF" + Environment.NewLine;
                sqlText += "    ,ITDEDOFFSETTAXFREERF" + Environment.NewLine;
                sqlText += "    ,OFFSETOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,OFFSETINTAXRF" + Environment.NewLine;
                sqlText += "    ,THISTIMESTOCKPRICERF" + Environment.NewLine;
                sqlText += "    ,THISSTCPRCTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDSTCOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDSTCINTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDSTCTAXFREERF" + Environment.NewLine;
                sqlText += "    ,TTLSTOCKOUTERTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLSTOCKINNERTAXRF" + Environment.NewLine;
                sqlText += "    ,THISSTCKPRICRGDSRF" + Environment.NewLine;
                sqlText += "    ,THISSTCPRCTAXRGDSRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDRETOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDRETINTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDRETTAXFREERF" + Environment.NewLine;
                sqlText += "    ,TTLRETOUTERTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLRETINNERTAXRF" + Environment.NewLine;
                sqlText += "    ,THISSTCKPRICDISRF" + Environment.NewLine;
                sqlText += "    ,THISSTCPRCTAXDISRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDDISOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDDISINTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDDISTAXFREERF" + Environment.NewLine;
                sqlText += "    ,TTLDISOUTERTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLDISINNERTAXRF" + Environment.NewLine;
                sqlText += "    ,TAXADJUSTRF" + Environment.NewLine;
                sqlText += "    ,BALANCEADJUSTRF" + Environment.NewLine;
                sqlText += "    ,STCKTTLACCPAYBALANCERF" + Environment.NewLine;
                sqlText += "    ,STCKTTL2TMBFBLACCPAYRF" + Environment.NewLine;
                sqlText += "    ,STCKTTL3TMBFBLACCPAYRF" + Environment.NewLine;
                sqlText += "    ,MONTHADDUPEXPDATERF" + Environment.NewLine;
                sqlText += "    ,STMONCADDUPUPDDATERF" + Environment.NewLine;
                sqlText += "    ,LAMONCADDUPUPDDATERF" + Environment.NewLine;
                sqlText += "    ,STOCKSLIPCOUNTRF" + Environment.NewLine;
                sqlText += "    ,SUPPCTAXLAYCDRF" + Environment.NewLine;
                sqlText += "    ,SUPPLIERCONSTAXRATERF" + Environment.NewLine;
                sqlText += "    ,FRACTIONPROCCDRF" + Environment.NewLine;
                sqlText += " )" + Environment.NewLine;
                sqlText += " VALUES" + Environment.NewLine;
                sqlText += " (@CREATEDATETIME" + Environment.NewLine;
                sqlText += "    ,@UPDATEDATETIME" + Environment.NewLine;
                sqlText += "    ,@ENTERPRISECODE" + Environment.NewLine;
                sqlText += "    ,@FILEHEADERGUID" + Environment.NewLine;
                sqlText += "    ,@UPDEMPLOYEECODE" + Environment.NewLine;
                sqlText += "    ,@UPDASSEMBLYID1" + Environment.NewLine;
                sqlText += "    ,@UPDASSEMBLYID2" + Environment.NewLine;
                sqlText += "    ,@LOGICALDELETECODE" + Environment.NewLine;
                sqlText += "    ,@ADDUPSECCODE" + Environment.NewLine;
                sqlText += "    ,@PAYEECODE" + Environment.NewLine;
                sqlText += "    ,@PAYEENAME" + Environment.NewLine;
                sqlText += "    ,@PAYEENAME2" + Environment.NewLine;
                sqlText += "    ,@PAYEESNM" + Environment.NewLine;
                sqlText += "    ,@SUPPLIERCD" + Environment.NewLine;
                sqlText += "    ,@SUPPLIERNM1" + Environment.NewLine;
                sqlText += "    ,@SUPPLIERNM2" + Environment.NewLine;
                sqlText += "    ,@SUPPLIERSNM" + Environment.NewLine;
                sqlText += "    ,@ADDUPDATE" + Environment.NewLine;
                sqlText += "    ,@ADDUPYEARMONTH" + Environment.NewLine;
                sqlText += "    ,@LASTTIMEACCPAY" + Environment.NewLine;
                sqlText += "    ,@THISTIMEFEEPAYNRML" + Environment.NewLine;
                sqlText += "    ,@THISTIMEDISPAYNRML" + Environment.NewLine;
                sqlText += "    ,@THISTIMEPAYNRML" + Environment.NewLine;
                sqlText += "    ,@THISTIMETTLBLCACPAY" + Environment.NewLine;
                sqlText += "    ,@OFSTHISTIMESTOCK" + Environment.NewLine;
                sqlText += "    ,@OFSTHISSTOCKTAX" + Environment.NewLine;
                sqlText += "    ,@ITDEDOFFSETOUTTAX" + Environment.NewLine;
                sqlText += "    ,@ITDEDOFFSETINTAX" + Environment.NewLine;
                sqlText += "    ,@ITDEDOFFSETTAXFREE" + Environment.NewLine;
                sqlText += "    ,@OFFSETOUTTAX" + Environment.NewLine;
                sqlText += "    ,@OFFSETINTAX" + Environment.NewLine;
                sqlText += "    ,@THISTIMESTOCKPRICE" + Environment.NewLine;
                sqlText += "    ,@THISSTCPRCTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDSTCOUTTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDSTCINTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDSTCTAXFREE" + Environment.NewLine;
                sqlText += "    ,@TTLSTOCKOUTERTAX" + Environment.NewLine;
                sqlText += "    ,@TTLSTOCKINNERTAX" + Environment.NewLine;
                sqlText += "    ,@THISSTCKPRICRGDS" + Environment.NewLine;
                sqlText += "    ,@THISSTCPRCTAXRGDS" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDRETOUTTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDRETINTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDRETTAXFREE" + Environment.NewLine;
                sqlText += "    ,@TTLRETOUTERTAX" + Environment.NewLine;
                sqlText += "    ,@TTLRETINNERTAX" + Environment.NewLine;
                sqlText += "    ,@THISSTCKPRICDIS" + Environment.NewLine;
                sqlText += "    ,@THISSTCPRCTAXDIS" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDDISOUTTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDDISINTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDDISTAXFREE" + Environment.NewLine;
                sqlText += "    ,@TTLDISOUTERTAX" + Environment.NewLine;
                sqlText += "    ,@TTLDISINNERTAX" + Environment.NewLine;
                sqlText += "    ,@TAXADJUST" + Environment.NewLine;
                sqlText += "    ,@BALANCEADJUST" + Environment.NewLine;
                sqlText += "    ,@STCKTTLACCPAYBALANCE" + Environment.NewLine;
                sqlText += "    ,@STCKTTL2TMBFBLACCPAY" + Environment.NewLine;
                sqlText += "    ,@STCKTTL3TMBFBLACCPAY" + Environment.NewLine;
                sqlText += "    ,@MONTHADDUPEXPDATE" + Environment.NewLine;
                sqlText += "    ,@STMONCADDUPUPDDATE" + Environment.NewLine;
                sqlText += "    ,@LAMONCADDUPUPDDATE" + Environment.NewLine;
                sqlText += "    ,@STOCKSLIPCOUNT" + Environment.NewLine;
                sqlText += "    ,@SUPPCTAXLAYCD" + Environment.NewLine;
                sqlText += "    ,@SUPPLIERCONSTAXRATE" + Environment.NewLine;
                sqlText += "    ,@FRACTIONPROCCD" + Environment.NewLine;
                sqlText += " )" + Environment.NewLine;
                #endregion  //[Insert文作成]

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                // 2008.07.28 upd end -------------------------------------------------<<
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //登録ヘッダ情報を設定
                    object obj = (object)this;
                    IFileHeader flhd = (IFileHeader)suplAccPayWork;
                    FileHeader fileHeader = new FileHeader(obj);
                    fileHeader.SetInsertHeader(ref flhd, obj);

                    #region Parameterオブジェクト作成
                    SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);
                    SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);
                    SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);
                    SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);
                    SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                    SqlParameter paraAddUpSecCode = sqlCommand.Parameters.Add("@ADDUPSECCODE", SqlDbType.NChar);
                    SqlParameter paraPayeeCode = sqlCommand.Parameters.Add("@PAYEECODE", SqlDbType.Int);
                    SqlParameter paraPayeeName = sqlCommand.Parameters.Add("@PAYEENAME", SqlDbType.NVarChar);
                    SqlParameter paraPayeeName2 = sqlCommand.Parameters.Add("@PAYEENAME2", SqlDbType.NVarChar);
                    SqlParameter paraPayeeSnm = sqlCommand.Parameters.Add("@PAYEESNM", SqlDbType.NVarChar);
                    SqlParameter paraSupplierCd = sqlCommand.Parameters.Add("@SUPPLIERCD", SqlDbType.Int);
                    SqlParameter paraSupplierNm1 = sqlCommand.Parameters.Add("@SUPPLIERNM1", SqlDbType.NVarChar);
                    SqlParameter paraSupplierNm2 = sqlCommand.Parameters.Add("@SUPPLIERNM2", SqlDbType.NVarChar);
                    SqlParameter paraSupplierSnm = sqlCommand.Parameters.Add("@SUPPLIERSNM", SqlDbType.NVarChar);
                    SqlParameter paraAddUpDate = sqlCommand.Parameters.Add("@ADDUPDATE", SqlDbType.Int);
                    SqlParameter paraAddUpYearMonth = sqlCommand.Parameters.Add("@ADDUPYEARMONTH", SqlDbType.Int);
                    SqlParameter paraLastTimeAccPay = sqlCommand.Parameters.Add("@LASTTIMEACCPAY", SqlDbType.BigInt);
                    SqlParameter paraThisTimeFeePayNrml = sqlCommand.Parameters.Add("@THISTIMEFEEPAYNRML", SqlDbType.BigInt);
                    SqlParameter paraThisTimeDisPayNrml = sqlCommand.Parameters.Add("@THISTIMEDISPAYNRML", SqlDbType.BigInt);
                    SqlParameter paraThisTimePayNrml = sqlCommand.Parameters.Add("@THISTIMEPAYNRML", SqlDbType.BigInt);
                    SqlParameter paraThisTimeTtlBlcAcPay = sqlCommand.Parameters.Add("@THISTIMETTLBLCACPAY", SqlDbType.BigInt);
                    SqlParameter paraOfsThisTimeStock = sqlCommand.Parameters.Add("@OFSTHISTIMESTOCK", SqlDbType.BigInt);
                    SqlParameter paraOfsThisStockTax = sqlCommand.Parameters.Add("@OFSTHISSTOCKTAX", SqlDbType.BigInt);
                    SqlParameter paraItdedOffsetOutTax = sqlCommand.Parameters.Add("@ITDEDOFFSETOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraItdedOffsetInTax = sqlCommand.Parameters.Add("@ITDEDOFFSETINTAX", SqlDbType.BigInt);
                    SqlParameter paraItdedOffsetTaxFree = sqlCommand.Parameters.Add("@ITDEDOFFSETTAXFREE", SqlDbType.BigInt);
                    SqlParameter paraOffsetOutTax = sqlCommand.Parameters.Add("@OFFSETOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraOffsetInTax = sqlCommand.Parameters.Add("@OFFSETINTAX", SqlDbType.BigInt);
                    SqlParameter paraThisTimeStockPrice = sqlCommand.Parameters.Add("@THISTIMESTOCKPRICE", SqlDbType.BigInt);
                    SqlParameter paraThisStcPrcTax = sqlCommand.Parameters.Add("@THISSTCPRCTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedStcOutTax = sqlCommand.Parameters.Add("@TTLITDEDSTCOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedStcInTax = sqlCommand.Parameters.Add("@TTLITDEDSTCINTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedStcTaxFree = sqlCommand.Parameters.Add("@TTLITDEDSTCTAXFREE", SqlDbType.BigInt);
                    SqlParameter paraTtlStockOuterTax = sqlCommand.Parameters.Add("@TTLSTOCKOUTERTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlStockInnerTax = sqlCommand.Parameters.Add("@TTLSTOCKINNERTAX", SqlDbType.BigInt);
                    SqlParameter paraThisStckPricRgds = sqlCommand.Parameters.Add("@THISSTCKPRICRGDS", SqlDbType.BigInt);
                    SqlParameter paraThisStcPrcTaxRgds = sqlCommand.Parameters.Add("@THISSTCPRCTAXRGDS", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedRetOutTax = sqlCommand.Parameters.Add("@TTLITDEDRETOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedRetInTax = sqlCommand.Parameters.Add("@TTLITDEDRETINTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedRetTaxFree = sqlCommand.Parameters.Add("@TTLITDEDRETTAXFREE", SqlDbType.BigInt);
                    SqlParameter paraTtlRetOuterTax = sqlCommand.Parameters.Add("@TTLRETOUTERTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlRetInnerTax = sqlCommand.Parameters.Add("@TTLRETINNERTAX", SqlDbType.BigInt);
                    SqlParameter paraThisStckPricDis = sqlCommand.Parameters.Add("@THISSTCKPRICDIS", SqlDbType.BigInt);
                    SqlParameter paraThisStcPrcTaxDis = sqlCommand.Parameters.Add("@THISSTCPRCTAXDIS", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedDisOutTax = sqlCommand.Parameters.Add("@TTLITDEDDISOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedDisInTax = sqlCommand.Parameters.Add("@TTLITDEDDISINTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedDisTaxFree = sqlCommand.Parameters.Add("@TTLITDEDDISTAXFREE", SqlDbType.BigInt);
                    SqlParameter paraTtlDisOuterTax = sqlCommand.Parameters.Add("@TTLDISOUTERTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlDisInnerTax = sqlCommand.Parameters.Add("@TTLDISINNERTAX", SqlDbType.BigInt);
                    SqlParameter paraTaxAdjust = sqlCommand.Parameters.Add("@TAXADJUST", SqlDbType.BigInt);
                    SqlParameter paraBalanceAdjust = sqlCommand.Parameters.Add("@BALANCEADJUST", SqlDbType.BigInt);
                    SqlParameter paraStckTtlAccPayBalance = sqlCommand.Parameters.Add("@STCKTTLACCPAYBALANCE", SqlDbType.BigInt);
                    SqlParameter paraStckTtl2TmBfBlAccPay = sqlCommand.Parameters.Add("@STCKTTL2TMBFBLACCPAY", SqlDbType.BigInt);
                    SqlParameter paraStckTtl3TmBfBlAccPay = sqlCommand.Parameters.Add("@STCKTTL3TMBFBLACCPAY", SqlDbType.BigInt);
                    SqlParameter paraMonthAddUpExpDate = sqlCommand.Parameters.Add("@MONTHADDUPEXPDATE", SqlDbType.Int);
                    SqlParameter paraStMonCAddUpUpdDate = sqlCommand.Parameters.Add("@STMONCADDUPUPDDATE", SqlDbType.Int);
                    SqlParameter paraLaMonCAddUpUpdDate = sqlCommand.Parameters.Add("@LAMONCADDUPUPDDATE", SqlDbType.Int);
                    SqlParameter paraStockSlipCount = sqlCommand.Parameters.Add("@STOCKSLIPCOUNT", SqlDbType.Int);
                    SqlParameter paraSuppCTaxLayCd = sqlCommand.Parameters.Add("@SUPPCTAXLAYCD", SqlDbType.Int);
                    SqlParameter paraSupplierConsTaxRate = sqlCommand.Parameters.Add("@SUPPLIERCONSTAXRATE", SqlDbType.Float);
                    SqlParameter paraFractionProcCd = sqlCommand.Parameters.Add("@FRACTIONPROCCD", SqlDbType.Int);
                    #endregion

                    if (InsertDiv == 0) // 集計レコード
                    {
                        #region Parameterオブジェクト設定 集計レコード
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(suplAccPayWork.CreateDateTime);
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(suplAccPayWork.UpdateDateTime);
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(suplAccPayWork.FileHeaderGuid);
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.UpdEmployeeCode);
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(suplAccPayWork.UpdAssemblyId1);
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(suplAccPayWork.UpdAssemblyId2);
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.LogicalDeleteCode);
                        paraAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);
                        paraPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
                        paraPayeeName.Value = SqlDataMediator.SqlSetString(suplAccPayWork.PayeeName);
                        paraPayeeName2.Value = SqlDataMediator.SqlSetString(suplAccPayWork.PayeeName2);
                        paraPayeeSnm.Value = SqlDataMediator.SqlSetString(suplAccPayWork.PayeeSnm);
                        // 未セット項目 >>>
                        paraSupplierCd.Value = 0;
                        paraSupplierNm1.Value = string.Empty;
                        paraSupplierNm2.Value = string.Empty;
                        paraSupplierSnm.Value = string.Empty;
                        // 未セット項目
                        paraAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                        paraAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(suplAccPayWork.AddUpYearMonth);
                        paraLastTimeAccPay.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.LastTimeAccPay);
                        paraThisTimeFeePayNrml.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisTimeFeePayNrml);
                        paraThisTimeDisPayNrml.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisTimeDisPayNrml);
                        paraThisTimePayNrml.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisTimePayNrml);
                        paraThisTimeTtlBlcAcPay.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisTimeTtlBlcAcPay);
                        paraOfsThisTimeStock.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.OfsThisTimeStock);
                        paraOfsThisStockTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.OfsThisStockTax);
                        paraItdedOffsetOutTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ItdedOffsetOutTax);
                        paraItdedOffsetInTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ItdedOffsetInTax);
                        paraItdedOffsetTaxFree.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ItdedOffsetTaxFree);
                        paraOffsetOutTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.OffsetOutTax);
                        paraOffsetInTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.OffsetInTax);
                        paraThisTimeStockPrice.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisTimeStockPrice);
                        paraThisStcPrcTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisStcPrcTax);
                        paraTtlItdedStcOutTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedStcOutTax);
                        paraTtlItdedStcInTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedStcInTax);
                        paraTtlItdedStcTaxFree.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedStcTaxFree);
                        paraTtlStockOuterTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlStockOuterTax);
                        paraTtlStockInnerTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlStockInnerTax);
                        paraThisStckPricRgds.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisStckPricRgds);
                        paraThisStcPrcTaxRgds.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisStcPrcTaxRgds);
                        paraTtlItdedRetOutTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedRetOutTax);
                        paraTtlItdedRetInTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedRetInTax);
                        paraTtlItdedRetTaxFree.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedRetTaxFree);
                        paraTtlRetOuterTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlRetOuterTax);
                        paraTtlRetInnerTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlRetInnerTax);
                        paraThisStckPricDis.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisStckPricDis);
                        paraThisStcPrcTaxDis.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisStcPrcTaxDis);
                        paraTtlItdedDisOutTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedDisOutTax);
                        paraTtlItdedDisInTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedDisInTax);
                        paraTtlItdedDisTaxFree.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedDisTaxFree);
                        paraTtlDisOuterTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlDisOuterTax);
                        paraTtlDisInnerTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlDisInnerTax);
                        // 未セット項目 >>>
                        paraTaxAdjust.Value = 0;
                        paraBalanceAdjust.Value = 0;
                        // 未セット項目 <<<
                        paraStckTtlAccPayBalance.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.StckTtlAccPayBalance);

                        // 未セット項目 >>>
                        paraStckTtl2TmBfBlAccPay.Value = 0;
                        paraStckTtl3TmBfBlAccPay.Value = 0;
                        // 未セット項目 <<<
                        paraMonthAddUpExpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.MonthAddUpExpDate);
                        paraStMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.StMonCAddUpUpdDate);
                        paraLaMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.LaMonCAddUpUpdDate);
                        paraStockSlipCount.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.StockSlipCount);
                        paraSuppCTaxLayCd.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SuppCTaxLayCd);
                        paraSupplierConsTaxRate.Value = SqlDataMediator.SqlSetDouble(suplAccPayWork.SupplierConsTaxRate);
                        paraFractionProcCd.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.FractionProcCd);
                        #endregion
                    }
                    else if (InsertDiv == 1) // 親子レコード
                    {
                        #region Parameterオブジェクト設定 親子レコード
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(suplAccPayWork.CreateDateTime);
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(suplAccPayWork.UpdateDateTime);
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(suplAccPayWork.FileHeaderGuid);
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.UpdEmployeeCode);
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(suplAccPayWork.UpdAssemblyId1);
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(suplAccPayWork.UpdAssemblyId2);
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.LogicalDeleteCode);
                        paraAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);
                        paraPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
                        paraPayeeName.Value = SqlDataMediator.SqlSetString(suplAccPayWork.PayeeName);
                        paraPayeeName2.Value = SqlDataMediator.SqlSetString(suplAccPayWork.PayeeName2);
                        paraPayeeSnm.Value = SqlDataMediator.SqlSetString(suplAccPayWork.PayeeSnm);
                        paraSupplierCd.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);
                        paraSupplierNm1.Value = SqlDataMediator.SqlSetString(suplAccPayWork.SupplierNm1);
                        paraSupplierNm2.Value = SqlDataMediator.SqlSetString(suplAccPayWork.SupplierNm2);
                        paraSupplierSnm.Value = SqlDataMediator.SqlSetString(suplAccPayWork.SupplierSnm);
                        paraAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                        paraAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(suplAccPayWork.AddUpYearMonth);
                        // 未セット項目 >>>
                        paraLastTimeAccPay.Value = 0;
                        paraThisTimeFeePayNrml.Value = 0;
                        paraThisTimeDisPayNrml.Value = 0;
                        paraThisTimePayNrml.Value = 0;
                        paraThisTimeTtlBlcAcPay.Value = 0;
                        // 未セット項目 <<<
                        paraOfsThisTimeStock.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.OfsThisTimeStock);
                        paraOfsThisStockTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.OfsThisStockTax);
                        paraItdedOffsetOutTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ItdedOffsetOutTax);
                        paraItdedOffsetInTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ItdedOffsetInTax);
                        paraItdedOffsetTaxFree.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ItdedOffsetTaxFree);
                        paraOffsetOutTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.OffsetOutTax);
                        paraOffsetInTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.OffsetInTax);
                        paraThisTimeStockPrice.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisTimeStockPrice);
                        paraThisStcPrcTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisStcPrcTax);
                        paraTtlItdedStcOutTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedStcOutTax);
                        paraTtlItdedStcInTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedStcInTax);
                        paraTtlItdedStcTaxFree.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedStcTaxFree);
                        paraTtlStockOuterTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlStockOuterTax);
                        paraTtlStockInnerTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlStockInnerTax);
                        paraThisStckPricRgds.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisStckPricRgds);
                        paraThisStcPrcTaxRgds.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisStcPrcTaxRgds);
                        paraTtlItdedRetOutTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedRetOutTax);
                        paraTtlItdedRetInTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedRetInTax);
                        paraTtlItdedRetTaxFree.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedRetTaxFree);
                        paraTtlRetOuterTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlRetOuterTax);
                        paraTtlRetInnerTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlRetInnerTax);
                        paraThisStckPricDis.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisStckPricDis);
                        paraThisStcPrcTaxDis.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisStcPrcTaxDis);
                        paraTtlItdedDisOutTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedDisOutTax);
                        paraTtlItdedDisInTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedDisInTax);
                        paraTtlItdedDisTaxFree.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedDisTaxFree);
                        paraTtlDisOuterTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlDisOuterTax);
                        paraTtlDisInnerTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlDisInnerTax);
                        // 未セット項目 >>>
                        paraTaxAdjust.Value = 0;
                        paraBalanceAdjust.Value = 0;
                        paraStckTtlAccPayBalance.Value = 0;
                        paraStckTtl2TmBfBlAccPay.Value = 0;
                        paraStckTtl3TmBfBlAccPay.Value = 0;
                        // 未セット項目 <<<
                        paraMonthAddUpExpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.MonthAddUpExpDate);
                        paraStMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.StMonCAddUpUpdDate);
                        paraLaMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.LaMonCAddUpUpdDate);
                        paraStockSlipCount.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.StockSlipCount);
                        paraSuppCTaxLayCd.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SuppCTaxLayCd);
                        paraSupplierConsTaxRate.Value = SqlDataMediator.SqlSetDouble(suplAccPayWork.SupplierConsTaxRate);
                        paraFractionProcCd.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.FractionProcCd);
                        #endregion

                    }

                    sqlCommand.ExecuteNonQuery();
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                return base.WriteSQLErrorLog(ex);
            }
            return (int)ConstantManagement.DB_Status.ctDB_NORMAL;
        }

        // --- ADD 2012/09/13 ----------->>>>>
        /// <summary>
        /// 計上拠点別仕入先買掛金額マスタを更新します。
        /// </summary>
        /// <param name="suplAccPayWorkList">仕入先買掛金額マスタ更新List</param>
        /// <param name="suplAccPayChildWorkList">仕入先買掛金額マスタ子レコード更新List</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 計上拠点別仕入先買掛金額マスタを更新します。</br>
        /// <br>Programmer : FSI佐々木 貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int WriteSuplAccPayByAddUpSecCode(ref ArrayList suplAccPayWorkList, ref ArrayList suplAccPayChildWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            //Selectコマンドの生成
            try
            {
                SuplAccPayWork suplAccPayWork = new SuplAccPayWork();
                String sqlText = string.Empty;

                for (int i = 0; i < suplAccPayWorkList.Count; i++)
                {
                    #region レコード削除
                    suplAccPayWork = suplAccPayWorkList[i] as SuplAccPayWork;
                    sqlText = String.Empty;
                    sqlText += "DELETE" + Environment.NewLine;
                    sqlText += "FROM SUPLACCPAYRF" + Environment.NewLine;
                    sqlText += "WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += " AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                    sqlText += " AND PAYEECODERF=@FINDPAYEECODERF" + Environment.NewLine;
                    sqlText += " AND ADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;

                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                    {
                        sqlCommand.CommandTimeout = TimeOut;

                        //Prameterオブジェクトの作成
                        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                        SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDPAYEECODERF", SqlDbType.Int);

                        //Parameterオブジェクトへ値設定
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);
                        findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                        findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);

                        sqlCommand.ExecuteNonQuery();
                    }
                    #endregion レコード削除

                    // 集計レコード
                    status = InsertSuplAccPayByAddUpSecCode(suplAccPayWork, ref sqlConnection, ref sqlTransaction, 0);
                    if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        return status;

                    // 親レコード
                    status = InsertSuplAccPayByAddUpSecCode(suplAccPayWork, ref sqlConnection, ref sqlTransaction, 1);
                    if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        return status;
                }

                #region 子レコードInsert
                SuplAccPayWork suplAccPayChildWork = new SuplAccPayWork();
                for (int i = 0; i < suplAccPayChildWorkList.Count; i++)
                {
                    suplAccPayChildWork = suplAccPayChildWorkList[i] as SuplAccPayWork;
                    status = InsertSuplAccPayByAddUpSecCode(suplAccPayChildWork, ref sqlConnection, ref sqlTransaction, 2);
                    if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        return status;
                }
                #endregion

            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 計上拠点別仕入先買掛金額マスタレコードを挿入します。
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <param name="InsertDiv">挿入区分（0：集計レコード、1:親レコード、2:子レコード）</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 計上拠点別仕入先買掛金額マスタレコードを挿入します。</br>
        /// <br>Programmer : FSI佐々木 貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int InsertSuplAccPayByAddUpSecCode(SuplAccPayWork suplAccPayWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction, int InsertDiv)
        {
            string sqlText = string.Empty;

            try
            {
                #region [Insert文作成]
                sqlText += "INSERT INTO SUPLACCPAYRF" + Environment.NewLine;
                sqlText += " (CREATEDATETIMERF" + Environment.NewLine;
                sqlText += "    ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += "    ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "    ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += "    ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += "    ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += "    ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += "    ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += "    ,ADDUPSECCODERF" + Environment.NewLine;
                sqlText += "    ,PAYEECODERF" + Environment.NewLine;
                sqlText += "    ,PAYEENAMERF" + Environment.NewLine;
                sqlText += "    ,PAYEENAME2RF" + Environment.NewLine;
                sqlText += "    ,PAYEESNMRF" + Environment.NewLine;
                sqlText += "    ,SUPPLIERCDRF" + Environment.NewLine;
                sqlText += "    ,SUPPLIERNM1RF" + Environment.NewLine;
                sqlText += "    ,SUPPLIERNM2RF" + Environment.NewLine;
                sqlText += "    ,SUPPLIERSNMRF" + Environment.NewLine;
                sqlText += "    ,ADDUPDATERF" + Environment.NewLine;
                sqlText += "    ,ADDUPYEARMONTHRF" + Environment.NewLine;
                sqlText += "    ,LASTTIMEACCPAYRF" + Environment.NewLine;
                sqlText += "    ,THISTIMEFEEPAYNRMLRF" + Environment.NewLine;
                sqlText += "    ,THISTIMEDISPAYNRMLRF" + Environment.NewLine;
                sqlText += "    ,THISTIMEPAYNRMLRF" + Environment.NewLine;
                sqlText += "    ,THISTIMETTLBLCACPAYRF" + Environment.NewLine;
                sqlText += "    ,OFSTHISTIMESTOCKRF" + Environment.NewLine;
                sqlText += "    ,OFSTHISSTOCKTAXRF" + Environment.NewLine;
                sqlText += "    ,ITDEDOFFSETOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,ITDEDOFFSETINTAXRF" + Environment.NewLine;
                sqlText += "    ,ITDEDOFFSETTAXFREERF" + Environment.NewLine;
                sqlText += "    ,OFFSETOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,OFFSETINTAXRF" + Environment.NewLine;
                sqlText += "    ,THISTIMESTOCKPRICERF" + Environment.NewLine;
                sqlText += "    ,THISSTCPRCTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDSTCOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDSTCINTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDSTCTAXFREERF" + Environment.NewLine;
                sqlText += "    ,TTLSTOCKOUTERTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLSTOCKINNERTAXRF" + Environment.NewLine;
                sqlText += "    ,THISSTCKPRICRGDSRF" + Environment.NewLine;
                sqlText += "    ,THISSTCPRCTAXRGDSRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDRETOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDRETINTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDRETTAXFREERF" + Environment.NewLine;
                sqlText += "    ,TTLRETOUTERTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLRETINNERTAXRF" + Environment.NewLine;
                sqlText += "    ,THISSTCKPRICDISRF" + Environment.NewLine;
                sqlText += "    ,THISSTCPRCTAXDISRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDDISOUTTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDDISINTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLITDEDDISTAXFREERF" + Environment.NewLine;
                sqlText += "    ,TTLDISOUTERTAXRF" + Environment.NewLine;
                sqlText += "    ,TTLDISINNERTAXRF" + Environment.NewLine;
                sqlText += "    ,TAXADJUSTRF" + Environment.NewLine;
                sqlText += "    ,BALANCEADJUSTRF" + Environment.NewLine;
                sqlText += "    ,STCKTTLACCPAYBALANCERF" + Environment.NewLine;
                sqlText += "    ,STCKTTL2TMBFBLACCPAYRF" + Environment.NewLine;
                sqlText += "    ,STCKTTL3TMBFBLACCPAYRF" + Environment.NewLine;
                sqlText += "    ,MONTHADDUPEXPDATERF" + Environment.NewLine;
                sqlText += "    ,STMONCADDUPUPDDATERF" + Environment.NewLine;
                sqlText += "    ,LAMONCADDUPUPDDATERF" + Environment.NewLine;
                sqlText += "    ,STOCKSLIPCOUNTRF" + Environment.NewLine;
                sqlText += "    ,SUPPCTAXLAYCDRF" + Environment.NewLine;
                sqlText += "    ,SUPPLIERCONSTAXRATERF" + Environment.NewLine;
                sqlText += "    ,FRACTIONPROCCDRF" + Environment.NewLine;
                sqlText += " )" + Environment.NewLine;
                sqlText += " VALUES" + Environment.NewLine;
                sqlText += " (@CREATEDATETIME" + Environment.NewLine;
                sqlText += "    ,@UPDATEDATETIME" + Environment.NewLine;
                sqlText += "    ,@ENTERPRISECODE" + Environment.NewLine;
                sqlText += "    ,@FILEHEADERGUID" + Environment.NewLine;
                sqlText += "    ,@UPDEMPLOYEECODE" + Environment.NewLine;
                sqlText += "    ,@UPDASSEMBLYID1" + Environment.NewLine;
                sqlText += "    ,@UPDASSEMBLYID2" + Environment.NewLine;
                sqlText += "    ,@LOGICALDELETECODE" + Environment.NewLine;
                sqlText += "    ,@ADDUPSECCODE" + Environment.NewLine;
                sqlText += "    ,@PAYEECODE" + Environment.NewLine;
                sqlText += "    ,@PAYEENAME" + Environment.NewLine;
                sqlText += "    ,@PAYEENAME2" + Environment.NewLine;
                sqlText += "    ,@PAYEESNM" + Environment.NewLine;
                sqlText += "    ,@SUPPLIERCD" + Environment.NewLine;
                sqlText += "    ,@SUPPLIERNM1" + Environment.NewLine;
                sqlText += "    ,@SUPPLIERNM2" + Environment.NewLine;
                sqlText += "    ,@SUPPLIERSNM" + Environment.NewLine;
                sqlText += "    ,@ADDUPDATE" + Environment.NewLine;
                sqlText += "    ,@ADDUPYEARMONTH" + Environment.NewLine;
                sqlText += "    ,@LASTTIMEACCPAY" + Environment.NewLine;
                sqlText += "    ,@THISTIMEFEEPAYNRML" + Environment.NewLine;
                sqlText += "    ,@THISTIMEDISPAYNRML" + Environment.NewLine;
                sqlText += "    ,@THISTIMEPAYNRML" + Environment.NewLine;
                sqlText += "    ,@THISTIMETTLBLCACPAY" + Environment.NewLine;
                sqlText += "    ,@OFSTHISTIMESTOCK" + Environment.NewLine;
                sqlText += "    ,@OFSTHISSTOCKTAX" + Environment.NewLine;
                sqlText += "    ,@ITDEDOFFSETOUTTAX" + Environment.NewLine;
                sqlText += "    ,@ITDEDOFFSETINTAX" + Environment.NewLine;
                sqlText += "    ,@ITDEDOFFSETTAXFREE" + Environment.NewLine;
                sqlText += "    ,@OFFSETOUTTAX" + Environment.NewLine;
                sqlText += "    ,@OFFSETINTAX" + Environment.NewLine;
                sqlText += "    ,@THISTIMESTOCKPRICE" + Environment.NewLine;
                sqlText += "    ,@THISSTCPRCTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDSTCOUTTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDSTCINTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDSTCTAXFREE" + Environment.NewLine;
                sqlText += "    ,@TTLSTOCKOUTERTAX" + Environment.NewLine;
                sqlText += "    ,@TTLSTOCKINNERTAX" + Environment.NewLine;
                sqlText += "    ,@THISSTCKPRICRGDS" + Environment.NewLine;
                sqlText += "    ,@THISSTCPRCTAXRGDS" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDRETOUTTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDRETINTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDRETTAXFREE" + Environment.NewLine;
                sqlText += "    ,@TTLRETOUTERTAX" + Environment.NewLine;
                sqlText += "    ,@TTLRETINNERTAX" + Environment.NewLine;
                sqlText += "    ,@THISSTCKPRICDIS" + Environment.NewLine;
                sqlText += "    ,@THISSTCPRCTAXDIS" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDDISOUTTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDDISINTAX" + Environment.NewLine;
                sqlText += "    ,@TTLITDEDDISTAXFREE" + Environment.NewLine;
                sqlText += "    ,@TTLDISOUTERTAX" + Environment.NewLine;
                sqlText += "    ,@TTLDISINNERTAX" + Environment.NewLine;
                sqlText += "    ,@TAXADJUST" + Environment.NewLine;
                sqlText += "    ,@BALANCEADJUST" + Environment.NewLine;
                sqlText += "    ,@STCKTTLACCPAYBALANCE" + Environment.NewLine;
                sqlText += "    ,@STCKTTL2TMBFBLACCPAY" + Environment.NewLine;
                sqlText += "    ,@STCKTTL3TMBFBLACCPAY" + Environment.NewLine;
                sqlText += "    ,@MONTHADDUPEXPDATE" + Environment.NewLine;
                sqlText += "    ,@STMONCADDUPUPDDATE" + Environment.NewLine;
                sqlText += "    ,@LAMONCADDUPUPDDATE" + Environment.NewLine;
                sqlText += "    ,@STOCKSLIPCOUNT" + Environment.NewLine;
                sqlText += "    ,@SUPPCTAXLAYCD" + Environment.NewLine;
                sqlText += "    ,@SUPPLIERCONSTAXRATE" + Environment.NewLine;
                sqlText += "    ,@FRACTIONPROCCD" + Environment.NewLine;
                sqlText += " )" + Environment.NewLine;
                #endregion  //[Insert文作成]

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;

                    //登録ヘッダ情報を設定
                    object obj = (object)this;
                    IFileHeader flhd = (IFileHeader)suplAccPayWork;
                    FileHeader fileHeader = new FileHeader(obj);
                    fileHeader.SetInsertHeader(ref flhd, obj);

                    #region Parameterオブジェクト作成
                    SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);
                    SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);
                    SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);
                    SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);
                    SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                    SqlParameter paraAddUpSecCode = sqlCommand.Parameters.Add("@ADDUPSECCODE", SqlDbType.NChar);
                    SqlParameter paraPayeeCode = sqlCommand.Parameters.Add("@PAYEECODE", SqlDbType.Int);
                    SqlParameter paraPayeeName = sqlCommand.Parameters.Add("@PAYEENAME", SqlDbType.NVarChar);
                    SqlParameter paraPayeeName2 = sqlCommand.Parameters.Add("@PAYEENAME2", SqlDbType.NVarChar);
                    SqlParameter paraPayeeSnm = sqlCommand.Parameters.Add("@PAYEESNM", SqlDbType.NVarChar);
                    SqlParameter paraSupplierCd = sqlCommand.Parameters.Add("@SUPPLIERCD", SqlDbType.Int);
                    SqlParameter paraSupplierNm1 = sqlCommand.Parameters.Add("@SUPPLIERNM1", SqlDbType.NVarChar);
                    SqlParameter paraSupplierNm2 = sqlCommand.Parameters.Add("@SUPPLIERNM2", SqlDbType.NVarChar);
                    SqlParameter paraSupplierSnm = sqlCommand.Parameters.Add("@SUPPLIERSNM", SqlDbType.NVarChar);
                    SqlParameter paraAddUpDate = sqlCommand.Parameters.Add("@ADDUPDATE", SqlDbType.Int);
                    SqlParameter paraAddUpYearMonth = sqlCommand.Parameters.Add("@ADDUPYEARMONTH", SqlDbType.Int);
                    SqlParameter paraLastTimeAccPay = sqlCommand.Parameters.Add("@LASTTIMEACCPAY", SqlDbType.BigInt);
                    SqlParameter paraThisTimeFeePayNrml = sqlCommand.Parameters.Add("@THISTIMEFEEPAYNRML", SqlDbType.BigInt);
                    SqlParameter paraThisTimeDisPayNrml = sqlCommand.Parameters.Add("@THISTIMEDISPAYNRML", SqlDbType.BigInt);
                    SqlParameter paraThisTimePayNrml = sqlCommand.Parameters.Add("@THISTIMEPAYNRML", SqlDbType.BigInt);
                    SqlParameter paraThisTimeTtlBlcAcPay = sqlCommand.Parameters.Add("@THISTIMETTLBLCACPAY", SqlDbType.BigInt);
                    SqlParameter paraOfsThisTimeStock = sqlCommand.Parameters.Add("@OFSTHISTIMESTOCK", SqlDbType.BigInt);
                    SqlParameter paraOfsThisStockTax = sqlCommand.Parameters.Add("@OFSTHISSTOCKTAX", SqlDbType.BigInt);
                    SqlParameter paraItdedOffsetOutTax = sqlCommand.Parameters.Add("@ITDEDOFFSETOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraItdedOffsetInTax = sqlCommand.Parameters.Add("@ITDEDOFFSETINTAX", SqlDbType.BigInt);
                    SqlParameter paraItdedOffsetTaxFree = sqlCommand.Parameters.Add("@ITDEDOFFSETTAXFREE", SqlDbType.BigInt);
                    SqlParameter paraOffsetOutTax = sqlCommand.Parameters.Add("@OFFSETOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraOffsetInTax = sqlCommand.Parameters.Add("@OFFSETINTAX", SqlDbType.BigInt);
                    SqlParameter paraThisTimeStockPrice = sqlCommand.Parameters.Add("@THISTIMESTOCKPRICE", SqlDbType.BigInt);
                    SqlParameter paraThisStcPrcTax = sqlCommand.Parameters.Add("@THISSTCPRCTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedStcOutTax = sqlCommand.Parameters.Add("@TTLITDEDSTCOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedStcInTax = sqlCommand.Parameters.Add("@TTLITDEDSTCINTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedStcTaxFree = sqlCommand.Parameters.Add("@TTLITDEDSTCTAXFREE", SqlDbType.BigInt);
                    SqlParameter paraTtlStockOuterTax = sqlCommand.Parameters.Add("@TTLSTOCKOUTERTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlStockInnerTax = sqlCommand.Parameters.Add("@TTLSTOCKINNERTAX", SqlDbType.BigInt);
                    SqlParameter paraThisStckPricRgds = sqlCommand.Parameters.Add("@THISSTCKPRICRGDS", SqlDbType.BigInt);
                    SqlParameter paraThisStcPrcTaxRgds = sqlCommand.Parameters.Add("@THISSTCPRCTAXRGDS", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedRetOutTax = sqlCommand.Parameters.Add("@TTLITDEDRETOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedRetInTax = sqlCommand.Parameters.Add("@TTLITDEDRETINTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedRetTaxFree = sqlCommand.Parameters.Add("@TTLITDEDRETTAXFREE", SqlDbType.BigInt);
                    SqlParameter paraTtlRetOuterTax = sqlCommand.Parameters.Add("@TTLRETOUTERTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlRetInnerTax = sqlCommand.Parameters.Add("@TTLRETINNERTAX", SqlDbType.BigInt);
                    SqlParameter paraThisStckPricDis = sqlCommand.Parameters.Add("@THISSTCKPRICDIS", SqlDbType.BigInt);
                    SqlParameter paraThisStcPrcTaxDis = sqlCommand.Parameters.Add("@THISSTCPRCTAXDIS", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedDisOutTax = sqlCommand.Parameters.Add("@TTLITDEDDISOUTTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedDisInTax = sqlCommand.Parameters.Add("@TTLITDEDDISINTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlItdedDisTaxFree = sqlCommand.Parameters.Add("@TTLITDEDDISTAXFREE", SqlDbType.BigInt);
                    SqlParameter paraTtlDisOuterTax = sqlCommand.Parameters.Add("@TTLDISOUTERTAX", SqlDbType.BigInt);
                    SqlParameter paraTtlDisInnerTax = sqlCommand.Parameters.Add("@TTLDISINNERTAX", SqlDbType.BigInt);
                    SqlParameter paraTaxAdjust = sqlCommand.Parameters.Add("@TAXADJUST", SqlDbType.BigInt);
                    SqlParameter paraBalanceAdjust = sqlCommand.Parameters.Add("@BALANCEADJUST", SqlDbType.BigInt);
                    SqlParameter paraStckTtlAccPayBalance = sqlCommand.Parameters.Add("@STCKTTLACCPAYBALANCE", SqlDbType.BigInt);
                    SqlParameter paraStckTtl2TmBfBlAccPay = sqlCommand.Parameters.Add("@STCKTTL2TMBFBLACCPAY", SqlDbType.BigInt);
                    SqlParameter paraStckTtl3TmBfBlAccPay = sqlCommand.Parameters.Add("@STCKTTL3TMBFBLACCPAY", SqlDbType.BigInt);
                    SqlParameter paraMonthAddUpExpDate = sqlCommand.Parameters.Add("@MONTHADDUPEXPDATE", SqlDbType.Int);
                    SqlParameter paraStMonCAddUpUpdDate = sqlCommand.Parameters.Add("@STMONCADDUPUPDDATE", SqlDbType.Int);
                    SqlParameter paraLaMonCAddUpUpdDate = sqlCommand.Parameters.Add("@LAMONCADDUPUPDDATE", SqlDbType.Int);
                    SqlParameter paraStockSlipCount = sqlCommand.Parameters.Add("@STOCKSLIPCOUNT", SqlDbType.Int);
                    SqlParameter paraSuppCTaxLayCd = sqlCommand.Parameters.Add("@SUPPCTAXLAYCD", SqlDbType.Int);
                    SqlParameter paraSupplierConsTaxRate = sqlCommand.Parameters.Add("@SUPPLIERCONSTAXRATE", SqlDbType.Float);
                    SqlParameter paraFractionProcCd = sqlCommand.Parameters.Add("@FRACTIONPROCCD", SqlDbType.Int);
                    #endregion

                    #region Parameterオブジェクトに値設定
                    paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(suplAccPayWork.CreateDateTime);
                    paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(suplAccPayWork.UpdateDateTime);
                    paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                    paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(suplAccPayWork.FileHeaderGuid);
                    paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.UpdEmployeeCode);
                    paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(suplAccPayWork.UpdAssemblyId1);
                    paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(suplAccPayWork.UpdAssemblyId2);
                    paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.LogicalDeleteCode);
                    paraAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);
                    paraPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
                    paraPayeeName.Value = SqlDataMediator.SqlSetString(suplAccPayWork.PayeeName);
                    paraPayeeName2.Value = SqlDataMediator.SqlSetString(suplAccPayWork.PayeeName2);
                    paraPayeeSnm.Value = SqlDataMediator.SqlSetString(suplAccPayWork.PayeeSnm);
                    paraAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                    paraAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(suplAccPayWork.AddUpYearMonth);
                    paraLastTimeAccPay.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.LastTimeAccPay);
                    paraThisTimeFeePayNrml.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisTimeFeePayNrml);
                    paraThisTimeDisPayNrml.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisTimeDisPayNrml);
                    paraThisTimePayNrml.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisTimePayNrml);
                    paraThisTimeTtlBlcAcPay.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisTimeTtlBlcAcPay);
                    paraOfsThisTimeStock.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.OfsThisTimeStock);
                    paraOfsThisStockTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.OfsThisStockTax);
                    paraItdedOffsetOutTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ItdedOffsetOutTax);
                    paraItdedOffsetInTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ItdedOffsetInTax);
                    paraItdedOffsetTaxFree.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ItdedOffsetTaxFree);
                    paraOffsetOutTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.OffsetOutTax);
                    paraOffsetInTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.OffsetInTax);
                    paraThisTimeStockPrice.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisTimeStockPrice);
                    paraThisStcPrcTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisStcPrcTax);
                    paraTtlItdedStcOutTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedStcOutTax);
                    paraTtlItdedStcInTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedStcInTax);
                    paraTtlItdedStcTaxFree.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedStcTaxFree);
                    paraTtlStockOuterTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlStockOuterTax);
                    paraTtlStockInnerTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlStockInnerTax);
                    paraThisStckPricRgds.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisStckPricRgds);
                    paraThisStcPrcTaxRgds.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisStcPrcTaxRgds);
                    paraTtlItdedRetOutTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedRetOutTax);
                    paraTtlItdedRetInTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedRetInTax);
                    paraTtlItdedRetTaxFree.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedRetTaxFree);
                    paraTtlRetOuterTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlRetOuterTax);
                    paraTtlRetInnerTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlRetInnerTax);
                    paraThisStckPricDis.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisStckPricDis);
                    paraThisStcPrcTaxDis.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.ThisStcPrcTaxDis);
                    paraTtlItdedDisOutTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedDisOutTax);
                    paraTtlItdedDisInTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedDisInTax);
                    paraTtlItdedDisTaxFree.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlItdedDisTaxFree);
                    paraTtlDisOuterTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlDisOuterTax);
                    paraTtlDisInnerTax.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.TtlDisInnerTax);
                    paraStckTtlAccPayBalance.Value = SqlDataMediator.SqlSetInt64(suplAccPayWork.StckTtlAccPayBalance);
                    paraMonthAddUpExpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.MonthAddUpExpDate);
                    paraStMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.StMonCAddUpUpdDate);
                    paraLaMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.LaMonCAddUpUpdDate);
                    paraStockSlipCount.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.StockSlipCount);
                    paraSuppCTaxLayCd.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SuppCTaxLayCd);
                    paraSupplierConsTaxRate.Value = SqlDataMediator.SqlSetDouble(suplAccPayWork.SupplierConsTaxRate);
                    paraFractionProcCd.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.FractionProcCd);

                    // 未セット項目 >>>
                    paraTaxAdjust.Value = 0;
                    paraBalanceAdjust.Value = 0;
                    paraStckTtl2TmBfBlAccPay.Value = 0;
                    paraStckTtl3TmBfBlAccPay.Value = 0;
                    // 未セット項目 <<<

                    if (InsertDiv == 0) // 集計レコード
                    {
                        paraSupplierCd.Value = SqlDataMediator.SqlSetInt32(0);
                        paraSupplierNm1.Value = SqlDataMediator.SqlSetString(string.Empty);
                        paraSupplierNm2.Value = SqlDataMediator.SqlSetString(string.Empty);
                        paraSupplierSnm.Value = SqlDataMediator.SqlSetString(string.Empty);
                    }
                    else if (InsertDiv == 1) // 親レコード
                    {
                        // 設定対象のカラムは全て設定
                        paraSupplierCd.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);
                        paraSupplierNm1.Value = SqlDataMediator.SqlSetString(suplAccPayWork.SupplierNm1);
                        paraSupplierNm2.Value = SqlDataMediator.SqlSetString(suplAccPayWork.SupplierNm2);
                        paraSupplierSnm.Value = SqlDataMediator.SqlSetString(suplAccPayWork.SupplierSnm);

                        paraLastTimeAccPay.Value = 0;
                        paraThisTimeFeePayNrml.Value = 0;
                        paraThisTimeDisPayNrml.Value = 0;
                        paraThisTimePayNrml.Value = 0;
                        paraThisTimeTtlBlcAcPay.Value = 0;
                        paraStckTtlAccPayBalance.Value = 0;
                    }
                    else if (InsertDiv == 2) // 子レコード
                    {
                        paraSupplierCd.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);
                        paraSupplierNm1.Value = SqlDataMediator.SqlSetString(suplAccPayWork.SupplierNm1);
                        paraSupplierNm2.Value = SqlDataMediator.SqlSetString(suplAccPayWork.SupplierNm2);
                        paraSupplierSnm.Value = SqlDataMediator.SqlSetString(suplAccPayWork.SupplierSnm);

                        paraLastTimeAccPay.Value = 0;
                        paraThisTimeFeePayNrml.Value = 0;
                        paraThisTimeDisPayNrml.Value = 0;
                        paraThisTimePayNrml.Value = 0;
                        paraThisTimeTtlBlcAcPay.Value = 0;
                        paraStckTtlAccPayBalance.Value = 0;
                    }
                    #endregion Parameterオブジェクトに値設定

                    sqlCommand.ExecuteNonQuery();
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                return base.WriteSQLErrorLog(ex);
            }
            return (int)ConstantManagement.DB_Status.ctDB_NORMAL;
        }
        // --- ADD 2012/09/13 -----------<<<<<

        /// <summary>
        /// 買掛支払集計データを更新します
        /// </summary>
        /// <param name="aCalcPayTotalList">買掛支払集計データList</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 買掛支払集計データを更新します</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        private int WriteACalcPayTotal(ref ArrayList aCalcPayTotalList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            string sqlText = string.Empty;
            //DELETEコマンドの生成
            try
            {
                for (int i = 0; i < aCalcPayTotalList.Count; i++)
                {
                    ACalcPayTotalWork aCalcPayTotalWork = aCalcPayTotalList[i] as ACalcPayTotalWork;

                    sqlText = string.Empty;
                    #region DEL 2008.11.26
                    //sqlText += "DELETE" + Environment.NewLine;
                    //sqlText += " FROM ACCRECDEPOTOTALRF" + Environment.NewLine;
                    //sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    //sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                    //sqlText += "    AND CLAIMCODERF=@FINDCLAIMCODE" + Environment.NewLine;
                    //sqlText += "    AND ADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;
                    #endregion DEL 2008.11.26
                    // ADD 2008.11.26  買掛支払集計データ の追加処理前に売掛入金集計データの削除を行っているため修正>>>
                    sqlText += "DELETE" + Environment.NewLine;
                    sqlText += " FROM ACALCPAYTOTALRF" + Environment.NewLine;
                    sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                    sqlText += "        AND PAYEECODERF=@FINDPAYEECODE" + Environment.NewLine;
                    //sqlText += "        AND SUPPLIERCDRF=@FINDSUPPLIERCD" + Environment.NewLine;
                    sqlText += "        AND ADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;
                    //sqlText += "        AND MONEYKINDCODERF=@FINDMONEYKINDCODE" + Environment.NewLine;
                    // ADD 2008.11.26 <<<

                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                    {
                        sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                        #region DEL 2008.11.26
                        ////Prameterオブジェクトの作成
                        //SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        //SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        //SqlParameter findParaClaimCode = sqlCommand.Parameters.Add("@FINDCLAIMCODE", SqlDbType.Int);
                        //SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                        ////Parameterオブジェクトへ値設定
                        //findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(aCalcPayTotalWork.EnterpriseCode);
                        //findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(aCalcPayTotalWork.AddUpSecCode.Trim());
                        //findParaClaimCode.Value = SqlDataMediator.SqlSetInt32(aCalcPayTotalWork.PayeeCode);
                        //findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(aCalcPayTotalWork.AddUpDate);
                        #endregion DEL 2008.11.26

                        // ADD 2008.11.26 >>>
                        //Prameterオブジェクトの作成
                        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDPAYEECODE", SqlDbType.Int);
                        //SqlParameter findParaSupplierCd = sqlCommand.Parameters.Add("@FINDSUPPLIERCD", SqlDbType.Int);
                        SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                        //SqlParameter findParaMoneyKindCode = sqlCommand.Parameters.Add("@FINDMONEYKINDCODE", SqlDbType.Int);

                        //Parameterオブジェクトへ値設定
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(aCalcPayTotalWork.EnterpriseCode);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(aCalcPayTotalWork.AddUpSecCode.Trim());
                        findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(aCalcPayTotalWork.PayeeCode);
                        //findParaSupplierCd.Value = SqlDataMediator.SqlSetInt32(aCalcPayTotalWork.SupplierCd);
                        findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(aCalcPayTotalWork.AddUpDate);
                        //findParaMoneyKindCode.Value = SqlDataMediator.SqlSetInt32(aCalcPayTotalWork.MoneyKindCode);
                        // ADD 2008.11.26 <<<

                        sqlCommand.ExecuteNonQuery();
                    }
                // ADD 2008.12.22 >>>
                }
                for (int i = 0; i < aCalcPayTotalList.Count; i++)
                {
                    ACalcPayTotalWork aCalcPayTotalWork = aCalcPayTotalList[i] as ACalcPayTotalWork;
                // ADD 2008.12.22 <<<
                    #region [Insert文作成]
                    sqlText = string.Empty;
                    sqlText += "INSERT INTO ACALCPAYTOTALRF" + Environment.NewLine;
                    sqlText += " (CREATEDATETIMERF" + Environment.NewLine;
                    sqlText += "    ,UPDATEDATETIMERF" + Environment.NewLine;
                    sqlText += "    ,ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    ,FILEHEADERGUIDRF" + Environment.NewLine;
                    sqlText += "    ,UPDEMPLOYEECODERF" + Environment.NewLine;
                    sqlText += "    ,UPDASSEMBLYID1RF" + Environment.NewLine;
                    sqlText += "    ,UPDASSEMBLYID2RF" + Environment.NewLine;
                    sqlText += "    ,LOGICALDELETECODERF" + Environment.NewLine;
                    sqlText += "    ,ADDUPSECCODERF" + Environment.NewLine;
                    sqlText += "    ,PAYEECODERF" + Environment.NewLine;
                    sqlText += "    ,SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += "    ,ADDUPDATERF" + Environment.NewLine;
                    sqlText += "    ,MONEYKINDCODERF" + Environment.NewLine;
                    sqlText += "    ,MONEYKINDNAMERF" + Environment.NewLine;
                    sqlText += "    ,MONEYKINDDIVRF" + Environment.NewLine;
                    sqlText += "    ,PAYMENTRF" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;
                    sqlText += " VALUES" + Environment.NewLine;
                    sqlText += " (@CREATEDATETIME" + Environment.NewLine;
                    sqlText += "    ,@UPDATEDATETIME" + Environment.NewLine;
                    sqlText += "    ,@ENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    ,@FILEHEADERGUID" + Environment.NewLine;
                    sqlText += "    ,@UPDEMPLOYEECODE" + Environment.NewLine;
                    sqlText += "    ,@UPDASSEMBLYID1" + Environment.NewLine;
                    sqlText += "    ,@UPDASSEMBLYID2" + Environment.NewLine;
                    sqlText += "    ,@LOGICALDELETECODE" + Environment.NewLine;
                    sqlText += "    ,@ADDUPSECCODE" + Environment.NewLine;
                    sqlText += "    ,@PAYEECODE" + Environment.NewLine;
                    sqlText += "    ,@SUPPLIERCD" + Environment.NewLine;
                    sqlText += "    ,@ADDUPDATE" + Environment.NewLine;
                    sqlText += "    ,@MONEYKINDCODE" + Environment.NewLine;
                    sqlText += "    ,@MONEYKINDNAME" + Environment.NewLine;
                    sqlText += "    ,@MONEYKINDDIV" + Environment.NewLine;
                    sqlText += "    ,@PAYMENT" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;
                    #endregion  //[Insert文作成]

                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                    {
                        sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                        //登録ヘッダ情報を設定
                        object obj = (object)this;
                        IFileHeader flhd = (IFileHeader)aCalcPayTotalWork;
                        FileHeader fileHeader = new FileHeader(obj);
                        fileHeader.SetInsertHeader(ref flhd, obj);

                        #region Parameterオブジェクト作成
                        SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                        SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                        SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);
                        SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);
                        SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);
                        SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);
                        SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                        SqlParameter paraAddUpSecCode = sqlCommand.Parameters.Add("@ADDUPSECCODE", SqlDbType.NChar);
                        SqlParameter paraPayeeCode = sqlCommand.Parameters.Add("@PAYEECODE", SqlDbType.Int);
                        SqlParameter paraSupplierCd = sqlCommand.Parameters.Add("@SUPPLIERCD", SqlDbType.Int);
                        SqlParameter paraAddUpDate = sqlCommand.Parameters.Add("@ADDUPDATE", SqlDbType.Int);
                        SqlParameter paraMoneyKindCode = sqlCommand.Parameters.Add("@MONEYKINDCODE", SqlDbType.Int);
                        SqlParameter paraMoneyKindName = sqlCommand.Parameters.Add("@MONEYKINDNAME", SqlDbType.NVarChar);
                        SqlParameter paraMoneyKindDiv = sqlCommand.Parameters.Add("@MONEYKINDDIV", SqlDbType.Int);
                        SqlParameter paraPayment = sqlCommand.Parameters.Add("@PAYMENT", SqlDbType.BigInt);
                        #endregion

                        #region Parameterオブジェクト設定
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(aCalcPayTotalWork.CreateDateTime);
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(aCalcPayTotalWork.UpdateDateTime);
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(aCalcPayTotalWork.EnterpriseCode);
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(aCalcPayTotalWork.FileHeaderGuid);
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(aCalcPayTotalWork.UpdEmployeeCode);
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(aCalcPayTotalWork.UpdAssemblyId1);
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(aCalcPayTotalWork.UpdAssemblyId2);
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(aCalcPayTotalWork.LogicalDeleteCode);
                        paraAddUpSecCode.Value = SqlDataMediator.SqlSetString(aCalcPayTotalWork.AddUpSecCode.Trim());
                        paraPayeeCode.Value = SqlDataMediator.SqlSetInt32(aCalcPayTotalWork.PayeeCode);
                        paraSupplierCd.Value = SqlDataMediator.SqlSetInt32(aCalcPayTotalWork.SupplierCd);
                        paraAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(aCalcPayTotalWork.AddUpDate);
                        paraMoneyKindCode.Value = SqlDataMediator.SqlSetInt32(aCalcPayTotalWork.MoneyKindCode);
                        paraMoneyKindName.Value = SqlDataMediator.SqlSetString(aCalcPayTotalWork.MoneyKindName);
                        paraMoneyKindDiv.Value = SqlDataMediator.SqlSetInt32(aCalcPayTotalWork.MoneyKindDiv);
                        paraPayment.Value = SqlDataMediator.SqlSetInt64(aCalcPayTotalWork.Payment);
                        #endregion

                        sqlCommand.ExecuteNonQuery();
                    }

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 在庫履歴データを更新します
        /// </summary>
        /// <param name="stockHistoryWorkList">在庫履歴データList</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 在庫履歴データを更新します</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        private int WriteStockHistory(ref List<StockHistoryWork> stockHistoryWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            string sqlText = string.Empty;
            
            try
            {
                for (int i = 0; i < stockHistoryWorkList.Count; i++)
                {
                    StockHistoryWork stockHistoryWork = stockHistoryWorkList[i] as StockHistoryWork;

                    sqlText = string.Empty;
                    sqlText += "DELETE" + Environment.NewLine;
                    sqlText += " FROM STOCKHISTORYRF" + Environment.NewLine;
                    sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    AND ADDUPYEARMONTHRF=@FINDADDUPYEARMONTH" + Environment.NewLine;
                    sqlText += "    AND WAREHOUSECODERF=@FINDWAREHOUSECODE" + Environment.NewLine;
                    sqlText += "    AND SECTIONCODERF=@FINDSECTIONCODE" + Environment.NewLine;
                    sqlText += "    AND GOODSNORF=@FINDGOODSNO" + Environment.NewLine;
                    sqlText += "    AND GOODSMAKERCDRF=@FINDGOODSMAKERCD" + Environment.NewLine;

                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                    {
                        sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                        //Prameterオブジェクトの作成
                        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter findParaAddUpYearMonth = sqlCommand.Parameters.Add("@FINDADDUPYEARMONTH", SqlDbType.Int);
                        SqlParameter findParaWarehouseCode = sqlCommand.Parameters.Add("@FINDWAREHOUSECODE", SqlDbType.NChar);
                        SqlParameter findParaSectionCode = sqlCommand.Parameters.Add("@FINDSECTIONCODE", SqlDbType.NChar);
                        SqlParameter findParaGoodsNo = sqlCommand.Parameters.Add("@FINDGOODSNO", SqlDbType.NVarChar);
                        SqlParameter findParaGoodsMakerCd = sqlCommand.Parameters.Add("@FINDGOODSMAKERCD", SqlDbType.Int);

                        //Parameterオブジェクトへ値設定
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(stockHistoryWork.EnterpriseCode);
                        findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(stockHistoryWork.AddUpYearMonth);
                        findParaWarehouseCode.Value = SqlDataMediator.SqlSetString(stockHistoryWork.WarehouseCode.Trim());
                        findParaSectionCode.Value = SqlDataMediator.SqlSetString(stockHistoryWork.SectionCode.Trim());
                        findParaGoodsNo.Value = SqlDataMediator.SqlSetString(stockHistoryWork.GoodsNo);
                        findParaGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(stockHistoryWork.GoodsMakerCd);
                        
                        sqlCommand.ExecuteNonQuery();
                    }

                    #region [Insert文作成]
                    sqlText = string.Empty;
                    sqlText += "INSERT INTO STOCKHISTORYRF" + Environment.NewLine;
                    sqlText += " (CREATEDATETIMERF" + Environment.NewLine;
                    sqlText += "    ,UPDATEDATETIMERF" + Environment.NewLine;
                    sqlText += "    ,ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    ,FILEHEADERGUIDRF" + Environment.NewLine;
                    sqlText += "    ,UPDEMPLOYEECODERF" + Environment.NewLine;
                    sqlText += "    ,UPDASSEMBLYID1RF" + Environment.NewLine;
                    sqlText += "    ,UPDASSEMBLYID2RF" + Environment.NewLine;
                    sqlText += "    ,LOGICALDELETECODERF" + Environment.NewLine;
                    sqlText += "    ,ADDUPYEARMONTHRF" + Environment.NewLine;
                    sqlText += "    ,WAREHOUSECODERF" + Environment.NewLine;
                    sqlText += "    ,WAREHOUSENAMERF" + Environment.NewLine;
                    sqlText += "    ,SECTIONCODERF" + Environment.NewLine;
                    sqlText += "    ,GOODSNORF" + Environment.NewLine;
                    sqlText += "    ,GOODSNAMERF" + Environment.NewLine;
                    sqlText += "    ,GOODSMAKERCDRF" + Environment.NewLine;
                    sqlText += "    ,MAKERNAMERF" + Environment.NewLine;
                    sqlText += "    ,LMONTHSTOCKCNTRF" + Environment.NewLine;
                    sqlText += "    ,LMONTHSTOCKPRICERF" + Environment.NewLine;
                    sqlText += "    ,LMONTHPPTYSTOCKCNTRF" + Environment.NewLine;
                    sqlText += "    ,LMONTHPPTYSTOCKPRICERF" + Environment.NewLine;
                    sqlText += "    ,SALESTIMESRF" + Environment.NewLine;
                    sqlText += "    ,SALESCOUNTRF" + Environment.NewLine;
                    sqlText += "    ,SALESMONEYTAXEXCRF" + Environment.NewLine;
                    sqlText += "    ,SALESRETGOODSTIMESRF" + Environment.NewLine;
                    sqlText += "    ,SALESRETGOODSCNTRF" + Environment.NewLine;
                    sqlText += "    ,SALESRETGOODSPRICERF" + Environment.NewLine;
                    sqlText += "    ,GROSSPROFITRF" + Environment.NewLine;
                    sqlText += "    ,STOCKTIMESRF" + Environment.NewLine;
                    sqlText += "    ,STOCKCOUNTRF" + Environment.NewLine;
                    sqlText += "    ,STOCKPRICETAXEXCRF" + Environment.NewLine;
                    sqlText += "    ,STOCKRETGOODSTIMESRF" + Environment.NewLine;
                    sqlText += "    ,STOCKRETGOODSCNTRF" + Environment.NewLine;
                    sqlText += "    ,STOCKRETGOODSPRICERF" + Environment.NewLine;
                    sqlText += "    ,MOVEARRIVALCNTRF" + Environment.NewLine;
                    sqlText += "    ,MOVEARRIVALPRICERF" + Environment.NewLine;
                    sqlText += "    ,MOVESHIPMENTCNTRF" + Environment.NewLine;
                    sqlText += "    ,MOVESHIPMENTPRICERF" + Environment.NewLine;
                    sqlText += "    ,ADJUSTCOUNTRF" + Environment.NewLine;
                    sqlText += "    ,ADJUSTPRICERF" + Environment.NewLine;
                    sqlText += "    ,ARRIVALCNTRF" + Environment.NewLine;
                    sqlText += "    ,ARRIVALPRICERF" + Environment.NewLine;
                    sqlText += "    ,SHIPMENTCNTRF" + Environment.NewLine;
                    sqlText += "    ,SHIPMENTPRICERF" + Environment.NewLine;
                    sqlText += "    ,TOTALARRIVALCNTRF" + Environment.NewLine;
                    sqlText += "    ,TOTALARRIVALPRICERF" + Environment.NewLine;
                    sqlText += "    ,TOTALSHIPMENTCNTRF" + Environment.NewLine;
                    sqlText += "    ,TOTALSHIPMENTPRICERF" + Environment.NewLine;
                    sqlText += "    ,STOCKUNITPRICEFLRF" + Environment.NewLine;
                    sqlText += "    ,STOCKTOTALRF" + Environment.NewLine;
                    sqlText += "    ,STOCKMASHINEPRICERF" + Environment.NewLine;
                    sqlText += "    ,PROPERTYSTOCKCNTRF" + Environment.NewLine;
                    sqlText += "    ,PROPERTYSTOCKPRICERF" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;
                    sqlText += " VALUES" + Environment.NewLine;
                    sqlText += " (@CREATEDATETIME" + Environment.NewLine;
                    sqlText += "    ,@UPDATEDATETIME" + Environment.NewLine;
                    sqlText += "    ,@ENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    ,@FILEHEADERGUID" + Environment.NewLine;
                    sqlText += "    ,@UPDEMPLOYEECODE" + Environment.NewLine;
                    sqlText += "    ,@UPDASSEMBLYID1" + Environment.NewLine;
                    sqlText += "    ,@UPDASSEMBLYID2" + Environment.NewLine;
                    sqlText += "    ,@LOGICALDELETECODE" + Environment.NewLine;
                    sqlText += "    ,@ADDUPYEARMONTH" + Environment.NewLine;
                    sqlText += "    ,@WAREHOUSECODE" + Environment.NewLine;
                    sqlText += "    ,@WAREHOUSENAME" + Environment.NewLine;
                    sqlText += "    ,@SECTIONCODE" + Environment.NewLine;
                    sqlText += "    ,@GOODSNO" + Environment.NewLine;
                    sqlText += "    ,@GOODSNAME" + Environment.NewLine;
                    sqlText += "    ,@GOODSMAKERCD" + Environment.NewLine;
                    sqlText += "    ,@MAKERNAME" + Environment.NewLine;
                    sqlText += "    ,@LMONTHSTOCKCNT" + Environment.NewLine;
                    sqlText += "    ,@LMONTHSTOCKPRICE" + Environment.NewLine;
                    sqlText += "    ,@LMONTHPPTYSTOCKCNT" + Environment.NewLine;
                    sqlText += "    ,@LMONTHPPTYSTOCKPRICE" + Environment.NewLine;
                    sqlText += "    ,@SALESTIMES" + Environment.NewLine;
                    sqlText += "    ,@SALESCOUNT" + Environment.NewLine;
                    sqlText += "    ,@SALESMONEYTAXEXC" + Environment.NewLine;
                    sqlText += "    ,@SALESRETGOODSTIMES" + Environment.NewLine;
                    sqlText += "    ,@SALESRETGOODSCNT" + Environment.NewLine;
                    sqlText += "    ,@SALESRETGOODSPRICE" + Environment.NewLine;
                    sqlText += "    ,@GROSSPROFIT" + Environment.NewLine;
                    sqlText += "    ,@STOCKTIMES" + Environment.NewLine;
                    sqlText += "    ,@STOCKCOUNT" + Environment.NewLine;
                    sqlText += "    ,@STOCKPRICETAXEXC" + Environment.NewLine;
                    sqlText += "    ,@STOCKRETGOODSTIMES" + Environment.NewLine;
                    sqlText += "    ,@STOCKRETGOODSCNT" + Environment.NewLine;
                    sqlText += "    ,@STOCKRETGOODSPRICE" + Environment.NewLine;
                    sqlText += "    ,@MOVEARRIVALCNT" + Environment.NewLine;
                    sqlText += "    ,@MOVEARRIVALPRICE" + Environment.NewLine;
                    sqlText += "    ,@MOVESHIPMENTCNT" + Environment.NewLine;
                    sqlText += "    ,@MOVESHIPMENTPRICE" + Environment.NewLine;
                    sqlText += "    ,@ADJUSTCOUNT" + Environment.NewLine;
                    sqlText += "    ,@ADJUSTPRICE" + Environment.NewLine;
                    sqlText += "    ,@ARRIVALCNT" + Environment.NewLine;
                    sqlText += "    ,@ARRIVALPRICE" + Environment.NewLine;
                    sqlText += "    ,@SHIPMENTCNT" + Environment.NewLine;
                    sqlText += "    ,@SHIPMENTPRICE" + Environment.NewLine;
                    sqlText += "    ,@TOTALARRIVALCNT" + Environment.NewLine;
                    sqlText += "    ,@TOTALARRIVALPRICE" + Environment.NewLine;
                    sqlText += "    ,@TOTALSHIPMENTCNT" + Environment.NewLine;
                    sqlText += "    ,@TOTALSHIPMENTPRICE" + Environment.NewLine;
                    sqlText += "    ,@STOCKUNITPRICEFL" + Environment.NewLine;
                    sqlText += "    ,@STOCKTOTAL" + Environment.NewLine;
                    sqlText += "    ,@STOCKMASHINEPRICE" + Environment.NewLine;
                    sqlText += "    ,@PROPERTYSTOCKCNT" + Environment.NewLine;
                    sqlText += "    ,@PROPERTYSTOCKPRICE" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;
                    #endregion  //[Insert文作成]

                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                    {
                        sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                        //登録ヘッダ情報を設定
                        object obj = (object)this;
                        IFileHeader flhd = (IFileHeader)stockHistoryWork;
                        FileHeader fileHeader = new FileHeader(obj);
                        fileHeader.SetInsertHeader(ref flhd, obj);

                        #region Parameterオブジェクト作成
                        SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                        SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                        SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);
                        SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);
                        SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);
                        SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);
                        SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                        SqlParameter paraAddUpYearMonth = sqlCommand.Parameters.Add("@ADDUPYEARMONTH", SqlDbType.Int);
                        SqlParameter paraWarehouseCode = sqlCommand.Parameters.Add("@WAREHOUSECODE", SqlDbType.NChar);
                        SqlParameter paraWarehouseName = sqlCommand.Parameters.Add("@WAREHOUSENAME", SqlDbType.NVarChar);
                        SqlParameter paraSectionCode = sqlCommand.Parameters.Add("@SECTIONCODE", SqlDbType.NChar);
                        SqlParameter paraGoodsNo = sqlCommand.Parameters.Add("@GOODSNO", SqlDbType.NVarChar);
                        SqlParameter paraGoodsName = sqlCommand.Parameters.Add("@GOODSNAME", SqlDbType.NVarChar);
                        SqlParameter paraGoodsMakerCd = sqlCommand.Parameters.Add("@GOODSMAKERCD", SqlDbType.Int);
                        SqlParameter paraMakerName = sqlCommand.Parameters.Add("@MAKERNAME", SqlDbType.NVarChar);
                        SqlParameter paraLMonthStockCnt = sqlCommand.Parameters.Add("@LMONTHSTOCKCNT", SqlDbType.Float);
                        SqlParameter paraLMonthStockPrice = sqlCommand.Parameters.Add("@LMONTHSTOCKPRICE", SqlDbType.BigInt);
                        SqlParameter paraLMonthPptyStockCnt = sqlCommand.Parameters.Add("@LMONTHPPTYSTOCKCNT", SqlDbType.Float);
                        SqlParameter paraLMonthPptyStockPrice = sqlCommand.Parameters.Add("@LMONTHPPTYSTOCKPRICE", SqlDbType.BigInt);
                        SqlParameter paraSalesTimes = sqlCommand.Parameters.Add("@SALESTIMES", SqlDbType.Int);
                        SqlParameter paraSalesCount = sqlCommand.Parameters.Add("@SALESCOUNT", SqlDbType.Float);
                        SqlParameter paraSalesMoneyTaxExc = sqlCommand.Parameters.Add("@SALESMONEYTAXEXC", SqlDbType.BigInt);
                        SqlParameter paraSalesRetGoodsTimes = sqlCommand.Parameters.Add("@SALESRETGOODSTIMES", SqlDbType.Int);
                        SqlParameter paraSalesRetGoodsCnt = sqlCommand.Parameters.Add("@SALESRETGOODSCNT", SqlDbType.Float);
                        SqlParameter paraSalesRetGoodsPrice = sqlCommand.Parameters.Add("@SALESRETGOODSPRICE", SqlDbType.BigInt);
                        SqlParameter paraGrossProfit = sqlCommand.Parameters.Add("@GROSSPROFIT", SqlDbType.BigInt);
                        SqlParameter paraStockTimes = sqlCommand.Parameters.Add("@STOCKTIMES", SqlDbType.Int);
                        SqlParameter paraStockCount = sqlCommand.Parameters.Add("@STOCKCOUNT", SqlDbType.Float);
                        SqlParameter paraStockPriceTaxExc = sqlCommand.Parameters.Add("@STOCKPRICETAXEXC", SqlDbType.BigInt);
                        SqlParameter paraStockRetGoodsTimes = sqlCommand.Parameters.Add("@STOCKRETGOODSTIMES", SqlDbType.Int);
                        SqlParameter paraStockRetGoodsCnt = sqlCommand.Parameters.Add("@STOCKRETGOODSCNT", SqlDbType.Float);
                        SqlParameter paraStockRetGoodsPrice = sqlCommand.Parameters.Add("@STOCKRETGOODSPRICE", SqlDbType.BigInt);
                        SqlParameter paraMoveArrivalCnt = sqlCommand.Parameters.Add("@MOVEARRIVALCNT", SqlDbType.Float);
                        SqlParameter paraMoveArrivalPrice = sqlCommand.Parameters.Add("@MOVEARRIVALPRICE", SqlDbType.BigInt);
                        SqlParameter paraMoveShipmentCnt = sqlCommand.Parameters.Add("@MOVESHIPMENTCNT", SqlDbType.Float);
                        SqlParameter paraMoveShipmentPrice = sqlCommand.Parameters.Add("@MOVESHIPMENTPRICE", SqlDbType.BigInt);
                        SqlParameter paraAdjustCount = sqlCommand.Parameters.Add("@ADJUSTCOUNT", SqlDbType.Float);
                        SqlParameter paraAdjustPrice = sqlCommand.Parameters.Add("@ADJUSTPRICE", SqlDbType.BigInt);
                        SqlParameter paraArrivalCnt = sqlCommand.Parameters.Add("@ARRIVALCNT", SqlDbType.Float);
                        SqlParameter paraArrivalPrice = sqlCommand.Parameters.Add("@ARRIVALPRICE", SqlDbType.BigInt);
                        SqlParameter paraShipmentCnt = sqlCommand.Parameters.Add("@SHIPMENTCNT", SqlDbType.Float);
                        SqlParameter paraShipmentPrice = sqlCommand.Parameters.Add("@SHIPMENTPRICE", SqlDbType.BigInt);
                        SqlParameter paraTotalArrivalCnt = sqlCommand.Parameters.Add("@TOTALARRIVALCNT", SqlDbType.Float);
                        SqlParameter paraTotalArrivalPrice = sqlCommand.Parameters.Add("@TOTALARRIVALPRICE", SqlDbType.BigInt);
                        SqlParameter paraTotalShipmentCnt = sqlCommand.Parameters.Add("@TOTALSHIPMENTCNT", SqlDbType.Float);
                        SqlParameter paraTotalShipmentPrice = sqlCommand.Parameters.Add("@TOTALSHIPMENTPRICE", SqlDbType.BigInt);
                        SqlParameter paraStockUnitPriceFl = sqlCommand.Parameters.Add("@STOCKUNITPRICEFL", SqlDbType.Float);
                        SqlParameter paraStockTotal = sqlCommand.Parameters.Add("@STOCKTOTAL", SqlDbType.Float);
                        SqlParameter paraStockMashinePrice = sqlCommand.Parameters.Add("@STOCKMASHINEPRICE", SqlDbType.BigInt);
                        SqlParameter paraPropertyStockCnt = sqlCommand.Parameters.Add("@PROPERTYSTOCKCNT", SqlDbType.Float);
                        SqlParameter paraPropertyStockPrice = sqlCommand.Parameters.Add("@PROPERTYSTOCKPRICE", SqlDbType.BigInt);
                        #endregion

                        #region Parameterオブジェクト設定
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(stockHistoryWork.CreateDateTime);
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(stockHistoryWork.UpdateDateTime);
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(stockHistoryWork.EnterpriseCode);
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(stockHistoryWork.FileHeaderGuid);
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(stockHistoryWork.UpdEmployeeCode);
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(stockHistoryWork.UpdAssemblyId1);
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(stockHistoryWork.UpdAssemblyId2);
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(stockHistoryWork.LogicalDeleteCode);
                        paraAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(stockHistoryWork.AddUpYearMonth);
                        paraWarehouseCode.Value = SqlDataMediator.SqlSetString(stockHistoryWork.WarehouseCode);
                        paraWarehouseName.Value = SqlDataMediator.SqlSetString(stockHistoryWork.WarehouseName);
                        paraSectionCode.Value = SqlDataMediator.SqlSetString(stockHistoryWork.SectionCode);
                        paraGoodsNo.Value = SqlDataMediator.SqlSetString(stockHistoryWork.GoodsNo);
                        paraGoodsName.Value = SqlDataMediator.SqlSetString(stockHistoryWork.GoodsName);
                        paraGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(stockHistoryWork.GoodsMakerCd);
                        paraMakerName.Value = SqlDataMediator.SqlSetString(stockHistoryWork.MakerName);
                        paraLMonthStockCnt.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.LMonthStockCnt);
                        paraLMonthStockPrice.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.LMonthStockPrice);
                        paraLMonthPptyStockCnt.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.LMonthPptyStockCnt);
                        paraLMonthPptyStockPrice.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.LMonthPptyStockPrice);
                        paraSalesTimes.Value = SqlDataMediator.SqlSetInt32(stockHistoryWork.SalesTimes);
                        paraSalesCount.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.SalesCount);
                        paraSalesMoneyTaxExc.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.SalesMoneyTaxExc);
                        paraSalesRetGoodsTimes.Value = SqlDataMediator.SqlSetInt32(stockHistoryWork.SalesRetGoodsTimes);
                        paraSalesRetGoodsCnt.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.SalesRetGoodsCnt);
                        paraSalesRetGoodsPrice.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.SalesRetGoodsPrice);
                        paraGrossProfit.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.GrossProfit);
                        paraStockTimes.Value = SqlDataMediator.SqlSetInt32(stockHistoryWork.StockTimes);
                        paraStockCount.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.StockCount);
                        paraStockPriceTaxExc.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.StockPriceTaxExc);
                        paraStockRetGoodsTimes.Value = SqlDataMediator.SqlSetInt32(stockHistoryWork.StockRetGoodsTimes);
                        paraStockRetGoodsCnt.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.StockRetGoodsCnt);
                        paraStockRetGoodsPrice.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.StockRetGoodsPrice);
                        paraMoveArrivalCnt.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.MoveArrivalCnt);
                        paraMoveArrivalPrice.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.MoveArrivalPrice);
                        paraMoveShipmentCnt.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.MoveShipmentCnt);
                        paraMoveShipmentPrice.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.MoveShipmentPrice);
                        paraAdjustCount.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.AdjustCount);
                        paraAdjustPrice.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.AdjustPrice);
                        paraArrivalCnt.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.ArrivalCnt);
                        paraArrivalPrice.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.ArrivalPrice);
                        paraShipmentCnt.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.ShipmentCnt);
                        paraShipmentPrice.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.ShipmentPrice);
                        paraTotalArrivalCnt.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.TotalArrivalCnt);
                        paraTotalArrivalPrice.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.TotalArrivalPrice);
                        paraTotalShipmentCnt.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.TotalShipmentCnt);
                        paraTotalShipmentPrice.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.TotalShipmentPrice);
                        paraStockUnitPriceFl.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.StockUnitPriceFl);
                        paraStockTotal.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.StockTotal);
                        paraStockMashinePrice.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.StockMashinePrice);
                        paraPropertyStockCnt.Value = SqlDataMediator.SqlSetDouble(stockHistoryWork.PropertyStockCnt);
                        paraPropertyStockPrice.Value = SqlDataMediator.SqlSetInt64(stockHistoryWork.PropertyStockPrice);
                        #endregion

                        sqlCommand.ExecuteNonQuery();
                    }

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 売上月次集計データを更新します
        /// </summary>
        /// <param name="mTtlSalesStockSlipWorkList">売上月次集計データList</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 売上月次集計データを更新します</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        private int WriteMTtlSalesStockSlip(ref List<MTtlSalesStockSlipWork> mTtlSalesStockSlipWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            string sqlText = string.Empty;
            
            try
            {
                for (int i = 0; i < mTtlSalesStockSlipWorkList.Count; i++)
                {
                    MTtlSalesStockSlipWork mTtlSalesStockSlipWork = mTtlSalesStockSlipWorkList[i] as MTtlSalesStockSlipWork;

                    sqlText = string.Empty;
                    sqlText += "DELETE" + Environment.NewLine;
                    sqlText += " FROM MTTLSALESSTOCKSLIPRF" + Environment.NewLine;
                    sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                    sqlText += "    AND ADDUPYEARMONTHRF=@FINDADDUPYEARMONTH" + Environment.NewLine;
                    sqlText += "    AND RSLTTTLDIVCDRF=@FINDRSLTTTLDIVCD" + Environment.NewLine;
                    sqlText += "    AND SUPPLIERCDRF=@FINDCUSTOMERCODE" + Environment.NewLine;

                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                    {
                        sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                        //Prameterオブジェクトの作成
                        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        SqlParameter findParaAddUpYearMonth = sqlCommand.Parameters.Add("@FINDADDUPYEARMONTH", SqlDbType.Int);
                        SqlParameter findParaRsltTtlDivCd = sqlCommand.Parameters.Add("@FINDRSLTTTLDIVCD", SqlDbType.Int);
                        SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);

                        //Parameterオブジェクトへ値設定
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(mTtlSalesStockSlipWork.EnterpriseCode);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(mTtlSalesStockSlipWork.AddUpSecCode);
                        //findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetInt32(mTtlSalesStockSlipWork.AddUpYearMonth);
                        findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(TDateTime.LongDateToDateTime(mTtlSalesStockSlipWork.AddUpYearMonth));
                        findParaRsltTtlDivCd.Value = SqlDataMediator.SqlSetInt32(mTtlSalesStockSlipWork.RsltTtlDivCd);
                        findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(mTtlSalesStockSlipWork.CustomerCode);

                        sqlCommand.ExecuteNonQuery();
                    }

                    #region [Insert文作成]
                    sqlText = string.Empty;
                    sqlText += "INSERT INTO MTTLSALESSTOCKSLIPRF" + Environment.NewLine;
                    sqlText += " (CREATEDATETIMERF" + Environment.NewLine;
                    sqlText += "    ,UPDATEDATETIMERF" + Environment.NewLine;
                    sqlText += "    ,ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    ,FILEHEADERGUIDRF" + Environment.NewLine;
                    sqlText += "    ,UPDEMPLOYEECODERF" + Environment.NewLine;
                    sqlText += "    ,UPDASSEMBLYID1RF" + Environment.NewLine;
                    sqlText += "    ,UPDASSEMBLYID2RF" + Environment.NewLine;
                    sqlText += "    ,LOGICALDELETECODERF" + Environment.NewLine;
                    sqlText += "    ,ADDUPSECCODERF" + Environment.NewLine;
                    sqlText += "    ,ADDUPYEARMONTHRF" + Environment.NewLine;
                    sqlText += "    ,RSLTTTLDIVCDRF" + Environment.NewLine;
                    sqlText += "    ,SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += "    ,TOTALSALESCOUNTRF" + Environment.NewLine;
                    sqlText += "    ,SALESMONEYRF" + Environment.NewLine;
                    sqlText += "    ,SALESRETGOODSPRICERF" + Environment.NewLine;
                    sqlText += "    ,DISCOUNTPRICERF" + Environment.NewLine;
                    sqlText += "    ,GROSSPROFITRF" + Environment.NewLine;
                    sqlText += "    ,STOCKTOTALPRICERF" + Environment.NewLine;
                    sqlText += "    ,TOTALSTOCKCOUNTRF" + Environment.NewLine;
                    sqlText += "    ,STOCKRETGOODSPRICERF" + Environment.NewLine;
                    sqlText += "    ,STOCKTOTALDISCOUNTRF" + Environment.NewLine;
                    sqlText += "    ,MOVEARRIVALCNTRF" + Environment.NewLine;
                    sqlText += "    ,MOVEARRIVALPRICERF" + Environment.NewLine;
                    sqlText += "    ,MOVESHIPMENTCNTRF" + Environment.NewLine;
                    sqlText += "    ,MOVESHIPMENTPRICERF" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;
                    sqlText += " VALUES" + Environment.NewLine;
                    sqlText += " (@CREATEDATETIME" + Environment.NewLine;
                    sqlText += "    ,@UPDATEDATETIME" + Environment.NewLine;
                    sqlText += "    ,@ENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    ,@FILEHEADERGUID" + Environment.NewLine;
                    sqlText += "    ,@UPDEMPLOYEECODE" + Environment.NewLine;
                    sqlText += "    ,@UPDASSEMBLYID1" + Environment.NewLine;
                    sqlText += "    ,@UPDASSEMBLYID2" + Environment.NewLine;
                    sqlText += "    ,@LOGICALDELETECODE" + Environment.NewLine;
                    sqlText += "    ,@ADDUPSECCODE" + Environment.NewLine;
                    sqlText += "    ,@ADDUPYEARMONTH" + Environment.NewLine;
                    sqlText += "    ,@RSLTTTLDIVCD" + Environment.NewLine;
                    sqlText += "    ,@CUSTOMERCODE" + Environment.NewLine;
                    sqlText += "    ,@TOTALSALESCOUNT" + Environment.NewLine;
                    sqlText += "    ,@SALESMONEY" + Environment.NewLine;
                    sqlText += "    ,@SALESRETGOODSPRICE" + Environment.NewLine;
                    sqlText += "    ,@DISCOUNTPRICE" + Environment.NewLine;
                    sqlText += "    ,@GROSSPROFIT" + Environment.NewLine;
                    sqlText += "    ,@STOCKTOTALPRICE" + Environment.NewLine;
                    sqlText += "    ,@TOTALSTOCKCOUNT" + Environment.NewLine;
                    sqlText += "    ,@STOCKRETGOODSPRICE" + Environment.NewLine;
                    sqlText += "    ,@STOCKTOTALDISCOUNT" + Environment.NewLine;
                    sqlText += "    ,@MOVEARRIVALCNT" + Environment.NewLine;
                    sqlText += "    ,@MOVEARRIVALPRICE" + Environment.NewLine;
                    sqlText += "    ,@MOVESHIPMENTCNT" + Environment.NewLine;
                    sqlText += "    ,@MOVESHIPMENTPRICE" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;
                    #endregion  //[Insert文作成]

                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                    {
                        sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                        //登録ヘッダ情報を設定
                        object obj = (object)this;
                        IFileHeader flhd = (IFileHeader)mTtlSalesStockSlipWork;
                        FileHeader fileHeader = new FileHeader(obj);
                        fileHeader.SetInsertHeader(ref flhd, obj);

                        #region Parameterオブジェクト作成
                        SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                        SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                        SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);
                        SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);
                        SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);
                        SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);
                        SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                        SqlParameter paraAddUpSecCode = sqlCommand.Parameters.Add("@ADDUPSECCODE", SqlDbType.NChar);
                        SqlParameter paraAddUpYearMonth = sqlCommand.Parameters.Add("@ADDUPYEARMONTH", SqlDbType.Int);
                        SqlParameter paraRsltTtlDivCd = sqlCommand.Parameters.Add("@RSLTTTLDIVCD", SqlDbType.Int);
                        SqlParameter paraCustomerCode = sqlCommand.Parameters.Add("@CUSTOMERCODE", SqlDbType.Int);
                        SqlParameter paraTotalSalesCount = sqlCommand.Parameters.Add("@TOTALSALESCOUNT", SqlDbType.Float);
                        SqlParameter paraSalesMoney = sqlCommand.Parameters.Add("@SALESMONEY", SqlDbType.BigInt);
                        SqlParameter paraSalesRetGoodsPrice = sqlCommand.Parameters.Add("@SALESRETGOODSPRICE", SqlDbType.BigInt);
                        SqlParameter paraDiscountPrice = sqlCommand.Parameters.Add("@DISCOUNTPRICE", SqlDbType.BigInt);
                        SqlParameter paraGrossProfit = sqlCommand.Parameters.Add("@GROSSPROFIT", SqlDbType.BigInt);
                        SqlParameter paraStockTotalPrice = sqlCommand.Parameters.Add("@STOCKTOTALPRICE", SqlDbType.BigInt);
                        SqlParameter paraTotalStockCount = sqlCommand.Parameters.Add("@TOTALSTOCKCOUNT", SqlDbType.Float);
                        SqlParameter paraStockRetGoodsPrice = sqlCommand.Parameters.Add("@STOCKRETGOODSPRICE", SqlDbType.BigInt);
                        SqlParameter paraStockTotalDiscount = sqlCommand.Parameters.Add("@STOCKTOTALDISCOUNT", SqlDbType.BigInt);
                        SqlParameter paraMoveArrivalCnt = sqlCommand.Parameters.Add("@MOVEARRIVALCNT", SqlDbType.Float);
                        SqlParameter paraMoveArrivalPrice = sqlCommand.Parameters.Add("@MOVEARRIVALPRICE", SqlDbType.BigInt);
                        SqlParameter paraMoveShipmentCnt = sqlCommand.Parameters.Add("@MOVESHIPMENTCNT", SqlDbType.Float);
                        SqlParameter paraMoveShipmentPrice = sqlCommand.Parameters.Add("@MOVESHIPMENTPRICE", SqlDbType.BigInt);
                        #endregion

                        #region Parameterオブジェクト設定
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(mTtlSalesStockSlipWork.CreateDateTime);
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(mTtlSalesStockSlipWork.UpdateDateTime);
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(mTtlSalesStockSlipWork.EnterpriseCode);
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(mTtlSalesStockSlipWork.FileHeaderGuid);
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(mTtlSalesStockSlipWork.UpdEmployeeCode);
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(mTtlSalesStockSlipWork.UpdAssemblyId1);
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(mTtlSalesStockSlipWork.UpdAssemblyId2);
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(mTtlSalesStockSlipWork.LogicalDeleteCode);
                        paraAddUpSecCode.Value = SqlDataMediator.SqlSetString(mTtlSalesStockSlipWork.AddUpSecCode);
                        //paraAddUpYearMonth.Value = SqlDataMediator.SqlSetInt32(mTtlSalesStockSlipWork.AddUpYearMonth);
                        paraAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM( TDateTime.LongDateToDateTime( mTtlSalesStockSlipWork.AddUpYearMonth));
                        paraRsltTtlDivCd.Value = SqlDataMediator.SqlSetInt32(mTtlSalesStockSlipWork.RsltTtlDivCd);
                        paraCustomerCode.Value = SqlDataMediator.SqlSetInt32(mTtlSalesStockSlipWork.CustomerCode);
                        paraTotalSalesCount.Value = SqlDataMediator.SqlSetDouble(mTtlSalesStockSlipWork.TotalSalesCount);
                        paraSalesMoney.Value = SqlDataMediator.SqlSetInt64(mTtlSalesStockSlipWork.SalesMoney);
                        paraSalesRetGoodsPrice.Value = SqlDataMediator.SqlSetInt64(mTtlSalesStockSlipWork.SalesRetGoodsPrice);
                        paraDiscountPrice.Value = SqlDataMediator.SqlSetInt64(mTtlSalesStockSlipWork.DiscountPrice);
                        paraGrossProfit.Value = SqlDataMediator.SqlSetInt64(mTtlSalesStockSlipWork.GrossProfit);
                        paraStockTotalPrice.Value = SqlDataMediator.SqlSetInt64(mTtlSalesStockSlipWork.StockTotalPrice);
                        paraTotalStockCount.Value = SqlDataMediator.SqlSetDouble(mTtlSalesStockSlipWork.TotalStockCount);
                        paraStockRetGoodsPrice.Value = SqlDataMediator.SqlSetInt64(mTtlSalesStockSlipWork.StockRetGoodsPrice);
                        paraStockTotalDiscount.Value = SqlDataMediator.SqlSetInt64(mTtlSalesStockSlipWork.StockTotalDiscount);
                        paraMoveArrivalCnt.Value = SqlDataMediator.SqlSetDouble(mTtlSalesStockSlipWork.MoveArrivalCnt);
                        paraMoveArrivalPrice.Value = SqlDataMediator.SqlSetInt64(mTtlSalesStockSlipWork.MoveArrivalPrice);
                        paraMoveShipmentCnt.Value = SqlDataMediator.SqlSetDouble(mTtlSalesStockSlipWork.MoveShipmentCnt);
                        paraMoveShipmentPrice.Value = SqlDataMediator.SqlSetInt64(mTtlSalesStockSlipWork.MoveShipmentPrice);
                        #endregion

                        sqlCommand.ExecuteNonQuery();
                    }

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 自社情報マスタを更新します
        /// </summary>
        /// <param name="monthlyAddUpWork">月次締更新履歴更新用ワーク</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <param name="updaemode">更新処理:0 解除処理:1</param>
        /// <remarks>
        /// <br>Note       : 自社情報マスタを更新します</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        private int WriteCompanyInf(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction, int updaemode)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            SqlDataReader myReader = null;
            int iCompanyBiginDate = 0;
            CompanyInfWork paraCompanyInfWork = new CompanyInfWork();

            try
            {
                string sqlText = string.Empty;
                sqlText += "SELECT *" + Environment.NewLine;
                sqlText += " FROM COMPANYINFRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "    AND COMPANYCODERF=0" + Environment.NewLine;
                SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);

                sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727

                //Prameterオブジェクトの作成
                SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                //Parameterオブジェクトへ値設定
                findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                
			    myReader = sqlCommand.ExecuteReader();

                if (myReader.Read())
                {
                    paraCompanyInfWork.FinancialYear = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FINANCIALYEARRF"));
                    iCompanyBiginDate = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("COMPANYBIGINDATERF")); // ADD
                    DateTime CompanyBiginDate = new DateTime();
                    CompanyBiginDate = TDateTime.LongDateToDateTime(iCompanyBiginDate);
                    if (updaemode == 0) 
                    {
                        // 更新処理
                        CompanyBiginDate = CompanyBiginDate.AddYears(1);
                        paraCompanyInfWork.FinancialYear = paraCompanyInfWork.FinancialYear + 1;
                    }
                    else 
                    {
                        // 解除処理
                        CompanyBiginDate = CompanyBiginDate.AddYears(-1);
                        paraCompanyInfWork.FinancialYear = paraCompanyInfWork.FinancialYear - 1;
                    }

                    sqlText = string.Empty;
                    sqlText += "UPDATE COMPANYINFRF SET" + Environment.NewLine;
                    sqlText += " FINANCIALYEARRF=@FINANCIALYEAR," + Environment.NewLine;
                    sqlText += " COMPANYBIGINDATERF=@COMPANYBIGINDATE" + Environment.NewLine;
                    sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    AND COMPANYCODERF=0" + Environment.NewLine;

                    sqlCommand.CommandText = sqlText;

                    //KEYコマンドを再設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);

                    //更新ヘッダ情報を設定
                    object obj = (object)this;
                    IFileHeader flhd = (IFileHeader)paraCompanyInfWork;
                    FileHeader fileHeader = new FileHeader(obj);
                    fileHeader.SetUpdateHeader(ref flhd, obj);

                    if (myReader.IsClosed == false) myReader.Close();

                    //Prameterオブジェクトの作成
                    SqlParameter paraFinancialYear = sqlCommand.Parameters.Add("@FINANCIALYEAR", SqlDbType.Int);
                    SqlParameter paraCompanyBiginDate = sqlCommand.Parameters.Add("@COMPANYBIGINDATE", SqlDbType.Int);
                    //Parameterオブジェクトへ値設定
                    paraFinancialYear.Value = SqlDataMediator.SqlSetInt32(paraCompanyInfWork.FinancialYear);
                    paraCompanyBiginDate.Value = SqlDataMediator.SqlSetInt32(TDateTime.DateTimeToLongDate(CompanyBiginDate));

                    sqlCommand.ExecuteNonQuery();
                    
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (myReader != null)
                {
                    if (myReader.IsClosed == false)
                    {
                        myReader.Close();
                    }
                    myReader.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// 月次締更新履歴マスタを更新します。
        /// </summary>
        /// <param name="monthlyAddUpHisWorkList">月次締更新履歴マスタ更新List</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 月次締更新履歴マスタを更新します。</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// </remarks>

        // 修正 2009/04/02 >>>
        //private int WriteMonthlyAddUpHis(ref MonthlyAddUpHisWork monthlyAddUpHisWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        private int WriteMonthlyAddUpHis(ref ArrayList monthlyAddUpHisWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        // 修正 2009/04/02 <<<
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

            string sqlText = string.Empty;
            MonthlyAddUpHisWork monthlyAddUpHisWork = new MonthlyAddUpHisWork(); // ADD 2009/04/02

            //INSERTコマンドの生成
            try
            {
                #region [2008.10.01 DEL]
                /* --- DEL 2008.10.01 ---------->>>>>
                // 2008.07.28 upd start -------------------------------------------->>
                //using (SqlCommand sqlCommand = new SqlCommand("INSERT INTO MONTHLYADDUPHISRF (CREATEDATETIMERF, UPDATEDATETIMERF, ENTERPRISECODERF, FILEHEADERGUIDRF, UPDEMPLOYEECODERF, UPDASSEMBLYID1RF, UPDASSEMBLYID2RF, LOGICALDELETECODERF, ADDUPSECCODERF, STMONCADDUPUPDDATERF, MONTHLYADDUPDATERF, MONTHADDUPYEARMONTHRF, MONTHADDUPEXPDATERF, LAMONCADDUPUPDDATERF) VALUES (@CREATEDATETIME, @UPDATEDATETIME, @ENTERPRISECODE, @FILEHEADERGUID, @UPDEMPLOYEECODE, @UPDASSEMBLYID1, @UPDASSEMBLYID2, @LOGICALDELETECODE, @ADDUPSECCODE, @STMONCADDUPUPDDATE, @MONTHLYADDUPDATE, @MONTHADDUPYEARMONTH, @MONTHADDUPEXPDATE, @LAMONCADDUPUPDDATE)", sqlConnection, sqlTransaction))
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM MONTHLYADDUPHISRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                sqlText += "    AND MONTHLYADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;
                sqlText += "    AND ACCRECACCPAYDIVRF=@ACCRECACCPAYDIV" + Environment.NewLine;

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaAccRecAccPayDiv = sqlCommand.Parameters.Add("@ACCRECACCPAYDIV", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.EnterpriseCode);
                    findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.AddUpSecCode);
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpHisWork.MonthlyAddUpDate);
                    findParaAccRecAccPayDiv.Value = SqlDataMediator.SqlSetInt32(monthlyAddUpHisWork.AccRecAccPayDiv);

                    sqlCommand.ExecuteNonQuery();
                }

                #region [Insert文作成]
                sqlText = string.Empty;
                sqlText += "INSERT INTO MONTHLYADDUPHISRF" + Environment.NewLine;
                sqlText += " (CREATEDATETIMERF" + Environment.NewLine;
                sqlText += "    ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += "    ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "    ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += "    ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += "    ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += "    ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += "    ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += "    ,ACCRECACCPAYDIVRF" + Environment.NewLine;
                sqlText += "    ,ADDUPSECCODERF" + Environment.NewLine;
                sqlText += "    ,STMONCADDUPUPDDATERF" + Environment.NewLine;
                sqlText += "    ,MONTHLYADDUPDATERF" + Environment.NewLine;
                sqlText += "    ,MONTHADDUPYEARMONTHRF" + Environment.NewLine;
                sqlText += "    ,MONTHADDUPEXPDATERF" + Environment.NewLine;
                sqlText += "    ,LAMONCADDUPUPDDATERF" + Environment.NewLine;
                sqlText += "    ,PROCDIVCDRF" + Environment.NewLine;
                sqlText += "    ,ERRORSTATUSRF" + Environment.NewLine;
                sqlText += "    ,HISTCTLCDRF" + Environment.NewLine;
                sqlText += "    ,PROCRESULTRF" + Environment.NewLine;
                sqlText += "    ,CONVERTPROCESSDIVCDRF" + Environment.NewLine;
                sqlText += "    ,CONVERTPROCESSDIVCDRF" + Environment.NewLine;
                sqlText += " )" + Environment.NewLine;
                sqlText += " VALUES" + Environment.NewLine;
                sqlText += " (@CREATEDATETIME" + Environment.NewLine;
                sqlText += "    ,@UPDATEDATETIME" + Environment.NewLine;
                sqlText += "    ,@ENTERPRISECODE" + Environment.NewLine;
                sqlText += "    ,@FILEHEADERGUID" + Environment.NewLine;
                sqlText += "    ,@UPDEMPLOYEECODE" + Environment.NewLine;
                sqlText += "    ,@UPDASSEMBLYID1" + Environment.NewLine;
                sqlText += "    ,@UPDASSEMBLYID2" + Environment.NewLine;
                sqlText += "    ,@LOGICALDELETECODE" + Environment.NewLine;
                sqlText += "    ,@ACCRECACCPAYDIV" + Environment.NewLine;
                sqlText += "    ,@ADDUPSECCODE" + Environment.NewLine;
                sqlText += "    ,@STMONCADDUPUPDDATE" + Environment.NewLine;
                sqlText += "    ,@MONTHLYADDUPDATE" + Environment.NewLine;
                sqlText += "    ,@MONTHADDUPYEARMONTH" + Environment.NewLine;
                sqlText += "    ,@MONTHADDUPEXPDATE" + Environment.NewLine;
                sqlText += "    ,@LAMONCADDUPUPDDATE" + Environment.NewLine;
                sqlText += "    ,@PROCDIVCD" + Environment.NewLine;
                sqlText += "    ,@ERRORSTATUS" + Environment.NewLine;
                sqlText += "    ,@HISTCTLCD" + Environment.NewLine;
                sqlText += "    ,@PROCRESULT" + Environment.NewLine;
                sqlText += "    ,@CONVERTPROCESSDIVCD" + Environment.NewLine;
                sqlText += " )" + Environment.NewLine;
                #endregion  //[Insert文作成]

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                // 2008.07.28 upd end ------------------------------------------<<
                {
                    //登録ヘッダ情報を設定
                    object obj = (object)this;
                    IFileHeader flhd = (IFileHeader)monthlyAddUpHisWork;
                    FileHeader fileHeader = new FileHeader(obj);
                    fileHeader.SetInsertHeader(ref flhd, obj);
                    
                    #region Parameterオブジェクト作成
                    SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);
                    SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);
                    SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);
                    SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);
                    SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                    SqlParameter paraAddUpSecCode = sqlCommand.Parameters.Add("@ADDUPSECCODE", SqlDbType.NChar);
                    SqlParameter paraStMonCAddUpUpdDate = sqlCommand.Parameters.Add("@STMONCADDUPUPDDATE", SqlDbType.Int);
                    SqlParameter paraMonthlyAddUpDate = sqlCommand.Parameters.Add("@MONTHLYADDUPDATE", SqlDbType.Int);
                    SqlParameter paraMonthAddUpYearMonth = sqlCommand.Parameters.Add("@MONTHADDUPYEARMONTH", SqlDbType.Int);
                    SqlParameter paraMonthAddUpExpDate = sqlCommand.Parameters.Add("@MONTHADDUPEXPDATE", SqlDbType.Int);
                    SqlParameter paraLaMonCAddUpUpdDate = sqlCommand.Parameters.Add("@LAMONCADDUPUPDDATE", SqlDbType.Int);
                    // 2008.07.28 add start ------------------------------------------->>
                    SqlParameter paraAccRecAccPayDiv = sqlCommand.Parameters.Add("@ACCRECACCPAYDIV", SqlDbType.Int);
                    SqlParameter paraProcDivCd = sqlCommand.Parameters.Add("@PROCDIVCD", SqlDbType.Int);
                    SqlParameter paraErrorStatus = sqlCommand.Parameters.Add("@ERRORSTATUS", SqlDbType.Int);
                    SqlParameter paraHistCtlCd = sqlCommand.Parameters.Add("@HISTCTLCD", SqlDbType.Int);
                    SqlParameter paraProcResult = sqlCommand.Parameters.Add("@PROCRESULT", SqlDbType.NVarChar);
                    SqlParameter paraConvertProcessDivCd = sqlCommand.Parameters.Add("@CONVERTPROCESSDIVCD", SqlDbType.Int);
                    // 2008.07.28 add end ---------------------------------------------<<
                    #endregion
                    
                    #region Parameterオブジェクト設定
                    paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(monthlyAddUpHisWork.CreateDateTime);
                    paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(monthlyAddUpHisWork.UpdateDateTime);
                    paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.EnterpriseCode);
                    paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(monthlyAddUpHisWork.FileHeaderGuid);
                    paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.UpdEmployeeCode);
                    paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.UpdAssemblyId1);
                    paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.UpdAssemblyId2);
                    paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(monthlyAddUpHisWork.LogicalDeleteCode);
                    paraAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.AddUpSecCode);
                    if (monthlyAddUpHisWork.StMonCAddUpUpdDate == DateTime.MinValue)
                    {
                        paraStMonCAddUpUpdDate.Value = 0;
                    }
                    else
                    {
                        paraStMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpHisWork.StMonCAddUpUpdDate);
                    }
                    paraMonthlyAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpHisWork.MonthlyAddUpDate);
                    paraMonthAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(monthlyAddUpHisWork.MonthAddUpYearMonth);
                    paraMonthAddUpExpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpHisWork.MonthAddUpExpDate);
                    paraLaMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpHisWork.LaMonCAddUpUpdDate);
                    // 2008.07.28 add start ------------------------------------------->>
                    paraAccRecAccPayDiv.Value = SqlDataMediator.SqlSetInt32(monthlyAddUpHisWork.AccRecAccPayDiv);
                    paraProcDivCd.Value = SqlDataMediator.SqlSetInt32(monthlyAddUpHisWork.ProcDivCd);
                    paraErrorStatus.Value = SqlDataMediator.SqlSetInt32(monthlyAddUpHisWork.ErrorStatus);
                    paraHistCtlCd.Value = SqlDataMediator.SqlSetInt32(monthlyAddUpHisWork.HistCtlCd);
                    paraProcResult.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.ProcResult);
                    paraConvertProcessDivCd.Value = SqlDataMediator.SqlSetInt32(monthlyAddUpHisWork.ConvertProcessDivCd);
                    // 2008.07.28 add end ---------------------------------------------<<
                    #endregion
                    
                    //暗号化キーパラメータ設定
                    //SqlParameter encKeyCustDmdPrcRF = sqlCommand.Parameters.Add("@CUSTDMDPRCRF_ENCRYPTKEY", SqlDbType.Char);
                    //encKeyCustDmdPrcRF.Value = sqlEncryptInfo.GetSymKeyName("CUSTDMDPRCRF");
                    
                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                   --- DEL 2008.10.01 ----------<<<<< */
                #endregion

                // --- ADD 2008.10.01 ---------->>>>>
                #region [Insert文作成]
                sqlText = string.Empty;
                sqlText += "INSERT INTO MONTHLYADDUPHISRF" + Environment.NewLine;
                sqlText += " (CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,ACCRECACCPAYDIVRF" + Environment.NewLine;
                sqlText += " ,ADDUPSECCODERF" + Environment.NewLine;
                sqlText += " ,STMONCADDUPUPDDATERF" + Environment.NewLine;
                sqlText += " ,MONTHLYADDUPDATERF" + Environment.NewLine;
                sqlText += " ,MONTHADDUPYEARMONTHRF" + Environment.NewLine;
                sqlText += " ,MONTHADDUPEXPDATERF" + Environment.NewLine;
                sqlText += " ,LAMONCADDUPUPDDATERF" + Environment.NewLine;
                sqlText += " ,DATAUPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,PROCDIVCDRF" + Environment.NewLine;
                sqlText += " ,ERRORSTATUSRF" + Environment.NewLine;
                sqlText += " ,HISTCTLCDRF" + Environment.NewLine;
                sqlText += " ,PROCRESULTRF" + Environment.NewLine;
                sqlText += " ,CONVERTPROCESSDIVCDRF" + Environment.NewLine;
                sqlText += " )" + Environment.NewLine;
                sqlText += " VALUES" + Environment.NewLine;
                sqlText += " (@CREATEDATETIME" + Environment.NewLine;
                sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                sqlText += " ,@ACCRECACCPAYDIV" + Environment.NewLine;
                sqlText += " ,@ADDUPSECCODE" + Environment.NewLine;
                sqlText += " ,@STMONCADDUPUPDDATE" + Environment.NewLine;
                sqlText += " ,@MONTHLYADDUPDATE" + Environment.NewLine;
                sqlText += " ,@MONTHADDUPYEARMONTH" + Environment.NewLine;
                sqlText += " ,@MONTHADDUPEXPDATE" + Environment.NewLine;
                sqlText += " ,@LAMONCADDUPUPDDATE" + Environment.NewLine;
                sqlText += " ,@DATAUPDATEDATETIME" + Environment.NewLine;
                sqlText += " ,@PROCDIVCD" + Environment.NewLine;
                sqlText += " ,@ERRORSTATUS" + Environment.NewLine;
                sqlText += " ,@HISTCTLCD" + Environment.NewLine;
                sqlText += " ,@PROCRESULT" + Environment.NewLine;
                sqlText += " ,@CONVERTPROCESSDIVCD" + Environment.NewLine;
                sqlText += " )" + Environment.NewLine;
                #endregion  //[Insert文作成]

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727

                    // ADD 2009/04/02 >>>
                    for (int i = 0; monthlyAddUpHisWorkList.Count > i; i++)
                    {
                        monthlyAddUpHisWork = monthlyAddUpHisWorkList[i] as MonthlyAddUpHisWork;
                    // ADD 2009/04/02 <<<
                        //登録ヘッダ情報を設定
                        object obj = (object)this;
                        IFileHeader flhd = (IFileHeader)monthlyAddUpHisWork;
                        FileHeader fileHeader = new FileHeader(obj);
                        fileHeader.SetInsertHeader(ref flhd, obj);

                        #region Parameterオブジェクト作成
                        SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                        SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                        SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);
                        SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);
                        SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);
                        SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);
                        SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                        SqlParameter paraAccRecAccPayDiv = sqlCommand.Parameters.Add("@ACCRECACCPAYDIV", SqlDbType.Int);
                        SqlParameter paraAddUpSecCode = sqlCommand.Parameters.Add("@ADDUPSECCODE", SqlDbType.NChar);
                        SqlParameter paraStMonCAddUpUpdDate = sqlCommand.Parameters.Add("@STMONCADDUPUPDDATE", SqlDbType.Int);
                        SqlParameter paraMonthlyAddUpDate = sqlCommand.Parameters.Add("@MONTHLYADDUPDATE", SqlDbType.Int);
                        SqlParameter paraMonthAddUpYearMonth = sqlCommand.Parameters.Add("@MONTHADDUPYEARMONTH", SqlDbType.Int);
                        SqlParameter paraMonthAddUpExpDate = sqlCommand.Parameters.Add("@MONTHADDUPEXPDATE", SqlDbType.Int);
                        SqlParameter paraLaMonCAddUpUpdDate = sqlCommand.Parameters.Add("@LAMONCADDUPUPDDATE", SqlDbType.Int);
                        SqlParameter paraDataUpdateDateTime = sqlCommand.Parameters.Add("@DATAUPDATEDATETIME", SqlDbType.BigInt);
                        SqlParameter paraProcDivCd = sqlCommand.Parameters.Add("@PROCDIVCD", SqlDbType.Int);
                        SqlParameter paraErrorStatus = sqlCommand.Parameters.Add("@ERRORSTATUS", SqlDbType.Int);
                        SqlParameter paraHistCtlCd = sqlCommand.Parameters.Add("@HISTCTLCD", SqlDbType.Int);
                        SqlParameter paraProcResult = sqlCommand.Parameters.Add("@PROCRESULT", SqlDbType.NVarChar);
                        SqlParameter paraConvertProcessDivCd = sqlCommand.Parameters.Add("@CONVERTPROCESSDIVCD", SqlDbType.Int);
                        #endregion

                        #region Parameterオブジェクト設定
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(monthlyAddUpHisWork.CreateDateTime);
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(monthlyAddUpHisWork.UpdateDateTime);
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.EnterpriseCode);
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(monthlyAddUpHisWork.FileHeaderGuid);
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.UpdEmployeeCode);
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.UpdAssemblyId1);
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.UpdAssemblyId2);
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(monthlyAddUpHisWork.LogicalDeleteCode);
                        paraAccRecAccPayDiv.Value = SqlDataMediator.SqlSetInt32(monthlyAddUpHisWork.AccRecAccPayDiv);
                        paraAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.AddUpSecCode);
                        if (monthlyAddUpHisWork.StMonCAddUpUpdDate == DateTime.MinValue)
                            paraStMonCAddUpUpdDate.Value = 0;
                        else
                            paraStMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpHisWork.StMonCAddUpUpdDate);
                        paraMonthlyAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpHisWork.MonthlyAddUpDate);
                        paraMonthAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(monthlyAddUpHisWork.MonthAddUpYearMonth);
                        paraMonthAddUpExpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpHisWork.MonthAddUpExpDate);
                        paraLaMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpHisWork.LaMonCAddUpUpdDate);
                        paraDataUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(monthlyAddUpHisWork.CreateDateTime);
                        paraProcDivCd.Value = SqlDataMediator.SqlSetInt32(monthlyAddUpHisWork.ProcDivCd);
                        paraErrorStatus.Value = SqlDataMediator.SqlSetInt32(monthlyAddUpHisWork.ErrorStatus);
                        paraHistCtlCd.Value = SqlDataMediator.SqlSetInt32(monthlyAddUpHisWork.HistCtlCd);
                        paraProcResult.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.ProcResult);
                        paraConvertProcessDivCd.Value = SqlDataMediator.SqlSetInt32(monthlyAddUpHisWork.ConvertProcessDivCd);
                        #endregion

                        //暗号化キーパラメータ設定
                        //SqlParameter encKeyCustDmdPrcRF = sqlCommand.Parameters.Add("@CUSTDMDPRCRF_ENCRYPTKEY", SqlDbType.Char);
                        //encKeyCustDmdPrcRF.Value = sqlEncryptInfo.GetSymKeyName("CUSTDMDPRCRF");

                        sqlCommand.ExecuteNonQuery();

                        sqlCommand.Parameters.Clear();

                    }
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                // --- ADD 2008.10.01 ----------<<<<<
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        // ↓ 2008.02.26 980081 a
        /// <summary>
        /// 月次集計企業管理テーブルを更新します。
        /// </summary>
        /// <param name="monthlyAddUpHisWork">月次締更新履歴マスタ更新List</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 月次集計企業管理テーブルを更新します。</br>
        /// <br>Programmer : 980081 山田 明友</br>
        /// <br>Date       : 2007.02.26</br>
        /// </remarks>
        private int WriteMTtlSumComp(ref MonthlyAddUpHisWork monthlyAddUpHisWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            const string summarizeSalesData = "SummarizeSalesData";
            const string summarizePurchase = "SummarizePurchase";
            const string summarizeStockData = "SummarizeStockData";

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;
            DateGetAcs dateGetAcs = DateGetAcs.GetInstance();

            //Selectコマンドの生成
            try
            {
                DateTime yearMonth;
                int year;
                DateTime startMonthDate;
                DateTime endMonthDate;
                dateGetAcs.GetYearMonth(monthlyAddUpHisWork.MonthlyAddUpDate, out yearMonth, out year, out startMonthDate, out endMonthDate);

                DateTime st_Month = yearMonth;
                DateTime ed_Month = yearMonth;

                if (monthlyAddUpHisWork.StMonCAddUpUpdDate == DateTime.MinValue)
                {
                    sqlCommand = new SqlCommand("SELECT MIN(DATERF) DATERF FROM (SELECT MIN(SALESDATERF) DATERF FROM SALESSLIPRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND RESULTSADDUPSECCDRF=@FINDSECTIONCODE UNION SELECT MIN(STOCKDATERF) DATERF FROM STOCKSLIPRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND STOCKADDUPSECTIONCDRF=@FINDSECTIONCODE UNION SELECT MIN(IOGOODSDAYRF) DATERF FROM STOCKACPAYHISTRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND SECTIONCODERF=@FINDSECTIONCODE) UNIONDATA", sqlConnection, sqlTransaction);
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    SqlParameter findParaEnterpriseCodeSec = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpSecCodeSec = sqlCommand.Parameters.Add("@FINDSECTIONCODE", SqlDbType.NChar);
                    findParaEnterpriseCodeSec.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.EnterpriseCode);
                    findParaAddUpSecCodeSec.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.AddUpSecCode);

                    myReader = sqlCommand.ExecuteReader();
                    DateTime firstDate = DateTime.MinValue;
                    if (myReader.Read())
                    {
                        firstDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("DATERF"));
                    }
                    if (firstDate != DateTime.MinValue)
                    {
                        dateGetAcs.GetYearMonth(firstDate, out yearMonth, out year, out startMonthDate, out endMonthDate);
                        st_Month = yearMonth;
                    }
                    if (myReader.IsClosed == false) myReader.Close();
                }
                else
                {
                    dateGetAcs.GetYearMonth(monthlyAddUpHisWork.StMonCAddUpUpdDate, out yearMonth, out year, out startMonthDate, out endMonthDate);
                    st_Month = yearMonth;
                }

                DateTime st_Day = DateTime.MinValue;
                DateTime ed_Day = DateTime.MinValue;
                DateTime loopMonth = st_Month;
                while (loopMonth <= ed_Month)
                {
                    dateGetAcs.GetDaysFromMonth(loopMonth, out st_Day, out ed_Day);

                    //売上月次集計
                    sqlCommand = new SqlCommand("SELECT * FROM MTTLSUMCOMPRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND PACKAGENAMERF=@FINDPACKAGENAME AND SUMMARIZEMODERF=@FINDSUMMARIZEMODE AND ADDUPYEARMONTHRF=@FINDADDUPYEARMONTH", sqlConnection, sqlTransaction);
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaPackageName = sqlCommand.Parameters.Add("@FINDPACKAGENAME", SqlDbType.NVarChar);
                    SqlParameter findParaSummarizeMode = sqlCommand.Parameters.Add("@FINDSUMMARIZEMODE", SqlDbType.Int);
                    SqlParameter findParaAddUpYearMonth = sqlCommand.Parameters.Add("@FINDADDUPYEARMONTH", SqlDbType.Int);
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.EnterpriseCode);
                    findParaPackageName.Value = SqlDataMediator.SqlSetString(summarizeSalesData);
                    findParaSummarizeMode.Value = 1;
                    findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(loopMonth);

                    myReader = sqlCommand.ExecuteReader();
                    if (myReader.Read())
                    {
                        //Updateコマンドの生成
                        sqlCommand.CommandText = "UPDATE MTTLSUMCOMPRF SET UPDATEDATETIMERF=@UPDATEDATETIME , LOGICALDELETECODERF=@LOGICALDELETECODE , ENTERPRISECODERF=@ENTERPRISECODE , PACKAGENAMERF=@PACKAGENAME , SUMMARIZEMODERF=@SUMMARIZEMODE , SUMMARIZESTAYEMONRF=@SUMMARIZESTAYEMON , SUMMARIZEENDYEMONRF=@SUMMARIZEENDYEMON , ADDUPYEARMONTHRF=@ADDUPYEARMONTH , SCHEDULEDATETIMERF=NULL , ISSUMMARIZEDRF=NULL , ISDWHSUMMARIZEDRF=NULL WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND PACKAGENAMERF=@FINDPACKAGENAME AND SUMMARIZEMODERF=@FINDSUMMARIZEMODE AND ADDUPYEARMONTHRF=@FINDADDUPYEARMONTH";
                        //KEYコマンドを再設定
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.EnterpriseCode);
                        findParaPackageName.Value = SqlDataMediator.SqlSetString(summarizeSalesData);
                        findParaSummarizeMode.Value = 1;
                        findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(loopMonth);
                    }
                    else
                    {
                        sqlCommand = new SqlCommand("INSERT INTO MTTLSUMCOMPRF (CREATEDATETIMERF, UPDATEDATETIMERF, LOGICALDELETECODERF, ENTERPRISECODERF, PACKAGENAMERF, SUMMARIZEMODERF, SUMMARIZESTAYEMONRF, SUMMARIZEENDYEMONRF, ADDUPYEARMONTHRF) VALUES (@CREATEDATETIME, @UPDATEDATETIME, @LOGICALDELETECODE, @ENTERPRISECODE, @PACKAGENAME, @SUMMARIZEMODE, @SUMMARIZESTAYEMON, @SUMMARIZEENDYEMON, @ADDUPYEARMONTH)", sqlConnection, sqlTransaction);
                        sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    }
                    if (myReader.IsClosed == false) myReader.Close();

                    MTtlSumCompWork mTtlSumCompWork = new MTtlSumCompWork();
                    mTtlSumCompWork.CreateDateTime = DateTime.Now;
                    mTtlSumCompWork.UpdateDateTime = DateTime.Now;
                    mTtlSumCompWork.LogicalDeleteCode = 0;
                    mTtlSumCompWork.EnterpriseCode = monthlyAddUpHisWork.EnterpriseCode;
                    mTtlSumCompWork.PackageName = summarizeSalesData;
                    mTtlSumCompWork.SummarizeMode = 1;

                    #region Parameterオブジェクトの作成(更新用)
                    SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                    SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter paraPackageName = sqlCommand.Parameters.Add("@PACKAGENAME", SqlDbType.NVarChar);
                    SqlParameter paraSummarizeMode = sqlCommand.Parameters.Add("@SUMMARIZEMODE", SqlDbType.Int);
                    SqlParameter paraSummarizeStaYeMon = sqlCommand.Parameters.Add("@SUMMARIZESTAYEMON", SqlDbType.Int);
                    SqlParameter paraSummarizeEndYeMon = sqlCommand.Parameters.Add("@SUMMARIZEENDYEMON", SqlDbType.Int);
                    SqlParameter paraAddUpYearMonth = sqlCommand.Parameters.Add("@ADDUPYEARMONTH", SqlDbType.Int);
                    #endregion

                    #region Parameterオブジェクトへ値設定(更新用)
                    paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(mTtlSumCompWork.CreateDateTime);
                    paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(mTtlSumCompWork.UpdateDateTime);
                    paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(mTtlSumCompWork.LogicalDeleteCode);
                    paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.EnterpriseCode);
                    paraPackageName.Value = SqlDataMediator.SqlSetString(mTtlSumCompWork.PackageName);
                    paraSummarizeMode.Value = SqlDataMediator.SqlSetInt32(mTtlSumCompWork.SummarizeMode);
                    paraSummarizeStaYeMon.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(st_Day);
                    paraSummarizeEndYeMon.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(ed_Day);
                    paraAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(loopMonth);
                    #endregion

                    sqlCommand.ExecuteNonQuery();


                    //仕入月次集計
                    sqlCommand = new SqlCommand("SELECT * FROM MTTLSUMCOMPRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND PACKAGENAMERF=@FINDPACKAGENAME AND SUMMARIZEMODERF=@FINDSUMMARIZEMODE AND ADDUPYEARMONTHRF=@FINDADDUPYEARMONTH", sqlConnection, sqlTransaction);
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    findParaPackageName = sqlCommand.Parameters.Add("@FINDPACKAGENAME", SqlDbType.NVarChar);
                    findParaSummarizeMode = sqlCommand.Parameters.Add("@FINDSUMMARIZEMODE", SqlDbType.Int);
                    findParaAddUpYearMonth = sqlCommand.Parameters.Add("@FINDADDUPYEARMONTH", SqlDbType.Int);
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.EnterpriseCode);
                    findParaPackageName.Value = SqlDataMediator.SqlSetString(summarizePurchase);
                    findParaSummarizeMode.Value = 1;
                    findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(loopMonth);

                    myReader = sqlCommand.ExecuteReader();
                    if (myReader.Read())
                    {
                        //Updateコマンドの生成
                        sqlCommand.CommandText = "UPDATE MTTLSUMCOMPRF SET UPDATEDATETIMERF=@UPDATEDATETIME , LOGICALDELETECODERF=@LOGICALDELETECODE , ENTERPRISECODERF=@ENTERPRISECODE , PACKAGENAMERF=@PACKAGENAME , SUMMARIZEMODERF=@SUMMARIZEMODE , SUMMARIZESTAYEMONRF=@SUMMARIZESTAYEMON , SUMMARIZEENDYEMONRF=@SUMMARIZEENDYEMON , ADDUPYEARMONTHRF=@ADDUPYEARMONTH , SCHEDULEDATETIMERF=NULL , ISSUMMARIZEDRF=NULL , ISDWHSUMMARIZEDRF=NULL WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND PACKAGENAMERF=@FINDPACKAGENAME AND SUMMARIZEMODERF=@FINDSUMMARIZEMODE AND ADDUPYEARMONTHRF=@FINDADDUPYEARMONTH";
                        //KEYコマンドを再設定
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.EnterpriseCode);
                        findParaPackageName.Value = SqlDataMediator.SqlSetString(summarizePurchase);
                        findParaSummarizeMode.Value = 1;
                        findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(loopMonth);
                    }
                    else
                    {
                        sqlCommand = new SqlCommand("INSERT INTO MTTLSUMCOMPRF (CREATEDATETIMERF, UPDATEDATETIMERF, LOGICALDELETECODERF, ENTERPRISECODERF, PACKAGENAMERF, SUMMARIZEMODERF, SUMMARIZESTAYEMONRF, SUMMARIZEENDYEMONRF, ADDUPYEARMONTHRF) VALUES (@CREATEDATETIME, @UPDATEDATETIME, @LOGICALDELETECODE, @ENTERPRISECODE, @PACKAGENAME, @SUMMARIZEMODE, @SUMMARIZESTAYEMON, @SUMMARIZEENDYEMON, @ADDUPYEARMONTH)", sqlConnection, sqlTransaction);
                        sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    }
                    if (myReader.IsClosed == false) myReader.Close();

                    mTtlSumCompWork.PackageName = summarizePurchase;

                    #region Parameterオブジェクトの作成(更新用)
                    paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                    paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                    paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                    paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                    paraPackageName = sqlCommand.Parameters.Add("@PACKAGENAME", SqlDbType.NVarChar);
                    paraSummarizeMode = sqlCommand.Parameters.Add("@SUMMARIZEMODE", SqlDbType.Int);
                    paraSummarizeStaYeMon = sqlCommand.Parameters.Add("@SUMMARIZESTAYEMON", SqlDbType.Int);
                    paraSummarizeEndYeMon = sqlCommand.Parameters.Add("@SUMMARIZEENDYEMON", SqlDbType.Int);
                    paraAddUpYearMonth = sqlCommand.Parameters.Add("@ADDUPYEARMONTH", SqlDbType.Int);
                    #endregion

                    #region Parameterオブジェクトへ値設定(更新用)
                    paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(mTtlSumCompWork.CreateDateTime);
                    paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(mTtlSumCompWork.UpdateDateTime);
                    paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(mTtlSumCompWork.LogicalDeleteCode);
                    paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.EnterpriseCode);
                    paraPackageName.Value = SqlDataMediator.SqlSetString(mTtlSumCompWork.PackageName);
                    paraSummarizeMode.Value = SqlDataMediator.SqlSetInt32(mTtlSumCompWork.SummarizeMode);
                    paraSummarizeStaYeMon.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(st_Day);
                    paraSummarizeEndYeMon.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(ed_Day);
                    paraAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(loopMonth);
                    #endregion

                    sqlCommand.ExecuteNonQuery();


                    //在庫月次集計
                    sqlCommand = new SqlCommand("SELECT * FROM MTTLSUMCOMPRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND PACKAGENAMERF=@FINDPACKAGENAME AND SUMMARIZEMODERF=@FINDSUMMARIZEMODE AND ADDUPYEARMONTHRF=@FINDADDUPYEARMONTH", sqlConnection, sqlTransaction);
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    findParaPackageName = sqlCommand.Parameters.Add("@FINDPACKAGENAME", SqlDbType.NVarChar);
                    findParaSummarizeMode = sqlCommand.Parameters.Add("@FINDSUMMARIZEMODE", SqlDbType.Int);
                    findParaAddUpYearMonth = sqlCommand.Parameters.Add("@FINDADDUPYEARMONTH", SqlDbType.Int);
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.EnterpriseCode);
                    findParaPackageName.Value = SqlDataMediator.SqlSetString(summarizeStockData);
                    findParaSummarizeMode.Value = 1;
                    findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(loopMonth);

                    myReader = sqlCommand.ExecuteReader();
                    if (myReader.Read())
                    {
                        //Updateコマンドの生成
                        sqlCommand.CommandText = "UPDATE MTTLSUMCOMPRF SET UPDATEDATETIMERF=@UPDATEDATETIME , LOGICALDELETECODERF=@LOGICALDELETECODE , ENTERPRISECODERF=@ENTERPRISECODE , PACKAGENAMERF=@PACKAGENAME , SUMMARIZEMODERF=@SUMMARIZEMODE , SUMMARIZESTAYEMONRF=@SUMMARIZESTAYEMON , SUMMARIZEENDYEMONRF=@SUMMARIZEENDYEMON , ADDUPYEARMONTHRF=@ADDUPYEARMONTH , SCHEDULEDATETIMERF=NULL , ISSUMMARIZEDRF=NULL , ISDWHSUMMARIZEDRF=NULL WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND PACKAGENAMERF=@FINDPACKAGENAME AND SUMMARIZEMODERF=@FINDSUMMARIZEMODE AND ADDUPYEARMONTHRF=@FINDADDUPYEARMONTH";
                        //KEYコマンドを再設定
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.EnterpriseCode);
                        findParaPackageName.Value = SqlDataMediator.SqlSetString(summarizeStockData);
                        findParaSummarizeMode.Value = 1;
                        findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(loopMonth);
                    }
                    else
                    {
                        sqlCommand = new SqlCommand("INSERT INTO MTTLSUMCOMPRF (CREATEDATETIMERF, UPDATEDATETIMERF, LOGICALDELETECODERF, ENTERPRISECODERF, PACKAGENAMERF, SUMMARIZEMODERF, SUMMARIZESTAYEMONRF, SUMMARIZEENDYEMONRF, ADDUPYEARMONTHRF) VALUES (@CREATEDATETIME, @UPDATEDATETIME, @LOGICALDELETECODE, @ENTERPRISECODE, @PACKAGENAME, @SUMMARIZEMODE, @SUMMARIZESTAYEMON, @SUMMARIZEENDYEMON, @ADDUPYEARMONTH)", sqlConnection, sqlTransaction);
                        sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    }
                    if (myReader.IsClosed == false) myReader.Close();

                    mTtlSumCompWork.PackageName = summarizeStockData;

                    #region Parameterオブジェクトの作成(更新用)
                    paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                    paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                    paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                    paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                    paraPackageName = sqlCommand.Parameters.Add("@PACKAGENAME", SqlDbType.NVarChar);
                    paraSummarizeMode = sqlCommand.Parameters.Add("@SUMMARIZEMODE", SqlDbType.Int);
                    paraSummarizeStaYeMon = sqlCommand.Parameters.Add("@SUMMARIZESTAYEMON", SqlDbType.Int);
                    paraSummarizeEndYeMon = sqlCommand.Parameters.Add("@SUMMARIZEENDYEMON", SqlDbType.Int);
                    paraAddUpYearMonth = sqlCommand.Parameters.Add("@ADDUPYEARMONTH", SqlDbType.Int);
                    #endregion

                    #region Parameterオブジェクトへ値設定(更新用)
                    paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(mTtlSumCompWork.CreateDateTime);
                    paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(mTtlSumCompWork.UpdateDateTime);
                    paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(mTtlSumCompWork.LogicalDeleteCode);
                    paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.EnterpriseCode);
                    paraPackageName.Value = SqlDataMediator.SqlSetString(mTtlSumCompWork.PackageName);
                    paraSummarizeMode.Value = SqlDataMediator.SqlSetInt32(mTtlSumCompWork.SummarizeMode);
                    paraSummarizeStaYeMon.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(st_Day);
                    paraSummarizeEndYeMon.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(ed_Day);
                    paraAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(loopMonth);
                    #endregion

                    sqlCommand.ExecuteNonQuery();

                    //翌月の集計へ
                    loopMonth = loopMonth.AddMonths(1);
                }

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }
        // ↑ 2008.02.26 980081 a
        #endregion

        #region [更新List生成処理]
        /// <summary>
        /// 売掛金額マスタ更新Listを生成します。
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ</param>
        /// <param name="custAccRecWorkList">売掛金額マスタ更新List</param>
        /// <param name="custAccRecChildWorkList">売掛金額マスタ更新List(子レコード用)</param>
        /// <param name="accRecDepoTotalList">売掛入金集計データ更新List</param>
        /// <param name="monthlyAddUpHisWork">月次締履歴マスタ更新</param>
        /// <param name="msgDiv">エラーメッセージ有無区分</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 売掛金額マスタ更新Listを生成します。</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        public int MakeMonthlyAddUpCustAccRecParameters(ref MonthlyAddUpWork monthlyAddUpWork, ref ArrayList custAccRecWorkList, ref ArrayList custAccRecChildWorkList, ref ArrayList accRecDepoTotalList, out MonthlyAddUpHisWork monthlyAddUpHisWork, out bool msgDiv, out string retMsg, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            // 修正 2009/04/02 >>>
            //status = MakeMonthlyAddUpCustAccRecParametersProc(ref monthlyAddUpWork, ref custAccRecWorkList, ref custAccRecChildWorkList, ref accRecDepoTotalList, out monthlyAddUpHisWork, 1, out msgDiv, out retMsg, ref sqlConnection);

            ArrayList monthlyAddUpHisWorkList = new ArrayList();
            status = MakeMonthlyAddUpCustAccRecParametersProc(ref monthlyAddUpWork, ref custAccRecWorkList, ref custAccRecChildWorkList, ref accRecDepoTotalList, out monthlyAddUpHisWorkList, 1, out msgDiv, out retMsg, ref sqlConnection);
            monthlyAddUpHisWork = monthlyAddUpHisWorkList[0] as MonthlyAddUpHisWork;
            
            // 修正 2009/04/02 <<<


            return status;
        }

        /// <summary>
        /// 売掛金額マスタ更新Listを生成します。
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ</param>
        /// <param name="custAccRecWorkList">売掛金額マスタ更新List</param>
        /// <param name="custAccRecChildWorkList">売掛金額マスタ更新List(子レコード用)</param>
        /// <param name="accRecDepoTotalList">売掛入金集計データ更新List</param>
        /// <param name="monthlyAddUpHisWorkList">月次締履歴マスタ更新</param>
        /// <param name="exclusiveOrderDiv">伝票更新排他制御区分</param>
        /// <param name="msgDiv">エラーメッセージ有無区分</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 売掛金額マスタ更新Listを生成します。</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        // 修正 2009/04/02 >>>
        //private int MakeMonthlyAddUpCustAccRecParametersProc(ref MonthlyAddUpWork monthlyAddUpWork, ref ArrayList custAccRecWorkList, ref ArrayList custAccRecChildWorkList, ref ArrayList accRecDepoTotalList, out MonthlyAddUpHisWork monthlyAddUpHisWork, int exclusiveOrderDiv, out bool msgDiv, out string retMsg, ref SqlConnection sqlConnection)
        private int MakeMonthlyAddUpCustAccRecParametersProc(ref MonthlyAddUpWork monthlyAddUpWork, ref ArrayList custAccRecWorkList, ref ArrayList custAccRecChildWorkList, ref ArrayList accRecDepoTotalList, out ArrayList monthlyAddUpHisWorkList, int exclusiveOrderDiv, out bool msgDiv, out string retMsg, ref SqlConnection sqlConnection)
        // 修正 2009/04/02 <<<
        {
            //●STATUS初期化
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            //月次締更新履歴マスタ
            // 修正 2009/04/02 >>>
            //monthlyAddUpHisWork = null;
            monthlyAddUpHisWorkList = new ArrayList();
            // 修正 2009/04/02 <<<

            msgDiv = false;
            retMsg = null;

            //売掛金額マスタ
            CustAccRecWork custAccRecWork = null;

            Int32[] customerCodeList = new Int32[1];

            try
            {
                //●売掛金額マスタ更新List作成処理
                if (custAccRecWorkList != null && custAccRecWorkList.Count > 0)
                {
                    for (int i = 0; i < custAccRecWorkList.Count; i++)
                    {
                        //------------------------- 売掛金額 Start -------------------------
                        custAccRecWork = custAccRecWorkList[i] as CustAccRecWork;
                        
                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

                        custAccRecWork.MonthAddUpExpDate = DateTime.Now;

                        //●前回売掛情報取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetMonthlyAddUpHisAndCustAccRec(ref custAccRecWork, ref sqlConnection);
                        }
                        //●入金マスタ取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetDepsitMain(ref custAccRecWork, ref custAccRecChildWorkList, ref sqlConnection);
                        }

                        //●入金明細データ＆入金マスタ取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetDepsitDtlMain(ref custAccRecWork, ref accRecDepoTotalList, ref sqlConnection);
                        }

                        //●売上データ取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetSalesSlip(ref custAccRecWork, ref custAccRecChildWorkList, ref sqlConnection);
                        }
                        //------------------------- 売掛金額 End -------------------------

                        //●不正STATUSであれば処理終了
                        if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            msgDiv = true;
                            retMsg = "伝票抽出中にエラーが発生しました。再度やり直してください。";
                            return (int)ConstantManagement.DB_Status.ctDB_WARNING;
                        }
                    }
                }

                //●月次締更新履歴マスタ更新List作成
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    //月次更新処理の場合
                    // 修正 2009/04/02 >>>
                    //status = MakeUpdateCustAccRecList(ref custAccRecWorkList, out monthlyAddUpHisWork, monthlyAddUpWork);
                    status = MakeUpdateCustAccRecList(ref custAccRecWorkList, out monthlyAddUpHisWorkList, monthlyAddUpWork);
                    // 修正 2009/04/02 <<<
                }
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.MakeMonthlyAddUpCustAccRecParameters Exception=" + ex.Message);
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }

            return status;
        }

        /// <summary>
        /// 買掛金額マスタ更新Listを生成します。
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ</param>
        /// <param name="suplAccPayWorkList">買掛金額マスタ更新List</param>
        /// <param name="suplAccPayChildWorkList">買掛金額マスタ更新List(子レコード用)</param>
        /// <param name="aCalcPayTotalList">買掛支払集計データ更新List</param>
        /// <param name="monthlyAddUpHisWork">月次締履歴マスタ更新</param>
        /// <param name="msgDiv">エラーメッセージ有無区分</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 買掛金額マスタ更新Listを生成します。</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        public int MakeMonthlyAddUpSuplAccPayParameters(ref MonthlyAddUpWork monthlyAddUpWork, ref ArrayList suplAccPayWorkList, ref ArrayList suplAccPayChildWorkList, ref ArrayList aCalcPayTotalList, out MonthlyAddUpHisWork monthlyAddUpHisWork, out bool msgDiv, out string retMsg, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            // 修正 2009/04/02 >>>
            //status = MakeMonthlyAddUpSuplAccPayParametersProc(ref monthlyAddUpWork, ref suplAccPayWorkList, ref suplAccPayChildWorkList, ref aCalcPayTotalList, out monthlyAddUpHisWork, 1, out msgDiv, out retMsg, ref sqlConnection);
            ArrayList monthlyAddUpHisWorkList = new ArrayList();
            status = MakeMonthlyAddUpSuplAccPayParametersProc(ref monthlyAddUpWork, ref suplAccPayWorkList, ref suplAccPayChildWorkList, ref aCalcPayTotalList, out monthlyAddUpHisWorkList, 1, out msgDiv, out retMsg, ref sqlConnection);
            monthlyAddUpHisWork = monthlyAddUpHisWorkList[0] as MonthlyAddUpHisWork;
            // 修正 2009/04/02 <<<

            return status;
        }

        /// <summary>
        /// 買掛金額マスタ更新Listを生成します。
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ</param>
        /// <param name="suplAccPayWorkList">買掛金額マスタ更新List</param>
        /// <param name="suplAccPayChildWorkList">買掛金額マスタ更新List(子レコード用)</param>
        /// <param name="aCalcPayTotalList">買掛支払集計データ更新List</param>
        /// <param name="monthlyAddUpHisWorkList">月次締履歴マスタ更新</param>
        /// <param name="exclusiveOrderDiv">伝票更新排他制御区分</param>
        /// <param name="msgDiv">エラーメッセージ有無区分</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 買掛金額マスタ更新Listを生成します。</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>

        // 修正 2009/04/02 >>>
        //private int MakeMonthlyAddUpSuplAccPayParametersProc(ref MonthlyAddUpWork monthlyAddUpWork, ref ArrayList suplAccPayWorkList, ref ArrayList suplAccPayChildWorkList, ref ArrayList aCalcPayTotalList, out MonthlyAddUpHisWork monthlyAddUpHisWork, int exclusiveOrderDiv, out bool msgDiv, out string retMsg, ref SqlConnection sqlConnection)
        private int MakeMonthlyAddUpSuplAccPayParametersProc(ref MonthlyAddUpWork monthlyAddUpWork, ref ArrayList suplAccPayWorkList, ref ArrayList suplAccPayChildWorkList, ref ArrayList aCalcPayTotalList, out ArrayList monthlyAddUpHisWorkList, int exclusiveOrderDiv, out bool msgDiv, out string retMsg, ref SqlConnection sqlConnection)
        // 修正 2009/04/02 <<<
        {
            //●STATUS初期化
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            //月次締更新履歴マスタ
            MonthlyAddUpHisWork monthlyAddUpHisWork = new MonthlyAddUpHisWork();
            monthlyAddUpHisWorkList = new ArrayList();

            msgDiv = false;
            retMsg = null;

            //買掛金額マスタ
            SuplAccPayWork suplAccPayWork = null;

            Int32[] customerCodeList = new Int32[1];

            try
            {
                //●買掛金額マスタ更新List作成処理
                if (suplAccPayWorkList != null && suplAccPayWorkList.Count > 0)
                {
                    //仕入先ごとにデータ取得
                    for (int i = 0; i < suplAccPayWorkList.Count; i++)
                    {
                        suplAccPayWork = suplAccPayWorkList[i] as SuplAccPayWork;

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

                        suplAccPayWork.MonthAddUpExpDate = DateTime.Now;

                        //------------------------- 買掛金額 Start -------------------------
                        //●仕入先より取得の場合は仕入金額処理区分設定マスタから端数処理区分を取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetSupplTaxAndFrac(ref suplAccPayWork, ref sqlConnection);
                        }
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                        {
                            //仕入金額処理区分設定が設定されていない場合
                            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                        }

                        // --- ADD 2008.09.17 ---------->>>>>
                        //●仕入先マスタ+税率設定マスタから下記項目を取得
                        //仕入先消費税転嫁方式コード・仕入先消費税税率
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetSupplierTaxRate(ref suplAccPayWork, ref sqlConnection);
                        }
                        // --- ADD 2008.09.17 ----------<<<<<

                        //●前回買掛情報取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetMonthlyAddUpHisAndSuplAccPay(ref suplAccPayWork, ref sqlConnection);
                        }
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                        {
                            //初期データ挿入時はデータがないので前回月次更新年月日に最小値を挿入する
                            suplAccPayWork.LaMonCAddUpUpdDate = DateTime.MinValue;
                            suplAccPayWork.StMonCAddUpUpdDate = DateTime.MinValue;
                            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                        }
                        //●支払伝票マスタ取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetPaymentSlp(ref suplAccPayWork, ref suplAccPayChildWorkList, ref sqlConnection);
                        }
                        //●支払明細データ＆支払マスタ取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetPaymentDtlMain(ref suplAccPayWork, ref aCalcPayTotalList, ref sqlConnection);
                        }
                        //●仕入データ取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetStockSlip(ref suplAccPayWork, ref suplAccPayChildWorkList, ref sqlConnection);                           
                        }
                        //------------------------- 買掛金額 End -------------------------

                        //●不正STATUSであれば処理終了
                        if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            msgDiv = true;
                            retMsg = "伝票抽出中にエラーが発生しました。再度やり直してください。";
                            return (int)ConstantManagement.DB_Status.ctDB_WARNING;
                        }
                    }
                }

                //●月次締更新履歴マスタ更新List作成
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    //月次更新処理の場合
                    // 修正 2009/04/02 >>>
                    //status = MakeUpdateSuplAccPayList(ref suplAccPayWorkList, out monthlyAddUpHisWork, monthlyAddUpWork);
                    status = MakeUpdateSuplAccPayList(ref suplAccPayWorkList, out monthlyAddUpHisWorkList, monthlyAddUpWork);
                    // 修正 2009/04/02 <<<
                }
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.MakeMonthlyAddUpParameters Exception=" + ex.Message);
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }

            return status;
        }

        // --- ADD 2012/09/13 ----------->>>>>
        /// <summary>
        /// 買掛金額マスタ更新Listを生成します。
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ</param>
        /// <param name="suplAccPayWorkList">買掛金額マスタ更新List</param>
        /// <param name="suplAccPayChildWorkList">買掛金額マスタ更新List(子レコード用)</param>
        /// <param name="aCalcPayTotalList">買掛支払集計データ更新List</param>
        /// <param name="monthlyAddUpHisWorkList">月次締履歴マスタ更新</param>
        /// <param name="exclusiveOrderDiv">伝票更新排他制御区分</param>
        /// <param name="msgDiv">エラーメッセージ有無区分</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入総括形式で買掛金額マスタ更新Listを生成します。</br>
        /// <br>Programmer : FSI佐々木 貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int MakeMonthlyAddUpSuplAccPayParamProcBySecCode(
              ref MonthlyAddUpWork monthlyAddUpWork
            , ref ArrayList suplAccPayWorkList
            , ref ArrayList suplAccPayChildWorkList
            , ref ArrayList aCalcPayTotalList
            , out ArrayList monthlyAddUpHisWorkList
            , int exclusiveOrderDiv
            , out bool msgDiv
            , out string retMsg
            , ref SqlConnection sqlConnection)
        {
            //●STATUS初期化
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            //月次締更新履歴マスタ
            MonthlyAddUpHisWork monthlyAddUpHisWork = new MonthlyAddUpHisWork();
            monthlyAddUpHisWorkList = new ArrayList();

            msgDiv = false;
            retMsg = null;

            //買掛金額マスタ
            SuplAccPayWork suplAccPayWork = null;

            Int32[] customerCodeList = new Int32[1];

            try
            {
                //●買掛金額マスタ更新List作成処理
                if (suplAccPayWorkList != null && suplAccPayWorkList.Count > 0)
                {
                    //仕入先ごとにデータ取得
                    for (int i = 0; i < suplAccPayWorkList.Count; i++)
                    {
                        suplAccPayWork = suplAccPayWorkList[i] as SuplAccPayWork;
                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                        suplAccPayWork.MonthAddUpExpDate = DateTime.Now;

                        //------------------------- 買掛金額 Start -------------------------
                        //●仕入先より取得の場合は仕入金額処理区分設定マスタから端数処理区分を取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetSupplTaxAndFrac(ref suplAccPayWork, ref sqlConnection);
                        }
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                        {
                            //仕入金額処理区分設定が設定されていない場合
                            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                        }

                        //●仕入先マスタ+税率設定マスタから下記項目を取得
                        //仕入先消費税転嫁方式コード・仕入先消費税税率
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetSupplierTaxRate(ref suplAccPayWork, ref sqlConnection);
                        }

                        //●前回買掛情報取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetMonthlyAddUpHisAndSuplAccPayBySecCode(ref suplAccPayWork, ref sqlConnection);
                        }
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                        {
                            //初期データ挿入時はデータがないので前回月次更新年月日に最小値を挿入する
                            suplAccPayWork.LaMonCAddUpUpdDate = DateTime.MinValue;
                            suplAccPayWork.StMonCAddUpUpdDate = DateTime.MinValue;
                            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                        }
                        //●支払伝票マスタ取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetPaymentSlpBySecCode(ref suplAccPayWork, ref sqlConnection);
                        }
                        //●支払明細データ＆支払マスタ取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetPaymentDtlMainBySecCode(ref suplAccPayWork, ref aCalcPayTotalList, ref sqlConnection);
                        }
                        //●仕入データ取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetStockSlipByAddUpSecCodeForMonthlyAddUp(ref suplAccPayWork, ref suplAccPayChildWorkList, ref sqlConnection);
                        }
                        //------------------------- 買掛金額 End -------------------------

                        //●不正STATUSであれば処理終了
                        if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            msgDiv = true;
                            retMsg = "伝票抽出中にエラーが発生しました。再度やり直してください。";
                            return (int)ConstantManagement.DB_Status.ctDB_WARNING;
                        }
                    }
                }

                //●月次締更新履歴マスタ更新List作成
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    status = MakeUpdateSuplAccPayList(ref suplAccPayWorkList, out monthlyAddUpHisWorkList, monthlyAddUpWork);
                }
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.MakeMonthlyAddUpParameters Exception=" + ex.Message);
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }

            return status;
        }
        // --- ADD 2012/09/13 -----------<<<<<

        /// <summary>
        /// 在庫履歴データ更新Listを生成します。
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ</param>
        /// <param name="stockHistoryWorkList">在庫履歴更新List</param>
        /// <param name="msgDiv">エラーメッセージ有無区分</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 在庫履歴データ更新Listを生成します。</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        public int MakeStockHistoryParameters(ref MonthlyAddUpWork monthlyAddUpWork, ref List<StockHistoryWork> stockHistoryWorkList, out bool msgDiv, out string retMsg, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            status = MakeStockHistoryParametersProc(ref monthlyAddUpWork, ref stockHistoryWorkList, out msgDiv, out retMsg, ref sqlConnection);

            return status;
        }

        /// <summary>
        /// 在庫履歴データ更新Listを生成します。
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ</param>
        /// <param name="stockHistoryWorkList">在庫履歴更新List</param>
        /// <param name="msgDiv">エラーメッセージ有無区分</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 在庫履歴データ更新Listを生成します。</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        private int MakeStockHistoryParametersProc(ref MonthlyAddUpWork monthlyAddUpWork, ref List<StockHistoryWork> stockHistoryWorkList, out bool msgDiv, out string retMsg, ref SqlConnection sqlConnection)
        {
            //●STATUS初期化
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            msgDiv = false;
            retMsg = null;
            try
            {
                // 修正 2008.12.22 >>>
                //在庫受払履歴データ集計 & 前月情報取得
                // -- UPD 2010/06/02 -------------------------------------->>>
                //status = GetStockAcPayHistMain(ref monthlyAddUpWork, ref stockHistoryWorkList, ref sqlConnection);
                status = GetStockAcPayHistMain(ref monthlyAddUpWork, ref stockHistoryWorkList, ref sqlConnection, 0);
                // -- UPD 2010/06/02 --------------------------------------<<<
                // 修正 2008.12.22 <<<

                //●不正STATUSであれば処理終了
                if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    msgDiv = true;
                    retMsg = "在庫履歴データ抽出中にエラーが発生しました。再度やり直してください。";
                    return (int)ConstantManagement.DB_Status.ctDB_WARNING;
                }
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.MakeMonthlyAddUpParameters Exception=" + ex.Message);
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }

            return status;
        }

        // -- ADD 2010/06/02 -------------------------------------------------->>>
        /// <summary>
        /// 在庫履歴データ更新Listを生成します。(単価の取得を行わない)
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ</param>
        /// <param name="stockHistoryWorkList">在庫履歴更新List</param>
        /// <param name="msgDiv">エラーメッセージ有無区分</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 在庫履歴データ更新Listを生成します。</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        public int MakeStockHistoryNotGetCost(ref MonthlyAddUpWork monthlyAddUpWork, ref List<StockHistoryWork> stockHistoryWorkList, out bool msgDiv, out string retMsg, ref SqlConnection sqlConnection)
        {
            //●STATUS初期化
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            msgDiv = false;
            retMsg = null;
            try
            {
                //在庫受払履歴データ集計 & 前月情報取得
                status = GetStockAcPayHistMain(ref monthlyAddUpWork, ref stockHistoryWorkList, ref sqlConnection, 1);

                //●不正STATUSであれば処理終了
                if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    msgDiv = true;
                    retMsg = "在庫履歴データ抽出中にエラーが発生しました。再度やり直してください。";
                    return (int)ConstantManagement.DB_Status.ctDB_WARNING;
                }
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.MakeMonthlyAddUpParameters Exception=" + ex.Message);
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }

            return status;
        }
        // -- ADD 2010/06/02 --------------------------------------------------<<<

        /// <summary>
        /// 売上仕入集計データ更新Listを生成します。
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ</param>
        /// <param name="mTtlSalesStockSlipWorkList">売上仕入集計データ更新List</param>
        /// <param name="msgDiv">エラーメッセージ有無区分</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 売上仕入集計データ更新Listを生成します。</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        public int MakeMTtlSalesStockSlipParameters(ref MonthlyAddUpWork monthlyAddUpWork, ref List<MTtlSalesStockSlipWork> mTtlSalesStockSlipWorkList, out bool msgDiv, out string retMsg, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            status = MakeMTtlSalesStockSlipParametersProc(ref monthlyAddUpWork, ref mTtlSalesStockSlipWorkList, out msgDiv, out retMsg, ref sqlConnection);

            return status;
        }

        /// <summary>
        /// 売上仕入集計データ更新Listを生成します。
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ</param>
        /// <param name="mTtlSalesStockSlipWorkList">売上仕入集計データ更新List</param>
        /// <param name="msgDiv">エラーメッセージ有無区分</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 売上仕入集計データ更新Listを生成します。</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        private int MakeMTtlSalesStockSlipParametersProc(ref MonthlyAddUpWork monthlyAddUpWork, ref List<MTtlSalesStockSlipWork> mTtlSalesStockSlipWorkList, out bool msgDiv, out string retMsg, ref SqlConnection sqlConnection)
        {
            //●STATUS初期化
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            msgDiv = false;
            retMsg = null;

            // 修正 2008.12.22
            try
            {
                // 売上・仕入・在庫移動データから集計
                status = MakeMTtlSalesStockSlip(ref monthlyAddUpWork, ref  mTtlSalesStockSlipWorkList, ref sqlConnection);

                //●不正STATUSであれば処理終了
                if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    msgDiv = true;
                    retMsg = "売上仕入月次集計データ抽出中にエラーが発生しました。再度やり直してください。";
                    return (int)ConstantManagement.DB_Status.ctDB_WARNING;
                }
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.MakeMonthlyAddUpParameters Exception=" + ex.Message);
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }
            // 修正 2008.12.22 <<<<

            return status;
        }

        #endregion

        #region [得意先マスタ]
        /// <summary>
        /// 得意先マスタ、税率設定マスタから更新情報を取得します
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ</param>
        /// <param name="custAccRecWorkList">得意先売掛金額ワーク用List</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 得意先マスタ、税率設定マスタから更新情報を取得します</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// </remarks>
        private int GetCustomer(ref MonthlyAddUpWork monthlyAddUpWork, ref ArrayList custAccRecWorkList, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlDataReader myReader = null;

            //得意先マスタ
            CustomerWork customerWork = null;
            //税率設定マスタ
            TaxRateSetWork taxRateSetWork = null;
            //売掛金額マスタ
            CustAccRecWork custAccRecWork = null;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    sqlCommand.Connection = sqlConnection;

                    #region [Select文作成]
                    string sqlText = string.Empty;
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += "   A.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "  ,A.CUSTOMERCODERF" + Environment.NewLine;
                    sqlText += "  ,A.NAMERF AS NAMERF" + Environment.NewLine;
                    sqlText += "  ,A.NAME2RF AS NAME2RF" + Environment.NewLine;
                    sqlText += "  ,A.CUSTOMERSNMRF AS CUSTOMERSNMRF" + Environment.NewLine;
                    sqlText += "  ,A.CLAIMCODERF" + Environment.NewLine;
                    sqlText += "  ,A.NAMERF AS CLAIMNAMERF" + Environment.NewLine;
                    sqlText += "  ,A.NAME2RF AS CLAIMNAME2RF" + Environment.NewLine;
                    sqlText += "  ,A.CUSTOMERSNMRF AS CLAIMSNMRF" + Environment.NewLine;
                    sqlText += "  ,A.TOTALDAYRF" + Environment.NewLine;
                    sqlText += "  ,(CASE WHEN A.CUSTCTAXLAYREFCDRF = 0 THEN B.CONSTAXLAYMETHODRF ELSE A.CONSTAXLAYMETHODRF END ) AS CONSTAXLAYMETHODRF" + Environment.NewLine;
                    sqlText += "  ,A.SALESCNSTAXFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE3RF" + Environment.NewLine;
                    sqlText += "  ,A.MNGSECTIONCODERF" + Environment.NewLine;
                    sqlText += "  ,A.ACCEPTWHOLESALERF" + Environment.NewLine;
                    sqlText += "  ,A.CLAIMSECTIONCODERF" + Environment.NewLine;
                    sqlText += " FROM" + Environment.NewLine;
                    sqlText += " (" + Environment.NewLine;
                    sqlText += "  CUSTOMERRF AS A" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    //税率設定マスタ
                    sqlText += "  LEFT JOIN TAXRATESETRF AS B" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "  ON A.ENTERPRISECODERF=B.ENTERPRISECODERF" + Environment.NewLine;
                    // DEL 2009/04/02 不要の結合の為削除
                    //得意先マスタ※請求先情報取得用
                    //sqlText += "  LEFT JOIN CUSTOMERRF AS C" + Environment.NewLine;
                    //sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    //sqlText += "  ON  A.ENTERPRISECODERF=C.ENTERPRISECODERF" + Environment.NewLine;
                    //sqlText += "  AND A.CLAIMCODERF=C.CUSTOMERCODERF" + Environment.NewLine;
                    // DEL 2009/04/02
                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode == "00" || monthlyAddUpWork.AddUpSecCode == "")
                    {
                        // 拠点情報設定マスタ
                        sqlText += "  INNER JOIN SECINFOSETRF AS D WITH(READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += "   ON  A.ENTERPRISECODERF = D.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "   AND A.CLAIMSECTIONCODERF = D.SECTIONCODERF" + Environment.NewLine;
                        sqlText += "   AND D.LOGICALDELETECODERF=0" + Environment.NewLine;

                    }
                    // 修正 2009/04/02 <<<

                    sqlText += " )" + Environment.NewLine;
                    //WHERE句
                    sqlText += " WHERE" + Environment.NewLine;
                    sqlText += "      A.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "      AND A.LOGICALDELETECODERF=0" + Environment.NewLine;
                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        sqlText += "  AND A.CLAIMSECTIONCODERF=@CLAIMSECTIONCODE" + Environment.NewLine;
                    }
                    // 修正 2009/04/02 <<<

                    sqlText += "  AND A.CUSTOMERCODERF=A.CLAIMCODERF" + Environment.NewLine;
                    
                    sqlCommand.CommandText = sqlText;

                    #endregion  //[Select文作成]

                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);

                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findClaimSectionCode = sqlCommand.Parameters.Add("@CLAIMSECTIONCODE", SqlDbType.NChar);
                        findClaimSectionCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }
                    // 修正 2009/04/02 <<<

                    myReader = sqlCommand.ExecuteReader();
                    while (myReader.Read())
                    {
                        customerWork = new CustomerWork();
                        custAccRecWork = new CustAccRecWork();
                        taxRateSetWork = new TaxRateSetWork();

                        //得意先マスタ・税率設定マスタからデータセット
                        customerWork = CopyToCustomerWorkFromReader(ref myReader);
                        taxRateSetWork = CopyToTaxRateSetWorkFromReader(ref myReader);

                        //●画面パラメータから
                        //売掛
                        //custAccRecWork.AddUpSecCode = monthlyAddUpWork.AddUpSecCode;        //計上拠点コード

                        custAccRecWork.AddUpDate = monthlyAddUpWork.AddUpDate;              //計上年月日
                        custAccRecWork.AddUpYearMonth = monthlyAddUpWork.AddUpYearMonth;    //計上年月

                        //●得意先マスタから
                        //売掛
                        custAccRecWork.EnterpriseCode = customerWork.EnterpriseCode;        //企業コード
                        custAccRecWork.ClaimCode = customerWork.ClaimCode;                  //請求先コード
                        custAccRecWork.ClaimName = customerWork.ClaimName;                  //請求先名称
                        custAccRecWork.ClaimName2 = customerWork.ClaimName2;                //請求先名称2
                        custAccRecWork.ClaimSnm = customerWork.ClaimSnm;                    //請求先略称
                        custAccRecWork.CustomerCode = customerWork.CustomerCode;            //得意先コード
                        custAccRecWork.CustomerName = customerWork.Name;                    //得意先名称
                        custAccRecWork.CustomerName2 = customerWork.Name2;                  //得意先名称2
                        custAccRecWork.CustomerSnm = customerWork.CustomerSnm;              //得意先略称
                        custAccRecWork.ConsTaxLayMethod = customerWork.ConsTaxLayMethod;    //消費税転嫁方式
                        custAccRecWork.FractionProcCd = customerWork.SalesCnsTaxFrcProcCd;  //売上消費税端数処理コード(端数処理区分)
                        custAccRecWork.AddUpSecCode = customerWork.ClaimSectionCode;        // 請求拠点コード
                        //●税率設定マスタから
                        //売掛　※買掛は仕入金額処理区分設定マスタ/仕入在庫全体設定マスタ
                        //custAccRecWork.FractionProcCd = taxRateSetWork.FractionProcCd;  //端数処理区分
                        //税率セット
                        if (custAccRecWork.AddUpDate >= taxRateSetWork.TaxRateStartDate && custAccRecWork.AddUpDate <= taxRateSetWork.TaxRateEndDate)
                        {
                            //税率
                            custAccRecWork.ConsTaxRate = taxRateSetWork.TaxRate;
                        }
                        else if (custAccRecWork.AddUpDate >= taxRateSetWork.TaxRateStartDate2 && custAccRecWork.AddUpDate <= taxRateSetWork.TaxRateEndDate2)
                        {
                            //税率2
                            custAccRecWork.ConsTaxRate = taxRateSetWork.TaxRate2;
                        }
                        else if (custAccRecWork.AddUpDate >= taxRateSetWork.TaxRateStartDate3 && custAccRecWork.AddUpDate <= taxRateSetWork.TaxRateEndDate3)
                        {
                            //税率3
                            custAccRecWork.ConsTaxRate = taxRateSetWork.TaxRate3;
                        }
                        
                        custAccRecWorkList.Add(custAccRecWork);//売掛List

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }

        /// <summary>
        /// 得意先マスタ、税率設定マスタから更新情報を取得します
        /// </summary>
        /// <param name="custAccRecWork">得意先売掛金額マスタ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 得意先マスタ、税率設定マスタから更新情報を取得します</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// </remarks>
        private int GetCustomerInfo(ref CustAccRecWork custAccRecWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlDataReader myReader = null;

            //得意先マスタ
            CustomerWork customerWork = null;
            //税率設定マスタ
            TaxRateSetWork taxRateSetWork = null;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    sqlCommand.Connection = sqlConnection;

                    #region [2008.09.17 DEL]
                    /* --- DEL 2008.09.17 ---------->>>>>
                    // 2008.07.28 upd start ------------------------------------------------>>
                    //sqlCommand.CommandText = "SELECT A.ENTERPRISECODERF,A.CUSTOMERCODERF,CAST(DECRYPTBYKEY(A.NAMERF) AS NVARCHAR(30)) AS NAMERF,CAST(DECRYPTBYKEY(A.NAME2RF) AS NVARCHAR(30)) AS NAME2RF,A.CUSTOMERSNMRF,A.CLAIMCODERF,CAST(DECRYPTBYKEY(A.CLAIMNAMERF) AS NVARCHAR(30)) AS CLAIMNAMERF,CAST(DECRYPTBYKEY(A.CLAIMNAME2RF) AS NVARCHAR(30)) AS CLAIMNAME2RF,A.CLAIMSNMRF,A.TOTALDAYRF,A.CONSTAXLAYMETHODRF, "
                    //                    + "B.TAXRATESTARTDATERF,B.TAXRATEENDDATERF,B.TAXRATERF,B.TAXRATESTARTDATE2RF,B.TAXRATEENDDATE2RF,B.TAXRATE2RF,B.TAXRATESTARTDATE3RF,B.TAXRATEENDDATE3RF,B.TAXRATE3RF "
                    //                    + ",A.MNGSECTIONCODERF,A.ACCEPTWHOLESALERF,A.SUPPLIERDIVRF "
                    //                    + "FROM ((CUSTOMERRF AS A WITH (READUNCOMMITTED) LEFT JOIN TAXRATESETRF AS B WITH (READUNCOMMITTED) ON A.ENTERPRISECODERF=B.ENTERPRISECODERF) LEFT JOIN SALESPROCMONEYRF AS C WITH (READUNCOMMITTED) ON A.ENTERPRISECODERF=C.ENTERPRISECODERF) WHERE A.ENTERPRISECODERF=@FINDENTERPRISECODE AND A.CUSTOMERCODERF=@FINDCUSTOMERCODE AND B.TAXRATECODERF=0 ";
                    string sqlText = string.Empty;
                    sqlText += "SELECT A.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    ,A.CUSTOMERCODERF" + Environment.NewLine;
                    sqlText += "    ,CAST" + Environment.NewLine;
                    sqlText += "    (DECRYPTBYKEY" + Environment.NewLine;
                    sqlText += "        (A.NAMERF" + Environment.NewLine;
                    sqlText += "        ) AS NVARCHAR" + Environment.NewLine;
                    sqlText += "        (30" + Environment.NewLine;
                    sqlText += "        )" + Environment.NewLine;
                    sqlText += "    ) AS NAMERF" + Environment.NewLine;
                    sqlText += "    ,CAST" + Environment.NewLine;
                    sqlText += "    (DECRYPTBYKEY" + Environment.NewLine;
                    sqlText += "        (A.NAME2RF" + Environment.NewLine;
                    sqlText += "        ) AS NVARCHAR" + Environment.NewLine;
                    sqlText += "        (30" + Environment.NewLine;
                    sqlText += "        )" + Environment.NewLine;
                    sqlText += "    ) AS NAME2RF" + Environment.NewLine;
                    sqlText += "    ,A.CUSTOMERSNMRF" + Environment.NewLine;
                    sqlText += "    ,A.CLAIMCODERF" + Environment.NewLine;
                    sqlText += "    ,CAST" + Environment.NewLine;
                    sqlText += "    (DECRYPTBYKEY" + Environment.NewLine;
                    sqlText += "        (A.CLAIMNAMERF" + Environment.NewLine;
                    sqlText += "        ) AS NVARCHAR" + Environment.NewLine;
                    sqlText += "        (30" + Environment.NewLine;
                    sqlText += "        )" + Environment.NewLine;
                    sqlText += "    ) AS CLAIMNAMERF" + Environment.NewLine;
                    sqlText += "    ,CAST" + Environment.NewLine;
                    sqlText += "    (DECRYPTBYKEY" + Environment.NewLine;
                    sqlText += "        (A.CLAIMNAME2RF" + Environment.NewLine;
                    sqlText += "        ) AS NVARCHAR" + Environment.NewLine;
                    sqlText += "        (30" + Environment.NewLine;
                    sqlText += "        )" + Environment.NewLine;
                    sqlText += "    ) AS CLAIMNAME2RF" + Environment.NewLine;
                    sqlText += "    ,A.CLAIMSNMRF" + Environment.NewLine;
                    sqlText += "    ,A.TOTALDAYRF" + Environment.NewLine;
                    sqlText += "    ,A.CONSTAXLAYMETHODRF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATESTARTDATERF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATEENDDATERF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATERF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATESTARTDATE2RF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATEENDDATE2RF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATE2RF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATESTARTDATE3RF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATEENDDATE3RF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATE3RF" + Environment.NewLine;
                    sqlText += "    ,A.MNGSECTIONCODERF" + Environment.NewLine;
                    sqlText += "    ,A.ACCEPTWHOLESALERF" + Environment.NewLine;
                    sqlText += " FROM" + Environment.NewLine;
                    sqlText += "    (" + Environment.NewLine;
                    sqlText += "        (CUSTOMERRF AS A WITH" + Environment.NewLine;
                    sqlText += "            (READUNCOMMITTED" + Environment.NewLine;
                    sqlText += "            ) LEFT" + Environment.NewLine;
                    sqlText += "        JOIN TAXRATESETRF AS B WITH" + Environment.NewLine;
                    sqlText += "        (READUNCOMMITTED" + Environment.NewLine;
                    sqlText += "        ) ON A.ENTERPRISECODERF=B.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "        ) LEFT" + Environment.NewLine;
                    sqlText += "    JOIN SALESPROCMONEYRF AS C WITH" + Environment.NewLine;
                    sqlText += "    (READUNCOMMITTED" + Environment.NewLine;
                    sqlText += "    ) ON A.ENTERPRISECODERF=C.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    )" + Environment.NewLine;
                    sqlText += " WHERE A.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    AND A.CUSTOMERCODERF=@FINDCUSTOMERCODE" + Environment.NewLine;
                    sqlText += "    AND B.TAXRATECODERF=0" + Environment.NewLine;
                    sqlCommand.CommandText = sqlText;
                    // 2008.07.28 upd end --------------------------------------------------<<
                       --- DEL 2008.09.17 ----------<<<<< */
                    #endregion

                    // --- ADD 2008.09.17 ---------->>>>>
                    #region [Select文作成]
                    string sqlText = string.Empty;
                    // 修正 2009/04/17 >>>
                    #region DEL 2009/04/17
                    /*
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += "   A.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "  ,A.CUSTOMERCODERF" + Environment.NewLine;
                    sqlText += "  ,CAST(DECRYPTBYKEY(A.NAMERF) AS NVARCHAR(30)) AS NAMERF" + Environment.NewLine;
                    sqlText += "  ,CAST(DECRYPTBYKEY(A.NAME2RF) AS NVARCHAR(30)) AS NAME2RF" + Environment.NewLine;
                    sqlText += "  ,A.CUSTOMERSNMRF" + Environment.NewLine;
                    sqlText += "  ,A.CLAIMCODERF" + Environment.NewLine;
                    sqlText += "  ,CAST(DECRYPTBYKEY(D.NAMERF) AS NVARCHAR(30)) AS CLAIMNAMERF" + Environment.NewLine;
                    sqlText += "  ,CAST(DECRYPTBYKEY(D.NAME2RF) AS NVARCHAR(30)) AS CLAIMNAME2RF" + Environment.NewLine;
                    sqlText += "  ,D.CUSTOMERSNMRF AS CLAIMSNMRF" + Environment.NewLine;
                    sqlText += "  ,A.TOTALDAYRF" + Environment.NewLine;
                    sqlText += "  ,A.CONSTAXLAYMETHODRF" + Environment.NewLine;
                    sqlText += "  ,A.SALESCNSTAXFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE3RF" + Environment.NewLine;
                    sqlText += "  ,A.MNGSECTIONCODERF" + Environment.NewLine;
                    sqlText += "  ,A.ACCEPTWHOLESALERF" + Environment.NewLine;
                    */
                    #endregion
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += "   A.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "  ,A.CUSTOMERCODERF" + Environment.NewLine;
                    sqlText += "  ,A.NAMERF AS NAMERF" + Environment.NewLine;
                    sqlText += "  ,A.NAME2RF AS NAME2RF" + Environment.NewLine;
                    sqlText += "  ,A.CUSTOMERSNMRF" + Environment.NewLine;
                    sqlText += "  ,A.CLAIMCODERF" + Environment.NewLine;
                    sqlText += "  ,D.NAMERF AS CLAIMNAMERF" + Environment.NewLine;
                    sqlText += "  ,D.NAME2RF AS CLAIMNAME2RF" + Environment.NewLine;
                    sqlText += "  ,D.CUSTOMERSNMRF AS CLAIMSNMRF" + Environment.NewLine;
                    sqlText += "  ,A.TOTALDAYRF" + Environment.NewLine;
                    sqlText += "  ,A.CONSTAXLAYMETHODRF" + Environment.NewLine;
                    sqlText += "  ,A.SALESCNSTAXFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE3RF" + Environment.NewLine;
                    sqlText += "  ,A.MNGSECTIONCODERF" + Environment.NewLine;
                    sqlText += "  ,A.ACCEPTWHOLESALERF" + Environment.NewLine;
                    sqlText += "  ,D.CLAIMSECTIONCODERF" + Environment.NewLine;
                    // 修正 2009/04/17 <<<
                    sqlText += " FROM" + Environment.NewLine;
                    sqlText += " (" + Environment.NewLine;
                    sqlText += "  CUSTOMERRF AS A" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    //税率設定マスタ
                    sqlText += "  LEFT JOIN TAXRATESETRF AS B" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "  ON A.ENTERPRISECODERF=B.ENTERPRISECODERF" + Environment.NewLine;
                    //売上金額処理区分設定マスタ
                    //sqlText += "  LEFT JOIN SALESPROCMONEYRF AS C" + Environment.NewLine;
                    //sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    //sqlText += "  ON A.ENTERPRISECODERF=C.ENTERPRISECODERF" + Environment.NewLine;
                    //得意先マスタ※請求先情報取得用
                    sqlText += "  LEFT JOIN CUSTOMERRF AS D" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "  ON  A.ENTERPRISECODERF=D.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "  AND A.CLAIMCODERF=D.CUSTOMERCODERF" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;
                    //WHERE句
                    sqlText += " WHERE" + Environment.NewLine;
                    sqlText += "     A.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += " AND A.CUSTOMERCODERF=@FINDCUSTOMERCODE" + Environment.NewLine;
                    sqlText += " AND B.TAXRATECODERF=0" + Environment.NewLine;

                    sqlCommand.CommandText = sqlText;
                    #endregion  //[Select文作成]
                    // --- ADD 2008.09.17 ----------<<<<<

                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                    findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.CustomerCode);

                    myReader = sqlCommand.ExecuteReader();
                    while (myReader.Read())
                    {
                        customerWork = new CustomerWork();
                        taxRateSetWork = new TaxRateSetWork();

                        //得意先マスタ・税率設定マスタからデータセット
                        customerWork = CopyToCustomerWorkFromReader(ref myReader);
                        taxRateSetWork = CopyToTaxRateSetWorkFromReader(ref myReader);

                        //●得意先マスタから
                        //売掛
                        custAccRecWork.EnterpriseCode = customerWork.EnterpriseCode;        //企業コード
                        custAccRecWork.ClaimCode = customerWork.ClaimCode;                  //請求先コード
                        custAccRecWork.ClaimName = customerWork.ClaimName;                  //請求先名称
                        custAccRecWork.ClaimName2 = customerWork.ClaimName2;                //請求先名称2
                        custAccRecWork.CustomerSnm = customerWork.CustomerSnm;              //得意先略称
                        custAccRecWork.ClaimSnm = customerWork.ClaimSnm;                    //請求先略称
                        custAccRecWork.CustomerCode = customerWork.CustomerCode;            //得意先コード
                        custAccRecWork.CustomerName = customerWork.Name;                    //得意先名称
                        custAccRecWork.CustomerName2 = customerWork.Name2;                  //得意先名称2
                        custAccRecWork.ConsTaxLayMethod = customerWork.ConsTaxLayMethod;    //消費税転嫁方式
                        // --- ADD 2008.09.17 ---------->>>>>
                        custAccRecWork.FractionProcCd = customerWork.SalesCnsTaxFrcProcCd;  //売上消費税端数処理コード(端数処理区分)
                        // --- ADD 2008.09.17 ----------<<<<<

                        //●税率設定マスタから
                        //売掛　※買掛は仕入金額処理区分設定マスタ/仕入在庫全体設定マスタ
                        //custAccRecWork.FractionProcCd = taxRateSetWork.FractionProcCd;  //端数処理区分
                        //税率セット
                        if (custAccRecWork.AddUpDate >= taxRateSetWork.TaxRateStartDate && custAccRecWork.AddUpDate <= taxRateSetWork.TaxRateEndDate)
                        {
                            //税率
                            custAccRecWork.ConsTaxRate = taxRateSetWork.TaxRate;
                        }
                        else if (custAccRecWork.AddUpDate >= taxRateSetWork.TaxRateStartDate2 && custAccRecWork.AddUpDate <= taxRateSetWork.TaxRateEndDate2)
                        {
                            //税率2
                            custAccRecWork.ConsTaxRate = taxRateSetWork.TaxRate2;
                        }
                        else if (custAccRecWork.AddUpDate >= taxRateSetWork.TaxRateStartDate3 && custAccRecWork.AddUpDate <= taxRateSetWork.TaxRateEndDate3)
                        {
                            //税率3
                            custAccRecWork.ConsTaxRate = taxRateSetWork.TaxRate3;
                        }

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        #endregion

        #region [仕入先マスタ]
        /// <summary>
        /// 仕入先マスタから更新情報を取得します
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額ワーク</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先マスタ、税率設定マスタから更新情報を取得します</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        private int GetSupplierInfo(ref SuplAccPayWork suplAccPayWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlDataReader myReader = null;

            //仕入先マスタ
            SupplierWork supplierWork = null;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    sqlCommand.Connection = sqlConnection;

                    #region  [2008.09.17 DEL]
                    /* --- DEL 2008.09.17 ---------->>>>>
                    string sqlText = string.Empty;
                    sqlText += "SELECT " + Environment.NewLine;
                    sqlText += "     A.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += "    ,A.MNGSECTIONCODERF" + Environment.NewLine;
                    sqlText += "    ,A.INPSECTIONCODERF" + Environment.NewLine;
                    sqlText += "    ,A.PAYMENTSECTIONCODERF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERNM1RF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERNM2RF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPHONORIFICTITLERF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERKANARF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERSNMRF" + Environment.NewLine;
                    sqlText += "    ,A.ORDERHONORIFICTTLRF" + Environment.NewLine;
                    sqlText += "    ,A.BUSINESSTYPECODERF" + Environment.NewLine;
                    sqlText += "    ,A.SALESAREACODERF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERPOSTNORF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERADDR1RF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERADDR3RF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERADDR4RF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERTELNORF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERTELNO1RF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERTELNO2RF" + Environment.NewLine;
                    sqlText += "    ,A.PURECODERF" + Environment.NewLine;
                    sqlText += "    ,A.PAYMENTMONTHCODERF" + Environment.NewLine;
                    sqlText += "    ,A.PAYMENTMONTHNAMERF" + Environment.NewLine;
                    sqlText += "    ,A.PAYMENTDAYRF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPCTAXLAYREFCDRF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPCTAXLAYCDRF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPCTAXATIONCDRF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPENTERPRISECDRF" + Environment.NewLine;
                    sqlText += "    ,A.PAYEECODERF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERATTRIBUTEDIVRF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPTTLAMNTDSPWAYCDRF" + Environment.NewLine;
                    sqlText += "    ,A.STCKTTLAMNTDSPWAYREFRF" + Environment.NewLine;
                    sqlText += "    ,A.PAYMENTCONDRF" + Environment.NewLine;
                    sqlText += "    ,A.PAYMENTTOTALDAYRF" + Environment.NewLine;
                    sqlText += "    ,A.PAYMENTSIGHTRF" + Environment.NewLine;
                    sqlText += "    ,A.STOCKAGENTCODERF" + Environment.NewLine;
                    sqlText += "    ,A.STOCKUNPRCFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "    ,A.STOCKMONEYFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "    ,A.STOCKCNSTAXFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "    ,A.NTIMECALCSTDATERF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERNOTE1RF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERNOTE2RF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERNOTE3RF" + Environment.NewLine;
                    sqlText += "    ,A.SUPPLIERNOTE4RF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATESTARTDATERF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATEENDDATERF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATERF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATESTARTDATE2RF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATEENDDATE2RF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATE2RF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATESTARTDATE3RF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATEENDDATE3RF" + Environment.NewLine;
                    sqlText += "    ,B.TAXRATE3RF" + Environment.NewLine;
                    sqlText += " FROM (SUPPLIERRF AS A WITH" + Environment.NewLine;
                    sqlText += "     (READUNCOMMITTED) " + Environment.NewLine;
                    sqlText += " LEFT JOIN TAXRATESETRF AS B WITH" + Environment.NewLine;
                    sqlText += " (READUNCOMMITTED" + Environment.NewLine;
                    sqlText += " ) ON A.ENTERPRISECODERF=B.ENTERPRISECODERF)" + Environment.NewLine;
                    sqlText += " WHERE A.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    AND A.SUPPLIERCDRF=@FINDSUPPLIERCD" + Environment.NewLine;
                    sqlText += "    AND B.TAXRATECODERF=0" + Environment.NewLine;

                    sqlCommand.CommandText = sqlText;
                       --- DEL 2008.09.17 ----------<<<<< */
                    #endregion

                    // --- ADD 2008.09.17 ---------->>>>>
                    #region  [Select文作成]
                    string sqlText = string.Empty;
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += "   A.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += "  ,A.MNGSECTIONCODERF" + Environment.NewLine;
                    sqlText += "  ,A.INPSECTIONCODERF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTSECTIONCODERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNM1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNM2RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPHONORIFICTITLERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERKANARF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERSNMRF" + Environment.NewLine;
                    sqlText += "  ,A.ORDERHONORIFICTTLRF" + Environment.NewLine;
                    sqlText += "  ,A.BUSINESSTYPECODERF" + Environment.NewLine;
                    sqlText += "  ,A.SALESAREACODERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERPOSTNORF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERADDR1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERADDR3RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERADDR4RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERTELNORF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERTELNO1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERTELNO2RF" + Environment.NewLine;
                    sqlText += "  ,A.PURECODERF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTMONTHCODERF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTMONTHNAMERF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTDAYRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPCTAXLAYREFCDRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPCTAXLAYCDRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPCTAXATIONCDRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPENTERPRISECDRF" + Environment.NewLine;
                    sqlText += "  ,A.PAYEECODERF" + Environment.NewLine;
                    sqlText += "  ,C.SUPPLIERNM1RF AS PAYEENM1RF" + Environment.NewLine;
                    sqlText += "  ,C.SUPPLIERNM2RF AS PAYEENM2RF" + Environment.NewLine;
                    sqlText += "  ,C.SUPPLIERSNMRF AS PAYEESNMRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERATTRIBUTEDIVRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPTTLAMNTDSPWAYCDRF" + Environment.NewLine;
                    sqlText += "  ,A.STCKTTLAMNTDSPWAYREFRF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTCONDRF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTTOTALDAYRF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTSIGHTRF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKAGENTCODERF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKUNPRCFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKMONEYFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKCNSTAXFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "  ,A.NTIMECALCSTDATERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE2RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE3RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE4RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE3RF" + Environment.NewLine;
                    sqlText += " FROM" + Environment.NewLine;
                    sqlText += " (" + Environment.NewLine;
                    sqlText += "  SUPPLIERRF AS A" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED) " + Environment.NewLine;
                    //税率設定マスタ
                    sqlText += "  LEFT JOIN TAXRATESETRF AS B" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "  ON A.ENTERPRISECODERF=B.ENTERPRISECODERF" + Environment.NewLine;
                    //仕入先マスタ※支払先情報取得用
                    sqlText += "  LEFT JOIN SUPPLIERRF AS C" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "  ON  A.ENTERPRISECODERF=C.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "  AND A.PAYEECODERF=C.SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;
                    //WHRERE句
                    sqlText += " WHERE" + Environment.NewLine;
                    sqlText += "      A.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND A.SUPPLIERCDRF=@FINDSUPPLIERCD" + Environment.NewLine;
                    sqlText += "  AND B.TAXRATECODERF=0" + Environment.NewLine;

                    sqlCommand.CommandText = sqlText;
                    #endregion  //[Select文作成]
                    // --- ADD 2008.09.17 ----------<<<<<

                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaSupplierCd = sqlCommand.Parameters.Add("@FINDSUPPLIERCD", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                    findParaSupplierCd.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);

                    myReader = sqlCommand.ExecuteReader();
                    while (myReader.Read())
                    {
                        supplierWork = new SupplierWork();

                        //仕入先マスタからデータセット
                        supplierWork = CopyToSupplierWorkFromReader(ref myReader);

                        //●仕入先マスタから
                        //買掛
                        suplAccPayWork.EnterpriseCode = supplierWork.EnterpriseCode;   //企業コード
                        suplAccPayWork.PayeeCode = supplierWork.PayeeCode;             //支払先コード
                        suplAccPayWork.PayeeName = supplierWork.PayeeName;             //支払先名称
                        suplAccPayWork.PayeeName2 = supplierWork.PayeeName2;           //支払先名称2
                        suplAccPayWork.PayeeSnm = supplierWork.PayeeSnm;               //支払先略称

                        suplAccPayWork.SupplierCd = supplierWork.SupplierCd;           //仕入先コード
                        suplAccPayWork.SupplierNm1 = supplierWork.SupplierNm1;         //仕入先名称
                        suplAccPayWork.SupplierNm2 = supplierWork.SupplierNm2;         //仕入先名称2
                        suplAccPayWork.SupplierSnm = supplierWork.SupplierSnm;         //仕入先略称
                        suplAccPayWork.SuppCTaxLayCd = supplierWork.SuppCTaxLayCd;     //仕入先消費税転嫁方式コード
                        // --- ADD 2008.09.17 ---------->>>>>
                        suplAccPayWork.FractionProcCd = supplierWork.StockCnsTaxFrcProcCd;  //仕入消費税端数処理コード
                        // --- ADD 2008.09.17 ----------<<<<<

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }

        // --- ADD 2012/09/13 ----------->>>>>
        /// <summary>
        /// 仕入先マスタから更新情報を取得します
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額ワーク</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先マスタ、税率設定マスタから仕入総括形式で更新情報を取得します</br>
        /// <br>Programmer : FSI佐々木　貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int GetSupplierInfoByAddUpSecCode(ref SuplAccPayWork suplAccPayWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlDataReader myReader = null;

            //仕入先マスタ
            SupplierWork supplierWork = null;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.CommandTimeout = TimeOut;
                    sqlCommand.Connection = sqlConnection;

                    #region  [Select文作成]
                    string sqlText = string.Empty;
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += "   A.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += "  ,A.MNGSECTIONCODERF" + Environment.NewLine;
                    sqlText += "  ,A.INPSECTIONCODERF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTSECTIONCODERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNM1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNM2RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPHONORIFICTITLERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERKANARF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERSNMRF" + Environment.NewLine;
                    sqlText += "  ,A.ORDERHONORIFICTTLRF" + Environment.NewLine;
                    sqlText += "  ,A.BUSINESSTYPECODERF" + Environment.NewLine;
                    sqlText += "  ,A.SALESAREACODERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERPOSTNORF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERADDR1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERADDR3RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERADDR4RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERTELNORF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERTELNO1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERTELNO2RF" + Environment.NewLine;
                    sqlText += "  ,A.PURECODERF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTMONTHCODERF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTMONTHNAMERF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTDAYRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPCTAXLAYREFCDRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPCTAXLAYCDRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPCTAXATIONCDRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPENTERPRISECDRF" + Environment.NewLine;
                    sqlText += "  ,A.PAYEECODERF" + Environment.NewLine;
                    sqlText += "  ,C.SUPPLIERNM1RF AS PAYEENM1RF" + Environment.NewLine;
                    sqlText += "  ,C.SUPPLIERNM2RF AS PAYEENM2RF" + Environment.NewLine;
                    sqlText += "  ,C.SUPPLIERSNMRF AS PAYEESNMRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERATTRIBUTEDIVRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPTTLAMNTDSPWAYCDRF" + Environment.NewLine;
                    sqlText += "  ,A.STCKTTLAMNTDSPWAYREFRF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTCONDRF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTTOTALDAYRF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTSIGHTRF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKAGENTCODERF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKUNPRCFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKMONEYFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKCNSTAXFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "  ,A.NTIMECALCSTDATERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE2RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE3RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE4RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE3RF" + Environment.NewLine;
                    sqlText += " FROM" + Environment.NewLine;
                    sqlText += " (" + Environment.NewLine;
                    sqlText += "  SUPPLIERRF AS A" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED) " + Environment.NewLine;
                    //税率設定マスタ
                    sqlText += "  LEFT JOIN TAXRATESETRF AS B" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "  ON A.ENTERPRISECODERF=B.ENTERPRISECODERF" + Environment.NewLine;
                    //仕入先マスタ※支払先情報取得用
                    sqlText += "  LEFT JOIN SUPPLIERRF AS C" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "  ON  A.ENTERPRISECODERF=C.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "  AND A.PAYEECODERF=C.SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;
                    //WHRERE句
                    sqlText += " WHERE" + Environment.NewLine;
                    sqlText += "      A.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND A.SUPPLIERCDRF=@FINDSUPPLIERCD" + Environment.NewLine;
                    sqlText += "  AND B.TAXRATECODERF=0" + Environment.NewLine;

                    sqlCommand.CommandText = sqlText;
                    #endregion  //[Select文作成]

                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaSupplierCd = sqlCommand.Parameters.Add("@FINDSUPPLIERCD", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                    findParaSupplierCd.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);

                    myReader = sqlCommand.ExecuteReader();
                    while (myReader.Read())
                    {
                        supplierWork = new SupplierWork();

                        //仕入先マスタからデータセット
                        supplierWork = CopyToSupplierWorkFromReader(ref myReader);

                        //●仕入先マスタから
                        suplAccPayWork.EnterpriseCode = supplierWork.EnterpriseCode;   //企業コード
                        suplAccPayWork.SupplierCd = supplierWork.SupplierCd;           //仕入先コード
                        suplAccPayWork.SupplierNm1 = supplierWork.SupplierNm1;         //仕入先名称
                        suplAccPayWork.SupplierNm2 = supplierWork.SupplierNm2;         //仕入先名称2
                        suplAccPayWork.SupplierSnm = supplierWork.SupplierSnm;         //仕入先略称
                        suplAccPayWork.SuppCTaxLayCd = supplierWork.SuppCTaxLayCd;     //仕入先消費税転嫁方式コード
                        suplAccPayWork.FractionProcCd = supplierWork.StockCnsTaxFrcProcCd;  //仕入消費税端数処理コード
                        suplAccPayWork.PayeeCode = supplierWork.SupplierCd;             //支払先コード
                        suplAccPayWork.PayeeName = supplierWork.SupplierNm1;             //支払先名称
                        suplAccPayWork.PayeeName2 = supplierWork.SupplierNm2;           //支払先名称2
                        suplAccPayWork.PayeeSnm = supplierWork.SupplierSnm;               //支払先略称

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        // --- ADD 2012/09/13 -----------<<<<<

        /// <summary>
        /// 仕入先マスタ、税率設定マスタから更新情報を取得します
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ</param>
        /// <param name="suplAccPayWorkList">仕入先買掛金額ワーク用List</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先マスタ、税率設定マスタから更新情報を取得します</br>
        /// <br>Programmer : 20081　疋田 勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        private int GetSupplier(ref MonthlyAddUpWork monthlyAddUpWork, ref ArrayList suplAccPayWorkList, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlDataReader myReader = null;

            //仕入先マスタ
            SupplierWork supplierWork = null;
            //税率設定マスタ
            TaxRateSetWork taxRateSetWork = null;
            //買掛金額マスタ
            SuplAccPayWork suplAccPayWork = null;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    sqlCommand.Connection = sqlConnection;

                    #region [Select文作成]
                    string sqlText = string.Empty;
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += "   A.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += "  ,A.MNGSECTIONCODERF" + Environment.NewLine;
                    sqlText += "  ,A.INPSECTIONCODERF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTSECTIONCODERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNM1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNM2RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPHONORIFICTITLERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERKANARF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERSNMRF" + Environment.NewLine;
                    sqlText += "  ,A.ORDERHONORIFICTTLRF" + Environment.NewLine;
                    sqlText += "  ,A.BUSINESSTYPECODERF" + Environment.NewLine;
                    sqlText += "  ,A.SALESAREACODERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERPOSTNORF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERADDR1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERADDR3RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERADDR4RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERTELNORF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERTELNO1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERTELNO2RF" + Environment.NewLine;
                    sqlText += "  ,A.PURECODERF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTMONTHCODERF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTMONTHNAMERF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTDAYRF" + Environment.NewLine;                    
                    sqlText += "  ,A.SUPPCTAXLAYREFCDRF" + Environment.NewLine;
                    //sqlText += "  ,A.SUPPCTAXLAYCDRF" + Environment.NewLine;
                    sqlText += "  ,(CASE WHEN A.SUPPCTAXLAYREFCDRF = 0 THEN B.CONSTAXLAYMETHODRF ELSE A.SUPPCTAXLAYCDRF END) AS SUPPCTAXLAYCDRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPCTAXATIONCDRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPENTERPRISECDRF" + Environment.NewLine;
                    sqlText += "  ,A.PAYEECODERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNM1RF AS PAYEENM1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNM2RF AS PAYEENM2RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERSNMRF AS PAYEESNMRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERATTRIBUTEDIVRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPTTLAMNTDSPWAYCDRF" + Environment.NewLine;
                    sqlText += "  ,A.STCKTTLAMNTDSPWAYREFRF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTCONDRF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTTOTALDAYRF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTSIGHTRF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKAGENTCODERF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKUNPRCFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKMONEYFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKCNSTAXFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "  ,A.NTIMECALCSTDATERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE2RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE3RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE4RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE3RF" + Environment.NewLine;
                    sqlText += " FROM" + Environment.NewLine;
                    sqlText += " (" + Environment.NewLine;
                    sqlText += "  SUPPLIERRF AS A" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    //税率設定マスタ
                    sqlText += "  LEFT JOIN TAXRATESETRF AS B" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "  ON A.ENTERPRISECODERF=B.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "  AND B.TAXRATECODERF=0" + Environment.NewLine;
                    //仕入先マスタ※支払先情報取得用
                    //sqlText += "  LEFT JOIN SUPPLIERRF AS C" + Environment.NewLine;
                    //sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    //sqlText += "  ON  A.ENTERPRISECODERF=C.ENTERPRISECODERF" + Environment.NewLine;
                    //sqlText += "  AND A.PAYEECODERF=C.SUPPLIERCDRF" + Environment.NewLine;
                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode == "00" || monthlyAddUpWork.AddUpSecCode == "")
                    {
                        sqlText += "  INNER JOIN SECINFOSETRF AS D WITH(READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += "   ON A.ENTERPRISECODERF = D.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "   AND A.PAYMENTSECTIONCODERF = D.SECTIONCODERF" + Environment.NewLine;
                        sqlText += "   AND D.LOGICALDELETECODERF=0" + Environment.NewLine;

                    }
                    // 修正 2009/04/02 <<<
                    sqlText += " )" + Environment.NewLine;
                    //WHRERE句
                    sqlText += " WHERE" + Environment.NewLine;
                    sqlText += "      A.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND A.LOGICALDELETECODERF=0" + Environment.NewLine;

                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        sqlText += "  AND A.PAYMENTSECTIONCODERF=@PAYMENTSECTIONCODE" + Environment.NewLine; // ADD 2008.12.22
                    }
                    // 修正 2009/04/02 <<<
                    sqlText += "  AND A.SUPPLIERCDRF=A.PAYEECODERF" + Environment.NewLine;


                    sqlCommand.CommandText = sqlText;
                    #endregion  //[Select文作成]

                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);

                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findPaymentSectionCode = sqlCommand.Parameters.Add("@PAYMENTSECTIONCODE", SqlDbType.NChar);
                        findPaymentSectionCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }
                    // 修正 2009/04/02 <<<

                    myReader = sqlCommand.ExecuteReader();
                    while (myReader.Read())
                    {
                        supplierWork = new SupplierWork();
                        suplAccPayWork = new SuplAccPayWork();
                        taxRateSetWork = new TaxRateSetWork();

                        //仕入先マスタ・税率設定マスタからデータセット
                        supplierWork = CopyToSupplierWorkFromReader(ref myReader);
                        taxRateSetWork = CopyToTaxRateSetWorkFromReader(ref myReader);

                        //●画面パラメータから
                        //suplAccPayWork.AddUpSecCode = monthlyAddUpWork.AddUpSecCode;       //計上拠点コード
                        suplAccPayWork.AddUpDate = monthlyAddUpWork.AddUpDate;             //計上年月日
                        suplAccPayWork.AddUpYearMonth = monthlyAddUpWork.AddUpYearMonth;   //計上年月

                        //●仕入先マスタから
                        suplAccPayWork.EnterpriseCode = supplierWork.EnterpriseCode;   //企業コード
                        suplAccPayWork.PayeeCode = supplierWork.PayeeCode;             //支払先コード
                        suplAccPayWork.PayeeName = supplierWork.PayeeName;             //支払先名称
                        suplAccPayWork.PayeeName2 = supplierWork.PayeeName2;           //支払先名称2
                        suplAccPayWork.SupplierSnm = supplierWork.PayeeSnm;            //支払先略称
                        suplAccPayWork.SupplierCd = supplierWork.SupplierCd;           //仕入先コード
                        suplAccPayWork.SupplierNm1 = supplierWork.SupplierNm1;         //仕入先名称
                        suplAccPayWork.SupplierNm2 = supplierWork.SupplierNm2;         //仕入先名称2
                        suplAccPayWork.PayeeSnm = supplierWork.SupplierSnm;            //仕入先略称
                        suplAccPayWork.SuppCTaxLayCd = supplierWork.SuppCTaxLayCd;     //消費税転嫁方式
                        suplAccPayWork.FractionProcCd = supplierWork.StockCnsTaxFrcProcCd;  //仕入消費税端数処理コード
                        suplAccPayWork.AddUpSecCode = supplierWork.PaymentSectionCode; // ADD 2009/04/02 

                        suplAccPayWorkList.Add(suplAccPayWork);//買掛List
                        
                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        
        // --- ADD 2012/09/13 ----------->>>>>
        /// <summary>
        /// 仕入先マスタ、税率設定マスタから更新情報を取得します
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ</param>
        /// <param name="suplAccPayWorkList">仕入先買掛金額ワーク用List</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先マスタ、税率設定マスタから仕入総括方式で更新情報を取得します</br>
        /// <br>Programmer : FSI佐々木　貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int GetSupplierByAddUpSecCode(ref MonthlyAddUpWork monthlyAddUpWork, ref ArrayList suplAccPayWorkList, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlDataReader myReader = null;

            //仕入先マスタ
            SupplierWork supplierWork = null;
            //税率設定マスタ
            TaxRateSetWork taxRateSetWork = null;
            //買掛金額マスタ
            SuplAccPayWork suplAccPayWork = null;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.CommandTimeout = TimeOut;
                    sqlCommand.Connection = sqlConnection;

                    #region [Select文作成]
                    string sqlText = string.Empty;
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += "   A.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += "  ,A.MNGSECTIONCODERF" + Environment.NewLine;
                    sqlText += "  ,A.INPSECTIONCODERF" + Environment.NewLine;
                    sqlText += "  ,SUPLACCPAYRF.ADDUPSECCODERF AS PAYMENTSECTIONCODERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNM1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNM2RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPHONORIFICTITLERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERKANARF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERSNMRF" + Environment.NewLine;
                    sqlText += "  ,A.ORDERHONORIFICTTLRF" + Environment.NewLine;
                    sqlText += "  ,A.BUSINESSTYPECODERF" + Environment.NewLine;
                    sqlText += "  ,A.SALESAREACODERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERPOSTNORF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERADDR1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERADDR3RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERADDR4RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERTELNORF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERTELNO1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERTELNO2RF" + Environment.NewLine;
                    sqlText += "  ,A.PURECODERF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTMONTHCODERF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTMONTHNAMERF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTDAYRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPCTAXLAYREFCDRF" + Environment.NewLine;
                    sqlText += "  ,(CASE WHEN A.SUPPCTAXLAYREFCDRF = 0 THEN B.CONSTAXLAYMETHODRF ELSE A.SUPPCTAXLAYCDRF END) AS SUPPCTAXLAYCDRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPCTAXATIONCDRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPENTERPRISECDRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERCDRF AS PAYEECODERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNM1RF AS PAYEENM1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNM2RF AS PAYEENM2RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERSNMRF AS PAYEESNMRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERATTRIBUTEDIVRF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPTTLAMNTDSPWAYCDRF" + Environment.NewLine;
                    sqlText += "  ,A.STCKTTLAMNTDSPWAYREFRF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTCONDRF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTTOTALDAYRF" + Environment.NewLine;
                    sqlText += "  ,A.PAYMENTSIGHTRF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKAGENTCODERF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKUNPRCFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKMONEYFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "  ,A.STOCKCNSTAXFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "  ,A.NTIMECALCSTDATERF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE1RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE2RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE3RF" + Environment.NewLine;
                    sqlText += "  ,A.SUPPLIERNOTE4RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE3RF" + Environment.NewLine;
                    sqlText += "    ,ISNULL(MAX(SUPLACCPAYRF.ADDUPADATE), 0) AS ADDUPADATE " + Environment.NewLine;
                    sqlText += "    ,ISNULL(ACCPAY.LATESTADDUPDATE, 0) AS LATESTADDUPDATE " + Environment.NewLine;
                    
                    sqlText += " FROM" + Environment.NewLine;
                    sqlText += " (" + Environment.NewLine;
                    sqlText += "  SUPPLIERRF AS A" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    //税率設定マスタ
                    sqlText += "  LEFT JOIN TAXRATESETRF AS B" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "  ON A.ENTERPRISECODERF=B.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "  AND B.TAXRATECODERF=0" + Environment.NewLine;
                    if (monthlyAddUpWork.AddUpSecCode == "00" || monthlyAddUpWork.AddUpSecCode == "")
                    {
                        sqlText += "  INNER JOIN SECINFOSETRF AS D WITH(READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += "   ON A.ENTERPRISECODERF = D.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "   AND A.PAYMENTSECTIONCODERF = D.SECTIONCODERF" + Environment.NewLine;
                        sqlText += "   AND D.LOGICALDELETECODERF=0" + Environment.NewLine;
                    }

                    // 支払拠点コード
                    sqlText += " LEFT JOIN (" + Environment.NewLine;

                    // 仕入先マスタ
                    sqlText += "        SELECT " + Environment.NewLine;
                    sqlText += "             SUPPLIER.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "            ,SUPPLIER.LOGICALDELETECODERF" + Environment.NewLine;
                    sqlText += "            ,SUPPLIER.SUPPLIERCDRF  " + Environment.NewLine;
                    sqlText += "            ,SUPPLIER.PAYMENTSECTIONCODERF AS ADDUPSECCODERF " + Environment.NewLine;
                    sqlText += "            ,@FINDNOWADDUPDATE AS ADDUPADATE " + Environment.NewLine;
                    sqlText += "        FROM SUPPLIERRF AS SUPPLIER WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "        WHERE LOGICALDELETECODERF = 0" + Environment.NewLine;

                    sqlText += "    UNION" + Environment.NewLine;

                    // 仕入先買掛金額マスタ
                    sqlText += "        SELECT " + Environment.NewLine;
                    sqlText += "             SUPPLIER.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "            ,SUPPLIER.LOGICALDELETECODERF" + Environment.NewLine;
                    sqlText += "            ,SUPPLIER.SUPPLIERCDRF  " + Environment.NewLine;
                    sqlText += "            ,ISNULL(SUPLACCPAY.ADDUPSECCODERF ,SUPPLIER.PAYMENTSECTIONCODERF) AS ADDUPSECCODERF " + Environment.NewLine;
                    sqlText += "            ,@FINDNOWADDUPDATE AS ADDUPADATE " + Environment.NewLine;
                    sqlText += "        FROM SUPPLIERRF AS SUPPLIER WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "        LEFT JOIN (" + Environment.NewLine;
                    sqlText += "            SELECT DISTINCT" + Environment.NewLine;
                    sqlText += "                  ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "                , ADDUPSECCODERF" + Environment.NewLine;
                    sqlText += "                , PAYEECODERF" + Environment.NewLine;
                    sqlText += "            FROM" + Environment.NewLine;
                    sqlText += "                SUPLACCPAYRF" + Environment.NewLine;
                    sqlText += "            WHERE " + Environment.NewLine;
                    sqlText += "                LOGICALDELETECODERF = 0" + Environment.NewLine;
                    sqlText += "        ) AS SUPLACCPAY" + Environment.NewLine;
                    sqlText += "            ON      SUPLACCPAY.ENTERPRISECODERF = SUPPLIER.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "                AND SUPLACCPAY.PAYEECODERF = SUPPLIER.SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += "                AND SUPLACCPAY.ADDUPSECCODERF != SUPPLIER.PAYMENTSECTIONCODERF" + Environment.NewLine;

                    sqlText += "    UNION" + Environment.NewLine;

                    // 仕入データ
                    sqlText += "        SELECT " + Environment.NewLine;
                    sqlText += "             SUPPLIER.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "            ,SUPPLIER.LOGICALDELETECODERF" + Environment.NewLine;
                    sqlText += "            ,SUPPLIER.SUPPLIERCDRF  " + Environment.NewLine;
                    sqlText += "            ,ISNULL(STOCKSLIP.STOCKSECTIONCDRF, SUPPLIER.PAYMENTSECTIONCODERF) AS ADDUPSECCODERF " + Environment.NewLine;
                    sqlText += "            ,STOCKSLIP.ADDUPADATE " + Environment.NewLine;
                    sqlText += "        FROM SUPPLIERRF AS SUPPLIER WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "        lEFT JOIN (" + Environment.NewLine;
                    sqlText += "            SELECT DISTINCT" + Environment.NewLine;
                    sqlText += "                 ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "                , STOCKSECTIONCDRF" + Environment.NewLine;
                    sqlText += "                , SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += "                , MAX(STOCKADDUPADATERF) AS ADDUPADATE" + Environment.NewLine;
                    sqlText += "            FROM STOCKSLIPRF" + Environment.NewLine;
                    sqlText += "            WHERE " + Environment.NewLine;
                    sqlText += "                LOGICALDELETECODERF = 0" + Environment.NewLine;
                    sqlText += "                AND STOCKADDUPADATERF <= @FINDNOWADDUPDATE" + Environment.NewLine;
                    sqlText += "                AND DEBITNOTEDIVRF=0" + Environment.NewLine;
                    sqlText += "                AND LOGICALDELETECODERF=0" + Environment.NewLine;
                    sqlText += "            GROUP BY " + Environment.NewLine;
                    sqlText += "                  ENTERPRISECODERF " + Environment.NewLine;
                    sqlText += "                , STOCKSECTIONCDRF " + Environment.NewLine;
                    sqlText += "                , SUPPLIERCDRF " + Environment.NewLine;
                    sqlText += "        ) AS STOCKSLIP" + Environment.NewLine;
                    sqlText += "            ON      STOCKSLIP.ENTERPRISECODERF = SUPPLIER.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "                AND STOCKSLIP.SUPPLIERCDRF = SUPPLIER.SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += "                AND STOCKSLIP.STOCKSECTIONCDRF != SUPPLIER.PAYMENTSECTIONCODERF" + Environment.NewLine;

                    sqlText += "    UNION " + Environment.NewLine;

                    // 支払データ
                    sqlText += "        SELECT " + Environment.NewLine;
                    sqlText += "             SUPPLIER.ENTERPRISECODERF " + Environment.NewLine;
                    sqlText += "            ,SUPPLIER.LOGICALDELETECODERF " + Environment.NewLine;
                    sqlText += "            ,SUPPLIER.SUPPLIERCDRF  " + Environment.NewLine;
                    sqlText += "            ,ISNULL(PSLP.ADDUPSECCODERF, SUPPLIER.PAYMENTSECTIONCODERF) AS ADDUPSECCODERF " + Environment.NewLine;
                    sqlText += "            ,PSLP.ADDUPADATE " + Environment.NewLine;
                    sqlText += "        FROM SUPPLIERRF AS SUPPLIER WITH (READUNCOMMITTED) " + Environment.NewLine;
                    sqlText += "        lEFT JOIN ( " + Environment.NewLine;
                    sqlText += "            SELECT DISTINCT " + Environment.NewLine;
                    sqlText += "                 ENTERPRISECODERF " + Environment.NewLine;
                    sqlText += "                , ADDUPSECCODERF " + Environment.NewLine;
                    sqlText += "                , SUPPLIERCDRF " + Environment.NewLine;
                    sqlText += "                , MAX(ADDUPADATERF) AS ADDUPADATE " + Environment.NewLine;
                    sqlText += "            FROM PAYMENTSLPRF WITH (READUNCOMMITTED) " + Environment.NewLine;
                    sqlText += "            WHERE " + Environment.NewLine;
                    sqlText += "                    LOGICALDELETECODERF = 0 " + Environment.NewLine;
                    sqlText += "                AND ADDUPADATERF <= @FINDNOWADDUPDATE" + Environment.NewLine;
                    sqlText += "            GROUP BY " + Environment.NewLine;
                    sqlText += "                  ENTERPRISECODERF " + Environment.NewLine;
                    sqlText += "                , ADDUPSECCODERF " + Environment.NewLine;
                    sqlText += "                , SUPPLIERCDRF " + Environment.NewLine;
                    sqlText += "        ) AS PSLP " + Environment.NewLine;
                    sqlText += "            ON      PSLP.ENTERPRISECODERF = SUPPLIER.ENTERPRISECODERF " + Environment.NewLine;
                    sqlText += "                AND PSLP.SUPPLIERCDRF = SUPPLIER.SUPPLIERCDRF " + Environment.NewLine;
                    sqlText += "                AND PSLP.ADDUPSECCODERF != SUPPLIER.PAYMENTSECTIONCODERF " + Environment.NewLine;

                    sqlText += " ) AS SUPLACCPAYRF " + Environment.NewLine;
                    sqlText += "    ON      SUPLACCPAYRF.ENTERPRISECODERF = A.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "        AND SUPLACCPAYRF.SUPPLIERCDRF = A.SUPPLIERCDRF" + Environment.NewLine;

                    // 仕入先買掛金額マスタ
                    sqlText += " LEFT JOIN (" + Environment.NewLine;
                    sqlText += "    SELECT " + Environment.NewLine;
                    sqlText += "          ENTERPRISECODERF " + Environment.NewLine;
                    sqlText += "        , ADDUPSECCODERF " + Environment.NewLine;
                    sqlText += "        , PAYEECODERF " + Environment.NewLine;
                    sqlText += "        , MAX(ADDUPDATERF) AS LATESTADDUPDATE" + Environment.NewLine;
                    sqlText += "        FROM" + Environment.NewLine;
                    sqlText += "            SUPLACCPAYRF" + Environment.NewLine;
                    sqlText += "        WHERE " + Environment.NewLine;
                    sqlText += "            LOGICALDELETECODERF = 0" + Environment.NewLine;
                    sqlText += "        GROUP BY " + Environment.NewLine;
                    sqlText += "              ENTERPRISECODERF " + Environment.NewLine;
                    sqlText += "            , PAYEECODERF " + Environment.NewLine;
                    sqlText += "            , ADDUPSECCODERF" + Environment.NewLine;
                    sqlText += " ) AS ACCPAY" + Environment.NewLine;
                    sqlText += "    ON      ACCPAY.ENTERPRISECODERF = A.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "        AND ACCPAY.PAYEECODERF = A.SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += "        AND ACCPAY.ADDUPSECCODERF = SUPLACCPAYRF.ADDUPSECCODERF" + Environment.NewLine;
                    
                    sqlText += " )" + Environment.NewLine;

                    //WHRERE句
                    sqlText += " WHERE" + Environment.NewLine;
                    sqlText += "      A.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND A.LOGICALDELETECODERF=0" + Environment.NewLine;
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        sqlText += "  AND SUPLACCPAYRF.ADDUPSECCODERF=@PAYMENTSECTIONCODE" + Environment.NewLine;
                    }

                    #region GROUP BY句
                    sqlText += " GROUP BY " + Environment.NewLine;
                    sqlText += "      A.ENTERPRISECODERF " + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERCDRF " + Environment.NewLine;
                    sqlText += "    , A.MNGSECTIONCODERF " + Environment.NewLine;
                    sqlText += "    , A.INPSECTIONCODERF " + Environment.NewLine;
                    sqlText += "    , SUPLACCPAYRF.ADDUPSECCODERF " + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERNM1RF " + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERNM2RF " + Environment.NewLine;
                    sqlText += "    , A.SUPPHONORIFICTITLERF " + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERKANARF " + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERSNMRF " + Environment.NewLine;
                    sqlText += "    , A.ORDERHONORIFICTTLRF" + Environment.NewLine;
                    sqlText += "    , A.BUSINESSTYPECODERF" + Environment.NewLine;
                    sqlText += "    , A.SALESAREACODERF" + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERPOSTNORF" + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERADDR1RF" + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERADDR3RF" + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERADDR4RF" + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERTELNORF" + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERTELNO1RF" + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERTELNO2RF" + Environment.NewLine;
                    sqlText += "    , A.PURECODERF" + Environment.NewLine;
                    sqlText += "    , A.PAYMENTMONTHCODERF" + Environment.NewLine;
                    sqlText += "    , A.PAYMENTMONTHNAMERF" + Environment.NewLine;
                    sqlText += "    , A.PAYMENTDAYRF" + Environment.NewLine;
                    sqlText += "    , A.SUPPCTAXLAYREFCDRF" + Environment.NewLine;
                    sqlText += "    , A.SUPPCTAXLAYREFCDRF" + Environment.NewLine;
                    sqlText += "    , B.CONSTAXLAYMETHODRF" + Environment.NewLine;
                    sqlText += "    , A.SUPPCTAXLAYCDRF" + Environment.NewLine;
                    sqlText += "    , A.SUPPCTAXATIONCDRF" + Environment.NewLine;
                    sqlText += "    , A.SUPPENTERPRISECDRF" + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERATTRIBUTEDIVRF" + Environment.NewLine;
                    sqlText += "    , A.SUPPTTLAMNTDSPWAYCDRF" + Environment.NewLine;
                    sqlText += "    , A.STCKTTLAMNTDSPWAYREFRF" + Environment.NewLine;
                    sqlText += "    , A.PAYMENTCONDRF" + Environment.NewLine;
                    sqlText += "    , A.PAYMENTTOTALDAYRF" + Environment.NewLine;
                    sqlText += "    , A.PAYMENTSIGHTRF" + Environment.NewLine;
                    sqlText += "    , A.STOCKAGENTCODERF" + Environment.NewLine;
                    sqlText += "    , A.STOCKUNPRCFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "    , A.STOCKMONEYFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "    , A.STOCKCNSTAXFRCPROCCDRF" + Environment.NewLine;
                    sqlText += "    , A.NTIMECALCSTDATERF" + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERNOTE1RF" + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERNOTE2RF" + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERNOTE3RF" + Environment.NewLine;
                    sqlText += "    , A.SUPPLIERNOTE4RF" + Environment.NewLine;
                    sqlText += "    , B.TAXRATESTARTDATERF" + Environment.NewLine;
                    sqlText += "    , B.TAXRATEENDDATERF" + Environment.NewLine;
                    sqlText += "    , B.TAXRATERF" + Environment.NewLine;
                    sqlText += "    , B.TAXRATESTARTDATE2RF" + Environment.NewLine;
                    sqlText += "    , B.TAXRATEENDDATE2RF" + Environment.NewLine;
                    sqlText += "    , B.TAXRATE2RF" + Environment.NewLine;
                    sqlText += "    , B.TAXRATESTARTDATE3RF" + Environment.NewLine;
                    sqlText += "    , B.TAXRATEENDDATE3RF" + Environment.NewLine;
                    sqlText += "    , B.TAXRATE3RF" + Environment.NewLine;
                    sqlText += "    , ACCPAY.LATESTADDUPDATE" + Environment.NewLine;
                    #endregion // GROUP BY句

                    sqlCommand.CommandText = sqlText;

                    #endregion  //[Select文作成]

                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);

                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findPaymentSectionCode = sqlCommand.Parameters.Add("@PAYMENTSECTIONCODE", SqlDbType.NChar);
                        findPaymentSectionCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    // 今回締日
                    SqlParameter findParaAddUpdate = sqlCommand.Parameters.Add("@FINDNOWADDUPDATE", SqlDbType.Int);
                    findParaAddUpdate.Value = SqlDataMediator.SqlSetInt32(Convert.ToInt32(monthlyAddUpWork.AddUpDate.ToString("yyyyMMdd")));

                    myReader = sqlCommand.ExecuteReader();
                    while (myReader.Read())
                    {
                        int lastAddUpdate = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LATESTADDUPDATE"));
                        int addUpdate = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ADDUPADATE"));
                        if (addUpdate <= lastAddUpdate)
                        {
                            // 今まで締処理したことがない、拠点での仕入及び支払データが最終締日～今回締日の
                            // 範囲内に存在しない場合、対象外とする
                            continue;
                        }
                       
                        supplierWork = new SupplierWork();
                        suplAccPayWork = new SuplAccPayWork();
                        taxRateSetWork = new TaxRateSetWork();

                        //仕入先マスタ・税率設定マスタからデータセット
                        supplierWork = CopyToSupplierWorkFromReader(ref myReader);
                        taxRateSetWork = CopyToTaxRateSetWorkFromReader(ref myReader);

                        //●画面パラメータから
                        //suplAccPayWork.AddUpSecCode = monthlyAddUpWork.AddUpSecCode;       //計上拠点コード
                        suplAccPayWork.AddUpDate = monthlyAddUpWork.AddUpDate;             //計上年月日
                        suplAccPayWork.AddUpYearMonth = monthlyAddUpWork.AddUpYearMonth;   //計上年月

                        //●仕入先マスタから
                        suplAccPayWork.EnterpriseCode = supplierWork.EnterpriseCode;   //企業コード
                        suplAccPayWork.PayeeCode = supplierWork.PayeeCode;             //支払先コード
                        suplAccPayWork.PayeeName = supplierWork.PayeeName;             //支払先名称
                        suplAccPayWork.PayeeName2 = supplierWork.PayeeName2;           //支払先名称2
                        suplAccPayWork.SupplierSnm = supplierWork.PayeeSnm;            //支払先略称
                        suplAccPayWork.SupplierCd = supplierWork.SupplierCd;           //仕入先コード
                        suplAccPayWork.SupplierNm1 = supplierWork.SupplierNm1;         //仕入先名称
                        suplAccPayWork.SupplierNm2 = supplierWork.SupplierNm2;         //仕入先名称2
                        suplAccPayWork.PayeeSnm = supplierWork.SupplierSnm;            //仕入先略称
                        suplAccPayWork.SuppCTaxLayCd = supplierWork.SuppCTaxLayCd;     //消費税転嫁方式
                        suplAccPayWork.FractionProcCd = supplierWork.StockCnsTaxFrcProcCd;  //仕入消費税端数処理コード
                        suplAccPayWork.AddUpSecCode = supplierWork.PaymentSectionCode; // ADD 2009/04/02 

                        suplAccPayWorkList.Add(suplAccPayWork);//買掛List

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        // --- ADD 2012/09/13 -----------<<<<<
        #endregion
        
        #region [仕入先マスタ、税率設定マスタ]
        /// <summary>
        /// 仕入先マスタ、税率設定マスタから仕入先消費税転嫁方式コード・仕入先消費税税率を取得
        /// </summary>
        /// <param name="suplAccPayWork"></param>
        /// <param name="sqlConnection"></param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先マスタ、税率設定マスタから仕入先消費税転嫁方式コード・仕入先消費税税率を取得</br>
        /// <br>Programmer : 23015　森本 大輝</br>
        /// <br>Date       : 2008.09.17</br>
        /// </remarks>
        private int GetSupplierTaxRate(ref SuplAccPayWork suplAccPayWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            SqlDataReader myReader = null;

            //税率設定マスタ
            TaxRateSetWork taxRateSetWork = null;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    sqlCommand.Connection = sqlConnection;

                    #region [Select文作成]
                    string sqlText = string.Empty;

                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += "   A.SUPPCTAXLAYCDRF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATERF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE2RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATESTARTDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATEENDDATE3RF" + Environment.NewLine;
                    sqlText += "  ,B.TAXRATE3RF" + Environment.NewLine;
                    sqlText += " FROM" + Environment.NewLine;
                    sqlText += " (" + Environment.NewLine;
                    sqlText += "  SUPPLIERRF AS A" + Environment.NewLine;
                    sqlText += "  WITH (READUNCOMMITTED)" + Environment.NewLine;
                    //税率設定マスタ
                    sqlText += "  LEFT JOIN TAXRATESETRF AS B" + Environment.NewLine;
                    sqlText += "  WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "  ON A.ENTERPRISECODERF=B.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;
                    //WHERE句
                    sqlText += " WHERE" + Environment.NewLine;
                    sqlText += "      A.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND A.SUPPLIERCDRF=@FINDSUPPLIERCD" + Environment.NewLine;

                    sqlCommand.CommandText = sqlText;
                    #endregion  //[Select文作成]

                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaSupplierCd = sqlCommand.Parameters.Add("@FINDSUPPLIERCD", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                    findParaSupplierCd.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);

                    myReader = sqlCommand.ExecuteReader();
                    if (myReader.Read())
                    {
                        taxRateSetWork = new TaxRateSetWork();

                        taxRateSetWork = CopyToTaxRateSetWorkFromReader(ref myReader);

                        //●仕入先消費税税率 ※税率設定マスタから
                        //税率セット
                        if (suplAccPayWork.AddUpDate >= taxRateSetWork.TaxRateStartDate && suplAccPayWork.AddUpDate <= taxRateSetWork.TaxRateEndDate)
                        {
                            //税率
                            suplAccPayWork.SupplierConsTaxRate = taxRateSetWork.TaxRate;
                        }
                        else if (suplAccPayWork.AddUpDate >= taxRateSetWork.TaxRateStartDate2 && suplAccPayWork.AddUpDate <= taxRateSetWork.TaxRateEndDate2)
                        {
                            //税率2
                            suplAccPayWork.SupplierConsTaxRate = taxRateSetWork.TaxRate2;
                        }
                        else if (suplAccPayWork.AddUpDate >= taxRateSetWork.TaxRateStartDate3 && suplAccPayWork.AddUpDate <= taxRateSetWork.TaxRateEndDate3)
                        {
                            //税率3
                            suplAccPayWork.SupplierConsTaxRate = taxRateSetWork.TaxRate3;
                        }

                        //●仕入先消費税転嫁方式コード
                        suplAccPayWork.SuppCTaxLayCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPCTAXLAYCDRF"));
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        #endregion

        #region [仕入金額処理区分設定マスタ]
        /// <summary>
        /// 仕入金額処理区分設定マスタから端数処理区分を取得します
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額ワーク</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入金額処理区分設定マスタから端数処理区分を取得します</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.06</br>
        /// </remarks>
        private int GetSupplTaxAndFrac(ref SuplAccPayWork suplAccPayWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlDataReader myReader = null;
        
            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    sqlCommand.Connection = sqlConnection;
                    sqlCommand.CommandText = "SELECT FRACTIONPROCCDRF FROM STOCKPROCMONEYRF WITH (READUNCOMMITTED) WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND FRACPROCMONEYDIVRF=1 AND FRACTIONPROCCODERF=@FINDFRACTIONPROCCODE ";

                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaFractionProcCode = sqlCommand.Parameters.Add("@FINDFRACTIONPROCCODE", SqlDbType.Int);
        
                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                    findParaFractionProcCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.FractionProcCd);
        
                    myReader = sqlCommand.ExecuteReader();
                    if (myReader.Read())
                    {
                        suplAccPayWork.FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF"));
        
                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }
        
            return status;
        }
        #endregion
            
        #region [前回情報取得　月次締更新履歴マスタ/得意先売掛金額マスタ]
        /// <summary>
        /// 前回情報取得を取得します　月次締更新履歴マスタ/得意先売掛金額マスタ
        /// </summary>
        /// <param name="custAccRecWork">得意先売掛金額マスタ更新List</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 前回情報取得を取得します　月次締更新履歴マスタ/得意先売掛金額マスタ</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// </remarks>
        private int GetMonthlyAddUpHisAndCustAccRec(ref CustAccRecWork custAccRecWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            SqlDataReader myReader = null;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    sqlCommand.Connection = sqlConnection;

                    #region [Select文作成]
                    string sqlText = string.Empty;
                    sqlText += "SELECT " + Environment.NewLine;
                    sqlText += "   AFCALTMONTHACCRECRF " + Environment.NewLine;
                    sqlText += "  ,LASTTIMEACCRECRF " + Environment.NewLine;
                    sqlText += "  ,ACPODRTTL2TMBFACCRECRF " + Environment.NewLine;
                    sqlText += "  ,ADDUPDATERF " + Environment.NewLine;
                    sqlText += " FROM CUSTACCRECRF WITH(READUNCOMMITTED) " + Environment.NewLine;
                    sqlText += " WHERE " + Environment.NewLine;
                    sqlText += "      ENTERPRISECODERF=@FINDENTERPRISECODE " + Environment.NewLine;
                    sqlText += "  AND CLAIMCODERF=@FINDCUSTOMERCODE " + Environment.NewLine;
                    sqlText += "  AND CUSTOMERCODERF=0 " + Environment.NewLine;
                    //sqlText += "  AND ADDUPSECCODERF=@FINDADDUPSECCODE " + Environment.NewLine;  // DEL 2010/10/06
                    sqlText += "  AND ADDUPDATERF= " + Environment.NewLine;
                    sqlText += "  ( " + Environment.NewLine;
                    sqlText += "   SELECT MAX(ADDUPDATERF)" + Environment.NewLine;
                    sqlText += "   FROM  CUSTACCRECRF WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "   WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    //sqlText += "     AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;  // DEL 2010/10/06
                    sqlText += "     AND CLAIMCODERF=@FINDCUSTOMERCODE" + Environment.NewLine;
                    sqlText += "     AND CUSTOMERCODERF=0" + Environment.NewLine;
                    sqlText += "     AND ADDUPDATERF<@ADDUPDATERF" + Environment.NewLine; // ADD 2009/07/03                    
                    sqlText += "  ) " + Environment.NewLine;

                    sqlCommand.CommandText = sqlText;
                    #endregion  //[Select文作成]

                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
                    //SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);  // DEL 2010/10/06
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@ADDUPDATERF", SqlDbType.Int); // ADD 2009/07/03

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                    findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.ClaimCode);
                    //findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.AddUpSecCode);  // DEL 2010/10/06
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.AddUpDate); // ADD 2009/07/03

                    myReader = sqlCommand.ExecuteReader();
                    if (myReader.Read())
                    {
                        //前回売掛金額　←　計算後当月売掛金額
                        custAccRecWork.LastTimeAccRec = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("AFCALTMONTHACCRECRF"));
                        //受注2回前残高（売掛計）←　前回売掛金額 ※不必要だが念のためセット
                        custAccRecWork.AcpOdrTtl2TmBfAccRec = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("LASTTIMEACCRECRF"));
                        //受注3回前残高（売掛計）←　受注2回前残高（売掛計） ※不必要だが念のためセット
                        custAccRecWork.AcpOdrTtl3TmBfAccRec = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ACPODRTTL2TMBFACCRECRF"));
                        //前回月次更新実行年月日　←　計上年月日
                        custAccRecWork.LaMonCAddUpUpdDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("ADDUPDATERF"));
                        if (custAccRecWork.LaMonCAddUpUpdDate != DateTime.MinValue)
                        {
                            //月次更新開始年月日
                            custAccRecWork.StMonCAddUpUpdDate = custAccRecWork.LaMonCAddUpUpdDate.AddDays(1.0);
                        }

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                    else
                    {
                        //初期データ挿入時はデータがないので前回月次更新年月日に最小値を挿入する
                        custAccRecWork.LaMonCAddUpUpdDate = DateTime.MinValue;
                        custAccRecWork.StMonCAddUpUpdDate = DateTime.MinValue; // ADD 2008.11.25
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        #endregion

        #region [前回情報取得　月次締更新履歴マスタ/仕入先買掛金額マスタ]
        /// <summary>
        /// 前回情報取得を取得します　月次締更新履歴マスタ/仕入先買掛金額マスタ
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新List</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 前回情報取得を取得します　月次締更新履歴マスタ/仕入先買掛金額マスタ</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// <br>Update Note: 王君</br>　
        /// <br>           : 2013/08/06</br>
        /// <br>           : Redmine38955№2059　瀬戸内部品の買掛残高一覧表の調査</br>
        /// </remarks>
        private int GetMonthlyAddUpHisAndSuplAccPay(ref SuplAccPayWork suplAccPayWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlDataReader myReader = null;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    sqlCommand.Connection = sqlConnection;

                    // --- ADD 2008.10.01 ---------->>>>>
                    #region [Select文作成]
                    string sqlText = string.Empty;
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += "   STCKTTLACCPAYBALANCERF" + Environment.NewLine;
                    sqlText += "  ,LASTTIMEACCPAYRF" + Environment.NewLine;
                    sqlText += "  ,STCKTTL2TMBFBLACCPAYRF" + Environment.NewLine;
                    sqlText += "  ,ADDUPDATERF" + Environment.NewLine;
                    sqlText += " FROM SUPLACCPAYRF WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += " WHERE" + Environment.NewLine;
                    sqlText += "      ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND PAYEECODERF=@FINDCUSTOMERCODE" + Environment.NewLine;
                    //sqlText += "  AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;  // DEL 2010/10/06
                    sqlText += "    AND SUPLACCPAYRF.SUPPLIERCDRF = 0" + Environment.NewLine; // ADD 王君 2013/08/06 Redmine#38955
                    sqlText += "  AND ADDUPDATERF=" + Environment.NewLine;
                    sqlText += "  (" + Environment.NewLine;                    
                    sqlText += "   SELECT MAX(ADDUPDATERF)" + Environment.NewLine;
                    sqlText += "   FROM SUPLACCPAYRF WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "   WHERE" + Environment.NewLine;
                    sqlText += "      ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    AND PAYEECODERF=@FINDCUSTOMERCODE" + Environment.NewLine;
                    //sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;  // DEL 2010/10/06
                    sqlText += "    AND ADDUPDATERF<@ADDUPDATERF" + Environment.NewLine;  // ADD 2009/07/03 
                    sqlText += "  )" + Environment.NewLine;

                    sqlCommand.CommandText = sqlText;
                    #endregion  //[Select文作成]

                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
                    //SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);  // DEL 2010/10/06
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@ADDUPDATERF", SqlDbType.Int); // ADD 2009/07/03 

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                    findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
                    //findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);  // DEL 2010/10/06
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate); // ADD 2009/07/03
                    
                    // --- ADD 2008.10.01 ----------<<<<<

                    myReader = sqlCommand.ExecuteReader();
                    if (myReader.Read())
                    {
                        //前回買掛金額　←　仕入合計残高（買掛計）
                        suplAccPayWork.LastTimeAccPay = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("STCKTTLACCPAYBALANCERF"));
                        //仕入2回前残高（買掛計）←　前回買掛金額
                        suplAccPayWork.StckTtl2TmBfBlAccPay = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("LASTTIMEACCPAYRF"));
                        //仕入3回前残高（買掛計）←　仕入2回前残高（買掛計）
                        suplAccPayWork.StckTtl3TmBfBlAccPay = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("STCKTTL2TMBFBLACCPAYRF"));
                        //前回月次更新実行年月日　←　計上年月日
                        suplAccPayWork.LaMonCAddUpUpdDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("ADDUPDATERF"));
                        //月次更新開始年月日
                        suplAccPayWork.StMonCAddUpUpdDate = suplAccPayWork.LaMonCAddUpUpdDate.AddDays(1.0);

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }

        // --- ADD 2012/09/13 ----------->>>>>
        /// <summary>
        /// 前回情報取得を取得します　月次締更新履歴マスタ/仕入先買掛金額マスタ
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新List</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 月次締更新履歴マスタおよび仕入先買掛金額マスタから仕入総括形式で前回情報取得を取得します</br>
        /// <br>Programmer : FSI佐々木　貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int GetMonthlyAddUpHisAndSuplAccPayBySecCode(ref SuplAccPayWork suplAccPayWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlDataReader myReader = null;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.CommandTimeout = TimeOut;
                    sqlCommand.Connection = sqlConnection;

                    #region [Select文作成]
                    string sqlText = string.Empty;
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += "   STCKTTLACCPAYBALANCERF" + Environment.NewLine;
                    sqlText += "  ,LASTTIMEACCPAYRF" + Environment.NewLine;
                    sqlText += "  ,STCKTTL2TMBFBLACCPAYRF" + Environment.NewLine;
                    sqlText += "  ,ADDUPDATERF" + Environment.NewLine;
                    sqlText += " FROM SUPLACCPAYRF WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += " WHERE" + Environment.NewLine;
                    sqlText += "      ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND PAYEECODERF=@FINDCUSTOMERCODE" + Environment.NewLine;
                    sqlText += "  AND SUPPLIERCDRF=0" + Environment.NewLine;
                    sqlText += "  AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                    sqlText += "  AND ADDUPDATERF=" + Environment.NewLine;
                    sqlText += "  (" + Environment.NewLine;
                    sqlText += "   SELECT MAX(ADDUPDATERF)" + Environment.NewLine;
                    sqlText += "   FROM SUPLACCPAYRF WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "   WHERE" + Environment.NewLine;
                    sqlText += "        ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    AND PAYEECODERF=@FINDCUSTOMERCODE" + Environment.NewLine;
                    sqlText += "    AND SUPPLIERCDRF=0" + Environment.NewLine;
                    sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                    sqlText += "    AND ADDUPDATERF<@ADDUPDATERF" + Environment.NewLine; 
                    sqlText += "  )" + Environment.NewLine;

                    sqlCommand.CommandText = sqlText;
                    #endregion  //[Select文作成]

                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@ADDUPDATERF", SqlDbType.Int);
                    SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                    findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                    findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);

                    myReader = sqlCommand.ExecuteReader();
                    if (myReader.Read())
                    {
                        //前回買掛金額　←　仕入合計残高（買掛計）
                        suplAccPayWork.LastTimeAccPay = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("STCKTTLACCPAYBALANCERF"));
                        //仕入2回前残高（買掛計）←　前回買掛金額
                        suplAccPayWork.StckTtl2TmBfBlAccPay = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("LASTTIMEACCPAYRF"));
                        //仕入3回前残高（買掛計）←　仕入2回前残高（買掛計）
                        suplAccPayWork.StckTtl3TmBfBlAccPay = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("STCKTTL2TMBFBLACCPAYRF"));
                        //前回月次更新実行年月日　←　計上年月日
                        suplAccPayWork.LaMonCAddUpUpdDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("ADDUPDATERF"));
                        //月次更新開始年月日
                        suplAccPayWork.StMonCAddUpUpdDate = suplAccPayWork.LaMonCAddUpUpdDate.AddDays(1.0);

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        // --- ADD 2012/09/13 -----------<<<<<
        #endregion

        #region [入金マスタ]
        /// <summary>
        /// 得意先売掛金額ワーク用Listから入金マスタを取得します
        /// </summary>
        /// <param name="custAccRecWork">得意先売掛金額マスタ更新List</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 得意先売掛金額ワーク用Listから入金マスタを取得します</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// </remarks>
        private int GetDepsitMain(ref CustAccRecWork custAccRecWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            SqlDataReader myReader = null;

            //入金マスタ
            DepsitMainWork depsitMainWork = null;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand("SELECT * FROM DEPSITMAINRF WITH (READUNCOMMITTED) WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND CLAIMCODERF=@FINDCLAIMCODE AND ADDUPSECCODERF=@FINDADDUPSECCODE AND (ADDUPADATERF<=@FINDADDUPDATE AND ADDUPADATERF>@FINDLASTTIMEADDUPDATE) AND LOGICALDELETECODERF = 0", sqlConnection))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaClaimCode = sqlCommand.Parameters.Add("@FINDCLAIMCODE", SqlDbType.Int);
                    SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                    findParaClaimCode.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.ClaimCode);
                    findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.AddUpSecCode);
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.AddUpDate);
                    if (custAccRecWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        findParaLastTimeAddUpDate.Value = 20000101;
                    else
                        findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.LaMonCAddUpUpdDate);

                    myReader = sqlCommand.ExecuteReader();
                    while (myReader.Read())
                    {
                        depsitMainWork = new DepsitMainWork();

                        depsitMainWork = CopyToDepsitMainWorkFromReader(ref myReader);

                        //計上拠点コード
                        custAccRecWork.AddUpSecCode = depsitMainWork.AddUpSecCode;

                        //得意先売掛金額マスタ更新パラメータ作成
                        // --- ADD 2008.09.17 ---------->>>>>
                        custAccRecWork.ThisTimeDmdNrml += depsitMainWork.DepositTotal;        //今回入金金額（通常入金）
                        custAccRecWork.ThisTimeFeeDmdNrml += depsitMainWork.FeeDeposit;       //今回手数料額（通常入金）
                        custAccRecWork.ThisTimeDisDmdNrml += depsitMainWork.DiscountDeposit;  //今回値引額（通常入金）
                        // --- ADD 2008.09.17 ----------<<<<<
                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }

        // ↓ 2007.11.07 980081 a
        /// <summary>
        /// 得意先売掛金額ワーク用Listから入金マスタを取得します
        /// </summary>
        /// <param name="custAccRecWork">得意先売掛金額マスタ更新List</param>
        /// <param name="custAccRecChildWorkList">得意先売掛金額マスタ更新List(子レコード用)</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 得意先売掛金額ワーク用Listから入金マスタを取得します</br>
        /// <br>Programmer : 980081  山田 明友</br>
        /// <br>Date       : 2007.11.07</br>
        /// </remarks>
        private int GetDepsitMain(ref CustAccRecWork custAccRecWork, ref ArrayList custAccRecChildWorkList, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            SqlDataReader myReader = null;

            try
            {
                // 修正 2008.12.22 >>>
                // 集計レコードの入金情報の取得 ( 親/子レコードは入金情報未セットに仕様変更 )
                #region SELECT文作成
                String sqlText = String.Empty;
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += " CLAIMCODERF," + Environment.NewLine;
                sqlText += " SUM(DEPOSITTOTALRF) AS DEPOSITTOTALRF," + Environment.NewLine;
                sqlText += " SUM(FEEDEPOSITRF) AS FEEDEPOSITRF," + Environment.NewLine;
                sqlText += " SUM(DISCOUNTDEPOSITRF) AS DISCOUNTDEPOSITRF" + Environment.NewLine;
                sqlText += "FROM" + Environment.NewLine;
                sqlText += " DEPSITMAINRF WITH(READUNCOMMITTED)" + Environment.NewLine;
                sqlText += "WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "   AND LOGICALDELETECODERF = 0" + Environment.NewLine;
                sqlText += "   AND CLAIMCODERF=@FINDCLAIMCODE" + Environment.NewLine;
                sqlText += "   AND (ADDUPADATERF<=@FINDADDUPDATE" + Environment.NewLine;
                sqlText += "        AND ADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
                sqlText += "GROUP BY " + Environment.NewLine;
                sqlText += " CLAIMCODERF" + Environment.NewLine;
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                {
                    #region Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaClaimCode = sqlCommand.Parameters.Add("@FINDCLAIMCODE", SqlDbType.Int);
                    //SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);  // DEL 2010/10/06
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
                    #endregion

                    #region Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                    findParaClaimCode.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.ClaimCode);
                    //findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.AddUpSecCode);  // DEL 2010/10/06
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.AddUpDate);
                    if (custAccRecWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        findParaLastTimeAddUpDate.Value = 20000101;
                    else
                        findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.LaMonCAddUpUpdDate);
                    #endregion

                    sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10
                    myReader = sqlCommand.ExecuteReader();

                    while (myReader.Read())
                    {
                        #region 結果セット
                        custAccRecWork.ThisTimeDmdNrml += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("DEPOSITTOTALRF"));        //今回入金金額（通常入金）
                        custAccRecWork.ThisTimeFeeDmdNrml += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("FEEDEPOSITRF"));       //今回手数料額（通常入金）
                        custAccRecWork.ThisTimeDisDmdNrml += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("DISCOUNTDEPOSITRF"));  //今回値引額（通常入金）
                        #endregion
                    }
                }
                // 修正 2008.12.22 <<<

            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        // ↑ 2007.11.07 980081 a
        #endregion

        #region [入金明細データ]
        /// <summary>
        /// 得意先売掛金額ワーク用Listから入金明細データを取得します
        /// </summary>
        /// <param name="custAccRecWork">得意先売掛金額マスタ更新List</param>
        /// <param name="accRecDepoTotalList">売掛入金集計データ更新List</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 得意先売掛金額ワーク用Listから入金明細データを取得します</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        private int GetDepsitDtlMain(ref CustAccRecWork custAccRecWork, ref ArrayList accRecDepoTotalList, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            // 修正 2008.12.22 >>>
            SqlDataReader myReader = null;

            try
            {
                List<AccRecDepoTotalWork> accRecDepoTotalWorkList = new List<AccRecDepoTotalWork>();   // データ格納用

                #region SELECT文作成
                String sqlText = String.Empty;
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  DEP.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  DEP.CLAIMCODERF," + Environment.NewLine;
                sqlText += "  DEP.MONEYKINDCODERF ," + Environment.NewLine;
                sqlText += "  DEP.DEPOSITRF," + Environment.NewLine;
                sqlText += "  (CASE WHEN MONEYKIND.MONEYKINDNAMERF IS NOT NULL THEN MONEYKIND.MONEYKINDNAMERF ELSE '未登録' END) AS MONEYKINDNAMERF," + Environment.NewLine;
                sqlText += "  (CASE WHEN MONEYKIND.MONEYKINDDIVRF IS NOT NULL THEN MONEYKIND.MONEYKINDDIVRF ELSE 0 END) AS MONEYKINDDIVRF" + Environment.NewLine;
                sqlText += "FROM" + Environment.NewLine;
                sqlText += "(" + Environment.NewLine;
                sqlText += "  SELECT" + Environment.NewLine;
                sqlText += "   DEPS.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "   DEPS.CLAIMCODERF," + Environment.NewLine;
                sqlText += "   DEPDTL.MONEYKINDCODERF ," + Environment.NewLine;
                // 修正 2009.01.16 >>>
                //sqlText += "   SUM(DEPDTL.DEPOSITRF) AS DEPOSITRF" + Environment.NewLine;
                sqlText += "   SUM(CASE WHEN DEPS.DEPOSITDEBITNOTECDRF = 1 THEN DEPDTL.DEPOSITRF *-1  ELSE DEPDTL.DEPOSITRF END) AS DEPOSITRF" + Environment.NewLine;
                // 修正 2009.01.16 <<<
                // -- UPD 2011/03/15 ---------------------------------->>>
                //sqlText += "  FROM DEPSITMAINRF AS DEPS" + Environment.NewLine;
                //sqlText += "  INNER JOIN DEPSITDTLRF AS DEPDTL" + Environment.NewLine;
                sqlText += "  FROM DEPSITMAINRF AS DEPS WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += "  INNER JOIN DEPSITDTLRF AS DEPDTL WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ----------------------------------<<<
                sqlText += "   ON   DEPDTL.ENTERPRISECODERF= DEPS.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "   AND  DEPDTL.ACPTANODRSTATUSRF= DEPS.ACPTANODRSTATUSRF" + Environment.NewLine;
                // 修正 2009.01.16 >>>
                //sqlText += "   AND  DEPDTL.DEPOSITSLIPNORF= DEPS.DEPOSITSLIPNORF" + Environment.NewLine;
                sqlText += "   AND ((DEPS.DEPOSITDEBITNOTECDRF != 1 AND DEPS.DEPOSITSLIPNORF = DEPDTL.DEPOSITSLIPNORF)OR" + Environment.NewLine;
                sqlText += "        (DEPS.DEPOSITDEBITNOTECDRF = 1 AND DEPS.DEBITNOTELINKDEPONORF = DEPDTL.DEPOSITSLIPNORF))" + Environment.NewLine;
                // 修正 2009.01.16 <<<
                sqlText += "  WHERE DEPS.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "   AND  DEPS.LOGICALDELETECODERF=0 " + Environment.NewLine;
                sqlText += "   AND  DEPS.CLAIMCODERF=@FINDCLAIMCODE" + Environment.NewLine;
                sqlText += "   AND (DEPS.ADDUPADATERF<=@FINDADDUPDATE AND DEPS.ADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
                sqlText += "  GROUP BY" + Environment.NewLine;
                sqlText += "   DEPS.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "   DEPS.CLAIMCODERF," + Environment.NewLine;
                sqlText += "   DEPDTL.MONEYKINDCODERF" + Environment.NewLine;
                sqlText += ") AS DEP" + Environment.NewLine;
                // -- UPD 2011/03/15 ---------------------------------->>>
                //sqlText += " LEFT JOIN MONEYKINDURF AS MONEYKIND" + Environment.NewLine;
                sqlText += " LEFT JOIN MONEYKINDURF AS MONEYKIND WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ---------------------------------->>>
                sqlText += "  ON DEP.ENTERPRISECODERF = MONEYKIND.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND DEP.MONEYKINDCODERF = MONEYKIND.MONEYKINDCODERF" + Environment.NewLine;
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                {
                    #region Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaClaimCode = sqlCommand.Parameters.Add("@FINDCLAIMCODE", SqlDbType.Int);
                    //SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar); // DEL 2010/10/06
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
                    #endregion

                    #region Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                    findParaClaimCode.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.ClaimCode);
                    //findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.AddUpSecCode);  // DEL 2010/10/06
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.AddUpDate);
                    if (custAccRecWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        findParaLastTimeAddUpDate.Value = 20000101;
                    else
                        findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.LaMonCAddUpUpdDate);
                    #endregion

                    AccRecDepoTotalWork accRecDepoTotalWork = new AccRecDepoTotalWork();

                    sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10

                    myReader = sqlCommand.ExecuteReader();
                    while (myReader.Read())
                    {
                        //売掛入金集計にセット
                        accRecDepoTotalWork = CopyToAccRecDepoTotalWorkFromReader(ref myReader);
                        if (accRecDepoTotalWork.Deposit == 0)
                        {
                            continue;
                        }
                        accRecDepoTotalWork.AddUpSecCode = custAccRecWork.AddUpSecCode;
                        accRecDepoTotalWork.AddUpDate = custAccRecWork.AddUpDate;
                        accRecDepoTotalWork.CustomerCode = custAccRecWork.CustomerCode;
                        accRecDepoTotalList.Add(accRecDepoTotalWork);                        
                    }
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }            
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            // 修正 2008.12.22 <<<
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }

        private void SetAccRecDepoTotal(ref AccRecDepoTotalWork accRecDepoTotalWork, AccRecDepoTotalWork accRecDepoTotalWorkList)
        {
            accRecDepoTotalWork.CreateDateTime = accRecDepoTotalWorkList.CreateDateTime;
            accRecDepoTotalWork.UpdateDateTime = accRecDepoTotalWorkList.UpdateDateTime;
            accRecDepoTotalWork.EnterpriseCode = accRecDepoTotalWorkList.EnterpriseCode;
            accRecDepoTotalWork.FileHeaderGuid = accRecDepoTotalWorkList.FileHeaderGuid;
            accRecDepoTotalWork.UpdEmployeeCode = accRecDepoTotalWorkList.UpdEmployeeCode;
            accRecDepoTotalWork.UpdAssemblyId1 = accRecDepoTotalWorkList.UpdAssemblyId1;
            accRecDepoTotalWork.UpdAssemblyId2 = accRecDepoTotalWorkList.UpdAssemblyId2;
            accRecDepoTotalWork.LogicalDeleteCode = accRecDepoTotalWorkList.LogicalDeleteCode;
            accRecDepoTotalWork.AddUpSecCode = accRecDepoTotalWorkList.AddUpSecCode;
            accRecDepoTotalWork.ClaimCode = accRecDepoTotalWorkList.ClaimCode;
            accRecDepoTotalWork.CustomerCode = accRecDepoTotalWorkList.CustomerCode;
            accRecDepoTotalWork.AddUpDate = accRecDepoTotalWorkList.AddUpDate;
            accRecDepoTotalWork.MoneyKindCode = accRecDepoTotalWorkList.MoneyKindCode;
            accRecDepoTotalWork.MoneyKindName = accRecDepoTotalWorkList.MoneyKindName;
            accRecDepoTotalWork.MoneyKindDiv = accRecDepoTotalWorkList.MoneyKindDiv;
            accRecDepoTotalWork.Deposit += accRecDepoTotalWorkList.Deposit;
        }
        #endregion

        #region [支払明細データ]
        /// <summary>
        /// 仕入先買掛金額ワーク用Listから支払明細データを取得します
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新List</param>
        /// <param name="aCalcPayTotalList">買掛支払集計データ更新List</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先買掛金額ワーク用Listから支払明細データを取得します</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        private int GetPaymentDtlMain(ref SuplAccPayWork suplAccPayWork, ref ArrayList aCalcPayTotalList, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            //int moneyKindCode = 0; DEL 2008.12.22
            String sqlText = string.Empty; // ADD 2008.12.22 

            List<ACalcPayTotalWork> aCalcPayTotalWorkList = new List<ACalcPayTotalWork>();   // データ格納用

            SqlDataReader myReader = null;

            try
            {
                #region SELECT文作成
                sqlText = string.Empty;
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  PAY.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,PAY.PAYEECODERF" + Environment.NewLine;
                sqlText += " ,PAY.MONEYKINDCODERF" + Environment.NewLine;
                sqlText += " ,(CASE WHEN MONEYKIND.MONEYKINDNAMERF IS NOT NULL THEN MONEYKIND.MONEYKINDNAMERF ELSE '未登録' END) AS MONEYKINDNAMERF" + Environment.NewLine;
                sqlText += " ,(CASE WHEN MONEYKIND.MONEYKINDDIVRF IS NOT NULL THEN MONEYKIND.MONEYKINDDIVRF ELSE 0 END) AS MONEYKINDDIVRF" + Environment.NewLine;
                sqlText += " ,PAY.PAYMENTRF" + Environment.NewLine;
                sqlText += "FROM" + Environment.NewLine;
                sqlText += "(" + Environment.NewLine;
                sqlText += "  SELECT" + Environment.NewLine;
                sqlText += "    PAYMENTS.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "   ,PAYMENTS.PAYEECODERF" + Environment.NewLine;
                sqlText += "   ,PAYMENTDTL.MONEYKINDCODERF" + Environment.NewLine;
                // 修正 2009.01.16 >>>
                //sqlText += "   ,SUM(PAYMENTDTL.PAYMENTRF) AS PAYMENTRF" + Environment.NewLine;
                sqlText += "   ,SUM((CASE WHEN PAYMENTS.DEBITNOTEDIVRF = 1 THEN PAYMENTDTL.PAYMENTRF * -1 ELSE PAYMENTDTL.PAYMENTRF END))AS PAYMENTRF" + Environment.NewLine;
                // 修正 2009.01.16 <<<
                // -- UPD 2011/03/15 ---------------------------->>>
                //sqlText += "  FROM PAYMENTSLPRF AS PAYMENTS" + Environment.NewLine;
                //sqlText += "  INNER JOIN PAYMENTDTLRF AS PAYMENTDTL " + Environment.NewLine;
                sqlText += "  FROM PAYMENTSLPRF AS PAYMENTS WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += "  INNER JOIN PAYMENTDTLRF AS PAYMENTDTL WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ---------------------------->>>
                sqlText += "   ON PAYMENTDTL.ENTERPRISECODERF= PAYMENTS.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "   AND PAYMENTDTL.SUPPLIERFORMALRF= PAYMENTS.SUPPLIERFORMALRF" + Environment.NewLine;
                // 修正 2009.01.16 >>>
                //sqlText += "   AND PAYMENTDTL.PAYMENTSLIPNORF= PAYMENTS.PAYMENTSLIPNORF" + Environment.NewLine;
                sqlText += "   AND ((PAYMENTS.DEBITNOTEDIVRF != 1 AND PAYMENTS.PAYMENTSLIPNORF = PAYMENTDTL.PAYMENTSLIPNORF) OR" + Environment.NewLine;
                sqlText += "        (PAYMENTS.DEBITNOTEDIVRF = 1 AND PAYMENTS.DEBITNOTELINKPAYNORF = PAYMENTDTL.PAYMENTSLIPNORF))" + Environment.NewLine;
                // 修正 2009.01.16 <<<
                sqlText += "  WHERE PAYMENTS.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "   AND PAYMENTS.PAYEECODERF=@FINDPAYEECODE" + Environment.NewLine;
                sqlText += "   AND (PAYMENTS.ADDUPADATERF<=@FINDADDUPDATE AND PAYMENTS.ADDUPADATERF>@FINDLASTTIMEADDUPDATE)   " + Environment.NewLine;
                sqlText += "   AND  PAYMENTS.LOGICALDELETECODERF=0 " + Environment.NewLine;
                sqlText += "  GROUP BY" + Environment.NewLine;
                sqlText += "    PAYMENTS.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "   ,PAYMENTS.PAYEECODERF" + Environment.NewLine;
                sqlText += "   ,PAYMENTDTL.MONEYKINDCODERF" + Environment.NewLine;
                sqlText += ") AS PAY" + Environment.NewLine;
                // -- UPD 2011/03/15 ---------------------------->>>
                //sqlText += "LEFT JOIN MONEYKINDURF AS MONEYKIND" + Environment.NewLine;
                sqlText += "LEFT JOIN MONEYKINDURF AS MONEYKIND WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ----------------------------<<<
                sqlText += " ON PAY.ENTERPRISECODERF = MONEYKIND.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " AND PAY.MONEYKINDCODERF = MONEYKIND.MONEYKINDCODERF" + Environment.NewLine;
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                {
                    #region Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDPAYEECODE", SqlDbType.Int);
                    //SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);  // DEL 2010/10/06
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
                    #endregion

                    #region Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                    findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
                    //findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);  // DEL 2010/10/06
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                    if (suplAccPayWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        findParaLastTimeAddUpDate.Value = 20000101;
                    else
                        findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.LaMonCAddUpUpdDate);
                    #endregion

                    ACalcPayTotalWork aCalcPayTotalWork = new ACalcPayTotalWork();

                    sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10

                    myReader = sqlCommand.ExecuteReader();

                    while (myReader.Read())
                    {
                        #region 買掛支払集計セット
                        aCalcPayTotalWork = CopyToACalcPayTotalWorkFromReader(ref myReader);
                        // 修正 2009.01.16 >>>
                        if (aCalcPayTotalWork.Payment == 0)
                        {
                            continue;
                        }
                        // 修正 2009.01.16 <<<
                        aCalcPayTotalWork.AddUpSecCode = suplAccPayWork.AddUpSecCode;
                        aCalcPayTotalWork.AddUpDate = suplAccPayWork.AddUpDate;
                        aCalcPayTotalWork.SupplierCd = suplAccPayWork.SupplierCd;
                        aCalcPayTotalList.Add(aCalcPayTotalWork);
                        #endregion
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }
            // 修正 2008.12.22 <<<

            return status;
        }

        // --- ADD 2012/09/13 ----------->>>>>
        /// <summary>
        /// 仕入先買掛金額ワーク用Listから支払明細データを取得します
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新List</param>
        /// <param name="aCalcPayTotalList">買掛支払集計データ更新List</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先買掛金額ワーク用Listから仕入総括形式で支払明細データを取得します</br>
        /// <br>Programmer : FSI佐々木　貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int GetPaymentDtlMainBySecCode(ref SuplAccPayWork suplAccPayWork, ref ArrayList aCalcPayTotalList, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            String sqlText = string.Empty; 

            List<ACalcPayTotalWork> aCalcPayTotalWorkList = new List<ACalcPayTotalWork>();   // データ格納用

            SqlDataReader myReader = null;

            try
            {
                #region SELECT文作成
                sqlText = string.Empty;
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  PAY.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,PAY.PAYEECODERF" + Environment.NewLine;
                sqlText += " ,PAY.MONEYKINDCODERF" + Environment.NewLine;
                sqlText += " ,PAY.ADDUPSECCODERF" + Environment.NewLine;
                sqlText += " ,(CASE WHEN MONEYKIND.MONEYKINDNAMERF IS NOT NULL THEN MONEYKIND.MONEYKINDNAMERF ELSE '未登録' END) AS MONEYKINDNAMERF" + Environment.NewLine;
                sqlText += " ,(CASE WHEN MONEYKIND.MONEYKINDDIVRF IS NOT NULL THEN MONEYKIND.MONEYKINDDIVRF ELSE 0 END) AS MONEYKINDDIVRF" + Environment.NewLine;
                sqlText += " ,PAY.PAYMENTRF" + Environment.NewLine;
                sqlText += "FROM" + Environment.NewLine;
                sqlText += "(" + Environment.NewLine;
                sqlText += "  SELECT" + Environment.NewLine;
                sqlText += "    PAYMENTS.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "   ,PAYMENTS.PAYEECODERF" + Environment.NewLine;
                sqlText += "   ,PAYMENTS.ADDUPSECCODERF" + Environment.NewLine;
                sqlText += "   ,PAYMENTDTL.MONEYKINDCODERF" + Environment.NewLine;
                sqlText += "   ,SUM((CASE WHEN PAYMENTS.DEBITNOTEDIVRF = 1 THEN PAYMENTDTL.PAYMENTRF * -1 ELSE PAYMENTDTL.PAYMENTRF END))AS PAYMENTRF" + Environment.NewLine;
                sqlText += "  FROM PAYMENTSLPRF AS PAYMENTS WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += "  INNER JOIN PAYMENTDTLRF AS PAYMENTDTL WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += "   ON PAYMENTDTL.ENTERPRISECODERF= PAYMENTS.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "   AND PAYMENTDTL.SUPPLIERFORMALRF= PAYMENTS.SUPPLIERFORMALRF" + Environment.NewLine;
                sqlText += "   AND ((PAYMENTS.DEBITNOTEDIVRF != 1 AND PAYMENTS.PAYMENTSLIPNORF = PAYMENTDTL.PAYMENTSLIPNORF) OR" + Environment.NewLine;
                sqlText += "        (PAYMENTS.DEBITNOTEDIVRF = 1 AND PAYMENTS.DEBITNOTELINKPAYNORF = PAYMENTDTL.PAYMENTSLIPNORF))" + Environment.NewLine;
                sqlText += "  WHERE PAYMENTS.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "   AND PAYMENTS.PAYEECODERF=@FINDPAYEECODE" + Environment.NewLine;
                sqlText += "   AND (PAYMENTS.ADDUPADATERF<=@FINDADDUPDATE AND PAYMENTS.ADDUPADATERF>@FINDLASTTIMEADDUPDATE)   " + Environment.NewLine;
                sqlText += "   AND PAYMENTS.LOGICALDELETECODERF=0 " + Environment.NewLine;
                sqlText += "   AND PAYMENTS.ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                sqlText += "  GROUP BY" + Environment.NewLine;
                sqlText += "    PAYMENTS.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "   ,PAYMENTS.PAYEECODERF" + Environment.NewLine;
                sqlText += "   ,PAYMENTDTL.MONEYKINDCODERF" + Environment.NewLine;
                sqlText += "   ,PAYMENTS.ADDUPSECCODERF" + Environment.NewLine;
                sqlText += ") AS PAY" + Environment.NewLine;
                sqlText += "LEFT JOIN MONEYKINDURF AS MONEYKIND WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += " ON PAY.ENTERPRISECODERF = MONEYKIND.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " AND PAY.MONEYKINDCODERF = MONEYKIND.MONEYKINDCODERF" + Environment.NewLine;
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                {
                    #region Prameterオブジェクトの作成と値の設定
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDPAYEECODE", SqlDbType.Int);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);

                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                    findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                    if (suplAccPayWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        findParaLastTimeAddUpDate.Value = 20000101;
                    else
                        findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.LaMonCAddUpUpdDate);
                    findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);
                    #endregion

                    ACalcPayTotalWork aCalcPayTotalWork = new ACalcPayTotalWork();

                    sqlCommand.CommandTimeout = TimeOut;

                    myReader = sqlCommand.ExecuteReader();

                    while (myReader.Read())
                    {
                        #region 買掛支払集計セット
                        aCalcPayTotalWork = CopyToACalcPayTotalWorkFromReader(ref myReader);
                        aCalcPayTotalWork.AddUpSecCode = suplAccPayWork.AddUpSecCode;
                        aCalcPayTotalWork.AddUpDate = suplAccPayWork.AddUpDate;
                        aCalcPayTotalWork.SupplierCd = suplAccPayWork.SupplierCd;
                        aCalcPayTotalList.Add(aCalcPayTotalWork);
                        #endregion
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        // --- ADD 2012/09/13 -----------<<<<<

        private void SetACalcPayTotal(ref ACalcPayTotalWork aCalcPayTotalWork, ACalcPayTotalWork aCalcPayTotalWorkList)
        {
            aCalcPayTotalWork.CreateDateTime = aCalcPayTotalWorkList.CreateDateTime;
            aCalcPayTotalWork.UpdateDateTime = aCalcPayTotalWorkList.UpdateDateTime;
            aCalcPayTotalWork.EnterpriseCode = aCalcPayTotalWorkList.EnterpriseCode;
            aCalcPayTotalWork.FileHeaderGuid = aCalcPayTotalWorkList.FileHeaderGuid;
            aCalcPayTotalWork.UpdEmployeeCode = aCalcPayTotalWorkList.UpdEmployeeCode;
            aCalcPayTotalWork.UpdAssemblyId1 = aCalcPayTotalWorkList.UpdAssemblyId1;
            aCalcPayTotalWork.UpdAssemblyId2 = aCalcPayTotalWorkList.UpdAssemblyId2;
            aCalcPayTotalWork.LogicalDeleteCode = aCalcPayTotalWorkList.LogicalDeleteCode;
            aCalcPayTotalWork.AddUpSecCode = aCalcPayTotalWorkList.AddUpSecCode;
            aCalcPayTotalWork.PayeeCode = aCalcPayTotalWorkList.PayeeCode;
            aCalcPayTotalWork.SupplierCd = aCalcPayTotalWorkList.SupplierCd;
            aCalcPayTotalWork.AddUpDate = aCalcPayTotalWorkList.AddUpDate;
            aCalcPayTotalWork.MoneyKindCode = aCalcPayTotalWorkList.MoneyKindCode;
            aCalcPayTotalWork.MoneyKindName = aCalcPayTotalWorkList.MoneyKindName;
            aCalcPayTotalWork.MoneyKindDiv = aCalcPayTotalWorkList.MoneyKindDiv;
            aCalcPayTotalWork.Payment += aCalcPayTotalWorkList.Payment;
        }
        #endregion

        #region [売上データ]
        /// <summary>
        /// 得意先売掛金額ワーク用Listから売上データを取得します
        /// </summary>
        /// <param name="custAccRecWork">得意先売掛金額マスタ更新List</param>
        /// <param name="custAccRecChildWorkList">得意先売掛金額マスタ更新List(子レコード用)</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 得意先売掛金額ワーク用Listから売上データを取得します</br>
        /// <br>Programmer : 980081  山田 明友</br>
        /// <br>Date       : 2007.11.07</br>
        /// </remarks>
        private int GetSalesSlip(ref CustAccRecWork custAccRecWork, ref ArrayList custAccRecChildWorkList, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            SqlDataReader myReader = null;

            // 請求金額、締後売上、締後入金、締後消費税の算出変数
            Int64 afCalDemandPrice = 0;
            Int64 totalAfterSales = 0;
            Int64 totalAfterSalesOutTax = 0;                           // 締後消費税 伝票転嫁 + 明細転嫁 
            // 修正 2009/04/17 >>>
            //Int64 ItdedtotalAfterSalesOutTax = 0;           
            //ArrayList ItdedtotalAfterSalesOutTaxList = new ArrayList();
            Double totalAfterSalesOutTax_S = 0;                        // 締後消費税 請求転嫁(親) 
            ArrayList totalAfterSalesOutTaxList = new ArrayList();   // 締後消費税 請求転嫁(子)
            // 修正 2009/04/17 <<<
            Int64 totalAfterDepo = 0;
            int totalAfterDay = 0;
            

            TtlDayCalcDB ttlDayCalcDB = new TtlDayCalcDB(); 
            List<TtlDayCalcRetWork> retList = new List<TtlDayCalcRetWork>();
            TtlDayCalcParaWork para = new TtlDayCalcParaWork();

            #region ■当月消費税算出用処理(締後入金・締後売上算出)
            // 締日算出
            //para.EnterpriseCode = custAccRecWork.EnterpriseCode;
            //para.CustomerCode = custAccRecWork.CustomerCode;
            //status = ttlDayCalcDB.SearchPrcDmdC(out retList, para, ref sqlConnection);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                string sqlText = string.Empty;
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  AFCALDEMANDPRICERF," + Environment.NewLine;
                sqlText += "  ADDUPDATERF" + Environment.NewLine;
                // -- UPD 2011/03/15 --------------------------------->>>
                //sqlText += " FROM CUSTDMDPRCRF" + Environment.NewLine;
                sqlText += " FROM CUSTDMDPRCRF WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ---------------------------------<<<
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "    AND CLAIMCODERF=@FINDCLAIMCODE" + Environment.NewLine;
                sqlText += "    AND CUSTOMERCODERF=0" + Environment.NewLine;
                sqlText += "    AND ADDUPDATERF>@FINDADDUPDATEST" + Environment.NewLine;
                // 修正 2009/06/10 >>>
                //sqlText += "    AND ADDUPDATERF<=@FINDADDUPDATEED" + Environment.NewLine;
                sqlText += "    AND ADDUPDATERF<@FINDADDUPDATEED" + Environment.NewLine;
                // 修正 2009/06/10 <<<
                try
                {
                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                    {
                        //Prameterオブジェクトの作成
                        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter findParaClaimCode = sqlCommand.Parameters.Add("@FINDCLAIMCODE", SqlDbType.Int);
                        SqlParameter findParaAddUpDateSt = sqlCommand.Parameters.Add("@FINDADDUPDATEST", SqlDbType.Int);
                        SqlParameter findParaAddUpDateEd = sqlCommand.Parameters.Add("@FINDADDUPDATEED", SqlDbType.Int);

                        //Parameterオブジェクトへ値設定
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                        findParaClaimCode.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.CustomerCode);
                        findParaAddUpDateSt.Value = SqlDataMediator.SqlSetInt32(TDateTime.DateTimeToLongDate(custAccRecWork.LaMonCAddUpUpdDate));
                        findParaAddUpDateEd.Value = SqlDataMediator.SqlSetInt32(TDateTime.DateTimeToLongDate(custAccRecWork.AddUpDate));
                        sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10
                        myReader = sqlCommand.ExecuteReader();
                        if (myReader.Read())
                        {
                            afCalDemandPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("AFCALDEMANDPRICERF"));
                            totalAfterDay = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ADDUPDATERF"));
                        }
                    }
                }
                finally
                {
                    myReader.Dispose();
                }
                if (totalAfterDay != 0)
                {
                    #region 締後売上
                    sqlText = string.Empty;
                    // 修正 2009/04/17 >>>
                    #region DEL 2009/04/17
                    /*
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += " ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " ,CLAIMCODERF" + Environment.NewLine;
                    if (custAccRecWork.ConsTaxLayMethod == 3) // 請求子の場合(締後消費税を得意先別に計算する必要がある為)
                    {
                        sqlText += " ,CUSTOMERCODERF" + Environment.NewLine;
                    }
                    sqlText += " ,SUM(SALESNETPRICERF + SALESDISTTLTAXEXCRF) AS TOTALAFTERSALES" + Environment.NewLine;
                    sqlText += " ,SUM(ITDEDSALESOUTTAXRF + ITDEDSALESDISOUTTAXRF)AS ITDEDTOTALAFTERSALESOUTTAX" + Environment.NewLine;
                    sqlText += " ,SUM(SALESSUBTOTALTAXRF) AS TOTALAFTERSALESOUTTAX" + Environment.NewLine;
                    sqlText += " FROM " + Environment.NewLine;
                    sqlText += "  SALESSLIPRF" + Environment.NewLine;
                    sqlText += " WHERE" + Environment.NewLine;
                    sqlText += "  ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND CLAIMCODERF=@FINDCUSTOMERCODE" + Environment.NewLine;
                    sqlText += "  AND DEMANDADDUPSECCDRF=@FINDADDUPSECCODE" + Environment.NewLine;
                    sqlText += "  AND (ADDUPADATERF<=@FINDADDUPDATE AND ADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
                    sqlText += "  AND DEBITNOTEDIVRF=0" + Environment.NewLine;
                    sqlText += "  AND ACPTANODRSTATUSRF=30" + Environment.NewLine;
                    sqlText += "  AND LOGICALDELETECODERF=0" + Environment.NewLine;
                    sqlText += "  AND DEBITNOTEDIVRF=0" + Environment.NewLine;
                    sqlText += "  AND SALESGOODSCDRF = 0" + Environment.NewLine;
                    sqlText += "  AND (SALESSLIPCDRF = 0 OR SALESSLIPCDRF = 1)" + Environment.NewLine;
                    sqlText += "GROUP BY" + Environment.NewLine;
                    sqlText += "  ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "  ,CLAIMCODERF" + Environment.NewLine;
                    if (custAccRecWork.ConsTaxLayMethod == 3) // 請求子の場合(締後消費税を得意先別に計算する必要がある為)
                    {
                        sqlText += "  ,CUSTOMERCODERF" + Environment.NewLine;
                    }
                    */
                    #endregion
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += "  SALES.ENTERPRISECODERF" + Environment.NewLine;
                    // -- ADD 2009/10/23 --------------------------------------->>>
                    sqlText += " ,SALES.RESULTSADDUPSECCDRF" + Environment.NewLine;
                    // -- ADD 2009/10/23 ---------------------------------------<<<
                    sqlText += " ,(CASE WHEN (CUST.CLAIMCODERF IS NOT NULL) THEN CUST.CLAIMCODERF ELSE SALES.CLAIMCODERF END) AS CLAIMCODERF" + Environment.NewLine;
                    sqlText += " ,SALES.CUSTOMERCODERF" + Environment.NewLine;
                    sqlText += " ,SUM(SALES.SALESNETPRICERF + SALES.SALESDISTTLTAXEXCRF) AS TOTALAFTERSALES -- 売上正価金額" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (SALES.CONSTAXLAYMETHODRF = 0) OR (SALES.CONSTAXLAYMETHODRF = 1) THEN  SALES.SALESSUBTOTALTAXRF ELSE 0 END )) AS TOTALAFTERSALESOUTTAX -- 売上消費税計" + Environment.NewLine;
                    //請求親
                    sqlText += " ,SUM((CASE WHEN (SALES.CONSTAXLAYMETHODRF = 2) AND (SALES.ADDUPADATERF >= TAX.TAXRATESTARTDATERF AND SALES.ADDUPADATERF <= TAX.TAXRATEENDDATERF)" + Environment.NewLine;
                    sqlText += "        THEN ((SALES.ITDEDSALESOUTTAXRF + SALES.ITDEDSALESDISOUTTAXRF) * TAXRATERF)ELSE 0 END)) AS OUTTAXRF1 --売上消費税額（外税）税率1" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (SALES.CONSTAXLAYMETHODRF = 2) AND (SALES.ADDUPADATERF >= TAX.TAXRATESTARTDATE2RF AND SALES.ADDUPADATERF <= TAX.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    sqlText += "      THEN ((SALES.ITDEDSALESOUTTAXRF + SALES.ITDEDSALESDISOUTTAXRF) * TAXRATE2RF)ELSE 0 END)) AS OUTTAXRF2--売上消費税額（外税）税率2" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (SALES.CONSTAXLAYMETHODRF = 2) AND (SALES.ADDUPADATERF >= TAX.TAXRATESTARTDATE3RF AND SALES.ADDUPADATERF <= TAX.TAXRATEENDDATE3RF)" + Environment.NewLine;
                    sqlText += "       THEN ((SALES.ITDEDSALESOUTTAXRF + SALES.ITDEDSALESDISOUTTAXRF) * TAXRATE3RF)ELSE 0 END)) AS OUTTAXRF3--売上消費税額（外税）税率3" + Environment.NewLine;
                    //請求子
                    sqlText += " ,SUM((CASE WHEN (SALES.CONSTAXLAYMETHODRF = 3) AND (SALES.ADDUPADATERF >= TAX.TAXRATESTARTDATERF AND SALES.ADDUPADATERF <= TAX.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "      THEN ((SALES.ITDEDSALESOUTTAXRF + SALES.ITDEDSALESDISOUTTAXRF) * TAXRATERF)ELSE 0 END)) AS OUTTAXRF1_2 --売上消費税額（外税）税率1" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (SALES.CONSTAXLAYMETHODRF = 3) AND (SALES.ADDUPADATERF >= TAX.TAXRATESTARTDATE2RF AND SALES.ADDUPADATERF <= TAX.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "      THEN ((SALES.ITDEDSALESOUTTAXRF + SALES.ITDEDSALESDISOUTTAXRF) * TAXRATE2RF)ELSE 0 END)) AS OUTTAXRF2_2--売上消費税額（外税）税率2" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (SALES.CONSTAXLAYMETHODRF = 3) AND (SALES.ADDUPADATERF >= TAX.TAXRATESTARTDATE3RF AND SALES.ADDUPADATERF <= TAX.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "      THEN ((SALES.ITDEDSALESOUTTAXRF + SALES.ITDEDSALESDISOUTTAXRF) * TAXRATE3RF)ELSE 0 END)) AS OUTTAXRF3_2--売上消費税額（外税）税率3" + Environment.NewLine;
                    sqlText += " FROM" + Environment.NewLine;
                    // -- UPD 2011/03/15 ---------------------------->>>
                    //sqlText += "  SALESSLIPRF AS SALES" + Environment.NewLine;
                    //sqlText += " LEFT JOIN TAXRATESETRF AS TAX" + Environment.NewLine;
                    sqlText += "  SALESSLIPRF AS SALES WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += " LEFT JOIN TAXRATESETRF AS TAX WITH (READUNCOMMITTED)" + Environment.NewLine;
                    // -- UPD 2011/03/15 ----------------------------<<<
                    sqlText += "  ON SALES.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
                    // -- UPD 2011/03/15 ---------------------------->>>
                    //sqlText += " LEFT JOIN CUSTOMERRF AS CUST" + Environment.NewLine;
                    sqlText += " LEFT JOIN CUSTOMERRF AS CUST WITH (READUNCOMMITTED)" + Environment.NewLine;
                    // -- UPD 2011/03/15 ----------------------------<<<
                    sqlText += "  ON CUST.ENTERPRISECODERF = SALES.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "  AND CUST.CUSTOMERCODERF = SALES.CUSTOMERCODERF" + Environment.NewLine;
                    sqlText += " WHERE" + Environment.NewLine;
                    sqlText += "  SALES.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND (CASE WHEN (CUST.CLAIMCODERF IS NOT NULL) THEN CUST.CLAIMCODERF ELSE SALES.CLAIMCODERF END)=@FINDCUSTOMERCODE" + Environment.NewLine;
                    sqlText += "  AND (SALES.ADDUPADATERF<=@FINDADDUPDATE AND SALES.ADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;                    
                    sqlText += "  AND SALES.DEBITNOTEDIVRF=0" + Environment.NewLine;
                    sqlText += "  AND SALES.ACPTANODRSTATUSRF=30" + Environment.NewLine;
                    sqlText += "  AND SALES.LOGICALDELETECODERF=0" + Environment.NewLine;
                    sqlText += "  AND SALES.DEBITNOTEDIVRF=0" + Environment.NewLine;
                    sqlText += "  AND SALES.SALESGOODSCDRF = 0" + Environment.NewLine;
                    sqlText += "  AND (SALES.SALESSLIPCDRF = 0 OR SALES.SALESSLIPCDRF = 1)" + Environment.NewLine;
                    sqlText += "GROUP BY" + Environment.NewLine;
                    sqlText += "  SALES.ENTERPRISECODERF" + Environment.NewLine;
                    // -- ADD 2009/10/23 --------------------------------------->>>
                    sqlText += "  ,SALES.RESULTSADDUPSECCDRF" + Environment.NewLine;
                    // -- ADD 2009/10/23 ---------------------------------------<<<
                    sqlText += "  ,SALES.CLAIMCODERF" + Environment.NewLine;
                    sqlText += "  ,CUST.CLAIMCODERF" + Environment.NewLine;
                    sqlText += "  ,SALES.CUSTOMERCODERF" + Environment.NewLine;
                    // 修正 2009/04/17 <<<

                    try
                    {
                        using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                        {
                            //Prameterオブジェクトの作成
                            SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                            SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
                            SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                            SqlParameter findParaLastCAddUpUpdDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int); // ADD 2008.11.19


                            //Parameterオブジェクトへ値設定
                            findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                            findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.CustomerCode);
                            findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.AddUpDate);
                            findParaLastCAddUpUpdDate.Value = SqlDataMediator.SqlSetInt32(totalAfterDay);

                            sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10

                            myReader = sqlCommand.ExecuteReader();

                            while (myReader.Read())
                            {
                                // 修正 2009/04/17 >>>
                                #region DEL 2009/04/17 
                                /*
                                if (custAccRecWork.ConsTaxLayMethod == 3) // 請求子の場合(締後消費税を得意先別に計算する必要がある為)
                                {
                                    totalAfterSales += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSALES")); // 売上正価金額
                                    ItdedtotalAfterSalesOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDTOTALAFTERSALESOUTTAX"));// 外税対象額
                                    totalAfterSalesOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSALESOUTTAX")); // 売上小計
                                    ItdedtotalAfterSalesOutTaxList.Add(SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDTOTALAFTERSALESOUTTAX")));
                                }
                                else
                                {
                                    totalAfterSales = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSALES"));
                                    ItdedtotalAfterSalesOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDTOTALAFTERSALESOUTTAX"));
                                    totalAfterSalesOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSALESOUTTAX"));
                                }
                                */
                                #endregion
                                // 売上正価金額
                                totalAfterSales += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSALES"));
                                // 売上外税消費税(伝票転嫁+明細転嫁)
                                totalAfterSalesOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSALESOUTTAX"));
                                // 売上外税対象額(請求親転嫁)
                                totalAfterSalesOutTax_S += SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF1")) + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF2")) +
                                                           SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF3"));
                                // 売上外税対象額(請求子転嫁)
                                totalAfterSalesOutTaxList.Add(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF1_2")) + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF2_2")) +
                                                              SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF3_2"))); 
                                // 修正 2009/04/17 <<<
                            }
                        }
                    }
                    finally
                    {
                        myReader.Dispose();
                    }
                    #endregion

                    #region 締後入金
                    sqlText = string.Empty;
                    sqlText += "SELECT *" + Environment.NewLine;
                    sqlText += " FROM DEPSITMAINRF WITH" + Environment.NewLine;
                    sqlText += "    (READUNCOMMITTED" + Environment.NewLine;
                    sqlText += "    )" + Environment.NewLine;
                    sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    AND CLAIMCODERF=@FINDCLAIMCODE" + Environment.NewLine;
                    //sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                    sqlText += "    AND" + Environment.NewLine;
                    sqlText += "    (ADDUPADATERF<=@FINDADDUPDATE" + Environment.NewLine;
                    //sqlText += "        AND ADDUPADATERF>DATEADD(DAY, 1, @FINDLASTTIMEADDUPDATE)" + Environment.NewLine; // DEL 2008.11.19
                    sqlText += "        AND ADDUPADATERF>@FINDLASTTIMEADDUPDATE" + Environment.NewLine;  // ADD 2008.11.19
                    sqlText += "    )" + Environment.NewLine;
                    sqlText += "    AND LOGICALDELETECODERF = 0" + Environment.NewLine;

                    sqlText += " ORDER BY CUSTOMERCODERF" + Environment.NewLine;
                    try
                    {
                        using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                        {
                            //Prameterオブジェクトの作成
                            SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                            SqlParameter findParaClaimCode = sqlCommand.Parameters.Add("@FINDCLAIMCODE", SqlDbType.Int);
                            //SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                            SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                            //SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.DateTime); // DEL 2008.11.19
                            SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int); // ADD 2008.11.19

                            //Parameterオブジェクトへ値設定
                            findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                            findParaClaimCode.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.CustomerCode);
                            //findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.AddUpSecCode);
                            findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.AddUpDate);
                            //findParaLastTimeAddUpDate.Value = TDateTime.LongDateToDateTime(retList[0].TotalDay); // DEL 2008.11.19
                            //findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetInt32(retList[0].TotalDay); // ADD 2008.11.19 
                            findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetInt32(totalAfterDay);

                            sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10

                            myReader = sqlCommand.ExecuteReader();

                            while (myReader.Read())
                            {
                                totalAfterDepo += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("DEPOSITTOTALRF"));
                            }
                        }
                    }
                    finally
                    {
                        myReader.Dispose();
                    }
                    #endregion
                }
            }
            #endregion

            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            //売上データ
            //SalesSlipWork salesSlipWork = null; // DEL 2008.12.22

            try
            {
                // 修正 2008.12.22 >>>
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.Connection = sqlConnection;
                    string sqlText = string.Empty;
                    if (custAccRecWork.CustomerCode == custAccRecWork.ClaimCode)　// ←念のため
                    {
                        #region ■ 集計レコード集計処理

                        #region SELECT文作成

                        #region SELECT
                        #region DEL 2009/04/17
                        /*
                        sqlText += "SELECT" + Environment.NewLine;
                        sqlText += "ACCREC.CLAIMCODERF," + Environment.NewLine;
                        sqlText += "ACCREC.CLAIMNAMERF," + Environment.NewLine;
                        sqlText += "ACCREC.CLAIMNAME2RF," + Environment.NewLine;
                        sqlText += "ACCREC.CLAIMSNMRF," + Environment.NewLine;
                        sqlText += "ACCREC.FRACTIONPROCCDRF,  --端数処理単位" + Environment.NewLine;
                        sqlText += "ACCREC.FRACTIONPROCUNITRF,--端数処理区分" + Environment.NewLine;
                        // ■相殺
                        sqlText += "ACCREC.SALESNETPRICERF + ACCREC.RETSALESNETPRICERF +ACCREC.SALESDISTTLTAXEXCRF AS OFSTHISTIMESALESRF," + Environment.NewLine;                // 今回売上金額
                        sqlText += "ACCREC.ITDEDSALESOUTTAXRF+ACCREC.RETITDEDSALESOUTTAXRF+ACCREC.ITDEDSALESDISOUTTAXRF AS ITDEDOFFSETOUTTAXRF," + Environment.NewLine;　        // 外税対象額
                        sqlText += "ACCREC.ITDEDSALESINTAXRF+ ACCREC.RETITDEDSALESINTAXRF+ ACCREC.ITDEDSALESDISINTAXRF AS ITDEDOFFSETINTAXRF," + Environment.NewLine;            // 内税対象額
                        sqlText += "ACCREC.SALSUBTTLSUBTOTAXFRERF+ACCREC.RETSALSUBTTLSUBTOTAXFRERF+ACCREC.ITDEDSALESDISTAXFRERF AS ITDEDOFFSETTAXFREERF," + Environment.NewLine; // 非課税対象額
                        sqlText += "ACCREC.SALAMNTCONSTAXINCLURF + ACCREC.RETSALAMNTCONSTAXINCLURF + ACCREC.SALESDISTTLTAXINCLURF AS OFFSETINTAXRF," + Environment.NewLine;　    // 内税消費税
                        // ■売上
                        sqlText += "ACCREC.SALESNETPRICERF AS THISTIMESALESRF," + Environment.NewLine; // 今回売上金額                        
                        //sqlText += "(CASE WHEN (ACCREC.CONSTAXLAYMETHODRF=0 OR ACCREC.CONSTAXLAYMETHODRF=1) THEN ACCREC.SALESOUTTAXRF" + Environment.NewLine;
                        //sqlText += "ELSE (ACCREC.SALESOUTTAXRF1 +ACCREC.SALESOUTTAXRF2 +ACCREC.SALESOUTTAXRF3) END)+ACCREC.SALAMNTCONSTAXINCLURF AS THISSALESTAXRF," + Environment.NewLine;　// 今回売上消費税
                        sqlText += "ACCREC.SALESOUTTAXRF+ACCREC.SALAMNTCONSTAXINCLURF AS THISSALESTAXRF," + Environment.NewLine;　// 今回売上消費税
                        sqlText += "ACCREC.ITDEDSALESOUTTAXRF  AS ITDEDSALESOUTTAXRF," + Environment.NewLine;     // 外税対象額
                        sqlText += "ACCREC.ITDEDSALESINTAXRF AS ITDEDSALESINTAXRF, " + Environment.NewLine;       // 内税対象額
                        sqlText += "ACCREC.SALSUBTTLSUBTOTAXFRERF AS ITDEDSALESTAXFREERF," + Environment.NewLine; // 非課税対象額                        
                        //sqlText += "(CASE WHEN (ACCREC.CONSTAXLAYMETHODRF=0 OR ACCREC.CONSTAXLAYMETHODRF=1) THEN ACCREC.SALESOUTTAXRF" + Environment.NewLine;
                        //sqlText += "ELSE (ACCREC.SALESOUTTAXRF1 +ACCREC.SALESOUTTAXRF2 +ACCREC.SALESOUTTAXRF3) END)AS SALESOUTTAXRF," + Environment.NewLine; // 売上外税額
                        sqlText += "ACCREC.SALESOUTTAXRF AS SALESOUTTAXRF," + Environment.NewLine;// 売上外税額
                        sqlText += "ACCREC.SALAMNTCONSTAXINCLURF AS SALESINTAXRF," + Environment.NewLine;　       // 売上内税額
                        // ■返品
                        sqlText += "ACCREC.RETSALESNETPRICERF AS THISSALESPRICRGDSRF," + Environment.NewLine;　  // 今回返品額
                        //sqlText += "(CASE WHEN (ACCREC.CONSTAXLAYMETHODRF=0 OR ACCREC.CONSTAXLAYMETHODRF=1) THEN ACCREC.RETSALESOUTTAXRF" + Environment.NewLine;
                        //sqlText += "ELSE (ACCREC.RETSALESOUTTAXRF1 +ACCREC.RETSALESOUTTAXRF2 +ACCREC.RETSALESOUTTAXRF3) END)+ACCREC.RETSALAMNTCONSTAXINCLURF AS THISSALESPRCTAXRGDSRF," + Environment.NewLine;// 返品消費税
                        sqlText += "ACCREC.RETSALESOUTTAXRF+ACCREC.RETSALAMNTCONSTAXINCLURF AS THISSALESPRCTAXRGDSRF," + Environment.NewLine;// 返品消費税
                        sqlText += "ACCREC.RETITDEDSALESOUTTAXRF AS TTLITDEDRETOUTTAXRF," + Environment.NewLine;      //返品外税対象額合計
                        sqlText += "ACCREC.RETITDEDSALESINTAXRF AS TTLITDEDRETINTAXRF," + Environment.NewLine;        //返品内税対象額合計
                        sqlText += "ACCREC.RETSALSUBTTLSUBTOTAXFRERF AS TTLITDEDRETTAXFREERF," + Environment.NewLine; //返品非課税対象額合計
                        //sqlText += "(CASE WHEN (ACCREC.CONSTAXLAYMETHODRF=0 OR ACCREC.CONSTAXLAYMETHODRF=1) THEN ACCREC.RETSALESOUTTAXRF" + Environment.NewLine;
                        //sqlText += "ELSE (ACCREC.RETSALESOUTTAXRF1 +ACCREC.RETSALESOUTTAXRF2 +ACCREC.RETSALESOUTTAXRF3) END)AS TTLRETOUTERTAXRF," + Environment.NewLine; //返品外税額合計
                        sqlText += "ACCREC.RETSALESOUTTAXRF AS TTLRETOUTERTAXRF," + Environment.NewLine; //返品外税額合計
                        sqlText += "ACCREC.RETSALAMNTCONSTAXINCLURF AS TTLRETINNERTAXRF," + Environment.NewLine;  //返品内税額合計
                        // ■値引
                        sqlText += "ACCREC.SALESDISTTLTAXEXCRF AS THISSALESPRICDISRF," + Environment.NewLine;     //今回値引金額
                        //sqlText += "(CASE WHEN (ACCREC.CONSTAXLAYMETHODRF=0 OR ACCREC.CONSTAXLAYMETHODRF=1) THEN ACCREC.SALESDISOUTTAXRF" + Environment.NewLine;
                        //sqlText += " ELSE (ACCREC.SALESDISOUTTAXRF1 +ACCREC.SALESDISOUTTAXRF2 +ACCREC.SALESDISOUTTAXRF3) END)+ACCREC.SALESDISTTLTAXINCLURF AS THISSALESPRCTAXDISRF," + Environment.NewLine; //今回売上値引消費税
                        sqlText += "ACCREC.SALESDISOUTTAXRF+ACCREC.SALESDISTTLTAXINCLURF AS THISSALESPRCTAXDISRF," + Environment.NewLine; //今回売上値引消費税
                        sqlText += "ACCREC.ITDEDSALESDISOUTTAXRF AS TTLITDEDDISOUTTAXRF," + Environment.NewLine;  //値引外税対象額合計
                        sqlText += "ACCREC.ITDEDSALESDISINTAXRF AS TTLITDEDDISINTAXRF," + Environment.NewLine;    //値引内税対象額合計
                        sqlText += "ACCREC.ITDEDSALESDISTAXFRERF AS TTLITDEDDISTAXFREERF, " + Environment.NewLine;//値引非課税対象額合計
                        //sqlText += "(CASE WHEN (ACCREC.CONSTAXLAYMETHODRF=0 OR ACCREC.CONSTAXLAYMETHODRF=1) THEN ACCREC.SALESDISOUTTAXRF" + Environment.NewLine;
                        //sqlText += " ELSE (ACCREC.SALESDISTTAXRF1 +ACCREC.SALESDISOUTTAXRF2 +ACCREC.SALESDISOUTTAXRF3)  END)AS TTLDISOUTERTAXRF, " + Environment.NewLine;//値引外税額合計
                        sqlText += " ACCREC.SALESDISOUTTAXRF AS TTLDISOUTERTAXRF, " + Environment.NewLine;//値引外税額合計
                        sqlText += "ACCREC.SALESDISTTLTAXINCLURF AS TTLDISINNERTAXRF," + Environment.NewLine;     //値引内税額合計
                        sqlText += "ACCREC.SALESSLIPCOUNT AS SALESSLIPCOUNTRF,         --売上伝票枚数" + Environment.NewLine;
                        sqlText += "ACCREC.CONSTAXLAYMETHODRF AS CONSTAXLAYMETHODRF,   --消費税転嫁方式" + Environment.NewLine;
                        sqlText += "ACCREC.SALESCNSTAXFRCPROCCDRF AS FRACTIONPROCCDRF, --端数処理区分" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATESTARTDATERF AS TAXRATESTARTDATERF,   --税率開始日" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATEENDDATERF AS TAXRATEENDDATERF,       --税率終了日" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATERF AS TAXRATERF,                     --税率" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF, --税率開始日2" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF,     --税率終了日2" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATE2RF AS TAXRATE2RF,                   --税率2" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF, --税率開始日3" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF,     --税率終了日3" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATE3RF AS TAXRATE3RF                    --税率3" + Environment.NewLine;
                        sqlText += "FROM" + Environment.NewLine;
                        sqlText += "(" + Environment.NewLine;
                        */
                        #endregion
                        sqlText += "SELECT" + Environment.NewLine;
                        sqlText += "ACCREC.CLAIMCODERF," + Environment.NewLine;
                        sqlText += "ACCREC.CLAIMNAMERF," + Environment.NewLine;
                        sqlText += "ACCREC.CLAIMNAME2RF," + Environment.NewLine;
                        sqlText += "ACCREC.CLAIMSNMRF," + Environment.NewLine;
                        sqlText += "ACCREC.FRACTIONPROCCDRF,  --端数処理単位" + Environment.NewLine;
                        sqlText += "ACCREC.FRACTIONPROCUNITRF,--端数処理区分" + Environment.NewLine;
                        sqlText += "ACCREC.SALESNETPRICERF + ACCREC.RETSALESNETPRICERF +ACCREC.SALESDISTTLTAXEXCRF AS OFSTHISTIMESALESRF,               -- 相殺後今回売上金額" + Environment.NewLine;
                        sqlText += "ACCREC.ITDEDSALESOUTTAXRF+ACCREC.RETITDEDSALESOUTTAXRF+ACCREC.ITDEDSALESDISOUTTAXRF AS ITDEDOFFSETOUTTAXRF,         -- 相殺後今回外税対象額" + Environment.NewLine;
                        sqlText += "ACCREC.ITDEDSALESINTAXRF+ ACCREC.RETITDEDSALESINTAXRF+ ACCREC.ITDEDSALESDISINTAXRF AS ITDEDOFFSETINTAXRF,           -- 相殺後今回内税対象額" + Environment.NewLine;
                        sqlText += "ACCREC.SALSUBTTLSUBTOTAXFRERF+ACCREC.RETSALSUBTTLSUBTOTAXFRERF+ACCREC.ITDEDSALESDISTAXFRERF AS ITDEDOFFSETTAXFREERF,-- 相殺後今回非課税対象額" + Environment.NewLine;
                        sqlText += "ACCREC.SALAMNTCONSTAXINCLURF + ACCREC.RETSALAMNTCONSTAXINCLURF + ACCREC.SALESDISTTLTAXINCLURF AS OFFSETINTAXRF,     -- 相殺後今回内税額" + Environment.NewLine;
                        sqlText += "-- ■ ■ 売上" + Environment.NewLine;
                        sqlText += "ACCREC.SALESNETPRICERF AS THISTIMESALESRF," + Environment.NewLine;
                        sqlText += "ACCREC.ITDEDSALESOUTTAXRF  AS ITDEDSALESOUTTAXRF," + Environment.NewLine;
                        sqlText += "ACCREC.ITDEDSALESINTAXRF AS ITDEDSALESINTAXRF, " + Environment.NewLine;
                        sqlText += "ACCREC.SALSUBTTLSUBTOTAXFRERF AS ITDEDSALESTAXFREERF," + Environment.NewLine;
                        sqlText += "ACCREC.SALAMNTCONSTAXINCLURF AS SALESINTAXRF," + Environment.NewLine;
                        sqlText += "-- 伝票転嫁＆明細転嫁 外税消費税" + Environment.NewLine;
                        sqlText += "ACCREC.SALESOUTTAXRF AS SALESOUTTAXRF," + Environment.NewLine;
                        sqlText += "-- 請求(親)転嫁 外税諸費税" + Environment.NewLine;
                        //sqlText += "ACCREC.SALESOUTTAXRF1+ACCREC.SALESOUTTAXRF2+ACCREC.SALESOUTTAXRF3 AS SALESOUTTAXRF_S," + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        sqlText += "ACCREC.SALESOUTTAXRF1*TAXRATERF+ACCREC.SALESOUTTAXRF2*TAXRATE2RF+ACCREC.SALESOUTTAXRF3*TAXRATE3RF AS SALESOUTTAXRF_S," + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        sqlText += "-- ■ ■ 返品" + Environment.NewLine;
                        sqlText += "ACCREC.RETSALESNETPRICERF AS THISSALESPRICRGDSRF," + Environment.NewLine;
                        sqlText += "ACCREC.RETITDEDSALESOUTTAXRF AS TTLITDEDRETOUTTAXRF," + Environment.NewLine;
                        sqlText += "ACCREC.RETITDEDSALESINTAXRF AS TTLITDEDRETINTAXRF," + Environment.NewLine;
                        sqlText += "ACCREC.RETSALSUBTTLSUBTOTAXFRERF AS TTLITDEDRETTAXFREERF," + Environment.NewLine;
                        sqlText += "ACCREC.RETSALAMNTCONSTAXINCLURF AS TTLRETINNERTAXRF," + Environment.NewLine;
                        sqlText += "-- 伝票転嫁＆明細転嫁 外税消費税" + Environment.NewLine;
                        sqlText += "ACCREC.RETSALESOUTTAXRF AS TTLRETOUTERTAXRF," + Environment.NewLine;
                        sqlText += "-- 請求(親)転嫁 外税諸費税" + Environment.NewLine;
                        //sqlText += "ACCREC.RETSALESOUTTAXRF1+ACCREC.RETSALESOUTTAXRF2+ACCREC.RETSALESOUTTAXRF3 AS TTLRETOUTERTAXRF_S," + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        sqlText += "ACCREC.RETSALESOUTTAXRF1*TAXRATERF+ACCREC.RETSALESOUTTAXRF2*TAXRATE2RF+ACCREC.RETSALESOUTTAXRF3*TAXRATE3RF AS TTLRETOUTERTAXRF_S," + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        sqlText += "-- ■ ■ 値引" + Environment.NewLine;
                        sqlText += "ACCREC.SALESDISTTLTAXEXCRF AS THISSALESPRICDISRF," + Environment.NewLine;
                        sqlText += "ACCREC.ITDEDSALESDISOUTTAXRF AS TTLITDEDDISOUTTAXRF," + Environment.NewLine;
                        sqlText += "ACCREC.ITDEDSALESDISINTAXRF AS TTLITDEDDISINTAXRF," + Environment.NewLine;
                        sqlText += "ACCREC.ITDEDSALESDISTAXFRERF AS TTLITDEDDISTAXFREERF, " + Environment.NewLine;
                        sqlText += "ACCREC.SALESDISTTLTAXINCLURF AS TTLDISINNERTAXRF," + Environment.NewLine;
                        sqlText += "-- 伝票転嫁＆明細転嫁 外税消費税" + Environment.NewLine;
                        sqlText += "ACCREC.SALESDISOUTTAXRF AS TTLDISOUTERTAXRF," + Environment.NewLine;
                        sqlText += "-- 請求転嫁(親)" + Environment.NewLine;
                        //sqlText += "ACCREC.SALESDISOUTTAXRF1+ACCREC.SALESDISOUTTAXRF2+ACCREC.SALESDISOUTTAXRF3 AS TTLDISOUTERTAXRF_S," + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        sqlText += "ACCREC.SALESDISOUTTAXRF1*TAXRATERF+ACCREC.SALESDISOUTTAXRF2*TAXRATE2RF+ACCREC.SALESDISOUTTAXRF3*TAXRATE3RF AS TTLDISOUTERTAXRF_S," + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        sqlText += "ACCREC.SALESSLIPCOUNT AS SALESSLIPCOUNTRF,        --売上伝票枚数" + Environment.NewLine;
                        sqlText += "ACCREC.SALESCNSTAXFRCPROCCDRF AS FRACTIONPROCCDRF,--端数処理区分" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATESTARTDATERF AS TAXRATESTARTDATERF,  --税率開始日" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATEENDDATERF AS TAXRATEENDDATERF,      --税率終了日" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATERF AS TAXRATERF,                    --税率" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF,--税率開始日2" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF,    --税率終了日2" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATE2RF AS TAXRATE2RF,                  --税率2" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF,--税率開始日3" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF,    --税率終了日3" + Environment.NewLine;
                        sqlText += "ACCREC.TAXRATE3RF AS TAXRATE3RF                   --税率3" + Environment.NewLine;
                        sqlText += "FROM" + Environment.NewLine;
                        sqlText += "(" + Environment.NewLine;
                        // 修正 2009/04/17 <<<
                        #endregion

                        #region SUBクエリ
                        // 修正 2009/04/17 >>>
                        #region DEL 2009/04/17
                        /*
                        sqlText += "  SELECT" + Environment.NewLine;
                        sqlText += "   SALE.CLAIMCODERF AS CLAIMCODERF," + Environment.NewLine;
                        sqlText += "   CLAIM.NAMERF AS CLAIMNAMERF," + Environment.NewLine;
                        sqlText += "   CLAIM.NAME2RF AS CLAIMNAME2RF," + Environment.NewLine;
                        sqlText += "   CLAIM.CUSTOMERSNMRF AS CLAIMSNMRF," + Environment.NewLine;
                        //sqlText += "   CLAIM.CONSTAXLAYMETHODRF AS CONSTAXLAYMETHODRF," + Environment.NewLine;
                        sqlText += "   (CASE WHEN CLAIM.CUSTCTAXLAYREFCDRF = 0 THEN SALE.TAXCONSTAXLAYMETHODRF ELSE CLAIM.CONSTAXLAYMETHODRF END ) AS CONSTAXLAYMETHODRF," + Environment.NewLine;
                        sqlText += "   CLAIM.SALESCNSTAXFRCPROCCDRF AS SALESCNSTAXFRCPROCCDRF," + Environment.NewLine;
                        sqlText += "   SALESPROC.FRACTIONPROCCDRF," + Environment.NewLine;
                        sqlText += "   SALESPROC.FRACTIONPROCUNITRF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATESTARTDATERF AS TAXRATESTARTDATERF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATEENDDATERF AS TAXRATEENDDATERF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATE3RF AS TAXRATE3RF," + Environment.NewLine;
                        sqlText += "   COUNT(SALE.SALESSLIPNUMRF) SALESSLIPCOUNT," + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.SALESNETPRICERF ELSE 0 END)) AS SALESNETPRICERF," + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.ITDEDSALESOUTTAXRF ELSE 0 END)) AS ITDEDSALESOUTTAXRF," + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.ITDEDSALESINTAXRF ELSE 0 END)) AS ITDEDSALESINTAXRF," + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.SALSUBTTLSUBTOTAXFRERF ELSE 0 END)) AS SALSUBTTLSUBTOTAXFRERF," + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.SALESOUTTAXRF ELSE 0 END)) AS SALESOUTTAXRF," + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                        sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * SALE.TAXRATERF) ELSE 0 END)) AS SALESOUTTAXRF1," + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF) " + Environment.NewLine;
                        sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS SALESOUTTAXRF2,                                --売上金額消費税額（外税）税率2" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF) " + Environment.NewLine;
                        sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS SALESOUTTAXRF3,                                --売上金額消費税額（外税）税率3" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.SALAMNTCONSTAXINCLURF ELSE 0 END)) AS SALAMNTCONSTAXINCLURF,     --売上金額消費税額（内税）" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.SALESNETPRICERF ELSE 0 END)) AS RETSALESNETPRICERF,              --返品 売上正価金額" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.ITDEDSALESOUTTAXRF ELSE 0 END)) AS RETITDEDSALESOUTTAXRF,        --返品 売上外税対象額 " + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.ITDEDSALESINTAXRF ELSE 0 END)) AS RETITDEDSALESINTAXRF,          --返品 売上内税対象額 " + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.SALSUBTTLSUBTOTAXFRERF ELSE 0 END)) AS RETSALSUBTTLSUBTOTAXFRERF,--返品 売上小計非課税対象額 " + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.SALESOUTTAXRF ELSE 0 END)) AS RETSALESOUTTAXRF,                  --返品 売上金額消費税額（外税）" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                        sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * SALE.TAXRATERF) ELSE 0 END)) AS RETSALESOUTTAXRF1,                         --返品 売上金額消費税額（外税）税率1" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                        sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS RETSALESOUTTAXRF2,                             --返品 売上金額消費税額（外税）税率2" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF)" + Environment.NewLine;
                        sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS RETSALESOUTTAXRF3,                             --返品 売上金額消費税額（外税）税率3" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.SALAMNTCONSTAXINCLURF ELSE 0 END)) AS RETSALAMNTCONSTAXINCLURF,  --返品 売上金額消費税額（内税）" + Environment.NewLine;
                        sqlText += "   SUM(SALE.SALESDISTTLTAXEXCRF) AS SALESDISTTLTAXEXCRF,    --売上値引金額計（税抜き）" + Environment.NewLine;
                        sqlText += "   SUM(SALE.ITDEDSALESDISOUTTAXRF) AS ITDEDSALESDISOUTTAXRF,--売上値引外税対象額合計" + Environment.NewLine;
                        sqlText += "   SUM(SALE.ITDEDSALESDISINTAXRF) AS ITDEDSALESDISINTAXRF,  --売上値引内税対象額合計 " + Environment.NewLine;
                        sqlText += "   SUM(SALE.ITDEDSALESDISTAXFRERF) AS ITDEDSALESDISTAXFRERF,--売上値引非課税対象額合計" + Environment.NewLine;
                        sqlText += "   SUM(SALE.SALESDISOUTTAXRF) AS SALESDISOUTTAXRF,          --売上値引消費税額（外税）" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                        sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATERF) ELSE 0 END)) AS SALESDISOUTTAXRF1,  --売上値引消費税額（外税）税率1" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                        sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS SALESDISOUTTAXRF2, --売上値引消費税額（外税）税率2" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                        sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS SALESDISOUTTAXRF3, --売上値引消費税額（外税）税率3" + Environment.NewLine;
                        sqlText += "   SUM(SALE.SALESDISTTLTAXINCLURF) AS SALESDISTTLTAXINCLURF    --売上値引消費税額（内税）" + Environment.NewLine;
                        sqlText += "  FROM" + Environment.NewLine;
                        sqlText += "  (" + Environment.NewLine;
                        sqlText += "     SELECT" + Environment.NewLine;
                        sqlText += "      SUBSALE.ENTERPRISECODERF," + Environment.NewLine;
                        //sqlText += "      SUBSALE.CLAIMCODERF," + Environment.NewLine;
                        sqlText += "      (CASE WHEN (SEARCHCUST.CLAIMCODERF IS NOT NULL) THEN SEARCHCUST.CLAIMCODERF ELSE SUBSALE.CLAIMCODERF END) AS CLAIMCODERF," + Environment.NewLine;
                        sqlText += "      SUBSALE.CUSTOMERCODERF," + Environment.NewLine;
                        sqlText += "      SUBSALE.ADDUPADATERF," + Environment.NewLine;
                        sqlText += "      SUBSALE.LOGICALDELETECODERF," + Environment.NewLine;
                        sqlText += "      SUBSALE.ACPTANODRSTATUSRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.DEBITNOTEDIVRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALESSLIPNUMRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALESSLIPCDRF," + Environment.NewLine;
                        // 修正 2009.03.24 >>>
                        //sqlText += "      SUBSALE.SALESNETPRICERF," + Environment.NewLine;
                        //sqlText += "      SUBSALE.ITDEDSALESOUTTAXRF," + Environment.NewLine;
                        //sqlText += "      SUBSALE.ITDEDSALESINTAXRF," + Environment.NewLine;
                        //sqlText += "      SUBSALE.SALSUBTTLSUBTOTAXFRERF," + Environment.NewLine;
                        //sqlText += "      SUBSALE.SALESOUTTAXRF," + Environment.NewLine;
                        //sqlText += "      SUBSALE.SALAMNTCONSTAXINCLURF," + Environment.NewLine;
                        //sqlText += "      SUBSALE.SALESDISTTLTAXEXCRF," + Environment.NewLine;
                        //sqlText += "      SUBSALE.ITDEDSALESDISOUTTAXRF," + Environment.NewLine;
                        //sqlText += "      SUBSALE.ITDEDSALESDISINTAXRF," + Environment.NewLine;
                        //sqlText += "      SUBSALE.ITDEDSALESDISTAXFRERF," + Environment.NewLine;
                        //sqlText += "      SUBSALE.SALESDISOUTTAXRF," + Environment.NewLine;
                        //sqlText += "      SUBSALE.SALESDISTTLTAXINCLURF," + Environment.NewLine;                        
                        // 売上・返品(行値引含む)
                        sqlText += "      SUBSALE.SALESNETPRICERF + SALESDTL.DISSALESTAXEXCGYO AS SALESNETPRICERF," + Environment.NewLine;
                        sqlText += "      SUBSALE.ITDEDSALESOUTTAXRF + SALESDTL.ITDEDDISSALESOUTTAXGYO AS ITDEDSALESOUTTAXRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.ITDEDSALESINTAXRF + SALESDTL.ITDEDDISSALESINTAXGYO AS ITDEDSALESINTAXRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALSUBTTLSUBTOTAXFRERF + SALESDTL.ITDEDDISSALESTAXFREGYO AS SALSUBTTLSUBTOTAXFRERF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALESOUTTAXRF + SALESDTL.DISSALESOUTTAXGYO AS SALESOUTTAXRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALAMNTCONSTAXINCLURF + SALESDTL.DISSALESTAXFREGYO AS SALAMNTCONSTAXINCLURF," + Environment.NewLine;
                        // 値引(行値引除く)
                        sqlText += "      SUBSALE.SALESDISTTLTAXEXCRF -  SALESDTL.DISSALESTAXEXCGYO AS SALESDISTTLTAXEXCRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.ITDEDSALESDISOUTTAXRF - SALESDTL.ITDEDDISSALESOUTTAXGYO AS ITDEDSALESDISOUTTAXRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.ITDEDSALESDISINTAXRF - SALESDTL.ITDEDDISSALESINTAXGYO AS ITDEDSALESDISINTAXRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.ITDEDSALESDISTAXFRERF - SALESDTL.ITDEDDISSALESTAXFREGYO AS ITDEDSALESDISTAXFRERF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALESDISOUTTAXRF - SALESDTL.DISSALESOUTTAXGYO AS SALESDISOUTTAXRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALESDISTTLTAXINCLURF - SALESDTL.DISSALESTAXFREGYO AS SALESDISTTLTAXINCLURF," + Environment.NewLine;
                        // 修正 2009.03.24 <<<
                        sqlText += "      TAX.TAXRATESTARTDATERF AS TAXRATESTARTDATERF,   --税率開始日" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATEENDDATERF AS TAXRATEENDDATERF,       --税率終了日" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATERF AS TAXRATERF,                     --税率" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF, --税率開始日2" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF,     --税率終了日2" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATE2RF AS TAXRATE2RF,                   --税率2" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF, --税率開始日3" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF,     --税率終了日3" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATE3RF AS TAXRATE3RF,                   --税率3" + Environment.NewLine;
                        sqlText += "      TAX.CONSTAXLAYMETHODRF AS TAXCONSTAXLAYMETHODRF" + Environment.NewLine;
                        sqlText += "     FROM" + Environment.NewLine;
                        sqlText += "      SALESSLIPRF AS SUBSALE WITH(READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += "    LEFT JOIN TAXRATESETRF AS TAX" + Environment.NewLine;
                        sqlText += "     ON SUBSALE.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "    LEFT JOIN CUSTOMERRF AS SEARCHCUST " + Environment.NewLine;
                        sqlText += "     ON  SUBSALE.ENTERPRISECODERF = SEARCHCUST.ENTERPRISECODERF " + Environment.NewLine;
                        sqlText += "     AND SUBSALE.CUSTOMERCODERF = SEARCHCUST.CUSTOMERCODERF " + Environment.NewLine;
                        // ADD 2009.03.24 >>>
                        sqlText += "    LEFT JOIN" + Environment.NewLine;
                        sqlText += "    (" + Environment.NewLine;
                        sqlText += "      SELECT" + Environment.NewLine;
                        sqlText += "       SALES.ENTERPRISECODERF," + Environment.NewLine;
                        sqlText += "       SALES.ACPTANODRSTATUSRF," + Environment.NewLine;
                        sqlText += "       SALES.SALESSLIPNUMRF," + Environment.NewLine;
                        sqlText += "       SALES.SALESSLIPCDRF," + Environment.NewLine;
                        sqlText += "       --行値引" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0 ) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS DISSALESTAXEXCGYO,-- 税抜値引金額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 0) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESOUTTAXGYO,-- 外税対象額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 1) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESTAXFREGYO, -- 非課税対象額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 2) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESINTAXGYO,-- 内税対象額(行値引)       " + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 0) THEN DTL.SALESPRICECONSTAXRF ELSE 0 END) AS DISSALESOUTTAXGYO,    -- 外税額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 2) THEN DTL.SALESPRICECONSTAXRF ELSE 0 END) AS DISSALESTAXFREGYO,    -- 内税額(行値引)       " + Environment.NewLine;
                        sqlText += "       --商品値引" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF !=0 ) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS DISSALESTAXEXCGOODS,-- 税抜値引金額(商品値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF !=0  AND DTL.TAXATIONDIVCDRF  = 0) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESOUTTAXGOODS,-- 外税対象額(商品値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF !=0  AND DTL.TAXATIONDIVCDRF  = 1) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESTAXFREGOODS, -- 非課税対象額(商品値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF !=0  AND DTL.TAXATIONDIVCDRF  = 2) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESINTAXGOODS,-- 内税対象額(商品値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF !=0  AND DTL.TAXATIONDIVCDRF  = 0) THEN DTL.SALESPRICECONSTAXRF ELSE 0 END) AS DISSALESOUTTAXGOODS,    -- 外税額(商品値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF !=0  AND DTL.TAXATIONDIVCDRF  = 2) THEN DTL.SALESPRICECONSTAXRF ELSE 0 END) AS DISSALESTAXFREGOODS     -- 内税額(商品値引)" + Environment.NewLine;
                        sqlText += "      FROM" + Environment.NewLine;
                        sqlText += "       SALESDETAILRF AS DTL" + Environment.NewLine;
                        sqlText += "      LEFT JOIN SALESSLIPRF AS SALES" + Environment.NewLine;
                        sqlText += "       ON  SALES.ENTERPRISECODERF = DTL.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "       AND SALES.ACPTANODRSTATUSRF = DTL.ACPTANODRSTATUSRF" + Environment.NewLine;
                        sqlText += "       AND SALES.SALESSLIPNUMRF = DTL.SALESSLIPNUMRF" + Environment.NewLine;
                        sqlText += "      GROUP BY" + Environment.NewLine;
                        sqlText += "       SALES.ENTERPRISECODERF," + Environment.NewLine;
                        sqlText += "       SALES.ACPTANODRSTATUSRF," + Environment.NewLine;
                        sqlText += "       SALES.SALESSLIPNUMRF," + Environment.NewLine;
                        sqlText += "       SALES.SALESSLIPCDRF" + Environment.NewLine;
                        sqlText += "    ) AS SALESDTL" + Environment.NewLine;
                        sqlText += "     ON  SUBSALE.ENTERPRISECODERF = SALESDTL.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "     AND SUBSALE.ACPTANODRSTATUSRF = SALESDTL.ACPTANODRSTATUSRF" + Environment.NewLine;
                        sqlText += "     AND SUBSALE.SALESSLIPNUMRF = SALESDTL.SALESSLIPNUMRF" + Environment.NewLine;
                        // ADD 2009.03.24 <<<
                        sqlText += "  ) AS SALE" + Environment.NewLine;
                        */
                        #endregion
                        sqlText += "  SELECT" + Environment.NewLine;
                        sqlText += "   SALE.CLAIMCODERF AS CLAIMCODERF," + Environment.NewLine;
                        sqlText += "   CLAIM.NAMERF AS CLAIMNAMERF," + Environment.NewLine;
                        sqlText += "   CLAIM.NAME2RF AS CLAIMNAME2RF," + Environment.NewLine;
                        sqlText += "   CLAIM.CUSTOMERSNMRF AS CLAIMSNMRF," + Environment.NewLine;
                        sqlText += "   CLAIM.SALESCNSTAXFRCPROCCDRF AS SALESCNSTAXFRCPROCCDRF," + Environment.NewLine;
                        sqlText += "   SALESPROC.FRACTIONPROCCDRF," + Environment.NewLine;
                        sqlText += "   SALESPROC.FRACTIONPROCUNITRF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATESTARTDATERF AS TAXRATESTARTDATERF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATEENDDATERF AS TAXRATEENDDATERF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF," + Environment.NewLine;
                        sqlText += "   SALE.TAXRATE3RF AS TAXRATE3RF," + Environment.NewLine;
                        sqlText += "   COUNT(SALE.SALESSLIPNUMRF) SALESSLIPCOUNT," + Environment.NewLine;
                        sqlText += "   -- ■ ■ 売上" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.SALESNETPRICERF ELSE 0 END)) AS SALESNETPRICERF," + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.ITDEDSALESOUTTAXRF ELSE 0 END)) AS ITDEDSALESOUTTAXRF," + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.ITDEDSALESINTAXRF ELSE 0 END)) AS ITDEDSALESINTAXRF," + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.SALSUBTTLSUBTOTAXFRERF ELSE 0 END)) AS SALSUBTTLSUBTOTAXFRERF," + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.SALAMNTCONSTAXINCLURF ELSE 0 END)) AS SALAMNTCONSTAXINCLURF," + Environment.NewLine;
                        sqlText += "   -- 伝票転嫁と明細転嫁" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 0 OR SALE.CONSTAXLAYMETHODRF=1) AND (SALE.SALESSLIPCDRF =0) THEN SALE.SALESOUTTAXRF ELSE 0 END)) AS SALESOUTTAXRF," + Environment.NewLine;
                        sqlText += "   -- 請求転嫁(親)" + Environment.NewLine;
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                        //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * SALE.TAXRATERF) ELSE 0 END)) AS SALESOUTTAXRF1,--売上金額消費税額（外税）税率1" + Environment.NewLine;
                        //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF) " + Environment.NewLine;
                        //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS SALESOUTTAXRF2,    --売上金額消費税額（外税）税率2" + Environment.NewLine;
                        //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF) " + Environment.NewLine;
                        //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS SALESOUTTAXRF3,    --売上金額消費税額（外税）税率3" + Environment.NewLine;
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                        sqlText += "        THEN SALE.ITDEDSALESOUTTAXRF ELSE 0 END)) AS SALESOUTTAXRF1,--売上金額消費税額（外税）税率1 税率乗算前" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF) " + Environment.NewLine;
                        sqlText += "        THEN SALE.ITDEDSALESOUTTAXRF ELSE 0 END)) AS SALESOUTTAXRF2,--売上金額消費税額（外税）税率2 税率乗算前" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF) " + Environment.NewLine;
                        sqlText += "        THEN SALE.ITDEDSALESOUTTAXRF ELSE 0 END)) AS SALESOUTTAXRF3,--売上金額消費税額（外税）税率3 税率乗算前" + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        sqlText += "   -- ■ ■ 返品" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.SALESNETPRICERF ELSE 0 END)) AS RETSALESNETPRICERF,              --返品正価金額" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.ITDEDSALESOUTTAXRF ELSE 0 END)) AS RETITDEDSALESOUTTAXRF,        --返品外税対象額 " + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.ITDEDSALESINTAXRF ELSE 0 END)) AS RETITDEDSALESINTAXRF,          --返品内税対象額 " + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.SALSUBTTLSUBTOTAXFRERF ELSE 0 END)) AS RETSALSUBTTLSUBTOTAXFRERF,--返品小計非課税対象額 " + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.SALAMNTCONSTAXINCLURF ELSE 0 END)) AS RETSALAMNTCONSTAXINCLURF,  --返品消費税額（内税）" + Environment.NewLine;
                        sqlText += "   -- 伝票転嫁と明細転嫁" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 0 OR SALE.CONSTAXLAYMETHODRF=1) AND (SALE.SALESSLIPCDRF =1) THEN SALE.SALESOUTTAXRF ELSE 0 END)) AS RETSALESOUTTAXRF,                  --返品消費税額（外税）" + Environment.NewLine;
                        sqlText += "   -- 請求転嫁(親)" + Environment.NewLine;
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                        //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * SALE.TAXRATERF) ELSE 0 END)) AS RETSALESOUTTAXRF1,--返品消費税額（外税）税率1" + Environment.NewLine;
                        //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                        //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS RETSALESOUTTAXRF2,    --返品消費税額（外税）税率2" + Environment.NewLine;
                        //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF)" + Environment.NewLine;
                        //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS RETSALESOUTTAXRF3,    --返品消費税額（外税）税率3" + Environment.NewLine;
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                        sqlText += "        THEN SALE.ITDEDSALESOUTTAXRF ELSE 0 END)) AS RETSALESOUTTAXRF1,--返品消費税額（外税）税率1 税率乗算前" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                        sqlText += "        THEN SALE.ITDEDSALESOUTTAXRF ELSE 0 END)) AS RETSALESOUTTAXRF2,--返品消費税額（外税）税率2 税率乗算前" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF)" + Environment.NewLine;
                        sqlText += "        THEN SALE.ITDEDSALESOUTTAXRF ELSE 0 END)) AS RETSALESOUTTAXRF3,--返品消費税額（外税）税率3 税率乗算前" + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        sqlText += "   -- ■ ■ 値引" + Environment.NewLine;
                        sqlText += "   SUM(SALE.SALESDISTTLTAXEXCRF) AS SALESDISTTLTAXEXCRF,    --値引金額計（税抜き）" + Environment.NewLine;
                        sqlText += "   SUM(SALE.ITDEDSALESDISOUTTAXRF) AS ITDEDSALESDISOUTTAXRF,--値引外税対象額合計" + Environment.NewLine;
                        sqlText += "   SUM(SALE.ITDEDSALESDISINTAXRF) AS ITDEDSALESDISINTAXRF,  --値引内税対象額合計 " + Environment.NewLine;
                        sqlText += "   SUM(SALE.ITDEDSALESDISTAXFRERF) AS ITDEDSALESDISTAXFRERF,--値引非課税対象額合計" + Environment.NewLine;
                        sqlText += "   SUM(SALE.SALESDISTTLTAXINCLURF) AS SALESDISTTLTAXINCLURF,--値引消費税額（内税）" + Environment.NewLine;
                        sqlText += "   -- 伝票転嫁と明細転嫁" + Environment.NewLine;
                        sqlText += "   SUM(CASE WHEN (SALE.CONSTAXLAYMETHODRF= 0 OR SALE.CONSTAXLAYMETHODRF=1) THEN SALE.SALESDISOUTTAXRF ELSE 0 END) AS SALESDISOUTTAXRF,--値引消費税額（外税）" + Environment.NewLine;
                        sqlText += "   -- 請求転嫁(親)" + Environment.NewLine;
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                        //sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATERF) ELSE 0 END)) AS SALESDISOUTTAXRF1, --値引消費税額（外税）税率1" + Environment.NewLine;
                        //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                        //sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS SALESDISOUTTAXRF2,--値引消費税額（外税）税率2" + Environment.NewLine;
                        // --- UPD 2014/04/22 T.Miyamoto Redmine#42539 ------------------------------>>>>>
                        //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                        //sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS SALESDISOUTTAXRF3 --値引消費税額（外税）税率3" + Environment.NewLine;
                        //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF)" + Environment.NewLine;
                        //sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS SALESDISOUTTAXRF3 --値引消費税額（外税）税率3" + Environment.NewLine;
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                        sqlText += "        THEN SALE.ITDEDSALESDISOUTTAXRF ELSE 0 END)) AS SALESDISOUTTAXRF1, --値引消費税額（外税）税率1 税率乗算前" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                        sqlText += "        THEN SALE.ITDEDSALESDISOUTTAXRF ELSE 0 END)) AS SALESDISOUTTAXRF2,--値引消費税額（外税）税率2 税率乗算前" + Environment.NewLine;
                        sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF)" + Environment.NewLine;
                        sqlText += "        THEN SALE.ITDEDSALESDISOUTTAXRF ELSE 0 END)) AS SALESDISOUTTAXRF3 --値引消費税額（外税）税率3 税率乗算前" + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        sqlText += "  FROM" + Environment.NewLine;
                        sqlText += "  (" + Environment.NewLine;
                        sqlText += "     SELECT" + Environment.NewLine;
                        sqlText += "      SUBSALE.ENTERPRISECODERF," + Environment.NewLine;
                        sqlText += "      (CASE WHEN (SEARCHCUST.CLAIMCODERF IS NOT NULL) THEN SEARCHCUST.CLAIMCODERF ELSE SUBSALE.CLAIMCODERF END) AS CLAIMCODERF," + Environment.NewLine;
                        sqlText += "      SUBSALE.CUSTOMERCODERF," + Environment.NewLine;
                        sqlText += "      SUBSALE.ADDUPADATERF," + Environment.NewLine;
                        sqlText += "      SUBSALE.LOGICALDELETECODERF," + Environment.NewLine;
                        sqlText += "      SUBSALE.CONSTAXLAYMETHODRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.ACPTANODRSTATUSRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.DEBITNOTEDIVRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALESSLIPNUMRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALESSLIPCDRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALESNETPRICERF + SALESDTL.DISSALESTAXEXCGYO AS SALESNETPRICERF," + Environment.NewLine;
                        sqlText += "      SUBSALE.ITDEDSALESOUTTAXRF + SALESDTL.ITDEDDISSALESOUTTAXGYO AS ITDEDSALESOUTTAXRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.ITDEDSALESINTAXRF + SALESDTL.ITDEDDISSALESINTAXGYO AS ITDEDSALESINTAXRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALSUBTTLSUBTOTAXFRERF + SALESDTL.ITDEDDISSALESTAXFREGYO AS SALSUBTTLSUBTOTAXFRERF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALESOUTTAXRF + SALESDTL.DISSALESOUTTAXGYO AS SALESOUTTAXRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALAMNTCONSTAXINCLURF + SALESDTL.DISSALESTAXFREGYO AS SALAMNTCONSTAXINCLURF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALESDISTTLTAXEXCRF -  SALESDTL.DISSALESTAXEXCGYO AS SALESDISTTLTAXEXCRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.ITDEDSALESDISOUTTAXRF - SALESDTL.ITDEDDISSALESOUTTAXGYO AS ITDEDSALESDISOUTTAXRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.ITDEDSALESDISINTAXRF - SALESDTL.ITDEDDISSALESINTAXGYO AS ITDEDSALESDISINTAXRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.ITDEDSALESDISTAXFRERF - SALESDTL.ITDEDDISSALESTAXFREGYO AS ITDEDSALESDISTAXFRERF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALESDISOUTTAXRF - SALESDTL.DISSALESOUTTAXGYO AS SALESDISOUTTAXRF," + Environment.NewLine;
                        sqlText += "      SUBSALE.SALESDISTTLTAXINCLURF - SALESDTL.DISSALESTAXFREGYO AS SALESDISTTLTAXINCLURF," + Environment.NewLine;
                        sqlText += "      TAX.TAXRATESTARTDATERF AS TAXRATESTARTDATERF,   --税率開始日" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATEENDDATERF AS TAXRATEENDDATERF,       --税率終了日" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATERF AS TAXRATERF,                     --税率" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF, --税率開始日2" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF,     --税率終了日2" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATE2RF AS TAXRATE2RF,                   --税率2" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF, --税率開始日3" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF,     --税率終了日3" + Environment.NewLine;
                        sqlText += "      TAX.TAXRATE3RF AS TAXRATE3RF                    --税率3" + Environment.NewLine;
                        sqlText += "      --TAX.CONSTAXLAYMETHODRF AS TAXCONSTAXLAYMETHODRF" + Environment.NewLine;
                        sqlText += "     FROM" + Environment.NewLine;
                        sqlText += "      SALESSLIPRF AS SUBSALE WITH(READUNCOMMITTED)" + Environment.NewLine;
                        // -- UPD 2011/03/15 ---------------------->>>
                        //sqlText += "    LEFT JOIN TAXRATESETRF AS TAX" + Environment.NewLine;
                        sqlText += "    LEFT JOIN TAXRATESETRF AS TAX WITH (READUNCOMMITTED)" + Environment.NewLine;
                        // -- UPD 2011/03/15 ----------------------<<<
                        sqlText += "     ON SUBSALE.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
                        // -- UPD 2011/03/15 ---------------------->>>
                        //sqlText += "    LEFT JOIN CUSTOMERRF AS SEARCHCUST " + Environment.NewLine;
                        sqlText += "    LEFT JOIN CUSTOMERRF AS SEARCHCUST WITH (READUNCOMMITTED)" + Environment.NewLine;
                        // -- UPD 2011/03/15 ----------------------<<<
                        sqlText += "     ON  SUBSALE.ENTERPRISECODERF = SEARCHCUST.ENTERPRISECODERF " + Environment.NewLine;
                        sqlText += "     AND SUBSALE.CUSTOMERCODERF = SEARCHCUST.CUSTOMERCODERF " + Environment.NewLine;
                        sqlText += "    LEFT JOIN" + Environment.NewLine;
                        sqlText += "    (" + Environment.NewLine;
                        sqlText += "      SELECT" + Environment.NewLine;
                        sqlText += "       SALES.ENTERPRISECODERF," + Environment.NewLine;
                        sqlText += "       SALES.ACPTANODRSTATUSRF," + Environment.NewLine;
                        sqlText += "       SALES.SALESSLIPNUMRF," + Environment.NewLine;
                        sqlText += "       SALES.SALESSLIPCDRF," + Environment.NewLine;
                        sqlText += "       --行値引" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0 ) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS DISSALESTAXEXCGYO,-- 税抜値引金額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 0) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESOUTTAXGYO,-- 外税対象額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 1) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESTAXFREGYO,-- 非課税対象額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 2) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESINTAXGYO, -- 内税対象額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 0) THEN DTL.SALESPRICECONSTAXRF ELSE 0 END) AS DISSALESOUTTAXGYO,    -- 外税額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 2) THEN DTL.SALESPRICECONSTAXRF ELSE 0 END) AS DISSALESTAXFREGYO     -- 内税額(行値引)" + Environment.NewLine;
                        sqlText += "      FROM" + Environment.NewLine;
                        // - UPD 2011/03/15 --------------------------->>>
                        //sqlText += "       SALESDETAILRF AS DTL" + Environment.NewLine;
                        //sqlText += "      LEFT JOIN SALESSLIPRF AS SALES" + Environment.NewLine;
                        sqlText += "       SALESDETAILRF AS DTL WITH (READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += "      LEFT JOIN SALESSLIPRF AS SALES WITH (READUNCOMMITTED)" + Environment.NewLine;
                        // - UPD 2011/03/15 ---------------------------<<<
                        sqlText += "       ON  SALES.ENTERPRISECODERF = DTL.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "       AND SALES.ACPTANODRSTATUSRF = DTL.ACPTANODRSTATUSRF" + Environment.NewLine;
                        sqlText += "       AND SALES.SALESSLIPNUMRF = DTL.SALESSLIPNUMRF" + Environment.NewLine;
                        sqlText += "      GROUP BY" + Environment.NewLine;
                        sqlText += "       SALES.ENTERPRISECODERF," + Environment.NewLine;
                        sqlText += "       SALES.ACPTANODRSTATUSRF," + Environment.NewLine;
                        sqlText += "       SALES.SALESSLIPNUMRF," + Environment.NewLine;
                        sqlText += "       SALES.SALESSLIPCDRF" + Environment.NewLine;
                        sqlText += "    ) AS SALESDTL" + Environment.NewLine;
                        sqlText += "     ON  SUBSALE.ENTERPRISECODERF = SALESDTL.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "     AND SUBSALE.ACPTANODRSTATUSRF = SALESDTL.ACPTANODRSTATUSRF" + Environment.NewLine;
                        sqlText += "     AND SUBSALE.SALESSLIPNUMRF = SALESDTL.SALESSLIPNUMRF" + Environment.NewLine;
                        sqlText += "  ) AS SALE" + Environment.NewLine;

                        // 修正 2009/04/17 <<<
                        #endregion

                        #region JOIN句
                        sqlText += "LEFT JOIN CUSTOMERRF AS CUST WITH(READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += " ON SALE.ENTERPRISECODERF = CUST.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += " AND SALE.CUSTOMERCODERF = CUST.CUSTOMERCODERF" + Environment.NewLine;
                        sqlText += "LEFT JOIN CUSTOMERRF AS CLAIM WITH(READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += " ON SALE.ENTERPRISECODERF = CLAIM.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += " AND SALE.CLAIMCODERF = CLAIM.CUSTOMERCODERF" + Environment.NewLine;
                        sqlText += "LEFT JOIN SALESPROCMONEYRF AS SALESPROC WITH(READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += " ON  CLAIM.ENTERPRISECODERF=SALESPROC.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += " AND SALESPROC.FRACPROCMONEYDIVRF=1" + Environment.NewLine;
                        sqlText += " AND CLAIM.SALESCNSTAXFRCPROCCDRF=SALESPROC.FRACTIONPROCCODERF" + Environment.NewLine;
                        #endregion

                        #region WHERE句
                        sqlText += "WHERE SALE.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                        sqlText += "   AND SALE.CLAIMCODERF=@FINDCUSTOMERCODE" + Environment.NewLine;
                        sqlText += "   AND(SALE.ADDUPADATERF<=@FINDADDUPDATE AND SALE.ADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
                        sqlText += "   AND SALE.LOGICALDELETECODERF=0" + Environment.NewLine;
                        sqlText += "   AND SALE.ACPTANODRSTATUSRF=30" + Environment.NewLine;
                        sqlText += "   AND SALE.DEBITNOTEDIVRF=0" + Environment.NewLine;
                        #endregion

                        #region GROUP BY句
                        sqlText += "GROUP BY" + Environment.NewLine;
                        sqlText += " SALE.CLAIMCODERF," + Environment.NewLine;
                        sqlText += " CLAIM.NAMERF," + Environment.NewLine;
                        sqlText += " CLAIM.NAME2RF," + Environment.NewLine;
                        sqlText += " CLAIM.CUSTOMERSNMRF," + Environment.NewLine;
                        sqlText += " CLAIM.CONSTAXLAYMETHODRF,    --消費税転嫁方式" + Environment.NewLine;
                        sqlText += " CLAIM.SALESCNSTAXFRCPROCCDRF,--売上消費税端数処理コード" + Environment.NewLine;
                        sqlText += " CLAIM.CUSTCTAXLAYREFCDRF, " + Environment.NewLine;
                        sqlText += " SALESPROC.FRACTIONPROCCDRF,  --端数処理単位" + Environment.NewLine;
                        sqlText += " SALESPROC.FRACTIONPROCUNITRF,--端数処理区分" + Environment.NewLine;
                        sqlText += " SALE.TAXRATESTARTDATERF,     --税率開始日" + Environment.NewLine;
                        sqlText += " SALE.TAXRATEENDDATERF,       --税率終了日" + Environment.NewLine;
                        sqlText += " SALE.TAXRATERF,              --税率" + Environment.NewLine;
                        sqlText += " SALE.TAXRATESTARTDATE2RF,    --税率開始日2" + Environment.NewLine;
                        sqlText += " SALE.TAXRATEENDDATE2RF,      --税率終了日2" + Environment.NewLine;
                        sqlText += " SALE.TAXRATE2RF,             --税率2" + Environment.NewLine;
                        sqlText += " SALE.TAXRATESTARTDATE3RF,    --税率開始日3" + Environment.NewLine;
                        sqlText += " SALE.TAXRATEENDDATE3RF,      --税率終了日3" + Environment.NewLine;
                        sqlText += " SALE.TAXRATE3RF              --税率3" + Environment.NewLine;
                        sqlText += ") AS ACCREC" + Environment.NewLine;
                        #endregion

                        #endregion

                        sqlCommand.CommandText = sqlText;

                        #region Prameterオブジェクトの作成
                        //Prameterオブジェクトの作成
                        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
                        SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                        SqlParameter findParaLastCAddUpUpdDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
                        #endregion

                        #region Parameterオブジェクトへ値設定
                        //Parameterオブジェクトへ値設定
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                        findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.CustomerCode);
                        findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.AddUpDate);
                        if (custAccRecWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                            findParaLastCAddUpUpdDate.Value = 20000101;
                        else
                            findParaLastCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.LaMonCAddUpUpdDate);
                        #endregion

                        sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10

                        myReader = sqlCommand.ExecuteReader();

                        double FractionProcUnit = 0;
                        long SetTax = 0;
                        long WorkTax = 0;
                        while (myReader.Read())
                        {
                            #region 集計レコードセット
                            custAccRecWork.FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF")); //端数処理区分
                            FractionProcUnit = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("FRACTIONPROCUNITRF")); // 端数処理単位
                            custAccRecWork.AddUpSecCode = custAccRecWork.AddUpSecCode;
                            custAccRecWork.ClaimCode = custAccRecWork.ClaimCode;
                            custAccRecWork.ClaimName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CLAIMNAMERF"));
                            custAccRecWork.ClaimName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CLAIMNAME2RF"));
                            custAccRecWork.ClaimSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CLAIMSNMRF"));
                            custAccRecWork.FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF"));      // 端数処理区分(得意先マスタ)
                            //custAccRecWork.ConsTaxLayMethod = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CONSTAXLAYMETHODRF"));// 消費税転嫁方式(セット済　※得意先マスタ)
                            //custAccRecWork.ConsTaxRate = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("CONSTAXRATERF"));         // 税率(セット済　※得意先マスタ)
                            //custAccRecWork.CustomerCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CUSTOMERCODERF"));
                            //custAccRecWork.CustomerName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CUSTOMERNAMERF"));
                            //custAccRecWork.CustomerName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CUSTOMERNAME2RF"));
                            //custAccRecWork.CustomerSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CUSTOMERSNMRF"));
                            //custAccRecWork.AddUpDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("ADDUPDATERF"));
                            //custAccRecWork.AddUpYearMonth = SqlDataMediator.SqlGetDateTimeFromYYYYMM(myReader, myReader.GetOrdinal("ADDUPYEARMONTHRF"));
                            //custAccRecWork.LastTimeAccRec = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("LASTTIMEDEMANDRF"));         // 前回請求金額(セット済   ※前回履歴から)
                            //custAccRecWork.ThisTimeFeeDmdNrml = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISTIMEFEEDMDNRMLRF")); // 今回手数料金額(セット済 ※入金マスタから)
                            //custAccRecWork.ThisTimeDisDmdNrml = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISTIMEDISDMDNRMLRF")); // 今回値引金額(セット済   ※入金マスタから)
                            //custAccRecWork.ThisTimeDmdNrml = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISTIMEDMDNRMLRF"));       // 今回入金金額(セット済   ※入金マスタから)

                            // 今回繰越残高(売掛) = 前回請求残高 - 今回入金金額 
                            custAccRecWork.ThisTimeTtlBlcAcc = (custAccRecWork.LastTimeAccRec) - custAccRecWork.ThisTimeDmdNrml;// 今回繰越残高(売掛)
                            // ■相殺
                            custAccRecWork.OfsThisTimeSales = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFSTHISTIMESALESRF"));     // 相殺後今回売上金額
                            custAccRecWork.ItdedOffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETOUTTAXRF"));   // 相殺後外税対象額
                            custAccRecWork.ItdedOffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETINTAXRF"));     // 相殺後内税対象額
                            custAccRecWork.ItdedOffsetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETTAXFREERF")); // 相殺後非課税対象額
                            custAccRecWork.OffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFFSETINTAXRF"));               // 相殺後売上内税額
                            // 修正 2009/04/17 >>>
                            #region DEL 2009/04/17
                            /*
                            //相殺後今回売上消費税額 / 相殺後売上外税額 >>>
                            // 消費税転嫁区分によってセット内容変動( クエリ内で処理しきれない為、セット時に計算 )
                            if ((custAccRecWork.ConsTaxLayMethod == 0) || (custAccRecWork.ConsTaxLayMethod == 1) || (custAccRecWork.ConsTaxLayMethod == 2))
                            {
                                // 消費税転嫁区分 = 0:伝票 or 1:明細
                                // 相殺後売上外税額 = 今回売上外税額 + 今回売上返品外税額 + 今回売上値引外税額
                                SetTax = 0;
                                //FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("SALESOUTTAXRF")), FractionProcUnit, custAccRecWork.FractionProcCd, out SetTax);
                                //custAccRecWork.OffsetOutTax = SetTax;       // 今回売上外税額
                                //FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF")), FractionProcUnit, custAccRecWork.FractionProcCd, out SetTax);
                                //custAccRecWork.OffsetOutTax += SetTax;      // 今回売上返品外税額
                                //FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF")), FractionProcUnit, custAccRecWork.FractionProcCd, out SetTax);
                                //custAccRecWork.OffsetOutTax += SetTax;      // 今回売上値引外税額
                                custAccRecWork.OffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESOUTTAXRF"));    // 今回売上外税額
                                custAccRecWork.OffsetOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"));// 今回売上返品外税額
                                custAccRecWork.OffsetOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));// 今回売上値引外税額

                                //// 相殺後今回売上消費税額 = 相殺後売上外税額 + 相殺後売上内税額
                                //custAccRecWork.OfsThisSalesTax = custAccRecWork.OffsetOutTax + custAccRecWork.OffsetInTax;       // 相殺後今回売上消費税額

                            }
                            //else if ((custAccRecWork.ConsTaxLayMethod == 2))
                            //{
                            //    // 消費税転嫁区分 = 2:請求親
                            //    // 相殺後外税金対象額　× 税率
                            //    SetTax = 0;
                            //    FracCalc((custAccRecWork.ItdedOffsetOutTax * custAccRecWork.ConsTaxRate), FractionProcUnit, custAccRecWork.FractionProcCd, out SetTax);
                            //    custAccRecWork.OffsetOutTax = SetTax;

                            //    //// 相殺後今回売上消費税額 = 相殺後売上外税額 + 相殺後売上内税額
                            //    //custAccRecWork.OfsThisSalesTax = custAccRecWork.OffsetOutTax + custAccRecWork.OffsetInTax;       // 相殺後今回売上消費税額
                            //}
                            else if ((custAccRecWork.ConsTaxLayMethod == 3))
                            {
                                // 消費税転嫁区分 = 3:請求子
                                // 子レコード集計(相殺後外税金額) × 税率　※子レコード集計時に算出                           
                            }
                            else // 請求転嫁区分 = 9:非課税 OR 請求転嫁区分 = 0,1,2,3,9 以外　
                            {
                                custAccRecWork.OffsetOutTax = 0;
                            }
                            */
                            #endregion
                            // 相殺後売上外税額 = 売上外税額 + 返品外税額 + 値引外税額 ※各種転嫁方式別に計算を行う 請求転嫁(子)は親子レコード集計後に加算する
                            // ①伝票転嫁 + 明細転嫁(売上+返品+値引)
                            custAccRecWork.OffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESOUTTAXRF")) + SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF")) +
                                                          SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                            // ②請求(親)転嫁 (売上+返品+値引)
                            FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("SALESOUTTAXRF_S")) + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S")) +
                                     SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S")), FractionProcUnit, custAccRecWork.FractionProcCd, out SetTax);
                            custAccRecWork.OffsetOutTax += SetTax;
                            // 修正 2009/04/17 <<<                            

                            #region 当月消費税(OfsThisSalesTax)セット
                            if (totalAfterDay != 0)
                            {
                                // 修正 2009/04/17 >>>
                                #region DEL 2009/04/17 
                                /*
                                if (custAccRecWork.ConsTaxLayMethod == 2)
                                {
                                    //相殺後今回売上消費税 = (今回請求金額 + 締後売上 - 締後入金 + 締後消費税) - (前月売上残高 + 当月売上 - 当月入金) 
                                    if (ItdedtotalAfterSalesOutTax != 0)
                                    {
                                        FracCalc((ItdedtotalAfterSalesOutTax * custAccRecWork.ConsTaxRate), FractionProcUnit, custAccRecWork.FractionProcCd, out SetTax); // 締後消費税
                                    }
                                    custAccRecWork.OfsThisSalesTax = Convert.ToInt64((afCalDemandPrice + totalAfterSales - totalAfterDepo + SetTax)) - Convert.ToInt64((custAccRecWork.LastTimeAccRec + custAccRecWork.OfsThisTimeSales - custAccRecWork.ThisTimeDmdNrml));
                                }
                                else if (custAccRecWork.ConsTaxLayMethod == 3) // 請求子の場合(締後消費税を得意先別に計算する必要がある為)
                                {
                                    for (int i = 0; i < ItdedtotalAfterSalesOutTaxList.Count; i++)
                                    {
                                        ItdedtotalAfterSalesOutTax = Convert.ToInt64(ItdedtotalAfterSalesOutTaxList[i]);
                                        //相殺後今回売上消費税 = (今回請求金額 + 締後売上 - 締後入金 + 締後消費税) - (前月売上残高 + 当月売上 - 当月入金) 
                                        if (ItdedtotalAfterSalesOutTax != 0)
                                        {
                                            FracCalc((ItdedtotalAfterSalesOutTax * custAccRecWork.ConsTaxRate), FractionProcUnit, custAccRecWork.FractionProcCd, out SetTax); // 締後消費税
                                        }
                                        WorkTax += SetTax;
                                    }
                                    custAccRecWork.OfsThisSalesTax = Convert.ToInt64((afCalDemandPrice + totalAfterSales - totalAfterDepo + WorkTax)) - Convert.ToInt64((custAccRecWork.LastTimeAccRec + custAccRecWork.OfsThisTimeSales - custAccRecWork.ThisTimeDmdNrml));
                                }
                                else
                                {
                                    custAccRecWork.OfsThisSalesTax = Convert.ToInt64((afCalDemandPrice + totalAfterSales - totalAfterDepo + totalAfterSalesOutTax)) - Convert.ToInt64((custAccRecWork.LastTimeAccRec + custAccRecWork.OfsThisTimeSales - custAccRecWork.ThisTimeDmdNrml));
                                }
                                */
                                #endregion
                               　// 締後消費税 = 伝票転嫁 + 明細転嫁 + 請求親 + 請求子
                                // 売上外税消費税(伝票転嫁+明細転嫁)
                                WorkTax = totalAfterSalesOutTax;
                                // 売上外税消費税(請求親転嫁)
                                FracCalc(totalAfterSalesOutTax_S, FractionProcUnit, custAccRecWork.FractionProcCd, out SetTax);
                                WorkTax += SetTax;
                                // 売上外税消費税(請求子転嫁)
                                for (int i = 0; i < totalAfterSalesOutTaxList.Count; i++)
                                {
                                    if (Convert.ToDouble(totalAfterSalesOutTaxList[i]) != 0)
                                    {
                                        FracCalc(Convert.ToDouble(totalAfterSalesOutTaxList[i]), FractionProcUnit, custAccRecWork.FractionProcCd, out SetTax);
                                        WorkTax += SetTax;
                                    }
                                }
                                // 相殺後今回売上消費税
                                custAccRecWork.OfsThisSalesTax = Convert.ToInt64((afCalDemandPrice + totalAfterSales - totalAfterDepo + WorkTax)) - Convert.ToInt64((custAccRecWork.LastTimeAccRec + custAccRecWork.OfsThisTimeSales - custAccRecWork.ThisTimeDmdNrml));

                                // 修正 2009/04/17 <<<
                            }
                            else
                            {
                                // 修正 2009/04/17 >>>
                                //custAccRecWork.OfsThisSalesTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESOUTTAXRF"));
                                //custAccRecWork.OfsThisSalesTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"));
                                //custAccRecWork.OfsThisSalesTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                                custAccRecWork.OfsThisSalesTax = custAccRecWork.OffsetOutTax + custAccRecWork.OffsetInTax;
                                // 修正 2009/04/17 <<<
                            }
                            #endregion

                            // ■売上
                            custAccRecWork.ThisTimeSales = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISTIMESALESRF"));            // 今回売上金額 
                            custAccRecWork.ItdedSalesOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDSALESOUTTAXRF"));      // 今回売上外税対象額
                            custAccRecWork.ItdedSalesInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDSALESINTAXRF"));        // 今回売上内税対象額
                            custAccRecWork.ItdedSalesTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDSALESTAXFREERF"));    // 今回売上非課税対象額 
                            custAccRecWork.SalesInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESINTAXRF"));                  // 今回売上内税額
                            // 今回売上外税額　 =  伝票転嫁+明細転嫁+請求(親)転嫁+請求(子)転嫁 ※請求(子)転嫁 外税消費税は親子レコード集計後に加算する
                            // 伝票転嫁+明細転嫁 売上外税消費税
                            custAccRecWork.SalesOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESOUTTAXRF"));                
                            // 請求(親)転嫁 外税消費税
                            FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("SALESOUTTAXRF_S")), FractionProcUnit, custAccRecWork.FractionProcCd, out SetTax);
                            custAccRecWork.SalesOutTax += SetTax;
                            custAccRecWork.ThisSalesTax = custAccRecWork.SalesInTax + custAccRecWork.SalesOutTax;              // 今回売上消費税額

                            // ■返品
                            custAccRecWork.ThisSalesPricRgds = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSALESPRICRGDSRF"));    // 今回返品金額
                            custAccRecWork.TtlItdedRetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETOUTTAXRF"));    // 今回返品外税対象額
                            custAccRecWork.TtlItdedRetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETINTAXRF"));      // 今回返品内税対象額
                            custAccRecWork.TtlItdedRetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETTAXFREERF"));  // 今回返品非課税対象額
                            custAccRecWork.TtlRetInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETINNERTAXRF"));          // 今回返品内税額
                            // 今回返品外税額 =   伝票転嫁 + 明細転嫁 + 請求(親)転嫁 + 請求(子)転嫁 ※請求(子)転嫁は親子レコード集計後に加算する
                            // 伝票転嫁+明細転嫁 売上外税消費税
                            custAccRecWork.TtlRetOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"));
                            // 請求(親)転嫁 外税消費税
                            FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S")), FractionProcUnit, custAccRecWork.FractionProcCd, out SetTax);
                            custAccRecWork.TtlRetOuterTax += SetTax;
                            custAccRecWork.ThisSalesPrcTaxRgds = custAccRecWork.TtlRetInnerTax + custAccRecWork.TtlRetOuterTax;                      // 今回返品消費税額

                            // ■値引
                            custAccRecWork.ThisSalesPricDis = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSALESPRICDISRF"));      // 今回売上値引金額
                            custAccRecWork.TtlItdedDisOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISOUTTAXRF"));    // 今回売上値引外税対象金額
                            custAccRecWork.TtlItdedDisInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISINTAXRF"));      // 今回売上値引内税対象金額
                            custAccRecWork.TtlItdedDisTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISTAXFREERF"));  // 今回売上値引非課税対象金額
                            custAccRecWork.TtlDisInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISINNERTAXRF"));          // 今回売上値引内税額
                            // 今回売上値引外税額 =   伝票転嫁 + 明細転嫁 + 請求(親)転嫁 + 請求(子)転嫁 ※請求(子)転嫁は親子レコード集計後に加算する
                            // 伝票転嫁+明細転嫁 売上外税消費税
                            custAccRecWork.TtlDisOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                            // 請求(親)転嫁 外税消費税
                            FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S")), FractionProcUnit, custAccRecWork.FractionProcCd, out SetTax);
                            custAccRecWork.TtlDisOuterTax += SetTax;
                            custAccRecWork.ThisSalesPrcTaxDis = custAccRecWork.TtlDisInnerTax + custAccRecWork.TtlDisInnerTax;  // 今回売上値引消費税額

                            custAccRecWork.TaxAdjust = 0;     // 消費税調整額 (0固定)
                            custAccRecWork.BalanceAdjust = 0; // 残高調整額　 (0固定)
                            // 修正 2009/04/17 >>>
                            #region DEL 2009/04/17 
                            /*
                            // 計算後請求金額 >>>
                            // 消費税転嫁区分によってセット内容変動( クエリ内で処理しきれない為、セット時に計算 )
                            if ((custAccRecWork.ConsTaxLayMethod == 0) || (custAccRecWork.ConsTaxLayMethod == 1) || (custAccRecWork.ConsTaxLayMethod == 2))
                            {
                                // 消費税転嫁区分 = 0:伝票 or 1:明細 or 2:請求親
                                // 計算後請求金額 = 今回繰越残高 + (相殺後今回売上金額 + 相殺後今回売上消費税)
                                custAccRecWork.AfCalTMonthAccRec = custAccRecWork.ThisTimeTtlBlcAcc + (custAccRecWork.OfsThisTimeSales + custAccRecWork.OfsThisSalesTax);// 計算後請求金額
                            }
                            else if ((custAccRecWork.ConsTaxLayMethod == 3))
                            {
                                // 消費税転嫁区分 = 3:請求子
                                // 子レコード集計(相殺後外税金額) × 税率　※子レコード集計時に算出                           
                            }
                            else if (custAccRecWork.ConsTaxLayMethod == 9) // 消費税転嫁区分 = 9:非課税
                            {
                                // 計算後請求金額 = 今回繰越残高 + (相殺後今回売上金額)
                                custAccRecWork.AfCalTMonthAccRec = custAccRecWork.ThisTimeTtlBlcAcc + (custAccRecWork.OfsThisTimeSales);// 計算後請求金額
                            }
                            else // 消費税転嫁区分 = 0,1,2,3,9以外
                            {
                                custAccRecWork.AfCalTMonthAccRec = 0;
                            }
                            // 計算後請求金額 <<<
                            */
                            #endregion                            
                            // 計算後請求金額 = 今回繰越残高 + (相殺後今回売上金額 + 相殺後今回売上消費税)
                            custAccRecWork.AfCalTMonthAccRec = custAccRecWork.ThisTimeTtlBlcAcc + (custAccRecWork.OfsThisTimeSales + custAccRecWork.OfsThisSalesTax);// 計算後請求金額
                            // 修正 2009/04/17 <<<
                            custAccRecWork.AcpOdrTtl2TmBfAccRec = 0; // 受注2回前残高(売掛計) (0固定)
                            custAccRecWork.AcpOdrTtl3TmBfAccRec = 0; // 受注3回前残高(売掛計) (0固定)                      
                            //custDmdPrcWork.CAddUpUpdExecDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("CADDUPUPDEXECDATERF"));   // 締次更新実行年月日(セット済み ※前回履歴から)
                            //custDmdPrcWork.StartCAddUpUpdDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("STARTCADDUPUPDDATERF")); // 締次更新開始年月日(セット済み ※前回履歴から) 
                            //custDmdPrcWork.LastCAddUpUpdDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("LASTCADDUPUPDDATERF"));   // 前回締次更新年月日(セット済み ※前回履歴から)
                            custAccRecWork.SalesSlipCount = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SALESSLIPCOUNTRF")); // 売上伝票枚数
                            #endregion
                        }

                        #endregion
                    }
                    // 初期化
                    if (!myReader.IsClosed) myReader.Close();
                    sqlCommand.Parameters.Clear();
                    sqlCommand.CommandText = string.Empty;
                    sqlText = string.Empty;
                    //long itdedOffsetOutTax = 0; // 外税対象額
                    // 集計レコード計算用の変数
                    long OffsetOutTax = 0;   // 相殺外税額(請求転嫁(子))
                    long SalesOutTax = 0;    // 売上外税額(請求転嫁(子))
                    long RetSalesOutTax = 0; // 返品外税額(請求転嫁(子))
                    long DisSalesOutTax = 0; // 値引外税額(請求転嫁(子))

                    int ChildCnt = 0;           // 親子レコードカウント用    
                    double fractionProcUnit = 0;
                    long setTax = 0;
                    int SetFlg = 0;

                    #region ■ 親・子レコード集計処理

                    #region SELECT文作成
                    // 修正 2009/04/17 >>>
                    #region DEL 2009/04/17
                    /*
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += " ACCREC.CLAIMCODERF," + Environment.NewLine;
                    sqlText += " ACCREC.CLAIMNAMERF," + Environment.NewLine;
                    sqlText += " ACCREC.CLAIMNAME2RF," + Environment.NewLine;
                    sqlText += " ACCREC.CLAIMSNMRF," + Environment.NewLine;
                    sqlText += " ACCREC.CUSTOMERCODERF," + Environment.NewLine;
                    sqlText += " ACCREC.CUSTOMERNAMERF," + Environment.NewLine;
                    sqlText += " ACCREC.CUSTOMERNAME2RF," + Environment.NewLine;
                    sqlText += " ACCREC.CUSTOMERSNMRF," + Environment.NewLine;
                    sqlText += " ACCREC.FRACTIONPROCCDRF,  --端数処理単位" + Environment.NewLine;
                    sqlText += " ACCREC.FRACTIONPROCUNITRF,--端数処理区分" + Environment.NewLine;
                    sqlText += " ACCREC.SALESNETPRICERF + ACCREC.RETSALESNETPRICERF +ACCREC.SALESDISTTLTAXEXCRF AS OFSTHISTIMESALESRF,              --相殺後今回売上金額" + Environment.NewLine;
                    sqlText += " ACCREC.ITDEDSALESOUTTAXRF+ACCREC.RETITDEDSALESOUTTAXRF+ACCREC.ITDEDSALESDISOUTTAXRF AS ITDEDOFFSETOUTTAXRF,        --相殺後外税対象額 " + Environment.NewLine;
                    sqlText += " ACCREC.ITDEDSALESINTAXRF+ ACCREC.RETITDEDSALESINTAXRF+ ACCREC.ITDEDSALESDISINTAXRF AS ITDEDOFFSETINTAXRF," + Environment.NewLine;
                    sqlText += " ACCREC.SALSUBTTLSUBTOTAXFRERF+ACCREC.RETSALSUBTTLSUBTOTAXFRERF+ACCREC.ITDEDSALESDISTAXFRERF AS ITDEDOFFSETTAXFREERF, --相殺後非課税対象額" + Environment.NewLine;
                    sqlText += " ACCREC.SALAMNTCONSTAXINCLURF + ACCREC.RETSALAMNTCONSTAXINCLURF + ACCREC.SALESDISTTLTAXINCLURF AS OFFSETINTAXRF,      --相殺後内税消費税" + Environment.NewLine;
                    sqlText += " ACCREC.SALESNETPRICERF AS THISTIMESALESRF,             --今回売上金額" + Environment.NewLine;
                    //sqlText += " (CASE WHEN (ACCREC.CONSTAXLAYMETHODRF=0 OR ACCREC.CONSTAXLAYMETHODRF=1) THEN ACCREC.SALESOUTTAXRF" + Environment.NewLine;
                    //sqlText += "  ELSE (ACCREC.SALESOUTTAXRF1 +ACCREC.SALESOUTTAXRF2 +ACCREC.SALESOUTTAXRF3) END)+ACCREC.SALAMNTCONSTAXINCLURF AS THISSALESTAXRF, --今回売上消費税" + Environment.NewLine;
                    sqlText += " ACCREC.SALESOUTTAXRF+ACCREC.SALAMNTCONSTAXINCLURF AS THISSALESTAXRF, --今回売上消費税" + Environment.NewLine;
                    sqlText += " ACCREC.ITDEDSALESOUTTAXRF  AS ITDEDSALESOUTTAXRF,      --売上外税対象額" + Environment.NewLine;
                    sqlText += " ACCREC.ITDEDSALESINTAXRF AS ITDEDSALESINTAXRF,         --売上内税対象額" + Environment.NewLine;
                    sqlText += " ACCREC.SALSUBTTLSUBTOTAXFRERF AS ITDEDSALESTAXFREERF,  --売上非課税対象額" + Environment.NewLine;
                    //sqlText += " (CASE WHEN (ACCREC.CONSTAXLAYMETHODRF=0 OR ACCREC.CONSTAXLAYMETHODRF=1) THEN ACCREC.SALESOUTTAXRF" + Environment.NewLine;
                    //sqlText += "  ELSE (ACCREC.SALESOUTTAXRF1 +ACCREC.SALESOUTTAXRF2 +ACCREC.SALESOUTTAXRF3) END)AS SALESOUTTAXRF, --売上外税額" + Environment.NewLine;
                    sqlText += " ACCREC.SALESOUTTAXRF AS SALESOUTTAXRF,           --売上外税額" + Environment.NewLine;
                    sqlText += " ACCREC.SALAMNTCONSTAXINCLURF AS SALESINTAXRF,    --売上内税額" + Environment.NewLine;
                    sqlText += " ACCREC.RETSALESNETPRICERF AS THISSALESPRICRGDSRF,--今回売上返品額" + Environment.NewLine;
                    //sqlText += " (CASE WHEN (ACCREC.CONSTAXLAYMETHODRF=0 OR ACCREC.CONSTAXLAYMETHODRF=1) THEN ACCREC.RETSALESOUTTAXRF" + Environment.NewLine;
                    //sqlText += "  ELSE (ACCREC.RETSALESOUTTAXRF1 +ACCREC.RETSALESOUTTAXRF2 +ACCREC.RETSALESOUTTAXRF3) END)+ACCREC.RETSALAMNTCONSTAXINCLURF AS THISSALESPRCTAXRGDSRF, --今回売上返品消費税" + Environment.NewLine;
                    sqlText += " ACCREC.RETSALESOUTTAXRF+ACCREC.RETSALAMNTCONSTAXINCLURF AS THISSALESPRCTAXRGDSRF, --今回売上返品消費税" + Environment.NewLine;
                    sqlText += " ACCREC.RETITDEDSALESOUTTAXRF AS TTLITDEDRETOUTTAXRF,      --返品外税対象額合計" + Environment.NewLine;
                    sqlText += " ACCREC.RETITDEDSALESINTAXRF AS TTLITDEDRETINTAXRF,        --返品内税対象額合計" + Environment.NewLine;
                    sqlText += " ACCREC.RETSALSUBTTLSUBTOTAXFRERF AS TTLITDEDRETTAXFREERF, --返品非課税対象額合計" + Environment.NewLine;
                    //sqlText += " (CASE WHEN (ACCREC.CONSTAXLAYMETHODRF=0 OR ACCREC.CONSTAXLAYMETHODRF=1) THEN ACCREC.RETSALESOUTTAXRF" + Environment.NewLine;
                    //sqlText += "  ELSE (ACCREC.RETSALESOUTTAXRF1 +ACCREC.RETSALESOUTTAXRF2 +ACCREC.RETSALESOUTTAXRF3) END)AS TTLRETOUTERTAXRF, --返品外税額合計" + Environment.NewLine;
                    sqlText += " ACCREC.RETSALESOUTTAXRF AS TTLRETOUTERTAXRF,        --返品外税額合計" + Environment.NewLine;
                    sqlText += " ACCREC.RETSALAMNTCONSTAXINCLURF AS TTLRETINNERTAXRF,--返品内税額合計" + Environment.NewLine;
                    sqlText += " ACCREC.SALESDISTTLTAXEXCRF AS THISSALESPRICDISRF,   --今回売上値引金額" + Environment.NewLine;                    
                    //sqlText += " (CASE WHEN (ACCREC.CONSTAXLAYMETHODRF=0 OR ACCREC.CONSTAXLAYMETHODRF=1) THEN ACCREC.SALESDISOUTTAXRF" + Environment.NewLine;
                    //sqlText += "  ELSE (ACCREC.SALESDISOUTTAXRF1 +ACCREC.SALESDISOUTTAXRF2 +ACCREC.SALESDISOUTTAXRF3) END)+ACCREC.SALESDISTTLTAXINCLURF AS THISSALESPRCTAXDISRF, --今回売上値引消費税" + Environment.NewLine;
                    sqlText += " ACCREC.SALESDISOUTTAXRF+ACCREC.SALESDISTTLTAXINCLURF AS THISSALESPRCTAXDISRF, --今回売上値引消費税" + Environment.NewLine;
                    sqlText += " ACCREC.ITDEDSALESDISOUTTAXRF AS TTLITDEDDISOUTTAXRF,  --値引外税対象額合計" + Environment.NewLine;
                    sqlText += " ACCREC.ITDEDSALESDISINTAXRF AS TTLITDEDDISINTAXRF,    --値引内税対象額合計" + Environment.NewLine;
                    sqlText += " ACCREC.ITDEDSALESDISTAXFRERF AS TTLITDEDDISTAXFREERF, --値引非課税対象額合計" + Environment.NewLine;                   
                    //sqlText += " (CASE WHEN (ACCREC.CONSTAXLAYMETHODRF=0 OR ACCREC.CONSTAXLAYMETHODRF=1) THEN ACCREC.SALESDISOUTTAXRF" + Environment.NewLine;
                    //sqlText += "  ELSE (ACCREC.SALESDISOUTTAXRF1 +ACCREC.SALESDISOUTTAXRF2 +ACCREC.SALESDISOUTTAXRF3)  END)AS TTLDISOUTERTAXRF, --値引外税額合計" + Environment.NewL
                    sqlText += " ACCREC.SALESDISOUTTAXRF AS TTLDISOUTERTAXRF,      --値引外税額合計" + Environment.NewLine;
                    sqlText += " ACCREC.SALESDISTTLTAXINCLURF AS TTLDISINNERTAXRF, --値引内税額合計" + Environment.NewLine;
                    sqlText += " ACCREC.SALESSLIPCOUNT AS SALESSLIPCOUNTRF,        --売上伝票枚数" + Environment.NewLine;
                    sqlText += " ACCREC.CONSTAXLAYMETHODRF AS CONSTAXLAYMETHODRF,  --消費税転嫁方式" + Environment.NewLine;
                    sqlText += " ACCREC.SALESCNSTAXFRCPROCCDRF AS FRACTIONPROCCDRF,--端数処理区分" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATESTARTDATERF AS TAXRATESTARTDATERF,  --税率開始日" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATEENDDATERF AS TAXRATEENDDATERF,      --税率終了日" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATERF AS TAXRATERF,                    --税率" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF,--税率開始日2" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF,    --税率終了日2" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATE2RF AS TAXRATE2RF,                  --税率2" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF,--税率開始日3" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF,    --税率終了日3" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATE3RF AS TAXRATE3RF                   --税率3" + Environment.NewLine;
                    sqlText += "FROM" + Environment.NewLine;
                    sqlText += "(" + Environment.NewLine;
                    */
                    #endregion
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += " ACCREC.CLAIMCODERF," + Environment.NewLine;
                    sqlText += " ACCREC.CLAIMNAMERF," + Environment.NewLine;
                    sqlText += " ACCREC.CLAIMNAME2RF," + Environment.NewLine;
                    sqlText += " ACCREC.CLAIMSNMRF," + Environment.NewLine;
                    sqlText += " ACCREC.CUSTOMERCODERF," + Environment.NewLine;
                    sqlText += " ACCREC.CUSTOMERNAMERF," + Environment.NewLine;
                    sqlText += " ACCREC.CUSTOMERNAME2RF," + Environment.NewLine;
                    sqlText += " ACCREC.CUSTOMERSNMRF," + Environment.NewLine;
                    sqlText += " ACCREC.FRACTIONPROCCDRF,  --端数処理単位" + Environment.NewLine;
                    sqlText += " ACCREC.FRACTIONPROCUNITRF,--端数処理区分" + Environment.NewLine;
                    sqlText += " ACCREC.SALESNETPRICERF + ACCREC.RETSALESNETPRICERF +ACCREC.SALESDISTTLTAXEXCRF AS OFSTHISTIMESALESRF,               --相殺後今回売上金額" + Environment.NewLine;
                    sqlText += " ACCREC.ITDEDSALESOUTTAXRF+ACCREC.RETITDEDSALESOUTTAXRF+ACCREC.ITDEDSALESDISOUTTAXRF AS ITDEDOFFSETOUTTAXRF,         --相殺後外税対象額 " + Environment.NewLine;
                    sqlText += " ACCREC.ITDEDSALESINTAXRF+ ACCREC.RETITDEDSALESINTAXRF+ ACCREC.ITDEDSALESDISINTAXRF AS ITDEDOFFSETINTAXRF,           --相殺後内税対象額" + Environment.NewLine;
                    sqlText += " ACCREC.SALSUBTTLSUBTOTAXFRERF+ACCREC.RETSALSUBTTLSUBTOTAXFRERF+ACCREC.ITDEDSALESDISTAXFRERF AS ITDEDOFFSETTAXFREERF,--相殺後非課税対象額" + Environment.NewLine;
                    sqlText += " ACCREC.SALAMNTCONSTAXINCLURF + ACCREC.RETSALAMNTCONSTAXINCLURF + ACCREC.SALESDISTTLTAXINCLURF AS OFFSETINTAXRF,     --相殺後内税消費税" + Environment.NewLine;
                    sqlText += " -- 売上" + Environment.NewLine;
                    sqlText += " ACCREC.SALESNETPRICERF AS THISTIMESALESRF,           --今回売上金額" + Environment.NewLine;
                    sqlText += " ACCREC.ITDEDSALESOUTTAXRF  AS ITDEDSALESOUTTAXRF,    --売上外税対象額" + Environment.NewLine;
                    sqlText += " ACCREC.ITDEDSALESINTAXRF AS ITDEDSALESINTAXRF,       --売上内税対象額" + Environment.NewLine;
                    sqlText += " ACCREC.SALSUBTTLSUBTOTAXFRERF AS ITDEDSALESTAXFREERF,--売上非課税対象額" + Environment.NewLine;
                    sqlText += " ACCREC.SALAMNTCONSTAXINCLURF AS SALESINTAXRF,    --売上内税額" + Environment.NewLine;
                    sqlText += " ACCREC.SALESOUTTAXRF AS SALESOUTTAXRF,           --伝票転嫁と明細転嫁(売上外税額) " + Environment.NewLine;
                    //sqlText += " ACCREC.SALESOUTTAXRF1+ACCREC.SALESOUTTAXRF2+ACCREC.SALESOUTTAXRF3 AS SALESOUTTAXRF_S,--請求(親)転嫁 (売上外税額)" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " ACCREC.SALESOUTTAXRF1*TAXRATERF+ACCREC.SALESOUTTAXRF2*TAXRATE2RF+ACCREC.SALESOUTTAXRF3*TAXRATE3RF AS SALESOUTTAXRF_S,--請求(親)転嫁 (売上外税額)" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    //sqlText += " ACCREC.SALESOUTTAXRF1_2+ACCREC.SALESOUTTAXRF2_2+ACCREC.SALESOUTTAXRF3_2 AS SALESOUTTAXRF_S2,--請求(子)転嫁 (売上外税額)" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " ACCREC.SALESOUTTAXRF1_2*TAXRATERF+ACCREC.SALESOUTTAXRF2_2*TAXRATE2RF+ACCREC.SALESOUTTAXRF3_2*TAXRATE3RF AS SALESOUTTAXRF_S2,--請求(子)転嫁 (売上外税額)" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " -- 返品" + Environment.NewLine;
                    sqlText += " ACCREC.RETSALESNETPRICERF AS THISSALESPRICRGDSRF,--今回返品額" + Environment.NewLine;
                    sqlText += " ACCREC.RETITDEDSALESOUTTAXRF AS TTLITDEDRETOUTTAXRF,      --返品外税対象額合計" + Environment.NewLine;
                    sqlText += " ACCREC.RETITDEDSALESINTAXRF AS TTLITDEDRETINTAXRF,        --返品内税対象額合計" + Environment.NewLine;
                    sqlText += " ACCREC.RETSALSUBTTLSUBTOTAXFRERF AS TTLITDEDRETTAXFREERF, --返品非課税対象額合計" + Environment.NewLine;
                    sqlText += " ACCREC.RETSALAMNTCONSTAXINCLURF AS TTLRETINNERTAXRF,      --返品内税額合計" + Environment.NewLine;
                    sqlText += " ACCREC.RETSALESOUTTAXRF AS TTLRETOUTERTAXRF,              --伝票転嫁と明細転嫁(返品外税額合計)" + Environment.NewLine;
                    //sqlText += " ACCREC.RETSALESOUTTAXRF1+ACCREC.RETSALESOUTTAXRF2+ACCREC.RETSALESOUTTAXRF3 AS TTLRETOUTERTAXRF_S, --請求(親)転嫁(返品外税額合計)" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " ACCREC.RETSALESOUTTAXRF1*TAXRATERF+ACCREC.RETSALESOUTTAXRF2*TAXRATE2RF+ACCREC.RETSALESOUTTAXRF3*TAXRATE3RF AS TTLRETOUTERTAXRF_S, --請求(親)転嫁(返品外税額合計)" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    //sqlText += " ACCREC.RETSALESOUTTAXRF1_2+ACCREC.RETSALESOUTTAXRF2_2+ACCREC.RETSALESOUTTAXRF3_2 AS TTLRETOUTERTAXRF_S2, --請求(子)転嫁(返品外税額合計)" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " ACCREC.RETSALESOUTTAXRF1_2*TAXRATERF+ACCREC.RETSALESOUTTAXRF2_2*TAXRATE2RF+ACCREC.RETSALESOUTTAXRF3_2*TAXRATE3RF AS TTLRETOUTERTAXRF_S2, --請求(子)転嫁(返品外税額合計)" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " -- 値引" + Environment.NewLine;
                    sqlText += " ACCREC.SALESDISTTLTAXEXCRF AS THISSALESPRICDISRF,   --今回売上値引金額" + Environment.NewLine;
                    sqlText += " ACCREC.ITDEDSALESDISOUTTAXRF AS TTLITDEDDISOUTTAXRF,  --値引外税対象額合計" + Environment.NewLine;
                    sqlText += " ACCREC.ITDEDSALESDISINTAXRF AS TTLITDEDDISINTAXRF,    --値引内税対象額合計" + Environment.NewLine;
                    sqlText += " ACCREC.ITDEDSALESDISTAXFRERF AS TTLITDEDDISTAXFREERF, --値引非課税対象額合計" + Environment.NewLine;
                    sqlText += " ACCREC.SALESDISTTLTAXINCLURF AS TTLDISINNERTAXRF, --値引内税額合計" + Environment.NewLine;
                    sqlText += " ACCREC.SALESDISOUTTAXRF AS TTLDISOUTERTAXRF,      --伝票転嫁と明細転嫁(値引外税額合計)" + Environment.NewLine;
                    //sqlText += " ACCREC.SALESDISOUTTAXRF1+ACCREC.SALESDISOUTTAXRF2+ACCREC.SALESDISOUTTAXRF3 AS TTLDISOUTERTAXRF_S,--請求(親)転嫁(値引外税額合計)" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " ACCREC.SALESDISOUTTAXRF1*TAXRATERF+ACCREC.SALESDISOUTTAXRF2*TAXRATE2RF+ACCREC.SALESDISOUTTAXRF3*TAXRATE3RF AS TTLDISOUTERTAXRF_S,--請求(親)転嫁(値引外税額合計)" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    //sqlText += " ACCREC.SALESDISOUTTAXRF1_2+ACCREC.SALESDISOUTTAXRF2_2+ACCREC.SALESDISOUTTAXRF3_2 AS TTLDISOUTERTAXRF_S2,--請求(子)転嫁(値引外税額合計)" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " ACCREC.SALESDISOUTTAXRF1_2*TAXRATERF+ACCREC.SALESDISOUTTAXRF2_2*TAXRATE2RF+ACCREC.SALESDISOUTTAXRF3_2*TAXRATE3RF AS TTLDISOUTERTAXRF_S2,--請求(子)転嫁(値引外税額合計)" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " ACCREC.SALESSLIPCOUNT AS SALESSLIPCOUNTRF,        --売上伝票枚数" + Environment.NewLine;
                    sqlText += " ACCREC.SALESCNSTAXFRCPROCCDRF AS FRACTIONPROCCDRF,--端数処理区分" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATESTARTDATERF AS TAXRATESTARTDATERF,  --税率開始日" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATEENDDATERF AS TAXRATEENDDATERF,      --税率終了日" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATERF AS TAXRATERF,                    --税率" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF,--税率開始日2" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF,    --税率終了日2" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATE2RF AS TAXRATE2RF,                  --税率2" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF,--税率開始日3" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF,    --税率終了日3" + Environment.NewLine;
                    sqlText += " ACCREC.TAXRATE3RF AS TAXRATE3RF                   --税率3" + Environment.NewLine;
                    sqlText += "FROM" + Environment.NewLine;
                    sqlText += "(" + Environment.NewLine;

                    #endregion

                    #region SUBクエリ
                    // 修正 2009/04/17 >>>
                    #region DEL 2009/04/17
                    /*
                    sqlText += "  SELECT" + Environment.NewLine;
                    sqlText += "   SALE.CLAIMCODERF AS CLAIMCODERF," + Environment.NewLine;
                    sqlText += "   CLAIM.NAMERF AS CLAIMNAMERF," + Environment.NewLine;
                    sqlText += "   CLAIM.NAME2RF AS CLAIMNAME2RF," + Environment.NewLine;
                    sqlText += "   CLAIM.CUSTOMERSNMRF AS CLAIMSNMRF," + Environment.NewLine;
                    sqlText += "   SALE.CUSTOMERCODERF AS CUSTOMERCODERF," + Environment.NewLine;
                    sqlText += "   CUST.NAMERF AS CUSTOMERNAMERF," + Environment.NewLine;
                    sqlText += "   CUST.NAME2RF AS CUSTOMERNAME2RF," + Environment.NewLine;
                    sqlText += "   CUST.CUSTOMERSNMRF AS CUSTOMERSNMRF,   " + Environment.NewLine;
                    sqlText += "   CLAIM.CONSTAXLAYMETHODRF AS CONSTAXLAYMETHODRF," + Environment.NewLine;
                    sqlText += "   CLAIM.SALESCNSTAXFRCPROCCDRF AS SALESCNSTAXFRCPROCCDRF," + Environment.NewLine;
                    sqlText += "   SALESPROC.FRACTIONPROCCDRF," + Environment.NewLine;
                    sqlText += "   SALESPROC.FRACTIONPROCUNITRF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATESTARTDATERF AS TAXRATESTARTDATERF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATEENDDATERF AS TAXRATEENDDATERF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATE3RF AS TAXRATE3RF," + Environment.NewLine;
                    sqlText += "   COUNT(SALE.SALESSLIPNUMRF) SALESSLIPCOUNT," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.SALESNETPRICERF ELSE 0 END)) AS SALESNETPRICERF," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.ITDEDSALESOUTTAXRF ELSE 0 END)) AS ITDEDSALESOUTTAXRF," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.ITDEDSALESINTAXRF ELSE 0 END)) AS ITDEDSALESINTAXRF," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.SALSUBTTLSUBTOTAXFRERF ELSE 0 END)) AS SALSUBTTLSUBTOTAXFRERF," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.SALESOUTTAXRF ELSE 0 END)) AS SALESOUTTAXRF," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * SALE.TAXRATERF) ELSE 0 END)) AS SALESOUTTAXRF1," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS SALESOUTTAXRF2," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS SALESOUTTAXRF3," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.SALAMNTCONSTAXINCLURF ELSE 0 END)) AS SALAMNTCONSTAXINCLURF," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.SALESNETPRICERF ELSE 0 END)) AS RETSALESNETPRICERF,              --返品 売上正価金額" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.ITDEDSALESOUTTAXRF ELSE 0 END)) AS RETITDEDSALESOUTTAXRF,        --返品 売上外税対象額" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.ITDEDSALESINTAXRF ELSE 0 END)) AS RETITDEDSALESINTAXRF,          --返品 売上内税対象額" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.SALSUBTTLSUBTOTAXFRERF ELSE 0 END)) AS RETSALSUBTTLSUBTOTAXFRERF,--返品 売上小計非課税対象額" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.SALESOUTTAXRF ELSE 0 END)) AS RETSALESOUTTAXRF,                  --返品 売上金額消費税額（外税）" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * SALE.TAXRATERF) ELSE 0 END)) AS RETSALESOUTTAXRF1,                         --返品 売上金額消費税額（外税）税率1" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS RETSALESOUTTAXRF2,                             --返品 売上金額消費税額（外税）税率2" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS RETSALESOUTTAXRF3,                             --返品 売上金額消費税額（外税）税率3" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.SALAMNTCONSTAXINCLURF ELSE 0 END)) AS RETSALAMNTCONSTAXINCLURF,  --返品 売上金額消費税額（内税）" + Environment.NewLine;
                    sqlText += "   SUM(SALE.SALESDISTTLTAXEXCRF) AS SALESDISTTLTAXEXCRF,     --売上値引金額計（税抜き）" + Environment.NewLine;
                    sqlText += "   SUM(SALE.ITDEDSALESDISOUTTAXRF) AS ITDEDSALESDISOUTTAXRF, --売上値引外税対象額合計" + Environment.NewLine;
                    sqlText += "   SUM(SALE.ITDEDSALESDISINTAXRF) AS ITDEDSALESDISINTAXRF,   --売上値引内税対象額合計 " + Environment.NewLine;
                    sqlText += "   SUM(SALE.ITDEDSALESDISTAXFRERF) AS ITDEDSALESDISTAXFRERF, --売上値引非課税対象額合計" + Environment.NewLine;
                    sqlText += "   SUM(SALE.SALESDISOUTTAXRF) AS SALESDISOUTTAXRF,           --売上値引消費税額（外税）" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATERF) ELSE 0 END)) AS SALESDISOUTTAXRF1,  --売上値引消費税額（外税）税率1" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS SALESDISOUTTAXRF2, --売上値引消費税額（外税）税率2" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS SALESDISOUTTAXRF3, --売上値引消費税額（外税）税率3" + Environment.NewLine;
                    sqlText += "   SUM(SALE.SALESDISTTLTAXINCLURF) AS SALESDISTTLTAXINCLURF    --売上値引消費税額（内税）" + Environment.NewLine;
                    sqlText += "  FROM" + Environment.NewLine;
                    sqlText += "  (" + Environment.NewLine;
                    sqlText += "     SELECT" + Environment.NewLine;
                    sqlText += "      SUBSALE.ENTERPRISECODERF," + Environment.NewLine;
                    //sqlText += "      SUBSALE.CLAIMCODERF," + Environment.NewLine;
                    sqlText += "      (CASE WHEN (SEARCHCUST.CLAIMCODERF IS NOT NULL) THEN SEARCHCUST.CLAIMCODERF ELSE SUBSALE.CLAIMCODERF END) AS CLAIMCODERF," + Environment.NewLine;
                    sqlText += "      SUBSALE.CUSTOMERCODERF," + Environment.NewLine;
                    sqlText += "      SUBSALE.ADDUPADATERF," + Environment.NewLine;
                    sqlText += "      SUBSALE.LOGICALDELETECODERF," + Environment.NewLine;
                    sqlText += "      SUBSALE.ACPTANODRSTATUSRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.DEBITNOTEDIVRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.SALESSLIPNUMRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.SALESSLIPCDRF," + Environment.NewLine;
                    // 修正 2009.03.24 >>>
                    //sqlText += "      SUBSALE.SALESNETPRICERF," + Environment.NewLine;
                    //sqlText += "      SUBSALE.ITDEDSALESOUTTAXRF," + Environment.NewLine;
                    //sqlText += "      SUBSALE.ITDEDSALESINTAXRF," + Environment.NewLine;
                    //sqlText += "      SUBSALE.SALSUBTTLSUBTOTAXFRERF," + Environment.NewLine;
                    //sqlText += "      SUBSALE.SALESOUTTAXRF," + Environment.NewLine;
                    //sqlText += "      SUBSALE.SALAMNTCONSTAXINCLURF," + Environment.NewLine;                    
                    //sqlText += "      SUBSALE.SALESDISTTLTAXEXCRF," + Environment.NewLine;
                    //sqlText += "      SUBSALE.ITDEDSALESDISOUTTAXRF," + Environment.NewLine;
                    //sqlText += "      SUBSALE.ITDEDSALESDISINTAXRF," + Environment.NewLine;
                    //sqlText += "      SUBSALE.ITDEDSALESDISTAXFRERF," + Environment.NewLine;
                    //sqlText += "      SUBSALE.SALESDISOUTTAXRF," + Environment.NewLine;
                    //sqlText += "      SUBSALE.SALESDISTTLTAXINCLURF," + Environment.NewLine;
                    // 売上・返品(行値引含む)
                    sqlText += "      SUBSALE.SALESNETPRICERF + SALESDTL.DISSALESTAXEXCGYO AS SALESNETPRICERF," + Environment.NewLine;
                    sqlText += "      SUBSALE.ITDEDSALESOUTTAXRF + SALESDTL.ITDEDDISSALESOUTTAXGYO AS ITDEDSALESOUTTAXRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.ITDEDSALESINTAXRF + SALESDTL.ITDEDDISSALESINTAXGYO AS ITDEDSALESINTAXRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.SALSUBTTLSUBTOTAXFRERF + SALESDTL.ITDEDDISSALESTAXFREGYO AS SALSUBTTLSUBTOTAXFRERF," + Environment.NewLine;
                    sqlText += "      SUBSALE.SALESOUTTAXRF + SALESDTL.DISSALESOUTTAXGYO AS SALESOUTTAXRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.SALAMNTCONSTAXINCLURF + SALESDTL.DISSALESTAXFREGYO AS SALAMNTCONSTAXINCLURF," + Environment.NewLine;
                    // 値引(行値引除く)
                    //sqlText += "      SALESDTL.DISSALESTAXEXCGOODS AS SALESDISTTLTAXEXCRF,-- 税抜値引金額(商品値引)" + Environment.NewLine;
                    //sqlText += "      SALESDTL.ITDEDDISSALESOUTTAXGOODS AS ITDEDSALESDISOUTTAXRF,-- 外税対象額(商品値引)" + Environment.NewLine;
                    //sqlText += "      SALESDTL.ITDEDDISSALESTAXFREGOODS AS ITDEDSALESDISTAXFRERF, -- 非課税対象額(商品値引)" + Environment.NewLine;
                    //sqlText += "      SALESDTL.ITDEDDISSALESINTAXGOODS AS ITDEDSALESDISINTAXRF,-- 内税対象額(商品値引)" + Environment.NewLine;
                    //sqlText += "      SALESDTL.DISSALESOUTTAXGOODS AS SALESDISOUTTAXRF,    -- 外税額(商品値引)" + Environment.NewLine;
                    //sqlText += "      SALESDTL.DISSALESTAXFREGOODS AS SALESDISTTLTAXINCLURF,     -- 内税額(商品値引)" + Environment.NewLine;
                    sqlText += "      SUBSALE.SALESDISTTLTAXEXCRF - SALESDTL.DISSALESTAXEXCGYO AS SALESDISTTLTAXEXCRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.ITDEDSALESDISOUTTAXRF - SALESDTL.ITDEDDISSALESOUTTAXGYO AS ITDEDSALESDISOUTTAXRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.ITDEDSALESDISINTAXRF - SALESDTL.ITDEDDISSALESINTAXGYO AS ITDEDSALESDISINTAXRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.ITDEDSALESDISTAXFRERF - SALESDTL.ITDEDDISSALESTAXFREGYO AS ITDEDSALESDISTAXFRERF," + Environment.NewLine;
                    sqlText += "      SUBSALE.SALESDISOUTTAXRF - SALESDTL.DISSALESOUTTAXGYO AS SALESDISOUTTAXRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.SALESDISTTLTAXINCLURF - SALESDTL.DISSALESTAXFREGYO AS SALESDISTTLTAXINCLURF," + Environment.NewLine;
                    // 修正 2009.03.24 <<<
                    sqlText += "      TAX.TAXRATESTARTDATERF AS TAXRATESTARTDATERF,   --税率開始日" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATEENDDATERF AS TAXRATEENDDATERF,       --税率終了日" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATERF AS TAXRATERF,                     --税率" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF, --税率開始日2" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF,     --税率終了日2" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATE2RF AS TAXRATE2RF,                   --税率2" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF, --税率開始日3" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF,     --税率終了日3" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATE3RF AS TAXRATE3RF                    --税率3" + Environment.NewLine;
                    sqlText += "     FROM" + Environment.NewLine;
                    sqlText += "      SALESSLIPRF AS SUBSALE WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "    LEFT JOIN TAXRATESETRF AS TAX" + Environment.NewLine;
                    sqlText += "     ON SUBSALE.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    LEFT JOIN CUSTOMERRF AS SEARCHCUST " + Environment.NewLine;
                    sqlText += "     ON  SUBSALE.ENTERPRISECODERF = SEARCHCUST.ENTERPRISECODERF " + Environment.NewLine;
                    sqlText += "     AND SUBSALE.CUSTOMERCODERF = SEARCHCUST.CUSTOMERCODERF " + Environment.NewLine;
                    // ADD 2009.03.24 >>>
                    sqlText += "    LEFT JOIN" + Environment.NewLine;
                    sqlText += "    (" + Environment.NewLine;
                    sqlText += "      SELECT" + Environment.NewLine;
                    sqlText += "       SALES.ENTERPRISECODERF," + Environment.NewLine;
                    sqlText += "       SALES.ACPTANODRSTATUSRF," + Environment.NewLine;
                    sqlText += "       SALES.SALESSLIPNUMRF," + Environment.NewLine;
                    sqlText += "       SALES.SALESSLIPCDRF," + Environment.NewLine;
                    sqlText += "       --行値引" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0 ) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS DISSALESTAXEXCGYO,-- 税抜値引金額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 0) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESOUTTAXGYO,-- 外税対象額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 1) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESTAXFREGYO, -- 非課税対象額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 2) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESINTAXGYO,-- 内税対象額(行値引)       " + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 0) THEN DTL.SALESPRICECONSTAXRF ELSE 0 END) AS DISSALESOUTTAXGYO,    -- 外税額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 2) THEN DTL.SALESPRICECONSTAXRF ELSE 0 END) AS DISSALESTAXFREGYO,    -- 内税額(行値引)       " + Environment.NewLine;
                    sqlText += "       --商品値引" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF !=0 ) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS DISSALESTAXEXCGOODS,-- 税抜値引金額(商品値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF !=0  AND DTL.TAXATIONDIVCDRF  = 0) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESOUTTAXGOODS,-- 外税対象額(商品値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF !=0  AND DTL.TAXATIONDIVCDRF  = 1) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESTAXFREGOODS, -- 非課税対象額(商品値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF !=0  AND DTL.TAXATIONDIVCDRF  = 2) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESINTAXGOODS,-- 内税対象額(商品値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF !=0  AND DTL.TAXATIONDIVCDRF  = 0) THEN DTL.SALESPRICECONSTAXRF ELSE 0 END) AS DISSALESOUTTAXGOODS,    -- 外税額(商品値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF !=0  AND DTL.TAXATIONDIVCDRF  = 2) THEN DTL.SALESPRICECONSTAXRF ELSE 0 END) AS DISSALESTAXFREGOODS     -- 内税額(商品値引)" + Environment.NewLine;
                    sqlText += "      FROM" + Environment.NewLine;
                    sqlText += "       SALESDETAILRF AS DTL" + Environment.NewLine;
                    sqlText += "      LEFT JOIN SALESSLIPRF AS SALES" + Environment.NewLine;
                    sqlText += "       ON  SALES.ENTERPRISECODERF = DTL.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "       AND SALES.ACPTANODRSTATUSRF = DTL.ACPTANODRSTATUSRF" + Environment.NewLine;
                    sqlText += "       AND SALES.SALESSLIPNUMRF = DTL.SALESSLIPNUMRF" + Environment.NewLine;
                    sqlText += "      GROUP BY" + Environment.NewLine;
                    sqlText += "       SALES.ENTERPRISECODERF," + Environment.NewLine;
                    sqlText += "       SALES.ACPTANODRSTATUSRF," + Environment.NewLine;
                    sqlText += "       SALES.SALESSLIPNUMRF," + Environment.NewLine;
                    sqlText += "       SALES.SALESSLIPCDRF" + Environment.NewLine;
                    sqlText += "    ) AS SALESDTL" + Environment.NewLine;
                    sqlText += "     ON  SUBSALE.ENTERPRISECODERF = SALESDTL.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "     AND SUBSALE.ACPTANODRSTATUSRF = SALESDTL.ACPTANODRSTATUSRF" + Environment.NewLine;
                    sqlText += "     AND SUBSALE.SALESSLIPNUMRF = SALESDTL.SALESSLIPNUMRF" + Environment.NewLine;
                    // ADD 2009.03.24 <<<
                    sqlText += "  ) AS SALE" + Environment.NewLine;
                    */
                    #endregion
                    sqlText += "  SELECT" + Environment.NewLine;
                    sqlText += "   SALE.RESULTSADDUPSECCDRF," + Environment.NewLine;// ADD 2009/06/18
                    sqlText += "   SALE.CLAIMCODERF AS CLAIMCODERF," + Environment.NewLine;
                    sqlText += "   CLAIM.NAMERF AS CLAIMNAMERF," + Environment.NewLine;
                    sqlText += "   CLAIM.NAME2RF AS CLAIMNAME2RF," + Environment.NewLine;
                    sqlText += "   CLAIM.CUSTOMERSNMRF AS CLAIMSNMRF," + Environment.NewLine;
                    sqlText += "   SALE.CUSTOMERCODERF AS CUSTOMERCODERF," + Environment.NewLine;
                    sqlText += "   CUST.NAMERF AS CUSTOMERNAMERF," + Environment.NewLine;
                    sqlText += "   CUST.NAME2RF AS CUSTOMERNAME2RF," + Environment.NewLine;
                    sqlText += "   CUST.CUSTOMERSNMRF AS CUSTOMERSNMRF,   " + Environment.NewLine;
                    sqlText += "   CLAIM.SALESCNSTAXFRCPROCCDRF AS SALESCNSTAXFRCPROCCDRF," + Environment.NewLine;
                    sqlText += "   SALESPROC.FRACTIONPROCCDRF," + Environment.NewLine;
                    sqlText += "   SALESPROC.FRACTIONPROCUNITRF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATESTARTDATERF AS TAXRATESTARTDATERF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATEENDDATERF AS TAXRATEENDDATERF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF," + Environment.NewLine;
                    sqlText += "   SALE.TAXRATE3RF AS TAXRATE3RF," + Environment.NewLine;
                    sqlText += "   COUNT(SALE.SALESSLIPNUMRF) SALESSLIPCOUNT," + Environment.NewLine;
                    sqlText += "   -- 売上" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.SALESNETPRICERF ELSE 0 END)) AS SALESNETPRICERF," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.ITDEDSALESOUTTAXRF ELSE 0 END)) AS ITDEDSALESOUTTAXRF," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.ITDEDSALESINTAXRF ELSE 0 END)) AS ITDEDSALESINTAXRF," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.SALSUBTTLSUBTOTAXFRERF ELSE 0 END)) AS SALSUBTTLSUBTOTAXFRERF," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =0 THEN SALE.SALAMNTCONSTAXINCLURF ELSE 0 END)) AS SALAMNTCONSTAXINCLURF," + Environment.NewLine;
                    sqlText += "   -- 伝票転嫁と明細転嫁 外税消費税" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 0 OR SALE.CONSTAXLAYMETHODRF= 1 ) AND (SALE.SALESSLIPCDRF =0) THEN SALE.SALESOUTTAXRF ELSE 0 END)) AS SALESOUTTAXRF," + Environment.NewLine;
                    sqlText += "   -- 請求転嫁(親) 外税消費税" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * SALE.TAXRATERF) ELSE 0 END)) AS SALESOUTTAXRF1," + Environment.NewLine;
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS SALESOUTTAXRF2," + Environment.NewLine;
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS SALESOUTTAXRF3," + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF) ELSE 0 END)) AS SALESOUTTAXRF1," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF) ELSE 0 END)) AS SALESOUTTAXRF2," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF) ELSE 0 END)) AS SALESOUTTAXRF3," + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    sqlText += "   -- 請求転嫁(子) 外税消費税" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * SALE.TAXRATERF) ELSE 0 END)) AS SALESOUTTAXRF1_2," + Environment.NewLine;
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS SALESOUTTAXRF2_2," + Environment.NewLine;
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS SALESOUTTAXRF3_2," + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF) ELSE 0 END)) AS SALESOUTTAXRF1_2," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF) ELSE 0 END)) AS SALESOUTTAXRF2_2," + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.SALESSLIPCDRF =0) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF) ELSE 0 END)) AS SALESOUTTAXRF3_2," + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    sqlText += "   -- 返品" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.SALESNETPRICERF ELSE 0 END)) AS RETSALESNETPRICERF,              --返品金額（税抜）" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.ITDEDSALESOUTTAXRF ELSE 0 END)) AS RETITDEDSALESOUTTAXRF,        --返品外税対象額" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.ITDEDSALESINTAXRF ELSE 0 END)) AS RETITDEDSALESINTAXRF,          --返品内税対象額" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.SALSUBTTLSUBTOTAXFRERF ELSE 0 END)) AS RETSALSUBTTLSUBTOTAXFRERF,--返品小計非課税対象額" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN SALE.SALESSLIPCDRF =1 THEN SALE.SALAMNTCONSTAXINCLURF ELSE 0 END)) AS RETSALAMNTCONSTAXINCLURF,  --返品金額消費税額（内税）" + Environment.NewLine;
                    sqlText += "   -- 伝票転嫁と明細転嫁 返品金額消費税額（外税）" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 0 OR SALE.CONSTAXLAYMETHODRF= 1 ) AND (SALE.SALESSLIPCDRF =1) THEN SALE.SALESOUTTAXRF ELSE 0 END)) AS RETSALESOUTTAXRF,                  --返品 売上金額消費税額（外税）" + Environment.NewLine;
                    sqlText += "   -- 請求転嫁(親) 返品金額消費税額（外税）" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * SALE.TAXRATERF) ELSE 0 END)) AS RETSALESOUTTAXRF1,--税率1" + Environment.NewLine;
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS RETSALESOUTTAXRF2,    --税率2" + Environment.NewLine;
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF)" + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS RETSALESOUTTAXRF3,    --税率3" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF) ELSE 0 END)) AS RETSALESOUTTAXRF1,--税率1" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF) ELSE 0 END)) AS RETSALESOUTTAXRF2,    --税率2" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF) ELSE 0 END)) AS RETSALESOUTTAXRF3,    --税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    sqlText += "   -- 請求転嫁(子) 返品金額消費税額（外税）" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * SALE.TAXRATERF) ELSE 0 END)) AS RETSALESOUTTAXRF1_2,--税率1" + Environment.NewLine;
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS RETSALESOUTTAXRF2_2,    --税率2" + Environment.NewLine;
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF)" + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS RETSALESOUTTAXRF3_2,    --税率3" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF) ELSE 0 END)) AS RETSALESOUTTAXRF1_2,--税率1" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF) ELSE 0 END)) AS RETSALESOUTTAXRF2_2,    --税率2" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.SALESSLIPCDRF =1) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESOUTTAXRF) ELSE 0 END)) AS RETSALESOUTTAXRF3_2,    --税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    sqlText += "   -- 値引" + Environment.NewLine;
                    sqlText += "   SUM(SALE.SALESDISTTLTAXEXCRF) AS SALESDISTTLTAXEXCRF,    --値引金額計（税抜き）" + Environment.NewLine;
                    sqlText += "   SUM(SALE.ITDEDSALESDISOUTTAXRF) AS ITDEDSALESDISOUTTAXRF,--値引外税対象額合計" + Environment.NewLine;
                    sqlText += "   SUM(SALE.ITDEDSALESDISINTAXRF) AS ITDEDSALESDISINTAXRF,  --値引内税対象額合計 " + Environment.NewLine;
                    sqlText += "   SUM(SALE.ITDEDSALESDISTAXFRERF) AS ITDEDSALESDISTAXFRERF,--値引非課税対象額合計" + Environment.NewLine;
                    sqlText += "   SUM(SALE.SALESDISTTLTAXINCLURF) AS SALESDISTTLTAXINCLURF,--値引消費税額（内税）" + Environment.NewLine;
                    sqlText += "   -- 伝票転嫁と明細転嫁 外税消費税" + Environment.NewLine;
                    sqlText += "   SUM(CASE WHEN (SALE.CONSTAXLAYMETHODRF= 0 OR SALE.CONSTAXLAYMETHODRF= 1 )THEN SALE.SALESDISOUTTAXRF ELSE 0 END) AS SALESDISOUTTAXRF,--値引消費税額（外税）" + Environment.NewLine;
                    sqlText += "   -- 請求転嫁(親) --値引消費税額（外税）" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATERF) ELSE 0 END)) AS SALESDISOUTTAXRF1, --税率1" + Environment.NewLine;
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS SALESDISOUTTAXRF2,--税率2" + Environment.NewLine;
                    //// --- UPD 2014/04/22 T.Miyamoto Redmine#42539 ------------------------------>>>>>
                    ////sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    ////sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS SALESDISOUTTAXRF3, --税率3" + Environment.NewLine;
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF)" + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS SALESDISOUTTAXRF3, --税率3" + Environment.NewLine;
                    //// --- UPD 2014/04/22 T.Miyamoto Redmine#42539 ------------------------------<<<<<
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF) ELSE 0 END)) AS SALESDISOUTTAXRF1, --税率1" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF) ELSE 0 END)) AS SALESDISOUTTAXRF2,--税率2" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 2) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF) ELSE 0 END)) AS SALESDISOUTTAXRF3, --税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    sqlText += "   -- 請求転嫁(子) --値引消費税額（外税）" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATERF) ELSE 0 END)) AS SALESDISOUTTAXRF1_2, --税率1" + Environment.NewLine;
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS SALESDISOUTTAXRF2_2,--税率2" + Environment.NewLine;
                    //// --- UPD 2014/04/22 T.Miyamoto Redmine#42539 ------------------------------>>>>>
                    ////sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    ////sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS SALESDISOUTTAXRF3_2 --税率3" + Environment.NewLine;
                    //sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF)" + Environment.NewLine;
                    //sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS SALESDISOUTTAXRF3_2 --税率3" + Environment.NewLine;
                    //// --- UPD 2014/04/22 T.Miyamoto Redmine#42539 ------------------------------<<<<<
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATERF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATERF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF) ELSE 0 END)) AS SALESDISOUTTAXRF1_2, --税率1" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE2RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF) ELSE 0 END)) AS SALESDISOUTTAXRF2_2,--税率2" + Environment.NewLine;
                    sqlText += "   SUM((CASE WHEN (SALE.CONSTAXLAYMETHODRF= 3) AND (SALE.ADDUPADATERF >= SALE.TAXRATESTARTDATE3RF AND SALE.ADDUPADATERF <= SALE.TAXRATEENDDATE3RF)" + Environment.NewLine;
                    sqlText += "        THEN (SALE.ITDEDSALESDISOUTTAXRF) ELSE 0 END)) AS SALESDISOUTTAXRF3_2 --税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    sqlText += "  FROM" + Environment.NewLine;
                    sqlText += "  (" + Environment.NewLine;
                    sqlText += "     SELECT" + Environment.NewLine;
                    sqlText += "      SUBSALE.ENTERPRISECODERF," + Environment.NewLine;
                    sqlText += "      (CASE WHEN (SEARCHCUST.CLAIMCODERF IS NOT NULL) THEN SEARCHCUST.CLAIMCODERF ELSE SUBSALE.CLAIMCODERF END) AS CLAIMCODERF," + Environment.NewLine;
                    sqlText += "      SUBSALE.CUSTOMERCODERF," + Environment.NewLine;
                    sqlText += "      SUBSALE.ADDUPADATERF," + Environment.NewLine;
                    sqlText += "      SUBSALE.LOGICALDELETECODERF," + Environment.NewLine;
                    sqlText += "      SUBSALE.CONSTAXLAYMETHODRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.ACPTANODRSTATUSRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.DEBITNOTEDIVRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.SALESSLIPNUMRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.SALESSLIPCDRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.RESULTSADDUPSECCDRF," + Environment.NewLine;// ADD 2009/06/18 >>>
                    sqlText += "      SUBSALE.SALESNETPRICERF + SALESDTL.DISSALESTAXEXCGYO AS SALESNETPRICERF," + Environment.NewLine;
                    sqlText += "      SUBSALE.ITDEDSALESOUTTAXRF + SALESDTL.ITDEDDISSALESOUTTAXGYO AS ITDEDSALESOUTTAXRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.ITDEDSALESINTAXRF + SALESDTL.ITDEDDISSALESINTAXGYO AS ITDEDSALESINTAXRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.SALSUBTTLSUBTOTAXFRERF + SALESDTL.ITDEDDISSALESTAXFREGYO AS SALSUBTTLSUBTOTAXFRERF," + Environment.NewLine;
                    sqlText += "      SUBSALE.SALESOUTTAXRF + SALESDTL.DISSALESOUTTAXGYO AS SALESOUTTAXRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.SALAMNTCONSTAXINCLURF + SALESDTL.DISSALESTAXFREGYO AS SALAMNTCONSTAXINCLURF," + Environment.NewLine;
                    sqlText += "      SUBSALE.SALESDISTTLTAXEXCRF - SALESDTL.DISSALESTAXEXCGYO AS SALESDISTTLTAXEXCRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.ITDEDSALESDISOUTTAXRF - SALESDTL.ITDEDDISSALESOUTTAXGYO AS ITDEDSALESDISOUTTAXRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.ITDEDSALESDISINTAXRF - SALESDTL.ITDEDDISSALESINTAXGYO AS ITDEDSALESDISINTAXRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.ITDEDSALESDISTAXFRERF - SALESDTL.ITDEDDISSALESTAXFREGYO AS ITDEDSALESDISTAXFRERF," + Environment.NewLine;
                    sqlText += "      SUBSALE.SALESDISOUTTAXRF - SALESDTL.DISSALESOUTTAXGYO AS SALESDISOUTTAXRF," + Environment.NewLine;
                    sqlText += "      SUBSALE.SALESDISTTLTAXINCLURF - SALESDTL.DISSALESTAXFREGYO AS SALESDISTTLTAXINCLURF," + Environment.NewLine;
                    sqlText += "      TAX.TAXRATESTARTDATERF AS TAXRATESTARTDATERF,   --税率開始日" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATEENDDATERF AS TAXRATEENDDATERF,       --税率終了日" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATERF AS TAXRATERF,                     --税率" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF, --税率開始日2" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF,     --税率終了日2" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATE2RF AS TAXRATE2RF,                   --税率2" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF, --税率開始日3" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF,     --税率終了日3" + Environment.NewLine;
                    sqlText += "      TAX.TAXRATE3RF AS TAXRATE3RF                    --税率3" + Environment.NewLine;
                    sqlText += "     FROM" + Environment.NewLine;
                    sqlText += "      SALESSLIPRF AS SUBSALE WITH(READUNCOMMITTED)" + Environment.NewLine;
                    // -- UPD 2011/03/15 ----------------------->>>
                    //sqlText += "    LEFT JOIN TAXRATESETRF AS TAX" + Environment.NewLine;
                    sqlText += "    LEFT JOIN TAXRATESETRF AS TAX WITH (READUNCOMMITTED)" + Environment.NewLine;
                    // -- UPD 2011/03/15 -----------------------<<<
                    sqlText += "     ON SUBSALE.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
                    // -- UPD 2011/03/15 ----------------------->>>
                    //sqlText += "    LEFT JOIN CUSTOMERRF AS SEARCHCUST " + Environment.NewLine;
                    sqlText += "    LEFT JOIN CUSTOMERRF AS SEARCHCUST WITH (READUNCOMMITTED)" + Environment.NewLine;
                    // -- UPD 2011/03/15 -----------------------<<<
                    sqlText += "     ON  SUBSALE.ENTERPRISECODERF = SEARCHCUST.ENTERPRISECODERF " + Environment.NewLine;
                    sqlText += "     AND SUBSALE.CUSTOMERCODERF = SEARCHCUST.CUSTOMERCODERF " + Environment.NewLine;
                    sqlText += "    LEFT JOIN" + Environment.NewLine;
                    sqlText += "    (" + Environment.NewLine;
                    sqlText += "      SELECT" + Environment.NewLine;
                    sqlText += "       SALES.ENTERPRISECODERF," + Environment.NewLine;
                    sqlText += "       SALES.ACPTANODRSTATUSRF," + Environment.NewLine;
                    sqlText += "       SALES.SALESSLIPNUMRF," + Environment.NewLine;
                    sqlText += "       SALES.SALESSLIPCDRF," + Environment.NewLine;
                    sqlText += "       --行値引" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0 ) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS DISSALESTAXEXCGYO,-- 税抜値引金額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 0) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESOUTTAXGYO,-- 外税対象額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 1) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESTAXFREGYO,-- 非課税対象額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 2) THEN DTL.SALESMONEYTAXEXCRF ELSE 0 END) AS ITDEDDISSALESINTAXGYO, -- 内税対象額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 0) THEN DTL.SALESPRICECONSTAXRF ELSE 0 END) AS DISSALESOUTTAXGYO,    -- 外税額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.SALESSLIPCDDTLRF = 2 AND DTL.SHIPMENTCNTRF =0  AND DTL.TAXATIONDIVCDRF  = 2) THEN DTL.SALESPRICECONSTAXRF ELSE 0 END) AS DISSALESTAXFREGYO     -- 内税額(行値引)" + Environment.NewLine;
                    sqlText += "      FROM" + Environment.NewLine;
                    // -- UPD 2011/03/15 -------------------------------->>>
                    //sqlText += "       SALESDETAILRF AS DTL" + Environment.NewLine;
                    //sqlText += "      LEFT JOIN SALESSLIPRF AS SALES" + Environment.NewLine;
                    sqlText += "       SALESDETAILRF AS DTL WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "      LEFT JOIN SALESSLIPRF AS SALES WITH (READUNCOMMITTED)" + Environment.NewLine;
                    // -- UPD 2011/03/15 --------------------------------<<<
                    sqlText += "       ON  SALES.ENTERPRISECODERF = DTL.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "       AND SALES.ACPTANODRSTATUSRF = DTL.ACPTANODRSTATUSRF" + Environment.NewLine;
                    sqlText += "       AND SALES.SALESSLIPNUMRF = DTL.SALESSLIPNUMRF" + Environment.NewLine;
                    sqlText += "      GROUP BY" + Environment.NewLine;
                    sqlText += "       SALES.ENTERPRISECODERF," + Environment.NewLine;
                    sqlText += "       SALES.ACPTANODRSTATUSRF," + Environment.NewLine;
                    sqlText += "       SALES.SALESSLIPNUMRF," + Environment.NewLine;
                    sqlText += "       SALES.SALESSLIPCDRF" + Environment.NewLine;
                    sqlText += "    ) AS SALESDTL" + Environment.NewLine;
                    sqlText += "     ON  SUBSALE.ENTERPRISECODERF = SALESDTL.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "     AND SUBSALE.ACPTANODRSTATUSRF = SALESDTL.ACPTANODRSTATUSRF" + Environment.NewLine;
                    sqlText += "     AND SUBSALE.SALESSLIPNUMRF = SALESDTL.SALESSLIPNUMRF" + Environment.NewLine;
                    sqlText += "  ) AS SALE" + Environment.NewLine;
                    // 修正 2009/04/17 <<<
                    #endregion

                    #region JOIN句
                    sqlText += "LEFT JOIN CUSTOMERRF AS CUST WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += " ON SALE.ENTERPRISECODERF = CUST.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " AND SALE.CUSTOMERCODERF = CUST.CUSTOMERCODERF" + Environment.NewLine;
                    sqlText += "INNER JOIN CUSTOMERRF AS CLAIM WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += " ON SALE.ENTERPRISECODERF = CLAIM.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " AND SALE.CLAIMCODERF = CLAIM.CUSTOMERCODERF" + Environment.NewLine;
                    sqlText += "LEFT JOIN SALESPROCMONEYRF AS SALESPROC WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += " ON  CLAIM.ENTERPRISECODERF=SALESPROC.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " AND SALESPROC.FRACPROCMONEYDIVRF=1" + Environment.NewLine;
                    sqlText += " AND CLAIM.SALESCNSTAXFRCPROCCDRF=SALESPROC.FRACTIONPROCCODERF" + Environment.NewLine;
                    #endregion

                    #region WHERE句
                    sqlText += "WHERE SALE.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += " AND SALE.CLAIMCODERF=@FINDCUSTOMERCODE" + Environment.NewLine;
                    sqlText += " AND(SALE.ADDUPADATERF<=@FINDADDUPDATE AND SALE.ADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
                    sqlText += " AND SALE.LOGICALDELETECODERF=0" + Environment.NewLine;
                    sqlText += " AND SALE.ACPTANODRSTATUSRF=30" + Environment.NewLine;
                    sqlText += " AND SALE.DEBITNOTEDIVRF=0" + Environment.NewLine;
                    #endregion

                    #region GROUP BY句
                    sqlText += "GROUP BY" + Environment.NewLine;
                    sqlText += " SALE.RESULTSADDUPSECCDRF," + Environment.NewLine; // ADD 2009/06/18
                    sqlText += " SALE.CLAIMCODERF," + Environment.NewLine;
                    sqlText += " CLAIM.NAMERF," + Environment.NewLine;
                    sqlText += " CLAIM.NAME2RF," + Environment.NewLine;
                    sqlText += " CLAIM.CUSTOMERSNMRF," + Environment.NewLine;
                    sqlText += " SALE.CUSTOMERCODERF," + Environment.NewLine;
                    sqlText += " CUST.NAMERF," + Environment.NewLine;
                    sqlText += " CUST.NAME2RF," + Environment.NewLine;
                    sqlText += " CUST.CUSTOMERSNMRF, " + Environment.NewLine;
                    //sqlText += " CLAIM.CONSTAXLAYMETHODRF,    --消費税転嫁方式" + Environment.NewLine;
                    sqlText += " CLAIM.SALESCNSTAXFRCPROCCDRF,--売上消費税端数処理コード" + Environment.NewLine;
                    sqlText += " SALESPROC.FRACTIONPROCCDRF,  --端数処理単位" + Environment.NewLine;
                    sqlText += " SALESPROC.FRACTIONPROCUNITRF,--端数処理区分" + Environment.NewLine;
                    sqlText += " SALE.TAXRATESTARTDATERF,     --税率開始日" + Environment.NewLine;
                    sqlText += " SALE.TAXRATEENDDATERF,       --税率終了日" + Environment.NewLine;
                    sqlText += " SALE.TAXRATERF,              --税率" + Environment.NewLine;
                    sqlText += " SALE.TAXRATESTARTDATE2RF,    --税率開始日2" + Environment.NewLine;
                    sqlText += " SALE.TAXRATEENDDATE2RF,      --税率終了日2" + Environment.NewLine;
                    sqlText += " SALE.TAXRATE2RF,             --税率2" + Environment.NewLine;
                    sqlText += " SALE.TAXRATESTARTDATE3RF,    --税率開始日3" + Environment.NewLine;
                    sqlText += " SALE.TAXRATEENDDATE3RF,      --税率終了日3" + Environment.NewLine;
                    sqlText += " SALE.TAXRATE3RF              --税率3" + Environment.NewLine;
                    sqlText += ") AS ACCREC" + Environment.NewLine;
                    #endregion

                    sqlCommand.CommandText = sqlText;

                    #region Prameterオブジェクトの作成
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCodeChild = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaClaimCodeChild = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
                    //SqlParameter findParaAddUpSecCodeChild = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDateChild = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaLastCAddUpUpdDateChild = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
                    #endregion

                    #region Parameterオブジェクトへ値設定
                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCodeChild.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                    findParaClaimCodeChild.Value = SqlDataMediator.SqlSetInt32(custAccRecWork.ClaimCode);
                    //findParaAddUpSecCodeChild.Value = SqlDataMediator.SqlSetString(custDmdPrcWork.AddUpSecCode);
                    findParaAddUpDateChild.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.AddUpDate);
                    if (custAccRecWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        findParaLastCAddUpUpdDateChild.Value = 20000101;
                    else
                        findParaLastCAddUpUpdDateChild.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.LaMonCAddUpUpdDate);

                    #endregion

                    sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10

                    myReader = sqlCommand.ExecuteReader();

                    while (myReader.Read())
                    {
                        SetFlg = 0;
                        CustAccRecWork custAccRecChildWork = new CustAccRecWork();

                        #region 親・子レコードセット
                        custAccRecChildWork.FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF")); //端数処理区分
                        fractionProcUnit = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("FRACTIONPROCUNITRF")); // 端数処理単位
                        custAccRecChildWork.AddUpSecCode = custAccRecWork.AddUpSecCode;
                        custAccRecChildWork.ClaimCode = custAccRecWork.ClaimCode;
                        custAccRecChildWork.ClaimName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CLAIMNAMERF"));
                        custAccRecChildWork.ClaimName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CLAIMNAME2RF"));
                        custAccRecChildWork.ClaimSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CLAIMSNMRF"));                        
                        //custAccRecChildWork.ConsTaxLayMethod = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CONSTAXLAYMETHODRF"));　// 消費税転嫁方式(得意先マスタ)
                        custAccRecChildWork.ConsTaxLayMethod = custAccRecWork.ConsTaxLayMethod;　// 消費税転嫁方式(得意先マスタ)
                        custAccRecChildWork.ConsTaxRate = custAccRecWork.ConsTaxRate;                                                             // 税率(セット済　得意先マスタ)
                        custAccRecChildWork.FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF"));      // 端数処理区分(得意先マスタ)
                        custAccRecChildWork.CustomerCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CUSTOMERCODERF"));
                        custAccRecChildWork.CustomerName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CUSTOMERNAMERF"));
                        custAccRecChildWork.CustomerName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CUSTOMERNAME2RF"));
                        custAccRecChildWork.CustomerSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CUSTOMERSNMRF"));
                        custAccRecChildWork.AddUpDate = custAccRecWork.AddUpDate;           // 計上年月日(画面設定値)
                        custAccRecChildWork.AddUpYearMonth = custAccRecWork.AddUpYearMonth; // 計上年月(画面設定値の年月)
                        // 親・子レコードは未セット項目(※集計レコードのみセットする) >>>
                        custAccRecChildWork.LastTimeAccRec = 0;         // 前回売掛金額(0固定)
                        custAccRecChildWork.ThisTimeFeeDmdNrml = 0;     // 今回手数料金額(0固定)
                        custAccRecChildWork.ThisTimeDisDmdNrml = 0;     // 今回値引金額(0固定)
                        custAccRecChildWork.ThisTimeDmdNrml = 0;        // 今回入金金額(0固定)
                        custAccRecChildWork.ThisTimeTtlBlcAcc = 0;      // 今回繰越残高(0固定)
                        // 親・子レコードは未セット項目(※集計レコードのみセットする) <<<
                        // ■相殺
                        custAccRecChildWork.OfsThisTimeSales = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFSTHISTIMESALESRF"));    // 相殺後今回売上金額
                        custAccRecChildWork.ItdedOffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETOUTTAXRF"));  // 相殺後外税対象額
                        custAccRecChildWork.ItdedOffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETINTAXRF"));    // 相殺後内税対象額
                        custAccRecChildWork.ItdedOffsetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETTAXFREERF"));// 相殺後非課税対象額
                        custAccRecChildWork.OffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFFSETINTAXRF"));              // 相殺後売上内税額
                        // 修正 2009/04/17 >>>
                        #region DEL 2009/04/17
                        /*
                        //相殺後今回売上消費税額 / 相殺後売上外税額 >>>
                        // 消費税転嫁区分によってセット内容変動( クエリ内で処理しきれない為、セット時に計算 )
                        if ((custAccRecChildWork.ConsTaxLayMethod == 0) || (custAccRecChildWork.ConsTaxLayMethod == 1) || (custAccRecChildWork.ConsTaxLayMethod == 2) || (custAccRecChildWork.ConsTaxLayMethod == 3))
                        {
                            // 消費税転嫁区分 = 0:伝票 or 1:明細
                            // 相殺後売上外税額 = 今回売上外税額 + 今回売上返品外税額 + 今回売上値引外税額
                            //setTax = 0;                            
                            //FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("SALESOUTTAXRF")), fractionProcUnit, custAccRecChildWork.FractionProcCd, out setTax);
                            //custAccRecChildWork.OffsetOutTax = setTax;        // 今回売上外税額
                            //FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF")), fractionProcUnit, custAccRecChildWork.FractionProcCd, out setTax);
                            //custAccRecChildWork.OffsetOutTax += setTax;      // 今回売上返品外税額
                            //FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF")), fractionProcUnit, custAccRecChildWork.FractionProcCd, out setTax);
                            //custAccRecChildWork.OffsetOutTax += setTax;      // 今回売上値引外税額
                            custAccRecChildWork.OffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESOUTTAXRF"));// 今回売上外税額
                            custAccRecChildWork.OffsetOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"));      // 今回売上返品外税額
                            custAccRecChildWork.OffsetOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));      // 今回売上値引外税額
                            //// 相殺後今回売上消費税額 = 相殺後売上外税額 + 相殺後売上内税額
                            //custAccRecChildWork.OfsThisSalesTax = custAccRecChildWork.OffsetOutTax + custAccRecChildWork.OffsetInTax;      // 相殺後今回売上消費税額

                            //■■ 集計レコード計算用の処理 ■■
                            if ((custAccRecWork.ConsTaxLayMethod == 3))
                            {
                                // 消費税転嫁区分 = 3:請求子
                                // 子レコード集計(相殺後外税金額)　※子レコード集計時に算出
                                itdedOffsetOutTax += custAccRecChildWork.ItdedOffsetOutTax;
                                // 子レコード集計(相殺後外税額)
                                OffsetOutTax += custAccRecChildWork.OffsetOutTax;
                            }

                        }
                        //else if ((custAccRecChildWork.ConsTaxLayMethod == 2) || (custAccRecChildWork.ConsTaxLayMethod == 3))
                        //{
                        //    // 消費税転嫁区分 = 2:請求親 3:請求子
                        //    // 相殺後外税金対象額　× 税率
                        //    FracCalc((custAccRecChildWork.ItdedOffsetOutTax * custAccRecChildWork.ConsTaxRate), fractionProcUnit, custAccRecChildWork.FractionProcCd, out setTax);
                        //    custAccRecChildWork.OffsetOutTax = setTax;    // 相殺後売上外税額 

                        //    //// 相殺後今回売上消費税額 = 相殺後売上外税額 + 相殺後売上内税額
                        //    //custAccRecChildWork.OfsThisSalesTax = custAccRecChildWork.OffsetOutTax + custAccRecChildWork.OffsetInTax;      // 相殺後今回売上消費税額

                        //    //■■ 集計レコード計算用の処理 ■■
                        //    if ((custAccRecWork.ConsTaxLayMethod == 3))
                        //    {
                        //        // 消費税転嫁区分 = 3:請求子
                        //        // 子レコード集計(相殺後外税金額)　※子レコード集計時に算出
                        //        itdedOffsetOutTax += custAccRecChildWork.ItdedOffsetOutTax;
                        //        // 子レコード集計(相殺後外税額)
                        //        OffsetOutTax += custAccRecChildWork.OffsetOutTax;
                        //    }
                        //}
                        else // 消費税転嫁区分 = 9:非課税 OR 消費税転嫁区分 = 0,1,2,3,9以外
                        {
                            custAccRecChildWork.OfsThisSalesTax = 0; // 相殺後売上外税額                            
                            custAccRecChildWork.OfsThisSalesTax = 0; // 相殺後今回売上消費税額
                        }
                        //相殺後売上外税額 <<<
                        
                        custAccRecChildWork.OfsThisSalesTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESOUTTAXRF"));          // 今回売上外税額
                        custAccRecChildWork.OfsThisSalesTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"));      // 今回売上返品外税額
                        custAccRecChildWork.OfsThisSalesTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));      // 今回売上値引外税額

                        */
                        #endregion
                        // 相殺後外税消費税 = 売上外税消費税 + 返品外税消費税 + 値引外税消費税 ※各種転嫁方式別に計算し合算する
                        #region custAccRecChildWork.OffsetOutTax [相殺後外税消費税]
                        // ①伝票転嫁 + 明細転嫁
                        custAccRecChildWork.OffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESOUTTAXRF"))+ SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"))+
                                                           + SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                        // ②請求転嫁(親) ※参考消費税
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("SALESOUTTAXRF_S")) + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S")) +
                                 SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S")), fractionProcUnit, custAccRecWork.FractionProcCd, out setTax);
                        custAccRecChildWork.OffsetOutTax += setTax;

                        // ③請求転嫁(子)
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("SALESOUTTAXRF_S2")) + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S2")) +
                                 SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S2")), fractionProcUnit, custAccRecWork.FractionProcCd, out setTax);
                        custAccRecChildWork.OffsetOutTax += setTax;
                        OffsetOutTax += setTax;// 相殺後売上外税額(請求転嫁(子))　※集計レコード計算用
                        #endregion
                        custAccRecChildWork.OfsThisSalesTax = custAccRecChildWork.OffsetInTax + custAccRecChildWork.OffsetOutTax;                   // 相殺後消費税額
                        // 修正 2009/04/17 <<<

                        // ■売上
                        custAccRecChildWork.ThisTimeSales = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISTIMESALESRF"));         // 今回売上金額
                        custAccRecChildWork.ItdedSalesOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDSALESOUTTAXRF"));   // 今回売上外税対象額
                        custAccRecChildWork.ItdedSalesInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDSALESINTAXRF"));     // 今回売上内税対象額
                        custAccRecChildWork.ItdedSalesTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDSALESTAXFREERF")); // 今回売上非課税対象額 
                        custAccRecChildWork.SalesInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESINTAXRF"));               // 今回売上内税額
                        #region custAccRecChildWork.SalesOutTax [今回売上外税消費税]
                        // 今回売上外税消費税 (各種転嫁方式別に計算を行い合算する)
                        // 伝票転嫁と明細転嫁
                        custAccRecChildWork.SalesOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESOUTTAXRF"));             // 今回売上外税額
                        // 請求(親)転嫁 ※参考消費税
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("SALESOUTTAXRF_S")), fractionProcUnit, custAccRecWork.FractionProcCd, out setTax);
                        custAccRecChildWork.SalesOutTax += setTax;
                        // 請求(子)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("SALESOUTTAXRF_S2")), fractionProcUnit, custAccRecWork.FractionProcCd, out setTax);
                        custAccRecChildWork.SalesOutTax += setTax;
                        SalesOutTax += setTax; // 売上外税消費税(請求(子)転嫁)　※集計レコード計算用
                        #endregion
                        custAccRecChildWork.ThisSalesTax = custAccRecChildWork.SalesInTax + custAccRecChildWork.SalesOutTax;// 今回売上消費税額

                        // ■返品
                        custAccRecChildWork.ThisSalesPricRgds = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSALESPRICRGDSRF"));    // 今回返品金額
                        custAccRecChildWork.TtlItdedRetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETOUTTAXRF"));    // 今回返品外税対象額
                        custAccRecChildWork.TtlItdedRetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETINTAXRF"));      // 今回返品内税対象額
                        custAccRecChildWork.TtlItdedRetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETTAXFREERF"));  // 今回返品非課税対象額
                        custAccRecChildWork.TtlRetInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETINNERTAXRF"));          // 今回返品内税額
                        #region custAccRecChildWork.TtlRetOuterTax [今回返品外税額]
                        // 今回返品外税消費税 (各種転嫁方式別に計算を行い合算する)
                        // 伝票転嫁と明細転嫁
                        custAccRecChildWork.TtlRetOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"));
                        // 請求(親)転嫁 ※参考消費税
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S")), fractionProcUnit, custAccRecWork.FractionProcCd, out setTax);
                        custAccRecChildWork.TtlRetOuterTax += setTax;
                        // 請求(子)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S2")), fractionProcUnit, custAccRecWork.FractionProcCd, out setTax);
                        custAccRecChildWork.TtlRetOuterTax += setTax;
                        RetSalesOutTax += setTax; // 返品外税消費税(請求(子)転嫁)　※集計レコード計算用
                        #endregion
                        custAccRecChildWork.ThisSalesPrcTaxRgds = custAccRecChildWork.TtlRetInnerTax + custAccRecChildWork.TtlRetOuterTax;            // 今回返品消費税額

                        // ■値引
                        custAccRecChildWork.ThisSalesPricDis = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSALESPRICDISRF"));      // 今回値引金額
                        custAccRecChildWork.TtlItdedDisOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISOUTTAXRF"));    // 今回値引外税対象金額
                        custAccRecChildWork.TtlItdedDisInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISINTAXRF"));      // 今回値引内税対象金額
                        custAccRecChildWork.TtlItdedDisTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISTAXFREERF"));  // 今回値引非課税対象金額
                        custAccRecChildWork.TtlDisInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISINNERTAXRF"));          // 今回値引内税額
                        #region custAccRecChildWork.TtlDisOuterTax [今回値引外税額]
                        // 今回値引外税消費税
                        // 伝票転嫁と明細転嫁
                        custAccRecChildWork.TtlDisOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                        // 請求(親)転嫁 ※参考消費税
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S")), fractionProcUnit, custAccRecWork.FractionProcCd, out setTax);
                        custAccRecChildWork.TtlDisOuterTax += setTax;
                        // 請求(子)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S2")), fractionProcUnit, custAccRecWork.FractionProcCd, out setTax);
                        custAccRecChildWork.TtlDisOuterTax += setTax;
                        DisSalesOutTax += setTax; // 値引外税消費税(請求(子)転嫁)　※集計レコード計算用
                        #endregion
                        custAccRecChildWork.ThisSalesPrcTaxDis = custAccRecChildWork.TtlDisInnerTax + custAccRecChildWork.TtlDisOuterTax;  // 今回値引消費税額

                        custAccRecChildWork.TaxAdjust = 0;            // 消費税調整額  (0固定)
                        custAccRecChildWork.BalanceAdjust = 0;        // 残高調整額　  (0固定)
                        custAccRecChildWork.AfCalTMonthAccRec = 0;    // 計算後売掛金額(0固定)
                        custAccRecChildWork.AcpOdrTtl2TmBfAccRec = 0; // 受注2回前残高(売掛計) (0固定)
                        custAccRecChildWork.AcpOdrTtl3TmBfAccRec = 0; // 受注3回前残高(売掛計) (0固定)
                        custAccRecChildWork.MonthAddUpExpDate = custAccRecWork.MonthAddUpExpDate;    // 月次更新実行年月日(セット済み ※前回履歴から)
                        custAccRecChildWork.StMonCAddUpUpdDate = custAccRecWork.StMonCAddUpUpdDate;  // 月次更新開始年月日(セット済み ※前回履歴から) 
                        custAccRecChildWork.LaMonCAddUpUpdDate = custAccRecWork.LaMonCAddUpUpdDate;  // 前回締次更新年月日(セット済み ※前回履歴から)
                        custAccRecChildWork.SalesSlipCount = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SALESSLIPCOUNTRF")); // 売上伝票枚数
                        #endregion

                        // ADD 2009/06/18 >>>
                        // 締次集計処理と同様に請求拠点、請求先、得意先、実績計上拠点別に消費税集計するが
                        // 売掛のテーブルレイアウト上、実績計上拠点が存在しないため、KEY項目で金額の合算を行う。
                        if (custAccRecChildWorkList.Count > 0)
                        {
                            for (int i = 0; i < custAccRecChildWorkList.Count; i++)
                            {
                                if (
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).EnterpriseCode == custAccRecChildWork.EnterpriseCode &&
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).AddUpSecCode == custAccRecChildWork.AddUpSecCode &&
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).ClaimCode == custAccRecChildWork.ClaimCode &&
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).CustomerCode == custAccRecChildWork.CustomerCode &&
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).AddUpDate == custAccRecChildWork.AddUpDate
                                  )
                                {
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).OfsThisTimeSales += custAccRecChildWork.OfsThisTimeSales;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).OfsThisSalesTax += custAccRecChildWork.OfsThisSalesTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).ItdedOffsetOutTax += custAccRecChildWork.ItdedOffsetOutTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).ItdedOffsetInTax += custAccRecChildWork.ItdedOffsetInTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).ItdedOffsetTaxFree += custAccRecChildWork.ItdedOffsetTaxFree;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).OffsetOutTax += custAccRecChildWork.OffsetOutTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).OffsetInTax += custAccRecChildWork.OffsetInTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).ThisTimeSales += custAccRecChildWork.ThisTimeSales;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).ThisSalesTax += custAccRecChildWork.ThisSalesTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).ItdedSalesOutTax += custAccRecChildWork.ItdedSalesOutTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).ItdedSalesInTax += custAccRecChildWork.ItdedSalesInTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).ItdedSalesTaxFree += custAccRecChildWork.ItdedSalesTaxFree;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).SalesOutTax += custAccRecChildWork.SalesOutTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).SalesInTax += custAccRecChildWork.SalesInTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).ThisSalesPricRgds += custAccRecChildWork.ThisSalesPricRgds;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).ThisSalesPrcTaxRgds += custAccRecChildWork.ThisSalesPrcTaxRgds;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).TtlItdedRetOutTax += custAccRecChildWork.TtlItdedRetOutTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).TtlItdedRetInTax += custAccRecChildWork.TtlItdedRetInTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).TtlItdedRetTaxFree += custAccRecChildWork.TtlItdedRetTaxFree;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).TtlRetOuterTax += custAccRecChildWork.TtlRetOuterTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).TtlRetInnerTax += custAccRecChildWork.TtlRetInnerTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).ThisSalesPricDis += custAccRecChildWork.ThisSalesPricDis;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).ThisSalesPrcTaxDis += custAccRecChildWork.ThisSalesPrcTaxDis;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).TtlItdedDisOutTax += custAccRecChildWork.TtlItdedDisOutTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).TtlItdedDisInTax += custAccRecChildWork.TtlItdedDisInTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).TtlItdedDisTaxFree += custAccRecChildWork.TtlItdedDisTaxFree;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).TtlDisOuterTax += custAccRecChildWork.TtlDisOuterTax;
                                    ((CustAccRecWork)custAccRecChildWorkList[i]).TtlDisInnerTax += custAccRecChildWork.TtlDisInnerTax;

                                    ((CustAccRecWork)custAccRecChildWorkList[i]).SalesSlipCount += custAccRecChildWork.SalesSlipCount;  // ADD 2009/10/23
                                    SetFlg = 1;
                                }
                            }
                        }
                        // ADD 2009/06/18 <<<
                        if (SetFlg == 0)
                        {
                            custAccRecChildWorkList.Add(custAccRecChildWork);
                            ChildCnt += 1;
                        }
                    }

                    #endregion
                    
                    #region ■■ 集計レコード計算用の処理 ■■
                    if (ChildCnt != 0)
                    {
                        // 修正 2009/04/17 >>>
                        #region DEL 2009/04/17
                        //if ((custAccRecWork.ConsTaxLayMethod == 3))// 消費税転嫁区分 = 3:請求子
                        //{
                        //    ////相殺後外税消費税 = 子レコード集計(相殺後外税金額)×税率
                        //    //FracCalc((itdedOffsetOutTax * custAccRecWork.ConsTaxRate), fractionProcUnit, custAccRecWork.FractionProcCd, out setTax);
                        //    //custAccRecWork.OffsetOutTax = setTax;
                        //    // 相殺後外税消費税 = 子レコード集計(相殺後外税消費税)
                        //    custAccRecWork.OffsetOutTax = OffsetOutTax;
                        //    ////相殺後今回売上消費税 = 相殺後外税消費税 + 相殺後内税消費税
                        //    //custAccRecWork.OfsThisSalesTax = custAccRecWork.OffsetOutTax + custAccRecWork.OffsetInTax;
                        //    // 計算後売掛金額 = 今回繰越残高 + (相殺後今回売上金額 + 相殺後今回売上消費税)
                        //    custAccRecWork.AfCalTMonthAccRec = custAccRecWork.ThisTimeTtlBlcAcc + (custAccRecWork.OfsThisTimeSales + custAccRecWork.OfsThisSalesTax);// 計算後売掛金額
                        //}
                        #endregion

                        // 今回売上外税消費税
                        custAccRecWork.SalesOutTax += SalesOutTax;
                        // 今回売上消費税額
                        custAccRecWork.ThisSalesTax = custAccRecWork.SalesInTax + custAccRecWork.SalesOutTax;

                        // 今回返品外税消費税
                        custAccRecWork.TtlRetOuterTax += RetSalesOutTax;
                        // 今回返品消費税額
                        custAccRecWork.ThisSalesPrcTaxRgds = custAccRecWork.TtlRetInnerTax + custAccRecWork.TtlRetOuterTax;

                        // 今回値引外税消費税
                        custAccRecWork.TtlDisOuterTax += DisSalesOutTax;
                        // 今回売上値引消費税額
                        custAccRecWork.ThisSalesPrcTaxDis = custAccRecWork.TtlDisInnerTax + custAccRecWork.TtlDisInnerTax;

                        // 相殺後外税消費税 = 子レコード集計(相殺後外税消費税)
                        custAccRecWork.OffsetOutTax += OffsetOutTax;

                        if (totalAfterDay == 0) // 当月消費税計算を行わない場合の処理
                        {
                            //相殺後今回売上消費税 = 相殺後外税消費税 + 相殺後内税消費税
                            custAccRecWork.OfsThisSalesTax = custAccRecWork.OffsetOutTax + custAccRecWork.OffsetInTax;
                        }

                        // 計算後売掛金額 = 今回繰越残高 + (相殺後今回売上金額 + 相殺後今回売上消費税)
                        custAccRecWork.AfCalTMonthAccRec = custAccRecWork.ThisTimeTtlBlcAcc + (custAccRecWork.OfsThisTimeSales + custAccRecWork.OfsThisSalesTax);// 計算後売掛金額

                        // 修正 2009/04/17 <<<
                    }
                    #endregion                    

                    #region ■■ 当月実績無しの場合の処理 ■■
                    // 実績無しの場合でも、親レコードは作成する。
                    if (ChildCnt == 0)
                    {
                        // ■親レコード
                        custAccRecChildWorkList.Add(custAccRecWork);

                        // ■集計レコード( 不足項目セット )
                        // 今回繰越残高
                        custAccRecWork.ThisTimeTtlBlcAcc = (custAccRecWork.LastTimeAccRec) - custAccRecWork.ThisTimeDmdNrml;
                        // 計算後請求金額
                        custAccRecWork.AfCalTMonthAccRec = custAccRecWork.ThisTimeTtlBlcAcc + (custAccRecWork.OfsThisTimeSales + custAccRecWork.OfsThisSalesTax);
                    }
                    #endregion

                    #region ■■ 親子レコードの当月消費税算出処理 ■■
                    /*
                    if (ChildCnt != 0 && totalAfterDay!=0)
                    {
                        if (!myReader.IsClosed) myReader.Close();
                        sqlCommand.Parameters.Clear();
                        sqlCommand.CommandText = string.Empty;
                        long AfterSales = 0;      // 締後売上
                        long AfterTax = 0;        // 締後消費税
                        int ProcCd = 0;  // 消費税端数処理区分
                        Double ProcUnit = 0;// 消費税端数処理単位
                        int St = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

                        for (int i = 0; i < custAccRecChildWorkList.Count; i++)
                        {
                            CustAccRecWork paracustAccRecChildWork = new CustAccRecWork();
                            paracustAccRecChildWork = custAccRecChildWorkList[i] as CustAccRecWork;

                            if (paracustAccRecChildWork.ClaimCode != custAccRecWork.ClaimCode)
                            {
                                continue;
                            }

                            #region ■当月消費税算出用処理(締後入金・締後売上算出)
                            sqlCommand.Parameters.Clear();
                            sqlCommand.CommandText = string.Empty;
                            AfterSales = 0;// 締後売上
                            AfterTax = 0;  // 締後消費税
                            ProcCd = 0;    // 消費税端数処理区分
                            ProcUnit = 0;  // 消費税端数処理単位
                            totalAfterDepo = 0;
                            afCalDemandPrice = 0;

                            // 締日算出
                            //para.EnterpriseCode = custAccRecWork.EnterpriseCode;
                            //para.CustomerCode = paracustAccRecChildWork.ClaimCode;
                            //St = ttlDayCalcDB.SearchPrcDmdC(out retList, para, ref sqlConnection);


                            if (St == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                            {
                                #region 請求額 取得 ※親子レコードでは取得無
                                
                                sqlText = string.Empty;
                                sqlText += "SELECT" + Environment.NewLine;
                                sqlText += "  AFCALDEMANDPRICERF," + Environment.NewLine;
                                sqlText += "  ADDUPDATERF" + Environment.NewLine;
                                sqlText += " FROM CUSTDMDPRCRF" + Environment.NewLine;
                                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                                sqlText += "    AND CLAIMCODERF=@FINDCLAIMCODE" + Environment.NewLine;
                                sqlText += "    AND CUSTOMERCODERF=0" + Environment.NewLine;
                                sqlText += "    AND ADDUPDATERF>@FINDADDUPDATEST" + Environment.NewLine;
                                sqlText += "    AND ADDUPDATERF<=@FINDADDUPDATEED" + Environment.NewLine;

                                try
                                {
                                    sqlCommand.CommandText = sqlText;
                                    
                                    //Prameterオブジェクトの作成
                                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                                    SqlParameter findParaClaimCode = sqlCommand.Parameters.Add("@FINDCLAIMCODE", SqlDbType.Int);
                                    SqlParameter findParaAddUpDateSt = sqlCommand.Parameters.Add("@FINDADDUPDATEST", SqlDbType.Int);
                                    SqlParameter findParaAddUpDateEd = sqlCommand.Parameters.Add("@FINDADDUPDATEED", SqlDbType.Int);

                                    //Parameterオブジェクトへ値設定
                                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                                    findParaClaimCode.Value = SqlDataMediator.SqlSetInt32(paracustAccRecChildWork.CustomerCode);
                                    findParaAddUpDateSt.Value = SqlDataMediator.SqlSetInt32(TDateTime.DateTimeToLongDate(custAccRecWork.LaMonCAddUpUpdDate));
                                    findParaAddUpDateEd.Value = SqlDataMediator.SqlSetInt32(TDateTime.DateTimeToLongDate(custAccRecWork.AddUpDate));

                                    myReader = sqlCommand.ExecuteReader();

                                    if (myReader.Read())
                                    {
                                        afCalDemandPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("AFCALDEMANDPRICERF"));
                                    }
                                }
                                finally
                                {
                                    myReader.Dispose();
                                }
                                
                                #endregion

                                #region 締後入金 取得 ※親子レコードは取得無                                                                
                                // 締後入金     
                                sqlCommand.Parameters.Clear();
                                sqlCommand.CommandText = string.Empty;
                                sqlText = string.Empty;
                                sqlText += "SELECT *" + Environment.NewLine;
                                sqlText += " FROM DEPSITMAINRF WITH" + Environment.NewLine;
                                sqlText += "    (READUNCOMMITTED" + Environment.NewLine;
                                sqlText += "    )" + Environment.NewLine;
                                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                                sqlText += "    AND CLAIMCODERF=@FINDCLAIMCODE" + Environment.NewLine;
                                sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                                sqlText += "    AND" + Environment.NewLine;
                                sqlText += "    (ADDUPADATERF<=@FINDADDUPDATE" + Environment.NewLine;
                                sqlText += "        AND ADDUPADATERF>=@FINDLASTTIMEADDUPDATE" + Environment.NewLine;  
                                sqlText += "    )" + Environment.NewLine;
                                sqlText += " ORDER BY CUSTOMERCODERF" + Environment.NewLine;
                                try
                                {
                                    sqlCommand.CommandText = sqlText;
                                    //Prameterオブジェクトの作成
                                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                                    SqlParameter findParaClaimCode = sqlCommand.Parameters.Add("@FINDCLAIMCODE", SqlDbType.Int);
                                    SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                                    SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);

                                    //Parameterオブジェクトへ値設定
                                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                                    findParaClaimCode.Value = SqlDataMediator.SqlSetInt32(paracustAccRecChildWork.CustomerCode);
                                    findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.AddUpSecCode);
                                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.AddUpDate);
                                    findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetInt32(totalAfterDay);

                                    myReader = sqlCommand.ExecuteReader();

                                    while (myReader.Read())
                                    {
                                        totalAfterDepo += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("DEPOSITTOTALRF"));
                                    }
                                    
                                }
                                finally
                                {
                                    myReader.Dispose();
                                }
                                #endregion

                                #region 締後売上
                                sqlCommand.Parameters.Clear();
                                sqlCommand.CommandText = string.Empty;

                                #region SELECT文作成
                                sqlText = string.Empty;
                                sqlText += "SELECT" + Environment.NewLine;
                                sqlText += " SALE.CUSTOMERCODERF," + Environment.NewLine;
                                sqlText += " SALE.SALESNETPRICERF," + Environment.NewLine;
                                sqlText += " SALESPROC.FRACTIONPROCCDRF," + Environment.NewLine;
                                sqlText += " SALESPROC.FRACTIONPROCUNITRF" + Environment.NewLine;
                                sqlText += "FROM" + Environment.NewLine;
                                sqlText += "(" + Environment.NewLine;
                                sqlText += " SELECT" + Environment.NewLine;
                                sqlText += "  ENTERPRISECODERF," + Environment.NewLine;
                                sqlText += "  CUSTOMERCODERF," + Environment.NewLine;
                                sqlText += "  SUM(SALESNETPRICERF + SALESDISTTLTAXEXCRF ) AS SALESNETPRICERF" + Environment.NewLine;
                                sqlText += " FROM" + Environment.NewLine;
                                sqlText += "  SALESSLIPRF WITH(READUNCOMMITTED)" + Environment.NewLine;
                                sqlText += " WHERE" + Environment.NewLine;
                                sqlText += "  ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                                sqlText += "  AND LOGICALDELETECODERF=0" + Environment.NewLine;
                                sqlText += "  AND DEBITNOTEDIVRF=0" + Environment.NewLine;
                                sqlText += "  AND ACPTANODRSTATUSRF=30" + Environment.NewLine;
                                sqlText += "  AND (SALESSLIPCDRF = 0 OR SALESSLIPCDRF = 1)" + Environment.NewLine;
                                sqlText += "  AND CUSTOMERCODERF=@FINDCUSTOMERCODE" + Environment.NewLine;
                                sqlText += "  AND (ADDUPADATERF<=@FINDADDUPDATE AND ADDUPADATERF>=@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
                                sqlText += " GROUP BY" + Environment.NewLine;
                                sqlText += "  ENTERPRISECODERF," + Environment.NewLine;
                                sqlText += "  CUSTOMERCODERF" + Environment.NewLine;
                                sqlText += ") AS SALE " + Environment.NewLine;
                                sqlText += "INNER JOIN CUSTOMERRF AS CUST WITH(READUNCOMMITTED)" + Environment.NewLine;
                                sqlText += " ON SALE.ENTERPRISECODERF = CUST.ENTERPRISECODERF" + Environment.NewLine;
                                sqlText += " AND SALE.CUSTOMERCODERF = CUST.CUSTOMERCODERF" + Environment.NewLine;
                                sqlText += "LEFT JOIN SALESPROCMONEYRF AS SALESPROC WITH(READUNCOMMITTED)" + Environment.NewLine;
                                sqlText += " ON  CUST.ENTERPRISECODERF=SALESPROC.ENTERPRISECODERF" + Environment.NewLine;
                                sqlText += " AND SALESPROC.FRACPROCMONEYDIVRF=1" + Environment.NewLine;
                                sqlText += " AND CUST.SALESCNSTAXFRCPROCCDRF=SALESPROC.FRACTIONPROCCODERF" + Environment.NewLine;
                                #endregion

                                sqlCommand.CommandText = sqlText;

                                try
                                {
                                    #region Prameterオブジェクトの作成
                                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                                    SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
                                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                                    SqlParameter findParaLastCAddUpUpdDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
                                    #endregion

                                    #region Parameterオブジェクトへ値設定
                                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(custAccRecWork.EnterpriseCode);
                                    findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(paracustAccRecChildWork.CustomerCode);
                                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(custAccRecWork.AddUpDate);
                                    findParaLastCAddUpUpdDate.Value = SqlDataMediator.SqlSetInt32(totalAfterDay);
                                    
                                    #endregion

                                    myReader = sqlCommand.ExecuteReader();

                                    while (myReader.Read())
                                    {
                                        AfterSales += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESNETPRICERF"));
                                        ProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF"));  // 消費税端数処理区分
                                        ProcUnit = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("FRACTIONPROCUNITRF"));// 消費税端数処理単位
                                    }
                                }

                                finally
                                {
                                    myReader.Dispose();
                                }
                                #endregion

                                if (AfterSales != 0)
                                {
                                    // 締後消費税計算
                                    FracCalc((AfterSales * paracustAccRecChildWork.ConsTaxRate), ProcUnit, ProcCd, out AfterTax);
                                }
                                    //相殺後今回売上消費税 = (締後売上 + 締後消費税) - (当月売上) 
                                ((CustAccRecWork)custAccRecChildWorkList[i]).OfsThisSalesTax = Convert.ToInt64(( AfterSales + AfterTax)) - Convert.ToInt64((paracustAccRecChildWork.OfsThisTimeSales));
                                

                            }
                            #endregion
                        }

                    }
                    */
                    #endregion
                }
                // 修正 2008.12.22 <<<

            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        #endregion
       
        #region [支払伝票マスタ]
        /// <summary>
        /// 仕入先買掛金額ワーク用Listから支払伝票マスタを取得します
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新List</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先買掛金額ワーク用Listから支払伝票マスタを取得します</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// </remarks>
        private int GetPaymentSlp(ref SuplAccPayWork suplAccPayWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            SqlDataReader myReader = null;

            //支払伝票マスタ
            PaymentSlpWork paymentSlpWork = null;

            try
            {

                using (SqlCommand sqlCommand = new SqlCommand("SELECT * FROM PAYMENTSLPRF WITH (READUNCOMMITTED) WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND PAYEECODERF=@FINDPAYEECODE AND ADDUPSECCODERF=@FINDADDUPSECCODE AND (ADDUPADATERF<=@FINDADDUPDATE AND ADDUPADATERF>@FINDLASTTIMEADDUPDATE)  AND LOGICALDELETECODERF=0", sqlConnection))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDPAYEECODE", SqlDbType.Int);
                    SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                    findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
                    findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                    if (suplAccPayWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        findParaLastTimeAddUpDate.Value = 20000101;
                    else
                        findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.LaMonCAddUpUpdDate);

                    myReader = sqlCommand.ExecuteReader();
                    while (myReader.Read())
                    {
                        paymentSlpWork = new PaymentSlpWork();

                        //ここから
                        paymentSlpWork = CopyToPaymentSlpWorkFromReader(ref myReader);

                        //仕入先買掛金額マスタ更新パラメータ作成
                        // --- ADD 2008.09.17 ---------->>>>>
                        //今回支払金額（通常支払）
                        suplAccPayWork.ThisTimePayNrml += paymentSlpWork.PaymentTotal;
                        //今回手数料額（通常支払）
                        suplAccPayWork.ThisTimeFeePayNrml += paymentSlpWork.FeePayment;
                        //今回値引金額（通常支払）
                        suplAccPayWork.ThisTimeDisPayNrml += paymentSlpWork.DiscountPayment;
                        // --- ADD 2008.09.17 ----------<<<<<

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                }

            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }

        // ↓ 2007.11.07 980081 a
        /// <summary>
        /// 仕入先買掛金額ワーク用Listから支払伝票マスタを取得します
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新List</param>
        /// <param name="suplAccPayChildWorkList">仕入先買掛金額マスタ更新List(子レコード用)</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先買掛金額ワーク用Listから支払伝票マスタを取得します</br>
        /// <br>Programmer : 980081  山田 明友</br>
        /// <br>Date       : 2007.11.07</br>
        /// </remarks>
        private int GetPaymentSlp(ref SuplAccPayWork suplAccPayWork, ref ArrayList suplAccPayChildWorkList, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            SqlDataReader myReader = null;
            String sqlText = string.Empty; // ADD 2008.12.22

            // 修正 2008.12.22 >>>
            try
            {

                #region SELECT文作成
                sqlText = string.Empty;
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "PAYEECODERF," + Environment.NewLine;
                sqlText += "SUM(PAYMENTTOTALRF) AS PAYMENTTOTALRF," + Environment.NewLine;
                sqlText += "SUM(FEEPAYMENTRF) AS FEEPAYMENTRF," + Environment.NewLine;
                sqlText += "SUM(DISCOUNTPAYMENTRF) AS DISCOUNTPAYMENTRF" + Environment.NewLine;
                sqlText += "FROM" + Environment.NewLine;
                sqlText += "PAYMENTSLPRF WITH (READUNCOMMITTED) " + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "    AND PAYEECODERF=@FINDSUPPLIERCD" + Environment.NewLine;
                //sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;  // DEL 2010/10/06
                sqlText += "    AND ( ADDUPADATERF<=@FINDADDUPDATE AND ADDUPADATERF>@FINDLASTTIMEADDUPDATE )" + Environment.NewLine;
                sqlText += "    AND  LOGICALDELETECODERF=0 " + Environment.NewLine;
                sqlText += "GROUP BY " + Environment.NewLine;
                sqlText += "ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "PAYEECODERF" + Environment.NewLine;
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                {
                    #region Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDSUPPLIERCD", SqlDbType.Int);
                    //SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);  // DEL 2010/10/06
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
                    #endregion

                    #region Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                    findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
                    //findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);  // DEL 2010/10/06
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                    if (suplAccPayWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        findParaLastTimeAddUpDate.Value = 20000101;
                    else
                        findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.LaMonCAddUpUpdDate);
                    #endregion

                    sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10

                    myReader = sqlCommand.ExecuteReader();

                    while (myReader.Read())
                    {
                        suplAccPayWork.ThisTimePayNrml = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("PAYMENTTOTALRF"));      // 今回支払金額
                        suplAccPayWork.ThisTimeFeePayNrml = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("FEEPAYMENTRF"));     // 今回手数料金額
                        suplAccPayWork.ThisTimeDisPayNrml = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("DISCOUNTPAYMENTRF"));// 今回値引金額 
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }
            // 修正 2008.12.22 <<<

            return status;
        }
        // ↑ 2007.11.07 980081 a

        // --- ADD 2012/09/13 ----------->>>>>
        /// <summary>
        /// 仕入先買掛金額ワーク用Listから支払伝票マスタを取得します
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新List</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先買掛金額ワーク用Listから仕入総括形式で支払伝票マスタを取得します</br>
        /// <br>Programmer : FSI佐々木　貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int GetPaymentSlpBySecCode(ref SuplAccPayWork suplAccPayWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            SqlDataReader myReader = null;
            String sqlText = string.Empty;

            try
            {

                #region SELECT文作成
                sqlText = string.Empty;
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "PAYEECODERF," + Environment.NewLine;
                sqlText += "ADDUPSECCODERF," + Environment.NewLine;
                sqlText += "SUM(PAYMENTTOTALRF) AS PAYMENTTOTALRF," + Environment.NewLine;
                sqlText += "SUM(FEEPAYMENTRF) AS FEEPAYMENTRF," + Environment.NewLine;
                sqlText += "SUM(DISCOUNTPAYMENTRF) AS DISCOUNTPAYMENTRF" + Environment.NewLine;
                sqlText += "FROM" + Environment.NewLine;
                sqlText += "PAYMENTSLPRF WITH (READUNCOMMITTED) " + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "    AND PAYEECODERF=@FINDSUPPLIERCD" + Environment.NewLine;
                sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                sqlText += "    AND ( ADDUPADATERF<=@FINDADDUPDATE AND ADDUPADATERF>@FINDLASTTIMEADDUPDATE )" + Environment.NewLine;
                sqlText += "    AND  LOGICALDELETECODERF=0 " + Environment.NewLine;
                sqlText += "GROUP BY " + Environment.NewLine;
                sqlText += "ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "PAYEECODERF" + Environment.NewLine;
                sqlText += ",ADDUPSECCODERF" + Environment.NewLine;
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                {
                    #region Prameterオブジェクトの作成と値の設定
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDSUPPLIERCD", SqlDbType.Int);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);

                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                    findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                    if (suplAccPayWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        findParaLastTimeAddUpDate.Value = 20000101;
                    else
                        findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.LaMonCAddUpUpdDate);
                    findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);
                    #endregion

                    sqlCommand.CommandTimeout = TimeOut;

                    myReader = sqlCommand.ExecuteReader();

                    while (myReader.Read())
                    {
                        suplAccPayWork.ThisTimePayNrml = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("PAYMENTTOTALRF"));      // 今回支払金額
                        suplAccPayWork.ThisTimeFeePayNrml = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("FEEPAYMENTRF"));     // 今回手数料金額
                        suplAccPayWork.ThisTimeDisPayNrml = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("DISCOUNTPAYMENTRF"));// 今回値引金額 
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        // --- ADD 2012/09/13 -----------<<<<<
        #endregion

        #region [仕入データ]
        // ↓ 2007.11.07 980081 a
        /// <summary>
        /// 仕入先買掛金額ワーク用Listから仕入データを取得します
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新List</param>
        /// <param name="suplAccPayChildWorkList">仕入先買掛金額マスタ更新List(子レコード用)</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先買掛金額ワーク用Listから仕入データを取得します</br>
        /// <br>Programmer : 980081  山田 明友</br>
        /// <br>Date       : 2007.11.07</br>
        /// </remarks>
        private int GetStockSlip(ref SuplAccPayWork suplAccPayWork, ref ArrayList suplAccPayChildWorkList, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            SqlDataReader myReader = null;

            // 支払金額、締後仕入、締後支払、締後消費税の算出変数
            Int64 stockTotalPayBalance = 0;
            Int64 totalAfterStock = 0;
            // 修正 2009/04/17 >>>
            //Int64 totalAfterStockOutTax = 0;
            //Int64 ttltotalAfterStockOutTax = 0;
            //ArrayList ttltotalAfterStockOutTaxList = new ArrayList();
            Int64 totalAfterStockOutTax = 0;
            Double totalAfterStockOutTax_S = 0;
            ArrayList totalAfterStockOutTaxList = new ArrayList();
            // 修正 2009/04/17 <<<

            Int64 totalAfterPayment = 0;
            int totalAfterDay = 0;
            TtlDayCalcDB ttlDayCalcDB = new TtlDayCalcDB();

            #region ■当月消費税算出処理 締後仕入/支払集計
            // 締日算出
            //para.EnterpriseCode = suplAccPayWork.EnterpriseCode;
            //para.SupplierCd = suplAccPayWork.SupplierCd;
            //status = ttlDayCalcDB.SearchPrcPayment(out retList, para, ref sqlConnection);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                #region 残高取得
                string sqlText = string.Empty;
                //sqlText += "SELECT" + Environment.NewLine;
                //sqlText += "     STOCKTOTALPAYBALANCERF" + Environment.NewLine;
                //sqlText += " FROM SUPLIERPAYRF" + Environment.NewLine;
                //sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                //sqlText += "    AND PAYEECODERF=@FINDPAYEECODE" + Environment.NewLine;
                //sqlText += "    AND SUPPLIERCDRF=0" + Environment.NewLine;
                //sqlText += "    AND ADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;

                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  STOCKTOTALPAYBALANCERF," + Environment.NewLine;
                sqlText += "  ADDUPDATERF" + Environment.NewLine;
                // -- UPD 2011/03/15 ---------------------------->>>
                //sqlText += "FROM SUPLIERPAYRF" + Environment.NewLine;
                sqlText += "FROM SUPLIERPAYRF WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ----------------------------<<<
                sqlText += "WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "  AND PAYEECODERF=@FINDPAYEECODE" + Environment.NewLine;
                sqlText += "  AND SUPPLIERCDRF=0" + Environment.NewLine;
                sqlText += "  AND ADDUPDATERF>@FINDADDUPDATEST" + Environment.NewLine;
                // 修正 2009/06/10 >>>
                //sqlText += "  AND ADDUPDATERF<=@FINDADDUPDATEED" + Environment.NewLine;
                sqlText += "  AND ADDUPDATERF<@FINDADDUPDATEED" + Environment.NewLine;
                // 修正 2009/06/10 <<<

                try
                {
                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                    {
                        //Prameterオブジェクトの作成
                        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDPAYEECODE", SqlDbType.Int);
                        //SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                        SqlParameter findParaAddUpDateSt = sqlCommand.Parameters.Add("@FINDADDUPDATEST", SqlDbType.Int);
                        SqlParameter findParaAddUpDateEd = sqlCommand.Parameters.Add("@FINDADDUPDATEED", SqlDbType.Int);

                        //Parameterオブジェクトへ値設定
                        //findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(retList[0].EnterpriseCode);
                        //findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(retList[0].SupplierCd);
                        //findParaAddUpDate.Value = SqlDataMediator.SqlSetInt32(retList[0].TotalDay);
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                        findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);
                        findParaAddUpDateSt.Value = SqlDataMediator.SqlSetInt32( TDateTime.DateTimeToLongDate(suplAccPayWork.LaMonCAddUpUpdDate));
                        findParaAddUpDateEd.Value = SqlDataMediator.SqlSetInt32(TDateTime.DateTimeToLongDate(suplAccPayWork.AddUpDate));

                        sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10

                        myReader = sqlCommand.ExecuteReader();
                        if (myReader.Read())
                        {
                            stockTotalPayBalance = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("STOCKTOTALPAYBALANCERF"));
                            totalAfterDay = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ADDUPDATERF"));
                        }
                    }
                }
                finally
                {
                    myReader.Dispose();
                }
                #endregion

                if (totalAfterDay != 0)
                {
                    #region 締後仕入金額取得
                    sqlText = string.Empty;
                    // 修正 2009/04/17 >>>
                    #region DEL 2009/04/17
                    /*
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += "  ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " ,PAYEECODERF" + Environment.NewLine;
                    if (suplAccPayWork.SuppCTaxLayCd == 3)
                    {
                        sqlText += " ,SUPPLIERCDRF" + Environment.NewLine;
                    }
                    sqlText += " ,SUM(STOCKNETPRICERF + STCKDISTTLTAXEXCRF) AS TOTALAFTERSTOCK" + Environment.NewLine;
                    sqlText += " ,SUM(TTLITDEDSTCOUTTAXRF + ITDEDSTOCKDISOUTTAXRF) AS TTLTOTALAFTERSTOCKOUTTAX" + Environment.NewLine;
                    sqlText += " ,SUM(STOCKOUTTAXRF) AS TOTALAFTERSTOCKOUTTAX" + Environment.NewLine;

                    sqlText += " FROM" + Environment.NewLine;
                    sqlText += "  STOCKSLIPRF" + Environment.NewLine;
                    sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND PAYEECODERF=@FINDCUSTOMERCODE" + Environment.NewLine;
                    //sqlText += "    AND STOCKADDUPSECTIONCDRF=@FINDADDUPSECCODE" + Environment.NewLine;
                    sqlText += "  AND (STOCKADDUPADATERF<=@FINDADDUPDATE AND STOCKADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
                    sqlText += "  AND SUPPLIERFORMALRF=0" + Environment.NewLine;
                    sqlText += "  AND DEBITNOTEDIVRF=0" + Environment.NewLine;
                    sqlText += "  AND LOGICALDELETECODERF=0" + Environment.NewLine;
                    sqlText += "GROUP BY" + Environment.NewLine;
                    sqlText += " ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " ,PAYEECODERF" + Environment.NewLine;
                    if (suplAccPayWork.SuppCTaxLayCd == 3)
                    {
                        sqlText += " ,SUPPLIERCDRF" + Environment.NewLine;
                    }
                    */
                    #endregion
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += "  STOCK.ENTERPRISECODERF" + Environment.NewLine;
                    // -- ADD 2009/10/23 --------------------------------------->>>
                    sqlText += " ,STOCK.STOCKSECTIONCDRF " + Environment.NewLine;
                    // -- ADD 2009/10/23 ---------------------------------------<<<
                    sqlText += " ,STOCK.PAYEECODERF" + Environment.NewLine;
                    sqlText += " ,STOCK.SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += " ,SUM(STOCK.STOCKNETPRICERF + STOCK.STCKDISTTLTAXEXCRF) AS TOTALAFTERSTOCK -- 仕入正価金額" + Environment.NewLine;
                    sqlText += " ,SUM(CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 0 OR STOCK.SUPPCTAXLAYCDRF = 1) THEN STOCK.STOCKOUTTAXRF ELSE 0 END ) AS TOTALAFTERSTOCKOUTTAX -- 消費税額(伝票転嫁+明細転嫁)" + Environment.NewLine;
                    sqlText += "  -- 支払(親)転嫁" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATERF)" + Environment.NewLine;
                    sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATERF) ELSE 0 END)) AS OUTTAXRF1" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE2RF) ELSE 0 END)) AS OUTTAXRF2" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE3RF)" + Environment.NewLine;
                    sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE3RF) ELSE 0 END)) AS OUTTAXRF3" + Environment.NewLine;
                    sqlText += "  -- 支払(子)転嫁" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATERF)" + Environment.NewLine;
                    sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATERF) ELSE 0 END)) AS OUTTAXRF1_2" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF +STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE2RF) ELSE 0 END)) AS OUTTAXRF2_2" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE3RF)" + Environment.NewLine;
                    sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF +STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE3RF) ELSE 0 END)) AS OUTTAXRF3_2 " + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS STCKPRCCONSTAXINCLURF--消費税額（内税）" + Environment.NewLine;
                    sqlText += " FROM" + Environment.NewLine;
                    // -- UPD 2011/03/15 -------------------------->>>
                    //sqlText += "  STOCKSLIPRF AS STOCK" + Environment.NewLine;
                    //sqlText += " LEFT JOIN TAXRATESETRF AS TAX" + Environment.NewLine;
                    sqlText += "  STOCKSLIPRF AS STOCK WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += " LEFT JOIN TAXRATESETRF AS TAX WITH (READUNCOMMITTED)" + Environment.NewLine;
                    // -- UPD 2011/03/15 --------------------------<<<
                    sqlText += "  ON STOCK.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " WHERE STOCK.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND STOCK.PAYEECODERF=@FINDCUSTOMERCODE" + Environment.NewLine;
                    sqlText += "  AND (STOCK.STOCKADDUPADATERF<=@FINDADDUPDATE AND STOCK.STOCKADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
                    sqlText += "  AND STOCK.SUPPLIERFORMALRF=0" + Environment.NewLine;
                    sqlText += "  AND STOCK.DEBITNOTEDIVRF=0" + Environment.NewLine;
                    sqlText += "  AND STOCK.LOGICALDELETECODERF=0" + Environment.NewLine;
                    sqlText += "GROUP BY" + Environment.NewLine;
                    sqlText += " STOCK.ENTERPRISECODERF" + Environment.NewLine;
                    // -- ADD 2009/10/23 --------------------------------------->>>
                    sqlText += " ,STOCK.STOCKSECTIONCDRF " + Environment.NewLine;
                    // -- ADD 2009/10/23 ---------------------------------------<<<
                    sqlText += " ,STOCK.PAYEECODERF" + Environment.NewLine;
                    sqlText += " ,STOCK.SUPPLIERCDRF" + Environment.NewLine;
                    // 修正 2009/04/17 <<<

                    try
                    {
                        using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                        {
                            //Prameterオブジェクトの作成
                            SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                            SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
                            SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                            SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int); // ADD 2008.11.19

                            //Parameterオブジェクトへ値設定
                            findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                            findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);
                            findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                            findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetInt32(totalAfterDay);  // ADD 2008.11.19                        

                            sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10

                            myReader = sqlCommand.ExecuteReader();

                            while (myReader.Read())
                            {
                                // 修正 2009/04/17 >>>
                                #region DEL 2009/04/17
                                /*
                                if (suplAccPayWork.SuppCTaxLayCd == 3)
                                {
                                    totalAfterStock += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSTOCK"));
                                    ttltotalAfterStockOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLTOTALAFTERSTOCKOUTTAX"));
                                    totalAfterStockOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSTOCKOUTTAX"));
                                    ttltotalAfterStockOutTaxList.Add(SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLTOTALAFTERSTOCKOUTTAX")));
                                }
                                else
                                {
                                    totalAfterStock += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSTOCK"));
                                    ttltotalAfterStockOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLTOTALAFTERSTOCKOUTTAX"));
                                    totalAfterStockOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSTOCKOUTTAX"));
                                }
                                */
                                #endregion

                                // 仕入正価金額
                                totalAfterStock += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSTOCK"));
                                // 仕入外税消費税(伝票+明細)
                                totalAfterStockOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSTOCKOUTTAX"));
                                // 仕入外税消費税(支払親)
                                totalAfterStockOutTax_S += SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF1")) + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF2"))+
                                                           SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF3"));
                                // 仕入外税消費税(支払子)
                                totalAfterStockOutTaxList.Add(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF1_2")) + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF2_2")) +
                                                           SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF3_2"))); 
                                // 修正 2009/04/17 <<<
                            }
                        }
                    }
                    catch (SqlException ex)
                    {
                        //基底クラスに例外を渡して処理してもらう
                        status = base.WriteSQLErrorLog(ex);
                    }

                    finally
                    {
                        myReader.Dispose();
                    }
                    #endregion

                    #region 締後支払金額取得
                    sqlText = string.Empty;
                    sqlText += "SELECT *" + Environment.NewLine;
                    sqlText += " FROM PAYMENTSLPRF WITH" + Environment.NewLine;
                    sqlText += "    (READUNCOMMITTED" + Environment.NewLine;
                    sqlText += "    )" + Environment.NewLine;
                    sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    AND PAYEECODERF=@FINDPAYEECODE" + Environment.NewLine;
                    //sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;  // DEL 2010/10/06
                    sqlText += "    AND" + Environment.NewLine;
                    sqlText += "    (ADDUPADATERF<=@FINDADDUPDATE" + Environment.NewLine;
                    //sqlText += "        AND ADDUPADATERF>DATEADD(DAY, 1, @FINDLASTTIMEADDUPDATE)" + Environment.NewLine; // DEL 2008.11.19
                    sqlText += "        AND ADDUPADATERF>@FINDLASTTIMEADDUPDATE" + Environment.NewLine; // ADD 2008.11.19
                    sqlText += "    AND LOGICALDELETECODERF=0 " + Environment.NewLine;

                    sqlText += "    )" + Environment.NewLine;

                    try
                    {
                        using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                        {
                            //Prameterオブジェクトの作成
                            SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                            SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDPAYEECODE", SqlDbType.Int);
                            //SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);  // DEL 2010/10/06
                            SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                            //SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.DateTime); // DEL 2008.11.19
                            SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int); // ADD 2008.11.19

                            //Parameterオブジェクトへ値設定
                            findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                            findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);
                            //findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);  // DEL 2010/10/06
                            findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                            //findParaLastTimeAddUpDate.Value = TDateTime.LongDateToDateTime(retList[0].TotalDay); // DEL 2008.11.19
                            //findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetInt32(retList[0].TotalDay); // ADD 2008.11.19
                            findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetInt32(totalAfterDay);
                            sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10
                            myReader = sqlCommand.ExecuteReader();

                            while (myReader.Read())
                            {
                                totalAfterPayment += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("PAYMENTTOTALRF"));
                            }
                        }
                    }
                    finally
                    {
                        myReader.Dispose();
                    }
                    #endregion
                }
            }
            #endregion

            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;           

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.Connection = sqlConnection;
                    string sqlText = string.Empty;
                    if (suplAccPayWork.SupplierCd == suplAccPayWork.PayeeCode) // ←念のため
                    {
                        #region [●集計レコード作成処理]

                        #region SELECT文作成
                        sqlText = string.Empty;
                        // 修正 2009/04/17 >>>
                        #region DEL 2009/04/17 
                        /*
                        sqlText += "SELECT" + Environment.NewLine;
                        sqlText += " SUPLIERPAY.PAYEECODERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.SUPPLIERNM1RF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.SUPPLIERNM2RF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.SUPPLIERSNMRF,  " + Environment.NewLine;
                        //sqlText += " SUPLIERPAY.STOCKCNSTAXFRCPROCCDRF AS FRACTIONPROCCDRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.SUPPCTAXLAYCDRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.FRACTIONPROCUNITRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.FRACTIONPROCCDRF,  " + Environment.NewLine;
                        //支払情報
                        sqlText += " SUPLIERPAY.PAYMENTMONTHCODERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.PAYMENTDAYRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.PAYMENTCONDRF, " + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STOCKSLIPCOUNT," + Environment.NewLine;
                        //相殺
                        sqlText += " SUPLIERPAY.THISTIMESTOCKPRICERF + SUPLIERPAY.THISSTCKPRICRGDSRF + SUPLIERPAY.THISSTCKPRICDISRF AS OFSTHISTIMESTOCKRF," + Environment.NewLine;
                        //相殺後今回仕入消費税はセット時に計算
                        sqlText += " SUPLIERPAY.TTLITDEDSTCOUTTAXRF + SUPLIERPAY.TTLITDEDRETOUTTAXRF+SUPLIERPAY.TTLITDEDDISOUTTAXRF AS ITDEDOFFSETOUTTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCINTAXRF + SUPLIERPAY.TTLITDEDRETINTAXRF+SUPLIERPAY.TTLITDEDDISINTAXRF AS ITDEDOFFSETINTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCTAXFREERF + SUPLIERPAY.TTLITDEDRETTAXFREERF+SUPLIERPAY.TTLITDEDDISTAXFREERF AS ITDEDOFFSETTAXFREERF," + Environment.NewLine;
                        //相殺後外税消費税はセット時に計算
                        sqlText += " SUPLIERPAY.STCKPRCCONSTAXINCLURF+SUPLIERPAY.TTLRETINNERTAXRF+SUPLIERPAY.STCKDISTTLTAXINCLURF AS OFFSETINTAXRF," + Environment.NewLine;
                        //仕入
                        sqlText += " SUPLIERPAY.THISTIMESTOCKPRICERF AS THISTIMESTOCKPRICERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STOCKOUTTAXRF + SUPLIERPAY.STCKPRCCONSTAXINCLURF AS THISSTCPRCTAXRF, --今回消費税" + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCOUTTAXRF AS TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCINTAXRF AS TTLITDEDSTCINTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCTAXFREERF AS TTLITDEDSTCTAXFREERF," + Environment.NewLine;                        
                        sqlText += " SUPLIERPAY.STOCKOUTTAXRF AS TTLSTOCKOUTERTAXRF," + Environment.NewLine;                       
                        sqlText += " SUPLIERPAY.STCKPRCCONSTAXINCLURF AS TTLSTOCKINNERTAXRF," + Environment.NewLine;
                        //返品
                        sqlText += " SUPLIERPAY.THISSTCKPRICRGDSRF AS THISSTCKPRICRGDSRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF+SUPLIERPAY.TTLRETINNERTAXRF AS THISSTCPRCTAXRGDSRF, --今回消費税" + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDRETOUTTAXRF AS TTLITDEDRETOUTTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDRETINTAXRF AS TTLITDEDRETINTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDRETTAXFREERF AS TTLITDEDRETTAXFREERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF AS TTLRETOUTERTAXRF," + Environment.NewLine;                      
                        sqlText += " SUPLIERPAY.TTLRETINNERTAXRF AS TTLRETINNERTAXRF," + Environment.NewLine;
                        //値引
                        sqlText += " SUPLIERPAY.THISSTCKPRICDISRF AS THISSTCKPRICDISRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF + SUPLIERPAY.STCKDISTTLTAXINCLURF AS THISSTCPRCTAXDISRF," + Environment.NewLine;                        
                        sqlText += " SUPLIERPAY.TTLITDEDDISOUTTAXRF AS TTLITDEDDISOUTTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDDISINTAXRF AS TTLITDEDDISINTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDDISTAXFREERF AS TTLITDEDDISTAXFREERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF AS TTLDISOUTERTAXRF," + Environment.NewLine;                       
                        sqlText += " SUPLIERPAY.STCKDISTTLTAXINCLURF AS TTLDISINNERTAXRF" + Environment.NewLine;
                        sqlText += " FROM" + Environment.NewLine;
                        sqlText += "(" + Environment.NewLine;
                        */
                        #endregion
                        sqlText += "SELECT" + Environment.NewLine;
                        sqlText += " SUPLIERPAY.PAYEECODERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.SUPPLIERNM1RF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.SUPPLIERNM2RF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.SUPPLIERSNMRF,  " + Environment.NewLine;
                        //sqlText += " SUPLIERPAY.SUPPCTAXLAYCDRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.FRACTIONPROCUNITRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.FRACTIONPROCCDRF,  " + Environment.NewLine;
                        sqlText += " SUPLIERPAY.PAYMENTMONTHCODERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.PAYMENTDAYRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.PAYMENTCONDRF, " + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STOCKSLIPCOUNT," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.THISTIMESTOCKPRICERF + SUPLIERPAY.THISSTCKPRICRGDSRF + SUPLIERPAY.THISSTCKPRICDISRF AS OFSTHISTIMESTOCKRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCOUTTAXRF + SUPLIERPAY.TTLITDEDRETOUTTAXRF+SUPLIERPAY.TTLITDEDDISOUTTAXRF AS ITDEDOFFSETOUTTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCINTAXRF + SUPLIERPAY.TTLITDEDRETINTAXRF+SUPLIERPAY.TTLITDEDDISINTAXRF AS ITDEDOFFSETINTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCTAXFREERF + SUPLIERPAY.TTLITDEDRETTAXFREERF+SUPLIERPAY.TTLITDEDDISTAXFREERF AS ITDEDOFFSETTAXFREERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STCKPRCCONSTAXINCLURF+SUPLIERPAY.TTLRETINNERTAXRF+SUPLIERPAY.STCKDISTTLTAXINCLURF AS OFFSETINTAXRF," + Environment.NewLine;
                        // 仕入
                        sqlText += " SUPLIERPAY.THISTIMESTOCKPRICERF AS THISTIMESTOCKPRICERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCOUTTAXRF AS TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCINTAXRF AS TTLITDEDSTCINTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCTAXFREERF AS TTLITDEDSTCTAXFREERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STCKPRCCONSTAXINCLURF AS TTLSTOCKINNERTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STOCKOUTTAXRF AS TTLSTOCKOUTERTAXRF,-- 伝票転嫁と明細転嫁" + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        sqlText += " SUPLIERPAY.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TAXRATE3RF AS TAXRATE3RF," + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        //sqlText += " SUPLIERPAY.STOCKOUTTAXRF1+SUPLIERPAY.STOCKOUTTAXRF2+SUPLIERPAY.STOCKOUTTAXRF3 AS TTLSTOCKOUTERTAXRF_S,-- 支払(親)転嫁" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        sqlText += " SUPLIERPAY.STOCKOUTTAXRF1*TAXRATERF+SUPLIERPAY.STOCKOUTTAXRF2*TAXRATE2RF+SUPLIERPAY.STOCKOUTTAXRF3*TAXRATE3RF AS TTLSTOCKOUTERTAXRF_S,-- 支払(親)転嫁" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        // 返品
                        sqlText += " SUPLIERPAY.THISSTCKPRICRGDSRF AS THISSTCKPRICRGDSRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDRETOUTTAXRF AS TTLITDEDRETOUTTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDRETINTAXRF AS TTLITDEDRETINTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDRETTAXFREERF AS TTLITDEDRETTAXFREERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLRETINNERTAXRF AS TTLRETINNERTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF AS TTLRETOUTERTAXRF, -- 伝票転嫁と明細転嫁" + Environment.NewLine;
                        //sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1+SUPLIERPAY.TTLRETOUTERTAXRF2+SUPLIERPAY.TTLRETOUTERTAXRF3 AS TTLRETOUTERTAXRF_S,--支払(親)転嫁" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1*TAXRATERF+SUPLIERPAY.TTLRETOUTERTAXRF2*TAXRATE2RF+SUPLIERPAY.TTLRETOUTERTAXRF3*TAXRATE3RF AS TTLRETOUTERTAXRF_S,--支払(親)転嫁" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        // 値引
                        sqlText += " SUPLIERPAY.THISSTCKPRICDISRF AS THISSTCKPRICDISRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDDISOUTTAXRF AS TTLITDEDDISOUTTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDDISINTAXRF AS TTLITDEDDISINTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDDISTAXFREERF AS TTLITDEDDISTAXFREERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STCKDISTTLTAXINCLURF AS TTLDISINNERTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF AS TTLDISOUTERTAXRF, -- 伝票転嫁と明細転嫁" + Environment.NewLine;
                        //sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1+SUPLIERPAY.STOCKDISOUTTAXRF2+SUPLIERPAY.STOCKDISOUTTAXRF3 AS TTLDISOUTERTAXRF_S -- 支払(親)転嫁" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1*TAXRATERF+SUPLIERPAY.STOCKDISOUTTAXRF2*TAXRATE2RF+SUPLIERPAY.STOCKDISOUTTAXRF3*TAXRATE3RF AS TTLDISOUTERTAXRF_S -- 支払(親)転嫁" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        sqlText += " FROM" + Environment.NewLine;
                        sqlText += "(" + Environment.NewLine;

                        // 修正 2009/04/17 <<<

                        #region [SUBクエリ]
                        // 修正 2009/04/17 >>>
                        #region DEL 2009/04/17 
                        /*
                        sqlText += " SELECT" + Environment.NewLine;
                        sqlText += "  STOCK.PAYEECODERF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.SUPPLIERNM1RF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.SUPPLIERNM2RF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.SUPPLIERSNMRF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.STOCKCNSTAXFRCPROCCDRF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.SUPPCTAXLAYCDRF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.PAYMENTMONTHCODERF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.PAYMENTDAYRF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.PAYMENTCONDRF," + Environment.NewLine;
                        sqlText += "  PROCMONEY.FRACTIONPROCUNITRF," + Environment.NewLine;
                        sqlText += "  PROCMONEY.FRACTIONPROCCDRF, " + Environment.NewLine;
                        sqlText += "  COUNT(STOCK.SUPPLIERSLIPNORF) STOCKSLIPCOUNT, --伝票枚数" + Environment.NewLine;
                        //仕入
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STOCKNETPRICERF ELSE 0 END)) AS THISTIMESTOCKPRICERF,       --仕入正価金額" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCOUTTAXRF ELSE 0 END)) AS TTLITDEDSTCOUTTAXRF,    --仕入外税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCINTAXRF ELSE 0 END)) AS TTLITDEDSTCINTAXRF,      --仕入内税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCTAXFREERF ELSE 0 END)) AS TTLITDEDSTCTAXFREERF,  --仕入非課税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STOCKOUTTAXRF ELSE 0 END)) AS STOCKOUTTAXRF,                --仕入金額消費税額（外税）" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS STCKPRCCONSTAXINCLURF,--仕入金額消費税額（内税）" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS STOCKOUTTAXRF1,                     --売上金額消費税額（外税）税率1" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS STOCKOUTTAXRF2,                          --売上金額消費税額（外税）税率2" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS STOCKOUTTAXRF3,                          --売上金額消費税額（外税）税率3" + Environment.NewLine;
                        //返品
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STOCKNETPRICERF ELSE 0 END)) AS THISSTCKPRICRGDSRF,       --返品正価金額" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCOUTTAXRF ELSE 0 END)) AS TTLITDEDRETOUTTAXRF,  --返品外税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCINTAXRF ELSE 0 END)) AS TTLITDEDRETINTAXRF,    --返品内税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCTAXFREERF ELSE 0 END)) AS TTLITDEDRETTAXFREERF,--返品非課税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STOCKOUTTAXRF ELSE 0 END)) AS TTLRETOUTERTAXRF,           --返品金額消費税額（外税）" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS TTLRETINNERTAXRF,   --返品金額消費税額（内税）" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS TTLRETOUTERTAXRF1,                --売上金額消費税額（外税）税率1" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS TTLRETOUTERTAXRF2,                     --売上金額消費税額（外税）税率2" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                        sqlText += "           THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS TTLRETOUTERTAXRF3,                      --売上金額消費税額（外税）税率3" + Environment.NewLine;
                        //値引
                        sqlText += "  SUM(STOCK.STCKDISTTLTAXEXCRF) AS THISSTCKPRICDISRF,      --値引金額計（税抜き）" + Environment.NewLine;
                        sqlText += "  SUM(STOCK.ITDEDSTOCKDISOUTTAXRF) AS TTLITDEDDISOUTTAXRF, --値引外税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM(STOCK.ITDEDSTOCKDISINTAXRF) AS TTLITDEDDISINTAXRF,   --値引内税対象額合計 " + Environment.NewLine;
                        sqlText += "  SUM(STOCK.ITDEDSTOCKDISTAXFRERF) AS TTLITDEDDISTAXFREERF,--値引非課税対象額合計   " + Environment.NewLine;
                        sqlText += "  SUM(STOCK.STOCKDISOUTTAXRF) AS STOCKDISOUTTAXRF,         --値引消費税額（外税）" + Environment.NewLine;
                        sqlText += "  SUM(STOCK.STCKDISTTLTAXINCLURF) AS STCKDISTTLTAXINCLURF,  --値引消費税額（内税）" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                        sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATERF)ELSE 0 END)) AS STOCKDISOUTTAXRF1,  --売上値引消費税額（外税）税率1" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                        sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE2RF)ELSE 0 END)) AS STOCKDISOUTTAXRF2, --売上値引消費税額（外税）税率2" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                        sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE3RF)ELSE 0 END)) AS STOCKDISOUTTAXRF3 --売上値引消費税額（外税）税率3" + Environment.NewLine;
                        sqlText += "  FROM" + Environment.NewLine;
                        sqlText += "  (" + Environment.NewLine;
                        */
                        #endregion
                        sqlText += " SELECT" + Environment.NewLine;
                        sqlText += "  STOCK.PAYEECODERF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.SUPPLIERNM1RF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.SUPPLIERNM2RF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.SUPPLIERSNMRF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.STOCKCNSTAXFRCPROCCDRF," + Environment.NewLine;
                        //sqlText += "  SUPPLIER.SUPPCTAXLAYCDRF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.PAYMENTMONTHCODERF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.PAYMENTDAYRF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.PAYMENTCONDRF," + Environment.NewLine;
                        sqlText += "  PROCMONEY.FRACTIONPROCUNITRF," + Environment.NewLine;
                        sqlText += "  PROCMONEY.FRACTIONPROCCDRF, " + Environment.NewLine;
                        sqlText += "  COUNT(STOCK.SUPPLIERSLIPNORF) STOCKSLIPCOUNT, --伝票枚数" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STOCKNETPRICERF ELSE 0 END)) AS THISTIMESTOCKPRICERF,       --仕入正価金額" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCOUTTAXRF ELSE 0 END)) AS TTLITDEDSTCOUTTAXRF,    --仕入外税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCINTAXRF ELSE 0 END)) AS TTLITDEDSTCINTAXRF,      --仕入内税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCTAXFREERF ELSE 0 END)) AS TTLITDEDSTCTAXFREERF,  --仕入非課税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS STCKPRCCONSTAXINCLURF,--仕入金額消費税額（内税）" + Environment.NewLine;
                        // 伝票転嫁と明細転嫁 売上金額消費税額（外税）
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 0 OR STOCK.SUPPCTAXLAYCDRF = 1) AND (STOCK.SUPPLIERSLIPCDRF =10) THEN STOCK.STOCKOUTTAXRF ELSE 0 END)) AS STOCKOUTTAXRF,                --仕入金額消費税額（外税）" + Environment.NewLine;
                        // 支払(親)転嫁 売上金額消費税額（外税）
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                        //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS STOCKOUTTAXRF1,--税率1" + Environment.NewLine;
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                        //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS STOCKOUTTAXRF2,     --税率2" + Environment.NewLine;
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                        //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS STOCKOUTTAXRF3,     --税率3" + Environment.NewLine;
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF1,--税率1" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF2,     --税率2" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF3,     --税率3" + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STOCKNETPRICERF ELSE 0 END)) AS THISSTCKPRICRGDSRF,       --返品正価金額" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCOUTTAXRF ELSE 0 END)) AS TTLITDEDRETOUTTAXRF,  --返品外税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCINTAXRF ELSE 0 END)) AS TTLITDEDRETINTAXRF,    --返品内税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCTAXFREERF ELSE 0 END)) AS TTLITDEDRETTAXFREERF,--返品非課税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS TTLRETINNERTAXRF,   --返品金額消費税額（内税）" + Environment.NewLine;
                        // 伝票転嫁と明細転嫁 返品金額消費税額（外税）
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 0 OR STOCK.SUPPCTAXLAYCDRF = 1) AND (STOCK.SUPPLIERSLIPCDRF =20) THEN STOCK.STOCKOUTTAXRF ELSE 0 END)) AS TTLRETOUTERTAXRF,--返品金額消費税額（外税）" + Environment.NewLine;
                        // 支払(親)転嫁 返品金額消費税額（外税）
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF)" + Environment.NewLine;
                        //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS TTLRETOUTERTAXRF1,--税率1" + Environment.NewLine;
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF)" + Environment.NewLine;
                        //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS TTLRETOUTERTAXRF2,     --税率2" + Environment.NewLine;
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF)" + Environment.NewLine;
                        //sqlText += "           THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS TTLRETOUTERTAXRF3,      --税率3" + Environment.NewLine;
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF)" + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF1,--税率1" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF)" + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF2,     --税率2" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF)" + Environment.NewLine;
                        sqlText += "           THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF3,      --税率3" + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        sqlText += "  SUM(STOCK.STCKDISTTLTAXEXCRF) AS THISSTCKPRICDISRF,      --値引金額計（税抜き）" + Environment.NewLine;
                        sqlText += "  SUM(STOCK.ITDEDSTOCKDISOUTTAXRF) AS TTLITDEDDISOUTTAXRF, --値引外税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM(STOCK.ITDEDSTOCKDISINTAXRF) AS TTLITDEDDISINTAXRF,   --値引内税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM(STOCK.ITDEDSTOCKDISTAXFRERF) AS TTLITDEDDISTAXFREERF,--値引非課税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM(STOCK.STCKDISTTLTAXINCLURF) AS STCKDISTTLTAXINCLURF, --値引消費税額（内税）" + Environment.NewLine;
                        // 伝票転嫁と明細転嫁 売上値引消費税額（外税）
                        sqlText += "  SUM(CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 0 OR STOCK.SUPPCTAXLAYCDRF = 1) THEN STOCK.STOCKDISOUTTAXRF ELSE 0 END) AS STOCKDISOUTTAXRF,--値引消費税額（外税）" + Environment.NewLine;
                        // 支払(親)転嫁 売上値引消費税額（外税）
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                        //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATERF)ELSE 0 END)) AS STOCKDISOUTTAXRF1,  --税率1" + Environment.NewLine;
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                        //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE2RF)ELSE 0 END)) AS STOCKDISOUTTAXRF2, --税率2" + Environment.NewLine;
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                        //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE3RF)ELSE 0 END)) AS STOCKDISOUTTAXRF3  --税率3" + Environment.NewLine;
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        sqlText += "  STOCK.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                        sqlText += "  STOCK.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                        sqlText += "  STOCK.TAXRATE3RF AS TAXRATE3RF," + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                        sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF1,  --税率1" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                        sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF2, --税率2" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                        sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF3  --税率3" + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        sqlText += "  FROM" + Environment.NewLine;
                        sqlText += "  (" + Environment.NewLine;
                        // 修正 2009/04/17 <<<
                        #region SUBSUBクエリ
                        // 修正 2009/04/17 >>>
                        #region DEL 2009/04/17
                        /*
                        sqlText += "   SELECT" + Environment.NewLine;
                        sqlText += "    SUBSTOCK.LOGICALDELETECODERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.ENTERPRISECODERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.SUPPLIERFORMALRF, --仕入形式" + Environment.NewLine;
                        sqlText += "    SUBSTOCK.DEBITNOTEDIVRF,   --赤伝区分" + Environment.NewLine;
                        sqlText += "    SUBSTOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STOCKGOODSCDRF,   --仕入商品区分" + Environment.NewLine;
                        sqlText += "    SUBSTOCK.SUPPLIERSLIPNORF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STOCKADDUPADATERF," + Environment.NewLine;
                        sqlText += "    (CASE WHEN (SEARCHSUPPLIER.PAYEECODERF IS NOT NULL) THEN SEARCHSUPPLIER.PAYEECODERF ELSE SUBSTOCK.PAYEECODERF END) AS PAYEECODERF," + Environment.NewLine;
                        // 修正 2009.03.24 >>>
                        #region DEL 2009/03/24 
                        ////仕入・返品
                        //sqlText += "    SUBSTOCK.STOCKNETPRICERF," + Environment.NewLine;
                        //sqlText += "    SUBSTOCK.TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
                        //sqlText += "    SUBSTOCK.TTLITDEDSTCINTAXRF," + Environment.NewLine;
                        //sqlText += "    SUBSTOCK.TTLITDEDSTCTAXFREERF," + Environment.NewLine;
                        //sqlText += "    SUBSTOCK.STOCKOUTTAXRF," + Environment.NewLine;
                        //sqlText += "    SUBSTOCK.STCKPRCCONSTAXINCLURF," + Environment.NewLine;
                        ////値引
                        //sqlText += "    SUBSTOCK.STCKDISTTLTAXEXCRF," + Environment.NewLine;
                        //sqlText += "    SUBSTOCK.ITDEDSTOCKDISOUTTAXRF," + Environment.NewLine;
                        //sqlText += "    SUBSTOCK.ITDEDSTOCKDISINTAXRF," + Environment.NewLine;
                        //sqlText += "    SUBSTOCK.ITDEDSTOCKDISTAXFRERF," + Environment.NewLine;
                        //sqlText += "    SUBSTOCK.STOCKDISOUTTAXRF," + Environment.NewLine;
                        //sqlText += "    SUBSTOCK.STCKDISTTLTAXINCLURF," + Environment.NewLine;
                        #endregion
                        //仕入・返品(行値引含む)
                        sqlText += "    SUBSTOCK.STOCKNETPRICERF + SUBSTOCKDTL.DISSTOCKPRICETAXEXCGYO AS STOCKNETPRICERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.TTLITDEDSTCOUTTAXRF + SUBSTOCKDTL.ITDEDSTOCKDISOUTTAXGYO AS TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.TTLITDEDSTCINTAXRF + SUBSTOCKDTL.ITDEDSTOCKDISINTAXGYO AS TTLITDEDSTCINTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.TTLITDEDSTCTAXFREERF + SUBSTOCKDTL.ITDEDSTOCKDISFREETAXGYO AS TTLITDEDSTCTAXFREERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STOCKOUTTAXRF + SUBSTOCKDTL.STOCKDISOUTTAXGYO AS STOCKOUTTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STCKPRCCONSTAXINCLURF + SUBSTOCKDTL.STOCKDISINTAXGYO AS STCKPRCCONSTAXINCLURF," + Environment.NewLine;
                        //値引(商品値引)
                        sqlText += "    SUBSTOCK.STCKDISTTLTAXEXCRF - SUBSTOCKDTL.DISSTOCKPRICETAXEXCGYO AS STCKDISTTLTAXEXCRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.ITDEDSTOCKDISOUTTAXRF - SUBSTOCKDTL.ITDEDSTOCKDISOUTTAXGYO AS ITDEDSTOCKDISOUTTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.ITDEDSTOCKDISINTAXRF - SUBSTOCKDTL.ITDEDSTOCKDISINTAXGYO AS ITDEDSTOCKDISINTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.ITDEDSTOCKDISTAXFRERF - SUBSTOCKDTL.ITDEDSTOCKDISFREETAXGYO AS ITDEDSTOCKDISTAXFRERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STOCKDISOUTTAXRF - SUBSTOCKDTL.STOCKDISOUTTAXGYO AS STOCKDISOUTTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STCKDISTTLTAXINCLURF - SUBSTOCKDTL.STOCKDISINTAXGYO AS STCKDISTTLTAXINCLURF," + Environment.NewLine;
                        // 修正 2009.03.24 <<<
                        // 税率取得
                        sqlText += "    TAX.TAXRATESTARTDATERF AS TAXRATESTARTDATERF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATEENDDATERF AS TAXRATEENDDATERF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATE3RF AS TAXRATE3RF    " + Environment.NewLine;
                        sqlText += "   FROM" + Environment.NewLine;
                        sqlText += "    STOCKSLIPRF AS SUBSTOCK" + Environment.NewLine;
                        sqlText += "    LEFT JOIN TAXRATESETRF AS TAX" + Environment.NewLine;
                        sqlText += "     ON SUBSTOCK.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "    LEFT JOIN SUPPLIERRF AS SEARCHSUPPLIER" + Environment.NewLine;
                        sqlText += "     ON SUBSTOCK.ENTERPRISECODERF = SEARCHSUPPLIER.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "     AND SUBSTOCK.SUPPLIERCDRF = SEARCHSUPPLIER.SUPPLIERCDRF" + Environment.NewLine;
                        // ADD 2009.03.24 >>>
                        sqlText += "    LEFT JOIN" + Environment.NewLine;
                        sqlText += "    ( " + Environment.NewLine;
                        sqlText += "      SELECT" + Environment.NewLine;
                        sqlText += "       STOCK.ENTERPRISECODERF," + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERFORMALRF, --受注ステータス" + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERSLIPNORF, --仕入伝票番号 " + Environment.NewLine;
                        sqlText += "       -- 行値引" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS DISSTOCKPRICETAXEXCGYO," + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 0 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISOUTTAXGYO, -- 外税対象額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 1 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISFREETAXGYO,-- 非課税対象額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 2 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISINTAXGYO,  -- 内税対象額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 0 ) THEN DTL.STOCKPRICECONSTAXRF ELSE 0 END) AS STOCKDISOUTTAXGYO, -- 外税額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 2 ) THEN DTL.STOCKPRICECONSTAXRF ELSE 0 END) AS STOCKDISINTAXGYO  -- 内税額(行値引)" + Environment.NewLine;
                        sqlText += "      FROM" + Environment.NewLine;
                        sqlText += "       STOCKDETAILRF AS DTL" + Environment.NewLine;
                        sqlText += "      LEFT JOIN STOCKSLIPRF AS STOCK" + Environment.NewLine;
                        sqlText += "       ON DTL.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "       AND DTL.SUPPLIERFORMALRF = STOCK.SUPPLIERFORMALRF" + Environment.NewLine;
                        sqlText += "       AND DTL.SUPPLIERSLIPNORF = STOCK.SUPPLIERSLIPNORF" + Environment.NewLine;
                        sqlText += "      GROUP BY" + Environment.NewLine;
                        sqlText += "       STOCK.ENTERPRISECODERF," + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERFORMALRF, --受注ステータス" + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERSLIPNORF --仕入伝票番号 " + Environment.NewLine;
                        sqlText += "    ) AS SUBSTOCKDTL" + Environment.NewLine;
                        sqlText += "    ON  SUBSTOCK.ENTERPRISECODERF = SUBSTOCKDTL.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "    AND SUBSTOCK.SUPPLIERFORMALRF = SUBSTOCKDTL.SUPPLIERFORMALRF" + Environment.NewLine;
                        sqlText += "    AND SUBSTOCK.SUPPLIERSLIPNORF = SUBSTOCKDTL.SUPPLIERSLIPNORF" + Environment.NewLine;
                        // ADD 2009.03.24 <<<
                        */
                        #endregion

                        sqlText += "   SELECT" + Environment.NewLine;
                        sqlText += "    SUBSTOCK.LOGICALDELETECODERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.ENTERPRISECODERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.SUPPCTAXLAYCDRF, --消費税転嫁方式(仕入データ) " + Environment.NewLine;
                        sqlText += "    SUBSTOCK.SUPPLIERFORMALRF,--仕入形式" + Environment.NewLine;
                        sqlText += "    SUBSTOCK.DEBITNOTEDIVRF,  --赤伝区分" + Environment.NewLine;
                        sqlText += "    SUBSTOCK.SUPPLIERSLIPCDRF,--仕入伝票区分" + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STOCKGOODSCDRF,  --仕入商品区分" + Environment.NewLine;
                        sqlText += "    SUBSTOCK.SUPPLIERSLIPNORF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STOCKADDUPADATERF," + Environment.NewLine;
                        sqlText += "    (CASE WHEN (SEARCHSUPPLIER.PAYEECODERF IS NOT NULL) THEN SEARCHSUPPLIER.PAYEECODERF ELSE SUBSTOCK.PAYEECODERF END) AS PAYEECODERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STOCKNETPRICERF + SUBSTOCKDTL.DISSTOCKPRICETAXEXCGYO AS STOCKNETPRICERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.TTLITDEDSTCOUTTAXRF + SUBSTOCKDTL.ITDEDSTOCKDISOUTTAXGYO AS TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.TTLITDEDSTCINTAXRF + SUBSTOCKDTL.ITDEDSTOCKDISINTAXGYO AS TTLITDEDSTCINTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.TTLITDEDSTCTAXFREERF + SUBSTOCKDTL.ITDEDSTOCKDISFREETAXGYO AS TTLITDEDSTCTAXFREERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STOCKOUTTAXRF + SUBSTOCKDTL.STOCKDISOUTTAXGYO AS STOCKOUTTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STCKPRCCONSTAXINCLURF + SUBSTOCKDTL.STOCKDISINTAXGYO AS STCKPRCCONSTAXINCLURF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STCKDISTTLTAXEXCRF - SUBSTOCKDTL.DISSTOCKPRICETAXEXCGYO AS STCKDISTTLTAXEXCRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.ITDEDSTOCKDISOUTTAXRF - SUBSTOCKDTL.ITDEDSTOCKDISOUTTAXGYO AS ITDEDSTOCKDISOUTTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.ITDEDSTOCKDISINTAXRF - SUBSTOCKDTL.ITDEDSTOCKDISINTAXGYO AS ITDEDSTOCKDISINTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.ITDEDSTOCKDISTAXFRERF - SUBSTOCKDTL.ITDEDSTOCKDISFREETAXGYO AS ITDEDSTOCKDISTAXFRERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STOCKDISOUTTAXRF - SUBSTOCKDTL.STOCKDISOUTTAXGYO AS STOCKDISOUTTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STCKDISTTLTAXINCLURF - SUBSTOCKDTL.STOCKDISINTAXGYO AS STCKDISTTLTAXINCLURF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATESTARTDATERF AS TAXRATESTARTDATERF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATEENDDATERF AS TAXRATEENDDATERF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATE3RF AS TAXRATE3RF    " + Environment.NewLine;
                        sqlText += "   FROM" + Environment.NewLine;
                        // -- UPD 2011/03/15 ------------------------------------->>>
                        //sqlText += "    STOCKSLIPRF AS SUBSTOCK" + Environment.NewLine;
                        //sqlText += "    LEFT JOIN TAXRATESETRF AS TAX" + Environment.NewLine;
                        sqlText += "    STOCKSLIPRF AS SUBSTOCK WITH (READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += "    LEFT JOIN TAXRATESETRF AS TAX WITH (READUNCOMMITTED)" + Environment.NewLine;
                        // -- UPD 2011/03/15 -------------------------------------<<<
                        sqlText += "     ON SUBSTOCK.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
                        // -- UPD 2011/03/15 ------------------------------------->>>
                        //sqlText += "    LEFT JOIN SUPPLIERRF AS SEARCHSUPPLIER" + Environment.NewLine;
                        sqlText += "    LEFT JOIN SUPPLIERRF AS SEARCHSUPPLIER WITH (READUNCOMMITTED)" + Environment.NewLine;
                        // -- UPD 2011/03/15 -------------------------------------<<<
                        sqlText += "     ON SUBSTOCK.ENTERPRISECODERF = SEARCHSUPPLIER.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "     AND SUBSTOCK.SUPPLIERCDRF = SEARCHSUPPLIER.SUPPLIERCDRF" + Environment.NewLine;
                        sqlText += "    LEFT JOIN" + Environment.NewLine;
                        sqlText += "    ( " + Environment.NewLine;
                        sqlText += "      SELECT" + Environment.NewLine;
                        sqlText += "       STOCK.ENTERPRISECODERF," + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERFORMALRF, --受注ステータス" + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERSLIPNORF, --仕入伝票番号 " + Environment.NewLine;
                        sqlText += "       -- 行値引" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS DISSTOCKPRICETAXEXCGYO," + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 0 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISOUTTAXGYO, -- 外税対象額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 1 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISFREETAXGYO,-- 非課税対象額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 2 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISINTAXGYO,  -- 内税対象額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 0 ) THEN DTL.STOCKPRICECONSTAXRF ELSE 0 END) AS STOCKDISOUTTAXGYO, -- 外税額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 2 ) THEN DTL.STOCKPRICECONSTAXRF ELSE 0 END) AS STOCKDISINTAXGYO  -- 内税額(行値引)" + Environment.NewLine;
                        sqlText += "      FROM" + Environment.NewLine;
                        // -- UPD 2011/03/15 -------------------------->>>
                        //sqlText += "       STOCKDETAILRF AS DTL" + Environment.NewLine;
                        //sqlText += "      LEFT JOIN STOCKSLIPRF AS STOCK" + Environment.NewLine;
                        sqlText += "       STOCKDETAILRF AS DTL WITH (READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += "      LEFT JOIN STOCKSLIPRF AS STOCK WITH (READUNCOMMITTED)" + Environment.NewLine;
                        // -- UPD 2011/03/15 --------------------------<<<
                        sqlText += "       ON DTL.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "       AND DTL.SUPPLIERFORMALRF = STOCK.SUPPLIERFORMALRF" + Environment.NewLine;
                        sqlText += "       AND DTL.SUPPLIERSLIPNORF = STOCK.SUPPLIERSLIPNORF" + Environment.NewLine;
                        sqlText += "      GROUP BY" + Environment.NewLine;
                        sqlText += "       STOCK.ENTERPRISECODERF," + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERFORMALRF, --受注ステータス" + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERSLIPNORF --仕入伝票番号 " + Environment.NewLine;
                        sqlText += "    ) AS SUBSTOCKDTL" + Environment.NewLine;
                        sqlText += "    ON  SUBSTOCK.ENTERPRISECODERF = SUBSTOCKDTL.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "    AND SUBSTOCK.SUPPLIERFORMALRF = SUBSTOCKDTL.SUPPLIERFORMALRF" + Environment.NewLine;
                        sqlText += "    AND SUBSTOCK.SUPPLIERSLIPNORF = SUBSTOCKDTL.SUPPLIERSLIPNORF" + Environment.NewLine;

                        // 修正 2009/04/17 <<<
                        #endregion

                        #region [ WHERE ]
                        sqlText += "   WHERE SUBSTOCK.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                        //sqlText += "    AND  SUBSTOCK.PAYEECODERF=@FINDCUSTOMERCODE" + Environment.NewLine;
                        sqlText += "    AND  (CASE WHEN (SEARCHSUPPLIER.PAYEECODERF IS NOT NULL) THEN SEARCHSUPPLIER.PAYEECODERF ELSE SUBSTOCK.PAYEECODERF END)=@FINDCUSTOMERCODE" + Environment.NewLine;
                        sqlText += "    AND (SUBSTOCK.STOCKADDUPADATERF<=@FINDADDUPDATE AND SUBSTOCK.STOCKADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
                        sqlText += "    AND  SUBSTOCK.LOGICALDELETECODERF=0" + Environment.NewLine;
                        sqlText += "    AND  SUBSTOCK.SUPPLIERFORMALRF=0" + Environment.NewLine;
                        sqlText += "    AND  SUBSTOCK.DEBITNOTEDIVRF=0" + Environment.NewLine;
                        sqlText += "    AND (SUBSTOCK.SUPPLIERSLIPCDRF = 10 OR SUBSTOCK.SUPPLIERSLIPCDRF = 20)" + Environment.NewLine;
                        sqlText += "    AND (SUBSTOCK.STOCKGOODSCDRF=0 OR SUBSTOCK.STOCKGOODSCDRF = 6)" + Environment.NewLine;
                        #endregion

                        #region [ JOIN ]
                        sqlText += "   ) AS STOCK" + Environment.NewLine;
                        // -- UPD 2011/03/15 -------------------->>>
                        //sqlText += "   INNER JOIN SUPPLIERRF AS SUPPLIER" + Environment.NewLine;
                        sqlText += "   INNER JOIN SUPPLIERRF AS SUPPLIER WITH (READUNCOMMITTED)" + Environment.NewLine;
                        // -- UPD 2011/03/15 --------------------<<<
                        sqlText += "    ON SUPPLIER.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "    AND SUPPLIER.SUPPLIERCDRF = STOCK.PAYEECODERF" + Environment.NewLine;
                        // -- UPD 2011/03/15 -------------------->>>
                        //sqlText += "   LEFT JOIN STOCKPROCMONEYRF AS PROCMONEY" + Environment.NewLine;
                        sqlText += "   LEFT JOIN STOCKPROCMONEYRF AS PROCMONEY WITH (READUNCOMMITTED)" + Environment.NewLine;
                        // -- UPD 2011/03/15 --------------------<<<
                        sqlText += "    ON PROCMONEY.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "    AND PROCMONEY.FRACPROCMONEYDIVRF = 1" + Environment.NewLine;
                        sqlText += "    AND PROCMONEY.FRACTIONPROCCODERF = SUPPLIER.STOCKCNSTAXFRCPROCCDRF" + Environment.NewLine;

                        #endregion

                        #region [ GROUP BY ]
                        sqlText += "   GROUP BY" + Environment.NewLine;
                        sqlText += "    STOCK.PAYEECODERF," + Environment.NewLine;
                        sqlText += "    SUPPLIER.SUPPLIERNM1RF," + Environment.NewLine;
                        sqlText += "    SUPPLIER.SUPPLIERNM2RF," + Environment.NewLine;
                        sqlText += "    SUPPLIER.SUPPLIERSNMRF,   " + Environment.NewLine;
                        sqlText += "    SUPPLIER.STOCKCNSTAXFRCPROCCDRF," + Environment.NewLine;
                        //sqlText += "    SUPPLIER.SUPPCTAXLAYCDRF," + Environment.NewLine;
                        sqlText += "    SUPPLIER.PAYMENTMONTHCODERF," + Environment.NewLine;
                        sqlText += "    SUPPLIER.PAYMENTDAYRF," + Environment.NewLine;
                        sqlText += "    SUPPLIER.PAYMENTCONDRF," + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        sqlText += "    STOCK.TAXRATERF, " + Environment.NewLine;
                        sqlText += "    STOCK.TAXRATE2RF, " + Environment.NewLine;
                        sqlText += "    STOCK.TAXRATE3RF, " + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        sqlText += "    PROCMONEY.FRACTIONPROCUNITRF," + Environment.NewLine;
                        sqlText += "    PROCMONEY.FRACTIONPROCCDRF " + Environment.NewLine;
                        sqlText += ") AS SUPLIERPAY" + Environment.NewLine;
                        #endregion

                        #endregion
                        #endregion

                        sqlCommand.CommandText = sqlText;

                        #region  Prameterオブジェクトの作成
                        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
                        SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                        SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
                        #endregion

                        #region Parameterオブジェクトへ値設定
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                        findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
                        findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                        if (suplAccPayWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                            findParaLastTimeAddUpDate.Value = 20000101;
                        else
                            findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.LaMonCAddUpUpdDate);
                        #endregion

                        sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10

                        myReader = sqlCommand.ExecuteReader();

                        double FractionProcUnit = 0;
                        long SetTax = 0;
                        long WorkTax = 0;
                        while (myReader.Read())
                        {
                            #region 結果セット
                            suplAccPayWork.FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF")); //端数処理区分
                            FractionProcUnit = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("FRACTIONPROCUNITRF"));           // 端数処理単位
                            suplAccPayWork.PayeeCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYEECODERF"));
                            suplAccPayWork.PayeeName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM1RF"));
                            suplAccPayWork.PayeeName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM2RF"));
                            suplAccPayWork.PayeeSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERSNMRF"));
                            //suplAccPayWork.ResultsSectCd = "00";　// 実績拠点コード(00固定)
                            //suplAccPayWork.PaymentCond = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYMENTCONDRF"));      // 支払条件
                            suplAccPayWork.FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF"));// 端数処理区分
                            // 今回繰越残高(前回支払額-今回支払金額)
                            suplAccPayWork.ThisTimeTtlBlcAcPay = suplAccPayWork.LastTimeAccPay - suplAccPayWork.ThisTimePayNrml;

                            //■相殺
                            suplAccPayWork.OfsThisTimeStock = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFSTHISTIMESTOCKRF"));
                            suplAccPayWork.ItdedOffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETOUTTAXRF"));
                            suplAccPayWork.ItdedOffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETINTAXRF"));
                            suplAccPayWork.ItdedOffsetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETTAXFREERF"));
                            suplAccPayWork.OffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFFSETINTAXRF"));

                            // 修正 2009/04/17 >>>
                            #region DEL 2009/04/17 
                            /*
                            // 相殺後今回仕入消費税額 / 相殺後仕入外税額 >>>
                            // 消費税転嫁区分によってセット内容変動( クエリ内で処理しきれない為、セット時に計算 )
                            if ((suplAccPayWork.SuppCTaxLayCd == 0) || (suplAccPayWork.SuppCTaxLayCd == 1) || (suplAccPayWork.SuppCTaxLayCd == 2))
                            {
                                // 相殺後仕入外税額 = 今回仕入外税額 + 今回仕入返品外税額 + 今回仕入値引外税額
                                //SetTax = 0;
                                //FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF")), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                                //suplAccPayWork.OffsetOutTax = SetTax;       // 今回仕入外税額
                                //FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF")), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                                //suplAccPayWork.OffsetOutTax += SetTax;       // 今回仕入返品外税額
                                //FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF")), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                                //suplAccPayWork.OffsetOutTax += SetTax;       // 今回仕入値引外税額

                                suplAccPayWork.OffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF")); // 今回仕入外税額
                                suplAccPayWork.OffsetOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF")); // 今回仕入返品外税額
                                suplAccPayWork.OffsetOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF")); // 今回仕入値引外税額

                                //// 相殺後今回仕入消費税額 = 相殺後仕入外税額 + 相殺後仕入内税額
                                //suplAccPayWork.OfsThisStockTax = suplAccPayWork.OffsetOutTax + suplAccPayWork.OffsetInTax;       // 相殺後今回仕入消費税額

                            }
                            //else if ((suplAccPayWork.SuppCTaxLayCd == 2))
                            //{
                            //    // 消費税転嫁区分 = 2:請求親
                            //    // 相殺後外税金対象額　× 税率
                            //    SetTax = 0;
                            //    FracCalc((suplAccPayWork.ItdedOffsetOutTax * suplAccPayWork.SupplierConsTaxRate), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                            //    suplAccPayWork.OffsetOutTax = SetTax;

                            //    // 相殺後今回仕入消費税額 = 相殺後仕入外税額 + 相殺後仕入内税額
                            //    suplAccPayWork.OfsThisStockTax = suplAccPayWork.OffsetOutTax + suplAccPayWork.OffsetInTax;       // 相殺後今回仕入消費税額
                            //}
                            else if ((suplAccPayWork.SuppCTaxLayCd == 3))
                            {
                                // 消費税転嫁区分 = 3:請求子
                                // 子レコード集計(相殺後外税金額) × 税率　※子レコード集計時に算出                           
                            }
                            */
                            #endregion
                            #region suplAccPayWork.OffsetOutTax [相殺後外税消費税]
                            // 相殺後外税消費税 = 仕入外税消費税 + 返品外税消費税 + 値引外税消費税 ※各種転嫁方式別に計算し合算する 支払転嫁(子)は親子レコード集計後に加算する
                            // 伝票転嫁 + 明細転嫁  
                            suplAccPayWork.OffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF")) +SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"))+
                                                          SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                            // 支払(親)転嫁
                            FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S")) + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S")) +
                                     SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S")), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                            suplAccPayWork.OffsetOutTax += SetTax;
                            #endregion
                            // 修正 2009/04/17 <<<

                            #region 当月消費税SET処理
                            if (totalAfterDay != 0)
                            {
                                // 修正 2009/04/17 >>>
                                #region DEL 2009/04/17
                                /*
                                if ((suplAccPayWork.SuppCTaxLayCd == 2)) // 請求親
                                {
                                    if (ttltotalAfterStockOutTax != 0)
                                    {
                                        //締後消費税算出
                                        FracCalc((ttltotalAfterStockOutTax * suplAccPayWork.SupplierConsTaxRate), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                                    }
                                    //相殺後今回売上消費税 = (支払金額 + 締後仕入 - 締後支払 + 締後消費税) - (前月仕入残高 - 当月仕入 - 当月支払) 
                                    suplAccPayWork.OfsThisStockTax = Convert.ToInt64((stockTotalPayBalance + totalAfterStock - totalAfterPayment + SetTax)) - Convert.ToInt64((suplAccPayWork.LastTimeAccPay + suplAccPayWork.OfsThisTimeStock - suplAccPayWork.ThisTimePayNrml));
                                }
                                else if ((suplAccPayWork.SuppCTaxLayCd == 3)) // 請求子
                                {
                                    for (int i = 0; i < ttltotalAfterStockOutTaxList.Count; i++)
                                    {
                                        ttltotalAfterStockOutTax = Convert.ToInt64(ttltotalAfterStockOutTaxList[i]);
                                        //相殺後今回売上消費税 = (今回請求金額 + 締後売上 - 締後入金 + 締後消費税) - (前月売上残高 + 当月売上 - 当月入金) 
                                        if (ttltotalAfterStockOutTax != 0)
                                        {
                                            //締後消費税算出
                                            FracCalc((ttltotalAfterStockOutTax * suplAccPayWork.SupplierConsTaxRate), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                                        }
                                        WorkTax += SetTax;
                                    }
                                    //相殺後今回売上消費税 = (支払金額 + 締後仕入 - 締後支払 + 締後消費税) - (前月仕入残高 - 当月仕入 - 当月支払) 
                                    suplAccPayWork.OfsThisStockTax = Convert.ToInt64((stockTotalPayBalance + totalAfterStock - totalAfterPayment + WorkTax)) - Convert.ToInt64((suplAccPayWork.LastTimeAccPay + suplAccPayWork.OfsThisTimeStock - suplAccPayWork.ThisTimePayNrml));
                                }
                                else
                                {
                                    //相殺後今回売上消費税 = (支払金額 + 締後仕入 - 締後支払 + 締後消費税) - (前月仕入残高 - 当月仕入 - 当月支払) 
                                    suplAccPayWork.OfsThisStockTax = Convert.ToInt64((stockTotalPayBalance + totalAfterStock - totalAfterPayment + totalAfterStockOutTax)) - Convert.ToInt64((suplAccPayWork.LastTimeAccPay + suplAccPayWork.OfsThisTimeStock - suplAccPayWork.ThisTimePayNrml));
                                }
                                */
                                #endregion
                                // 伝票転嫁 + 明細転嫁
                                WorkTax = totalAfterStockOutTax;

                                // 支払(親)転嫁
                                FracCalc((totalAfterStockOutTax_S), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                                WorkTax += SetTax;

                                // 支払(子)転嫁
                                for (int i = 0; i < totalAfterStockOutTaxList.Count; i++)
                                {
                                    if (Convert.ToDouble(totalAfterStockOutTaxList[i]) != 0)
                                    {
                                        //締後消費税算出
                                        FracCalc(Convert.ToDouble(totalAfterStockOutTaxList[i]), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                                        WorkTax += SetTax;
                                    }
                                }

                                //相殺後今回売上消費税 = (支払金額 + 締後仕入 - 締後支払 + 締後消費税) - (前月仕入残高 + 当月仕入 - 当月支払) 
                                suplAccPayWork.OfsThisStockTax = Convert.ToInt64((stockTotalPayBalance + totalAfterStock - totalAfterPayment + WorkTax)) - Convert.ToInt64((suplAccPayWork.LastTimeAccPay + suplAccPayWork.OfsThisTimeStock - suplAccPayWork.ThisTimePayNrml));
                                // 修正 2009/04/17 <<<
                            }
                            else
                            {
                                //suplAccPayWork.OfsThisStockTax = suplAccPayWork.TtlStockOuterTax + suplAccPayWork.TtlRetOuterTax + suplAccPayWork.TtlDisOuterTax;
                                suplAccPayWork.OfsThisStockTax = suplAccPayWork.OffsetInTax + suplAccPayWork.OffsetOutTax;
                            }
                            #endregion

                            // ■仕入
                            suplAccPayWork.ThisTimeStockPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISTIMESTOCKPRICERF"));
                            suplAccPayWork.TtlItdedStcOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCOUTTAXRF"));
                            suplAccPayWork.TtlItdedStcInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCINTAXRF"));
                            suplAccPayWork.TtlItdedStcTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCTAXFREERF"));
                            suplAccPayWork.TtlStockInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKINNERTAXRF"));
                            #region suplAccPayWork.TtlStockOuterTax [今回仕入外税消費税]
                            // 今回仕入外税消費税 ※各種転嫁方式別に計算を行い、合算する 支払転嫁(子)は親子レコード集計後に加算する
                            // 伝票転嫁・明細転嫁
                            suplAccPayWork.TtlStockOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF"));
                            // 支払(親)転嫁
                            FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S")), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                            suplAccPayWork.TtlStockOuterTax += SetTax;
                            #endregion
                            suplAccPayWork.ThisStcPrcTax = suplAccPayWork.TtlStockInnerTax + suplAccPayWork.TtlStockOuterTax;

                            // ■返品
                            suplAccPayWork.ThisStckPricRgds = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSTCKPRICRGDSRF"));
                            suplAccPayWork.TtlItdedRetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETOUTTAXRF"));
                            suplAccPayWork.TtlItdedRetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETINTAXRF"));
                            suplAccPayWork.TtlItdedRetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETTAXFREERF"));
                            suplAccPayWork.TtlRetInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETINNERTAXRF"));
                            #region suplAccPayWork.TtlRetOuterTax [今回返品外税消費税] 
                            // 今回返品外税消費税 ※各種転嫁方式別に計算を行い、合算する 支払転嫁(子)は親子レコード集計後に加算する
                            // 伝票転嫁・明細転嫁
                            suplAccPayWork.TtlRetOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"));
                            // 支払(親)転嫁
                            FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S")), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                            suplAccPayWork.TtlRetOuterTax += SetTax;
                            #endregion
                            suplAccPayWork.ThisStcPrcTaxRgds = suplAccPayWork.TtlRetInnerTax + suplAccPayWork.TtlRetOuterTax;


                            // ■値引
                            suplAccPayWork.ThisStckPricDis = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSTCKPRICDISRF"));
                            suplAccPayWork.TtlItdedDisOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISOUTTAXRF"));
                            suplAccPayWork.TtlItdedDisInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISINTAXRF"));
                            suplAccPayWork.TtlItdedDisTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISTAXFREERF"));
                            suplAccPayWork.TtlDisInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISINNERTAXRF"));
                            #region suplAccPayWork.TtlDisOuterTax [今回値引外税消費税]
                            // 今回値引外税消費税 ※各種転嫁方式別に計算を行い、合算する 支払転嫁(子)は親子レコード集計後に加算する
                            // 伝票転嫁・明細転嫁
                            suplAccPayWork.TtlDisOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                            // 支払(親)転嫁
                            FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S")), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                            suplAccPayWork.TtlDisOuterTax += SetTax;
                            #endregion
                            suplAccPayWork.ThisStcPrcTaxDis = suplAccPayWork.TtlDisInnerTax + suplAccPayWork.TtlDisOuterTax;

                            suplAccPayWork.TaxAdjust = 0;     // 消費税調整額(0固定)
                            suplAccPayWork.BalanceAdjust = 0; // 残高調整額(0固定)
                            suplAccPayWork.StockSlipCount = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("STOCKSLIPCOUNT"));　// 伝票枚数


                            // 修正 2009/04/17 >>>
                            #region DEL 2009/04/17
                            /*
                            // 仕入合計残高(支払計) >>>
                            // 消費税転嫁区分によってセット内容変動( クエリ内で処理しきれない為、セット時に計算 )
                            if ((suplAccPayWork.SuppCTaxLayCd == 0) || (suplAccPayWork.SuppCTaxLayCd == 1) || (suplAccPayWork.SuppCTaxLayCd == 2))
                            {
                                // 消費税転嫁区分 = 0:伝票 or 1:明細 or 2:請求親
                                // 仕入合計残高(支払計) = 今回繰越金額(支払計) + (相殺後今回仕入金額 + 相殺後今回仕入消費税)
                                suplAccPayWork.StckTtlAccPayBalance = suplAccPayWork.ThisTimeTtlBlcAcPay + (suplAccPayWork.OfsThisTimeStock + suplAccPayWork.OfsThisStockTax);
                            }
                            else if ((suplAccPayWork.SuppCTaxLayCd == 3))
                            {
                                // 消費税転嫁区分 = 3:請求子
                                // 子レコード集計(相殺後外税金額) × 税率　※子レコード集計時に算出                           
                            }
                            // 仕入合計残高(支払計) <<<
                            */
                            #endregion
                            // 仕入合計残高(支払計) = 今回繰越金額(支払計) + (相殺後今回仕入金額 + 相殺後今回仕入消費税)
                            suplAccPayWork.StckTtlAccPayBalance = suplAccPayWork.ThisTimeTtlBlcAcPay + (suplAccPayWork.OfsThisTimeStock + suplAccPayWork.OfsThisStockTax);
                            // 修正 2009/04/17 <<<

                            #endregion
                        }
                        #endregion
                    }

                    // 初期化
                    if (!myReader.IsClosed) myReader.Close();
                    sqlCommand.Parameters.Clear();
                    sqlCommand.CommandText = string.Empty;
                    sqlText = string.Empty;
                    //long itdedOffsetOutTax = 0;
                    long OffsetOutTax = 0;     // 相殺外税消費税(支払(子)転嫁)
                    long StockOuterTax = 0;    // 仕入外税消費税(支払(子)転嫁)
                    long RetStockOuterTax = 0; // 返品外税消費税(支払(子)転嫁)
                    long DisStockOuterTax = 0; // 値引外税消費税(支払(子)転嫁)

                    int ChildCnt = 0;
                    double fractionProcUnit = 0;

                    #region [●親・子レコード作成処理]

                    #region SELECT文作成
                    // 修正 2009/04/17 >>>
                    #region DEL 2009/04/17
                    /*
                    sqlText += "SELECT" + Environment.NewLine;
                    //sqlText += " SUPLIERPAY.STOCKSECTIONCDRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYEECODERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYEENM1RF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYEENM2RF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYEESNMRF, " + Environment.NewLine;
                    sqlText += " SUPLIERPAY.SUPPLIERCDRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.SUPPLIERNM1RF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.SUPPLIERNM2RF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.SUPPLIERSNMRF," + Environment.NewLine;
                    //sqlText += " SUPLIERPAY.STOCKCNSTAXFRCPROCCDRF AS FRACTIONPROCCDRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.FRACTIONPROCUNITRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.FRACTIONPROCCDRF,  " + Environment.NewLine;
                    sqlText += " SUPLIERPAY.SUPPCTAXLAYCDRF," + Environment.NewLine;
                    //支払情報
                    sqlText += " SUPLIERPAY.PAYMENTMONTHCODERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYMENTDAYRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYMENTCONDRF, " + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STOCKSLIPCOUNT," + Environment.NewLine;
                    //相殺
                    sqlText += " SUPLIERPAY.THISTIMESTOCKPRICERF + SUPLIERPAY.THISSTCKPRICRGDSRF + SUPLIERPAY.THISSTCKPRICDISRF AS OFSTHISTIMESTOCKRF," + Environment.NewLine;
                    //相殺後今回仕入消費税はセット時に計算
                    sqlText += " SUPLIERPAY.TTLITDEDSTCOUTTAXRF + SUPLIERPAY.TTLITDEDRETOUTTAXRF+SUPLIERPAY.TTLITDEDDISOUTTAXRF AS ITDEDOFFSETOUTTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCINTAXRF + SUPLIERPAY.TTLITDEDRETINTAXRF+SUPLIERPAY.TTLITDEDDISINTAXRF AS ITDEDOFFSETINTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCTAXFREERF + SUPLIERPAY.TTLITDEDRETTAXFREERF+SUPLIERPAY.TTLITDEDDISTAXFREERF AS ITDEDOFFSETTAXFREERF," + Environment.NewLine;
                    //相殺後外税消費税はセット時に計算
                    sqlText += " SUPLIERPAY.STCKPRCCONSTAXINCLURF+SUPLIERPAY.TTLRETINNERTAXRF+SUPLIERPAY.STCKDISTTLTAXINCLURF AS OFFSETINTAXRF," + Environment.NewLine;
                    //仕入
                    sqlText += " SUPLIERPAY.THISTIMESTOCKPRICERF AS THISTIMESTOCKPRICERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STOCKOUTTAXRF+SUPLIERPAY.STCKPRCCONSTAXINCLURF AS THISSTCPRCTAXRF, --今回消費税" + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCOUTTAXRF AS TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCINTAXRF AS TTLITDEDSTCINTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCTAXFREERF AS TTLITDEDSTCTAXFREERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STOCKOUTTAXRF AS TTLSTOCKOUTERTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STCKPRCCONSTAXINCLURF AS TTLSTOCKINNERTAXRF," + Environment.NewLine;
                    //返品
                    sqlText += " SUPLIERPAY.THISSTCKPRICRGDSRF AS THISSTCKPRICRGDSRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF+SUPLIERPAY.TTLRETINNERTAXRF AS THISSTCPRCTAXRGDSRF, --今回消費税" + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDRETOUTTAXRF AS TTLITDEDRETOUTTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDRETINTAXRF AS TTLITDEDRETINTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDRETTAXFREERF AS TTLITDEDRETTAXFREERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF AS TTLRETOUTERTAXRF," + Environment.NewLine;                   
                    sqlText += " SUPLIERPAY.TTLRETINNERTAXRF AS TTLRETINNERTAXRF," + Environment.NewLine;
                    //値引
                    sqlText += " SUPLIERPAY.THISSTCKPRICDISRF AS THISSTCKPRICDISRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF+SUPLIERPAY.STCKDISTTLTAXINCLURF AS THISSTCPRCTAXDISRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDDISOUTTAXRF AS TTLITDEDDISOUTTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDDISINTAXRF AS TTLITDEDDISINTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDDISTAXFREERF AS TTLITDEDDISTAXFREERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF AS TTLDISOUTERTAXRF," + Environment.NewLine;                    
                    sqlText += " SUPLIERPAY.STCKDISTTLTAXINCLURF AS TTLDISINNERTAXRF" + Environment.NewLine;
                    sqlText += " FROM" + Environment.NewLine;
                    sqlText += "(" + Environment.NewLine;
                    */
                    #endregion
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYEECODERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYEENM1RF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYEENM2RF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYEESNMRF, " + Environment.NewLine;
                    sqlText += " SUPLIERPAY.SUPPLIERCDRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.SUPPLIERNM1RF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.SUPPLIERNM2RF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.SUPPLIERSNMRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.FRACTIONPROCUNITRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.FRACTIONPROCCDRF,  " + Environment.NewLine;
                    sqlText += " SUPLIERPAY.SUPPCTAXLAYCDRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYMENTMONTHCODERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYMENTDAYRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYMENTCONDRF, " + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STOCKSLIPCOUNT," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.THISTIMESTOCKPRICERF + SUPLIERPAY.THISSTCKPRICRGDSRF + SUPLIERPAY.THISSTCKPRICDISRF AS OFSTHISTIMESTOCKRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCOUTTAXRF + SUPLIERPAY.TTLITDEDRETOUTTAXRF+SUPLIERPAY.TTLITDEDDISOUTTAXRF AS ITDEDOFFSETOUTTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCINTAXRF + SUPLIERPAY.TTLITDEDRETINTAXRF+SUPLIERPAY.TTLITDEDDISINTAXRF AS ITDEDOFFSETINTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCTAXFREERF + SUPLIERPAY.TTLITDEDRETTAXFREERF+SUPLIERPAY.TTLITDEDDISTAXFREERF AS ITDEDOFFSETTAXFREERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STCKPRCCONSTAXINCLURF+SUPLIERPAY.TTLRETINNERTAXRF+SUPLIERPAY.STCKDISTTLTAXINCLURF AS OFFSETINTAXRF," + Environment.NewLine;
                    //■ ■ 仕入 ■ ■
                    sqlText += " SUPLIERPAY.THISTIMESTOCKPRICERF AS THISTIMESTOCKPRICERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCOUTTAXRF AS TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCINTAXRF AS TTLITDEDSTCINTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCTAXFREERF AS TTLITDEDSTCTAXFREERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STCKPRCCONSTAXINCLURF AS TTLSTOCKINNERTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STOCKOUTTAXRF AS TTLSTOCKOUTERTAXRF,-- 伝票転嫁・明細転嫁　仕入金額消費税額（外税）" + Environment.NewLine;
                    //sqlText += " SUPLIERPAY.STOCKOUTTAXRF1+SUPLIERPAY.STOCKOUTTAXRF2+SUPLIERPAY.STOCKOUTTAXRF3 AS TTLSTOCKOUTERTAXRF_S,--支払(親)転嫁　仕入金額消費税額（外税）" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " SUPLIERPAY.STOCKOUTTAXRF1*TAXRATERF+SUPLIERPAY.STOCKOUTTAXRF2*TAXRATE2RF+SUPLIERPAY.STOCKOUTTAXRF3*TAXRATE3RF AS TTLSTOCKOUTERTAXRF_S,--支払(親)転嫁　仕入金額消費税額（外税）" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    //sqlText += " SUPLIERPAY.STOCKOUTTAXRF1_2+SUPLIERPAY.STOCKOUTTAXRF2_2+SUPLIERPAY.STOCKOUTTAXRF3_2 AS TTLSTOCKOUTERTAXRF_S2,--支払(子)転嫁　仕入金額消費税額（外税）" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " SUPLIERPAY.STOCKOUTTAXRF1_2*TAXRATERF+SUPLIERPAY.STOCKOUTTAXRF2_2*TAXRATE2RF+SUPLIERPAY.STOCKOUTTAXRF3_2*TAXRATE3RF AS TTLSTOCKOUTERTAXRF_S2,--支払(子)転嫁　仕入金額消費税額（外税）" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    //■ ■ 返品 ■ ■
                    sqlText += " SUPLIERPAY.THISSTCKPRICRGDSRF AS THISSTCKPRICRGDSRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDRETOUTTAXRF AS TTLITDEDRETOUTTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDRETINTAXRF AS TTLITDEDRETINTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDRETTAXFREERF AS TTLITDEDRETTAXFREERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLRETINNERTAXRF AS TTLRETINNERTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF AS TTLRETOUTERTAXRF,-- 伝票転嫁・明細転嫁　返品金額消費税額（外税）" + Environment.NewLine;
                    //sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1+SUPLIERPAY.TTLRETOUTERTAXRF2+SUPLIERPAY.TTLRETOUTERTAXRF3 AS TTLRETOUTERTAXRF_S,-- 支払(親)転嫁　返品金額消費税額（外税） " + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1*TAXRATERF+SUPLIERPAY.TTLRETOUTERTAXRF2*TAXRATE2RF+SUPLIERPAY.TTLRETOUTERTAXRF3*TAXRATE3RF AS TTLRETOUTERTAXRF_S,-- 支払(親)転嫁　返品金額消費税額（外税） " + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    //sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1_2+SUPLIERPAY.TTLRETOUTERTAXRF2_2+SUPLIERPAY.TTLRETOUTERTAXRF3_2 AS TTLRETOUTERTAXRF_S2,-- 支払(子)転嫁　返品金額消費税額（外税）" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1_2*TAXRATERF+SUPLIERPAY.TTLRETOUTERTAXRF2_2*TAXRATE2RF+SUPLIERPAY.TTLRETOUTERTAXRF3_2*TAXRATE3RF AS TTLRETOUTERTAXRF_S2,-- 支払(子)転嫁　返品金額消費税額（外税）" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    //■ ■ 値引 ■ ■
                    sqlText += " SUPLIERPAY.THISSTCKPRICDISRF AS THISSTCKPRICDISRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDDISOUTTAXRF AS TTLITDEDDISOUTTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDDISINTAXRF AS TTLITDEDDISINTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDDISTAXFREERF AS TTLITDEDDISTAXFREERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STCKDISTTLTAXINCLURF AS TTLDISINNERTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF AS TTLDISOUTERTAXRF,-- 伝票転嫁・明細転嫁  値引消費税額（外税） " + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += " SUPLIERPAY.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TAXRATE3RF AS TAXRATE3RF," + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    //sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1+SUPLIERPAY.STOCKDISOUTTAXRF2+SUPLIERPAY.STOCKDISOUTTAXRF3 AS TTLDISOUTERTAXRF_S, -- 支払(親)  値引消費税額（外税） " + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1*TAXRATERF+SUPLIERPAY.STOCKDISOUTTAXRF2*TAXRATE2RF+SUPLIERPAY.STOCKDISOUTTAXRF3*TAXRATE3RF AS TTLDISOUTERTAXRF_S, -- 支払(親)  値引消費税額（外税） " + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    //sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1_2+SUPLIERPAY.STOCKDISOUTTAXRF2_2+SUPLIERPAY.STOCKDISOUTTAXRF3_2 AS TTLDISOUTERTAXRF_S2 -- 支払(子)  値引消費税額（外税）" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1_2*TAXRATERF+SUPLIERPAY.STOCKDISOUTTAXRF2_2*TAXRATE2RF+SUPLIERPAY.STOCKDISOUTTAXRF3_2*TAXRATE3RF AS TTLDISOUTERTAXRF_S2 -- 支払(子)  値引消費税額（外税）" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " FROM" + Environment.NewLine;
                    sqlText += "(" + Environment.NewLine;
                    // 修正 2009/04/17 <<<

                    #region SUBクエリ
                    // 修正 2009/04/17 >>>
                    #region DEL 2009/04/17
                    /*
                    sqlText += " SELECT" + Environment.NewLine;
                    //sqlText += "  STOCK.STOCKSECTIONCDRF," + Environment.NewLine;
                    sqlText += "  STOCK.PAYEECODERF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.SUPPLIERNM1RF AS PAYEENM1RF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.SUPPLIERNM2RF AS PAYEENM2RF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.SUPPLIERSNMRF AS PAYEESNMRF," + Environment.NewLine;
                    sqlText += "  STOCK.SUPPLIERCDRF," + Environment.NewLine;
                    sqlText += "  KOSUPPLIER.SUPPLIERNM1RF," + Environment.NewLine;
                    sqlText += "  KOSUPPLIER.SUPPLIERNM2RF," + Environment.NewLine;
                    sqlText += "  KOSUPPLIER.SUPPLIERSNMRF,  " + Environment.NewLine;
                    sqlText += "  SUPPLIER.STOCKCNSTAXFRCPROCCDRF," + Environment.NewLine;
                    sqlText += "  PROCMONEY.FRACTIONPROCUNITRF," + Environment.NewLine;
                    sqlText += "  PROCMONEY.FRACTIONPROCCDRF, " + Environment.NewLine;
                    sqlText += "  SUPPLIER.SUPPCTAXLAYCDRF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.PAYMENTMONTHCODERF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.PAYMENTDAYRF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.PAYMENTCONDRF," + Environment.NewLine;
                    sqlText += "  COUNT(STOCK.SUPPLIERSLIPNORF) STOCKSLIPCOUNT, --伝票枚数" + Environment.NewLine;
                    //仕入
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STOCKNETPRICERF ELSE 0 END)) AS THISTIMESTOCKPRICERF,       --仕入正価金額" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCOUTTAXRF ELSE 0 END)) AS TTLITDEDSTCOUTTAXRF,    --仕入外税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCINTAXRF ELSE 0 END)) AS TTLITDEDSTCINTAXRF,      --仕入内税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCTAXFREERF ELSE 0 END)) AS TTLITDEDSTCTAXFREERF,  --仕入非課税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STOCKOUTTAXRF ELSE 0 END)) AS STOCKOUTTAXRF,                --仕入金額消費税額（外税）" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS STCKPRCCONSTAXINCLURF,--仕入金額消費税額（内税）" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS STOCKOUTTAXRF1,                     --売上金額消費税額（外税）税率1" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS STOCKOUTTAXRF2,                          --売上金額消費税額（外税）税率2" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS STOCKOUTTAXRF3,                          --売上金額消費税額（外税）税率3" + Environment.NewLine;
                    //返品
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STOCKNETPRICERF ELSE 0 END)) AS THISSTCKPRICRGDSRF,         --返品正価金額" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCOUTTAXRF ELSE 0 END)) AS TTLITDEDRETOUTTAXRF,    --返品外税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCINTAXRF ELSE 0 END)) AS TTLITDEDRETINTAXRF,      --返品内税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCTAXFREERF ELSE 0 END)) AS TTLITDEDRETTAXFREERF,  --返品非課税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STOCKOUTTAXRF ELSE 0 END)) AS TTLRETOUTERTAXRF,             --返品金額消費税額（外税）" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS TTLRETINNERTAXRF,     --返品金額消費税額（内税）" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS TTLRETOUTERTAXRF1,                  --売上金額消費税額（外税）税率1" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS TTLRETOUTERTAXRF2,                       --売上金額消費税額（外税）税率2" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "           THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS TTLRETOUTERTAXRF3,                        --売上金額消費税額（外税）税率3" + Environment.NewLine;
                    //値引
                    sqlText += "  SUM(STOCK.STCKDISTTLTAXEXCRF) AS THISSTCKPRICDISRF,      --値引金額計（税抜き）" + Environment.NewLine;
                    sqlText += "  SUM(STOCK.ITDEDSTOCKDISOUTTAXRF) AS TTLITDEDDISOUTTAXRF, --値引外税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM(STOCK.ITDEDSTOCKDISINTAXRF) AS TTLITDEDDISINTAXRF,   --値引内税対象額合計 " + Environment.NewLine;
                    sqlText += "  SUM(STOCK.ITDEDSTOCKDISTAXFRERF) AS TTLITDEDDISTAXFREERF,--値引非課税対象額合計   " + Environment.NewLine;
                    sqlText += "  SUM(STOCK.STOCKDISOUTTAXRF) AS STOCKDISOUTTAXRF,         --値引消費税額（外税）" + Environment.NewLine;
                    sqlText += "  SUM(STOCK.STCKDISTTLTAXINCLURF) AS STCKDISTTLTAXINCLURF,  --値引消費税額（内税）" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATERF)ELSE 0 END)) AS STOCKDISOUTTAXRF1,             --売上値引消費税額（外税）税率1" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE2RF)ELSE 0 END)) AS STOCKDISOUTTAXRF2,            --売上値引消費税額（外税）税率2" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE3RF)ELSE 0 END)) AS STOCKDISOUTTAXRF3            --売上値引消費税額（外税）税率3" + Environment.NewLine;
                    sqlText += "  FROM" + Environment.NewLine;
                    sqlText += "  (" + Environment.NewLine;
                    */
                    #endregion
                    sqlText += " SELECT" + Environment.NewLine;
                    // -- ADD 2009/10/23 --------------------------------------->>>
                    sqlText += "  STOCK.STOCKSECTIONCDRF, " + Environment.NewLine;
                    // -- ADD 2009/10/23 ---------------------------------------<<<
                    sqlText += "  STOCK.PAYEECODERF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.SUPPLIERNM1RF AS PAYEENM1RF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.SUPPLIERNM2RF AS PAYEENM2RF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.SUPPLIERSNMRF AS PAYEESNMRF," + Environment.NewLine;
                    sqlText += "  STOCK.SUPPLIERCDRF," + Environment.NewLine;
                    sqlText += "  KOSUPPLIER.SUPPLIERNM1RF," + Environment.NewLine;
                    sqlText += "  KOSUPPLIER.SUPPLIERNM2RF," + Environment.NewLine;
                    sqlText += "  KOSUPPLIER.SUPPLIERSNMRF,  " + Environment.NewLine;
                    sqlText += "  SUPPLIER.STOCKCNSTAXFRCPROCCDRF," + Environment.NewLine;
                    sqlText += "  PROCMONEY.FRACTIONPROCUNITRF," + Environment.NewLine;
                    sqlText += "  PROCMONEY.FRACTIONPROCCDRF, " + Environment.NewLine;
                    sqlText += "  SUPPLIER.SUPPCTAXLAYCDRF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.PAYMENTMONTHCODERF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.PAYMENTDAYRF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.PAYMENTCONDRF," + Environment.NewLine;
                    sqlText += "  COUNT(STOCK.SUPPLIERSLIPNORF) STOCKSLIPCOUNT, --伝票枚数" + Environment.NewLine;
                    // 仕入
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STOCKNETPRICERF ELSE 0 END)) AS THISTIMESTOCKPRICERF,       --仕入正価金額" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCOUTTAXRF ELSE 0 END)) AS TTLITDEDSTCOUTTAXRF,    --仕入外税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCINTAXRF ELSE 0 END)) AS TTLITDEDSTCINTAXRF,      --仕入内税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCTAXFREERF ELSE 0 END)) AS TTLITDEDSTCTAXFREERF,  --仕入非課税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS STCKPRCCONSTAXINCLURF,--仕入金額消費税額（内税）" + Environment.NewLine;
                    // 伝票転嫁・明細転嫁　仕入金額消費税額（外税）
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 0 OR STOCK.SUPPCTAXLAYCDRF= 1) AND (STOCK.SUPPLIERSLIPCDRF =10) THEN STOCK.STOCKOUTTAXRF ELSE 0 END)) AS STOCKOUTTAXRF," + Environment.NewLine;
                    // 支払(親)転嫁　仕入金額消費税額（外税）
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS STOCKOUTTAXRF1,--税率1" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS STOCKOUTTAXRF2,     --税率2" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS STOCKOUTTAXRF3,     --税率3" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF1,--税率1" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF2,     --税率2" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF3,     --税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // 支払(子)転嫁　仕入金額消費税額（外税）
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS STOCKOUTTAXRF1_2,--税率1" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS STOCKOUTTAXRF2_2,     --税率2" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS STOCKOUTTAXRF3_2,     --税率3" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF1_2,--税率1" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF2_2,     --税率2" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF3_2,     --税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // 返品
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STOCKNETPRICERF ELSE 0 END)) AS THISSTCKPRICRGDSRF,         --返品正価金額" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCOUTTAXRF ELSE 0 END)) AS TTLITDEDRETOUTTAXRF,    --返品外税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCINTAXRF ELSE 0 END)) AS TTLITDEDRETINTAXRF,      --返品内税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCTAXFREERF ELSE 0 END)) AS TTLITDEDRETTAXFREERF,  --返品非課税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS TTLRETINNERTAXRF,     --返品金額消費税額（内税）" + Environment.NewLine;
                    // 伝票転嫁・明細転嫁　返品金額消費税額（外税）
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 0 OR STOCK.SUPPCTAXLAYCDRF= 1) AND (STOCK.SUPPLIERSLIPCDRF =20) THEN STOCK.STOCKOUTTAXRF ELSE 0 END)) AS TTLRETOUTERTAXRF," + Environment.NewLine;
                    // 支払(親)　返品金額消費税額（外税）
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS TTLRETOUTERTAXRF1,--税率1" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS TTLRETOUTERTAXRF2,     --税率2" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    //sqlText += "           THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS TTLRETOUTERTAXRF3,      --税率3" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF1,--税率1" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF2,     --税率2" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "           THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF3,      --税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // 支払(子)　返品金額消費税額（外税）
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS TTLRETOUTERTAXRF1_2,--税率1" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS TTLRETOUTERTAXRF2_2,     --税率2" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    //sqlText += "           THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS TTLRETOUTERTAXRF3_2,      --税率3" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF1_2,--税率1" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF2_2,     --税率2" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF3_2,     --税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    //値引
                    sqlText += "  SUM(STOCK.STCKDISTTLTAXEXCRF) AS THISSTCKPRICDISRF,      --値引金額計（税抜き）" + Environment.NewLine;
                    sqlText += "  SUM(STOCK.ITDEDSTOCKDISOUTTAXRF) AS TTLITDEDDISOUTTAXRF, --値引外税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM(STOCK.ITDEDSTOCKDISINTAXRF) AS TTLITDEDDISINTAXRF,   --値引内税対象額合計 " + Environment.NewLine;
                    sqlText += "  SUM(STOCK.ITDEDSTOCKDISTAXFRERF) AS TTLITDEDDISTAXFREERF,--値引非課税対象額合計   " + Environment.NewLine;
                    sqlText += "  SUM(STOCK.STCKDISTTLTAXINCLURF) AS STCKDISTTLTAXINCLURF,  --値引消費税額（内税）" + Environment.NewLine;
                    // 伝票転嫁・明細転嫁  値引消費税額（外税）
                    sqlText += "  SUM(CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 0 OR STOCK.SUPPCTAXLAYCDRF= 1) THEN STOCK.STOCKDISOUTTAXRF ELSE 0 END ) AS STOCKDISOUTTAXRF," + Environment.NewLine;
                    // 支払(親)　値引金額消費税額（外税）
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATERF)ELSE 0 END)) AS STOCKDISOUTTAXRF1, --税率1" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE2RF)ELSE 0 END)) AS STOCKDISOUTTAXRF2,--税率2" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE3RF)ELSE 0 END)) AS STOCKDISOUTTAXRF3,--税率3" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF1, --税率1" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF2,--税率2" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF3,--税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // 支払(子)　値引金額消費税額（外税）
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATERF)ELSE 0 END)) AS STOCKDISOUTTAXRF1_2, --税率1" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE2RF)ELSE 0 END)) AS STOCKDISOUTTAXRF2_2,--税率2" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE3RF)ELSE 0 END)) AS STOCKDISOUTTAXRF3_2 --税率3" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "  STOCK.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                    sqlText += "  STOCK.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                    sqlText += "  STOCK.TAXRATE3RF AS TAXRATE3RF," + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF1_2, --税率1" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF2_2,--税率2" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF3_2 --税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    sqlText += "  FROM" + Environment.NewLine;
                    sqlText += "  (" + Environment.NewLine;
                    // 修正 2009/04/17 <<<

                    #region SUBSUBクエリ
                    // 修正 2009/04/17 >>>
                    #region DEL 2009/04/17
                    /*
                    sqlText += "   SELECT" + Environment.NewLine;
                    sqlText += "    SUBSTOCK.LOGICALDELETECODERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.ENTERPRISECODERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.SUPPLIERFORMALRF, --仕入形式" + Environment.NewLine;
                    sqlText += "    SUBSTOCK.DEBITNOTEDIVRF,   --赤伝区分" + Environment.NewLine;
                    sqlText += "    SUBSTOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STOCKGOODSCDRF,   --仕入商品区分" + Environment.NewLine;
                    sqlText += "    SUBSTOCK.SUPPLIERSLIPNORF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STOCKADDUPADATERF," + Environment.NewLine;
                    sqlText += "    (CASE WHEN (SEARCHSUPPLIER.PAYEECODERF IS NOT NULL) THEN SEARCHSUPPLIER.PAYEECODERF ELSE SUBSTOCK.PAYEECODERF END) AS PAYEECODERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.SUPPLIERCDRF," + Environment.NewLine;
                    //sqlText += "    SUBSTOCK.STOCKSECTIONCDRF," + Environment.NewLine;
                    // 修正 2009.03.24 >>>
                    #region DEL 2009.03.24
                    ////仕入・返品
                    //sqlText += "    SUBSTOCK.STOCKNETPRICERF," + Environment.NewLine;
                    //sqlText += "    SUBSTOCK.TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
                    //sqlText += "    SUBSTOCK.TTLITDEDSTCINTAXRF," + Environment.NewLine;
                    //sqlText += "    SUBSTOCK.TTLITDEDSTCTAXFREERF," + Environment.NewLine;
                    //sqlText += "    SUBSTOCK.STOCKOUTTAXRF," + Environment.NewLine;
                    //sqlText += "    SUBSTOCK.STCKPRCCONSTAXINCLURF," + Environment.NewLine;
                    ////値引
                    //sqlText += "    SUBSTOCK.STCKDISTTLTAXEXCRF," + Environment.NewLine;
                    //sqlText += "    SUBSTOCK.ITDEDSTOCKDISOUTTAXRF," + Environment.NewLine;
                    //sqlText += "    SUBSTOCK.ITDEDSTOCKDISINTAXRF," + Environment.NewLine;
                    //sqlText += "    SUBSTOCK.ITDEDSTOCKDISTAXFRERF," + Environment.NewLine;
                    //sqlText += "    SUBSTOCK.STOCKDISOUTTAXRF," + Environment.NewLine;
                    //sqlText += "    SUBSTOCK.STCKDISTTLTAXINCLURF," + Environment.NewLine;
                    #endregion 
                    //仕入・返品(行値引含む)
                    sqlText += "    SUBSTOCK.STOCKNETPRICERF + SUBSTOCKDTL.DISSTOCKPRICETAXEXCGYO AS STOCKNETPRICERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.TTLITDEDSTCOUTTAXRF + SUBSTOCKDTL.ITDEDSTOCKDISOUTTAXGYO AS TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.TTLITDEDSTCINTAXRF + SUBSTOCKDTL.ITDEDSTOCKDISINTAXGYO AS TTLITDEDSTCINTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.TTLITDEDSTCTAXFREERF + SUBSTOCKDTL.ITDEDSTOCKDISFREETAXGYO AS TTLITDEDSTCTAXFREERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STOCKOUTTAXRF + SUBSTOCKDTL.STOCKDISOUTTAXGYO AS STOCKOUTTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STCKPRCCONSTAXINCLURF + SUBSTOCKDTL.STOCKDISINTAXGYO AS STCKPRCCONSTAXINCLURF," + Environment.NewLine;
                    //値引(行値引除く)
                    //sqlText += "    SUBSTOCKDTL.DISSTOCKPRICETAXEXCGOODS AS STCKDISTTLTAXEXCRF," + Environment.NewLine;
                    //sqlText += "    SUBSTOCKDTL.ITDEDSTOCKDISOUTTAXGOODS AS ITDEDSTOCKDISOUTTAXRF, -- 外税対象額(商品値引)" + Environment.NewLine;
                    //sqlText += "    SUBSTOCKDTL.ITDEDSTOCKDISFREETAXGOODS AS ITDEDSTOCKDISTAXFRERF,-- 非課税対象額(商品値引)" + Environment.NewLine;
                    //sqlText += "    SUBSTOCKDTL.ITDEDSTOCKDISINTAXGOODS AS ITDEDSTOCKDISINTAXRF,  -- 内税対象額(商品値引)" + Environment.NewLine;
                    //sqlText += "    SUBSTOCKDTL.STOCKDISOUTTAXGOODS AS STOCKDISOUTTAXRF, -- 外税額(商品値引)" + Environment.NewLine;
                    //sqlText += "    SUBSTOCKDTL.STOCKDISINTAXGOODS AS STCKDISTTLTAXINCLURF,  -- 内税額(商品値引)" + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STCKDISTTLTAXEXCRF - SUBSTOCKDTL.DISSTOCKPRICETAXEXCGYO AS STCKDISTTLTAXEXCRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.ITDEDSTOCKDISOUTTAXRF - SUBSTOCKDTL.ITDEDSTOCKDISOUTTAXGYO AS ITDEDSTOCKDISOUTTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.ITDEDSTOCKDISINTAXRF - SUBSTOCKDTL.ITDEDSTOCKDISINTAXGYO AS ITDEDSTOCKDISINTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.ITDEDSTOCKDISTAXFRERF - SUBSTOCKDTL.ITDEDSTOCKDISFREETAXGYO AS ITDEDSTOCKDISTAXFRERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STOCKDISOUTTAXRF - SUBSTOCKDTL.STOCKDISOUTTAXGYO AS STOCKDISOUTTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STCKDISTTLTAXINCLURF - SUBSTOCKDTL.STOCKDISINTAXGYO AS STCKDISTTLTAXINCLURF," + Environment.NewLine;
                    // 修正 2009.03.24 <<<
                    sqlText += "    TAX.TAXRATESTARTDATERF AS TAXRATESTARTDATERF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATEENDDATERF AS TAXRATEENDDATERF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATE3RF AS TAXRATE3RF" + Environment.NewLine;
                    sqlText += "   FROM" + Environment.NewLine;
                    sqlText += "    STOCKSLIPRF AS SUBSTOCK" + Environment.NewLine;
                    sqlText += "    LEFT JOIN TAXRATESETRF AS TAX" + Environment.NewLine;
                    sqlText += "     ON SUBSTOCK.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    LEFT JOIN SUPPLIERRF AS SEARCHSUPPLIER" + Environment.NewLine;
                    sqlText += "     ON SUBSTOCK.ENTERPRISECODERF = SEARCHSUPPLIER.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "     AND SUBSTOCK.SUPPLIERCDRF = SEARCHSUPPLIER.SUPPLIERCDRF" + Environment.NewLine;
                    // ADD 2009.03.24 >>>
                    sqlText += "    LEFT JOIN" + Environment.NewLine;
                    sqlText += "    ( " + Environment.NewLine;
                    sqlText += "      SELECT" + Environment.NewLine;
                    sqlText += "       STOCK.ENTERPRISECODERF," + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERFORMALRF, --受注ステータス" + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERSLIPNORF, --仕入伝票番号 " + Environment.NewLine;
                    sqlText += "       -- 行値引" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS DISSTOCKPRICETAXEXCGYO," + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 0 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISOUTTAXGYO, -- 外税対象額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 1 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISFREETAXGYO,-- 非課税対象額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 2 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISINTAXGYO,  -- 内税対象額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 0 ) THEN DTL.STOCKPRICECONSTAXRF ELSE 0 END) AS STOCKDISOUTTAXGYO, -- 外税額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 2 ) THEN DTL.STOCKPRICECONSTAXRF ELSE 0 END) AS STOCKDISINTAXGYO  -- 内税額(行値引)" + Environment.NewLine;
                    sqlText += "      FROM" + Environment.NewLine;
                    sqlText += "       STOCKDETAILRF AS DTL" + Environment.NewLine;
                    sqlText += "      LEFT JOIN STOCKSLIPRF AS STOCK" + Environment.NewLine;
                    sqlText += "       ON DTL.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "       AND DTL.SUPPLIERFORMALRF = STOCK.SUPPLIERFORMALRF" + Environment.NewLine;
                    sqlText += "       AND DTL.SUPPLIERSLIPNORF = STOCK.SUPPLIERSLIPNORF" + Environment.NewLine;
                    sqlText += "      GROUP BY" + Environment.NewLine;
                    sqlText += "       STOCK.ENTERPRISECODERF," + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERFORMALRF, --受注ステータス" + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERSLIPNORF --仕入伝票番号 " + Environment.NewLine;
                    sqlText += "    ) AS SUBSTOCKDTL" + Environment.NewLine;
                    sqlText += "    ON  SUBSTOCK.ENTERPRISECODERF = SUBSTOCKDTL.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    AND SUBSTOCK.SUPPLIERFORMALRF = SUBSTOCKDTL.SUPPLIERFORMALRF" + Environment.NewLine;
                    sqlText += "    AND SUBSTOCK.SUPPLIERSLIPNORF = SUBSTOCKDTL.SUPPLIERSLIPNORF" + Environment.NewLine;
                    // ADD 2009.03.24 <<<
                    */
                    #endregion
                    sqlText += "   SELECT" + Environment.NewLine;
                    // -- ADD 2009/10/23 --------------------------------------->>>
                    sqlText += "    SUBSTOCK.STOCKSECTIONCDRF, " + Environment.NewLine;
                    // -- ADD 2009/10/23 ---------------------------------------<<<
                    sqlText += "    SUBSTOCK.LOGICALDELETECODERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.ENTERPRISECODERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.SUPPCTAXLAYCDRF, --消費税転嫁方式(仕入データ) " + Environment.NewLine;
                    sqlText += "    SUBSTOCK.SUPPLIERFORMALRF,--仕入形式" + Environment.NewLine;
                    sqlText += "    SUBSTOCK.DEBITNOTEDIVRF,  --赤伝区分" + Environment.NewLine;
                    sqlText += "    SUBSTOCK.SUPPLIERSLIPCDRF,--仕入伝票区分" + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STOCKGOODSCDRF,  --仕入商品区分" + Environment.NewLine;
                    sqlText += "    SUBSTOCK.SUPPLIERSLIPNORF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STOCKADDUPADATERF," + Environment.NewLine;
                    sqlText += "    (CASE WHEN (SEARCHSUPPLIER.PAYEECODERF IS NOT NULL) THEN SEARCHSUPPLIER.PAYEECODERF ELSE SUBSTOCK.PAYEECODERF END) AS PAYEECODERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.SUPPLIERCDRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STOCKNETPRICERF + SUBSTOCKDTL.DISSTOCKPRICETAXEXCGYO AS STOCKNETPRICERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.TTLITDEDSTCOUTTAXRF + SUBSTOCKDTL.ITDEDSTOCKDISOUTTAXGYO AS TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.TTLITDEDSTCINTAXRF + SUBSTOCKDTL.ITDEDSTOCKDISINTAXGYO AS TTLITDEDSTCINTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.TTLITDEDSTCTAXFREERF + SUBSTOCKDTL.ITDEDSTOCKDISFREETAXGYO AS TTLITDEDSTCTAXFREERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STOCKOUTTAXRF + SUBSTOCKDTL.STOCKDISOUTTAXGYO AS STOCKOUTTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STCKPRCCONSTAXINCLURF + SUBSTOCKDTL.STOCKDISINTAXGYO AS STCKPRCCONSTAXINCLURF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STCKDISTTLTAXEXCRF - SUBSTOCKDTL.DISSTOCKPRICETAXEXCGYO AS STCKDISTTLTAXEXCRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.ITDEDSTOCKDISOUTTAXRF - SUBSTOCKDTL.ITDEDSTOCKDISOUTTAXGYO AS ITDEDSTOCKDISOUTTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.ITDEDSTOCKDISINTAXRF - SUBSTOCKDTL.ITDEDSTOCKDISINTAXGYO AS ITDEDSTOCKDISINTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.ITDEDSTOCKDISTAXFRERF - SUBSTOCKDTL.ITDEDSTOCKDISFREETAXGYO AS ITDEDSTOCKDISTAXFRERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STOCKDISOUTTAXRF - SUBSTOCKDTL.STOCKDISOUTTAXGYO AS STOCKDISOUTTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STCKDISTTLTAXINCLURF - SUBSTOCKDTL.STOCKDISINTAXGYO AS STCKDISTTLTAXINCLURF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATESTARTDATERF AS TAXRATESTARTDATERF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATEENDDATERF AS TAXRATEENDDATERF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATE3RF AS TAXRATE3RF" + Environment.NewLine;
                    sqlText += "   FROM" + Environment.NewLine;
                    // --UPD 2011/03/15 -------------------------->>>
                    //sqlText += "    STOCKSLIPRF AS SUBSTOCK" + Environment.NewLine;
                    //sqlText += "    LEFT JOIN TAXRATESETRF AS TAX" + Environment.NewLine;
                    sqlText += "    STOCKSLIPRF AS SUBSTOCK WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "    LEFT JOIN TAXRATESETRF AS TAX WITH (READUNCOMMITTED)" + Environment.NewLine;
                    // --UPD 2011/03/15 --------------------------<<<
                    sqlText += "     ON SUBSTOCK.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
                    // --UPD 2011/03/15 -------------------------->>>
                    //sqlText += "    LEFT JOIN SUPPLIERRF AS SEARCHSUPPLIER" + Environment.NewLine;
                    sqlText += "    LEFT JOIN SUPPLIERRF AS SEARCHSUPPLIER WITH (READUNCOMMITTED)" + Environment.NewLine;
                    // --UPD 2011/03/15 --------------------------<<<
                    sqlText += "     ON SUBSTOCK.ENTERPRISECODERF = SEARCHSUPPLIER.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "     AND SUBSTOCK.SUPPLIERCDRF = SEARCHSUPPLIER.SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += "    LEFT JOIN" + Environment.NewLine;
                    sqlText += "    ( " + Environment.NewLine;
                    sqlText += "      SELECT" + Environment.NewLine;
                    sqlText += "       STOCK.ENTERPRISECODERF," + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERFORMALRF, --受注ステータス" + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERSLIPNORF, --仕入伝票番号 " + Environment.NewLine;
                    sqlText += "       -- 行値引" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS DISSTOCKPRICETAXEXCGYO," + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 0 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISOUTTAXGYO, -- 外税対象額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 1 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISFREETAXGYO,-- 非課税対象額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 2 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISINTAXGYO,  -- 内税対象額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 0 ) THEN DTL.STOCKPRICECONSTAXRF ELSE 0 END) AS STOCKDISOUTTAXGYO, -- 外税額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 2 ) THEN DTL.STOCKPRICECONSTAXRF ELSE 0 END) AS STOCKDISINTAXGYO  -- 内税額(行値引)" + Environment.NewLine;
                    sqlText += "      FROM" + Environment.NewLine;
                    // --UPD 2011/03/15 -------------------------->>>
                    //sqlText += "       STOCKDETAILRF AS DTL" + Environment.NewLine;
                    //sqlText += "      LEFT JOIN STOCKSLIPRF AS STOCK" + Environment.NewLine;
                    sqlText += "       STOCKDETAILRF AS DTL WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "      LEFT JOIN STOCKSLIPRF AS STOCK WITH (READUNCOMMITTED)" + Environment.NewLine;
                    // --UPD 2011/03/15 --------------------------<<<
                    sqlText += "       ON DTL.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "       AND DTL.SUPPLIERFORMALRF = STOCK.SUPPLIERFORMALRF" + Environment.NewLine;
                    sqlText += "       AND DTL.SUPPLIERSLIPNORF = STOCK.SUPPLIERSLIPNORF" + Environment.NewLine;
                    sqlText += "      GROUP BY" + Environment.NewLine;
                    sqlText += "       STOCK.ENTERPRISECODERF," + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERFORMALRF, --受注ステータス" + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERSLIPNORF  --仕入伝票番号 " + Environment.NewLine;
                    sqlText += "    ) AS SUBSTOCKDTL" + Environment.NewLine;
                    sqlText += "    ON  SUBSTOCK.ENTERPRISECODERF = SUBSTOCKDTL.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    AND SUBSTOCK.SUPPLIERFORMALRF = SUBSTOCKDTL.SUPPLIERFORMALRF" + Environment.NewLine;
                    sqlText += "    AND SUBSTOCK.SUPPLIERSLIPNORF = SUBSTOCKDTL.SUPPLIERSLIPNORF" + Environment.NewLine;
                    // 修正 2009/04/17 <<<
                    #endregion

                    #region WHERE句
                    sqlText += "   WHERE SUBSTOCK.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    AND  (CASE WHEN (SEARCHSUPPLIER.PAYEECODERF IS NOT NULL) THEN SEARCHSUPPLIER.PAYEECODERF ELSE SUBSTOCK.PAYEECODERF END)=@FINDCUSTOMERCODE" + Environment.NewLine;
                    sqlText += "    AND (SUBSTOCK.STOCKADDUPADATERF<=@FINDADDUPDATE AND SUBSTOCK.STOCKADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
                    sqlText += "    AND  SUBSTOCK.LOGICALDELETECODERF=0" + Environment.NewLine;
                    sqlText += "    AND  SUBSTOCK.SUPPLIERFORMALRF=0" + Environment.NewLine;
                    sqlText += "    AND  SUBSTOCK.DEBITNOTEDIVRF=0" + Environment.NewLine;
                    sqlText += "    AND (SUBSTOCK.SUPPLIERSLIPCDRF = 10 OR SUBSTOCK.SUPPLIERSLIPCDRF = 20)" + Environment.NewLine;
                    sqlText += "    AND (SUBSTOCK.STOCKGOODSCDRF=0 OR SUBSTOCK.STOCKGOODSCDRF = 6)     " + Environment.NewLine;
                    #endregion

                    #region JOIN 句
                    sqlText += "   ) AS STOCK" + Environment.NewLine;
                    // -- UPD 2011/03/15 ------------------------------>>>
                    //sqlText += "   INNER JOIN SUPPLIERRF AS SUPPLIER" + Environment.NewLine;
                    sqlText += "   INNER JOIN SUPPLIERRF AS SUPPLIER WITH (READUNCOMMITTED)" + Environment.NewLine;
                    // -- UPD 2011/03/15 ------------------------------<<<
                    sqlText += "    ON SUPPLIER.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    AND SUPPLIER.SUPPLIERCDRF = STOCK.PAYEECODERF" + Environment.NewLine;
                    // -- UPD 2011/03/15 ------------------------------>>>
                    //sqlText += "   LEFT JOIN SUPPLIERRF AS KOSUPPLIER" + Environment.NewLine;
                    sqlText += "   LEFT JOIN SUPPLIERRF AS KOSUPPLIER WITH (READUNCOMMITTED)" + Environment.NewLine;
                    // -- UPD 2011/03/15 ------------------------------<<<
                    sqlText += "    ON KOSUPPLIER.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    AND KOSUPPLIER.SUPPLIERCDRF = STOCK.SUPPLIERCDRF" + Environment.NewLine;
                    // -- UPD 2011/03/15 ------------------------------>>>
                    //sqlText += "   LEFT JOIN STOCKPROCMONEYRF AS PROCMONEY" + Environment.NewLine;
                    sqlText += "   LEFT JOIN STOCKPROCMONEYRF AS PROCMONEY WITH (READUNCOMMITTED)" + Environment.NewLine;
                    // -- UPD 2011/03/15 ------------------------------<<<
                    sqlText += "    ON PROCMONEY.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    AND PROCMONEY.FRACPROCMONEYDIVRF = 1" + Environment.NewLine;
                    sqlText += "    AND PROCMONEY.FRACTIONPROCCODERF = SUPPLIER.STOCKCNSTAXFRCPROCCDRF" + Environment.NewLine;
                    #endregion

                    #region GROUP BY句
                    sqlText += "   GROUP BY" + Environment.NewLine;
                    //sqlText += "    STOCK.STOCKSECTIONCDRF, " + Environment.NewLine;
                    // -- ADD 2009/10/23 --------------------------------------->>>
                    sqlText += "    STOCK.STOCKSECTIONCDRF, " + Environment.NewLine;
                    // -- ADD 2009/10/23 ---------------------------------------<<<
                    sqlText += "    STOCK.PAYEECODERF," + Environment.NewLine;
                    sqlText += "    SUPPLIER.SUPPLIERNM1RF," + Environment.NewLine;
                    sqlText += "    SUPPLIER.SUPPLIERNM2RF," + Environment.NewLine;
                    sqlText += "    SUPPLIER.SUPPLIERSNMRF,   " + Environment.NewLine;
                    sqlText += "    STOCK.SUPPLIERCDRF," + Environment.NewLine;
                    sqlText += "    KOSUPPLIER.SUPPLIERNM1RF," + Environment.NewLine;
                    sqlText += "    KOSUPPLIER.SUPPLIERNM2RF," + Environment.NewLine;
                    sqlText += "    KOSUPPLIER.SUPPLIERSNMRF,    " + Environment.NewLine;
                    sqlText += "    SUPPLIER.STOCKCNSTAXFRCPROCCDRF," + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "    STOCK.TAXRATERF, " + Environment.NewLine;
                    sqlText += "    STOCK.TAXRATE2RF, " + Environment.NewLine;
                    sqlText += "    STOCK.TAXRATE3RF, " + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    sqlText += "    PROCMONEY.FRACTIONPROCUNITRF," + Environment.NewLine;
                    sqlText += "    PROCMONEY.FRACTIONPROCCDRF,     " + Environment.NewLine;
                    sqlText += "    SUPPLIER.SUPPCTAXLAYCDRF," + Environment.NewLine;
                    sqlText += "    SUPPLIER.PAYMENTMONTHCODERF," + Environment.NewLine;
                    sqlText += "    SUPPLIER.PAYMENTDAYRF," + Environment.NewLine;
                    sqlText += "    SUPPLIER.PAYMENTCONDRF    " + Environment.NewLine;
                    sqlText += ") AS SUPLIERPAY" + Environment.NewLine;
                    #endregion

                    #endregion

                    #endregion

                    sqlCommand.CommandText = sqlText;

                    #region Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCodeChild = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaCustomerCodeChild = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
                    SqlParameter findParaAddUpDateChild = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaLastTimeAddUpDateChild = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
                    #endregion

                    #region Parameterオブジェクトへ値設定
                    findParaEnterpriseCodeChild.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                    findParaCustomerCodeChild.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
                    findParaAddUpDateChild.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                    if (suplAccPayWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        findParaLastTimeAddUpDateChild.Value = 20000101;
                    else
                        findParaLastTimeAddUpDateChild.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.LaMonCAddUpUpdDate);
                    #endregion

                    sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10

                    myReader = sqlCommand.ExecuteReader();

                    fractionProcUnit = 0;
                    long setTax = 0;
                    // -- ADD 2009/10/23 -------------------------->>>
                    int SetFlg = 0;
                    // -- ADD 2009/10/23 --------------------------<<<

                    while (myReader.Read())
                    {
                        // -- ADD 2009/10/23 -------------------------->>>
                        SetFlg = 0;
                        // -- ADD 2009/10/23 --------------------------<<<

                        #region 結果セット
                        SuplAccPayWork suplAccPayChildWork = new SuplAccPayWork();
                        suplAccPayChildWork.PayeeCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYEECODERF"));   // 支払先コード
                        suplAccPayChildWork.PayeeName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYEENM1RF"));
                        suplAccPayChildWork.PayeeName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYEENM2RF"));
                        suplAccPayChildWork.PayeeSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYEESNMRF"));
                        //■ 親子レコードのみセット項目↓↓ ※集計レコードは未設定
                        suplAccPayChildWork.SupplierCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPLIERCDRF"));         // 仕入先コード
                        suplAccPayChildWork.SupplierNm1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM1RF"));
                        suplAccPayChildWork.SupplierNm2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM2RF"));
                        suplAccPayChildWork.SupplierSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERSNMRF"));
                        //■ 親子レコードのみセット項目↑↑
                        suplAccPayChildWork.EnterpriseCode = suplAccPayWork.EnterpriseCode;
                        suplAccPayChildWork.AddUpSecCode = suplAccPayWork.AddUpSecCode;
                        suplAccPayChildWork.AddUpDate = suplAccPayWork.AddUpDate;           // 計上年月日
                        suplAccPayChildWork.AddUpYearMonth = suplAccPayWork.AddUpYearMonth; // 計上年月
                        suplAccPayChildWork.SupplierConsTaxRate = suplAccPayWork.SupplierConsTaxRate;
                        //suplAccPayChildWork.PaymentCond = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYMENTCONDRF"));            // 支払条件
                        suplAccPayChildWork.FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF")); // 端数処理区分
                        fractionProcUnit = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("FRACTIONPROCUNITRF"));           　   // 端数処理単位
                        suplAccPayChildWork.SuppCTaxLayCd = suplAccPayWork.SuppCTaxLayCd;
                        // ■親子レコード未設定項目 ↓↓ ※集計レコードのみ
                        suplAccPayChildWork.LastTimeAccPay = 0;      // 前回支払金額
                        suplAccPayChildWork.ThisTimeFeePayNrml = 0;  // 今回手数料金額
                        suplAccPayChildWork.ThisTimeDisPayNrml = 0;  // 今回値引金額
                        suplAccPayChildWork.ThisTimePayNrml = 0;     // 今回支払金額
                        suplAccPayChildWork.ThisTimeTtlBlcAcPay = 0; // 今回繰越残高
                        // ■親子レコード未設定項目 ↑↑
                        //■相殺
                        suplAccPayChildWork.OfsThisTimeStock = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFSTHISTIMESTOCKRF"));
                        suplAccPayChildWork.ItdedOffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETOUTTAXRF"));
                        suplAccPayChildWork.ItdedOffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETINTAXRF"));
                        suplAccPayChildWork.ItdedOffsetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETTAXFREERF"));
                        suplAccPayChildWork.OffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFFSETINTAXRF"));
                        // 修正 2009/04/17 >>>
                        #region DEL 2009/04/17
                        /*
                        // 消費税転嫁区分によってセット内容変動( クエリ内で処理しきれない為、セット時に計算 )
                        if ((suplAccPayChildWork.SuppCTaxLayCd == 0) || (suplAccPayChildWork.SuppCTaxLayCd == 1) || (suplAccPayChildWork.SuppCTaxLayCd == 2) || (suplAccPayChildWork.SuppCTaxLayCd == 3))
                        {
                            // 相殺後仕入外税額 = 今回仕入外税額 + 今回仕入返品外税額 + 今回仕入値引外税額
                            //setTax = 0;
                            //FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                            //suplAccPayChildWork.OffsetOutTax = setTax;       // 今回仕入外税額
                            //FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                            //suplAccPayChildWork.OffsetOutTax += setTax;       // 今回仕入返品外税額
                            //FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                            //suplAccPayChildWork.OffsetOutTax += setTax;       // 今回仕入値引外税額

                            suplAccPayChildWork.OffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF"));// 今回仕入外税額
                            suplAccPayChildWork.OffsetOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"));// 今回仕入返品外税額
                            suplAccPayChildWork.OffsetOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));// 今回仕入値引外税額

                            //// 相殺後今回仕入消費税額 = 相殺後仕入外税額 + 相殺後仕入内税額
                            //suplAccPayChildWork.OfsThisStockTax = suplAccPayChildWork.OffsetOutTax + suplAccPayChildWork.OffsetInTax;       // 相殺後今回仕入消費税額                            
                            //■■ 集計レコード計算用の処理 ■■
                            if ((suplAccPayChildWork.SuppCTaxLayCd == 3))
                            {
                                // 消費税転嫁区分 = 3:請求子
                                // 子レコード集計(相殺後外税対象金額)　※子レコード集計時に算出
                                itdedOffsetOutTax += suplAccPayChildWork.ItdedOffsetOutTax;
                                // 子レコード集計(相殺後外税金額)　※子レコード集計時に算出
                                OffsetOutTax += suplAccPayChildWork.OffsetOutTax;
                            }

                        }
                        //else if ((suplAccPayChildWork.SuppCTaxLayCd == 2) || (suplAccPayChildWork.SuppCTaxLayCd == 3))
                        //{
                        //    // 消費税転嫁区分 = 2:請求親
                        //    // 相殺後外税金対象額　× 税率
                        //    setTax = 0;
                        //    FracCalc((suplAccPayChildWork.ItdedOffsetOutTax * suplAccPayChildWork.SupplierConsTaxRate), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        //    suplAccPayChildWork.OffsetOutTax = setTax;

                        //    // 相殺後今回仕入消費税額 = 相殺後仕入外税額 + 相殺後仕入内税額
                        //    suplAccPayChildWork.OfsThisStockTax = suplAccPayChildWork.OffsetOutTax + suplAccPayChildWork.OffsetInTax;       // 相殺後今回仕入消費税額

                        //    //■■ 集計レコード計算用の処理 ■■
                        //    if ((suplAccPayChildWork.SuppCTaxLayCd == 3))
                        //    {
                        //        // 消費税転嫁区分 = 3:請求子
                        //        // 子レコード集計(相殺後外税対象金額)　※子レコード集計時に算出
                        //        itdedOffsetOutTax += suplAccPayChildWork.ItdedOffsetOutTax;
                        //        // 子レコード集計(相殺後外税金額)　※子レコード集計時に算出
                        //        OffsetOutTax += suplAccPayChildWork.OffsetOutTax;
                        //    }
                        //}
                        */
                        #endregion
                        #region suplAccPayChildWork.OffsetOutTax [相殺後外税消費税]
                        // 相殺後外税消費税 = 仕入外税消費税 + 返品外税消費税 + 値引外税消費税 ※各種転嫁方式別に計算し合算する
                        // 伝票転嫁 + 明細転嫁  
                        suplAccPayChildWork.OffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF"))+SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"))+
                                                           SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                        // 支払(親)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S")) + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S")) +
                                 SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.OffsetOutTax += setTax;

                        // 支払(子)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S2")) + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S2")) +
                                 SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S2")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.OffsetOutTax += setTax;
                        OffsetOutTax += setTax;     // 相殺外税消費税(支払(子)転嫁) ※集計レコード計算用
                        #endregion
                        suplAccPayChildWork.OfsThisStockTax = suplAccPayChildWork.OffsetInTax + suplAccPayChildWork.OffsetOutTax;
                        // 修正 2009/04/17 <<<

                        // ■仕入
                        suplAccPayChildWork.ThisTimeStockPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISTIMESTOCKPRICERF"));
                        suplAccPayChildWork.TtlItdedStcOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCOUTTAXRF"));
                        suplAccPayChildWork.TtlItdedStcInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCINTAXRF"));
                        suplAccPayChildWork.TtlItdedStcTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCTAXFREERF"));
                        suplAccPayChildWork.TtlStockInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKINNERTAXRF"));
                        #region suplAccPayChildWork.TtlStockOuterTax [今回仕入外税消費税]
                        // 今回仕入外税消費税 ※各種転嫁方式別に計算を行い、合算する
                        // 伝票転嫁 + 明細転嫁
                        suplAccPayChildWork.TtlStockOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF"));
                        // 支払(親)転嫁　※参考消費税
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.TtlStockOuterTax += setTax;
                        // 支払(子)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S2")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.TtlStockOuterTax += setTax;
                        StockOuterTax += setTax; // 仕入外税消費税(支払(子)転嫁)　※集計レコード計算用
                        #endregion
                        suplAccPayChildWork.ThisStcPrcTax = suplAccPayChildWork.TtlStockInnerTax + suplAccPayChildWork.TtlStockOuterTax;  // 今回仕入消費税額

                        // ■返品
                        suplAccPayChildWork.ThisStckPricRgds = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSTCKPRICRGDSRF"));
                        suplAccPayChildWork.TtlItdedRetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETOUTTAXRF"));
                        suplAccPayChildWork.TtlItdedRetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETINTAXRF"));
                        suplAccPayChildWork.TtlItdedRetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETTAXFREERF"));
                        suplAccPayChildWork.TtlRetInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETINNERTAXRF"));
                        #region suplAccPayChildWork.TtlRetOuterTax [今回返品外税消費税] 
                        // 今回返品外税消費税 ※各種転嫁方式別に計算を行い、合算する
                        // 伝票転嫁 + 明細転嫁
                        suplAccPayChildWork.TtlRetOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"));
                        // 支払(親)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.TtlRetOuterTax += setTax;
                        // 支払(子)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S2")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.TtlRetOuterTax += setTax;
                        RetStockOuterTax += setTax; // 返品外税消費税(支払(子)転嫁) ※集計レコード計算用
                        #endregion
                        suplAccPayChildWork.ThisStcPrcTaxRgds = suplAccPayChildWork.TtlRetInnerTax + suplAccPayChildWork.TtlRetOuterTax;

                        // ■値引
                        suplAccPayChildWork.ThisStckPricDis = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSTCKPRICDISRF"));
                        suplAccPayChildWork.TtlItdedDisOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISOUTTAXRF"));
                        suplAccPayChildWork.TtlItdedDisInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISINTAXRF"));
                        suplAccPayChildWork.TtlItdedDisTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISTAXFREERF"));
                        suplAccPayChildWork.TtlDisInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISINNERTAXRF"));
                        #region suplAccPayChildWork.TtlDisOuterTax [今回値引外税消費税]
                        // 今回返品外税消費税 ※各種転嫁方式別に計算を行い、合算する
                        // 伝票転嫁 + 明細転嫁
                        suplAccPayChildWork.TtlDisOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                        // 支払(親)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.TtlDisOuterTax += setTax;
                        // 支払(子)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S2")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.TtlDisOuterTax += setTax;
                        DisStockOuterTax += setTax; // 値引外税消費税(支払(子)転嫁) ※集計レコード計算用
                        #endregion
                        suplAccPayChildWork.ThisStcPrcTaxDis = suplAccPayChildWork.TtlDisInnerTax + suplAccPayChildWork.TtlDisOuterTax;

                        suplAccPayChildWork.TaxAdjust = 0;     // 消費税調整額(0固定)
                        suplAccPayChildWork.BalanceAdjust = 0; // 残高調整額(0固定)
                        // ■親子レコード未設定項目 (集計レコードのみ) ↓↓ >>>
                        suplAccPayChildWork.StckTtlAccPayBalance = 0; // 仕入合計残高
                        suplAccPayChildWork.StckTtl2TmBfBlAccPay = 0; // 仕入2回前残高
                        suplAccPayChildWork.StckTtl3TmBfBlAccPay = 0; // 仕入3回前残高
                        // ■親子レコード未設定項目 ↑↑ <<<
                        suplAccPayChildWork.MonthAddUpExpDate = suplAccPayWork.MonthAddUpExpDate;  // 締次更新実行年月日
                        suplAccPayChildWork.StMonCAddUpUpdDate = suplAccPayWork.StMonCAddUpUpdDate;// 締次更新開始年月日
                        suplAccPayChildWork.LaMonCAddUpUpdDate = suplAccPayWork.LaMonCAddUpUpdDate;  // 前回締次更新年月日
                        suplAccPayChildWork.StockSlipCount = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("STOCKSLIPCOUNT"));　// 伝票枚数

                        // -- ADD 2009/10/23 ----------------------------->>>
                        // 売上2009/06/18分の修正と同一の処理を入れる
                        // 締次集計処理と同様に清算拠点、清算先、仕入先、実績計上拠点別に消費税集計するが
                        // 買掛のテーブルレイアウト上、実績計上拠点が存在しないため、KEY項目で金額の合算を行う。
                        if (suplAccPayChildWorkList.Count > 0)
                        {
                            for (int i = 0; i < suplAccPayChildWorkList.Count; i++)
                            {
                                if (
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).EnterpriseCode == suplAccPayChildWork.EnterpriseCode &&
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).AddUpSecCode == suplAccPayChildWork.AddUpSecCode &&
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).PayeeCode == suplAccPayChildWork.PayeeCode &&
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).SupplierCd == suplAccPayChildWork.SupplierCd &&
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).AddUpDate == suplAccPayChildWork.AddUpDate
                                  )
                                {

                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).OfsThisTimeStock += suplAccPayChildWork.OfsThisTimeStock;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).OfsThisStockTax += suplAccPayChildWork.OfsThisStockTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ItdedOffsetOutTax += suplAccPayChildWork.ItdedOffsetOutTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ItdedOffsetInTax += suplAccPayChildWork.ItdedOffsetInTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ItdedOffsetTaxFree += suplAccPayChildWork.ItdedOffsetTaxFree;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).OffsetOutTax += suplAccPayChildWork.OffsetOutTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).OffsetInTax += suplAccPayChildWork.OffsetInTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ThisTimeStockPrice += suplAccPayChildWork.ThisTimeStockPrice;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ThisStcPrcTax += suplAccPayChildWork.ThisStcPrcTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedStcOutTax += suplAccPayChildWork.TtlItdedStcOutTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedStcInTax += suplAccPayChildWork.TtlItdedStcInTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedStcTaxFree += suplAccPayChildWork.TtlItdedStcTaxFree;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlStockOuterTax += suplAccPayChildWork.TtlStockOuterTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlStockInnerTax += suplAccPayChildWork.TtlStockInnerTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ThisStckPricRgds += suplAccPayChildWork.ThisStckPricRgds;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ThisStcPrcTaxRgds += suplAccPayChildWork.ThisStcPrcTaxRgds;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedRetOutTax += suplAccPayChildWork.TtlItdedRetOutTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedRetInTax += suplAccPayChildWork.TtlItdedRetInTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedRetTaxFree += suplAccPayChildWork.TtlItdedRetTaxFree;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlRetOuterTax += suplAccPayChildWork.TtlRetOuterTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlRetInnerTax += suplAccPayChildWork.TtlRetInnerTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ThisStckPricDis += suplAccPayChildWork.ThisStckPricDis;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ThisStcPrcTaxDis += suplAccPayChildWork.ThisStcPrcTaxDis;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedDisOutTax += suplAccPayChildWork.TtlItdedDisOutTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedDisInTax += suplAccPayChildWork.TtlItdedDisInTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedDisTaxFree += suplAccPayChildWork.TtlItdedDisTaxFree;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlDisOuterTax += suplAccPayChildWork.TtlDisOuterTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlDisInnerTax += suplAccPayChildWork.TtlDisInnerTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).StockSlipCount += suplAccPayChildWork.StockSlipCount;

                                    SetFlg = 1;
                                }
                            }
                        }
                        // -- ADD 2009/10/23 -----------------------------<<<

                        // -- UPD 2009/10/23 ----------------------------->>>
                        //suplAccPayChildWorkList.Add(suplAccPayChildWork);
                        //ChildCnt += 1;

                        if (SetFlg == 0)
                        {
                            suplAccPayChildWorkList.Add(suplAccPayChildWork);
                            ChildCnt += 1;
                        }
                        // -- ADD 2009/10/23 -----------------------------<<<
                        #endregion
                    }
                    #endregion

                    
                    #region ■■ 集計レコード計算用の処理 ■■
                    if (ChildCnt > 0)
                    {
                        // 修正 2009/04/17 >>>
                        #region DEL 2009/04/17
                        /*
                        if ((suplAccPayWork.SuppCTaxLayCd == 3)) // 消費税転嫁区分 = 3:請求子
                        {
                            //相殺後外税消費税 = 子レコード集計(相殺後外税対象金額)×税率
                            //FracCalc((itdedOffsetOutTax * suplierPayWork.SupplierConsTaxRate), fractionProcUnit, suplierPayWork.FractionProcCd, out setTax);
                            //suplierPayWork.OffsetOutTax = setTax;

                            //相殺後外税消費税 = 子レコード集計(相殺後外税金額)
                            suplAccPayWork.OffsetOutTax = OffsetOutTax;

                            //相殺後今回仕入消費税 = 相殺後外税消費税 + 相殺後内税消費税
                            //suplAccPayWork.OfsThisStockTax = suplAccPayWork.OffsetOutTax + suplAccPayWork.OffsetInTax;

                            // 仕入合計残高(支払計) = 今回繰越金額(支払計) + (相殺後今回仕入金額 + 相殺後今回仕入消費税)
                            suplAccPayWork.StckTtlAccPayBalance = suplAccPayWork.ThisTimeTtlBlcAcPay + (suplAccPayWork.OfsThisTimeStock + suplAccPayWork.OfsThisStockTax);

                        }
                        */
                        #endregion

                        // 今回仕入外税消費税 + 仕入外税消費税[請求転嫁(子)]
                        suplAccPayWork.TtlStockOuterTax += StockOuterTax;
                        // 今回仕入消費税
                        suplAccPayWork.ThisStcPrcTax = suplAccPayWork.TtlStockInnerTax + suplAccPayWork.TtlStockOuterTax;

                        // 今回返品外税消費税 + 返品外税消費税[請求転嫁(子)]
                        suplAccPayWork.TtlRetOuterTax += RetStockOuterTax;
                        // 今回返品消費税
                        suplAccPayWork.ThisStcPrcTaxRgds = suplAccPayWork.TtlRetInnerTax + suplAccPayWork.TtlRetOuterTax;

                        // 今回値引外税消費税 + 値引外税消費税[請求転嫁(子)]
                        suplAccPayWork.TtlDisOuterTax += DisStockOuterTax;
                        // 今回値引消費税
                        suplAccPayWork.ThisStcPrcTaxDis = suplAccPayWork.TtlDisInnerTax + suplAccPayWork.TtlDisOuterTax;

                        //相殺後外税消費税 + 相殺後外税消費税[請求転嫁(子)]
                        suplAccPayWork.OffsetOutTax += OffsetOutTax;
                        
                        if (totalAfterDay == 0) // 当月消費税を行わない場合の処理
                        {
                            //相殺後今回仕入消費税
                            suplAccPayWork.OfsThisStockTax = suplAccPayWork.OffsetOutTax + suplAccPayWork.OffsetInTax;
                        }

                        // 仕入合計残高(支払計) = 今回繰越金額(支払計) + (相殺後今回仕入金額 + 相殺後今回仕入消費税)
                        suplAccPayWork.StckTtlAccPayBalance = suplAccPayWork.ThisTimeTtlBlcAcPay + (suplAccPayWork.OfsThisTimeStock + suplAccPayWork.OfsThisStockTax);

                        // 修正 2009/04/17 <<<
                    }
                    
                    #endregion

                    #region ■■ 実績無しの場合の処理 ■■
                    // 実績無しの場合でも、親レコードは作成する。
                    if (ChildCnt == 0)
                    {
                        // 親レコード作製
                        SuplAccPayWork suplAccPayChildWork = new SuplAccPayWork();
                        suplAccPayChildWork = suplAccPayWork;
                        suplAccPayChildWorkList.Add(suplAccPayChildWork);

                        // 集計レコード不足項目セット
                        // 今回繰越残高
                        suplAccPayWork.ThisTimeTtlBlcAcPay = (suplAccPayWork.LastTimeAccPay) - suplAccPayWork.ThisTimePayNrml ;

                        // 仕入合計残高(支払計) = 今回繰越金額(支払計) + (相殺後今回仕入金額 + 相殺後今回仕入消費税)
                        suplAccPayWork.StckTtlAccPayBalance = suplAccPayWork.ThisTimeTtlBlcAcPay + (suplAccPayWork.OfsThisTimeStock + suplAccPayWork.OfsThisStockTax);

                    }
                    #endregion                

                    #region ■■ 当月消費税算出処理 (親子レコード用) ■■
                    /*
                    if (ChildCnt > 0 && totalAfterDay != 0)
                    {
                        // 締日算出
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            if (!myReader.IsClosed) myReader.Close();
                            sqlCommand.Parameters.Clear();
                            sqlCommand.CommandText = string.Empty;
                            long AfterStock = 0;// 締後仕入
                            long AfterTax = 0;  // 締後消費税
                            int ProcCd = 0;     // 消費税端数処理区分
                            Double ProcUnit = 0;// 消費税端数処理単位

                            for (int i = 0; i < suplAccPayChildWorkList.Count; i++)
                            {
                                SuplAccPayWork paraSuplAccPayChildWork = new SuplAccPayWork();
                                paraSuplAccPayChildWork = suplAccPayChildWorkList[i] as SuplAccPayWork;
                                if (paraSuplAccPayChildWork.PayeeCode != suplAccPayWork.PayeeCode)
                                {
                                    continue;
                                }
                                //para.EnterpriseCode = suplAccPayWork.EnterpriseCode;
                                //para.SupplierCd = paraSuplAccPayChildWork.PayeeCode;
                                //St = ttlDayCalcDB.SearchPrcPayment(out retList, para, ref sqlConnection);

                                sqlCommand.Parameters.Clear();
                                sqlCommand.CommandText = string.Empty;
                                AfterStock = 0;// 締後仕入
                                AfterTax = 0;  // 締後消費税
                                ProcCd = 0;    // 消費税端数処理区分
                                ProcUnit = 0;  // 消費税端数処理単位


                                #region 残高取得 
                                
                                //string sqlText = string.Empty;
                                ////sqlText += "SELECT" + Environment.NewLine;
                                ////sqlText += "     STOCKTOTALPAYBALANCERF" + Environment.NewLine;
                                ////sqlText += " FROM SUPLIERPAYRF" + Environment.NewLine;
                                ////sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                                ////sqlText += "    AND PAYEECODERF=@FINDPAYEECODE" + Environment.NewLine;
                                ////sqlText += "    AND SUPPLIERCDRF=0" + Environment.NewLine;
                                ////sqlText += "    AND ADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;
                                //sqlText += "SELECT" + Environment.NewLine;
                                //sqlText += "  STOCKTOTALPAYBALANCERF," + Environment.NewLine;
                                //sqlText += "  ADDUPDATERF" + Environment.NewLine;
                                //sqlText += "FROM SUPLIERPAYRF" + Environment.NewLine;
                                //sqlText += "WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                                //sqlText += "  AND PAYEECODERF=@FINDPAYEECODE" + Environment.NewLine;
                                //sqlText += "  AND SUPPLIERCDRF=0" + Environment.NewLine;
                                //sqlText += "  AND ADDUPDATERF>@FINDADDUPDATEST" + Environment.NewLine;
                                //sqlText += "  AND ADDUPDATERF<@FINDADDUPDATEED" + Environment.NewLine;

                                //try
                                //{
                                //    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                                //    {
                                //        //Prameterオブジェクトの作成
                                //        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                                //        SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDPAYEECODE", SqlDbType.Int);
                                //        //SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                                //        SqlParameter findParaAddUpDateSt = sqlCommand.Parameters.Add("@FINDADDUPDATEST", SqlDbType.Int);
                                //        SqlParameter findParaAddUpDateEd = sqlCommand.Parameters.Add("@FINDADDUPDATEED", SqlDbType.Int);


                                //        //Parameterオブジェクトへ値設定
                                //        //findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(retList[0].EnterpriseCode);
                                //        //findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(retList[0].SupplierCd);
                                //        //findParaAddUpDate.Value = SqlDataMediator.SqlSetInt32(retList[0].TotalDay);

                                //        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                                //        findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);
                                //        findParaAddUpDateSt.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.LaMonCAddUpUpdDate);
                                //        findParaAddUpDateEd.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.AddUpDate);

                                //        myReader = sqlCommand.ExecuteReader();

                                //        if (myReader.Read())
                                //        {
                                //            stockTotalPayBalance = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("STOCKTOTALPAYBALANCERF"));
                                //        }
                                //    }
                                //}
                                //finally
                                //{
                                //    myReader.Dispose();
                                //}
                                
                                #endregion

                                #region 締後支払金額取得 ※親子レコードでは取得無
                                
                                //sqlText = string.Empty;
                                //sqlText += "SELECT *" + Environment.NewLine;
                                //sqlText += " FROM PAYMENTSLPRF WITH" + Environment.NewLine;
                                //sqlText += "    (READUNCOMMITTED" + Environment.NewLine;
                                //sqlText += "    )" + Environment.NewLine;
                                //sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                                //sqlText += "    AND PAYEECODERF=@FINDPAYEECODE" + Environment.NewLine;
                                //sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                                //sqlText += "    AND" + Environment.NewLine;
                                //sqlText += "    (ADDUPADATERF<=@FINDADDUPDATE" + Environment.NewLine;
                                //sqlText += "        AND ADDUPADATERF>=@FINDLASTTIMEADDUPDATE" + Environment.NewLine; // ADD 2008.11.19
                                //sqlText += "    )" + Environment.NewLine;

                                //try
                                //{
                                //    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                                //    {
                                //        //Prameterオブジェクトの作成
                                //        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                                //        SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDPAYEECODE", SqlDbType.Int);
                                //        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                                //        SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                                //        SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int); // ADD 2008.11.19

                                //        //Parameterオブジェクトへ値設定
                                //        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                                //        findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);
                                //        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);
                                //        findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                                //        findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetInt32(retList[0].TotalDay); // ADD 2008.11.19
                                //        myReader = sqlCommand.ExecuteReader();

                                //        while (myReader.Read())
                                //        {
                                //            totalAfterPayment += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("PAYMENTTOTALRF"));
                                //        }
                                //    }
                                //}
                                //finally
                                //{
                                //    myReader.Dispose();
                                //}
                            
                                #endregion

                                #region 締後仕入金額取得

                                #region SELECT文作成
                                sqlText = string.Empty;
                                sqlText += "SELECT" + Environment.NewLine;
                                sqlText += " STOCK.ENTERPRISECODERF," + Environment.NewLine;
                                sqlText += " STOCK.SUPPLIERCDRF," + Environment.NewLine;
                                sqlText += " STOCK.STOCKNETPRICERF," + Environment.NewLine;
                                sqlText += " PROCMONEY.FRACTIONPROCUNITRF," + Environment.NewLine;
                                sqlText += " PROCMONEY.FRACTIONPROCCDRF" + Environment.NewLine;
                                sqlText += "FROM" + Environment.NewLine;
                                sqlText += " (" + Environment.NewLine;
                                sqlText += "  SELECT" + Environment.NewLine;
                                sqlText += "   ENTERPRISECODERF," + Environment.NewLine;
                                sqlText += "   SUPPLIERCDRF," + Environment.NewLine;
                                sqlText += "   SUM(STOCKNETPRICERF + STCKDISTTLTAXEXCRF) AS STOCKNETPRICERF" + Environment.NewLine;
                                sqlText += "  FROM" + Environment.NewLine;
                                sqlText += "   STOCKSLIPRF" + Environment.NewLine;
                                sqlText += "  WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                                sqlText += "   AND LOGICALDELETECODERF=0" + Environment.NewLine;
                                sqlText += "   AND SUPPLIERFORMALRF=0" + Environment.NewLine;
                                sqlText += "   AND DEBITNOTEDIVRF=0" + Environment.NewLine;
                                sqlText += "   AND STOCKGOODSCDRF=0" + Environment.NewLine;
                                sqlText += "   AND (SUPPLIERSLIPCDRF = 10 AND SUPPLIERSLIPCDRF = 20) " + Environment.NewLine;
                                sqlText += "   AND SUPPLIERCDRF=@FINDCUSTOMERCODE" + Environment.NewLine;
                                sqlText += "   AND (STOCKADDUPADATERF<=@FINDADDUPDATE AND STOCKADDUPADATERF>@FINDLASTTIMEADDUPDATE) " + Environment.NewLine;
                                sqlText += "  GROUP BY" + Environment.NewLine;
                                sqlText += "   ENTERPRISECODERF," + Environment.NewLine;
                                sqlText += "   SUPPLIERCDRF" + Environment.NewLine;
                                sqlText += " ) AS STOCK" + Environment.NewLine;
                                sqlText += "INNER JOIN SUPPLIERRF AS SUPPLIER" + Environment.NewLine;
                                sqlText += " ON SUPPLIER.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                                sqlText += " AND SUPPLIER.SUPPLIERCDRF = STOCK.SUPPLIERCDRF" + Environment.NewLine;
                                sqlText += "LEFT JOIN STOCKPROCMONEYRF AS PROCMONEY" + Environment.NewLine;
                                sqlText += " ON PROCMONEY.ENTERPRISECODERF = SUPPLIER.ENTERPRISECODERF" + Environment.NewLine;
                                sqlText += " AND PROCMONEY.FRACPROCMONEYDIVRF = 1" + Environment.NewLine;
                                sqlText += " AND PROCMONEY.FRACTIONPROCCODERF = SUPPLIER.STOCKCNSTAXFRCPROCCDRF" + Environment.NewLine;
                                #endregion

                                try
                                {
                                    sqlCommand.CommandText = sqlText;

                                    #region Prameterオブジェクトの作成
                                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                                    SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
                                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                                    SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
                                    #endregion

                                    #region Parameterオブジェクトへ値設定
                                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                                    findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(paraSuplAccPayChildWork.SupplierCd);
                                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                                    findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetInt32(totalAfterDay);
                                    #endregion

                                    myReader = sqlCommand.ExecuteReader();

                                    while (myReader.Read())
                                    {
                                        AfterStock += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("STOCKNETPRICERF"));
                                        ProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF"));
                                        ProcUnit = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("FRACTIONPROCUNITRF"));
                                    }

                                }
                                catch (SqlException ex)
                                {
                                    //基底クラスに例外を渡して処理してもらう
                                    status = base.WriteSQLErrorLog(ex);
                                }
                                finally
                                {
                                    myReader.Dispose();
                                }
                                #endregion

                                if (AfterStock != 0)
                                {
                                    // 締後消費税計算
                                    FracCalc((AfterStock * paraSuplAccPayChildWork.SupplierConsTaxRate), ProcUnit, ProcCd, out AfterTax);
                                }
                                //相殺後今回売上消費税 = (締後売上 + 締後消費税) - (当月売上) 
                                ((SuplAccPayWork)suplAccPayChildWorkList[i]).OfsThisStockTax = Convert.ToInt64((AfterStock + AfterTax)) - Convert.ToInt64((paraSuplAccPayChildWork.OfsThisTimeStock));
                                
                            }
                        }

                    }
                    */
                    #endregion
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        // ↑ 2007.11.07 980081 a
        #endregion

        //-----ADD YANGMJ 2012/11/01 REDMINE#32893----->>>>>
        #region [買掛金額マスタ更新]
        /// <summary>
        /// 買掛金額マスタ更新Listを生成します。
        /// 仕入月次処理以外のプログラムに影響が出ないように新しくメソッドを作成
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ</param>
        /// <param name="suplAccPayWorkList">買掛金額マスタ更新List</param>
        /// <param name="suplAccPayChildWorkList">買掛金額マスタ更新List(子レコード用)</param>
        /// <param name="aCalcPayTotalList">買掛支払集計データ更新List</param>
        /// <param name="monthlyAddUpHisWorkList">月次締履歴マスタ更新</param>
        /// <param name="exclusiveOrderDiv">伝票更新排他制御区分</param>
        /// <param name="msgDiv">エラーメッセージ有無区分</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 買掛金額マスタ更新Listを生成します。</br>
        /// <br>Programmer : YANGMJ</br>
        /// <br>Date       : 2012/11/01</br>
        /// </remarks>
        private int MakeMonthlyAddUpSuplAccPayProc(ref MonthlyAddUpWork monthlyAddUpWork, ref ArrayList suplAccPayWorkList, ref ArrayList suplAccPayChildWorkList, ref ArrayList aCalcPayTotalList, out ArrayList monthlyAddUpHisWorkList, int exclusiveOrderDiv, out bool msgDiv, out string retMsg, ref SqlConnection sqlConnection)
        {
            //●STATUS初期化
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            //月次締更新履歴マスタ
            MonthlyAddUpHisWork monthlyAddUpHisWork = new MonthlyAddUpHisWork();
            monthlyAddUpHisWorkList = new ArrayList();

            msgDiv = false;
            retMsg = null;

            //買掛金額マスタ
            SuplAccPayWork suplAccPayWork = null;

            Int32[] customerCodeList = new Int32[1];

            try
            {
                //●買掛金額マスタ更新List作成処理
                if (suplAccPayWorkList != null && suplAccPayWorkList.Count > 0)
                {
                    //仕入先ごとにデータ取得
                    for (int i = 0; i < suplAccPayWorkList.Count; i++)
                    {
                        suplAccPayWork = suplAccPayWorkList[i] as SuplAccPayWork;

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

                        suplAccPayWork.MonthAddUpExpDate = DateTime.Now;

                        //------------------------- 買掛金額 Start -------------------------
                        //●仕入先より取得の場合は仕入金額処理区分設定マスタから端数処理区分を取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetSupplTaxAndFrac(ref suplAccPayWork, ref sqlConnection);
                        }
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                        {
                            //仕入金額処理区分設定が設定されていない場合
                            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                        }

                        //●仕入先マスタ+税率設定マスタから下記項目を取得
                        //仕入先消費税転嫁方式コード・仕入先消費税税率
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetSupplierTaxRate(ref suplAccPayWork, ref sqlConnection);
                        }

                        //●前回買掛情報取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetMonthlyAddUpHisAndSuplAccPay(ref suplAccPayWork, ref sqlConnection);
                        }
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                        {
                            //初期データ挿入時はデータがないので前回月次更新年月日に最小値を挿入する
                            suplAccPayWork.LaMonCAddUpUpdDate = DateTime.MinValue;
                            suplAccPayWork.StMonCAddUpUpdDate = DateTime.MinValue;
                            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                        }
                        //●支払伝票マスタ取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetPaymentSlp(ref suplAccPayWork, ref suplAccPayChildWorkList, ref sqlConnection);
                        }
                        //●支払明細データ＆支払マスタ取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetPaymentDtlMain(ref suplAccPayWork, ref aCalcPayTotalList, ref sqlConnection);
                        }
                        //●仕入データ取得
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            status = GetStockSlipForMonthlyAddUp(ref suplAccPayWork, ref suplAccPayChildWorkList, ref sqlConnection);

                        }
                        //------------------------- 買掛金額 End -------------------------

                        //●不正STATUSであれば処理終了
                        if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            msgDiv = true;
                            retMsg = "伝票抽出中にエラーが発生しました。再度やり直してください。";
                            return (int)ConstantManagement.DB_Status.ctDB_WARNING;
                        }
                    }
                }

                //●月次締更新履歴マスタ更新List作成
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    //月次更新処理の場合
                    status = MakeUpdateSuplAccPayList(ref suplAccPayWorkList, out monthlyAddUpHisWorkList, monthlyAddUpWork);
                }
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.MakeMonthlyAddUpParameters Exception=" + ex.Message);
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }

            return status;
        }
        #endregion

        // --- ADD 2012/09/13 ----------->>>>>
        /// <summary>
        /// 仕入先買掛金額ワーク用Listから仕入総括形式で仕入データを取得します
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新List</param>
        /// <param name="suplAccPayChildWorkList">仕入先買掛金額マスタ更新List(子レコード用)</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先買掛金額ワーク用Listから仕入総括形式で仕入データを取得します</br>
        /// <br>Programmer : FSI佐々木 貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int GetStockSlipByAddUpSecCode(ref SuplAccPayWork suplAccPayWork, ref ArrayList suplAccPayChildWorkList, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            SqlDataReader myReader = null;

            // 支払金額、締後仕入、締後支払、締後消費税の算出変数
            Int64 stockTotalPayBalance = 0;
            Int64 totalAfterStock = 0;
            Int64 totalAfterStockOutTax = 0;
            Double totalAfterStockOutTax_S = 0;
            ArrayList totalAfterStockOutTaxList = new ArrayList();

            Int64 totalAfterPayment = 0;
            int totalAfterDay = 0;
            //TtlDayCalcDB ttlDayCalcDB = new TtlDayCalcDB();

            SqlCommand sqlCommRef = null;

            #region ■当月消費税算出処理 締後仕入/支払集計
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                #region 残高取得
                string sqlText = string.Empty;
                try
                {
                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                    {
                        sqlCommRef = sqlCommand;

                        MakeGetTotalDayCalcSqlByAddUpSecCode(ref suplAccPayWork, ref sqlCommRef);

                        sqlCommand.CommandTimeout = TimeOut;
                        myReader = sqlCommand.ExecuteReader();
                        if (myReader.Read())
                        {
                            stockTotalPayBalance = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("STOCKTOTALPAYBALANCERF"));
                            totalAfterDay = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ADDUPDATERF"));
                        }
                    }
                }
                finally
                {
                    if (null != myReader)
                    {
                        myReader.Dispose();
                    }
                }
                #endregion

                if (totalAfterDay != 0)
                {
                    #region 締後仕入金額取得
                    sqlText = string.Empty;
                    try
                    {
                        using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                        {
                            sqlCommRef = sqlCommand;

                            MakeGetTotalAfterStockSqlByAddUpSecCode(ref suplAccPayWork, ref totalAfterDay, ref sqlCommRef);

                            sqlCommand.CommandTimeout = TimeOut;
                            myReader = sqlCommand.ExecuteReader();
                            while (myReader.Read())
                            {
                                // 仕入正価金額
                                totalAfterStock += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSTOCK"));
                                // 仕入外税消費税(伝票+明細)
                                totalAfterStockOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSTOCKOUTTAX"));
                                // 仕入外税消費税(支払親)
                                totalAfterStockOutTax_S += 
                                      SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF1"))
                                    + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF2"))
                                    + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF3"));
                                // 仕入外税消費税(支払子)
                                totalAfterStockOutTaxList.Add(
                                      SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF1_2")) 
                                    + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF2_2"))
                                    + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF3_2")));
                            }
                        }
                    }
                    catch (SqlException ex)
                    {
                        //基底クラスに例外を渡して処理してもらう
                        status = base.WriteSQLErrorLog(ex);
                    }
                    finally
                    {
                        if (null != myReader)
                        {
                            myReader.Dispose();
                        }
                    }
                    #endregion

                    #region 締後支払金額取得
                    sqlText = string.Empty;
                    try
                    {
                        using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                        {
                            sqlCommRef = sqlCommand;
                            MakeGetTotalAfterPeymentSqlBySecCode(ref suplAccPayWork, ref totalAfterDay, ref sqlCommRef);

                            sqlCommand.CommandTimeout = TimeOut;
                            myReader = sqlCommand.ExecuteReader();

                            while (myReader.Read())
                            {
                                totalAfterPayment += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("PAYMENTTOTALRF"));
                            }
                        }
                    }
                    finally
                    {
                        if (null != myReader)
                        {
                            myReader.Dispose();
                        }
                    }
                    #endregion
                }
            }
            #endregion

            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.Connection = sqlConnection;
                    string sqlText = string.Empty;
                    #region [●集計レコード作成処理]
                    sqlCommRef = sqlCommand;
                    MakeGetTotalAfterPeymentSqlByAddUpSecCode(ref suplAccPayWork, ref sqlCommRef);

                    sqlCommand.CommandTimeout = TimeOut;
                    myReader = sqlCommand.ExecuteReader();

                    double FractionProcUnit = 0;
                    long SetTax = 0;
                    long WorkTax = 0;
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    while (myReader.Read())
                    {
                        #region 結果セット
                        suplAccPayWork.FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF")); //端数処理区分
                        FractionProcUnit = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("FRACTIONPROCUNITRF"));           // 端数処理単位
                        suplAccPayWork.PayeeCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYEECODERF"));
                        suplAccPayWork.PayeeName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM1RF"));
                        suplAccPayWork.PayeeName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM2RF"));
                        suplAccPayWork.PayeeSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERSNMRF"));
                        suplAccPayWork.FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF"));// 端数処理区分
                        // 今回繰越残高(前回支払額-今回支払金額)
                        suplAccPayWork.ThisTimeTtlBlcAcPay = suplAccPayWork.LastTimeAccPay - suplAccPayWork.ThisTimePayNrml;

                        //■相殺
                        suplAccPayWork.OfsThisTimeStock = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFSTHISTIMESTOCKRF"));
                        suplAccPayWork.ItdedOffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETOUTTAXRF"));
                        suplAccPayWork.ItdedOffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETINTAXRF"));
                        suplAccPayWork.ItdedOffsetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETTAXFREERF"));
                        suplAccPayWork.OffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFFSETINTAXRF"));

                        #region suplAccPayWork.OffsetOutTax [相殺後外税消費税]
                        // 相殺後外税消費税 = 仕入外税消費税 + 返品外税消費税 + 値引外税消費税 ※各種転嫁方式別に計算し合算する 
                        // 伝票転嫁 + 明細転嫁  
                        suplAccPayWork.OffsetOutTax = 
                              SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF")) 
                            + SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"))
                            + SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                        // 支払(親)転嫁
                        FracCalc(
                                SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S"))
                              + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S"))
                              + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S"))
                            , FractionProcUnit
                            , suplAccPayWork.FractionProcCd
                            , out SetTax);
                        suplAccPayWork.OffsetOutTax += SetTax;
                        // 支払(子)転嫁
                        FracCalc(
                                SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S2"))
                              + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S2"))
                              + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S2"))
                            , FractionProcUnit
                            , suplAccPayWork.FractionProcCd
                            , out SetTax);
                        suplAccPayWork.OffsetOutTax += SetTax;
                        #endregion

                        #region 当月消費税SET処理
                        if (totalAfterDay != 0)
                        {
                            // 伝票転嫁 + 明細転嫁
                            WorkTax = totalAfterStockOutTax;

                            // 支払(親)転嫁
                            FracCalc((totalAfterStockOutTax_S), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                            WorkTax += SetTax;

                            // 支払(子)転嫁
                            for (int i = 0; i < totalAfterStockOutTaxList.Count; i++)
                            {
                                if (Convert.ToDouble(totalAfterStockOutTaxList[i]) != 0)
                                {
                                    //締後消費税算出
                                    FracCalc(Convert.ToDouble(totalAfterStockOutTaxList[i]), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                                    WorkTax += SetTax;
                                }
                            }

                            //相殺後今回売上消費税 = (支払金額 + 締後仕入 - 締後支払 + 締後消費税) - (前月仕入残高 + 当月仕入 - 当月支払) 
                            suplAccPayWork.OfsThisStockTax = 
                                  Convert.ToInt64((stockTotalPayBalance + totalAfterStock - totalAfterPayment + WorkTax)) 
                                - Convert.ToInt64((suplAccPayWork.LastTimeAccPay + suplAccPayWork.OfsThisTimeStock - suplAccPayWork.ThisTimePayNrml));
                        }
                        else
                        {
                            suplAccPayWork.OfsThisStockTax = suplAccPayWork.OffsetInTax + suplAccPayWork.OffsetOutTax;
                        }
                        #endregion

                        // ■仕入
                        suplAccPayWork.ThisTimeStockPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISTIMESTOCKPRICERF"));
                        suplAccPayWork.TtlItdedStcOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCOUTTAXRF"));
                        suplAccPayWork.TtlItdedStcInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCINTAXRF"));
                        suplAccPayWork.TtlItdedStcTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCTAXFREERF"));
                        suplAccPayWork.TtlStockInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKINNERTAXRF"));
                        #region suplAccPayWork.TtlStockOuterTax [今回仕入外税消費税]
                        // 今回仕入外税消費税 ※各種転嫁方式別に計算を行い、合算する
                        // 伝票転嫁・明細転嫁
                        suplAccPayWork.TtlStockOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF"));
                        // 支払(親)転嫁
                        FracCalc(
                              SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S"))
                            , FractionProcUnit
                            , suplAccPayWork.FractionProcCd
                            , out SetTax);
                        suplAccPayWork.TtlStockOuterTax += SetTax;
                        // 支払(子)転嫁
                        FracCalc(
                              SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S2"))
                            , FractionProcUnit
                            , suplAccPayWork.FractionProcCd
                            , out SetTax);
                        suplAccPayWork.TtlStockOuterTax += SetTax;
                        #endregion
                        suplAccPayWork.ThisStcPrcTax = suplAccPayWork.TtlStockInnerTax + suplAccPayWork.TtlStockOuterTax;

                        // ■返品
                        suplAccPayWork.ThisStckPricRgds = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSTCKPRICRGDSRF"));
                        suplAccPayWork.TtlItdedRetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETOUTTAXRF"));
                        suplAccPayWork.TtlItdedRetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETINTAXRF"));
                        suplAccPayWork.TtlItdedRetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETTAXFREERF"));
                        suplAccPayWork.TtlRetInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETINNERTAXRF"));
                        #region suplAccPayWork.TtlRetOuterTax [今回返品外税消費税]
                        // 今回返品外税消費税 ※各種転嫁方式別に計算を行い、合算する
                        // 伝票転嫁・明細転嫁
                        suplAccPayWork.TtlRetOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"));
                        // 支払(親)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S")), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                        suplAccPayWork.TtlRetOuterTax += SetTax;
                        // 支払(子)転嫁
                        FracCalc(
                              SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S2"))
                            , FractionProcUnit
                            , suplAccPayWork.FractionProcCd
                            , out SetTax);
                        suplAccPayWork.TtlRetOuterTax += SetTax;
                        #endregion
                        suplAccPayWork.ThisStcPrcTaxRgds = suplAccPayWork.TtlRetInnerTax + suplAccPayWork.TtlRetOuterTax;


                        // ■値引
                        suplAccPayWork.ThisStckPricDis = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSTCKPRICDISRF"));
                        suplAccPayWork.TtlItdedDisOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISOUTTAXRF"));
                        suplAccPayWork.TtlItdedDisInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISINTAXRF"));
                        suplAccPayWork.TtlItdedDisTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISTAXFREERF"));
                        suplAccPayWork.TtlDisInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISINNERTAXRF"));
                        #region suplAccPayWork.TtlDisOuterTax [今回値引外税消費税]
                        // 今回値引外税消費税 ※各種転嫁方式別に計算を行い、合算する
                        // 伝票転嫁・明細転嫁
                        suplAccPayWork.TtlDisOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                        // 支払(親)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S")), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                        suplAccPayWork.TtlDisOuterTax += SetTax;
                        // 支払(子)転嫁
                        FracCalc(
                              SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S2"))
                            , FractionProcUnit
                            , suplAccPayWork.FractionProcCd
                            , out SetTax);
                        suplAccPayWork.TtlDisOuterTax += SetTax;
                        #endregion
                        suplAccPayWork.ThisStcPrcTaxDis = suplAccPayWork.TtlDisInnerTax + suplAccPayWork.TtlDisOuterTax;

                        suplAccPayWork.TaxAdjust = 0;     // 消費税調整額(0固定)
                        suplAccPayWork.BalanceAdjust = 0; // 残高調整額(0固定)
                        suplAccPayWork.StockSlipCount = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("STOCKSLIPCOUNT"));　// 伝票枚数

                        // 仕入合計残高(支払計) = 今回繰越金額(支払計) + (相殺後今回仕入金額 + 相殺後今回仕入消費税)
                        suplAccPayWork.StckTtlAccPayBalance = suplAccPayWork.ThisTimeTtlBlcAcPay + (suplAccPayWork.OfsThisTimeStock + suplAccPayWork.OfsThisStockTax);
                        #endregion

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }

                    #region ■■ 仕入データ無しの場合の処理 ■■
                    if ((int)ConstantManagement.DB_Status.ctDB_NOT_FOUND == status)
                    {
                        // 集計レコード不足項目セット
                        // 今回繰越残高
                        suplAccPayWork.ThisTimeTtlBlcAcPay = (suplAccPayWork.LastTimeAccPay) - suplAccPayWork.ThisTimePayNrml;

                        // 仕入合計残高(支払計) = 今回繰越金額(支払計) + (相殺後今回仕入金額 + 相殺後今回仕入消費税)
                        suplAccPayWork.StckTtlAccPayBalance = suplAccPayWork.ThisTimeTtlBlcAcPay + (suplAccPayWork.OfsThisTimeStock + suplAccPayWork.OfsThisStockTax);

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                    #endregion ■■ 仕入データ無しの場合の処理 ■■
                    #endregion
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }

		/// <summary>
        /// 仕入先買掛金額ワーク用Listから仕入総括形式で仕入データを取得します(月次集計用)
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新List</param>
        /// <param name="suplAccPayChildWorkList">仕入先買掛金額マスタ更新List(子レコード用)</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先買掛金額ワーク用Listから仕入総括形式で仕入データを取得します</br>
        /// <br>Programmer : FSI佐々木 貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int GetStockSlipByAddUpSecCodeForMonthlyAddUp(ref SuplAccPayWork suplAccPayWork, ref ArrayList suplAccPayChildWorkList, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            SqlDataReader myReader = null;

            // 支払金額、締後仕入、締後支払、締後消費税の算出変数
            Int64 stockTotalPayBalance = 0;
            Int64 totalAfterStock = 0;
            Int64 totalAfterStockOutTax = 0;
            Double totalAfterStockOutTax_S = 0;
            ArrayList totalAfterStockOutTaxList = new ArrayList();

            Int64 totalAfterPayment = 0;
            int totalAfterDay = 0;
            //TtlDayCalcDB ttlDayCalcDB = new TtlDayCalcDB();

            SqlCommand sqlCommRef = null;

            #region ■当月消費税算出処理 締後仕入/支払集計
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                #region 残高取得
                string sqlText = string.Empty;
                try
                {
                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                    {
                        sqlCommRef = sqlCommand;

                        MakeGetTotalDayCalcSqlByAddUpSecCode(ref suplAccPayWork, ref sqlCommRef);

                        sqlCommand.CommandTimeout = TimeOut;
                        myReader = sqlCommand.ExecuteReader();
                        if (myReader.Read())
                        {
                            stockTotalPayBalance = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("STOCKTOTALPAYBALANCERF"));
                            totalAfterDay = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ADDUPDATERF"));
                        }
                    }
                }
                finally
                {
                    if (null != myReader)
                    {
                        myReader.Dispose();
                    }
                }
                #endregion

                if (totalAfterDay != 0)
                {
                    #region 締後仕入金額取得
                    sqlText = string.Empty;
                    try
                    {
                        using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                        {
                            sqlCommRef = sqlCommand;

                            MakeGetTotalAfterStockSqlByAddUpSecCodeForMonthlyAddUp(ref suplAccPayWork, ref totalAfterDay, ref sqlCommRef);

                            sqlCommand.CommandTimeout = TimeOut;
                            myReader = sqlCommand.ExecuteReader();
                            while (myReader.Read())
                            {
                                // 仕入正価金額
                                totalAfterStock += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSTOCK"));
                                // 仕入外税消費税(伝票+明細)
                                totalAfterStockOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSTOCKOUTTAX"));
                                // 仕入外税消費税(支払親)
                                totalAfterStockOutTax_S +=
                                      SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF1"))
                                    + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF2"))
                                    + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF3"));
                                // 仕入外税消費税(支払子)
                                totalAfterStockOutTaxList.Add(
                                      SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF1_2"))
                                    + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF2_2"))
                                    + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF3_2")));
                            }
                        }
                    }
                    catch (SqlException ex)
                    {
                        //基底クラスに例外を渡して処理してもらう
                        status = base.WriteSQLErrorLog(ex);
                    }
                    finally
                    {
                        if (null != myReader)
                        {
                            myReader.Dispose();
                        }
                    }
                    #endregion

                    #region 締後支払金額取得
                    sqlText = string.Empty;
                    try
                    {
                        using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                        {
                            sqlCommRef = sqlCommand;
                            MakeGetTotalAfterPeymentSqlBySecCode(ref suplAccPayWork, ref totalAfterDay, ref sqlCommRef);

                            sqlCommand.CommandTimeout = TimeOut;
                            myReader = sqlCommand.ExecuteReader();

                            while (myReader.Read())
                            {
                                totalAfterPayment += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("PAYMENTTOTALRF"));
                            }
                        }
                    }
                    finally
                    {
                        if (null != myReader)
                        {
                            myReader.Dispose();
                        }
                    }
                    #endregion
                }
            }
            #endregion

            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.Connection = sqlConnection;
                    string sqlText = string.Empty;
                    #region [●集計レコード作成処理]
                    sqlCommRef = sqlCommand;
                    MakeGetTotalAfterPeymentSqlByAddUpSecCode(ref suplAccPayWork, ref sqlCommRef);

                    sqlCommand.CommandTimeout = TimeOut;
                    myReader = sqlCommand.ExecuteReader();

                    double FractionProcUnit = 0;
                    long SetTax = 0;
                    long WorkTax = 0;
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    while (myReader.Read())
                    {
                        #region 結果セット
                        suplAccPayWork.FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF")); //端数処理区分
                        FractionProcUnit = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("FRACTIONPROCUNITRF"));           // 端数処理単位
                        suplAccPayWork.PayeeCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYEECODERF"));
                        suplAccPayWork.PayeeName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM1RF"));
                        suplAccPayWork.PayeeName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM2RF"));
                        suplAccPayWork.PayeeSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERSNMRF"));
                        suplAccPayWork.FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF"));// 端数処理区分
                        // 今回繰越残高(前回支払額-今回支払金額)
                        suplAccPayWork.ThisTimeTtlBlcAcPay = suplAccPayWork.LastTimeAccPay - suplAccPayWork.ThisTimePayNrml;

                        //■相殺
                        suplAccPayWork.OfsThisTimeStock = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFSTHISTIMESTOCKRF"));
                        suplAccPayWork.ItdedOffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETOUTTAXRF"));
                        suplAccPayWork.ItdedOffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETINTAXRF"));
                        suplAccPayWork.ItdedOffsetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETTAXFREERF"));
                        suplAccPayWork.OffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFFSETINTAXRF"));

                        #region suplAccPayWork.OffsetOutTax [相殺後外税消費税]
                        // 相殺後外税消費税 = 仕入外税消費税 + 返品外税消費税 + 値引外税消費税 ※各種転嫁方式別に計算し合算する 
                        // 伝票転嫁 + 明細転嫁  
                        suplAccPayWork.OffsetOutTax =
                              SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF"))
                            + SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"))
                            + SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                        // 支払(親)転嫁
                        FracCalc(
                                SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S"))
                              + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S"))
                              + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S"))
                            , FractionProcUnit
                            , suplAccPayWork.FractionProcCd
                            , out SetTax);
                        suplAccPayWork.OffsetOutTax += SetTax;
                        // 支払(子)転嫁
                        FracCalc(
                                SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S2"))
                              + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S2"))
                              + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S2"))
                            , FractionProcUnit
                            , suplAccPayWork.FractionProcCd
                            , out SetTax);
                        suplAccPayWork.OffsetOutTax += SetTax;
                        #endregion

                        #region 当月消費税SET処理
                        if (totalAfterDay != 0)
                        {
                            // 伝票転嫁 + 明細転嫁
                            WorkTax = totalAfterStockOutTax;

                            // 支払(親)転嫁
                            FracCalc((totalAfterStockOutTax_S), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                            WorkTax += SetTax;

                            // 支払(子)転嫁
                            for (int i = 0; i < totalAfterStockOutTaxList.Count; i++)
                            {
                                if (Convert.ToDouble(totalAfterStockOutTaxList[i]) != 0)
                                {
                                    //締後消費税算出
                                    FracCalc(Convert.ToDouble(totalAfterStockOutTaxList[i]), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                                    WorkTax += SetTax;
                                }
                            }

                            //相殺後今回売上消費税 = (支払金額 + 締後仕入 - 締後支払 + 締後消費税) - (前月仕入残高 + 当月仕入 - 当月支払) 
                            suplAccPayWork.OfsThisStockTax =
                                  Convert.ToInt64((stockTotalPayBalance + totalAfterStock - totalAfterPayment + WorkTax))
                                - Convert.ToInt64((suplAccPayWork.LastTimeAccPay + suplAccPayWork.OfsThisTimeStock - suplAccPayWork.ThisTimePayNrml));
                        }
                        else
                        {
                            suplAccPayWork.OfsThisStockTax = suplAccPayWork.OffsetInTax + suplAccPayWork.OffsetOutTax;
                        }
                        #endregion

                        // ■仕入
                        suplAccPayWork.ThisTimeStockPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISTIMESTOCKPRICERF"));
                        suplAccPayWork.TtlItdedStcOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCOUTTAXRF"));
                        suplAccPayWork.TtlItdedStcInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCINTAXRF"));
                        suplAccPayWork.TtlItdedStcTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCTAXFREERF"));
                        suplAccPayWork.TtlStockInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKINNERTAXRF"));
                        #region suplAccPayWork.TtlStockOuterTax [今回仕入外税消費税]
                        // 今回仕入外税消費税 ※各種転嫁方式別に計算を行い、合算する
                        // 伝票転嫁・明細転嫁
                        suplAccPayWork.TtlStockOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF"));
                        // 支払(親)転嫁
                        FracCalc(
                              SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S"))
                            , FractionProcUnit
                            , suplAccPayWork.FractionProcCd
                            , out SetTax);
                        suplAccPayWork.TtlStockOuterTax += SetTax;
                        // 支払(子)転嫁
                        FracCalc(
                              SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S2"))
                            , FractionProcUnit
                            , suplAccPayWork.FractionProcCd
                            , out SetTax);
                        suplAccPayWork.TtlStockOuterTax += SetTax;
                        #endregion
                        suplAccPayWork.ThisStcPrcTax = suplAccPayWork.TtlStockInnerTax + suplAccPayWork.TtlStockOuterTax;

                        // ■返品
                        suplAccPayWork.ThisStckPricRgds = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSTCKPRICRGDSRF"));
                        suplAccPayWork.TtlItdedRetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETOUTTAXRF"));
                        suplAccPayWork.TtlItdedRetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETINTAXRF"));
                        suplAccPayWork.TtlItdedRetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETTAXFREERF"));
                        suplAccPayWork.TtlRetInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETINNERTAXRF"));
                        #region suplAccPayWork.TtlRetOuterTax [今回返品外税消費税]
                        // 今回返品外税消費税 ※各種転嫁方式別に計算を行い、合算する
                        // 伝票転嫁・明細転嫁
                        suplAccPayWork.TtlRetOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"));
                        // 支払(親)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S")), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                        suplAccPayWork.TtlRetOuterTax += SetTax;
                        // 支払(子)転嫁
                        FracCalc(
                              SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S2"))
                            , FractionProcUnit
                            , suplAccPayWork.FractionProcCd
                            , out SetTax);
                        suplAccPayWork.TtlRetOuterTax += SetTax;
                        #endregion
                        suplAccPayWork.ThisStcPrcTaxRgds = suplAccPayWork.TtlRetInnerTax + suplAccPayWork.TtlRetOuterTax;


                        // ■値引
                        suplAccPayWork.ThisStckPricDis = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSTCKPRICDISRF"));
                        suplAccPayWork.TtlItdedDisOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISOUTTAXRF"));
                        suplAccPayWork.TtlItdedDisInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISINTAXRF"));
                        suplAccPayWork.TtlItdedDisTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISTAXFREERF"));
                        suplAccPayWork.TtlDisInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISINNERTAXRF"));
                        #region suplAccPayWork.TtlDisOuterTax [今回値引外税消費税]
                        // 今回値引外税消費税 ※各種転嫁方式別に計算を行い、合算する
                        // 伝票転嫁・明細転嫁
                        suplAccPayWork.TtlDisOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                        // 支払(親)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S")), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                        suplAccPayWork.TtlDisOuterTax += SetTax;
                        // 支払(子)転嫁
                        FracCalc(
                              SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S2"))
                            , FractionProcUnit
                            , suplAccPayWork.FractionProcCd
                            , out SetTax);
                        suplAccPayWork.TtlDisOuterTax += SetTax;
                        #endregion
                        suplAccPayWork.ThisStcPrcTaxDis = suplAccPayWork.TtlDisInnerTax + suplAccPayWork.TtlDisOuterTax;

                        suplAccPayWork.TaxAdjust = 0;     // 消費税調整額(0固定)
                        suplAccPayWork.BalanceAdjust = 0; // 残高調整額(0固定)
                        suplAccPayWork.StockSlipCount = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("STOCKSLIPCOUNT"));　// 伝票枚数

                        // 仕入合計残高(支払計) = 今回繰越金額(支払計) + (相殺後今回仕入金額 + 相殺後今回仕入消費税)
                        suplAccPayWork.StckTtlAccPayBalance = suplAccPayWork.ThisTimeTtlBlcAcPay + (suplAccPayWork.OfsThisTimeStock + suplAccPayWork.OfsThisStockTax);
                        #endregion

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }

                    #region ■■ 仕入データ無しの場合の処理 ■■
                    if ((int)ConstantManagement.DB_Status.ctDB_NOT_FOUND == status)
                    {
                        // 集計レコード不足項目セット
                        // 今回繰越残高
                        suplAccPayWork.ThisTimeTtlBlcAcPay = (suplAccPayWork.LastTimeAccPay) - suplAccPayWork.ThisTimePayNrml;

                        // 仕入合計残高(支払計) = 今回繰越金額(支払計) + (相殺後今回仕入金額 + 相殺後今回仕入消費税)
                        suplAccPayWork.StckTtlAccPayBalance = suplAccPayWork.ThisTimeTtlBlcAcPay + (suplAccPayWork.OfsThisTimeStock + suplAccPayWork.OfsThisStockTax);

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                    #endregion ■■ 仕入データ無しの場合の処理 ■■
                    #endregion
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        
        /// <summary>
        /// 計上拠点別支払先別残高取得SQLを設定します
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新ワーク</param>
        /// <param name="sqlCommand">sqlステートメント</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 計上拠点別支払先別残高取得SQLを設定します</br>
        /// <br>Programmer : FSI佐々木 貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int MakeGetTotalDayCalcSqlByAddUpSecCode(ref SuplAccPayWork suplAccPayWork, ref SqlCommand sqlCommand)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            string sqlText = string.Empty;

            sqlText += "SELECT" + Environment.NewLine;
            sqlText += "  STOCKTOTALPAYBALANCERF," + Environment.NewLine;
            sqlText += "  ADDUPSECCODERF," + Environment.NewLine;
            sqlText += "  ADDUPDATERF" + Environment.NewLine;
            sqlText += "FROM SUPLIERPAYRF WITH (READUNCOMMITTED)" + Environment.NewLine;
            sqlText += "WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
            sqlText += "  AND PAYEECODERF=@FINDPAYEECODE" + Environment.NewLine;
            sqlText += "  AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
            sqlText += "  AND ADDUPDATERF>@FINDADDUPDATEST" + Environment.NewLine;
            sqlText += "  AND ADDUPDATERF<@FINDADDUPDATEED" + Environment.NewLine;

            sqlCommand.CommandText = sqlText;

            //Prameterオブジェクトの作成
            SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
            SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDPAYEECODE", SqlDbType.Int);
            SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
            SqlParameter findParaAddUpDateSt = sqlCommand.Parameters.Add("@FINDADDUPDATEST", SqlDbType.Int);
            SqlParameter findParaAddUpDateEd = sqlCommand.Parameters.Add("@FINDADDUPDATEED", SqlDbType.Int);

            //Parameterオブジェクトへ値設定
            findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
            findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);
            findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);
            findParaAddUpDateSt.Value = SqlDataMediator.SqlSetInt32(TDateTime.DateTimeToLongDate(suplAccPayWork.LaMonCAddUpUpdDate));
            findParaAddUpDateEd.Value = SqlDataMediator.SqlSetInt32(TDateTime.DateTimeToLongDate(suplAccPayWork.AddUpDate));

            return status;
        }

        /// <summary>
        /// 計上拠点別支払先別仕入金額取得SQLを設定します
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新ワーク</param>
        /// <param name="totalAfterDay">締日</param>
        /// <param name="sqlCommand">sqlステートメント</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 計上拠点別支払先別仕入金額取得SQLを設定します</br>
        /// <br>Programmer : FSI佐々木 貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int MakeGetTotalAfterStockSqlByAddUpSecCode(ref SuplAccPayWork suplAccPayWork, ref int totalAfterDay, ref SqlCommand sqlCommand)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            string sqlText = string.Empty;

            sqlText += "SELECT" + Environment.NewLine;
            sqlText += "  STOCK.ENTERPRISECODERF" + Environment.NewLine;
            sqlText += " ,STOCK.STOCKSECTIONCDRF " + Environment.NewLine;
            sqlText += " ,STOCK.SUPPLIERCDRF AS PAYEECODERF" + Environment.NewLine;
            sqlText += " ,STOCK.SUPPLIERCDRF" + Environment.NewLine;
            sqlText += " ,STOCK.STOCKSECTIONCDRF AS ADDUPSECCODE" + Environment.NewLine;
            sqlText += " ,SUM(STOCK.STOCKNETPRICERF + STOCK.STCKDISTTLTAXEXCRF) AS TOTALAFTERSTOCK -- 仕入正価金額" + Environment.NewLine;
            sqlText += " ,SUM(CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 0 OR STOCK.SUPPCTAXLAYCDRF = 1) THEN STOCK.STOCKOUTTAXRF ELSE 0 END ) AS TOTALAFTERSTOCKOUTTAX -- 消費税額(伝票転嫁+明細転嫁)" + Environment.NewLine;
            sqlText += "  -- 支払(親)転嫁" + Environment.NewLine;
            sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATERF)" + Environment.NewLine;
            sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATERF) ELSE 0 END)) AS OUTTAXRF1" + Environment.NewLine;
            sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE2RF)" + Environment.NewLine;
            sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE2RF) ELSE 0 END)) AS OUTTAXRF2" + Environment.NewLine;
            sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE3RF)" + Environment.NewLine;
            sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE3RF) ELSE 0 END)) AS OUTTAXRF3" + Environment.NewLine;
            sqlText += "  -- 支払(子)転嫁" + Environment.NewLine;
            sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATERF)" + Environment.NewLine;
            sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATERF) ELSE 0 END)) AS OUTTAXRF1_2" + Environment.NewLine;
            sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE2RF)" + Environment.NewLine;
            sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF +STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE2RF) ELSE 0 END)) AS OUTTAXRF2_2" + Environment.NewLine;
            sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE3RF)" + Environment.NewLine;
            sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF +STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE3RF) ELSE 0 END)) AS OUTTAXRF3_2 " + Environment.NewLine;
            sqlText += " ,SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS STCKPRCCONSTAXINCLURF--消費税額（内税）" + Environment.NewLine;
            sqlText += " FROM" + Environment.NewLine;
            sqlText += "  STOCKSLIPRF AS STOCK WITH (READUNCOMMITTED)" + Environment.NewLine;
            sqlText += " LEFT JOIN TAXRATESETRF AS TAX WITH (READUNCOMMITTED)" + Environment.NewLine;
            sqlText += "  ON STOCK.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
            sqlText += " WHERE STOCK.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
            sqlText += "  AND STOCK.SUPPLIERCDRF=@FINDCUSTOMERCODE" + Environment.NewLine;
            sqlText += "  AND (STOCK.STOCKADDUPADATERF<=@FINDADDUPDATE AND STOCK.STOCKADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
            sqlText += "  AND STOCK.SUPPLIERFORMALRF=0" + Environment.NewLine;
            sqlText += "  AND STOCK.DEBITNOTEDIVRF=0" + Environment.NewLine;
            sqlText += "  AND STOCK.LOGICALDELETECODERF=0" + Environment.NewLine;
            sqlText += "  AND STOCK.STOCKSECTIONCDRF=@FINDADDUPSECCODE" + Environment.NewLine;
            sqlText += "GROUP BY" + Environment.NewLine;
            sqlText += "  STOCK.ENTERPRISECODERF" + Environment.NewLine;
            sqlText += " ,STOCK.STOCKSECTIONCDRF " + Environment.NewLine;
            sqlText += " ,STOCK.SUPPLIERCDRF" + Environment.NewLine;
            sqlText += " ,STOCK.STOCKSECTIONCDRF" + Environment.NewLine;

            sqlCommand.CommandText = sqlText;

            //Prameterオブジェクトの作成
            SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
            SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
            SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
            SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
            SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);

            //Parameterオブジェクトへ値設定
            findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
            findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);
            findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);
            findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
            findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetInt32(totalAfterDay);

            return status;
        }

        /// <summary>
        /// 計上拠点別支払先別仕入金額取得SQLを設定します(月次更新用)
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新ワーク</param>
        /// <param name="totalAfterDay">締日</param>
        /// <param name="sqlCommand">sqlステートメント</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 計上拠点別支払先別仕入金額取得SQLを設定します(月次更新用)</br>
        /// <br>Programmer : FSI佐々木 貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int MakeGetTotalAfterStockSqlByAddUpSecCodeForMonthlyAddUp(ref SuplAccPayWork suplAccPayWork, ref int totalAfterDay, ref SqlCommand sqlCommand)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            string sqlText = string.Empty;

            sqlText += "SELECT" + Environment.NewLine;
            sqlText += "  STOCK.ENTERPRISECODERF" + Environment.NewLine;
            sqlText += " ,STOCK.STOCKSECTIONCDRF " + Environment.NewLine;
            sqlText += " ,STOCK.SUPPLIERCDRF AS PAYEECODERF" + Environment.NewLine;
            sqlText += " ,STOCK.SUPPLIERCDRF" + Environment.NewLine;
            sqlText += " ,STOCK.STOCKSECTIONCDRF AS ADDUPSECCODE" + Environment.NewLine;
            sqlText += " ,SUM(STOCK.STOCKNETPRICERF + STOCK.STCKDISTTLTAXEXCRF) AS TOTALAFTERSTOCK -- 仕入正価金額" + Environment.NewLine;
            sqlText += " ,SUM(CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 0 OR STOCK.SUPPCTAXLAYCDRF = 1) THEN STOCK.STOCKPRICECONSTAXRF ELSE 0 END ) AS TOTALAFTERSTOCKOUTTAX -- 消費税額(伝票転嫁+明細転嫁)" + Environment.NewLine;
            sqlText += "  -- 支払(親)転嫁" + Environment.NewLine;
            sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATERF)" + Environment.NewLine;
            sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATERF) ELSE 0 END)) AS OUTTAXRF1" + Environment.NewLine;
            sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE2RF)" + Environment.NewLine;
            sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE2RF) ELSE 0 END)) AS OUTTAXRF2" + Environment.NewLine;
            sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE3RF)" + Environment.NewLine;
            sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE3RF) ELSE 0 END)) AS OUTTAXRF3" + Environment.NewLine;
            sqlText += "  -- 支払(子)転嫁" + Environment.NewLine;
            sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 3) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATERF)" + Environment.NewLine;
            sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATERF) ELSE 0 END)) AS OUTTAXRF1_2" + Environment.NewLine;
            sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 3) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE2RF)" + Environment.NewLine;
            sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF +STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE2RF) ELSE 0 END)) AS OUTTAXRF2_2" + Environment.NewLine;
            sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 3) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE3RF)" + Environment.NewLine;
            sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF +STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE3RF) ELSE 0 END)) AS OUTTAXRF3_2 " + Environment.NewLine;
            sqlText += " ,SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS STCKPRCCONSTAXINCLURF--消費税額（内税）" + Environment.NewLine;
            sqlText += " FROM" + Environment.NewLine;
            sqlText += "  STOCKSLIPRF AS STOCK WITH (READUNCOMMITTED)" + Environment.NewLine;
            sqlText += " LEFT JOIN TAXRATESETRF AS TAX WITH (READUNCOMMITTED)" + Environment.NewLine;
            sqlText += "  ON STOCK.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
            sqlText += " WHERE STOCK.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
            sqlText += "  AND STOCK.SUPPLIERCDRF=@FINDCUSTOMERCODE" + Environment.NewLine;
            sqlText += "  AND (STOCK.STOCKADDUPADATERF<=@FINDADDUPDATE AND STOCK.STOCKADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
            sqlText += "  AND STOCK.SUPPLIERFORMALRF=0" + Environment.NewLine;
            sqlText += "  AND STOCK.DEBITNOTEDIVRF=0" + Environment.NewLine;
            sqlText += "  AND STOCK.LOGICALDELETECODERF=0" + Environment.NewLine;
            sqlText += "  AND STOCK.STOCKSECTIONCDRF=@FINDADDUPSECCODE" + Environment.NewLine;
            sqlText += "GROUP BY" + Environment.NewLine;
            sqlText += "  STOCK.ENTERPRISECODERF" + Environment.NewLine;
            sqlText += " ,STOCK.STOCKSECTIONCDRF " + Environment.NewLine;
            sqlText += " ,STOCK.SUPPLIERCDRF" + Environment.NewLine;
            sqlText += " ,STOCK.STOCKSECTIONCDRF" + Environment.NewLine;

            sqlCommand.CommandText = sqlText;

            //Prameterオブジェクトの作成
            SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
            SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
            SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
            SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
            SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);

            //Parameterオブジェクトへ値設定
            findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
            findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);
            findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);
            findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
            findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetInt32(totalAfterDay);

            return status;
        }

        /// <summary>
        ///  計上拠点別支払先別支払金額取得SQLを設定します
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新ワーク</param>
        /// <param name="totalAfterDay">締日</param>
        /// <param name="sqlCommand">sqlステートメント</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 計上拠点別支払先別支払金額取得SQLを設定します</br>
        /// <br>Programmer : FSI佐々木 貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int MakeGetTotalAfterPeymentSqlBySecCode(ref SuplAccPayWork suplAccPayWork, ref int totalAfterDay, ref SqlCommand sqlCommand)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            string sqlText = string.Empty;

            sqlText = string.Empty;
            sqlText += "SELECT *" + Environment.NewLine;
            sqlText += " FROM PAYMENTSLPRF WITH (READUNCOMMITTED)" + Environment.NewLine;
            sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
            sqlText += "    AND PAYEECODERF=@FINDPAYEECODE" + Environment.NewLine;
            sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
            sqlText += "    AND(" + Environment.NewLine;
            sqlText += "            ADDUPADATERF<=@FINDADDUPDATE" + Environment.NewLine;
            sqlText += "        AND ADDUPADATERF>@FINDLASTTIMEADDUPDATE" + Environment.NewLine;
            sqlText += "    )" + Environment.NewLine;
            sqlText += "    AND LOGICALDELETECODERF=0 " + Environment.NewLine;

            sqlCommand.CommandText = sqlText;

            //Prameterオブジェクトの作成
            SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
            SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDPAYEECODE", SqlDbType.Int);
            SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
            SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
            SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);

            //Parameterオブジェクトへ値設定
            findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
            findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);
            findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
            findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetInt32(totalAfterDay);
            findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);

            return status;
        }

        /// <summary>
        ///  仕入計上拠点別仕入データ取得SQLを設定します
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新ワーク</param>
        /// <param name="sqlCommand">sqlステートメント</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入計上拠点別仕入データ取得SQLを設定します</br>
        /// <br>Programmer : FSI佐々木 貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int MakeGetTotalAfterPeymentSqlByAddUpSecCode(ref SuplAccPayWork suplAccPayWork, ref SqlCommand sqlCommand)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            string sqlText = string.Empty;

            #region SELECT文作成
            sqlText += "SELECT" + Environment.NewLine;
            sqlText += " SUPLIERPAY.STOCKSECTIONCDRF AS ADDUPSECCODERF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.PAYEECODERF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.SUPPLIERNM1RF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.SUPPLIERNM2RF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.SUPPLIERSNMRF,  " + Environment.NewLine;
            sqlText += " SUPLIERPAY.FRACTIONPROCUNITRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.FRACTIONPROCCDRF,  " + Environment.NewLine;
            sqlText += " SUPLIERPAY.PAYMENTMONTHCODERF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.PAYMENTDAYRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.PAYMENTCONDRF, " + Environment.NewLine;
            sqlText += " SUPLIERPAY.STOCKSLIPCOUNT," + Environment.NewLine;
            sqlText += " SUPLIERPAY.THISTIMESTOCKPRICERF + SUPLIERPAY.THISSTCKPRICRGDSRF + SUPLIERPAY.THISSTCKPRICDISRF AS OFSTHISTIMESTOCKRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TTLITDEDSTCOUTTAXRF + SUPLIERPAY.TTLITDEDRETOUTTAXRF+SUPLIERPAY.TTLITDEDDISOUTTAXRF AS ITDEDOFFSETOUTTAXRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TTLITDEDSTCINTAXRF + SUPLIERPAY.TTLITDEDRETINTAXRF+SUPLIERPAY.TTLITDEDDISINTAXRF AS ITDEDOFFSETINTAXRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TTLITDEDSTCTAXFREERF + SUPLIERPAY.TTLITDEDRETTAXFREERF+SUPLIERPAY.TTLITDEDDISTAXFREERF AS ITDEDOFFSETTAXFREERF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.STCKPRCCONSTAXINCLURF+SUPLIERPAY.TTLRETINNERTAXRF+SUPLIERPAY.STCKDISTTLTAXINCLURF AS OFFSETINTAXRF," + Environment.NewLine;
            // 仕入
            sqlText += " SUPLIERPAY.THISTIMESTOCKPRICERF AS THISTIMESTOCKPRICERF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TTLITDEDSTCOUTTAXRF AS TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TTLITDEDSTCINTAXRF AS TTLITDEDSTCINTAXRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TTLITDEDSTCTAXFREERF AS TTLITDEDSTCTAXFREERF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.STCKPRCCONSTAXINCLURF AS TTLSTOCKINNERTAXRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.STOCKOUTTAXRF AS TTLSTOCKOUTERTAXRF,-- 伝票転嫁と明細転嫁" + Environment.NewLine;
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
            sqlText += " SUPLIERPAY.TAXRATERF AS TAXRATERF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TAXRATE3RF AS TAXRATE3RF," + Environment.NewLine;
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
            //sqlText += " SUPLIERPAY.STOCKOUTTAXRF1+SUPLIERPAY.STOCKOUTTAXRF2+SUPLIERPAY.STOCKOUTTAXRF3 AS TTLSTOCKOUTERTAXRF_S,-- 支払(親)転嫁" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
            sqlText += " SUPLIERPAY.STOCKOUTTAXRF1*TAXRATERF+SUPLIERPAY.STOCKOUTTAXRF2*TAXRATE2RF+SUPLIERPAY.STOCKOUTTAXRF3*TAXRATE3RF AS TTLSTOCKOUTERTAXRF_S,-- 支払(親)転嫁" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
            //sqlText += " SUPLIERPAY.STOCKOUTTAXRF1_2+SUPLIERPAY.STOCKOUTTAXRF2_2+SUPLIERPAY.STOCKOUTTAXRF3_2 AS TTLSTOCKOUTERTAXRF_S2,--支払(子)転嫁　仕入金額消費税額（外税）" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
            sqlText += " SUPLIERPAY.STOCKOUTTAXRF1_2*TAXRATERF+SUPLIERPAY.STOCKOUTTAXRF2_2*TAXRATE2RF+SUPLIERPAY.STOCKOUTTAXRF3_2*TAXRATE3RF AS TTLSTOCKOUTERTAXRF_S2,--支払(子)転嫁　仕入金額消費税額（外税）" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
            // 返品
            sqlText += " SUPLIERPAY.THISSTCKPRICRGDSRF AS THISSTCKPRICRGDSRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TTLITDEDRETOUTTAXRF AS TTLITDEDRETOUTTAXRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TTLITDEDRETINTAXRF AS TTLITDEDRETINTAXRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TTLITDEDRETTAXFREERF AS TTLITDEDRETTAXFREERF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TTLRETINNERTAXRF AS TTLRETINNERTAXRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF AS TTLRETOUTERTAXRF, -- 伝票転嫁と明細転嫁" + Environment.NewLine;
            //sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1+SUPLIERPAY.TTLRETOUTERTAXRF2+SUPLIERPAY.TTLRETOUTERTAXRF3 AS TTLRETOUTERTAXRF_S,--支払(親)転嫁" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
            sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1*TAXRATERF+SUPLIERPAY.TTLRETOUTERTAXRF2*TAXRATE2RF+SUPLIERPAY.TTLRETOUTERTAXRF3*TAXRATE3RF AS TTLRETOUTERTAXRF_S,--支払(親)転嫁" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
            //sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1_2+SUPLIERPAY.TTLRETOUTERTAXRF2_2+SUPLIERPAY.TTLRETOUTERTAXRF3_2 AS TTLRETOUTERTAXRF_S2,-- 支払(子)転嫁　返品金額消費税額（外税）" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
            sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1_2*TAXRATERF+SUPLIERPAY.TTLRETOUTERTAXRF2_2*TAXRATE2RF+SUPLIERPAY.TTLRETOUTERTAXRF3_2*TAXRATE3RF AS TTLRETOUTERTAXRF_S2,-- 支払(子)転嫁　返品金額消費税額（外税）" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
            // 値引
            sqlText += " SUPLIERPAY.THISSTCKPRICDISRF AS THISSTCKPRICDISRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TTLITDEDDISOUTTAXRF AS TTLITDEDDISOUTTAXRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TTLITDEDDISINTAXRF AS TTLITDEDDISINTAXRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.TTLITDEDDISTAXFREERF AS TTLITDEDDISTAXFREERF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.STCKDISTTLTAXINCLURF AS TTLDISINNERTAXRF," + Environment.NewLine;
            sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF AS TTLDISOUTERTAXRF, -- 伝票転嫁と明細転嫁" + Environment.NewLine;
            //sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1+SUPLIERPAY.STOCKDISOUTTAXRF2+SUPLIERPAY.STOCKDISOUTTAXRF3 AS TTLDISOUTERTAXRF_S, -- 支払(親)転嫁" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
            sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1*TAXRATERF+SUPLIERPAY.STOCKDISOUTTAXRF2*TAXRATE2RF+SUPLIERPAY.STOCKDISOUTTAXRF3*TAXRATE3RF AS TTLDISOUTERTAXRF_S, -- 支払(親)転嫁" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
            //sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1_2+SUPLIERPAY.STOCKDISOUTTAXRF2_2+SUPLIERPAY.STOCKDISOUTTAXRF3_2 AS TTLDISOUTERTAXRF_S2 -- 支払(子)  値引消費税額（外税）" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
            sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1_2*TAXRATERF+SUPLIERPAY.STOCKDISOUTTAXRF2_2*TAXRATE2RF+SUPLIERPAY.STOCKDISOUTTAXRF3_2*TAXRATE3RF AS TTLDISOUTERTAXRF_S2 -- 支払(子)  値引消費税額（外税）" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
            sqlText += " FROM" + Environment.NewLine;
            sqlText += "(" + Environment.NewLine;

            #region [SUBクエリ]
            sqlText += " SELECT" + Environment.NewLine;
            sqlText += "  STOCK.PAYEECODERF," + Environment.NewLine;
            sqlText += "  STOCK.STOCKSECTIONCDRF," + Environment.NewLine;
            sqlText += "  SUPPLIER.SUPPLIERNM1RF," + Environment.NewLine;
            sqlText += "  SUPPLIER.SUPPLIERNM2RF," + Environment.NewLine;
            sqlText += "  SUPPLIER.SUPPLIERSNMRF," + Environment.NewLine;
            sqlText += "  SUPPLIER.STOCKCNSTAXFRCPROCCDRF," + Environment.NewLine;
            sqlText += "  SUPPLIER.PAYMENTMONTHCODERF," + Environment.NewLine;
            sqlText += "  SUPPLIER.PAYMENTDAYRF," + Environment.NewLine;
            sqlText += "  SUPPLIER.PAYMENTCONDRF," + Environment.NewLine;
            sqlText += "  PROCMONEY.FRACTIONPROCUNITRF," + Environment.NewLine;
            sqlText += "  PROCMONEY.FRACTIONPROCCDRF, " + Environment.NewLine;
            sqlText += "  COUNT(STOCK.SUPPLIERSLIPNORF) STOCKSLIPCOUNT, --伝票枚数" + Environment.NewLine;
            // 仕入
            sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STOCKNETPRICERF ELSE 0 END)) AS THISTIMESTOCKPRICERF,       --仕入正価金額" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCOUTTAXRF ELSE 0 END)) AS TTLITDEDSTCOUTTAXRF,    --仕入外税対象額合計" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCINTAXRF ELSE 0 END)) AS TTLITDEDSTCINTAXRF,      --仕入内税対象額合計" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCTAXFREERF ELSE 0 END)) AS TTLITDEDSTCTAXFREERF,  --仕入非課税対象額合計" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS STCKPRCCONSTAXINCLURF,--仕入金額消費税額（内税）" + Environment.NewLine;
            // 伝票転嫁と明細転嫁 売上金額消費税額（外税）
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 0 OR STOCK.SUPPCTAXLAYCDRF = 1) AND (STOCK.SUPPLIERSLIPCDRF =10) THEN STOCK.STOCKOUTTAXRF ELSE 0 END)) AS STOCKOUTTAXRF,                --仕入金額消費税額（外税）" + Environment.NewLine;
            // 支払(親)転嫁 売上金額消費税額（外税）
            // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
            //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS STOCKOUTTAXRF1,--税率1" + Environment.NewLine;
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
            //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS STOCKOUTTAXRF2,     --税率2" + Environment.NewLine;
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
            //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS STOCKOUTTAXRF3,     --税率3" + Environment.NewLine;
            // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
            sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF1,--税率1" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
            sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF2,     --税率2" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
            sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF3,     --税率3" + Environment.NewLine;
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
            // 支払(子)転嫁　仕入金額消費税額（外税）
            // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
            //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS STOCKOUTTAXRF1_2,--税率1" + Environment.NewLine;
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
            //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS STOCKOUTTAXRF2_2,     --税率2" + Environment.NewLine;
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
            //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS STOCKOUTTAXRF3_2,     --税率3" + Environment.NewLine;
            // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
            sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF1_2,--税率1" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
            sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF2_2,     --税率2" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
            sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF3_2,     --税率3" + Environment.NewLine;
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
            // 返品
            sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STOCKNETPRICERF ELSE 0 END)) AS THISSTCKPRICRGDSRF,       --返品正価金額" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCOUTTAXRF ELSE 0 END)) AS TTLITDEDRETOUTTAXRF,  --返品外税対象額合計" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCINTAXRF ELSE 0 END)) AS TTLITDEDRETINTAXRF,    --返品内税対象額合計" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCTAXFREERF ELSE 0 END)) AS TTLITDEDRETTAXFREERF,--返品非課税対象額合計" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS TTLRETINNERTAXRF,   --返品金額消費税額（内税）" + Environment.NewLine;
            // 伝票転嫁と明細転嫁 返品金額消費税額（外税）
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 0 OR STOCK.SUPPCTAXLAYCDRF = 1) AND (STOCK.SUPPLIERSLIPCDRF =20) THEN STOCK.STOCKOUTTAXRF ELSE 0 END)) AS TTLRETOUTERTAXRF,--返品金額消費税額（外税）" + Environment.NewLine;
            // 支払(親)転嫁 返品金額消費税額（外税）
            // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF)" + Environment.NewLine;
            //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS TTLRETOUTERTAXRF1,--税率1" + Environment.NewLine;
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF)" + Environment.NewLine;
            //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS TTLRETOUTERTAXRF2,     --税率2" + Environment.NewLine;
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF)" + Environment.NewLine;
            //sqlText += "           THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS TTLRETOUTERTAXRF3,      --税率3" + Environment.NewLine;
            // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF)" + Environment.NewLine;
            sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF1,--税率1" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF)" + Environment.NewLine;
            sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF2,     --税率2" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF)" + Environment.NewLine;
            sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF3,     --税率3" + Environment.NewLine;
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
            // 支払(子)　返品金額消費税額（外税）
            // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
            //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS TTLRETOUTERTAXRF1_2,--税率1" + Environment.NewLine;
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
            //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS TTLRETOUTERTAXRF2_2,     --税率2" + Environment.NewLine;
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
            //sqlText += "           THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS TTLRETOUTERTAXRF3_2,      --税率3" + Environment.NewLine;
            // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
            sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF1_2,--税率1" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
            sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF2_2,     --税率2" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
            sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF3_2,     --税率3" + Environment.NewLine;
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
            //値引
            sqlText += "  SUM(STOCK.STCKDISTTLTAXEXCRF) AS THISSTCKPRICDISRF,      --値引金額計（税抜き）" + Environment.NewLine;
            sqlText += "  SUM(STOCK.ITDEDSTOCKDISOUTTAXRF) AS TTLITDEDDISOUTTAXRF, --値引外税対象額合計" + Environment.NewLine;
            sqlText += "  SUM(STOCK.ITDEDSTOCKDISINTAXRF) AS TTLITDEDDISINTAXRF,   --値引内税対象額合計" + Environment.NewLine;
            sqlText += "  SUM(STOCK.ITDEDSTOCKDISTAXFRERF) AS TTLITDEDDISTAXFREERF,--値引非課税対象額合計" + Environment.NewLine;
            sqlText += "  SUM(STOCK.STCKDISTTLTAXINCLURF) AS STCKDISTTLTAXINCLURF, --値引消費税額（内税）" + Environment.NewLine;
            // 伝票転嫁と明細転嫁 売上値引消費税額（外税）
            sqlText += "  SUM(CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 0 OR STOCK.SUPPCTAXLAYCDRF = 1) THEN STOCK.STOCKDISOUTTAXRF ELSE 0 END) AS STOCKDISOUTTAXRF,--値引消費税額（外税）" + Environment.NewLine;
            // 支払(親)転嫁 売上値引消費税額（外税）
            // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
            //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATERF)ELSE 0 END)) AS STOCKDISOUTTAXRF1,  --税率1" + Environment.NewLine;
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
            //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE2RF)ELSE 0 END)) AS STOCKDISOUTTAXRF2, --税率2" + Environment.NewLine;
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
            //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE3RF)ELSE 0 END)) AS STOCKDISOUTTAXRF3,  --税率3" + Environment.NewLine;
            // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
            sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF1,  --税率1" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
            sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF2, --税率2" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
            sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF3,  --税率3" + Environment.NewLine;
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
            // 支払(子)　値引金額消費税額（外税）
            // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
            //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATERF)ELSE 0 END)) AS STOCKDISOUTTAXRF1_2, --税率1" + Environment.NewLine;
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
            //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE2RF)ELSE 0 END)) AS STOCKDISOUTTAXRF2_2,--税率2" + Environment.NewLine;
            //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
            //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE3RF)ELSE 0 END)) AS STOCKDISOUTTAXRF3_2 --税率3" + Environment.NewLine;
            // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
            sqlText += "  STOCK.TAXRATERF AS TAXRATERF," + Environment.NewLine;
            sqlText += "  STOCK.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
            sqlText += "  STOCK.TAXRATE3RF AS TAXRATE3RF," + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
            sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF1_2, --税率1" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
            sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF2_2,--税率2" + Environment.NewLine;
            sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
            sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF3_2 --税率3" + Environment.NewLine;
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
            sqlText += "  FROM" + Environment.NewLine;
            sqlText += "  (" + Environment.NewLine;

            #region SUBSUBクエリ
            sqlText += "   SELECT" + Environment.NewLine;
            sqlText += "    SUBSTOCK.LOGICALDELETECODERF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.ENTERPRISECODERF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.STOCKSECTIONCDRF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.SUPPCTAXLAYCDRF, --消費税転嫁方式(仕入データ) " + Environment.NewLine;
            sqlText += "    SUBSTOCK.SUPPLIERFORMALRF,--仕入形式" + Environment.NewLine;
            sqlText += "    SUBSTOCK.DEBITNOTEDIVRF,  --赤伝区分" + Environment.NewLine;
            sqlText += "    SUBSTOCK.SUPPLIERSLIPCDRF,--仕入伝票区分" + Environment.NewLine;
            sqlText += "    SUBSTOCK.STOCKGOODSCDRF,  --仕入商品区分" + Environment.NewLine;
            sqlText += "    SUBSTOCK.SUPPLIERSLIPNORF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.STOCKADDUPADATERF," + Environment.NewLine;
            sqlText += "    (CASE WHEN (SEARCHSUPPLIER.SUPPLIERCDRF IS NOT NULL) THEN SEARCHSUPPLIER.SUPPLIERCDRF ELSE SUBSTOCK.SUPPLIERCDRF END) AS PAYEECODERF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.STOCKNETPRICERF + SUBSTOCKDTL.DISSTOCKPRICETAXEXCGYO AS STOCKNETPRICERF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.TTLITDEDSTCOUTTAXRF + SUBSTOCKDTL.ITDEDSTOCKDISOUTTAXGYO AS TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.TTLITDEDSTCINTAXRF + SUBSTOCKDTL.ITDEDSTOCKDISINTAXGYO AS TTLITDEDSTCINTAXRF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.TTLITDEDSTCTAXFREERF + SUBSTOCKDTL.ITDEDSTOCKDISFREETAXGYO AS TTLITDEDSTCTAXFREERF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.STOCKOUTTAXRF + SUBSTOCKDTL.STOCKDISOUTTAXGYO AS STOCKOUTTAXRF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.STCKPRCCONSTAXINCLURF + SUBSTOCKDTL.STOCKDISINTAXGYO AS STCKPRCCONSTAXINCLURF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.STCKDISTTLTAXEXCRF - SUBSTOCKDTL.DISSTOCKPRICETAXEXCGYO AS STCKDISTTLTAXEXCRF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.ITDEDSTOCKDISOUTTAXRF - SUBSTOCKDTL.ITDEDSTOCKDISOUTTAXGYO AS ITDEDSTOCKDISOUTTAXRF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.ITDEDSTOCKDISINTAXRF - SUBSTOCKDTL.ITDEDSTOCKDISINTAXGYO AS ITDEDSTOCKDISINTAXRF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.ITDEDSTOCKDISTAXFRERF - SUBSTOCKDTL.ITDEDSTOCKDISFREETAXGYO AS ITDEDSTOCKDISTAXFRERF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.STOCKDISOUTTAXRF - SUBSTOCKDTL.STOCKDISOUTTAXGYO AS STOCKDISOUTTAXRF," + Environment.NewLine;
            sqlText += "    SUBSTOCK.STCKDISTTLTAXINCLURF - SUBSTOCKDTL.STOCKDISINTAXGYO AS STCKDISTTLTAXINCLURF," + Environment.NewLine;
            sqlText += "    TAX.TAXRATESTARTDATERF AS TAXRATESTARTDATERF," + Environment.NewLine;
            sqlText += "    TAX.TAXRATEENDDATERF AS TAXRATEENDDATERF," + Environment.NewLine;
            sqlText += "    TAX.TAXRATERF AS TAXRATERF," + Environment.NewLine;
            sqlText += "    TAX.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF," + Environment.NewLine;
            sqlText += "    TAX.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF," + Environment.NewLine;
            sqlText += "    TAX.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
            sqlText += "    TAX.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF," + Environment.NewLine;
            sqlText += "    TAX.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF," + Environment.NewLine;
            sqlText += "    TAX.TAXRATE3RF AS TAXRATE3RF    " + Environment.NewLine;
            sqlText += "   FROM" + Environment.NewLine;
            sqlText += "    STOCKSLIPRF AS SUBSTOCK WITH (READUNCOMMITTED)" + Environment.NewLine;
            sqlText += "    LEFT JOIN TAXRATESETRF AS TAX WITH (READUNCOMMITTED)" + Environment.NewLine;
            sqlText += "     ON SUBSTOCK.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
            sqlText += "    LEFT JOIN SUPPLIERRF AS SEARCHSUPPLIER WITH (READUNCOMMITTED)" + Environment.NewLine;
            sqlText += "     ON SUBSTOCK.ENTERPRISECODERF = SEARCHSUPPLIER.ENTERPRISECODERF" + Environment.NewLine;
            sqlText += "     AND SUBSTOCK.SUPPLIERCDRF = SEARCHSUPPLIER.SUPPLIERCDRF" + Environment.NewLine;
            sqlText += "    LEFT JOIN" + Environment.NewLine;
            sqlText += "    ( " + Environment.NewLine;
            sqlText += "      SELECT" + Environment.NewLine;
            sqlText += "       STOCK.ENTERPRISECODERF," + Environment.NewLine;
            sqlText += "       STOCK.SUPPLIERFORMALRF, --受注ステータス" + Environment.NewLine;
            sqlText += "       STOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
            sqlText += "       STOCK.SUPPLIERSLIPNORF, --仕入伝票番号 " + Environment.NewLine;
            sqlText += "       -- 行値引" + Environment.NewLine;
            sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS DISSTOCKPRICETAXEXCGYO," + Environment.NewLine;
            sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 0 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISOUTTAXGYO, -- 外税対象額(行値引)" + Environment.NewLine;
            sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 1 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISFREETAXGYO,-- 非課税対象額(行値引)" + Environment.NewLine;
            sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 2 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISINTAXGYO,  -- 内税対象額(行値引)" + Environment.NewLine;
            sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 0 ) THEN DTL.STOCKPRICECONSTAXRF ELSE 0 END) AS STOCKDISOUTTAXGYO, -- 外税額(行値引)" + Environment.NewLine;
            sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 2 ) THEN DTL.STOCKPRICECONSTAXRF ELSE 0 END) AS STOCKDISINTAXGYO  -- 内税額(行値引)" + Environment.NewLine;
            sqlText += "      FROM" + Environment.NewLine;
            sqlText += "       STOCKDETAILRF AS DTL WITH (READUNCOMMITTED)" + Environment.NewLine;
            sqlText += "      LEFT JOIN STOCKSLIPRF AS STOCK WITH (READUNCOMMITTED)" + Environment.NewLine;
            sqlText += "       ON DTL.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
            sqlText += "       AND DTL.SUPPLIERFORMALRF = STOCK.SUPPLIERFORMALRF" + Environment.NewLine;
            sqlText += "       AND DTL.SUPPLIERSLIPNORF = STOCK.SUPPLIERSLIPNORF" + Environment.NewLine;
            sqlText += "      GROUP BY" + Environment.NewLine;
            sqlText += "       STOCK.ENTERPRISECODERF," + Environment.NewLine;
            sqlText += "       STOCK.SUPPLIERFORMALRF, --受注ステータス" + Environment.NewLine;
            sqlText += "       STOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
            sqlText += "       STOCK.SUPPLIERSLIPNORF --仕入伝票番号 " + Environment.NewLine;
            sqlText += "    ) AS SUBSTOCKDTL" + Environment.NewLine;
            sqlText += "    ON  SUBSTOCK.ENTERPRISECODERF = SUBSTOCKDTL.ENTERPRISECODERF" + Environment.NewLine;
            sqlText += "    AND SUBSTOCK.SUPPLIERFORMALRF = SUBSTOCKDTL.SUPPLIERFORMALRF" + Environment.NewLine;
            sqlText += "    AND SUBSTOCK.SUPPLIERSLIPNORF = SUBSTOCKDTL.SUPPLIERSLIPNORF" + Environment.NewLine;
            #endregion

            #region [ WHERE ]
            sqlText += "   WHERE SUBSTOCK.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
            sqlText += "    AND  (CASE WHEN (SEARCHSUPPLIER.SUPPLIERCDRF IS NOT NULL) THEN SEARCHSUPPLIER.SUPPLIERCDRF ELSE SUBSTOCK.SUPPLIERCDRF END)=@FINDCUSTOMERCODE" + Environment.NewLine;
            sqlText += "    AND (SUBSTOCK.STOCKADDUPADATERF<=@FINDADDUPDATE AND SUBSTOCK.STOCKADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
            sqlText += "    AND  SUBSTOCK.LOGICALDELETECODERF=0" + Environment.NewLine;
            sqlText += "    AND  SUBSTOCK.SUPPLIERFORMALRF=0" + Environment.NewLine;
            sqlText += "    AND  SUBSTOCK.DEBITNOTEDIVRF=0" + Environment.NewLine;
            sqlText += "    AND (SUBSTOCK.SUPPLIERSLIPCDRF = 10 OR SUBSTOCK.SUPPLIERSLIPCDRF = 20)" + Environment.NewLine;
            sqlText += "    AND (SUBSTOCK.STOCKGOODSCDRF=0 OR SUBSTOCK.STOCKGOODSCDRF = 6)" + Environment.NewLine;
            sqlText += "    AND  SUBSTOCK.STOCKSECTIONCDRF=@FINDADDUPSECCODE" + Environment.NewLine;
            #endregion

            #region [ JOIN ]
            sqlText += "   ) AS STOCK" + Environment.NewLine;
            sqlText += "   INNER JOIN SUPPLIERRF AS SUPPLIER WITH (READUNCOMMITTED)" + Environment.NewLine;
            sqlText += "    ON SUPPLIER.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
            sqlText += "    AND SUPPLIER.SUPPLIERCDRF = STOCK.PAYEECODERF" + Environment.NewLine;
            sqlText += "   LEFT JOIN STOCKPROCMONEYRF AS PROCMONEY WITH (READUNCOMMITTED)" + Environment.NewLine;
            sqlText += "    ON PROCMONEY.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
            sqlText += "    AND PROCMONEY.FRACPROCMONEYDIVRF = 1" + Environment.NewLine;
            sqlText += "    AND PROCMONEY.FRACTIONPROCCODERF = SUPPLIER.STOCKCNSTAXFRCPROCCDRF" + Environment.NewLine;
            #endregion

            #region [ GROUP BY ]
            sqlText += "   GROUP BY" + Environment.NewLine;
            sqlText += "    STOCK.PAYEECODERF," + Environment.NewLine;
            sqlText += "    STOCK.STOCKSECTIONCDRF," + Environment.NewLine;
            sqlText += "    SUPPLIER.SUPPLIERNM1RF," + Environment.NewLine;
            sqlText += "    SUPPLIER.SUPPLIERNM2RF," + Environment.NewLine;
            sqlText += "    SUPPLIER.SUPPLIERSNMRF,   " + Environment.NewLine;
            sqlText += "    SUPPLIER.STOCKCNSTAXFRCPROCCDRF," + Environment.NewLine;
            sqlText += "    SUPPLIER.PAYMENTMONTHCODERF," + Environment.NewLine;
            sqlText += "    SUPPLIER.PAYMENTDAYRF," + Environment.NewLine;
            sqlText += "    SUPPLIER.PAYMENTCONDRF," + Environment.NewLine;
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
            sqlText += "    STOCK.TAXRATERF, " + Environment.NewLine;
            sqlText += "    STOCK.TAXRATE2RF, " + Environment.NewLine;
            sqlText += "    STOCK.TAXRATE3RF, " + Environment.NewLine;
            // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
            sqlText += "    PROCMONEY.FRACTIONPROCUNITRF," + Environment.NewLine;
            sqlText += "    PROCMONEY.FRACTIONPROCCDRF " + Environment.NewLine;
            sqlText += ") AS SUPLIERPAY" + Environment.NewLine;
            #endregion

            #endregion
            #endregion

            sqlCommand.CommandText = sqlText;

            #region  Prameterオブジェクトの作成
            SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
            SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
            SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
            SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
            SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
            #endregion

            #region Parameterオブジェクトへ値設定
            findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
            findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
            findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.AddUpSecCode);
            findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
            if (suplAccPayWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                findParaLastTimeAddUpDate.Value = 20000101;
            else
                findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.LaMonCAddUpUpdDate);
            #endregion

            return status;
        }
        // --- ADD 2012/09/13 -----------<<<<<
        
        #region [仕入データ]
        /// <summary>
        /// 仕入先買掛金額ワーク用Listから仕入データを取得します
        /// 仕入月次処理以外のプログラムに影響が出ないように新しくメソッドを作成
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ更新List</param>
        /// <param name="suplAccPayChildWorkList">仕入先買掛金額マスタ更新List(子レコード用)</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先買掛金額ワーク用Listから仕入データを取得します</br>
        /// <br>Programmer : YANGMJ</br>
        /// <br>Date       : 2012/11/01</br>
        /// </remarks>
        private int GetStockSlipForMonthlyAddUp(ref SuplAccPayWork suplAccPayWork, ref ArrayList suplAccPayChildWorkList, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            SqlDataReader myReader = null;

            // 支払金額、締後仕入、締後支払、締後消費税の算出変数
            Int64 stockTotalPayBalance = 0;
            Int64 totalAfterStock = 0;
            Int64 totalAfterStockOutTax = 0;
            Double totalAfterStockOutTax_S = 0;
            ArrayList totalAfterStockOutTaxList = new ArrayList();

            Int64 totalAfterPayment = 0;
            int totalAfterDay = 0;
            TtlDayCalcDB ttlDayCalcDB = new TtlDayCalcDB();

            #region ■当月消費税算出処理 締後仕入/支払集計
            // 締日算出
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                #region 残高取得
                string sqlText = string.Empty;
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  STOCKTOTALPAYBALANCERF," + Environment.NewLine;
                sqlText += "  ADDUPDATERF" + Environment.NewLine;
                sqlText += "FROM SUPLIERPAYRF WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += "WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "  AND PAYEECODERF=@FINDPAYEECODE" + Environment.NewLine;
                sqlText += "  AND SUPPLIERCDRF=0" + Environment.NewLine;
                sqlText += "  AND ADDUPDATERF>@FINDADDUPDATEST" + Environment.NewLine;
                sqlText += "  AND ADDUPDATERF<@FINDADDUPDATEED" + Environment.NewLine;

                try
                {
                    using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                    {
                        //Prameterオブジェクトの作成
                        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDPAYEECODE", SqlDbType.Int);
                        SqlParameter findParaAddUpDateSt = sqlCommand.Parameters.Add("@FINDADDUPDATEST", SqlDbType.Int);
                        SqlParameter findParaAddUpDateEd = sqlCommand.Parameters.Add("@FINDADDUPDATEED", SqlDbType.Int);

                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                        findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);
                        findParaAddUpDateSt.Value = SqlDataMediator.SqlSetInt32(TDateTime.DateTimeToLongDate(suplAccPayWork.LaMonCAddUpUpdDate));
                        findParaAddUpDateEd.Value = SqlDataMediator.SqlSetInt32(TDateTime.DateTimeToLongDate(suplAccPayWork.AddUpDate));

                        sqlCommand.CommandTimeout = TimeOut;

                        myReader = sqlCommand.ExecuteReader();
                        if (myReader.Read())
                        {
                            stockTotalPayBalance = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("STOCKTOTALPAYBALANCERF"));
                            totalAfterDay = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ADDUPDATERF"));
                        }
                    }
                }
                finally
                {
                    myReader.Dispose();
                }
                #endregion

                if (totalAfterDay != 0)
                {
                    #region 締後仕入金額取得
                    sqlText = string.Empty;
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += "  STOCK.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " ,STOCK.STOCKSECTIONCDRF " + Environment.NewLine;
                    sqlText += " ,STOCK.PAYEECODERF" + Environment.NewLine;
                    sqlText += " ,STOCK.SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += " ,SUM(STOCK.STOCKNETPRICERF + STOCK.STCKDISTTLTAXEXCRF) AS TOTALAFTERSTOCK -- 仕入正価金額" + Environment.NewLine;
                    sqlText += " ,SUM(CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 0 OR STOCK.SUPPCTAXLAYCDRF = 1) THEN STOCK.STOCKPRICECONSTAXRF ELSE 0 END ) AS TOTALAFTERSTOCKOUTTAX -- 消費税額(伝票転嫁+明細転嫁)" + Environment.NewLine;
                    sqlText += "  -- 支払(親)転嫁" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATERF)" + Environment.NewLine;
                    sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATERF) ELSE 0 END)) AS OUTTAXRF1" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE2RF) ELSE 0 END)) AS OUTTAXRF2" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE3RF)" + Environment.NewLine;
                    sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE3RF) ELSE 0 END)) AS OUTTAXRF3" + Environment.NewLine;
                    sqlText += "  -- 支払(子)転嫁" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 3) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATERF)" + Environment.NewLine;
                    sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF + STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATERF) ELSE 0 END)) AS OUTTAXRF1_2" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 3) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE2RF)" + Environment.NewLine;
                    sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF +STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE2RF) ELSE 0 END)) AS OUTTAXRF2_2" + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 3) AND (STOCK.STOCKADDUPADATERF >= TAX.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= TAX.TAXRATEENDDATE3RF)" + Environment.NewLine;
                    sqlText += "            THEN ((STOCK.TTLITDEDSTCOUTTAXRF +STOCK.ITDEDSTOCKDISOUTTAXRF) * TAX.TAXRATE3RF) ELSE 0 END)) AS OUTTAXRF3_2 " + Environment.NewLine;
                    sqlText += " ,SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS STCKPRCCONSTAXINCLURF--消費税額（内税）" + Environment.NewLine;
                    sqlText += " FROM" + Environment.NewLine;
                    sqlText += "  STOCKSLIPRF AS STOCK WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += " LEFT JOIN TAXRATESETRF AS TAX WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "  ON STOCK.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " WHERE STOCK.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND STOCK.PAYEECODERF=@FINDCUSTOMERCODE" + Environment.NewLine;
                    sqlText += "  AND (STOCK.STOCKADDUPADATERF<=@FINDADDUPDATE AND STOCK.STOCKADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
                    sqlText += "  AND STOCK.SUPPLIERFORMALRF=0" + Environment.NewLine;
                    sqlText += "  AND STOCK.DEBITNOTEDIVRF=0" + Environment.NewLine;
                    sqlText += "  AND STOCK.LOGICALDELETECODERF=0" + Environment.NewLine;
                    sqlText += "GROUP BY" + Environment.NewLine;
                    sqlText += " STOCK.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " ,STOCK.STOCKSECTIONCDRF " + Environment.NewLine;
                    sqlText += " ,STOCK.PAYEECODERF" + Environment.NewLine;
                    sqlText += " ,STOCK.SUPPLIERCDRF" + Environment.NewLine;

                    try
                    {
                        using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                        {
                            //Prameterオブジェクトの作成
                            SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                            SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
                            SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                            SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int); // ADD 2008.11.19

                            //Parameterオブジェクトへ値設定
                            findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                            findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);
                            findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                            findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetInt32(totalAfterDay);                      

                            sqlCommand.CommandTimeout = TimeOut;

                            myReader = sqlCommand.ExecuteReader();

                            while (myReader.Read())
                            {
                                // 仕入正価金額
                                totalAfterStock += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSTOCK"));
                                // 仕入外税消費税(伝票+明細)
                                totalAfterStockOutTax += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALAFTERSTOCKOUTTAX"));
                                // 仕入外税消費税(支払親)
                                totalAfterStockOutTax_S += SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF1")) + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF2")) +
                                                           SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF3"));
                                // 仕入外税消費税(支払子)
                                totalAfterStockOutTaxList.Add(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF1_2")) + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF2_2")) +
                                                                                               SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("OUTTAXRF3_2"))); 

                            }
                        }
                    }
                    catch (SqlException ex)
                    {
                        //基底クラスに例外を渡して処理してもらう
                        status = base.WriteSQLErrorLog(ex);
                    }

                    finally
                    {
                        myReader.Dispose();
                    }
                    #endregion

                    #region 締後支払金額取得
                    sqlText = string.Empty;
                    sqlText += "SELECT *" + Environment.NewLine;
                    sqlText += " FROM PAYMENTSLPRF WITH" + Environment.NewLine;
                    sqlText += "    (READUNCOMMITTED" + Environment.NewLine;
                    sqlText += "    )" + Environment.NewLine;
                    sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    AND PAYEECODERF=@FINDPAYEECODE" + Environment.NewLine;
                    sqlText += "    AND" + Environment.NewLine;
                    sqlText += "    (ADDUPADATERF<=@FINDADDUPDATE" + Environment.NewLine;
                    sqlText += "        AND ADDUPADATERF>@FINDLASTTIMEADDUPDATE" + Environment.NewLine;
                    sqlText += "    AND LOGICALDELETECODERF=0 " + Environment.NewLine;

                    sqlText += "    )" + Environment.NewLine;

                    try
                    {
                        using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                        {
                            SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                            SqlParameter findParaPayeeCode = sqlCommand.Parameters.Add("@FINDPAYEECODE", SqlDbType.Int);
                            SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                            SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int); // ADD 2008.11.19

                            findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                            findParaPayeeCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.SupplierCd);
                            findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                            findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetInt32(totalAfterDay);
                            sqlCommand.CommandTimeout = TimeOut;
                            myReader = sqlCommand.ExecuteReader();

                            while (myReader.Read())
                            {
                                totalAfterPayment += SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("PAYMENTTOTALRF"));
                            }
                        }
                    }
                    finally
                    {
                        myReader.Dispose();
                    }
                    #endregion
                }
            }
            #endregion

            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.Connection = sqlConnection;
                    string sqlText = string.Empty;
                    if (suplAccPayWork.SupplierCd == suplAccPayWork.PayeeCode) // ←念のため
                    {
                        #region [●集計レコード作成処理]

                        #region SELECT文作成
                        sqlText = string.Empty;
                        sqlText += "SELECT" + Environment.NewLine;
                        sqlText += " SUPLIERPAY.PAYEECODERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.SUPPLIERNM1RF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.SUPPLIERNM2RF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.SUPPLIERSNMRF,  " + Environment.NewLine;
                        sqlText += " SUPLIERPAY.FRACTIONPROCUNITRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.FRACTIONPROCCDRF,  " + Environment.NewLine;
                        sqlText += " SUPLIERPAY.PAYMENTMONTHCODERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.PAYMENTDAYRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.PAYMENTCONDRF, " + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STOCKSLIPCOUNT," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.THISTIMESTOCKPRICERF + SUPLIERPAY.THISSTCKPRICRGDSRF + SUPLIERPAY.THISSTCKPRICDISRF AS OFSTHISTIMESTOCKRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCOUTTAXRF + SUPLIERPAY.TTLITDEDRETOUTTAXRF+SUPLIERPAY.TTLITDEDDISOUTTAXRF AS ITDEDOFFSETOUTTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCINTAXRF + SUPLIERPAY.TTLITDEDRETINTAXRF+SUPLIERPAY.TTLITDEDDISINTAXRF AS ITDEDOFFSETINTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCTAXFREERF + SUPLIERPAY.TTLITDEDRETTAXFREERF+SUPLIERPAY.TTLITDEDDISTAXFREERF AS ITDEDOFFSETTAXFREERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STCKPRCCONSTAXINCLURF+SUPLIERPAY.TTLRETINNERTAXRF+SUPLIERPAY.STCKDISTTLTAXINCLURF AS OFFSETINTAXRF," + Environment.NewLine;
                        // 仕入
                        sqlText += " SUPLIERPAY.THISTIMESTOCKPRICERF AS THISTIMESTOCKPRICERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCOUTTAXRF AS TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCINTAXRF AS TTLITDEDSTCINTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDSTCTAXFREERF AS TTLITDEDSTCTAXFREERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STCKPRCCONSTAXINCLURF AS TTLSTOCKINNERTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STOCKOUTTAXRF AS TTLSTOCKOUTERTAXRF,-- 伝票転嫁と明細転嫁" + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        sqlText += " SUPLIERPAY.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TAXRATE3RF AS TAXRATE3RF," + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        //sqlText += " SUPLIERPAY.STOCKOUTTAXRF1+SUPLIERPAY.STOCKOUTTAXRF2+SUPLIERPAY.STOCKOUTTAXRF3 AS TTLSTOCKOUTERTAXRF_S,-- 支払(親)転嫁" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        sqlText += " SUPLIERPAY.STOCKOUTTAXRF1*TAXRATERF+SUPLIERPAY.STOCKOUTTAXRF2*TAXRATE2RF+SUPLIERPAY.STOCKOUTTAXRF3*TAXRATE3RF AS TTLSTOCKOUTERTAXRF_S,-- 支払(親)転嫁" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        // 返品
                        sqlText += " SUPLIERPAY.THISSTCKPRICRGDSRF AS THISSTCKPRICRGDSRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDRETOUTTAXRF AS TTLITDEDRETOUTTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDRETINTAXRF AS TTLITDEDRETINTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDRETTAXFREERF AS TTLITDEDRETTAXFREERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLRETINNERTAXRF AS TTLRETINNERTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF AS TTLRETOUTERTAXRF, -- 伝票転嫁と明細転嫁" + Environment.NewLine;
                        //sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1+SUPLIERPAY.TTLRETOUTERTAXRF2+SUPLIERPAY.TTLRETOUTERTAXRF3 AS TTLRETOUTERTAXRF_S,--支払(親)転嫁" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1*TAXRATERF+SUPLIERPAY.TTLRETOUTERTAXRF2*TAXRATE2RF+SUPLIERPAY.TTLRETOUTERTAXRF3*TAXRATE3RF AS TTLRETOUTERTAXRF_S,--支払(親)転嫁" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        // 値引
                        sqlText += " SUPLIERPAY.THISSTCKPRICDISRF AS THISSTCKPRICDISRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDDISOUTTAXRF AS TTLITDEDDISOUTTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDDISINTAXRF AS TTLITDEDDISINTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.TTLITDEDDISTAXFREERF AS TTLITDEDDISTAXFREERF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STCKDISTTLTAXINCLURF AS TTLDISINNERTAXRF," + Environment.NewLine;
                        sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF AS TTLDISOUTERTAXRF, -- 伝票転嫁と明細転嫁" + Environment.NewLine;
                        //sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1+SUPLIERPAY.STOCKDISOUTTAXRF2+SUPLIERPAY.STOCKDISOUTTAXRF3 AS TTLDISOUTERTAXRF_S -- 支払(親)転嫁" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1*TAXRATERF+SUPLIERPAY.STOCKDISOUTTAXRF2*TAXRATE2RF+SUPLIERPAY.STOCKDISOUTTAXRF3*TAXRATE3RF AS TTLDISOUTERTAXRF_S -- 支払(親)転嫁" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                        sqlText += " FROM" + Environment.NewLine;
                        sqlText += "(" + Environment.NewLine;

                        #region [SUBクエリ]
                        sqlText += " SELECT" + Environment.NewLine;
                        sqlText += "  STOCK.PAYEECODERF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.SUPPLIERNM1RF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.SUPPLIERNM2RF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.SUPPLIERSNMRF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.STOCKCNSTAXFRCPROCCDRF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.PAYMENTMONTHCODERF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.PAYMENTDAYRF," + Environment.NewLine;
                        sqlText += "  SUPPLIER.PAYMENTCONDRF," + Environment.NewLine;
                        sqlText += "  PROCMONEY.FRACTIONPROCUNITRF," + Environment.NewLine;
                        sqlText += "  PROCMONEY.FRACTIONPROCCDRF, " + Environment.NewLine;
                        sqlText += "  COUNT(STOCK.SUPPLIERSLIPNORF) STOCKSLIPCOUNT, --伝票枚数" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STOCKNETPRICERF ELSE 0 END)) AS THISTIMESTOCKPRICERF,       --仕入正価金額" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCOUTTAXRF ELSE 0 END)) AS TTLITDEDSTCOUTTAXRF,    --仕入外税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCINTAXRF ELSE 0 END)) AS TTLITDEDSTCINTAXRF,      --仕入内税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCTAXFREERF ELSE 0 END)) AS TTLITDEDSTCTAXFREERF,  --仕入非課税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS STCKPRCCONSTAXINCLURF,--仕入金額消費税額（内税）" + Environment.NewLine;
                        // 伝票転嫁と明細転嫁 売上金額消費税額（外税）
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 0 OR STOCK.SUPPCTAXLAYCDRF = 1) AND (STOCK.SUPPLIERSLIPCDRF =10) THEN STOCK.STOCKOUTTAXRF ELSE 0 END)) AS STOCKOUTTAXRF,                --仕入金額消費税額（外税）" + Environment.NewLine;
                        // 支払(親)転嫁 売上金額消費税額（外税）
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                        //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS STOCKOUTTAXRF1,--税率1" + Environment.NewLine;
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                        //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS STOCKOUTTAXRF2,     --税率2" + Environment.NewLine;
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                        //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS STOCKOUTTAXRF3,     --税率3" + Environment.NewLine;
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF1,--税率1" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF2,     --税率2" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF3,     --税率3" + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STOCKNETPRICERF ELSE 0 END)) AS THISSTCKPRICRGDSRF,       --返品正価金額" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCOUTTAXRF ELSE 0 END)) AS TTLITDEDRETOUTTAXRF,  --返品外税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCINTAXRF ELSE 0 END)) AS TTLITDEDRETINTAXRF,    --返品内税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCTAXFREERF ELSE 0 END)) AS TTLITDEDRETTAXFREERF,--返品非課税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS TTLRETINNERTAXRF,   --返品金額消費税額（内税）" + Environment.NewLine;
                        // 伝票転嫁と明細転嫁 返品金額消費税額（外税）
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 0 OR STOCK.SUPPCTAXLAYCDRF = 1) AND (STOCK.SUPPLIERSLIPCDRF =20) THEN STOCK.STOCKOUTTAXRF ELSE 0 END)) AS TTLRETOUTERTAXRF,--返品金額消費税額（外税）" + Environment.NewLine;
                        // 支払(親)転嫁 返品金額消費税額（外税）
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF)" + Environment.NewLine;
                        //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS TTLRETOUTERTAXRF1,--税率1" + Environment.NewLine;
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF)" + Environment.NewLine;
                        //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS TTLRETOUTERTAXRF2,     --税率2" + Environment.NewLine;
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF)" + Environment.NewLine;
                        //sqlText += "           THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS TTLRETOUTERTAXRF3,      --税率3" + Environment.NewLine;
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF)" + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF1,--税率1" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF)" + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF2,     --税率2" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF)" + Environment.NewLine;
                        sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF3,      --税率3" + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        sqlText += "  SUM(STOCK.STCKDISTTLTAXEXCRF) AS THISSTCKPRICDISRF,      --値引金額計（税抜き）" + Environment.NewLine;
                        sqlText += "  SUM(STOCK.ITDEDSTOCKDISOUTTAXRF) AS TTLITDEDDISOUTTAXRF, --値引外税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM(STOCK.ITDEDSTOCKDISINTAXRF) AS TTLITDEDDISINTAXRF,   --値引内税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM(STOCK.ITDEDSTOCKDISTAXFRERF) AS TTLITDEDDISTAXFREERF,--値引非課税対象額合計" + Environment.NewLine;
                        sqlText += "  SUM(STOCK.STCKDISTTLTAXINCLURF) AS STCKDISTTLTAXINCLURF, --値引消費税額（内税）" + Environment.NewLine;
                        // 伝票転嫁と明細転嫁 売上値引消費税額（外税）
                        sqlText += "  SUM(CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 0 OR STOCK.SUPPCTAXLAYCDRF = 1) THEN STOCK.STOCKDISOUTTAXRF ELSE 0 END) AS STOCKDISOUTTAXRF,--値引消費税額（外税）" + Environment.NewLine;
                        // 支払(親)転嫁 売上値引消費税額（外税）
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                        //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATERF)ELSE 0 END)) AS STOCKDISOUTTAXRF1,  --税率1" + Environment.NewLine;
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                        //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE2RF)ELSE 0 END)) AS STOCKDISOUTTAXRF2, --税率2" + Environment.NewLine;
                        //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                        //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE3RF)ELSE 0 END)) AS STOCKDISOUTTAXRF3  --税率3" + Environment.NewLine;
                        // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        sqlText += "  STOCK.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                        sqlText += "  STOCK.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                        sqlText += "  STOCK.TAXRATE3RF AS TAXRATE3RF," + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                        sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF1,  --税率1" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                        sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF2, --税率2" + Environment.NewLine;
                        sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF = 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                        sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF) ELSE 0 END)) AS STOCKDISOUTTAXRF3  --税率3" + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        sqlText += "  FROM" + Environment.NewLine;
                        sqlText += "  (" + Environment.NewLine;

                        #region SUBSUBクエリ
                        sqlText += "   SELECT" + Environment.NewLine;
                        sqlText += "    SUBSTOCK.LOGICALDELETECODERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.ENTERPRISECODERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.SUPPCTAXLAYCDRF, --消費税転嫁方式(仕入データ) " + Environment.NewLine;
                        sqlText += "    SUBSTOCK.SUPPLIERFORMALRF,--仕入形式" + Environment.NewLine;
                        sqlText += "    SUBSTOCK.DEBITNOTEDIVRF,  --赤伝区分" + Environment.NewLine;
                        sqlText += "    SUBSTOCK.SUPPLIERSLIPCDRF,--仕入伝票区分" + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STOCKGOODSCDRF,  --仕入商品区分" + Environment.NewLine;
                        sqlText += "    SUBSTOCK.SUPPLIERSLIPNORF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STOCKADDUPADATERF," + Environment.NewLine;
                        sqlText += "    (CASE WHEN (SEARCHSUPPLIER.PAYEECODERF IS NOT NULL) THEN SEARCHSUPPLIER.PAYEECODERF ELSE SUBSTOCK.PAYEECODERF END) AS PAYEECODERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STOCKNETPRICERF + SUBSTOCKDTL.DISSTOCKPRICETAXEXCGYO AS STOCKNETPRICERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.TTLITDEDSTCOUTTAXRF + SUBSTOCKDTL.ITDEDSTOCKDISOUTTAXGYO AS TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.TTLITDEDSTCINTAXRF + SUBSTOCKDTL.ITDEDSTOCKDISINTAXGYO AS TTLITDEDSTCINTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.TTLITDEDSTCTAXFREERF + SUBSTOCKDTL.ITDEDSTOCKDISFREETAXGYO AS TTLITDEDSTCTAXFREERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STOCKOUTTAXRF + SUBSTOCKDTL.STOCKDISOUTTAXGYO AS STOCKOUTTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STCKPRCCONSTAXINCLURF + SUBSTOCKDTL.STOCKDISINTAXGYO AS STCKPRCCONSTAXINCLURF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STCKDISTTLTAXEXCRF - SUBSTOCKDTL.DISSTOCKPRICETAXEXCGYO AS STCKDISTTLTAXEXCRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.ITDEDSTOCKDISOUTTAXRF - SUBSTOCKDTL.ITDEDSTOCKDISOUTTAXGYO AS ITDEDSTOCKDISOUTTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.ITDEDSTOCKDISINTAXRF - SUBSTOCKDTL.ITDEDSTOCKDISINTAXGYO AS ITDEDSTOCKDISINTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.ITDEDSTOCKDISTAXFRERF - SUBSTOCKDTL.ITDEDSTOCKDISFREETAXGYO AS ITDEDSTOCKDISTAXFRERF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STOCKDISOUTTAXRF - SUBSTOCKDTL.STOCKDISOUTTAXGYO AS STOCKDISOUTTAXRF," + Environment.NewLine;
                        sqlText += "    SUBSTOCK.STCKDISTTLTAXINCLURF - SUBSTOCKDTL.STOCKDISINTAXGYO AS STCKDISTTLTAXINCLURF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATESTARTDATERF AS TAXRATESTARTDATERF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATEENDDATERF AS TAXRATEENDDATERF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF," + Environment.NewLine;
                        sqlText += "    TAX.TAXRATE3RF AS TAXRATE3RF    " + Environment.NewLine;
                        sqlText += "   FROM" + Environment.NewLine;
                        sqlText += "    STOCKSLIPRF AS SUBSTOCK WITH (READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += "    LEFT JOIN TAXRATESETRF AS TAX WITH (READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += "     ON SUBSTOCK.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "    LEFT JOIN SUPPLIERRF AS SEARCHSUPPLIER WITH (READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += "     ON SUBSTOCK.ENTERPRISECODERF = SEARCHSUPPLIER.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "     AND SUBSTOCK.SUPPLIERCDRF = SEARCHSUPPLIER.SUPPLIERCDRF" + Environment.NewLine;
                        sqlText += "    LEFT JOIN" + Environment.NewLine;
                        sqlText += "    ( " + Environment.NewLine;
                        sqlText += "      SELECT" + Environment.NewLine;
                        sqlText += "       STOCK.ENTERPRISECODERF," + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERFORMALRF, --受注ステータス" + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERSLIPNORF, --仕入伝票番号 " + Environment.NewLine;
                        sqlText += "       -- 行値引" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS DISSTOCKPRICETAXEXCGYO," + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 0 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISOUTTAXGYO, -- 外税対象額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 1 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISFREETAXGYO,-- 非課税対象額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 2 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISINTAXGYO,  -- 内税対象額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 0 ) THEN DTL.STOCKPRICECONSTAXRF ELSE 0 END) AS STOCKDISOUTTAXGYO, -- 外税額(行値引)" + Environment.NewLine;
                        sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 2 ) THEN DTL.STOCKPRICECONSTAXRF ELSE 0 END) AS STOCKDISINTAXGYO  -- 内税額(行値引)" + Environment.NewLine;
                        sqlText += "      FROM" + Environment.NewLine;
                        sqlText += "       STOCKDETAILRF AS DTL WITH (READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += "      LEFT JOIN STOCKSLIPRF AS STOCK WITH (READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += "       ON DTL.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "       AND DTL.SUPPLIERFORMALRF = STOCK.SUPPLIERFORMALRF" + Environment.NewLine;
                        sqlText += "       AND DTL.SUPPLIERSLIPNORF = STOCK.SUPPLIERSLIPNORF" + Environment.NewLine;
                        sqlText += "      GROUP BY" + Environment.NewLine;
                        sqlText += "       STOCK.ENTERPRISECODERF," + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERFORMALRF, --受注ステータス" + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
                        sqlText += "       STOCK.SUPPLIERSLIPNORF --仕入伝票番号 " + Environment.NewLine;
                        sqlText += "    ) AS SUBSTOCKDTL" + Environment.NewLine;
                        sqlText += "    ON  SUBSTOCK.ENTERPRISECODERF = SUBSTOCKDTL.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "    AND SUBSTOCK.SUPPLIERFORMALRF = SUBSTOCKDTL.SUPPLIERFORMALRF" + Environment.NewLine;
                        sqlText += "    AND SUBSTOCK.SUPPLIERSLIPNORF = SUBSTOCKDTL.SUPPLIERSLIPNORF" + Environment.NewLine;
                        #endregion

                        #region [ WHERE ]
                        sqlText += "   WHERE SUBSTOCK.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                        sqlText += "    AND  (CASE WHEN (SEARCHSUPPLIER.PAYEECODERF IS NOT NULL) THEN SEARCHSUPPLIER.PAYEECODERF ELSE SUBSTOCK.PAYEECODERF END)=@FINDCUSTOMERCODE" + Environment.NewLine;
                        sqlText += "    AND (SUBSTOCK.STOCKADDUPADATERF<=@FINDADDUPDATE AND SUBSTOCK.STOCKADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
                        sqlText += "    AND  SUBSTOCK.LOGICALDELETECODERF=0" + Environment.NewLine;
                        sqlText += "    AND  SUBSTOCK.SUPPLIERFORMALRF=0" + Environment.NewLine;
                        sqlText += "    AND  SUBSTOCK.DEBITNOTEDIVRF=0" + Environment.NewLine;
                        sqlText += "    AND (SUBSTOCK.SUPPLIERSLIPCDRF = 10 OR SUBSTOCK.SUPPLIERSLIPCDRF = 20)" + Environment.NewLine;
                        sqlText += "    AND (SUBSTOCK.STOCKGOODSCDRF=0 OR SUBSTOCK.STOCKGOODSCDRF = 6)" + Environment.NewLine;
                        #endregion

                        #region [ JOIN ]
                        sqlText += "   ) AS STOCK" + Environment.NewLine;
                        sqlText += "   INNER JOIN SUPPLIERRF AS SUPPLIER WITH (READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += "    ON SUPPLIER.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "    AND SUPPLIER.SUPPLIERCDRF = STOCK.PAYEECODERF" + Environment.NewLine;
                        sqlText += "   LEFT JOIN STOCKPROCMONEYRF AS PROCMONEY WITH (READUNCOMMITTED)" + Environment.NewLine;
                        sqlText += "    ON PROCMONEY.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                        sqlText += "    AND PROCMONEY.FRACPROCMONEYDIVRF = 1" + Environment.NewLine;
                        sqlText += "    AND PROCMONEY.FRACTIONPROCCODERF = SUPPLIER.STOCKCNSTAXFRCPROCCDRF" + Environment.NewLine;

                        #endregion

                        #region [ GROUP BY ]
                        sqlText += "   GROUP BY" + Environment.NewLine;
                        sqlText += "    STOCK.PAYEECODERF," + Environment.NewLine;
                        sqlText += "    SUPPLIER.SUPPLIERNM1RF," + Environment.NewLine;
                        sqlText += "    SUPPLIER.SUPPLIERNM2RF," + Environment.NewLine;
                        sqlText += "    SUPPLIER.SUPPLIERSNMRF,   " + Environment.NewLine;
                        sqlText += "    SUPPLIER.STOCKCNSTAXFRCPROCCDRF," + Environment.NewLine;
                        sqlText += "    SUPPLIER.PAYMENTMONTHCODERF," + Environment.NewLine;
                        sqlText += "    SUPPLIER.PAYMENTDAYRF," + Environment.NewLine;
                        sqlText += "    SUPPLIER.PAYMENTCONDRF," + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                        sqlText += "    STOCK.TAXRATERF, " + Environment.NewLine;
                        sqlText += "    STOCK.TAXRATE2RF, " + Environment.NewLine;
                        sqlText += "    STOCK.TAXRATE3RF, " + Environment.NewLine;
                        // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                        sqlText += "    PROCMONEY.FRACTIONPROCUNITRF," + Environment.NewLine;
                        sqlText += "    PROCMONEY.FRACTIONPROCCDRF " + Environment.NewLine;
                        sqlText += ") AS SUPLIERPAY" + Environment.NewLine;
                        #endregion

                        #endregion
                        #endregion

                        sqlCommand.CommandText = sqlText;

                        #region  Prameterオブジェクトの作成
                        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter findParaCustomerCode = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
                        SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                        SqlParameter findParaLastTimeAddUpDate = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
                        #endregion

                        #region Parameterオブジェクトへ値設定
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                        findParaCustomerCode.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
                        findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                        if (suplAccPayWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                            findParaLastTimeAddUpDate.Value = 20000101;
                        else
                            findParaLastTimeAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.LaMonCAddUpUpdDate);
                        #endregion

                        sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10

                        myReader = sqlCommand.ExecuteReader();

                        double FractionProcUnit = 0;
                        long SetTax = 0;
                        long WorkTax = 0;
                        while (myReader.Read())
                        {
                            #region 結果セット
                            suplAccPayWork.FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF")); //端数処理区分
                            FractionProcUnit = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("FRACTIONPROCUNITRF"));           // 端数処理単位
                            suplAccPayWork.PayeeCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYEECODERF"));
                            suplAccPayWork.PayeeName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM1RF"));
                            suplAccPayWork.PayeeName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM2RF"));
                            suplAccPayWork.PayeeSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERSNMRF"));
                            suplAccPayWork.FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF"));// 端数処理区分
                            // 今回繰越残高(前回支払額-今回支払金額)
                            suplAccPayWork.ThisTimeTtlBlcAcPay = suplAccPayWork.LastTimeAccPay - suplAccPayWork.ThisTimePayNrml;

                            //■相殺
                            suplAccPayWork.OfsThisTimeStock = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFSTHISTIMESTOCKRF"));
                            suplAccPayWork.ItdedOffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETOUTTAXRF"));
                            suplAccPayWork.ItdedOffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETINTAXRF"));
                            suplAccPayWork.ItdedOffsetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETTAXFREERF"));
                            suplAccPayWork.OffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFFSETINTAXRF"));

                            #region suplAccPayWork.OffsetOutTax [相殺後外税消費税]
                            // 相殺後外税消費税 = 仕入外税消費税 + 返品外税消費税 + 値引外税消費税 ※各種転嫁方式別に計算し合算する 支払転嫁(子)は親子レコード集計後に加算する
                            // 伝票転嫁 + 明細転嫁  
                            suplAccPayWork.OffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF")) + SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF")) +
                                                          SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                            // 支払(親)転嫁
                            FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S")) + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S")) +
                                     SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S")), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                            suplAccPayWork.OffsetOutTax += SetTax;
                            #endregion
                            // 修正 2009/04/17 <<<

                            #region 当月消費税SET処理
                            if (totalAfterDay != 0)
                            {
                                // 伝票転嫁 + 明細転嫁
                                WorkTax = totalAfterStockOutTax;

                                // 支払(親)転嫁
                                FracCalc((totalAfterStockOutTax_S), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                                WorkTax += SetTax;

                                // 支払(子)転嫁
                                for (int i = 0; i < totalAfterStockOutTaxList.Count; i++)
                                {
                                    if (Convert.ToDouble(totalAfterStockOutTaxList[i]) != 0)
                                    {
                                        //締後消費税算出
                                        FracCalc(Convert.ToDouble(totalAfterStockOutTaxList[i]), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                                        WorkTax += SetTax;
                                    }
                                }

                                //相殺後今回売上消費税 = (支払金額 + 締後仕入 - 締後支払 + 締後消費税) - (前月仕入残高 + 当月仕入 - 当月支払) 
                                suplAccPayWork.OfsThisStockTax = Convert.ToInt64((stockTotalPayBalance + totalAfterStock - totalAfterPayment + WorkTax)) - Convert.ToInt64((suplAccPayWork.LastTimeAccPay + suplAccPayWork.OfsThisTimeStock - suplAccPayWork.ThisTimePayNrml));
                            }
                            else
                            {
                                suplAccPayWork.OfsThisStockTax = suplAccPayWork.OffsetInTax + suplAccPayWork.OffsetOutTax;
                            }
                            #endregion

                            // ■仕入
                            suplAccPayWork.ThisTimeStockPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISTIMESTOCKPRICERF"));
                            suplAccPayWork.TtlItdedStcOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCOUTTAXRF"));
                            suplAccPayWork.TtlItdedStcInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCINTAXRF"));
                            suplAccPayWork.TtlItdedStcTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCTAXFREERF"));
                            suplAccPayWork.TtlStockInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKINNERTAXRF"));
                            #region suplAccPayWork.TtlStockOuterTax [今回仕入外税消費税]
                            // 今回仕入外税消費税 ※各種転嫁方式別に計算を行い、合算する 支払転嫁(子)は親子レコード集計後に加算する
                            // 伝票転嫁・明細転嫁
                            suplAccPayWork.TtlStockOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF"));
                            // 支払(親)転嫁
                            FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S")), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                            suplAccPayWork.TtlStockOuterTax += SetTax;
                            #endregion
                            suplAccPayWork.ThisStcPrcTax = suplAccPayWork.TtlStockInnerTax + suplAccPayWork.TtlStockOuterTax;

                            // ■返品
                            suplAccPayWork.ThisStckPricRgds = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSTCKPRICRGDSRF"));
                            suplAccPayWork.TtlItdedRetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETOUTTAXRF"));
                            suplAccPayWork.TtlItdedRetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETINTAXRF"));
                            suplAccPayWork.TtlItdedRetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETTAXFREERF"));
                            suplAccPayWork.TtlRetInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETINNERTAXRF"));
                            #region suplAccPayWork.TtlRetOuterTax [今回返品外税消費税]
                            // 今回返品外税消費税 ※各種転嫁方式別に計算を行い、合算する 支払転嫁(子)は親子レコード集計後に加算する
                            // 伝票転嫁・明細転嫁
                            suplAccPayWork.TtlRetOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"));
                            // 支払(親)転嫁
                            FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S")), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                            suplAccPayWork.TtlRetOuterTax += SetTax;
                            #endregion
                            suplAccPayWork.ThisStcPrcTaxRgds = suplAccPayWork.TtlRetInnerTax + suplAccPayWork.TtlRetOuterTax;


                            // ■値引
                            suplAccPayWork.ThisStckPricDis = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSTCKPRICDISRF"));
                            suplAccPayWork.TtlItdedDisOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISOUTTAXRF"));
                            suplAccPayWork.TtlItdedDisInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISINTAXRF"));
                            suplAccPayWork.TtlItdedDisTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISTAXFREERF"));
                            suplAccPayWork.TtlDisInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISINNERTAXRF"));
                            #region suplAccPayWork.TtlDisOuterTax [今回値引外税消費税]
                            // 今回値引外税消費税 ※各種転嫁方式別に計算を行い、合算する 支払転嫁(子)は親子レコード集計後に加算する
                            // 伝票転嫁・明細転嫁
                            suplAccPayWork.TtlDisOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                            // 支払(親)転嫁
                            FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S")), FractionProcUnit, suplAccPayWork.FractionProcCd, out SetTax);
                            suplAccPayWork.TtlDisOuterTax += SetTax;
                            #endregion
                            suplAccPayWork.ThisStcPrcTaxDis = suplAccPayWork.TtlDisInnerTax + suplAccPayWork.TtlDisOuterTax;

                            suplAccPayWork.TaxAdjust = 0;     // 消費税調整額(0固定)
                            suplAccPayWork.BalanceAdjust = 0; // 残高調整額(0固定)
                            suplAccPayWork.StockSlipCount = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("STOCKSLIPCOUNT"));　// 伝票枚数

                            // 仕入合計残高(支払計) = 今回繰越金額(支払計) + (相殺後今回仕入金額 + 相殺後今回仕入消費税)
                            suplAccPayWork.StckTtlAccPayBalance = suplAccPayWork.ThisTimeTtlBlcAcPay + (suplAccPayWork.OfsThisTimeStock + suplAccPayWork.OfsThisStockTax);
                            #endregion
                        }
                        #endregion
                    }

                    // 初期化
                    if (!myReader.IsClosed) myReader.Close();
                    sqlCommand.Parameters.Clear();
                    sqlCommand.CommandText = string.Empty;
                    sqlText = string.Empty;
                    long OffsetOutTax = 0;     // 相殺外税消費税(支払(子)転嫁)
                    long StockOuterTax = 0;    // 仕入外税消費税(支払(子)転嫁)
                    long RetStockOuterTax = 0; // 返品外税消費税(支払(子)転嫁)
                    long DisStockOuterTax = 0; // 値引外税消費税(支払(子)転嫁)

                    int ChildCnt = 0;
                    double fractionProcUnit = 0;

                    #region [●親・子レコード作成処理]

                    #region SELECT文作成
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYEECODERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYEENM1RF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYEENM2RF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYEESNMRF, " + Environment.NewLine;
                    sqlText += " SUPLIERPAY.SUPPLIERCDRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.SUPPLIERNM1RF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.SUPPLIERNM2RF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.SUPPLIERSNMRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.FRACTIONPROCUNITRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.FRACTIONPROCCDRF,  " + Environment.NewLine;
                    sqlText += " SUPLIERPAY.SUPPCTAXLAYCDRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYMENTMONTHCODERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYMENTDAYRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.PAYMENTCONDRF, " + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STOCKSLIPCOUNT," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.THISTIMESTOCKPRICERF + SUPLIERPAY.THISSTCKPRICRGDSRF + SUPLIERPAY.THISSTCKPRICDISRF AS OFSTHISTIMESTOCKRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCOUTTAXRF + SUPLIERPAY.TTLITDEDRETOUTTAXRF+SUPLIERPAY.TTLITDEDDISOUTTAXRF AS ITDEDOFFSETOUTTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCINTAXRF + SUPLIERPAY.TTLITDEDRETINTAXRF+SUPLIERPAY.TTLITDEDDISINTAXRF AS ITDEDOFFSETINTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCTAXFREERF + SUPLIERPAY.TTLITDEDRETTAXFREERF+SUPLIERPAY.TTLITDEDDISTAXFREERF AS ITDEDOFFSETTAXFREERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STCKPRCCONSTAXINCLURF+SUPLIERPAY.TTLRETINNERTAXRF+SUPLIERPAY.STCKDISTTLTAXINCLURF AS OFFSETINTAXRF," + Environment.NewLine;
                    //■ ■ 仕入 ■ ■
                    sqlText += " SUPLIERPAY.THISTIMESTOCKPRICERF AS THISTIMESTOCKPRICERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCOUTTAXRF AS TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCINTAXRF AS TTLITDEDSTCINTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDSTCTAXFREERF AS TTLITDEDSTCTAXFREERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STCKPRCCONSTAXINCLURF AS TTLSTOCKINNERTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STOCKOUTTAXRF AS TTLSTOCKOUTERTAXRF,-- 伝票転嫁・明細転嫁　仕入金額消費税額（外税）" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += " SUPLIERPAY.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TAXRATE3RF AS TAXRATE3RF," + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    //sqlText += " SUPLIERPAY.STOCKOUTTAXRF1+SUPLIERPAY.STOCKOUTTAXRF2+SUPLIERPAY.STOCKOUTTAXRF3 AS TTLSTOCKOUTERTAXRF_S,--支払(親)転嫁　仕入金額消費税額（外税）" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " SUPLIERPAY.STOCKOUTTAXRF1*TAXRATERF+SUPLIERPAY.STOCKOUTTAXRF2*TAXRATE2RF+SUPLIERPAY.STOCKOUTTAXRF3*TAXRATE3RF AS TTLSTOCKOUTERTAXRF_S,--支払(親)転嫁　仕入金額消費税額（外税）" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    //sqlText += " SUPLIERPAY.STOCKOUTTAXRF1_2+SUPLIERPAY.STOCKOUTTAXRF2_2+SUPLIERPAY.STOCKOUTTAXRF3_2 AS TTLSTOCKOUTERTAXRF_S2,--支払(子)転嫁　仕入金額消費税額（外税）" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " SUPLIERPAY.STOCKOUTTAXRF1_2*TAXRATERF+SUPLIERPAY.STOCKOUTTAXRF2_2*TAXRATE2RF+SUPLIERPAY.STOCKOUTTAXRF3_2*TAXRATE3RF AS TTLSTOCKOUTERTAXRF_S2,--支払(子)転嫁　仕入金額消費税額（外税）" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    //■ ■ 返品 ■ ■
                    sqlText += " SUPLIERPAY.THISSTCKPRICRGDSRF AS THISSTCKPRICRGDSRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDRETOUTTAXRF AS TTLITDEDRETOUTTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDRETINTAXRF AS TTLITDEDRETINTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDRETTAXFREERF AS TTLITDEDRETTAXFREERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLRETINNERTAXRF AS TTLRETINNERTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF AS TTLRETOUTERTAXRF,-- 伝票転嫁・明細転嫁　返品金額消費税額（外税）" + Environment.NewLine;
                    //sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1+SUPLIERPAY.TTLRETOUTERTAXRF2+SUPLIERPAY.TTLRETOUTERTAXRF3 AS TTLRETOUTERTAXRF_S,-- 支払(親)転嫁　返品金額消費税額（外税） " + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1*TAXRATERF+SUPLIERPAY.TTLRETOUTERTAXRF2*TAXRATE2RF+SUPLIERPAY.TTLRETOUTERTAXRF3*TAXRATE3RF AS TTLRETOUTERTAXRF_S,-- 支払(親)転嫁　返品金額消費税額（外税） " + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    //sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1_2+SUPLIERPAY.TTLRETOUTERTAXRF2_2+SUPLIERPAY.TTLRETOUTERTAXRF3_2 AS TTLRETOUTERTAXRF_S2,-- 支払(子)転嫁　返品金額消費税額（外税）" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " SUPLIERPAY.TTLRETOUTERTAXRF1_2*TAXRATERF+SUPLIERPAY.TTLRETOUTERTAXRF2_2*TAXRATE2RF+SUPLIERPAY.TTLRETOUTERTAXRF3_2*TAXRATE3RF AS TTLRETOUTERTAXRF_S2,-- 支払(子)転嫁　返品金額消費税額（外税）" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    //■ ■ 値引 ■ ■
                    sqlText += " SUPLIERPAY.THISSTCKPRICDISRF AS THISSTCKPRICDISRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDDISOUTTAXRF AS TTLITDEDDISOUTTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDDISINTAXRF AS TTLITDEDDISINTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.TTLITDEDDISTAXFREERF AS TTLITDEDDISTAXFREERF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STCKDISTTLTAXINCLURF AS TTLDISINNERTAXRF," + Environment.NewLine;
                    sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF AS TTLDISOUTERTAXRF,-- 伝票転嫁・明細転嫁  値引消費税額（外税） " + Environment.NewLine;
                    //sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1+SUPLIERPAY.STOCKDISOUTTAXRF2+SUPLIERPAY.STOCKDISOUTTAXRF3 AS TTLDISOUTERTAXRF_S, -- 支払(親)  値引消費税額（外税） " + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1*TAXRATERF+SUPLIERPAY.STOCKDISOUTTAXRF2*TAXRATE2RF+SUPLIERPAY.STOCKDISOUTTAXRF3*TAXRATE3RF AS TTLDISOUTERTAXRF_S, -- 支払(親)  値引消費税額（外税） " + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    //sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1_2+SUPLIERPAY.STOCKDISOUTTAXRF2_2+SUPLIERPAY.STOCKDISOUTTAXRF3_2 AS TTLDISOUTERTAXRF_S2 -- 支払(子)  値引消費税額（外税）" + Environment.NewLine;// DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " SUPLIERPAY.STOCKDISOUTTAXRF1_2*TAXRATERF+SUPLIERPAY.STOCKDISOUTTAXRF2_2*TAXRATE2RF+SUPLIERPAY.STOCKDISOUTTAXRF3_2*TAXRATE3RF AS TTLDISOUTERTAXRF_S2 -- 支払(子)  値引消費税額（外税）" + Environment.NewLine;// ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正
                    sqlText += " FROM" + Environment.NewLine;
                    sqlText += "(" + Environment.NewLine;

                    #region SUBクエリ
                    sqlText += " SELECT" + Environment.NewLine;
                    sqlText += "  STOCK.STOCKSECTIONCDRF, " + Environment.NewLine;
                    sqlText += "  STOCK.PAYEECODERF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.SUPPLIERNM1RF AS PAYEENM1RF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.SUPPLIERNM2RF AS PAYEENM2RF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.SUPPLIERSNMRF AS PAYEESNMRF," + Environment.NewLine;
                    sqlText += "  STOCK.SUPPLIERCDRF," + Environment.NewLine;
                    sqlText += "  KOSUPPLIER.SUPPLIERNM1RF," + Environment.NewLine;
                    sqlText += "  KOSUPPLIER.SUPPLIERNM2RF," + Environment.NewLine;
                    sqlText += "  KOSUPPLIER.SUPPLIERSNMRF,  " + Environment.NewLine;
                    sqlText += "  SUPPLIER.STOCKCNSTAXFRCPROCCDRF," + Environment.NewLine;
                    sqlText += "  PROCMONEY.FRACTIONPROCUNITRF," + Environment.NewLine;
                    sqlText += "  PROCMONEY.FRACTIONPROCCDRF, " + Environment.NewLine;
                    sqlText += "  SUPPLIER.SUPPCTAXLAYCDRF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.PAYMENTMONTHCODERF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.PAYMENTDAYRF," + Environment.NewLine;
                    sqlText += "  SUPPLIER.PAYMENTCONDRF," + Environment.NewLine;
                    sqlText += "  COUNT(STOCK.SUPPLIERSLIPNORF) STOCKSLIPCOUNT, --伝票枚数" + Environment.NewLine;
                    // 仕入
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STOCKNETPRICERF ELSE 0 END)) AS THISTIMESTOCKPRICERF,       --仕入正価金額" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCOUTTAXRF ELSE 0 END)) AS TTLITDEDSTCOUTTAXRF,    --仕入外税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCINTAXRF ELSE 0 END)) AS TTLITDEDSTCINTAXRF,      --仕入内税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.TTLITDEDSTCTAXFREERF ELSE 0 END)) AS TTLITDEDSTCTAXFREERF,  --仕入非課税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =10 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS STCKPRCCONSTAXINCLURF,--仕入金額消費税額（内税）" + Environment.NewLine;
                    // 伝票転嫁・明細転嫁　仕入金額消費税額（外税）
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 0 OR STOCK.SUPPCTAXLAYCDRF= 1) AND (STOCK.SUPPLIERSLIPCDRF =10) THEN STOCK.STOCKOUTTAXRF ELSE 0 END)) AS STOCKOUTTAXRF," + Environment.NewLine;
                    // 支払(親)転嫁　仕入金額消費税額（外税）
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS STOCKOUTTAXRF1,--税率1" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS STOCKOUTTAXRF2,     --税率2" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS STOCKOUTTAXRF3,     --税率3" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF1,--税率1" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF2,     --税率2" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF3,     --税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // 支払(子)転嫁　仕入金額消費税額（外税）
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS STOCKOUTTAXRF1_2,--税率1" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS STOCKOUTTAXRF2_2,     --税率2" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS STOCKOUTTAXRF3_2,     --税率3" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF1_2,--税率1" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF2_2,     --税率2" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =10) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS STOCKOUTTAXRF3_2,     --税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // 返品
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STOCKNETPRICERF ELSE 0 END)) AS THISSTCKPRICRGDSRF,         --返品正価金額" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCOUTTAXRF ELSE 0 END)) AS TTLITDEDRETOUTTAXRF,    --返品外税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCINTAXRF ELSE 0 END)) AS TTLITDEDRETINTAXRF,      --返品内税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.TTLITDEDSTCTAXFREERF ELSE 0 END)) AS TTLITDEDRETTAXFREERF,  --返品非課税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN STOCK.SUPPLIERSLIPCDRF =20 THEN STOCK.STCKPRCCONSTAXINCLURF ELSE 0 END)) AS TTLRETINNERTAXRF,     --返品金額消費税額（内税）" + Environment.NewLine;
                    // 伝票転嫁・明細転嫁　返品金額消費税額（外税）
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 0 OR STOCK.SUPPCTAXLAYCDRF= 1) AND (STOCK.SUPPLIERSLIPCDRF =20) THEN STOCK.STOCKOUTTAXRF ELSE 0 END)) AS TTLRETOUTERTAXRF," + Environment.NewLine;
                    // 支払(親)　返品金額消費税額（外税）
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS TTLRETOUTERTAXRF1,--税率1" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS TTLRETOUTERTAXRF2,     --税率2" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    //sqlText += "           THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS TTLRETOUTERTAXRF3,      --税率3" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF1,--税率1" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF2,     --税率2" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "           THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF3,      --税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // 支払(子)　返品金額消費税額（外税）
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * STOCK.TAXRATERF) ELSE 0 END)) AS TTLRETOUTERTAXRF1_2,--税率1" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    //sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE2RF) ELSE 0 END)) AS TTLRETOUTERTAXRF2_2,     --税率2" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    //sqlText += "           THEN (STOCK.TTLITDEDSTCOUTTAXRF * TAXRATE3RF) ELSE 0 END)) AS TTLRETOUTERTAXRF3_2,      --税率3" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF1_2,--税率1" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF2_2,     --税率2" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.SUPPLIERSLIPCDRF =20) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "            THEN (STOCK.TTLITDEDSTCOUTTAXRF) ELSE 0 END)) AS TTLRETOUTERTAXRF3_2,      --税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    //値引
                    sqlText += "  SUM(STOCK.STCKDISTTLTAXEXCRF) AS THISSTCKPRICDISRF,      --値引金額計（税抜き）" + Environment.NewLine;
                    sqlText += "  SUM(STOCK.ITDEDSTOCKDISOUTTAXRF) AS TTLITDEDDISOUTTAXRF, --値引外税対象額合計" + Environment.NewLine;
                    sqlText += "  SUM(STOCK.ITDEDSTOCKDISINTAXRF) AS TTLITDEDDISINTAXRF,   --値引内税対象額合計 " + Environment.NewLine;
                    sqlText += "  SUM(STOCK.ITDEDSTOCKDISTAXFRERF) AS TTLITDEDDISTAXFREERF,--値引非課税対象額合計   " + Environment.NewLine;
                    sqlText += "  SUM(STOCK.STCKDISTTLTAXINCLURF) AS STCKDISTTLTAXINCLURF,  --値引消費税額（内税）" + Environment.NewLine;
                    // 伝票転嫁・明細転嫁  値引消費税額（外税）
                    sqlText += "  SUM(CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 0 OR STOCK.SUPPCTAXLAYCDRF= 1) THEN STOCK.STOCKDISOUTTAXRF ELSE 0 END ) AS STOCKDISOUTTAXRF," + Environment.NewLine;
                    // 支払(親)　値引金額消費税額（外税）
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATERF)ELSE 0 END)) AS STOCKDISOUTTAXRF1, --税率1" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE2RF)ELSE 0 END)) AS STOCKDISOUTTAXRF2,--税率2" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE3RF)ELSE 0 END)) AS STOCKDISOUTTAXRF3,--税率3" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF)ELSE 0 END)) AS STOCKDISOUTTAXRF1, --税率1" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF)ELSE 0 END)) AS STOCKDISOUTTAXRF2,--税率2" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 2) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF)ELSE 0 END)) AS STOCKDISOUTTAXRF3,--税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // 支払(子)　値引金額消費税額（外税）
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATERF)ELSE 0 END)) AS STOCKDISOUTTAXRF1_2, --税率1" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE2RF)ELSE 0 END)) AS STOCKDISOUTTAXRF2_2,--税率2" + Environment.NewLine;
                    //sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    //sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF * TAXRATE3RF)ELSE 0 END)) AS STOCKDISOUTTAXRF3_2 --税率3" + Environment.NewLine;
                    // DEL 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "  STOCK.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                    sqlText += "  STOCK.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                    sqlText += "  STOCK.TAXRATE3RF AS TAXRATE3RF," + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATERF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATERF) " + Environment.NewLine;
                    sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF)ELSE 0 END)) AS STOCKDISOUTTAXRF1_2, --税率1" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE2RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE2RF) " + Environment.NewLine;
                    sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF)ELSE 0 END)) AS STOCKDISOUTTAXRF2_2,--税率2" + Environment.NewLine;
                    sqlText += "  SUM((CASE WHEN (STOCK.SUPPCTAXLAYCDRF= 3) AND (STOCK.STOCKADDUPADATERF >= STOCK.TAXRATESTARTDATE3RF AND STOCK.STOCKADDUPADATERF <= STOCK.TAXRATEENDDATE3RF) " + Environment.NewLine;
                    sqlText += "       THEN (STOCK.ITDEDSTOCKDISOUTTAXRF)ELSE 0 END)) AS STOCKDISOUTTAXRF3_2 --税率3" + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    sqlText += "  FROM" + Environment.NewLine;
                    sqlText += "  (" + Environment.NewLine;
                    #region SUBSUBクエリ
                    sqlText += "   SELECT" + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STOCKSECTIONCDRF, " + Environment.NewLine;
                    sqlText += "    SUBSTOCK.LOGICALDELETECODERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.ENTERPRISECODERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.SUPPCTAXLAYCDRF, --消費税転嫁方式(仕入データ) " + Environment.NewLine;
                    sqlText += "    SUBSTOCK.SUPPLIERFORMALRF,--仕入形式" + Environment.NewLine;
                    sqlText += "    SUBSTOCK.DEBITNOTEDIVRF,  --赤伝区分" + Environment.NewLine;
                    sqlText += "    SUBSTOCK.SUPPLIERSLIPCDRF,--仕入伝票区分" + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STOCKGOODSCDRF,  --仕入商品区分" + Environment.NewLine;
                    sqlText += "    SUBSTOCK.SUPPLIERSLIPNORF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STOCKADDUPADATERF," + Environment.NewLine;
                    sqlText += "    (CASE WHEN (SEARCHSUPPLIER.PAYEECODERF IS NOT NULL) THEN SEARCHSUPPLIER.PAYEECODERF ELSE SUBSTOCK.PAYEECODERF END) AS PAYEECODERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.SUPPLIERCDRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STOCKNETPRICERF + SUBSTOCKDTL.DISSTOCKPRICETAXEXCGYO AS STOCKNETPRICERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.TTLITDEDSTCOUTTAXRF + SUBSTOCKDTL.ITDEDSTOCKDISOUTTAXGYO AS TTLITDEDSTCOUTTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.TTLITDEDSTCINTAXRF + SUBSTOCKDTL.ITDEDSTOCKDISINTAXGYO AS TTLITDEDSTCINTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.TTLITDEDSTCTAXFREERF + SUBSTOCKDTL.ITDEDSTOCKDISFREETAXGYO AS TTLITDEDSTCTAXFREERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STOCKOUTTAXRF + SUBSTOCKDTL.STOCKDISOUTTAXGYO AS STOCKOUTTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STCKPRCCONSTAXINCLURF + SUBSTOCKDTL.STOCKDISINTAXGYO AS STCKPRCCONSTAXINCLURF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STCKDISTTLTAXEXCRF - SUBSTOCKDTL.DISSTOCKPRICETAXEXCGYO AS STCKDISTTLTAXEXCRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.ITDEDSTOCKDISOUTTAXRF - SUBSTOCKDTL.ITDEDSTOCKDISOUTTAXGYO AS ITDEDSTOCKDISOUTTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.ITDEDSTOCKDISINTAXRF - SUBSTOCKDTL.ITDEDSTOCKDISINTAXGYO AS ITDEDSTOCKDISINTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.ITDEDSTOCKDISTAXFRERF - SUBSTOCKDTL.ITDEDSTOCKDISFREETAXGYO AS ITDEDSTOCKDISTAXFRERF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STOCKDISOUTTAXRF - SUBSTOCKDTL.STOCKDISOUTTAXGYO AS STOCKDISOUTTAXRF," + Environment.NewLine;
                    sqlText += "    SUBSTOCK.STCKDISTTLTAXINCLURF - SUBSTOCKDTL.STOCKDISINTAXGYO AS STCKDISTTLTAXINCLURF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATESTARTDATERF AS TAXRATESTARTDATERF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATEENDDATERF AS TAXRATEENDDATERF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATERF AS TAXRATERF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATESTARTDATE2RF AS TAXRATESTARTDATE2RF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATEENDDATE2RF AS TAXRATEENDDATE2RF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATE2RF AS TAXRATE2RF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATESTARTDATE3RF AS TAXRATESTARTDATE3RF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATEENDDATE3RF AS TAXRATEENDDATE3RF," + Environment.NewLine;
                    sqlText += "    TAX.TAXRATE3RF AS TAXRATE3RF" + Environment.NewLine;
                    sqlText += "   FROM" + Environment.NewLine;
                    sqlText += "    STOCKSLIPRF AS SUBSTOCK WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "    LEFT JOIN TAXRATESETRF AS TAX WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "     ON SUBSTOCK.ENTERPRISECODERF = TAX.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    LEFT JOIN SUPPLIERRF AS SEARCHSUPPLIER WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "     ON SUBSTOCK.ENTERPRISECODERF = SEARCHSUPPLIER.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "     AND SUBSTOCK.SUPPLIERCDRF = SEARCHSUPPLIER.SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += "    LEFT JOIN" + Environment.NewLine;
                    sqlText += "    ( " + Environment.NewLine;
                    sqlText += "      SELECT" + Environment.NewLine;
                    sqlText += "       STOCK.ENTERPRISECODERF," + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERFORMALRF, --受注ステータス" + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERSLIPNORF, --仕入伝票番号 " + Environment.NewLine;
                    sqlText += "       -- 行値引" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS DISSTOCKPRICETAXEXCGYO," + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 0 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISOUTTAXGYO, -- 外税対象額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 1 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISFREETAXGYO,-- 非課税対象額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 2 ) THEN DTL.STOCKPRICETAXEXCRF ELSE 0 END) AS ITDEDSTOCKDISINTAXGYO,  -- 内税対象額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 0 ) THEN DTL.STOCKPRICECONSTAXRF ELSE 0 END) AS STOCKDISOUTTAXGYO, -- 外税額(行値引)" + Environment.NewLine;
                    sqlText += "       SUM(CASE WHEN (DTL.STOCKSLIPCDDTLRF = 2 AND DTL.STOCKCOUNTRF = 0 AND DTL.TAXATIONCODERF = 2 ) THEN DTL.STOCKPRICECONSTAXRF ELSE 0 END) AS STOCKDISINTAXGYO  -- 内税額(行値引)" + Environment.NewLine;
                    sqlText += "      FROM" + Environment.NewLine;
                    sqlText += "       STOCKDETAILRF AS DTL WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "      LEFT JOIN STOCKSLIPRF AS STOCK WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "       ON DTL.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "       AND DTL.SUPPLIERFORMALRF = STOCK.SUPPLIERFORMALRF" + Environment.NewLine;
                    sqlText += "       AND DTL.SUPPLIERSLIPNORF = STOCK.SUPPLIERSLIPNORF" + Environment.NewLine;
                    sqlText += "      GROUP BY" + Environment.NewLine;
                    sqlText += "       STOCK.ENTERPRISECODERF," + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERFORMALRF, --受注ステータス" + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERSLIPCDRF, --仕入伝票区分" + Environment.NewLine;
                    sqlText += "       STOCK.SUPPLIERSLIPNORF  --仕入伝票番号 " + Environment.NewLine;
                    sqlText += "    ) AS SUBSTOCKDTL" + Environment.NewLine;
                    sqlText += "    ON  SUBSTOCK.ENTERPRISECODERF = SUBSTOCKDTL.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    AND SUBSTOCK.SUPPLIERFORMALRF = SUBSTOCKDTL.SUPPLIERFORMALRF" + Environment.NewLine;
                    sqlText += "    AND SUBSTOCK.SUPPLIERSLIPNORF = SUBSTOCKDTL.SUPPLIERSLIPNORF" + Environment.NewLine;
                    #endregion

                    #region WHERE句
                    sqlText += "   WHERE SUBSTOCK.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    AND  (CASE WHEN (SEARCHSUPPLIER.PAYEECODERF IS NOT NULL) THEN SEARCHSUPPLIER.PAYEECODERF ELSE SUBSTOCK.PAYEECODERF END)=@FINDCUSTOMERCODE" + Environment.NewLine;
                    sqlText += "    AND (SUBSTOCK.STOCKADDUPADATERF<=@FINDADDUPDATE AND SUBSTOCK.STOCKADDUPADATERF>@FINDLASTTIMEADDUPDATE)" + Environment.NewLine;
                    sqlText += "    AND  SUBSTOCK.LOGICALDELETECODERF=0" + Environment.NewLine;
                    sqlText += "    AND  SUBSTOCK.SUPPLIERFORMALRF=0" + Environment.NewLine;
                    sqlText += "    AND  SUBSTOCK.DEBITNOTEDIVRF=0" + Environment.NewLine;
                    sqlText += "    AND (SUBSTOCK.SUPPLIERSLIPCDRF = 10 OR SUBSTOCK.SUPPLIERSLIPCDRF = 20)" + Environment.NewLine;
                    sqlText += "    AND (SUBSTOCK.STOCKGOODSCDRF=0 OR SUBSTOCK.STOCKGOODSCDRF = 6)     " + Environment.NewLine;
                    #endregion

                    #region JOIN 句
                    sqlText += "   ) AS STOCK" + Environment.NewLine;
                    sqlText += "   INNER JOIN SUPPLIERRF AS SUPPLIER WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "    ON SUPPLIER.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    AND SUPPLIER.SUPPLIERCDRF = STOCK.PAYEECODERF" + Environment.NewLine;
                    sqlText += "   LEFT JOIN SUPPLIERRF AS KOSUPPLIER WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "    ON KOSUPPLIER.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    AND KOSUPPLIER.SUPPLIERCDRF = STOCK.SUPPLIERCDRF" + Environment.NewLine;
                    sqlText += "   LEFT JOIN STOCKPROCMONEYRF AS PROCMONEY WITH (READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += "    ON PROCMONEY.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += "    AND PROCMONEY.FRACPROCMONEYDIVRF = 1" + Environment.NewLine;
                    sqlText += "    AND PROCMONEY.FRACTIONPROCCODERF = SUPPLIER.STOCKCNSTAXFRCPROCCDRF" + Environment.NewLine;
                    #endregion

                    #region GROUP BY句
                    sqlText += "   GROUP BY" + Environment.NewLine;
                    sqlText += "    STOCK.STOCKSECTIONCDRF, " + Environment.NewLine;
                    sqlText += "    STOCK.PAYEECODERF," + Environment.NewLine;
                    sqlText += "    SUPPLIER.SUPPLIERNM1RF," + Environment.NewLine;
                    sqlText += "    SUPPLIER.SUPPLIERNM2RF," + Environment.NewLine;
                    sqlText += "    SUPPLIER.SUPPLIERSNMRF,   " + Environment.NewLine;
                    sqlText += "    STOCK.SUPPLIERCDRF," + Environment.NewLine;
                    sqlText += "    KOSUPPLIER.SUPPLIERNM1RF," + Environment.NewLine;
                    sqlText += "    KOSUPPLIER.SUPPLIERNM2RF," + Environment.NewLine;
                    sqlText += "    KOSUPPLIER.SUPPLIERSNMRF,    " + Environment.NewLine;
                    sqlText += "    SUPPLIER.STOCKCNSTAXFRCPROCCDRF," + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 ----->>>>>
                    sqlText += "    STOCK.TAXRATERF, " + Environment.NewLine;
                    sqlText += "    STOCK.TAXRATE2RF, " + Environment.NewLine;
                    sqlText += "    STOCK.TAXRATE3RF, " + Environment.NewLine;
                    // ADD 田村顕成 2023/11/24 売掛残高一覧消費税額相違不具合修正 -----<<<<<
                    sqlText += "    PROCMONEY.FRACTIONPROCUNITRF," + Environment.NewLine;
                    sqlText += "    PROCMONEY.FRACTIONPROCCDRF,     " + Environment.NewLine;
                    sqlText += "    SUPPLIER.SUPPCTAXLAYCDRF," + Environment.NewLine;
                    sqlText += "    SUPPLIER.PAYMENTMONTHCODERF," + Environment.NewLine;
                    sqlText += "    SUPPLIER.PAYMENTDAYRF," + Environment.NewLine;
                    sqlText += "    SUPPLIER.PAYMENTCONDRF    " + Environment.NewLine;
                    sqlText += ") AS SUPLIERPAY" + Environment.NewLine;
                    #endregion

                    #endregion

                    #endregion

                    sqlCommand.CommandText = sqlText;

                    #region Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCodeChild = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaCustomerCodeChild = sqlCommand.Parameters.Add("@FINDCUSTOMERCODE", SqlDbType.Int);
                    SqlParameter findParaAddUpDateChild = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaLastTimeAddUpDateChild = sqlCommand.Parameters.Add("@FINDLASTTIMEADDUPDATE", SqlDbType.Int);
                    #endregion

                    #region Parameterオブジェクトへ値設定
                    findParaEnterpriseCodeChild.Value = SqlDataMediator.SqlSetString(suplAccPayWork.EnterpriseCode);
                    findParaCustomerCodeChild.Value = SqlDataMediator.SqlSetInt32(suplAccPayWork.PayeeCode);
                    findParaAddUpDateChild.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.AddUpDate);
                    if (suplAccPayWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        findParaLastTimeAddUpDateChild.Value = 20000101;
                    else
                        findParaLastTimeAddUpDateChild.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(suplAccPayWork.LaMonCAddUpUpdDate);
                    #endregion

                    sqlCommand.CommandTimeout = TimeOut;

                    myReader = sqlCommand.ExecuteReader();

                    fractionProcUnit = 0;
                    long setTax = 0;
                    int SetFlg = 0;

                    while (myReader.Read())
                    {
                        SetFlg = 0;

                        #region 結果セット
                        SuplAccPayWork suplAccPayChildWork = new SuplAccPayWork();
                        suplAccPayChildWork.PayeeCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYEECODERF"));   // 支払先コード
                        suplAccPayChildWork.PayeeName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYEENM1RF"));
                        suplAccPayChildWork.PayeeName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYEENM2RF"));
                        suplAccPayChildWork.PayeeSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYEESNMRF"));
                        //■ 親子レコードのみセット項目↓↓ ※集計レコードは未設定
                        suplAccPayChildWork.SupplierCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPLIERCDRF"));         // 仕入先コード
                        suplAccPayChildWork.SupplierNm1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM1RF"));
                        suplAccPayChildWork.SupplierNm2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM2RF"));
                        suplAccPayChildWork.SupplierSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERSNMRF"));
                        //■ 親子レコードのみセット項目↑↑
                        suplAccPayChildWork.EnterpriseCode = suplAccPayWork.EnterpriseCode;
                        suplAccPayChildWork.AddUpSecCode = suplAccPayWork.AddUpSecCode;
                        suplAccPayChildWork.AddUpDate = suplAccPayWork.AddUpDate;           // 計上年月日
                        suplAccPayChildWork.AddUpYearMonth = suplAccPayWork.AddUpYearMonth; // 計上年月
                        suplAccPayChildWork.SupplierConsTaxRate = suplAccPayWork.SupplierConsTaxRate;
                        suplAccPayChildWork.FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF")); // 端数処理区分
                        fractionProcUnit = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("FRACTIONPROCUNITRF"));           　   // 端数処理単位
                        suplAccPayChildWork.SuppCTaxLayCd = suplAccPayWork.SuppCTaxLayCd;
                        // ■親子レコード未設定項目 ↓↓ ※集計レコードのみ
                        suplAccPayChildWork.LastTimeAccPay = 0;      // 前回支払金額
                        suplAccPayChildWork.ThisTimeFeePayNrml = 0;  // 今回手数料金額
                        suplAccPayChildWork.ThisTimeDisPayNrml = 0;  // 今回値引金額
                        suplAccPayChildWork.ThisTimePayNrml = 0;     // 今回支払金額
                        suplAccPayChildWork.ThisTimeTtlBlcAcPay = 0; // 今回繰越残高
                        // ■親子レコード未設定項目 ↑↑
                        //■相殺
                        suplAccPayChildWork.OfsThisTimeStock = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFSTHISTIMESTOCKRF"));
                        suplAccPayChildWork.ItdedOffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETOUTTAXRF"));
                        suplAccPayChildWork.ItdedOffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETINTAXRF"));
                        suplAccPayChildWork.ItdedOffsetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ITDEDOFFSETTAXFREERF"));
                        suplAccPayChildWork.OffsetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("OFFSETINTAXRF"));

                        #region suplAccPayChildWork.OffsetOutTax [相殺後外税消費税]
                        // 相殺後外税消費税 = 仕入外税消費税 + 返品外税消費税 + 値引外税消費税 ※各種転嫁方式別に計算し合算する
                        // 伝票転嫁 + 明細転嫁  
                        suplAccPayChildWork.OffsetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF")) + SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF")) +
                                                           SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                        // 支払(親)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S")) + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S")) +
                                 SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.OffsetOutTax += setTax;

                        // 支払(子)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S2")) + SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S2")) +
                                 SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S2")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.OffsetOutTax += setTax;
                        OffsetOutTax += setTax;     // 相殺外税消費税(支払(子)転嫁) ※集計レコード計算用
                        #endregion
                        suplAccPayChildWork.OfsThisStockTax = suplAccPayChildWork.OffsetInTax + suplAccPayChildWork.OffsetOutTax;

                        // ■仕入
                        suplAccPayChildWork.ThisTimeStockPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISTIMESTOCKPRICERF"));
                        suplAccPayChildWork.TtlItdedStcOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCOUTTAXRF"));
                        suplAccPayChildWork.TtlItdedStcInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCINTAXRF"));
                        suplAccPayChildWork.TtlItdedStcTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDSTCTAXFREERF"));
                        suplAccPayChildWork.TtlStockInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKINNERTAXRF"));
                        #region suplAccPayChildWork.TtlStockOuterTax [今回仕入外税消費税]
                        // 今回仕入外税消費税 ※各種転嫁方式別に計算を行い、合算する
                        // 伝票転嫁 + 明細転嫁
                        suplAccPayChildWork.TtlStockOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF"));
                        // 支払(親)転嫁　※参考消費税
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.TtlStockOuterTax += setTax;
                        // 支払(子)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLSTOCKOUTERTAXRF_S2")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.TtlStockOuterTax += setTax;
                        StockOuterTax += setTax; // 仕入外税消費税(支払(子)転嫁)　※集計レコード計算用
                        #endregion
                        suplAccPayChildWork.ThisStcPrcTax = suplAccPayChildWork.TtlStockInnerTax + suplAccPayChildWork.TtlStockOuterTax;  // 今回仕入消費税額

                        // ■返品
                        suplAccPayChildWork.ThisStckPricRgds = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSTCKPRICRGDSRF"));
                        suplAccPayChildWork.TtlItdedRetOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETOUTTAXRF"));
                        suplAccPayChildWork.TtlItdedRetInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETINTAXRF"));
                        suplAccPayChildWork.TtlItdedRetTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDRETTAXFREERF"));
                        suplAccPayChildWork.TtlRetInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETINNERTAXRF"));
                        #region suplAccPayChildWork.TtlRetOuterTax [今回返品外税消費税]
                        // 今回返品外税消費税 ※各種転嫁方式別に計算を行い、合算する
                        // 伝票転嫁 + 明細転嫁
                        suplAccPayChildWork.TtlRetOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF"));
                        // 支払(親)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.TtlRetOuterTax += setTax;
                        // 支払(子)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLRETOUTERTAXRF_S2")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.TtlRetOuterTax += setTax;
                        RetStockOuterTax += setTax; // 返品外税消費税(支払(子)転嫁) ※集計レコード計算用
                        #endregion
                        suplAccPayChildWork.ThisStcPrcTaxRgds = suplAccPayChildWork.TtlRetInnerTax + suplAccPayChildWork.TtlRetOuterTax;

                        // ■値引
                        suplAccPayChildWork.ThisStckPricDis = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("THISSTCKPRICDISRF"));
                        suplAccPayChildWork.TtlItdedDisOutTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISOUTTAXRF"));
                        suplAccPayChildWork.TtlItdedDisInTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISINTAXRF"));
                        suplAccPayChildWork.TtlItdedDisTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLITDEDDISTAXFREERF"));
                        suplAccPayChildWork.TtlDisInnerTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISINNERTAXRF"));
                        #region suplAccPayChildWork.TtlDisOuterTax [今回値引外税消費税]
                        // 今回返品外税消費税 ※各種転嫁方式別に計算を行い、合算する
                        // 伝票転嫁 + 明細転嫁
                        suplAccPayChildWork.TtlDisOuterTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF"));
                        // 支払(親)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.TtlDisOuterTax += setTax;
                        // 支払(子)転嫁
                        FracCalc(SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TTLDISOUTERTAXRF_S2")), fractionProcUnit, suplAccPayChildWork.FractionProcCd, out setTax);
                        suplAccPayChildWork.TtlDisOuterTax += setTax;
                        DisStockOuterTax += setTax; // 値引外税消費税(支払(子)転嫁) ※集計レコード計算用
                        #endregion
                        suplAccPayChildWork.ThisStcPrcTaxDis = suplAccPayChildWork.TtlDisInnerTax + suplAccPayChildWork.TtlDisOuterTax;

                        suplAccPayChildWork.TaxAdjust = 0;     // 消費税調整額(0固定)
                        suplAccPayChildWork.BalanceAdjust = 0; // 残高調整額(0固定)
                        // ■親子レコード未設定項目 (集計レコードのみ) ↓↓ >>>
                        suplAccPayChildWork.StckTtlAccPayBalance = 0; // 仕入合計残高
                        suplAccPayChildWork.StckTtl2TmBfBlAccPay = 0; // 仕入2回前残高
                        suplAccPayChildWork.StckTtl3TmBfBlAccPay = 0; // 仕入3回前残高
                        // ■親子レコード未設定項目 ↑↑ <<<
                        suplAccPayChildWork.MonthAddUpExpDate = suplAccPayWork.MonthAddUpExpDate;  // 締次更新実行年月日
                        suplAccPayChildWork.StMonCAddUpUpdDate = suplAccPayWork.StMonCAddUpUpdDate;// 締次更新開始年月日
                        suplAccPayChildWork.LaMonCAddUpUpdDate = suplAccPayWork.LaMonCAddUpUpdDate;  // 前回締次更新年月日
                        suplAccPayChildWork.StockSlipCount = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("STOCKSLIPCOUNT"));　// 伝票枚数

                        // 売上2009/06/18分の修正と同一の処理を入れる
                        // 締次集計処理と同様に清算拠点、清算先、仕入先、実績計上拠点別に消費税集計するが
                        // 買掛のテーブルレイアウト上、実績計上拠点が存在しないため、KEY項目で金額の合算を行う。
                        if (suplAccPayChildWorkList.Count > 0)
                        {
                            for (int i = 0; i < suplAccPayChildWorkList.Count; i++)
                            {
                                if (
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).EnterpriseCode == suplAccPayChildWork.EnterpriseCode &&
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).AddUpSecCode == suplAccPayChildWork.AddUpSecCode &&
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).PayeeCode == suplAccPayChildWork.PayeeCode &&
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).SupplierCd == suplAccPayChildWork.SupplierCd &&
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).AddUpDate == suplAccPayChildWork.AddUpDate
                                  )
                                {

                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).OfsThisTimeStock += suplAccPayChildWork.OfsThisTimeStock;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).OfsThisStockTax += suplAccPayChildWork.OfsThisStockTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ItdedOffsetOutTax += suplAccPayChildWork.ItdedOffsetOutTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ItdedOffsetInTax += suplAccPayChildWork.ItdedOffsetInTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ItdedOffsetTaxFree += suplAccPayChildWork.ItdedOffsetTaxFree;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).OffsetOutTax += suplAccPayChildWork.OffsetOutTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).OffsetInTax += suplAccPayChildWork.OffsetInTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ThisTimeStockPrice += suplAccPayChildWork.ThisTimeStockPrice;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ThisStcPrcTax += suplAccPayChildWork.ThisStcPrcTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedStcOutTax += suplAccPayChildWork.TtlItdedStcOutTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedStcInTax += suplAccPayChildWork.TtlItdedStcInTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedStcTaxFree += suplAccPayChildWork.TtlItdedStcTaxFree;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlStockOuterTax += suplAccPayChildWork.TtlStockOuterTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlStockInnerTax += suplAccPayChildWork.TtlStockInnerTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ThisStckPricRgds += suplAccPayChildWork.ThisStckPricRgds;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ThisStcPrcTaxRgds += suplAccPayChildWork.ThisStcPrcTaxRgds;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedRetOutTax += suplAccPayChildWork.TtlItdedRetOutTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedRetInTax += suplAccPayChildWork.TtlItdedRetInTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedRetTaxFree += suplAccPayChildWork.TtlItdedRetTaxFree;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlRetOuterTax += suplAccPayChildWork.TtlRetOuterTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlRetInnerTax += suplAccPayChildWork.TtlRetInnerTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ThisStckPricDis += suplAccPayChildWork.ThisStckPricDis;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).ThisStcPrcTaxDis += suplAccPayChildWork.ThisStcPrcTaxDis;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedDisOutTax += suplAccPayChildWork.TtlItdedDisOutTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedDisInTax += suplAccPayChildWork.TtlItdedDisInTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlItdedDisTaxFree += suplAccPayChildWork.TtlItdedDisTaxFree;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlDisOuterTax += suplAccPayChildWork.TtlDisOuterTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).TtlDisInnerTax += suplAccPayChildWork.TtlDisInnerTax;
                                    ((SuplAccPayWork)suplAccPayChildWorkList[i]).StockSlipCount += suplAccPayChildWork.StockSlipCount;

                                    SetFlg = 1;
                                }
                            }
                        }

                        if (SetFlg == 0)
                        {
                            suplAccPayChildWorkList.Add(suplAccPayChildWork);
                            ChildCnt += 1;
                        }
                        #endregion
                    }
                    #endregion


                    #region ■■ 集計レコード計算用の処理 ■■
                    if (ChildCnt > 0)
                    {
                        // 今回仕入外税消費税 + 仕入外税消費税[請求転嫁(子)]
                        suplAccPayWork.TtlStockOuterTax += StockOuterTax;
                        // 今回仕入消費税
                        suplAccPayWork.ThisStcPrcTax = suplAccPayWork.TtlStockInnerTax + suplAccPayWork.TtlStockOuterTax;

                        // 今回返品外税消費税 + 返品外税消費税[請求転嫁(子)]
                        suplAccPayWork.TtlRetOuterTax += RetStockOuterTax;
                        // 今回返品消費税
                        suplAccPayWork.ThisStcPrcTaxRgds = suplAccPayWork.TtlRetInnerTax + suplAccPayWork.TtlRetOuterTax;

                        // 今回値引外税消費税 + 値引外税消費税[請求転嫁(子)]
                        suplAccPayWork.TtlDisOuterTax += DisStockOuterTax;
                        // 今回値引消費税
                        suplAccPayWork.ThisStcPrcTaxDis = suplAccPayWork.TtlDisInnerTax + suplAccPayWork.TtlDisOuterTax;

                        //相殺後外税消費税 + 相殺後外税消費税[請求転嫁(子)]
                        suplAccPayWork.OffsetOutTax += OffsetOutTax;

                        if (totalAfterDay == 0) // 当月消費税を行わない場合の処理
                        {
                            //相殺後今回仕入消費税
                            suplAccPayWork.OfsThisStockTax = suplAccPayWork.OffsetOutTax + suplAccPayWork.OffsetInTax;
                        }

                        // 仕入合計残高(支払計) = 今回繰越金額(支払計) + (相殺後今回仕入金額 + 相殺後今回仕入消費税)
                        suplAccPayWork.StckTtlAccPayBalance = suplAccPayWork.ThisTimeTtlBlcAcPay + (suplAccPayWork.OfsThisTimeStock + suplAccPayWork.OfsThisStockTax);

                    }

                    #endregion

                    #region ■■ 実績無しの場合の処理 ■■
                    // 実績無しの場合でも、親レコードは作成する。
                    if (ChildCnt == 0)
                    {
                        // 親レコード作製
                        SuplAccPayWork suplAccPayChildWork = new SuplAccPayWork();
                        suplAccPayChildWork = suplAccPayWork;
                        suplAccPayChildWorkList.Add(suplAccPayChildWork);

                        // 集計レコード不足項目セット
                        // 今回繰越残高
                        suplAccPayWork.ThisTimeTtlBlcAcPay = (suplAccPayWork.LastTimeAccPay) - suplAccPayWork.ThisTimePayNrml;

                        // 仕入合計残高(支払計) = 今回繰越金額(支払計) + (相殺後今回仕入金額 + 相殺後今回仕入消費税)
                        suplAccPayWork.StckTtlAccPayBalance = suplAccPayWork.ThisTimeTtlBlcAcPay + (suplAccPayWork.OfsThisTimeStock + suplAccPayWork.OfsThisStockTax);

                    }
                    #endregion

                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        #endregion
        //-----ADD YANGMJ 2012/11/01 REDMINE#32893-----<<<<<

        #region [在庫受払履歴データ]
        /// <summary>
        /// 在庫受払履歴データを取得します
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータクラスワーク</param>
        /// <param name="stockHistoryWorkList">在庫受払履歴データList</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="mode">0:通常,1:単価の取得をしない(StockUnitPriceFl,StockMashinePrice,PropertyStockPriceの取得処理なし)</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 在庫受払履歴データを取得します</br>
        /// <br>Programmer : 20081  疋田 勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// <br>Update Note: 2011/08/23  連番806 梁森東</br>
        /// </br>            : 「対象月を指定しても当月分しか集計していないようです」の対応</br>
        /// </remarks>
        // -- UPD 2010/06/02 --------------------------------------------------->>>>
        //private int GetStockAcPayHistMain(ref MonthlyAddUpWork monthlyAddUpWork, ref List<StockHistoryWork> stockHistoryWorkList, ref SqlConnection sqlConnection)
        private int GetStockAcPayHistMain(ref MonthlyAddUpWork monthlyAddUpWork, ref List<StockHistoryWork> stockHistoryWorkList, ref SqlConnection sqlConnection, int mode)
        // -- UPD 2010/06/02 ---------------------------------------------------<<<
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            SqlDataReader myReader = null;
            
            string sqlText = string.Empty;
            // 仕入先取得用
            GoodsSupplierGetter goodsSupplierGetter = new GoodsSupplierGetter();
            List<GoodsSupplierDataWork> GoodsSupplierDataWorkList = new List<GoodsSupplierDataWork>();

            // 原価算出用
            UnitPriceCalculation unitPriceCalculation = new UnitPriceCalculation();            
            List<UnitPriceCalcParamWork> unitPriceCalcParamList = new List<UnitPriceCalcParamWork>(); // 原価計算パラメータオブジェクトリスト
            List<GoodsUnitDataWork> goodsUnitDataList = new List<GoodsUnitDataWork>();                // 商品連結データオブジェクトリスト
            List<UnitPriceCalcRetWork> unitPriceCalcRetList = new List<UnitPriceCalcRetWork>();       // 原価計算結果リスト 
            // ADD 2009/05/25 >>>
            int FractionProcCd = 0;
            long calcPrice = 0;
            // ADD 2009/05/25 <<<

            try
            {
                #region SELECT文作成
                sqlText += "  SELECT" + Environment.NewLine;
                sqlText += "   STOCKHISTORYPAY.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "   STOCKHISTORYPAY.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "   WARE.WAREHOUSENAMERF," + Environment.NewLine;
                // 修正 2009/04/02 >>>
                //sqlText += "   STOCKHISTORYPAY.SECTIONCODERF," + Environment.NewLine;
                sqlText += "   '00' AS SECTIONCODERF," + Environment.NewLine;
                // 修正 2009/04/02 <<<
                sqlText += "   STOCKHISTORYPAY.GOODSNORF," + Environment.NewLine;
                sqlText += "   GOODS.GOODSNAMERF," + Environment.NewLine;
                sqlText += "   STOCKHISTORYPAY.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "   MAKER.MAKERNAMERF," + Environment.NewLine;
                sqlText += "   STOCKHIS.LMONTHSTOCKCNTRF,--前月末在庫数" + Environment.NewLine;
                sqlText += "   STOCKHIS.LMONTHSTOCKPRICERF,--前月末在庫額" + Environment.NewLine;
                sqlText += "   STOCKHIS.LMONTHPPTYSTOCKCNTRF,--前月末自社在庫数" + Environment.NewLine;
                sqlText += "   STOCKHIS.LMONTHPPTYSTOCKPRICERF,--前月末自社在庫金額  " + Environment.NewLine;
                sqlText += "   STOCKHACCNT.SALESTIMESRF,--売上回数" + Environment.NewLine;
                sqlText += "   STOCKHAC.SALESCOUNTRF,--売上数" + Environment.NewLine;
                sqlText += "   STOCKHAC.SALESMONEYTAXEXCRF,--売上金額（税抜き） " + Environment.NewLine;
                sqlText += "   STOCKHACCNT.SALESRETGOODSTIMESRF,--売上返品回数" + Environment.NewLine;
                sqlText += "   STOCKHAC.SALESRETGOODSCNTRF,--売上返品数" + Environment.NewLine;
                sqlText += "   STOCKHAC.SALESRETGOODSPRICERF,--売上返品額" + Environment.NewLine;
                sqlText += "   STOCKHAC.GROSSPROFITRF,--粗利金額" + Environment.NewLine;
                sqlText += "   STOCKHACCNT.STOCKTIMESRF,--仕入回数" + Environment.NewLine;
                sqlText += "   STOCKHAC.STOCKCOUNTRF,--仕入数  " + Environment.NewLine;
                sqlText += "   STOCKHAC.STOCKPRICETAXEXCRF,--仕入金額（税抜き） " + Environment.NewLine;
                sqlText += "   STOCKHACCNT.STOCKRETGOODSTIMESRF,--仕入返品回数" + Environment.NewLine;
                sqlText += "   STOCKHAC.STOCKRETGOODSCNTRF,--仕入返品数" + Environment.NewLine;
                sqlText += "   STOCKHAC.STOCKRETGOODSPRICERF,--仕入返品額 " + Environment.NewLine;
                sqlText += "   STOCKHAC.MOVEARRIVALCNTRF,--移動入荷数" + Environment.NewLine;
                sqlText += "   STOCKHAC.MOVEARRIVALPRICERF,--移動入荷額" + Environment.NewLine;
                sqlText += "   STOCKHAC.MOVESHIPMENTCNTRF,--移動出荷数" + Environment.NewLine;
                sqlText += "   STOCKHAC.MOVESHIPMENTPRICERF,--移動出荷額" + Environment.NewLine;
                sqlText += "   (STOCKHAC.ADJUSTCOUNTRF1 - STOCKHAC.ADJUSTCOUNTRF2) AS ADJUSTCOUNTRF,--調整数" + Environment.NewLine;
                sqlText += "   (STOCKHAC.ADJUSTPRICERF1 - STOCKHAC.ADJUSTPRICERF2) AS ADJUSTPRICERF,--調整金額" + Environment.NewLine;
                sqlText += "   STOCKHAC.ARRIVALCNTRF,--入荷数" + Environment.NewLine;
                sqlText += "   STOCKHAC.ARRIVALPRICERF,--入荷金額" + Environment.NewLine;
                sqlText += "   STOCKHAC.SHIPMENTCNTRF,--出荷数" + Environment.NewLine;
                sqlText += "   STOCKHAC.SHIPMENTPRICERF,--出荷金額" + Environment.NewLine;
                sqlText += "   STOCKHAC.TOTALARRIVALCNTRF,--総入荷数" + Environment.NewLine;
                sqlText += "   STOCKHAC.TOTALARRIVALPRICERF,--総入荷金額" + Environment.NewLine;
                sqlText += "   STOCKHAC.TOTALSHIPMENTCNTRF,--総出荷数" + Environment.NewLine;
                sqlText += "   STOCKHAC.TOTALSHIPMENTPRICERF,--総出荷金額   " + Environment.NewLine;
                // 修正 2009/04/24 >>>
                //sqlText += "   (CASE WHEN STPAYPRICE.STOCKUNITPRICEFLRF IS NOT NULL " + Environment.NewLine;
                //sqlText += "         THEN STPAYPRICE.STOCKUNITPRICEFLRF ELSE STOCKHIS.STOCKUNITPRICEFLRF END) AS STOCKUNITPRICEFLRF --仕入単価" + Environment.NewLine;
                sqlText += "   GOODS.BLGOODSCODERF,  -- BL商品コード" + Environment.NewLine;
                sqlText += "   BL.BLGOODSHALFNAMERF, -- BL商品コード名称（半角）" + Environment.NewLine;// ADD 2010/09/21
                sqlText += "   BL.BLGROUPCODERF, -- BLグループコード" + Environment.NewLine;
                sqlText += "   BLG.GOODSMGROUPRF, -- 商品中分類" + Environment.NewLine;
                // 修正 2009/04/24 <<<
                sqlText += "   STOCKMNGTTL.FRACTIONPROCCDRF -- 端数処理区分" + Environment.NewLine; // ADD 2009/05/25 

                // ---ADD 2010/09/17 ---------->>>>> 
                sqlText += "   ,STOCK.STOCKCREATEDATE -- 在庫登録日" + Environment.NewLine;
                sqlText += "   ,STOCK.LASTSALESDATE -- 最終売上日" + Environment.NewLine;
                sqlText += "   ,STOCK.LASTSTOCKDATE -- 最終仕入日" + Environment.NewLine;
                sqlText += "   ,STOCK.WAREHOUSESHELFNO -- 棚番" + Environment.NewLine;
                // ---ADD 2010/09/17 ---------->>>>>
                sqlText += "   ,STOCK.WAREHOUSECODE --倉庫コード" + Environment.NewLine; // ADD 2010/09/28
                sqlText += "  FROM" + Environment.NewLine;

                #region SUBクエリ

                #region 前月在庫履歴と在庫受払データから結合KEY情報取得
                sqlText += "  (" + Environment.NewLine;                
                sqlText += "    SELECT DISTINCT" + Environment.NewLine;
                sqlText += "     ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "     SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                sqlText += "     WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "     GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "     GOODSNORF" + Environment.NewLine;
                sqlText += "    FROM" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------->>>
                //sqlText += "     STOCKHISTORYRF" + Environment.NewLine;
                sqlText += "     STOCKHISTORYRF WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 -------------------------<<<
                sqlText += "    WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "     AND LOGICALDELETECODERF=0" + Environment.NewLine;
                sqlText += "     AND ADDUPYEARMONTHRF=@ADDUPYEARMONTH" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "     AND SECTIONCODERF=@FINDSECTIONCODE" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "    UNION SELECT DISTINCT" + Environment.NewLine;
                sqlText += "     ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "     SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                sqlText += "     WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "     GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "     GOODSNORF" + Environment.NewLine;
                sqlText += "    FROM" + Environment.NewLine;
                // -- UPD 2011/03/15 -------------------------->>>
                //sqlText += "     STOCKACPAYHISTRF " + Environment.NewLine;
                sqlText += "     STOCKACPAYHISTRF WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 --------------------------<<<
                sqlText += "    WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "     AND SECTIONCODERF=@FINDSECTIONCODE" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "     AND LOGICALDELETECODERF=0" + Environment.NewLine;
                // 修正 2009/07/06 >>>
                //sqlText += "     AND((ADDUPADATERF>@FINDADDUPDATEST  AND ADDUPADATERF<=@FINDADDUPDATEED)" + Environment.NewLine;
                //sqlText += "        OR(IOGOODSDAYRF>@FINDADDUPDATEST AND IOGOODSDAYRF<=@FINDADDUPDATEED))    " + Environment.NewLine;
                //sqlText += "     AND( ( CASE WHEN ADDUPADATERF IS NULL THEN IOGOODSDAYRF ELSE ADDUPADATERF END ) >@FINDADDUPDATEST  AND (CASE WHEN ADDUPADATERF IS NULL THEN IOGOODSDAYRF ELSE ADDUPADATERF END )   <=@FINDADDUPDATEED)" + Environment.NewLine;//DEL by Liangsd     2011/08/23
                sqlText += "     AND( ( CASE WHEN ADDUPADATERF IS NULL THEN IOGOODSDAYRF ELSE ADDUPADATERF END ) >= @FINDADDUPDATEST  AND (CASE WHEN ADDUPADATERF IS NULL THEN IOGOODSDAYRF ELSE ADDUPADATERF END )   <=@FINDADDUPDATEED)" + Environment.NewLine;//ADD by Liangsd     2011/08/23

                // 修正 2009/07/06 <<<
                sqlText += "  ) AS STOCKHISTORYPAY" + Environment.NewLine;
                #endregion

                // ADD 2009/05/25 >>>
                #region 在庫管理全体設定マスタ 結合
                sqlText += "  --在庫管理全体設定マスタ 結合" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------>>>
                //sqlText += "  LEFT JOIN STOCKMNGTTLSTRF AS STOCKMNGTTL " + Environment.NewLine;
                sqlText += "  LEFT JOIN STOCKMNGTTLSTRF AS STOCKMNGTTL WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------<<<
                sqlText += "   ON STOCKHISTORYPAY.ENTERPRISECODERF = STOCKMNGTTL.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "   AND STOCKMNGTTL.SECTIONCODERF = '00'" + Environment.NewLine;
                #endregion
                // ADD 2009/05/25 <<< 

                // ---ADD 2010/09/17---------->>>>>
                #region 在庫マスタ 結合
                sqlText += "  --在庫マスタ 結合" + Environment.NewLine;
                sqlText += "  LEFT JOIN ( " + Environment.NewLine;
                sqlText += "  SELECT " + Environment.NewLine;
                sqlText += "  ENTERPRISECODERF AS ENTERPRISECODE " + Environment.NewLine;
                sqlText += "  ,SECTIONCODERF AS SECTIONCODE " + Environment.NewLine;
                sqlText += "  ,WAREHOUSECODERF AS WAREHOUSECODE " + Environment.NewLine;
                sqlText += "  ,WAREHOUSESHELFNORF AS WAREHOUSESHELFNO " + Environment.NewLine;
                sqlText += "  ,GOODSMAKERCDRF AS GOODSMAKERCD " + Environment.NewLine;
                sqlText += "  ,GOODSNORF AS GOODSNO " + Environment.NewLine;
                sqlText += "  ,STOCKSUPPLIERCODERF AS STOCKSUPPLIERCODE " + Environment.NewLine;
                sqlText += "  ,STOCKCREATEDATERF AS STOCKCREATEDATE " + Environment.NewLine;
                sqlText += "  ,LASTSALESDATERF AS LASTSALESDATE " + Environment.NewLine;
                sqlText += "  ,LASTSTOCKDATERF AS LASTSTOCKDATE " + Environment.NewLine;
                sqlText += "  FROM " + Environment.NewLine;
                // -- UPD 2011/03/15 -------------------------------->>>
                //sqlText += "  STOCKRF " + Environment.NewLine;
                sqlText += "  STOCKRF WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 --------------------------------<<<
                sqlText += "  WHERE " + Environment.NewLine;
                sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "  AND LOGICALDELETECODERF=0 " + Environment.NewLine;
                sqlText += "  ) AS STOCK " + Environment.NewLine;
                sqlText += "  ON " + Environment.NewLine;
                sqlText += "  STOCKHISTORYPAY.ENTERPRISECODERF = STOCK.ENTERPRISECODE " + Environment.NewLine;
                sqlText += "  AND STOCKHISTORYPAY.WAREHOUSECODERF = STOCK.WAREHOUSECODE " + Environment.NewLine;
                sqlText += "  AND STOCKHISTORYPAY.GOODSMAKERCDRF = STOCK.GOODSMAKERCD " + Environment.NewLine;
                sqlText += "  AND STOCKHISTORYPAY.GOODSNORF = STOCK.GOODSNO  " + Environment.NewLine;
                #endregion
                // ---ADD 2010/09/17----------<<<<< 


                #region 在庫受払データ集計情報 結合
                sqlText += "  LEFT JOIN " + Environment.NewLine;
                sqlText += "  ( " + Environment.NewLine;
                #region DEL 2009/06/02 
                /*
                sqlText += "   SELECT" + Environment.NewLine;
                sqlText += "    STPAY.ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "    STPAY.SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                sqlText += "    STPAY.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "    STPAY.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "    STPAY.GOODSNORF," + Environment.NewLine;
                //sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND STPAY.ACPAYTRANSCDRF=10 ) THEN 1 ELSE 0 END) AS SALESTIMESRF,--売上回数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND STPAY.ACPAYTRANSCDRF=10 ) THEN STPAY.SHIPMENTCNTRF ELSE 0 END) AS SALESCOUNTRF,--売上数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND STPAY.ACPAYTRANSCDRF=10 ) THEN STPAY.SALESMONEYRF ELSE 0 END) AS SALESMONEYTAXEXCRF,--売上金額（税抜き） " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20) ) THEN 1 ELSE 0 END) AS SALESRETGOODSTIMESRF,--売上返品回数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20) ) THEN STPAY.SHIPMENTCNTRF ELSE 0 END) AS SALESRETGOODSCNTRF,--売上返品数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20) ) THEN STPAY.SALESMONEYRF ELSE 0 END) AS SALESRETGOODSPRICERF,--売上返品額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=10 OR STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20) ) THEN (STPAY.SALESMONEYRF - STPAY.STOCKPRICERF) ELSE 0 END) AS GROSSPROFITRF,--粗利金額" + Environment.NewLine;
                //sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 AND STPAY.ACPAYTRANSCDRF=10 ) THEN 1 ELSE 0 END) AS STOCKTIMESRF,--仕入回数" + Environment.NewLine;
                // 修正 2009.03.27 >>>
                //sqlText += "    SUM(CASE WHEN ((STPAY.ACPAYSLIPCDRF=10 OR STPAY.ACPAYSLIPCDRF=13) AND STPAY.ACPAYTRANSCDRF=10 ) THEN STPAY.ARRIVALCNTRF ELSE 0 END) AS STOCKCOUNTRF,--仕入数  " + Environment.NewLine;
                //sqlText += "    SUM(CASE WHEN ((STPAY.ACPAYSLIPCDRF=10 OR STPAY.ACPAYSLIPCDRF=13) AND STPAY.ACPAYTRANSCDRF=10 ) THEN STPAY.STOCKPRICERF ELSE 0 END) AS STOCKPRICETAXEXCRF,--仕入金額（税抜き） " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN ((STPAY.ACPAYSLIPCDRF=10 AND STPAY.ACPAYTRANSCDRF=10)OR(STPAY.ACPAYSLIPCDRF=13 AND (STPAY.ACPAYTRANSCDRF=10 OR STPAY.ACPAYTRANSCDRF=30)) ) THEN STPAY.ARRIVALCNTRF ELSE 0 END) AS STOCKCOUNTRF,--仕入数  " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN ((STPAY.ACPAYSLIPCDRF=10 AND STPAY.ACPAYTRANSCDRF=10)OR(STPAY.ACPAYSLIPCDRF=13 AND (STPAY.ACPAYTRANSCDRF=10 OR STPAY.ACPAYTRANSCDRF=30)) ) THEN STPAY.STOCKPRICERF ELSE 0 END) AS STOCKPRICETAXEXCRF,--仕入金額（税抜き） " + Environment.NewLine;
                // 修正 2009.03.27 <<<
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20) ) THEN 1 ELSE 0 END) AS STOCKRETGOODSTIMESRF,--仕入返品回数  " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20) ) THEN STPAY.ARRIVALCNTRF ELSE 0 END) AS STOCKRETGOODSCNTRF,--仕入返品数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20) ) THEN STPAY.STOCKPRICERF ELSE 0 END) AS STOCKRETGOODSPRICERF,--仕入返品額 " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=31) THEN STPAY.ARRIVALCNTRF ELSE 0 END) AS MOVEARRIVALCNTRF,--移動入荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=31) THEN STPAY.STOCKPRICERF ELSE 0 END) AS MOVEARRIVALPRICERF,--移動入荷額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=30) THEN STPAY.SHIPMENTCNTRF ELSE 0 END) AS MOVESHIPMENTCNTRF,--移動出荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=30) THEN STPAY.SALESMONEYRF ELSE 0 END) AS MOVESHIPMENTPRICERF,--移動出荷額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=42 OR STPAY.ACPAYSLIPCDRF=50 OR " + Environment.NewLine;
                sqlText += "                   STPAY.ACPAYSLIPCDRF=60 OR STPAY.ACPAYSLIPCDRF=61 OR STPAY.ACPAYSLIPCDRF=70) THEN STPAY.ARRIVALCNTRF ELSE 0 END) AS ADJUSTCOUNTRF1,--調整数1" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=71) THEN STPAY.SHIPMENTCNTRF ELSE 0 END) AS ADJUSTCOUNTRF2,--調整数2" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=42 OR STPAY.ACPAYSLIPCDRF=50 OR " + Environment.NewLine;
                sqlText += "                   STPAY.ACPAYSLIPCDRF=60 OR STPAY.ACPAYSLIPCDRF=61 OR STPAY.ACPAYSLIPCDRF=70) THEN STPAY.STOCKPRICERF ELSE 0 END) AS ADJUSTPRICERF1,--調整金額1" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=71) THEN STPAY.SALESMONEYRF ELSE 0 END) AS ADJUSTPRICERF2,--調整金額2  " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=11) THEN STPAY.ARRIVALCNTRF ELSE 0 END) AS ARRIVALCNTRF,--入荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=11) THEN STPAY.STOCKPRICERF ELSE 0 END) AS ARRIVALPRICERF,--入荷金額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=22) THEN STPAY.SHIPMENTCNTRF ELSE 0 END) AS SHIPMENTCNTRF,--出荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=22) THEN STPAY.SALESMONEYRF ELSE 0 END) AS SHIPMENTPRICERF,--出荷金額" + Environment.NewLine;
                //sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 OR STPAY.ACPAYSLIPCDRF=11 OR STPAY.ACPAYSLIPCDRF=31) THEN STPAY.ARRIVALCNTRF ELSE 0 END) AS TOTALARRIVALCNTRF,--総入荷数" + Environment.NewLine;
                //sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 OR STPAY.ACPAYSLIPCDRF=11 OR STPAY.ACPAYSLIPCDRF=31) THEN STPAY.STOCKPRICERF ELSE 0 END) AS TOTALARRIVALPRICERF,--総入荷金額" + Environment.NewLine;
                // 修正 2009/06/01 >>>
                //sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 OR STPAY.ACPAYSLIPCDRF=11 OR STPAY.ACPAYSLIPCDRF=13 OR STPAY.ACPAYSLIPCDRF=31) THEN STPAY.ARRIVALCNTRF ELSE 0 END) AS TOTALARRIVALCNTRF,--総入荷数" + Environment.NewLine;
                //sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 OR STPAY.ACPAYSLIPCDRF=11 OR STPAY.ACPAYSLIPCDRF=13 OR STPAY.ACPAYSLIPCDRF=31) THEN STPAY.STOCKPRICERF ELSE 0 END) AS TOTALARRIVALPRICERF,--総入荷金額" + Environment.NewLine;
                //sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 OR STPAY.ACPAYSLIPCDRF=22 OR STPAY.ACPAYSLIPCDRF=30) THEN STPAY.SHIPMENTCNTRF ELSE 0 END) AS TOTALSHIPMENTCNTRF,--総出荷数" + Environment.NewLine;
                //sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 OR STPAY.ACPAYSLIPCDRF=22 OR STPAY.ACPAYSLIPCDRF=30) THEN STPAY.SALESMONEYRF ELSE 0 END) AS TOTALSHIPMENTPRICERF --総出荷金額 " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 OR STPAY.ACPAYSLIPCDRF=11 OR STPAY.ACPAYSLIPCDRF=13 OR STPAY.ACPAYSLIPCDRF=31) THEN STPAY.ARRIVALCNT2RF ELSE 0 END) AS TOTALARRIVALCNTRF,--総入荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 OR STPAY.ACPAYSLIPCDRF=11 OR STPAY.ACPAYSLIPCDRF=13 OR STPAY.ACPAYSLIPCDRF=31) THEN STPAY.STOCKPRICE2RF ELSE 0 END) AS TOTALARRIVALPRICERF,--総入荷金額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 OR STPAY.ACPAYSLIPCDRF=22 OR STPAY.ACPAYSLIPCDRF=30) THEN STPAY.SHIPMENTCNT2RF ELSE 0 END) AS TOTALSHIPMENTCNTRF,--総出荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 OR STPAY.ACPAYSLIPCDRF=22 OR STPAY.ACPAYSLIPCDRF=30) THEN STPAY.SALESMONEY2RF ELSE 0 END) AS TOTALSHIPMENTPRICERF --総出荷金額 " + Environment.NewLine;
                // 修正 2009/06/01 <<<
                sqlText += "   FROM" + Environment.NewLine;
                sqlText += "   (" + Environment.NewLine;
                // ADD 2009/06/01 >>>
                sqlText += "     SELECT" + Environment.NewLine;
                sqlText += "      STOCKAC.LOGICALDELETECODERF," + Environment.NewLine;
                sqlText += "      STOCKAC.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "      STOCKAC.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "      STOCKAC.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "      STOCKAC.GOODSNORF," + Environment.NewLine;
                sqlText += "      STOCKAC.ACPAYSLIPNUMRF, --受払元伝票番号" + Environment.NewLine;
                sqlText += "      STOCKAC.ACPAYSLIPCDRF,  --受払元伝票区分" + Environment.NewLine;
                sqlText += "      STOCKAC.ACPAYTRANSCDRF, --受払元取引区分" + Environment.NewLine;
                sqlText += "      STOCKAC.ARRIVALCNTRF + (CASE WHEN DELSTOCKACPAYHIST.ARRIVALCNTRF IS NULL THEN 0 ELSE DELSTOCKACPAYHIST.ARRIVALCNTRF END) AS ARRIVALCNTRF ,   --入荷数" + Environment.NewLine;
                sqlText += "      STOCKAC.SHIPMENTCNTRF+ (CASE WHEN DELSTOCKACPAYHIST.SHIPMENTCNTRF IS NULL THEN 0 ELSE DELSTOCKACPAYHIST.SHIPMENTCNTRF END) AS SHIPMENTCNTRF,  --出荷数" + Environment.NewLine;
                sqlText += "      STOCKAC.STOCKPRICERF + (CASE WHEN DELSTOCKACPAYHIST.STOCKPRICERF IS NULL THEN 0 ELSE DELSTOCKACPAYHIST.STOCKPRICERF END) AS STOCKPRICERF,   --仕入金額" + Environment.NewLine;
                sqlText += "      STOCKAC.SALESMONEYRF + (CASE WHEN DELSTOCKACPAYHIST.SALESMONEYRF IS NULL THEN 0 ELSE DELSTOCKACPAYHIST.SALESMONEYRF END) AS SALESMONEYRF,    --売上金額     " + Environment.NewLine;
                sqlText += "      STOCKAC.ARRIVALCNT2RF + (CASE WHEN DELSTOCKACPAYHIST.ARRIVALCNTRF IS NULL THEN 0 ELSE DELSTOCKACPAYHIST.ARRIVALCNTRF END) AS ARRIVALCNT2RF ,   --総入荷数" + Environment.NewLine;
                sqlText += "      STOCKAC.SHIPMENTCNT2RF+ (CASE WHEN DELSTOCKACPAYHIST.SHIPMENTCNTRF IS NULL THEN 0 ELSE DELSTOCKACPAYHIST.SHIPMENTCNTRF END) AS SHIPMENTCNT2RF, --総出荷数" + Environment.NewLine;
                sqlText += "      STOCKAC.STOCKPRICE2RF + (CASE WHEN DELSTOCKACPAYHIST.STOCKPRICERF IS NULL THEN 0 ELSE DELSTOCKACPAYHIST.STOCKPRICERF END) AS STOCKPRICE2RF,    --総仕入金額" + Environment.NewLine;
                sqlText += "      STOCKAC.SALESMONEY2RF + (CASE WHEN DELSTOCKACPAYHIST.SALESMONEYRF IS NULL THEN 0 ELSE DELSTOCKACPAYHIST.SALESMONEYRF END) AS SALESMONEY2RF     --総売上金額     " + Environment.NewLine;
                sqlText += "     FROM" + Environment.NewLine;
                sqlText += "     (   " + Environment.NewLine;
                // ADD 2009/06/01 <<<


                sqlText += "     SELECT" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.LOGICALDELETECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "      STOCKACPAYHIST.SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                sqlText += "      STOCKACPAYHIST.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSNORF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPNUMRF, --受払元伝票番号" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPCDRF,  --受払元伝票区分" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYTRANSCDRF, --受払元取引区分" + Environment.NewLine;
                // 修正 2009/06/01 >>>
                //sqlText += "      SUM(STOCKACPAYHIST.ARRIVALCNTRF) + (CASE WHEN DELSTOCKACPAYHIST.ARRIVALCNTRF IS NULL THEN 0 ELSE DELSTOCKACPAYHIST.ARRIVALCNTRF END) AS ARRIVALCNTRF ,   --入荷数" + Environment.NewLine;
                //sqlText += "      SUM(STOCKACPAYHIST.SHIPMENTCNTRF)+ (CASE WHEN DELSTOCKACPAYHIST.SHIPMENTCNTRF IS NULL THEN 0 ELSE DELSTOCKACPAYHIST.SHIPMENTCNTRF END) AS SHIPMENTCNTRF,  --出荷数" + Environment.NewLine;
                //sqlText += "      SUM(STOCKACPAYHIST.STOCKPRICERF) + (CASE WHEN DELSTOCKACPAYHIST.STOCKPRICERF IS NULL THEN 0 ELSE DELSTOCKACPAYHIST.STOCKPRICERF END) AS STOCKPRICERF,   --仕入金額" + Environment.NewLine;
                //sqlText += "      SUM(STOCKACPAYHIST.SALESMONEYRF) + (CASE WHEN DELSTOCKACPAYHIST.SALESMONEYRF IS NULL THEN 0 ELSE DELSTOCKACPAYHIST.SALESMONEYRF END) AS SALESMONEYRF    --売上金額" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.ARRIVALCNTRF) AS ARRIVALCNTRF ,   --入荷数" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.SHIPMENTCNTRF) AS SHIPMENTCNTRF,  --出荷数" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.STOCKPRICERF) AS STOCKPRICERF,   --仕入金額" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.SALESMONEYRF) AS SALESMONEYRF,    --売上金額" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 10 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.ARRIVALCNTRF END)) AS ARRIVALCNT2RF,   --総合計用入荷数" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 20 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.SHIPMENTCNTRF END))AS SHIPMENTCNT2RF,  --総合計用出荷数" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 10 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.STOCKPRICERF END)) AS STOCKPRICE2RF,   --総合計用仕入金額" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 20 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.SALESMONEYRF END)) AS SALESMONEY2RF   --総合計用売上金額" + Environment.NewLine;

                // 修正 2009/06/01 <<<

                sqlText += "     FROM" + Environment.NewLine;
                sqlText += "      STOCKACPAYHISTRF AS STOCKACPAYHIST" + Environment.NewLine;
                // ADD 2009/06/01 >>>
                sqlText += "     WHERE STOCKACPAYHIST.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "      AND STOCKACPAYHIST.SECTIONCODERF=@FINDSECTIONCODE" + Environment.NewLine;
                }
                sqlText += "      AND STOCKACPAYHIST.LOGICALDELETECODERF=0" + Environment.NewLine;
                sqlText += "      AND((STOCKACPAYHIST.ADDUPADATERF>@FINDADDUPDATEST  AND STOCKACPAYHIST.ADDUPADATERF<=@FINDADDUPDATEED)" + Environment.NewLine;
                sqlText += "        OR(STOCKACPAYHIST.IOGOODSDAYRF>@FINDADDUPDATEST AND STOCKACPAYHIST.IOGOODSDAYRF<=@FINDADDUPDATEED))" + Environment.NewLine;
                sqlText += "      AND STOCKACPAYHIST.ACPAYTRANSCDRF != 21" + Environment.NewLine;
                sqlText += "     GROUP BY" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.LOGICALDELETECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSNORF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPNUMRF, --受払元伝票番号" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPCDRF,  --受払元伝票区分" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYTRANSCDRF --受払元取引区分" + Environment.NewLine;
                sqlText += "      )  AS STOCKAC" + Environment.NewLine;
                // ADD 2009/06/01 <<<
                // ADD 2009.03.27 >>>
                sqlText += "     LEFT JOIN" + Environment.NewLine;
                sqlText += "      (" + Environment.NewLine;
                sqlText += "        SELECT" + Environment.NewLine;
                sqlText += "         LOGICALDELETECODERF," + Environment.NewLine;
                sqlText += "         ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "         SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                sqlText += "         WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "         GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "         GOODSNORF," + Environment.NewLine;
                sqlText += "         ACPAYSLIPNUMRF, --受払元伝票番号" + Environment.NewLine;
                sqlText += "         ACPAYSLIPCDRF,  --受払元伝票区分" + Environment.NewLine;
                sqlText += "         ACPAYTRANSCDRF, --受払元取引区分" + Environment.NewLine;
                sqlText += "         ARRIVALCNTRF,   --入荷数" + Environment.NewLine;
                sqlText += "         SHIPMENTCNTRF,  --出荷数" + Environment.NewLine;
                sqlText += "         STOCKPRICERF,   --仕入金額" + Environment.NewLine;
                sqlText += "         SALESMONEYRF    --売上金額" + Environment.NewLine;
                sqlText += "        FROM" + Environment.NewLine;
                sqlText += "         STOCKACPAYHISTRF" + Environment.NewLine;
                sqlText += "        WHERE" + Environment.NewLine;
                sqlText += "         ACPAYTRANSCDRF = 21" + Environment.NewLine;
                sqlText += "      ) AS DELSTOCKACPAYHIST" + Environment.NewLine;
                // 修正 2009/06/01 >>>
                //sqlText += "      ON  STOCKACPAYHIST.ENTERPRISECODERF = DELSTOCKACPAYHIST.ENTERPRISECODERF" + Environment.NewLine;
                ////sqlText += "      AND STOCKACPAYHIST.SECTIONCODERF = DELSTOCKACPAYHIST.SECTIONCODERF" + Environment.NewLine; // DEL 2009/04/02
                //sqlText += "      AND STOCKACPAYHIST.WAREHOUSECODERF = DELSTOCKACPAYHIST.WAREHOUSECODERF" + Environment.NewLine;
                //sqlText += "      AND STOCKACPAYHIST.GOODSMAKERCDRF = DELSTOCKACPAYHIST.GOODSMAKERCDRF " + Environment.NewLine;
                //sqlText += "      AND STOCKACPAYHIST.GOODSNORF = DELSTOCKACPAYHIST.GOODSNORF" + Environment.NewLine;
                //sqlText += "      AND STOCKACPAYHIST.ACPAYSLIPNUMRF = DELSTOCKACPAYHIST.ACPAYSLIPNUMRF" + Environment.NewLine;

                sqlText += "      ON  STOCKAC.ENTERPRISECODERF = DELSTOCKACPAYHIST.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "      AND STOCKAC.WAREHOUSECODERF = DELSTOCKACPAYHIST.WAREHOUSECODERF" + Environment.NewLine;
                sqlText += "      AND STOCKAC.GOODSMAKERCDRF = DELSTOCKACPAYHIST.GOODSMAKERCDRF " + Environment.NewLine;
                sqlText += "      AND STOCKAC.GOODSNORF = DELSTOCKACPAYHIST.GOODSNORF" + Environment.NewLine;
                sqlText += "      AND STOCKAC.ACPAYSLIPNUMRF = DELSTOCKACPAYHIST.ACPAYSLIPNUMRF" + Environment.NewLine;

                // 修正 2009/06/01 <<<

                // ADD 2009.03.27 <<<
                // DEL 2009/06/01 >>>
                //sqlText += "     WHERE STOCKACPAYHIST.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                //// 修正 2009/04/02 全拠点締対応 >>>
                //if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                //{
                //    sqlText += "      AND STOCKACPAYHIST.SECTIONCODERF=@FINDSECTIONCODE" + Environment.NewLine;
                //}
                //// 修正 2009/04/02 <<<
                //sqlText += "      AND STOCKACPAYHIST.LOGICALDELETECODERF=0" + Environment.NewLine;
                //sqlText += "      AND((STOCKACPAYHIST.ADDUPADATERF>@FINDADDUPDATEST  AND STOCKACPAYHIST.ADDUPADATERF<=@FINDADDUPDATEED)" + Environment.NewLine;
                //sqlText += "        OR(STOCKACPAYHIST.IOGOODSDAYRF>@FINDADDUPDATEST AND STOCKACPAYHIST.IOGOODSDAYRF<=@FINDADDUPDATEED))" + Environment.NewLine;
                //sqlText += "      AND STOCKACPAYHIST.ACPAYTRANSCDRF != 21" + Environment.NewLine;
                //sqlText += "     GROUP BY" + Environment.NewLine;
                //sqlText += "      STOCKACPAYHIST.LOGICALDELETECODERF," + Environment.NewLine;
                //sqlText += "      STOCKACPAYHIST.ENTERPRISECODERF," + Environment.NewLine;
                ////sqlText += "      STOCKACPAYHIST.SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                //sqlText += "      STOCKACPAYHIST.WAREHOUSECODERF," + Environment.NewLine;
                //sqlText += "      STOCKACPAYHIST.GOODSMAKERCDRF," + Environment.NewLine;
                //sqlText += "      STOCKACPAYHIST.GOODSNORF," + Environment.NewLine;
                //sqlText += "      STOCKACPAYHIST.ACPAYSLIPNUMRF, --受払元伝票番号" + Environment.NewLine;
                //sqlText += "      STOCKACPAYHIST.ACPAYSLIPCDRF,  --受払元伝票区分" + Environment.NewLine;
                //sqlText += "      STOCKACPAYHIST.ACPAYTRANSCDRF, --受払元取引区分" + Environment.NewLine;
                //sqlText += "      DELSTOCKACPAYHIST.ARRIVALCNTRF ,   --入荷数" + Environment.NewLine;
                //sqlText += "      DELSTOCKACPAYHIST.SHIPMENTCNTRF,  --出荷数" + Environment.NewLine;
                //sqlText += "      DELSTOCKACPAYHIST.STOCKPRICERF,   --仕入金額" + Environment.NewLine;
                //sqlText += "      DELSTOCKACPAYHIST.SALESMONEYRF    --売上金額 " + Environment.NewLine;
                // DEL 2009/06/01 <<<
                sqlText += "    )AS STPAY" + Environment.NewLine;
                sqlText += "    GROUP  BY" + Environment.NewLine;
                sqlText += "     STPAY.ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "     STPAY.SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                sqlText += "     STPAY.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "     STPAY.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "     STPAY.GOODSNORF " + Environment.NewLine;
                */
                #endregion
                // ADD 2009/06/02 >>>
                #region DEL 
                /*
                sqlText += "   SELECT" + Environment.NewLine;
                sqlText += "    STPAY.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "    STPAY.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "    STPAY.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "    STPAY.GOODSNORF," + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=10 OR STPAY.ACPAYTRANSCDRF=21 ) ) THEN STPAY.SHIPMENTCNTRF ELSE 0 END) AS SALESCOUNTRF,--売上数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=10 OR STPAY.ACPAYTRANSCDRF=21) ) THEN STPAY.SALESMONEYRF ELSE 0 END) AS SALESMONEYTAXEXCRF,--売上金額（税抜き） " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20 OR STPAY.ACPAYTRANSCDRF=21) ) THEN 1 ELSE 0 END) AS SALESRETGOODSTIMESRF,--売上返品回数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20 OR STPAY.ACPAYTRANSCDRF=21) ) THEN STPAY.SHIPMENTCNTRF ELSE 0 END) AS SALESRETGOODSCNTRF,--売上返品数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20 OR STPAY.ACPAYTRANSCDRF=21) ) THEN STPAY.SALESMONEYRF ELSE 0 END) AS SALESRETGOODSPRICERF,--売上返品額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=10 OR STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20 OR STPAY.ACPAYTRANSCDRF=21) ) THEN (STPAY.SALESMONEYRF - STPAY.STOCKPRICERF) ELSE 0 END) AS GROSSPROFITRF,--粗利金額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN ((STPAY.ACPAYSLIPCDRF=10 AND (STPAY.ACPAYTRANSCDRF=10 OR STPAY.ACPAYTRANSCDRF=21))OR(STPAY.ACPAYSLIPCDRF=13 AND (STPAY.ACPAYTRANSCDRF=10 OR STPAY.ACPAYTRANSCDRF=30 OR STPAY.ACPAYTRANSCDRF=21)) ) THEN STPAY.ARRIVALCNTRF ELSE 0 END) AS STOCKCOUNTRF,--仕入数  " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN ((STPAY.ACPAYSLIPCDRF=10 AND (STPAY.ACPAYTRANSCDRF=10 OR STPAY.ACPAYTRANSCDRF=21))OR(STPAY.ACPAYSLIPCDRF=13 AND (STPAY.ACPAYTRANSCDRF=10 OR STPAY.ACPAYTRANSCDRF=30 OR STPAY.ACPAYTRANSCDRF=21)) ) THEN STPAY.STOCKPRICERF ELSE 0 END) AS STOCKPRICETAXEXCRF,--仕入金額（税抜き） " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20 OR STPAY.ACPAYTRANSCDRF=21)) THEN 1 ELSE 0 END) AS STOCKRETGOODSTIMESRF,--仕入返品回数  " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20 OR STPAY.ACPAYTRANSCDRF=21) ) THEN STPAY.ARRIVALCNTRF ELSE 0 END) AS STOCKRETGOODSCNTRF,--仕入返品数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20 OR STPAY.ACPAYTRANSCDRF=21) ) THEN STPAY.STOCKPRICERF ELSE 0 END) AS STOCKRETGOODSPRICERF,--仕入返品額 " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=31) THEN STPAY.ARRIVALCNTRF ELSE 0 END) AS MOVEARRIVALCNTRF,--移動入荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=31) THEN STPAY.STOCKPRICERF ELSE 0 END) AS MOVEARRIVALPRICERF,--移動入荷額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=30) THEN STPAY.SHIPMENTCNTRF ELSE 0 END) AS MOVESHIPMENTCNTRF,--移動出荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=30) THEN STPAY.SALESMONEYRF ELSE 0 END) AS MOVESHIPMENTPRICERF,--移動出荷額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=42 OR STPAY.ACPAYSLIPCDRF=50 OR " + Environment.NewLine;
                sqlText += "                   STPAY.ACPAYSLIPCDRF=60 OR STPAY.ACPAYSLIPCDRF=61 OR STPAY.ACPAYSLIPCDRF=70) THEN STPAY.ARRIVALCNTRF ELSE 0 END) AS ADJUSTCOUNTRF1,--調整数1" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=71) THEN STPAY.SHIPMENTCNTRF ELSE 0 END) AS ADJUSTCOUNTRF2,--調整数2" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=42 OR STPAY.ACPAYSLIPCDRF=50 OR " + Environment.NewLine;
                sqlText += "                   STPAY.ACPAYSLIPCDRF=60 OR STPAY.ACPAYSLIPCDRF=61 OR STPAY.ACPAYSLIPCDRF=70) THEN STPAY.STOCKPRICERF ELSE 0 END) AS ADJUSTPRICERF1,--調整金額1" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=71) THEN STPAY.SALESMONEYRF ELSE 0 END) AS ADJUSTPRICERF2,--調整金額2  " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=11) THEN STPAY.ARRIVALCNTRF ELSE 0 END) AS ARRIVALCNTRF,--入荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=11) THEN STPAY.STOCKPRICERF ELSE 0 END) AS ARRIVALPRICERF,--入荷金額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=22) THEN STPAY.SHIPMENTCNTRF ELSE 0 END) AS SHIPMENTCNTRF,--出荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=22) THEN STPAY.SALESMONEYRF ELSE 0 END) AS SHIPMENTPRICERF,--出荷金額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 OR STPAY.ACPAYSLIPCDRF=11 OR STPAY.ACPAYSLIPCDRF=13 OR STPAY.ACPAYSLIPCDRF=31) THEN STPAY.ARRIVALCNT2RF ELSE 0 END) AS TOTALARRIVALCNTRF,--総入荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 OR STPAY.ACPAYSLIPCDRF=11 OR STPAY.ACPAYSLIPCDRF=13 OR STPAY.ACPAYSLIPCDRF=31) THEN STPAY.STOCKPRICE2RF ELSE 0 END) AS TOTALARRIVALPRICERF,--総入荷金額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 OR STPAY.ACPAYSLIPCDRF=22 OR STPAY.ACPAYSLIPCDRF=30) THEN STPAY.SHIPMENTCNT2RF ELSE 0 END) AS TOTALSHIPMENTCNTRF,--総出荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 OR STPAY.ACPAYSLIPCDRF=22 OR STPAY.ACPAYSLIPCDRF=30) THEN STPAY.SALESMONEY2RF ELSE 0 END) AS TOTALSHIPMENTPRICERF --総出荷金額 " + Environment.NewLine;
                sqlText += "   FROM" + Environment.NewLine;
                sqlText += "   (" + Environment.NewLine;
                sqlText += "     SELECT" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.LOGICALDELETECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSNORF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPNUMRF, --受払元伝票番号" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPCDRF,  --受払元伝票区分" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYTRANSCDRF, --受払元取引区分" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.ARRIVALCNTRF) AS ARRIVALCNTRF ,   --入荷数" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.SHIPMENTCNTRF) AS SHIPMENTCNTRF,  --出荷数" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.STOCKPRICERF) AS STOCKPRICERF,   --仕入金額" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.SALESMONEYRF) AS SALESMONEYRF,    --売上金額" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 10 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.ARRIVALCNTRF END)) AS ARRIVALCNT2RF,   --総合計用入荷数" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 20 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.SHIPMENTCNTRF END))AS SHIPMENTCNT2RF,  --総合計用出荷数" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 10 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.STOCKPRICERF END)) AS STOCKPRICE2RF,   --総合計用仕入金額" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 20 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.SALESMONEYRF END)) AS SALESMONEY2RF   --総合計用売上金額" + Environment.NewLine;
                sqlText += "     FROM" + Environment.NewLine;
                sqlText += "      STOCKACPAYHISTRF AS STOCKACPAYHIST" + Environment.NewLine;
                sqlText += "      WHERE STOCKACPAYHIST.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "      AND STOCKACPAYHIST.SECTIONCODERF=@FINDSECTIONCODE" + Environment.NewLine;
                }
                sqlText += "      AND STOCKACPAYHIST.LOGICALDELETECODERF=0" + Environment.NewLine;
                sqlText += "      AND((STOCKACPAYHIST.ADDUPADATERF>@FINDADDUPDATEST  AND STOCKACPAYHIST.ADDUPADATERF<=@FINDADDUPDATEED)" + Environment.NewLine;
                sqlText += "        OR(STOCKACPAYHIST.IOGOODSDAYRF>@FINDADDUPDATEST AND STOCKACPAYHIST.IOGOODSDAYRF<=@FINDADDUPDATEED))" + Environment.NewLine;
                sqlText += "     GROUP BY" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.LOGICALDELETECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSNORF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPNUMRF, --受払元伝票番号" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPCDRF,  --受払元伝票区分" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYTRANSCDRF --受払元取引区分" + Environment.NewLine;
                sqlText += "    )AS STPAY" + Environment.NewLine;
                sqlText += "    GROUP  BY" + Environment.NewLine;
                sqlText += "     STPAY.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "     STPAY.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "     STPAY.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "     STPAY.GOODSNORF" + Environment.NewLine;
                // ADD 2009/06/02 <<<
                */
                #endregion 
                sqlText += "   SELECT" + Environment.NewLine;
                sqlText += "    STPAY.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "    STPAY.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "    STPAY.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "    STPAY.GOODSNORF," + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=10  ) ) THEN STPAY.SHIPMENTCNTRF + STPAY.DELSHIPMENTCNTRF ELSE 0 END) AS SALESCOUNTRF,--売上数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=10 ) ) THEN STPAY.SALESMONEYRF + STPAY.DELSALESMONEYRF ELSE 0 END) AS SALESMONEYTAXEXCRF,--売上金額（税抜き）" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20 ) ) THEN 1 ELSE 0 END) AS SALESRETGOODSTIMESRF,--売上返品回数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20 ) ) THEN STPAY.SHIPMENTCNTRF + STPAY.DELSHIPMENTCNTRF ELSE 0 END) AS SALESRETGOODSCNTRF,--売上返品数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20 ) ) THEN STPAY.SALESMONEYRF + STPAY.DELSALESMONEYRF ELSE 0 END) AS SALESRETGOODSPRICERF,--売上返品額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 AND (STPAY.ACPAYTRANSCDRF=10 OR STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20 ) ) THEN ((STPAY.SALESMONEYRF+STPAY.DELSALESMONEYRF) - (STPAY.STOCKPRICERF +STPAY.DELSTOCKPRICERF)) ELSE 0 END) AS GROSSPROFITRF,--粗利金額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN ((STPAY.ACPAYSLIPCDRF=10 AND (STPAY.ACPAYTRANSCDRF=10 OR STPAY.ACPAYTRANSCDRF=21))OR(STPAY.ACPAYSLIPCDRF=13 AND (STPAY.ACPAYTRANSCDRF=10 OR STPAY.ACPAYTRANSCDRF=30)) ) THEN STPAY.ARRIVALCNTRF+STPAY.DELARRIVALCNTRF ELSE 0 END) AS STOCKCOUNTRF,--仕入数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN ((STPAY.ACPAYSLIPCDRF=10 AND (STPAY.ACPAYTRANSCDRF=10 OR STPAY.ACPAYTRANSCDRF=21))OR(STPAY.ACPAYSLIPCDRF=13 AND (STPAY.ACPAYTRANSCDRF=10 OR STPAY.ACPAYTRANSCDRF=30)) ) THEN STPAY.STOCKPRICERF+STPAY.DELSTOCKPRICERF ELSE 0 END) AS STOCKPRICETAXEXCRF,--仕入金額（税抜き）" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20 OR STPAY.ACPAYTRANSCDRF=21)) THEN 1 ELSE 0 END) AS STOCKRETGOODSTIMESRF,--仕入返品回数  " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20) ) THEN STPAY.ARRIVALCNTRF+STPAY.DELARRIVALCNTRF ELSE 0 END) AS STOCKRETGOODSCNTRF,--仕入返品数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 AND (STPAY.ACPAYTRANSCDRF=11 OR STPAY.ACPAYTRANSCDRF=20) ) THEN STPAY.STOCKPRICERF+STPAY.DELSTOCKPRICERF ELSE 0 END) AS STOCKRETGOODSPRICERF,--仕入返品額 " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=31) THEN STPAY.ARRIVALCNTRF + STPAY.DELARRIVALCNTRF ELSE 0 END) AS MOVEARRIVALCNTRF,--移動入荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=31) THEN STPAY.STOCKPRICERF + STPAY.DELSTOCKPRICERF ELSE 0 END) AS MOVEARRIVALPRICERF,--移動入荷額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=30) THEN STPAY.SHIPMENTCNTRF + STPAY.DELSHIPMENTCNTRF ELSE 0 END) AS MOVESHIPMENTCNTRF,--移動出荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=30) THEN STPAY.SALESMONEYRF + STPAY.DELSALESMONEYRF ELSE 0 END) AS MOVESHIPMENTPRICERF,--移動出荷額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=42 OR STPAY.ACPAYSLIPCDRF=50 OR " + Environment.NewLine;
                sqlText += "                   STPAY.ACPAYSLIPCDRF=60 OR STPAY.ACPAYSLIPCDRF=61 OR STPAY.ACPAYSLIPCDRF=70) THEN STPAY.ARRIVALCNTRF ELSE 0 END) AS ADJUSTCOUNTRF1,--調整数1" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=71) THEN STPAY.SHIPMENTCNTRF ELSE 0 END) AS ADJUSTCOUNTRF2,--調整数2" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=42 OR STPAY.ACPAYSLIPCDRF=50 OR " + Environment.NewLine;
                sqlText += "                   STPAY.ACPAYSLIPCDRF=60 OR STPAY.ACPAYSLIPCDRF=61 OR STPAY.ACPAYSLIPCDRF=70) THEN STPAY.STOCKPRICERF ELSE 0 END) AS ADJUSTPRICERF1,--調整金額1" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=71) THEN STPAY.SALESMONEYRF ELSE 0 END) AS ADJUSTPRICERF2,--調整金額2  " + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=11) THEN STPAY.ARRIVALCNTRF ELSE 0 END) AS ARRIVALCNTRF,--入荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=11) THEN STPAY.STOCKPRICERF ELSE 0 END) AS ARRIVALPRICERF,--入荷金額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=22) THEN STPAY.SHIPMENTCNTRF ELSE 0 END) AS SHIPMENTCNTRF,--出荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=22) THEN STPAY.SALESMONEYRF ELSE 0 END) AS SHIPMENTPRICERF,--出荷金額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 OR STPAY.ACPAYSLIPCDRF=11 OR STPAY.ACPAYSLIPCDRF=13 OR STPAY.ACPAYSLIPCDRF=31) THEN STPAY.ARRIVALCNT2RF + STPAY.DELARRIVALCNT2RF ELSE 0 END) AS TOTALARRIVALCNTRF,--総入荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=10 OR STPAY.ACPAYSLIPCDRF=11 OR STPAY.ACPAYSLIPCDRF=13 OR STPAY.ACPAYSLIPCDRF=31) THEN STPAY.STOCKPRICE2RF + STPAY.DELSTOCKPRICE2RF ELSE 0 END) AS TOTALARRIVALPRICERF,--総入荷金額" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 OR STPAY.ACPAYSLIPCDRF=22 OR STPAY.ACPAYSLIPCDRF=30) THEN STPAY.SHIPMENTCNT2RF + STPAY.DELSHIPMENTCNT2RF ELSE 0 END) AS TOTALSHIPMENTCNTRF,--総出荷数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAY.ACPAYSLIPCDRF=20 OR STPAY.ACPAYSLIPCDRF=22 OR STPAY.ACPAYSLIPCDRF=30) THEN STPAY.SALESMONEY2RF + STPAY.DELSALESMONEY2RF ELSE 0 END) AS TOTALSHIPMENTPRICERF --総出荷金額 " + Environment.NewLine;
                sqlText += "   FROM" + Environment.NewLine;
                sqlText += "   (" + Environment.NewLine;
                sqlText += "    select" + Environment.NewLine;
                sqlText += "      STACPAYHIST.LOGICALDELETECODERF," + Environment.NewLine;
                sqlText += "      STACPAYHIST.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "      STACPAYHIST.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "      STACPAYHIST.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "      STACPAYHIST.GOODSNORF," + Environment.NewLine;
                sqlText += "      STACPAYHIST.ACPAYSLIPNUMRF, --受払元伝票番号" + Environment.NewLine;
                sqlText += "      STACPAYHIST.ACPAYSLIPCDRF,  --受払元伝票区分" + Environment.NewLine;
                sqlText += "      STACPAYHIST.ACPAYTRANSCDRF, --受払元取引区分" + Environment.NewLine;
                sqlText += "      STACPAYHIST.ARRIVALCNTRF ,   --入荷数" + Environment.NewLine;
                sqlText += "      STACPAYHIST.SHIPMENTCNTRF,  --出荷数" + Environment.NewLine;
                sqlText += "      STACPAYHIST.STOCKPRICERF,   --仕入金額" + Environment.NewLine;
                sqlText += "      STACPAYHIST.SALESMONEYRF,    --売上金額      " + Environment.NewLine;
                sqlText += "      STACPAYHIST.ARRIVALCNT2RF,   --総合計用入荷数" + Environment.NewLine;
                sqlText += "      STACPAYHIST.SHIPMENTCNT2RF,  --総合計用出荷数" + Environment.NewLine;
                sqlText += "      STACPAYHIST.STOCKPRICE2RF,   --総合計用仕入金額" + Environment.NewLine;
                sqlText += "      STACPAYHIST.SALESMONEY2RF,   --総合計用売上金額      " + Environment.NewLine;
                sqlText += "      (CASE WHEN STACPAYHISTDEL.ACPAYTRANSCDRF IS NULL THEN 0 ELSE STACPAYHISTDEL.ACPAYTRANSCDRF END)  AS DELACPAYTRANSCDRF,--受払元取引区分" + Environment.NewLine;
                sqlText += "      (CASE WHEN STACPAYHISTDEL.ARRIVALCNTRF IS NULL THEN 0 ELSE STACPAYHISTDEL.ARRIVALCNTRF END ) AS DELARRIVALCNTRF,      --入荷数" + Environment.NewLine;
                sqlText += "      (CASE WHEN STACPAYHISTDEL.SHIPMENTCNTRF IS NULL THEN 0 ELSE STACPAYHISTDEL.SHIPMENTCNTRF END ) AS DELSHIPMENTCNTRF,   --出荷数" + Environment.NewLine;
                sqlText += "      (CASE WHEN STACPAYHISTDEL.STOCKPRICERF IS NULL THEN 0 ELSE STACPAYHISTDEL.STOCKPRICERF END ) AS DELSTOCKPRICERF,      --仕入金額" + Environment.NewLine;
                sqlText += "      (CASE WHEN STACPAYHISTDEL.SALESMONEYRF IS NULL THEN 0 ELSE STACPAYHISTDEL.SALESMONEYRF END) AS DELSALESMONEYRF,       --売上金額     " + Environment.NewLine;
                sqlText += "      (CASE WHEN STACPAYHISTDEL.ARRIVALCNT2RF IS NULL THEN 0 ELSE STACPAYHISTDEL.ARRIVALCNT2RF END)  AS DELARRIVALCNT2RF, --総合計用入荷数" + Environment.NewLine;
                sqlText += "      (CASE WHEN STACPAYHISTDEL.SHIPMENTCNT2RF IS NULL THEN 0 ELSE STACPAYHISTDEL.SHIPMENTCNT2RF END ) AS DELSHIPMENTCNT2RF, --総合計用出荷数" + Environment.NewLine;
                sqlText += "      (CASE WHEN STACPAYHISTDEL.STOCKPRICE2RF IS NULL THEN 0 ELSE STACPAYHISTDEL.STOCKPRICE2RF END ) AS DELSTOCKPRICE2RF,  --総合計用仕入金額" + Environment.NewLine;
                sqlText += "      (CASE WHEN STACPAYHISTDEL.SALESMONEY2RF IS NULL THEN 0 ELSE STACPAYHISTDEL.SALESMONEY2RF END ) AS DELSALESMONEY2RF    --総合計用売上金額" + Environment.NewLine;
                sqlText += "    from" + Environment.NewLine;
                sqlText += "    (" + Environment.NewLine;
                sqlText += "     SELECT" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.LOGICALDELETECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSNORF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPNUMRF, --受払元伝票番号" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPCDRF,  --受払元伝票区分" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYTRANSCDRF, --受払元取引区分" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.ARRIVALCNTRF) AS ARRIVALCNTRF ,   --入荷数" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.SHIPMENTCNTRF) AS SHIPMENTCNTRF,  --出荷数" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.STOCKPRICERF) AS STOCKPRICERF,   --仕入金額" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.SALESMONEYRF) AS SALESMONEYRF,    --売上金額" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 10 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.ARRIVALCNTRF END)) AS ARRIVALCNT2RF,   --総合計用入荷数" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 20 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.SHIPMENTCNTRF END))AS SHIPMENTCNT2RF,  --総合計用出荷数" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 10 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.STOCKPRICERF END)) AS STOCKPRICE2RF,   --総合計用仕入金額" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 20 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.SALESMONEYRF END)) AS SALESMONEY2RF   --総合計用売上金額" + Environment.NewLine;
                sqlText += "     FROM" + Environment.NewLine;
                // - UPD 2011/03/15 -------------------------------->>>
                //sqlText += "      STOCKACPAYHISTRF AS STOCKACPAYHIST" + Environment.NewLine;
                sqlText += "      STOCKACPAYHISTRF AS STOCKACPAYHIST WITH (READUNCOMMITTED)" + Environment.NewLine;
                // - UPD 2011/03/15 --------------------------------<<<
                sqlText += "     WHERE " + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "      AND STOCKACPAYHIST.LOGICALDELETECODERF=0" + Environment.NewLine;
                // 修正 2009/07/06 >>>
                //sqlText += "      AND((STOCKACPAYHIST.ADDUPADATERF>@FINDADDUPDATEST AND STOCKACPAYHIST.ADDUPADATERF<=@FINDADDUPDATEED)" + Environment.NewLine;
                //sqlText += "       OR (STOCKACPAYHIST.IOGOODSDAYRF>@FINDADDUPDATEST AND STOCKACPAYHIST.IOGOODSDAYRF<=@FINDADDUPDATEED))" + Environment.NewLine;
                //sqlText += "     AND( ( CASE WHEN STOCKACPAYHIST.ADDUPADATERF IS NULL THEN STOCKACPAYHIST.IOGOODSDAYRF ELSE STOCKACPAYHIST.ADDUPADATERF END ) >@FINDADDUPDATEST  AND (CASE WHEN STOCKACPAYHIST.ADDUPADATERF IS NULL THEN STOCKACPAYHIST.IOGOODSDAYRF ELSE STOCKACPAYHIST.ADDUPADATERF END )<=@FINDADDUPDATEED)" + Environment.NewLine;//DEL by Liangsd     2011/08/23
                sqlText += "     AND( ( CASE WHEN STOCKACPAYHIST.ADDUPADATERF IS NULL THEN STOCKACPAYHIST.IOGOODSDAYRF ELSE STOCKACPAYHIST.ADDUPADATERF END ) >= @FINDADDUPDATEST  AND (CASE WHEN STOCKACPAYHIST.ADDUPADATERF IS NULL THEN STOCKACPAYHIST.IOGOODSDAYRF ELSE STOCKACPAYHIST.ADDUPADATERF END )<=@FINDADDUPDATEED)" + Environment.NewLine;//ADD by Liangsd     2011/08/23
                // 修正 2009/07/06 <<<
                sqlText += "      AND STOCKACPAYHIST.ACPAYTRANSCDRF  != 21" + Environment.NewLine;
                sqlText += "      AND STOCKACPAYHIST.ACPAYTRANSCDRF  != 90" + Environment.NewLine;
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "      AND STOCKACPAYHIST.SECTIONCODERF=@FINDSECTIONCODE" + Environment.NewLine;
                }
                sqlText += "     GROUP BY" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.LOGICALDELETECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSNORF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPNUMRF, --受払元伝票番号" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPCDRF,  --受払元伝票区分" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYTRANSCDRF --受払元取引区分" + Environment.NewLine;
                sqlText += "     ) AS STACPAYHIST" + Environment.NewLine;
                sqlText += "     LEFT JOIN" + Environment.NewLine;
                sqlText += "     (" + Environment.NewLine;
                sqlText += "     SELECT" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.LOGICALDELETECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSNORF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPNUMRF, --受払元伝票番号" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPCDRF,  --受払元伝票区分" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYTRANSCDRF, --受払元取引区分" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.ARRIVALCNTRF) AS ARRIVALCNTRF ,   --入荷数" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.SHIPMENTCNTRF) AS SHIPMENTCNTRF,  --出荷数" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.STOCKPRICERF) AS STOCKPRICERF,   --仕入金額" + Environment.NewLine;
                sqlText += "      SUM(STOCKACPAYHIST.SALESMONEYRF) AS SALESMONEYRF,    --売上金額" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 10 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.ARRIVALCNTRF END)) AS ARRIVALCNT2RF,   --総合計用入荷数" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 20 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.SHIPMENTCNTRF END))AS SHIPMENTCNT2RF,  --総合計用出荷数" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 10 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.STOCKPRICERF END)) AS STOCKPRICE2RF,   --総合計用仕入金額" + Environment.NewLine;
                sqlText += "      SUM((CASE WHEN STOCKACPAYHIST.ACPAYSLIPCDRF = 20 AND STOCKACPAYHIST.IOGOODSDAYRF IS NULL THEN 0 ELSE STOCKACPAYHIST.SALESMONEYRF END)) AS SALESMONEY2RF   --総合計用売上金額" + Environment.NewLine;
                sqlText += "     FROM" + Environment.NewLine;
                // -- UPD 2011/03/15 -------------------------->>>
                //sqlText += "      STOCKACPAYHISTRF AS STOCKACPAYHIST" + Environment.NewLine;
                sqlText += "      STOCKACPAYHISTRF AS STOCKACPAYHIST WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 --------------------------<<<
                sqlText += "     WHERE " + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "      AND STOCKACPAYHIST.LOGICALDELETECODERF=0" + Environment.NewLine;
                // 修正 2009/07/06 >>>
                //sqlText += "      AND((STOCKACPAYHIST.ADDUPADATERF>@FINDADDUPDATEST AND STOCKACPAYHIST.ADDUPADATERF<=@FINDADDUPDATEED)" + Environment.NewLine;
                //sqlText += "       OR (STOCKACPAYHIST.IOGOODSDAYRF>@FINDADDUPDATEST AND STOCKACPAYHIST.IOGOODSDAYRF<=@FINDADDUPDATEED))" + Environment.NewLine;
                //sqlText += "     AND( ( CASE WHEN STOCKACPAYHIST.ADDUPADATERF IS NULL THEN STOCKACPAYHIST.IOGOODSDAYRF ELSE STOCKACPAYHIST.ADDUPADATERF END ) >@FINDADDUPDATEST  AND (CASE WHEN STOCKACPAYHIST.ADDUPADATERF IS NULL THEN STOCKACPAYHIST.IOGOODSDAYRF ELSE STOCKACPAYHIST.ADDUPADATERF END )<=@FINDADDUPDATEED)" + Environment.NewLine;//DEL by Liangsd     2011/08/23
                sqlText += "     AND( ( CASE WHEN STOCKACPAYHIST.ADDUPADATERF IS NULL THEN STOCKACPAYHIST.IOGOODSDAYRF ELSE STOCKACPAYHIST.ADDUPADATERF END ) >= @FINDADDUPDATEST  AND (CASE WHEN STOCKACPAYHIST.ADDUPADATERF IS NULL THEN STOCKACPAYHIST.IOGOODSDAYRF ELSE STOCKACPAYHIST.ADDUPADATERF END )<=@FINDADDUPDATEED)" + Environment.NewLine;//ADD by Liangsd     2011/08/23
                // 修正 2009/07/06 <<<
                sqlText += "      AND (STOCKACPAYHIST.ACPAYTRANSCDRF  = 21 OR STOCKACPAYHIST.ACPAYTRANSCDRF  = 90)" + Environment.NewLine;
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "      AND STOCKACPAYHIST.SECTIONCODERF=@FINDSECTIONCODE" + Environment.NewLine;
                }
                sqlText += "     GROUP BY" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.LOGICALDELETECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.GOODSNORF," + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPNUMRF, --受払元伝票番号" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYSLIPCDRF,  --受払元伝票区分" + Environment.NewLine;
                sqlText += "      STOCKACPAYHIST.ACPAYTRANSCDRF --受払元取引区分" + Environment.NewLine;
                sqlText += "     ) AS STACPAYHISTDEL" + Environment.NewLine;
                sqlText += "     ON STACPAYHIST.ENTERPRISECODERF = STACPAYHISTDEL.ENTERPRISECODERF " + Environment.NewLine;
                sqlText += "     AND STACPAYHIST.WAREHOUSECODERF = STACPAYHISTDEL.WAREHOUSECODERF" + Environment.NewLine;
                sqlText += "     AND STACPAYHIST.GOODSMAKERCDRF = STACPAYHISTDEL.GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += "     AND STACPAYHIST.GOODSNORF = STACPAYHISTDEL.GOODSNORF" + Environment.NewLine;
                sqlText += "     AND STACPAYHIST.ACPAYSLIPNUMRF = STACPAYHISTDEL.ACPAYSLIPNUMRF" + Environment.NewLine;
                sqlText += "     AND STACPAYHIST.ACPAYSLIPCDRF = STACPAYHISTDEL.ACPAYSLIPCDRF    " + Environment.NewLine;
                sqlText += "    )AS STPAY" + Environment.NewLine;
                sqlText += "    GROUP  BY" + Environment.NewLine;
                sqlText += "     STPAY.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "     STPAY.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "     STPAY.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "     STPAY.GOODSNORF" + Environment.NewLine;
                sqlText += "  ) AS STOCKHAC" + Environment.NewLine;
                sqlText += "  ON  STOCKHISTORYPAY.ENTERPRISECODERF = STOCKHAC.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND STOCKHISTORYPAY.WAREHOUSECODERF = STOCKHAC.WAREHOUSECODERF" + Environment.NewLine;
                //sqlText += "  AND STOCKHISTORYPAY.SECTIONCODERF = STOCKHAC.SECTIONCODERF" + Environment.NewLine; // DEL 2009/04/02
                sqlText += "  AND STOCKHISTORYPAY.GOODSMAKERCDRF = STOCKHAC.GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += "  AND STOCKHISTORYPAY.GOODSNORF = STOCKHAC.GOODSNORF" + Environment.NewLine;

                #endregion 在庫受払データ集計情報 結合

                #region 在庫受払データ集計情報( 売上回数,仕入回数)　結合
                sqlText += "  LEFT JOIN " + Environment.NewLine;
                sqlText += "  (" + Environment.NewLine;
                sqlText += "   SELECT" + Environment.NewLine;
                sqlText += "    STPAYCNT.ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "    STPAYCNT.SECTIONCODERF," + Environment.NewLine;
                sqlText += "    STPAYCNT.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "    STPAYCNT.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "    STPAYCNT.GOODSNORF," + Environment.NewLine;
                // 修正 2009.03.27 >>>
                //sqlText += "    SUM(CASE WHEN (STPAYCNT.ACPAYSLIPCDRF=20 AND STPAYCNT.ACPAYTRANSCDRF=10 ) THEN 1 ELSE 0 END) AS SALESTIMESRF,--売上回数" + Environment.NewLine;
                //sqlText += "    SUM(CASE WHEN (STPAYCNT.ACPAYSLIPCDRF=10 AND STPAYCNT.ACPAYTRANSCDRF=10 ) THEN 1 ELSE 0 END) AS STOCKTIMESRF --仕入回数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN ((STPAYCNT.ACPAYSLIPCDRF=20 AND STPAYCNT.ACPAYTRANSCDRF=10) AND DELSLIPNUM IS NULL) THEN 1 ELSE 0 END) AS SALESTIMESRF,--売上回数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAYCNT.ACPAYSLIPCDRF=20 AND (STPAYCNT.ACPAYTRANSCDRF=11 OR STPAYCNT.ACPAYTRANSCDRF=20)AND DELSLIPNUM IS NULL ) THEN 1 ELSE 0 END) AS SALESRETGOODSTIMESRF,--売上返品回数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN ((STPAYCNT.ACPAYSLIPCDRF=10 AND STPAYCNT.ACPAYTRANSCDRF=10 AND DELSLIPNUM IS NULL) OR (STPAYCNT.ACPAYSLIPCDRF=13 AND( STPAYCNT.ACPAYTRANSCDRF=10 OR STPAYCNT.ACPAYTRANSCDRF=30)AND DELSLIPNUM IS NULL )) THEN 1 ELSE 0 END) AS STOCKTIMESRF, --仕入回数" + Environment.NewLine;
                sqlText += "    SUM(CASE WHEN (STPAYCNT.ACPAYSLIPCDRF=10 AND (STPAYCNT.ACPAYTRANSCDRF=11 OR STPAYCNT.ACPAYTRANSCDRF=20)AND DELSLIPNUM IS NULL ) THEN 1 ELSE 0 END) AS STOCKRETGOODSTIMESRF--仕入返品回数" + Environment.NewLine;
                // 修正 2009.03.27 <<<
                sqlText += "   FROM  " + Environment.NewLine;
                sqlText += "   (" + Environment.NewLine;
                // 修正 2009.03.27 >>>
                //sqlText += "      SELECT DISTINCT" + Environment.NewLine;
                //sqlText += "       LOGICALDELETECODERF," + Environment.NewLine;
                //sqlText += "       ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "       SECTIONCODERF," + Environment.NewLine;
                //sqlText += "       WAREHOUSECODERF," + Environment.NewLine;
                //sqlText += "       GOODSMAKERCDRF," + Environment.NewLine;
                //sqlText += "       GOODSNORF," + Environment.NewLine;
                //sqlText += "       ACPAYSLIPNUMRF, --伝票番号" + Environment.NewLine;
                //sqlText += "       ACPAYSLIPCDRF,  --受払元伝票区分" + Environment.NewLine;
                //sqlText += "       ACPAYTRANSCDRF  --受払元取引区分" + Environment.NewLine;
                //sqlText += "      FROM" + Environment.NewLine;
                //sqlText += "       STOCKACPAYHISTRF" + Environment.NewLine;
                sqlText += "      SELECT " + Environment.NewLine;
                sqlText += "       STOCKACPAYHIST.LOGICALDELETECODERF," + Environment.NewLine;
                sqlText += "       STOCKACPAYHIST.ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "       STOCKACPAYHIST.SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                sqlText += "       STOCKACPAYHIST.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "       STOCKACPAYHIST.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "       STOCKACPAYHIST.GOODSNORF," + Environment.NewLine;
                sqlText += "       STOCKACPAYHIST.ACPAYSLIPNUMRF, --伝票番号" + Environment.NewLine;
                sqlText += "       STOCKACPAYHIST.ACPAYSLIPCDRF,  --受払元伝票区分" + Environment.NewLine;
                sqlText += "       STOCKACPAYHIST.ACPAYTRANSCDRF,  --受払元取引区分" + Environment.NewLine;
                sqlText += "       DELSTOCKACPAYHIST.ACPAYSLIPNUMRF AS DELSLIPNUM --伝票番号" + Environment.NewLine;
                sqlText += "      FROM" + Environment.NewLine;
                // -- UPD 2011/03/15 --------------------------->>>
                //sqlText += "       STOCKACPAYHISTRF AS STOCKACPAYHIST" + Environment.NewLine;
                sqlText += "       STOCKACPAYHISTRF AS STOCKACPAYHIST WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ---------------------------<<<
                sqlText += "     LEFT JOIN" + Environment.NewLine;
                sqlText += "      (" + Environment.NewLine;
                sqlText += "        SELECT" + Environment.NewLine;
                sqlText += "         LOGICALDELETECODERF," + Environment.NewLine;
                sqlText += "         ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "         SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                sqlText += "         WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "         GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "         GOODSNORF," + Environment.NewLine;
                sqlText += "         ACPAYSLIPNUMRF --受払元伝票番号" + Environment.NewLine;
                sqlText += "        FROM" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------->>>
                //sqlText += "         STOCKACPAYHISTRF" + Environment.NewLine;
                sqlText += "         STOCKACPAYHISTRF WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 -------------------------<<<
                sqlText += "        WHERE" + Environment.NewLine;
                // --ADD 2011/03/15 --------------------------->>>
                sqlText += "         ENTERPRISECODERF=@FINDENTERPRISECODE AND " + Environment.NewLine;
                sqlText += "         LOGICALDELETECODERF=0 AND " + Environment.NewLine;
                // --ADD 2011/03/15 ---------------------------<<<
                sqlText += "         ACPAYTRANSCDRF = 21 " + Environment.NewLine;
                sqlText += "      ) AS DELSTOCKACPAYHIST" + Environment.NewLine;
                sqlText += "       ON  STOCKACPAYHIST.ENTERPRISECODERF = DELSTOCKACPAYHIST.ENTERPRISECODERF" + Environment.NewLine;
                //sqlText += "       AND STOCKACPAYHIST.SECTIONCODERF = DELSTOCKACPAYHIST.SECTIONCODERF" + Environment.NewLine; // DEL 2009/04/02
                sqlText += "       AND STOCKACPAYHIST.WAREHOUSECODERF = DELSTOCKACPAYHIST.WAREHOUSECODERF" + Environment.NewLine;
                sqlText += "       AND STOCKACPAYHIST.GOODSMAKERCDRF = DELSTOCKACPAYHIST.GOODSMAKERCDRF " + Environment.NewLine;
                sqlText += "       AND STOCKACPAYHIST.GOODSNORF = DELSTOCKACPAYHIST.GOODSNORF" + Environment.NewLine;
                sqlText += "       AND STOCKACPAYHIST.ACPAYSLIPNUMRF = DELSTOCKACPAYHIST.ACPAYSLIPNUMRF          " + Environment.NewLine;
                // 修正 2009.03.27 <<<
                sqlText += "      WHERE STOCKACPAYHIST.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "       AND STOCKACPAYHIST.SECTIONCODERF=@FINDSECTIONCODE" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "       AND STOCKACPAYHIST.LOGICALDELETECODERF=0" + Environment.NewLine;
                // 修正 2009/07/06 >>>
                //sqlText += "       AND((STOCKACPAYHIST.ADDUPADATERF>@FINDADDUPDATEST  AND STOCKACPAYHIST.ADDUPADATERF<=@FINDADDUPDATEED)" + Environment.NewLine;
                //sqlText += "         OR(STOCKACPAYHIST.IOGOODSDAYRF>@FINDADDUPDATEST AND STOCKACPAYHIST.IOGOODSDAYRF<=@FINDADDUPDATEED))" + Environment.NewLine;
                //sqlText += "     AND( ( CASE WHEN STOCKACPAYHIST.ADDUPADATERF IS NULL THEN STOCKACPAYHIST.IOGOODSDAYRF ELSE STOCKACPAYHIST.ADDUPADATERF END ) >@FINDADDUPDATEST  AND (CASE WHEN STOCKACPAYHIST.ADDUPADATERF IS NULL THEN STOCKACPAYHIST.IOGOODSDAYRF ELSE STOCKACPAYHIST.ADDUPADATERF END )<=@FINDADDUPDATEED)" + Environment.NewLine;                //DEL by Liangsd     2011/08/23
                sqlText += "     AND( ( CASE WHEN STOCKACPAYHIST.ADDUPADATERF IS NULL THEN STOCKACPAYHIST.IOGOODSDAYRF ELSE STOCKACPAYHIST.ADDUPADATERF END ) >= @FINDADDUPDATEST  AND (CASE WHEN STOCKACPAYHIST.ADDUPADATERF IS NULL THEN STOCKACPAYHIST.IOGOODSDAYRF ELSE STOCKACPAYHIST.ADDUPADATERF END )<=@FINDADDUPDATEED)" + Environment.NewLine;                //ADD by Liangsd     2011/08/23
                // 修正 2009/07/06 <<<
                sqlText += "   ) AS STPAYCNT" + Environment.NewLine;
                sqlText += "   GROUP BY" + Environment.NewLine;
                sqlText += "    STPAYCNT.ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "    STPAYCNT.SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                sqlText += "    STPAYCNT.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "    STPAYCNT.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "    STPAYCNT.GOODSNORF" + Environment.NewLine;
                sqlText += "  ) AS STOCKHACCNT" + Environment.NewLine;
                sqlText += "   ON  STOCKHISTORYPAY.ENTERPRISECODERF = STOCKHACCNT.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "   AND STOCKHISTORYPAY.WAREHOUSECODERF = STOCKHACCNT.WAREHOUSECODERF" + Environment.NewLine;
                //sqlText += "   AND STOCKHISTORYPAY.SECTIONCODERF = STOCKHACCNT.SECTIONCODERF" + Environment.NewLine; // DEL 2009/04/02
                sqlText += "   AND STOCKHISTORYPAY.GOODSMAKERCDRF = STOCKHACCNT.GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += "   AND STOCKHISTORYPAY.GOODSNORF = STOCKHACCNT.GOODSNORF" + Environment.NewLine;
                #endregion
                
                #region DEL 2009/04/24
                /*
                #region 在庫受払履歴データ仕入単価情報 結合
                sqlText += " LEFT JOIN " + Environment.NewLine;
                sqlText += " ( " + Environment.NewLine;
                sqlText += "  SELECT" + Environment.NewLine;
                sqlText += "   STPAY.ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "   STPAY.SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                sqlText += "   STPAY.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "   STPAY.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "   STPAY.GOODSNORF," + Environment.NewLine;
                sqlText += "   STPAYPRICE.STOCKUNITPRICEFLRF" + Environment.NewLine;
                sqlText += "  FROM" + Environment.NewLine;
                sqlText += "   (" + Environment.NewLine;
                sqlText += "    SELECT" + Environment.NewLine;
                sqlText += "     SUBSTPAY.ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "     SUBSTPAY.SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                sqlText += "     SUBSTPAY.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "     SUBSTPAY.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "     SUBSTPAY.GOODSNORF," + Environment.NewLine;
                sqlText += "     SUBSTPAY.ADDUPADATERF," + Environment.NewLine;
                sqlText += "     MAX(SUBSTPAYPRICE.ACPAYHISTDATETIMERF) AS ACPAYHISTDATETIMERF     " + Environment.NewLine;
                sqlText += "    FROM" + Environment.NewLine;
                sqlText += "    (" + Environment.NewLine;
                sqlText += "      SELECT" + Environment.NewLine;
                sqlText += "       SUBSUBSTPAY.ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "       SUBSUBSTPAY.SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                sqlText += "       SUBSUBSTPAY.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "       SUBSUBSTPAY.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "       SUBSUBSTPAY.GOODSNORF," + Environment.NewLine;
                sqlText += "       MAX(SUBSUBSTPAY.ADDUPADATERF) AS ADDUPADATERF" + Environment.NewLine;
                sqlText += "      FROM" + Environment.NewLine;
                sqlText += "       STOCKACPAYHISTRF AS SUBSUBSTPAY" + Environment.NewLine;
                sqlText += "      WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "       AND LOGICALDELETECODERF=0" + Environment.NewLine;
                sqlText += "       AND((ADDUPADATERF>@FINDADDUPDATEST  AND ADDUPADATERF<=@FINDADDUPDATEED)" + Environment.NewLine;
                sqlText += "            OR(IOGOODSDAYRF>@FINDADDUPDATEST AND IOGOODSDAYRF<=@FINDADDUPDATEED))              " + Environment.NewLine;
                sqlText += "       AND (ACPAYSLIPCDRF=10 OR ACPAYSLIPCDRF=31)" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "       AND SECTIONCODERF=@FINDSECTIONCODE" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "      GROUP BY " + Environment.NewLine;
                sqlText += "       SUBSUBSTPAY.ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "       SUBSUBSTPAY.SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                sqlText += "       SUBSUBSTPAY.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "       SUBSUBSTPAY.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "       SUBSUBSTPAY.GOODSNORF" + Environment.NewLine;
                sqlText += "     ) AS SUBSTPAY" + Environment.NewLine;
                sqlText += "     LEFT JOIN" + Environment.NewLine;
                sqlText += "      STOCKACPAYHISTRF AS SUBSTPAYPRICE" + Environment.NewLine;
                sqlText += "      ON SUBSTPAY.ENTERPRISECODERF = SUBSTPAYPRICE.ENTERPRISECODERF" + Environment.NewLine;
                //sqlText += "      AND SUBSTPAY.SECTIONCODERF = SUBSTPAYPRICE.SECTIONCODERF" + Environment.NewLine; // DEL 2009/04/02
                sqlText += "      AND SUBSTPAY.WAREHOUSECODERF = SUBSTPAYPRICE.WAREHOUSECODERF" + Environment.NewLine;
                sqlText += "      AND SUBSTPAY.GOODSMAKERCDRF = SUBSTPAYPRICE.GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += "      AND SUBSTPAY.GOODSNORF = SUBSTPAYPRICE.GOODSNORF" + Environment.NewLine;
                sqlText += "      AND SUBSTPAY.ADDUPADATERF = SUBSTPAYPRICE.ADDUPADATERF" + Environment.NewLine;
                sqlText += "      AND (SUBSTPAYPRICE.ACPAYSLIPCDRF=10 OR SUBSTPAYPRICE.ACPAYSLIPCDRF=31)" + Environment.NewLine;
                sqlText += "     GROUP BY" + Environment.NewLine;
                sqlText += "      SUBSTPAY.ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "      SUBSTPAY.SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                sqlText += "      SUBSTPAY.WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "      SUBSTPAY.GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "      SUBSTPAY.GOODSNORF," + Environment.NewLine;
                sqlText += "      SUBSTPAY.ADDUPADATERF" + Environment.NewLine;
                sqlText += "   ) AS STPAY   " + Environment.NewLine;
                sqlText += "   LEFT JOIN" + Environment.NewLine;
                sqlText += "    STOCKACPAYHISTRF AS STPAYPRICE " + Environment.NewLine;
                sqlText += "   ON STPAY.ENTERPRISECODERF = STPAYPRICE.ENTERPRISECODERF" + Environment.NewLine;
                //sqlText += "   AND STPAY.SECTIONCODERF = STPAYPRICE.SECTIONCODERF" + Environment.NewLine; // DEL 2009/04/02
                sqlText += "   AND STPAY.WAREHOUSECODERF = STPAYPRICE.WAREHOUSECODERF" + Environment.NewLine;
                sqlText += "   AND STPAY.GOODSMAKERCDRF = STPAYPRICE.GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += "   AND STPAY.GOODSNORF = STPAYPRICE.GOODSNORF" + Environment.NewLine;
                sqlText += "   AND STPAY.ADDUPADATERF = STPAYPRICE.ADDUPADATERF" + Environment.NewLine;
                sqlText += "   AND STPAY.ACPAYHISTDATETIMERF = STPAYPRICE.ACPAYHISTDATETIMERF   " + Environment.NewLine;
                sqlText += "   AND (STPAYPRICE.ACPAYSLIPCDRF=10 OR STPAYPRICE.ACPAYSLIPCDRF=31)" + Environment.NewLine;
                sqlText += " ) AS STPAYPRICE" + Environment.NewLine;
                sqlText += " ON  STOCKHISTORYPAY.ENTERPRISECODERF = STPAYPRICE.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " AND STOCKHISTORYPAY.WAREHOUSECODERF = STPAYPRICE.WAREHOUSECODERF" + Environment.NewLine;
                //sqlText += " AND STOCKHISTORYPAY.SECTIONCODERF = STPAYPRICE.SECTIONCODERF" + Environment.NewLine; // DEL 2009/04/02
                sqlText += " AND STOCKHISTORYPAY.GOODSMAKERCDRF = STPAYPRICE.GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += " AND STOCKHISTORYPAY.GOODSNORF = STPAYPRICE.GOODSNORF" + Environment.NewLine;
                #endregion
                */
                #endregion 
                

                #region 在庫履歴マスタ前月情報 結合
                sqlText += "  LEFT JOIN" + Environment.NewLine;
                sqlText += "  (" + Environment.NewLine;
                sqlText += "    SELECT " + Environment.NewLine;
                sqlText += "     ENTERPRISECODERF," + Environment.NewLine;
                //sqlText += "     SECTIONCODERF," + Environment.NewLine; // DEL 2009/04/02
                sqlText += "     WAREHOUSECODERF," + Environment.NewLine;
                sqlText += "     GOODSMAKERCDRF," + Environment.NewLine;
                sqlText += "     GOODSNORF," + Environment.NewLine;
                sqlText += "     STOCKTOTALRF AS LMONTHSTOCKCNTRF,--前月末在庫数" + Environment.NewLine;
                sqlText += "     STOCKMASHINEPRICERF AS LMONTHSTOCKPRICERF,--前月末在庫額" + Environment.NewLine;
                sqlText += "     PROPERTYSTOCKCNTRF AS LMONTHPPTYSTOCKCNTRF,--前月末自社在庫数" + Environment.NewLine;
                sqlText += "     PROPERTYSTOCKPRICERF AS LMONTHPPTYSTOCKPRICERF,--前月末自社在庫金額" + Environment.NewLine;
                sqlText += "     STOCKUNITPRICEFLRF AS STOCKUNITPRICEFLRF --仕入単価" + Environment.NewLine;
                sqlText += "    FROM" + Environment.NewLine;
                // -- UPD 2011/03/15 -------------------------->>>
                //sqlText += "     STOCKHISTORYRF" + Environment.NewLine;
                sqlText += "     STOCKHISTORYRF WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 --------------------------<<<
                sqlText += "    WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "     AND LOGICALDELETECODERF=0" + Environment.NewLine;
                sqlText += "     AND ADDUPYEARMONTHRF=@ADDUPYEARMONTH" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "     AND SECTIONCODERF=@FINDSECTIONCODE" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "  ) AS STOCKHIS" + Environment.NewLine;
                sqlText += "  ON  STOCKHISTORYPAY.ENTERPRISECODERF = STOCKHIS.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND STOCKHISTORYPAY.WAREHOUSECODERF = STOCKHIS.WAREHOUSECODERF" + Environment.NewLine;
                //sqlText += "  AND STOCKHISTORYPAY.SECTIONCODERF = STOCKHIS.SECTIONCODERF" + Environment.NewLine; // DEL 2009/04/02
                sqlText += "  AND STOCKHISTORYPAY.GOODSMAKERCDRF = STOCKHIS.GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += "  AND STOCKHISTORYPAY.GOODSNORF = STOCKHIS.GOODSNORF" + Environment.NewLine;
                #endregion 前月情報 結合

                #endregion

                #region JOIN句
                // -- UPD 2011/03/15 -------------------------->>>
                //sqlText += " LEFT JOIN MAKERURF AS MAKER " + Environment.NewLine;
                sqlText += " LEFT JOIN MAKERURF AS MAKER WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 --------------------------<<<
                sqlText += "  ON  STOCKHISTORYPAY.ENTERPRISECODERF = MAKER.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND STOCKHISTORYPAY.GOODSMAKERCDRF = MAKER.GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += "  AND MAKER.LOGICALDELETECODERF=0" + Environment.NewLine; // ADD 2009/04/17 削除区分参照(MANTIS:12800)
                // -- UPD 2011/03/15 ------------------------------->>>
                //sqlText += " LEFT JOIN  WAREHOUSERF AS WARE " + Environment.NewLine;
                sqlText += " LEFT JOIN  WAREHOUSERF AS WARE WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 -------------------------------<<<
                sqlText += "  ON STOCKHISTORYPAY.ENTERPRISECODERF = WARE.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND STOCKHISTORYPAY.WAREHOUSECODERF = WARE.WAREHOUSECODERF" + Environment.NewLine;
                sqlText += "  AND WARE.LOGICALDELETECODERF=0" + Environment.NewLine; // ADD 2009/04/17 削除区分参照(MANTIS:12800)
                // -- UPD 2011/03/15 ------------------------------->>>
                //sqlText += " LEFT JOIN GOODSURF AS GOODS " + Environment.NewLine;
                sqlText += " LEFT JOIN GOODSURF AS GOODS WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 -------------------------------<<<
                sqlText += "  ON  STOCKHISTORYPAY.ENTERPRISECODERF = GOODS.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND STOCKHISTORYPAY.GOODSMAKERCDRF = GOODS.GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += "  AND STOCKHISTORYPAY.GOODSNORF = GOODS.GOODSNORF" + Environment.NewLine;
                sqlText += "  AND GOODS.LOGICALDELETECODERF=0" + Environment.NewLine; // ADD 2009/04/17 削除区分参照(MANTIS:12800)
                // 修正 2009/04/24 >>>
                // -- UPD 2011/03/15 ------------------------------->>>
                //sqlText += " LEFT JOIN BLGOODSCDURF AS BL -- BLマスタ" + Environment.NewLine;
                sqlText += " LEFT JOIN BLGOODSCDURF AS BL WITH (READUNCOMMITTED) -- BLマスタ" + Environment.NewLine;
                // -- UPD 2011/03/15 -------------------------------<<<
                sqlText += "  ON  STOCKHISTORYPAY.ENTERPRISECODERF = BL.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND GOODS.BLGOODSCODERF = BL.BLGOODSCODERF" + Environment.NewLine;
                sqlText += "  AND BL.LOGICALDELETECODERF = 0" + Environment.NewLine;// ADD 2010/09/21
                // -- UPD 2011/03/15 ------------------------------->>>
                //sqlText += " LEFT JOIN BLGROUPURF AS BLG -- BLグループコードマスタ" + Environment.NewLine;
                sqlText += " LEFT JOIN BLGROUPURF AS BLG WITH (READUNCOMMITTED) -- BLグループコードマスタ" + Environment.NewLine;
                // -- UPD 2011/03/15 -------------------------------<<<
                sqlText += "  ON STOCKHISTORYPAY.ENTERPRISECODERF = BLG.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND BL.BLGROUPCODERF = BLG.BLGROUPCODERF" + Environment.NewLine;
                // 修正 2009/04/24 <<<
                #endregion

                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                {
                    #region Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDateSt = sqlCommand.Parameters.Add("@FINDADDUPDATEST", SqlDbType.Int);
                    SqlParameter findParaAddUpDateEd = sqlCommand.Parameters.Add("@FINDADDUPDATEED", SqlDbType.Int);                    
                    SqlParameter findParaAddUpYearMonth = sqlCommand.Parameters.Add("@ADDUPYEARMONTH", SqlDbType.Int);　// ADD 2008.12.22
                    #endregion

                    #region Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);

                    if (monthlyAddUpWork.AddUpDateSt == DateTime.MinValue)
                    {
                        findParaAddUpDateSt.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(new DateTime(1000, 01, 01));
                    }
                    else
                    {
                        findParaAddUpDateSt.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpWork.AddUpDateSt);
                    }

                    findParaAddUpDateEd.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpWork.AddUpDate);
                    if (monthlyAddUpWork.LstMonAddUpProcDay == DateTime.MinValue)
                    {
                        findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(new DateTime(1000, 01, 01));
                    }
                    else
                    {
                        findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(monthlyAddUpWork.LstMonAddUpProcDay); // ADD 2008.12.22
                    }

                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaSectionCode = sqlCommand.Parameters.Add("@FINDSECTIONCODE", SqlDbType.NChar);
                        findParaSectionCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }
                    // 修正 2009/04/02 <<<
                    #endregion

                    sqlCommand.CommandTimeout = TimeOut; // ADD 2009.02.10
                    myReader = sqlCommand.ExecuteReader();
                    while (myReader.Read())
                    {
                        StockHistoryWork wkstockHistoryWork = new StockHistoryWork();
                        GoodsSupplierDataWork goodsSupplierDataWork = new GoodsSupplierDataWork();
                        UnitPriceCalcParamWork unitPriceCalcParam = new UnitPriceCalcParamWork();
                        GoodsUnitDataWork goodsUnitData = new GoodsUnitDataWork(); // 商品連結データオブジェクトリスト

                        #region 結果セット

                        #region 在庫履歴データクラス
                        FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF")); // ADD 2009/05/25 端数処理区分
                        wkstockHistoryWork.EnterpriseCode = monthlyAddUpWork.EnterpriseCode;
                        wkstockHistoryWork.AddUpYearMonth = monthlyAddUpWork.AddUpYearMonth;
                        wkstockHistoryWork.WarehouseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("WAREHOUSECODERF"));
                        wkstockHistoryWork.WarehouseName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("WAREHOUSENAMERF"));
                        wkstockHistoryWork.SectionCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SECTIONCODERF"));
                        wkstockHistoryWork.GoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSNORF"));
                        wkstockHistoryWork.GoodsName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSNAMERF"));
                        wkstockHistoryWork.GoodsMakerCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSMAKERCDRF"));
                        wkstockHistoryWork.MakerName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("MAKERNAMERF"));
                        wkstockHistoryWork.LMonthStockCnt = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("LMONTHSTOCKCNTRF"));
                        wkstockHistoryWork.LMonthStockPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("LMONTHSTOCKPRICERF"));
                        wkstockHistoryWork.LMonthPptyStockCnt = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("LMONTHPPTYSTOCKCNTRF"));
                        wkstockHistoryWork.LMonthPptyStockPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("LMONTHPPTYSTOCKPRICERF"));
                        wkstockHistoryWork.SalesTimes = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SALESTIMESRF"));
                        wkstockHistoryWork.SalesCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("SALESCOUNTRF"));
                        wkstockHistoryWork.SalesMoneyTaxExc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESMONEYTAXEXCRF"));
                        wkstockHistoryWork.SalesRetGoodsTimes = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SALESRETGOODSTIMESRF"));
                        wkstockHistoryWork.SalesRetGoodsCnt = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("SALESRETGOODSCNTRF"));
                        wkstockHistoryWork.SalesRetGoodsPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESRETGOODSPRICERF"));
                        wkstockHistoryWork.GrossProfit = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("GROSSPROFITRF"));
                        wkstockHistoryWork.StockTimes = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("STOCKTIMESRF"));
                        wkstockHistoryWork.StockCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("STOCKCOUNTRF"));
                        wkstockHistoryWork.StockPriceTaxExc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("STOCKPRICETAXEXCRF"));
                        wkstockHistoryWork.StockRetGoodsTimes = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("STOCKRETGOODSTIMESRF"));
                        wkstockHistoryWork.StockRetGoodsCnt = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("STOCKRETGOODSCNTRF"));
                        wkstockHistoryWork.StockRetGoodsPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("STOCKRETGOODSPRICERF"));
                        wkstockHistoryWork.MoveArrivalCnt = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("MOVEARRIVALCNTRF"));
                        wkstockHistoryWork.MoveArrivalPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("MOVEARRIVALPRICERF"));
                        wkstockHistoryWork.MoveShipmentCnt = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("MOVESHIPMENTCNTRF"));
                        wkstockHistoryWork.MoveShipmentPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("MOVESHIPMENTPRICERF"));
                        wkstockHistoryWork.AdjustCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("ADJUSTCOUNTRF"));
                        wkstockHistoryWork.AdjustPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ADJUSTPRICERF"));
                        wkstockHistoryWork.ArrivalCnt = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("ARRIVALCNTRF"));
                        wkstockHistoryWork.ArrivalPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ARRIVALPRICERF"));
                        wkstockHistoryWork.ShipmentCnt = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("SHIPMENTCNTRF"));
                        wkstockHistoryWork.ShipmentPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SHIPMENTPRICERF"));
                        wkstockHistoryWork.TotalArrivalCnt = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TOTALARRIVALCNTRF"));
                        wkstockHistoryWork.TotalArrivalPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALARRIVALPRICERF"));
                        wkstockHistoryWork.TotalShipmentCnt = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TOTALSHIPMENTCNTRF"));
                        wkstockHistoryWork.TotalShipmentPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("TOTALSHIPMENTPRICERF"));
                        // ---ADD 2010/09/17 ---------->>>>>
                        wkstockHistoryWork.BLGoodsCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("BLGOODSCODERF"));
                        wkstockHistoryWork.BLGoodsHalfName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("BLGOODSHALFNAMERF"));// ADD 2010/09/21
                        wkstockHistoryWork.WarehouseShelfNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("WAREHOUSESHELFNO"));
                        wkstockHistoryWork.StockCreateDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("STOCKCREATEDATE"));
                        wkstockHistoryWork.LastSalesDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("LASTSALESDATE"));
                        wkstockHistoryWork.LastStockDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("LASTSTOCKDATE"));
                        wkstockHistoryWork.WareHouseCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("WAREHOUSECODE")); // ADD 2010/09/28
                        // ---ADD 2010/09/17 ---------->>>>>

                        // 修正 2009/04/24 >>>
                        //wkstockHistoryWork.StockUnitPriceFl = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("STOCKUNITPRICEFLRF"));
                        //// 在庫総数 =  前月末在庫数+総入荷数 - 総出荷数 + 調整数
                        //wkstockHistoryWork.StockTotal = wkstockHistoryWork.LMonthStockCnt + wkstockHistoryWork.TotalArrivalCnt - wkstockHistoryWork.TotalShipmentCnt + wkstockHistoryWork.AdjustCount;
                        //// マシン在庫額 = 在庫総数 × 仕入単価
                        //wkstockHistoryWork.StockMashinePrice = (long)(wkstockHistoryWork.StockTotal * wkstockHistoryWork.StockUnitPriceFl);
                        //// 自社在庫数 = 前月自社在庫数 + 仕入数 + 仕入返品数 + 調整数 - 売上数 + 売上返品数 
                        //wkstockHistoryWork.PropertyStockCnt = wkstockHistoryWork.LMonthPptyStockCnt + wkstockHistoryWork.StockCount + wkstockHistoryWork.StockRetGoodsCnt + wkstockHistoryWork.AdjustCount - (wkstockHistoryWork.SalesCount + wkstockHistoryWork.SalesRetGoodsCnt);
                        //// 自社在庫金額 = 自社在庫数 ×仕入単価
                        //wkstockHistoryWork.PropertyStockPrice = (long)(wkstockHistoryWork.PropertyStockCnt * wkstockHistoryWork.StockUnitPriceFl);

                        // 在庫総数 =  前月末在庫数+総入荷数 - 総出荷数 + 調整数 ※貸出・入荷を含む
                        wkstockHistoryWork.StockTotal = wkstockHistoryWork.LMonthStockCnt + wkstockHistoryWork.TotalArrivalCnt - wkstockHistoryWork.TotalShipmentCnt + wkstockHistoryWork.AdjustCount;

                        // 修正 2009/07/14 >>>
                        //// 修正 2009/07/03 >>>
                        ////// 自社在庫数 = 前月自社在庫数 + 仕入数 + 仕入返品数 + 調整数 - 売上数 + 売上返品数 
                        ////wkstockHistoryWork.PropertyStockCnt = wkstockHistoryWork.LMonthPptyStockCnt + wkstockHistoryWork.StockCount + wkstockHistoryWork.StockRetGoodsCnt + wkstockHistoryWork.AdjustCount - (wkstockHistoryWork.SalesCount + wkstockHistoryWork.SalesRetGoodsCnt);
                        //// 自社在庫数 =  前月末在庫数+総入荷数 - 総出荷数 + 調整数 + 出荷数(貸出) - 入荷数 ※貸出・入荷は含まない
                        //wkstockHistoryWork.PropertyStockCnt = wkstockHistoryWork.LMonthStockCnt + wkstockHistoryWork.TotalArrivalCnt - wkstockHistoryWork.TotalShipmentCnt + wkstockHistoryWork.AdjustCount - wkstockHistoryWork.ArrivalCnt + wkstockHistoryWork.ShipmentCnt;
                        //// 修正 2009/07/03 <<<
                        // 自社在庫数 =  前月末自社在庫数 + 総入荷数 - 総出荷数 + 調整数 + 出荷数(貸出) - 入荷数 ※貸出・入荷は含まない
                        wkstockHistoryWork.PropertyStockCnt = wkstockHistoryWork.LMonthPptyStockCnt + wkstockHistoryWork.TotalArrivalCnt - wkstockHistoryWork.TotalShipmentCnt + wkstockHistoryWork.AdjustCount - wkstockHistoryWork.ArrivalCnt + wkstockHistoryWork.ShipmentCnt;
                        // 修正 2009/07/14 <<<


                        // 修正 2009/04/24

                        stockHistoryWorkList.Add(wkstockHistoryWork);
                        #endregion

                        // -- ADD 2010/06/02 ---------------------------->>>
                        if (mode == 0)
                        {
                         // -- ADD 2010/06/02 ----------------------------<<<
                            // ADD 2009/04/24 >>>
                            #region 商品仕入取得データクラス
                            goodsSupplierDataWork.EnterpriseCode = monthlyAddUpWork.EnterpriseCode; // 企業コード
                            goodsSupplierDataWork.SectionCode = monthlyAddUpWork.AddUpSecCode; // 拠点コード
                            goodsSupplierDataWork.GoodsMakerCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSMAKERCDRF"));// 商品メーカーコード
                            goodsSupplierDataWork.GoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSNORF"));         // 商品番号
                            goodsSupplierDataWork.BLGoodsCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("BLGOODSCODERF"));  // BL商品コード
                            goodsSupplierDataWork.GoodsMGroup = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSMGROUPRF"));  // 商品中分類コード
                            GoodsSupplierDataWorkList.Add(goodsSupplierDataWork);
                            #endregion

                            #region 単価算出モジュール計算用パラメータ
                            unitPriceCalcParam.SectionCode = monthlyAddUpWork.AddUpSecCode; // 拠点コード
                            unitPriceCalcParam.GoodsMakerCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSMAKERCDRF"));    // 商品メーカーコード
                            unitPriceCalcParam.GoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSNORF"));             // 商品番号
                            unitPriceCalcParam.GoodsRateGrpCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSMGROUPRF")); // 商品中分類コード
                            unitPriceCalcParam.BLGroupCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("BLGROUPCODERF"));      // BLグループコード
                            unitPriceCalcParam.BLGoodsCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("BLGOODSCODERF"));      // BL商品コード
                            //unitPriceCalcParam.SupplierCd = ;
                            unitPriceCalcParam.PriceApplyDate = DateTime.Now;
                            unitPriceCalcParamList.Add(unitPriceCalcParam);
                            #endregion

                            #region 商品連結データリスト
                            goodsUnitData.EnterpriseCode = monthlyAddUpWork.EnterpriseCode; // 企業コード
                            goodsUnitData.GoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSNORF")); // 商品番号
                            goodsUnitData.GoodsMakerCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSMAKERCDRF"));// 商品メーカーコード
                            goodsUnitDataList.Add(goodsUnitData);
                            #endregion
                            // ADD 2009/04/24 <<<
                        } // ADD 2010/06/02
                        #endregion

                    }

                    // ADD 2009/04/24 >>>
                    if (GoodsSupplierDataWorkList.Count > 0)
                    {
                        // 商品仕入先情報取得処理 実行
                        goodsSupplierGetter.GetGoodsMngInfo(ref GoodsSupplierDataWorkList);

                        // 商品仕入先情報取得処理により取得した仕入先を
                        // 単価算出パラメータにセット
                        for (int i = 0; i < GoodsSupplierDataWorkList.Count; i++) // 商品仕入取得データクラス
                        {
                            for (int j = 0; j < unitPriceCalcParamList.Count; j++) // 単価算出モジュール計算用パラメータ
                            {
                                if ((GoodsSupplierDataWorkList[i].GoodsMakerCd == unitPriceCalcParamList[j].GoodsMakerCd) && // 商品メーカー
                                    (GoodsSupplierDataWorkList[i].GoodsNo == unitPriceCalcParamList[j].GoodsNo) &&           // 商品番号
                                    (GoodsSupplierDataWorkList[i].BLGoodsCode == unitPriceCalcParamList[j].BLGoodsCode))     // BL商品コード
                                {
                                    if (GoodsSupplierDataWorkList[i].SupplierCd != 0)
                                    {
                                        unitPriceCalcParamList[j].SupplierCd = GoodsSupplierDataWorkList[i].SupplierCd; // 仕入先セット
                                    }
                                }
                            }
                        }

                        //原価算出処理 実行
                        unitPriceCalculation.CalculateUnitCost(unitPriceCalcParamList, goodsUnitDataList, out unitPriceCalcRetList);

                        // 原価算出処理により取得した原価を
                        // 在庫履歴データクラスにセット
                        for (int i = 0; i < unitPriceCalcRetList.Count; i++) // 単価計算結果
                        {
                            for (int j = 0; j < stockHistoryWorkList.Count; j++) // 在庫履歴データクラス
                            {
                                if ((unitPriceCalcRetList[i].GoodsMakerCd == stockHistoryWorkList[j].GoodsMakerCd) && // 商品メーカー
                                    (unitPriceCalcRetList[i].GoodsNo == stockHistoryWorkList[j].GoodsNo))     // BL商品コード
                                {
                                    // 仕入単価（税抜，浮動）
                                    stockHistoryWorkList[j].StockUnitPriceFl = unitPriceCalcRetList[i].UnitPriceTaxExcFl;
                                    // マシン在庫額 = 在庫総数 × 仕入単価
                                    // 修正 2009/05/25 >>>
                                    //stockHistoryWorkList[j].StockMashinePrice = (long)(stockHistoryWorkList[j].StockTotal * stockHistoryWorkList[j].StockUnitPriceFl);
                                    FracCalc((stockHistoryWorkList[j].StockTotal * stockHistoryWorkList[j].StockUnitPriceFl), 1, FractionProcCd, out calcPrice);
                                    stockHistoryWorkList[j].StockMashinePrice = calcPrice;
                                    // 修正 2009/05/25 <<<

                                    // 修正 2009/07/06 MANTIS ID:13438 >>>
                                    //// 修正 2009/06/08 MANTIS ID:13438 >>>
                                    ////// 自社在庫数 = 前月自社在庫数 + 仕入数 + 仕入返品数 + 調整数 - 売上数 + 売上返品数 
                                    ////stockHistoryWorkList[j].PropertyStockCnt = stockHistoryWorkList[j].LMonthPptyStockCnt + stockHistoryWorkList[j].StockCount + stockHistoryWorkList[j].StockRetGoodsCnt + stockHistoryWorkList[j].AdjustCount
                                    ////                                           - (stockHistoryWorkList[j].SalesCount + stockHistoryWorkList[j].SalesRetGoodsCnt);
                                    //// 自社在庫数 = 前月末在庫数 + 総入荷数 - 総出荷数 + 調整数
                                    //stockHistoryWorkList[j].PropertyStockCnt = stockHistoryWorkList[j].LMonthStockCnt + stockHistoryWorkList[j].TotalArrivalCnt - stockHistoryWorkList[j].TotalShipmentCnt + stockHistoryWorkList[j].AdjustCount;                                  
                                    //// 修正 2009/06/08 <<<
                                    // 修正 2009/07/06 <<<

                                    // 自社在庫金額 = 自社在庫数 ×仕入単価
                                    // 修正 2009/05/25 >>>
                                    //stockHistoryWorkList[j].PropertyStockPrice = (long)(stockHistoryWorkList[j].PropertyStockCnt * stockHistoryWorkList[j].StockUnitPriceFl);
                                    FracCalc(stockHistoryWorkList[j].PropertyStockCnt * stockHistoryWorkList[j].StockUnitPriceFl, 1, FractionProcCd, out calcPrice);
                                    stockHistoryWorkList[j].PropertyStockPrice = calcPrice;
                                    // 修正 2009/05/25 <<<
                                }
                            }
                        }
                    }
                    // ADD 2009/04/24 <<< 
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        #endregion  //[在庫受払履歴データ]

        // ADD 2008.12.22 >>>
        #region [売上仕入月次集計データ作成]　MakeMTtlSalesStockSlip
        /// <summary>
        /// 売上・仕入・在庫移動データから売上仕入月次集計データを取得します
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータクラスワーク</param>
        /// <param name="mTtlSalesStockSlipWorkList">売上仕入集計データList</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 売上・仕入・在庫移動データから売上仕入月次集計データを取得します</br>
        /// <br>Programmer : 23012  畠中 啓次朗</br>
        /// <br>Date       : 2008.12.22</br>
        /// </remarks>
        private int MakeMTtlSalesStockSlip(ref MonthlyAddUpWork monthlyAddUpWork, ref List<MTtlSalesStockSlipWork> mTtlSalesStockSlipWorkList, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            SqlDataReader myReader = null;
            string sqlText = string.Empty;

            int FractionProcCd;

            try
            {
                #region [Select文作成]
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "SALESSTOCKKAY.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "SALESSTOCKKAY.SECTIONCDRF," + Environment.NewLine;
                sqlText += "SALESSTOCKKAY.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "SALESSTOCKKAY.ORDERDIVCDRF," + Environment.NewLine;
                sqlText += "(SALES.SHIPMENTCNTRF - SALES.SHIPMENTRETCNTRF) AS TOTALSALESCOUNTRF,--売上数計" + Environment.NewLine;
                sqlText += "SALES.SALESMONEYRF,--売上金額" + Environment.NewLine;
                sqlText += "SALES.SALESRETGOODSPRICERF,--返品額" + Environment.NewLine;
                sqlText += "SALES.DISCOUNTPRICERF,--値引金額" + Environment.NewLine;
                sqlText += "SALES.GROSSPROFITRF,--粗利金額" + Environment.NewLine;
                sqlText += "(STOCK.STOCKCOUNTRF-STOCK.STOCKRETCOUNTRF) AS  TOTALSTOCKCOUNTRF,--仕入数計 " + Environment.NewLine;
                sqlText += "STOCK.STOCKTOTALPRICERF,--仕入金額合計" + Environment.NewLine;
                sqlText += "STOCK.STOCKRETGOODSPRICERF,--仕入返品額" + Environment.NewLine;
                sqlText += "STOCK.STOCKTOTALDISCOUNTRF,--仕入値引計" + Environment.NewLine;
                sqlText += "SMOVE.FRACTIONPROCCDRF, --端数処理区分" + Environment.NewLine;
                sqlText += "SMOVE.MOVEARRIVALCNTRF,--移動入荷数" + Environment.NewLine;
                sqlText += "SMOVE.MOVEARRIVALPRICERF1,--移動入荷額 切捨て" + Environment.NewLine;
                sqlText += "SMOVE.MOVEARRIVALPRICERF2,--移動入荷額 四捨五入" + Environment.NewLine;
                sqlText += "SMOVE.MOVEARRIVALPRICERF3,--移動入荷額 切上げ" + Environment.NewLine;
                sqlText += "SMOVE.MOVESHIPMENTCNTRF,--移動出荷数" + Environment.NewLine;
                sqlText += "SMOVE.MOVESHIPMENTPRICERF1,--移動出荷額 切捨て" + Environment.NewLine;
                sqlText += "SMOVE.MOVESHIPMENTPRICERF2,--移動出荷額 四捨五入" + Environment.NewLine;
                sqlText += "SMOVE.MOVESHIPMENTPRICERF3 --移動出荷額 切上げ" + Environment.NewLine;
                sqlText += "FROM" + Environment.NewLine;
                sqlText += "(" + Environment.NewLine;
                #region ■結合用KEY作成
                // KEY
                // 企業コード
                // 拠点コード
                // 仕入先コード
                // 在庫取寄区分 0:合計 1:在庫

                #region 売上データ
                // 合計用 KEY作成
                sqlText += " SELECT DISTINCT" + Environment.NewLine;
                sqlText += "  SALESKEY.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  SALESKEY.RESULTSADDUPSECCDRF AS SECTIONCDRF," + Environment.NewLine;
                sqlText += "  SALESDTLKEY.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  0 AS ORDERDIVCDRF" + Environment.NewLine;
                sqlText += " FROM" + Environment.NewLine;
                // -- UPD 2011/03/15 --------------------------------->>>
                //sqlText += "  SALESSLIPRF AS SALESKEY" + Environment.NewLine;
                sqlText += "  SALESSLIPRF AS SALESKEY WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ---------------------------------<<<
                sqlText += " LEFT JOIN" + Environment.NewLine;
                // -- UPD 2011/03/15 --------------------------------->>>
                //sqlText += "  SALESDETAILRF AS SALESDTLKEY" + Environment.NewLine;
                sqlText += "  SALESDETAILRF AS SALESDTLKEY WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ---------------------------------<<<
                sqlText += "  ON  SALESKEY.ENTERPRISECODERF=SALESDTLKEY.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND SALESKEY.ACPTANODRSTATUSRF=SALESDTLKEY.ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += "  AND SALESKEY.SALESSLIPNUMRF=SALESDTLKEY.SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " WHERE" + Environment.NewLine;
                sqlText += "  SALESKEY.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "  AND SALESKEY.RESULTSADDUPSECCDRF = @FINDADDUPSECCD" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "  AND SALESKEY.LOGICALDELETECODERF = 0" + Environment.NewLine;
                sqlText += "  AND SALESKEY.DEBITNOTEDIVRF = 0" + Environment.NewLine;
                sqlText += "  AND SALESKEY.ACPTANODRSTATUSRF=30" + Environment.NewLine;
                sqlText += "  AND SALESDTLKEY.SALESORDERDIVCDRF IS NOT NULL" + Environment.NewLine;
                sqlText += "  AND (SALESKEY.ADDUPADATERF<=@FINDADDUPDATEED" + Environment.NewLine;
                sqlText += "       AND SALESKEY.ADDUPADATERF>@FINDADDUPDATEST)" + Environment.NewLine;
                // 在庫用 KEY作成
                sqlText += " UNION SELECT DISTINCT" + Environment.NewLine;
                sqlText += "  SALESKEY2.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  SALESKEY2.RESULTSADDUPSECCDRF AS SECTIONCDRF," + Environment.NewLine;
                sqlText += "  SALESDTLKEY2.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  1 AS ORDERDIVCDRF" + Environment.NewLine;
                sqlText += " FROM" + Environment.NewLine;
                // -- UPD 2011/03/15 --------------------------------->>>
                //sqlText += "  SALESSLIPRF AS SALESKEY2" + Environment.NewLine;
                sqlText += "  SALESSLIPRF AS SALESKEY2 WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ---------------------------------<<<
                sqlText += " LEFT JOIN" + Environment.NewLine;
                // -- UPD 2011/03/15 --------------------------------->>>
                //sqlText += "  SALESDETAILRF AS SALESDTLKEY2" + Environment.NewLine;
                sqlText += "  SALESDETAILRF AS SALESDTLKEY2 WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ---------------------------------<<<
                sqlText += "  ON  SALESKEY2.ENTERPRISECODERF=SALESDTLKEY2.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND SALESKEY2.ACPTANODRSTATUSRF=SALESDTLKEY2.ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += "  AND SALESKEY2.SALESSLIPNUMRF=SALESDTLKEY2.SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " WHERE" + Environment.NewLine;
                sqlText += "  SALESKEY2.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "  AND SALESKEY2.RESULTSADDUPSECCDRF = @FINDADDUPSECCD" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "  AND SALESKEY2.LOGICALDELETECODERF = 0" + Environment.NewLine;
                sqlText += "  AND SALESKEY2.DEBITNOTEDIVRF = 0" + Environment.NewLine;
                sqlText += "  AND SALESKEY2.ACPTANODRSTATUSRF=30" + Environment.NewLine;
                sqlText += "  AND SALESDTLKEY2.SALESORDERDIVCDRF IS NOT NULL" + Environment.NewLine;
                sqlText += "  AND (SALESKEY2.ADDUPADATERF<=@FINDADDUPDATEED" + Environment.NewLine;
                sqlText += "       AND SALESKEY2.ADDUPADATERF>@FINDADDUPDATEST)" + Environment.NewLine;
                #endregion

                #region 仕入データ
                // 合計用 KEY作成
                sqlText += " UNION SELECT DISTINCT " + Environment.NewLine;
                sqlText += "  STOCKKEY.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  STOCKKEY.STOCKSECTIONCDRF AS SECTIONCDRF," + Environment.NewLine;
                sqlText += "  STOCKKEY.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  0 AS ORDERDIVCDRF" + Environment.NewLine;
                sqlText += " FROM" + Environment.NewLine;
                // -- UPD 2011/03/15 --------------------------------->>>
                //sqlText += "  STOCKSLIPRF AS STOCKKEY " + Environment.NewLine;
                //sqlText += " LEFT JOIN STOCKDETAILRF AS STOCKDTLKEY" + Environment.NewLine;
                sqlText += "  STOCKSLIPRF AS STOCKKEY WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += " LEFT JOIN STOCKDETAILRF AS STOCKDTLKEY WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ---------------------------------<<<
                sqlText += "  ON  STOCKKEY.ENTERPRISECODERF = STOCKDTLKEY.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND STOCKKEY.SUPPLIERFORMALRF = STOCKDTLKEY.SUPPLIERFORMALRF" + Environment.NewLine;
                sqlText += "  AND STOCKKEY.SUPPLIERSLIPNORF = STOCKDTLKEY.SUPPLIERSLIPNORF" + Environment.NewLine;
                sqlText += " WHERE " + Environment.NewLine;
                sqlText += "  STOCKKEY.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "  AND STOCKKEY.STOCKSECTIONCDRF = @FINDADDUPSECCD" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "  AND STOCKKEY.LOGICALDELETECODERF = 0" + Environment.NewLine;
                sqlText += "  AND STOCKKEY.DEBITNOTEDIVRF = 0" + Environment.NewLine;
                sqlText += "  AND STOCKKEY.SUPPLIERFORMALRF = 0" + Environment.NewLine;
                sqlText += "  AND STOCKDTLKEY.STOCKORDERDIVCDRF IS NOT NULL" + Environment.NewLine;
                sqlText += "  AND (STOCKKEY.STOCKADDUPADATERF<=@FINDADDUPDATEED " + Environment.NewLine;
                sqlText += "       AND STOCKKEY.STOCKADDUPADATERF>@FINDADDUPDATEST)  " + Environment.NewLine;
                // 在庫用 KEY作成
                sqlText += " UNION SELECT DISTINCT " + Environment.NewLine;
                sqlText += "  STOCKKEY2.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  STOCKKEY2.STOCKSECTIONCDRF AS SECTIONCDRF," + Environment.NewLine;
                sqlText += "  STOCKKEY2.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  1 AS ORDERDIVCDRF" + Environment.NewLine;
                sqlText += " FROM" + Environment.NewLine;
                // -- UPD 2011/03/15 --------------------------------->>>
                //sqlText += "  STOCKSLIPRF AS STOCKKEY2 " + Environment.NewLine;
                //sqlText += " LEFT JOIN STOCKDETAILRF AS STOCKDTLKEY2" + Environment.NewLine;
                sqlText += "  STOCKSLIPRF AS STOCKKEY2 WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += " LEFT JOIN STOCKDETAILRF AS STOCKDTLKEY2 WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ---------------------------------<<<
                sqlText += "  ON  STOCKKEY2.ENTERPRISECODERF = STOCKDTLKEY2.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND STOCKKEY2.SUPPLIERFORMALRF = STOCKDTLKEY2.SUPPLIERFORMALRF" + Environment.NewLine;
                sqlText += "  AND STOCKKEY2.SUPPLIERSLIPNORF = STOCKDTLKEY2.SUPPLIERSLIPNORF" + Environment.NewLine;
                sqlText += " WHERE " + Environment.NewLine;
                sqlText += "  STOCKKEY2.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "  AND STOCKKEY2.STOCKSECTIONCDRF = @FINDADDUPSECCD" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "  AND STOCKKEY2.LOGICALDELETECODERF = 0" + Environment.NewLine;
                sqlText += "  AND STOCKKEY2.DEBITNOTEDIVRF = 0" + Environment.NewLine;
                sqlText += "  AND STOCKKEY2.SUPPLIERFORMALRF = 0" + Environment.NewLine;
                sqlText += "  AND STOCKDTLKEY2.STOCKORDERDIVCDRF IS NOT NULL" + Environment.NewLine;
                sqlText += "  AND (STOCKKEY2.STOCKADDUPADATERF<=@FINDADDUPDATEED " + Environment.NewLine;
                sqlText += "       AND STOCKKEY2.STOCKADDUPADATERF>@FINDADDUPDATEST)  " + Environment.NewLine;
                #endregion

                #region 在庫移動データ
                // 合計用 KEY作成
                sqlText += " UNION SELECT DISTINCT" + Environment.NewLine;
                sqlText += "  SMOVEKEY.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  (CASE WHEN SMOVEKEY.MOVESTATUSRF=2 THEN SMOVEKEY.BFSECTIONCODERF " + Environment.NewLine;
                sqlText += "   ELSE (CASE WHEN SMOVEKEY.MOVESTATUSRF=9 THEN SMOVEKEY.AFSECTIONCODERF ELSE NUll END ) END)AS SECTIONCODERF," + Environment.NewLine;
                sqlText += "  SMOVEKEY.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  0 AS ORDERDIVCDRF" + Environment.NewLine;
                sqlText += " FROM" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------>>>
                //sqlText += "  STOCKMOVERF AS SMOVEKEY" + Environment.NewLine;
                sqlText += "  STOCKMOVERF AS SMOVEKEY WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------<<<
                sqlText += " WHERE" + Environment.NewLine;
                sqlText += "  SMOVEKEY.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += " AND (CASE WHEN SMOVEKEY.MOVESTATUSRF=2 THEN SMOVEKEY.BFSECTIONCODERF " + Environment.NewLine;
                    sqlText += "   ELSE (CASE WHEN SMOVEKEY.MOVESTATUSRF=9 THEN SMOVEKEY.AFSECTIONCODERF ELSE NUll END ) END) IS NOT NULL  " + Environment.NewLine;
                    sqlText += "  AND (CASE WHEN SMOVEKEY.MOVESTATUSRF=2 THEN SMOVEKEY.BFSECTIONCODERF " + Environment.NewLine;
                    sqlText += "   ELSE (CASE WHEN SMOVEKEY.MOVESTATUSRF=9 THEN SMOVEKEY.AFSECTIONCODERF ELSE NUll END ) END) = @FINDADDUPSECCD     " + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "  AND SMOVEKEY.LOGICALDELETECODERF = 0 " + Environment.NewLine;
                sqlText += "  AND (" + Environment.NewLine;
                sqlText += "        (SMOVEKEY.ARRIVALGOODSDAYRF IS NOT NULL " + Environment.NewLine;
                sqlText += "         AND SMOVEKEY.ARRIVALGOODSDAYRF<=@FINDADDUPDATEED" + Environment.NewLine;
                sqlText += "         AND SMOVEKEY.ARRIVALGOODSDAYRF>@FINDADDUPDATEST) " + Environment.NewLine;
                sqlText += "        OR (SMOVEKEY.ARRIVALGOODSDAYRF IS NULL " + Environment.NewLine;
                sqlText += "          AND SMOVEKEY.SHIPMENTFIXDAYRF IS NOT NULL  " + Environment.NewLine;
                sqlText += "          AND SMOVEKEY.SHIPMENTFIXDAYRF<=@FINDADDUPDATEED" + Environment.NewLine;
                sqlText += "          AND SMOVEKEY.SHIPMENTFIXDAYRF>@FINDADDUPDATEST)" + Environment.NewLine;
                sqlText += "       )" + Environment.NewLine;
                // 在庫用 KEY作成
                sqlText += " UNION SELECT DISTINCT" + Environment.NewLine;
                sqlText += "  SMOVEKEY2.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  (CASE WHEN SMOVEKEY2.MOVESTATUSRF=2 THEN SMOVEKEY2.BFSECTIONCODERF " + Environment.NewLine;
                sqlText += "   ELSE (CASE WHEN SMOVEKEY2.MOVESTATUSRF=9 THEN SMOVEKEY2.AFSECTIONCODERF ELSE NUll END ) END)AS SECTIONCODERF," + Environment.NewLine;
                sqlText += "  SMOVEKEY2.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  1 AS ORDERDIVCDRF" + Environment.NewLine;
                sqlText += " FROM" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------>>>
                //sqlText += "  STOCKMOVERF AS SMOVEKEY2" + Environment.NewLine;
                sqlText += "  STOCKMOVERF AS SMOVEKEY2 WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------<<<
                sqlText += " WHERE" + Environment.NewLine;
                sqlText += "  SMOVEKEY2.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += " AND (CASE WHEN SMOVEKEY2.MOVESTATUSRF=2 THEN SMOVEKEY2.BFSECTIONCODERF " + Environment.NewLine;
                    sqlText += "   ELSE (CASE WHEN SMOVEKEY2.MOVESTATUSRF=9 THEN SMOVEKEY2.AFSECTIONCODERF ELSE NUll END ) END) IS NOT NULL" + Environment.NewLine;
                    sqlText += "  AND (CASE WHEN SMOVEKEY2.MOVESTATUSRF=2 THEN SMOVEKEY2.BFSECTIONCODERF " + Environment.NewLine;
                    sqlText += "   ELSE (CASE WHEN SMOVEKEY2.MOVESTATUSRF=9 THEN SMOVEKEY2.AFSECTIONCODERF ELSE NUll END ) END) = @FINDADDUPSECCD   " + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "  AND SMOVEKEY2.LOGICALDELETECODERF = 0 " + Environment.NewLine;
                sqlText += "  AND (" + Environment.NewLine;
                sqlText += "        (SMOVEKEY2.ARRIVALGOODSDAYRF IS NOT NULL " + Environment.NewLine;
                sqlText += "         AND SMOVEKEY2.ARRIVALGOODSDAYRF<=@FINDADDUPDATEED" + Environment.NewLine;
                sqlText += "         AND SMOVEKEY2.ARRIVALGOODSDAYRF>@FINDADDUPDATEST) " + Environment.NewLine;
                sqlText += "        OR (SMOVEKEY2.ARRIVALGOODSDAYRF IS NULL " + Environment.NewLine;
                sqlText += "          AND SMOVEKEY2.SHIPMENTFIXDAYRF IS NOT NULL  " + Environment.NewLine;
                sqlText += "          AND SMOVEKEY2.SHIPMENTFIXDAYRF<=@FINDADDUPDATEED" + Environment.NewLine;
                sqlText += "          AND SMOVEKEY2.SHIPMENTFIXDAYRF>@FINDADDUPDATEST)" + Environment.NewLine;
                sqlText += "       )" + Environment.NewLine;
                #endregion

                sqlText += ") AS SALESSTOCKKAY" + Environment.NewLine;
                #endregion 

                #region ■売上データ集計
                sqlText += "LEFT JOIN " + Environment.NewLine;
                sqlText += "(" + Environment.NewLine;

                #region 売上データ集計 0:合計
                sqlText += " SELECT" + Environment.NewLine;
                sqlText += "  SALESSLDTL.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  SALESSLDTL.RESULTSADDUPSECCDRF," + Environment.NewLine;
                sqlText += "  SALESSLDTL.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  SALESSLDTL.SALESORDERDIVCDRF," + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN SALESSLDTL.SALESSLIPCDDTLRF = 0 THEN SALESSLDTL.SHIPMENTCNTRF ELSE 0 END) AS SHIPMENTCNTRF, " + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN SALESSLDTL.SALESSLIPCDDTLRF = 1 THEN SALESSLDTL.SHIPMENTCNTRF ELSE 0 END) AS SHIPMENTRETCNTRF," + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN SALESSLDTL.SALESSLIPCDDTLRF = 0 THEN SALESSLDTL.SALESMONEYTAXEXCRF ELSE 0 END) AS SALESMONEYRF,--売上金額" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN SALESSLDTL.SALESSLIPCDDTLRF = 1 THEN SALESSLDTL.SALESMONEYTAXEXCRF ELSE 0 END) AS SALESRETGOODSPRICERF,--返品額" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN SALESSLDTL.SALESSLIPCDDTLRF = 2 THEN SALESSLDTL.SALESMONEYTAXEXCRF ELSE 0 END) AS DISCOUNTPRICERF,--値引金額" + Environment.NewLine;
                sqlText += "  SUM(SALESSLDTL.SALESMONEYTAXEXCRF-SALESSLDTL.COSTRF) AS GROSSPROFITRF --粗利金額" + Environment.NewLine;
                sqlText += " FROM" + Environment.NewLine;
                sqlText += "  (" + Environment.NewLine;
                sqlText += "   SELECT" + Environment.NewLine;
                sqlText += "    SALESSLIP.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "    SALESSLIP.RESULTSADDUPSECCDRF," + Environment.NewLine;
                sqlText += "    SALESDTL.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "    0 AS SALESORDERDIVCDRF," + Environment.NewLine;
                sqlText += "    SALESDTL.SALESSLIPCDDTLRF," + Environment.NewLine;
                sqlText += "    SALESDTL.SHIPMENTCNTRF,    " + Environment.NewLine;
                sqlText += "    SALESDTL.SALESMONEYTAXEXCRF," + Environment.NewLine;
                sqlText += "    SALESDTL.COSTRF   " + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------>>>
                //sqlText += "   FROM SALESSLIPRF AS SALESSLIP" + Environment.NewLine;
                sqlText += "   FROM SALESSLIPRF AS SALESSLIP WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------<<<
                sqlText += "   LEFT JOIN" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------>>>
                //sqlText += "     SALESDETAILRF AS SALESDTL" + Environment.NewLine;
                sqlText += "     SALESDETAILRF AS SALESDTL WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------<<<
                sqlText += "    ON  SALESSLIP.ENTERPRISECODERF=SALESDTL.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "    AND SALESSLIP.ACPTANODRSTATUSRF=SALESDTL.ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += "    AND SALESSLIP.SALESSLIPNUMRF=SALESDTL.SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += "   WHERE" + Environment.NewLine;
                sqlText += "    SALESSLIP.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "    AND SALESSLIP.RESULTSADDUPSECCDRF = @FINDADDUPSECCD" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "    AND SALESSLIP.LOGICALDELETECODERF = 0" + Environment.NewLine;
                sqlText += "    AND SALESSLIP.DEBITNOTEDIVRF = 0" + Environment.NewLine;
                sqlText += "    AND SALESSLIP.ACPTANODRSTATUSRF=30" + Environment.NewLine;
                sqlText += "    AND (SALESDTL.SALESORDERDIVCDRF = 0 OR SALESDTL.SALESORDERDIVCDRF = 1)  " + Environment.NewLine;
                sqlText += "    AND (SALESSLIP.ADDUPADATERF<=@FINDADDUPDATEED" + Environment.NewLine;
                sqlText += "         AND SALESSLIP.ADDUPADATERF>@FINDADDUPDATEST)" + Environment.NewLine;
                sqlText += "  ) AS SALESSLDTL" + Environment.NewLine;
                sqlText += " GROUP BY" + Environment.NewLine;
                sqlText += "  SALESSLDTL.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  SALESSLDTL.RESULTSADDUPSECCDRF," + Environment.NewLine;
                sqlText += "  SALESSLDTL.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  SALESSLDTL.SALESORDERDIVCDRF" + Environment.NewLine;
                #endregion

                #region 売上データ取得 1:在庫
                sqlText += " UNION SELECT" + Environment.NewLine;
                sqlText += "  SALESSLDTL2.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  SALESSLDTL2.RESULTSADDUPSECCDRF," + Environment.NewLine;
                sqlText += "  SALESSLDTL2.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  SALESSLDTL2.SALESORDERDIVCDRF," + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN SALESSLDTL2.SALESSLIPCDDTLRF = 0 THEN SALESSLDTL2.SHIPMENTCNTRF ELSE 0 END) AS SHIPMENTCNTRF, " + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN SALESSLDTL2.SALESSLIPCDDTLRF = 1 THEN SALESSLDTL2.SHIPMENTCNTRF ELSE 0 END) AS SHIPMENTRETCNTRF," + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN SALESSLDTL2.SALESSLIPCDDTLRF = 0 THEN SALESSLDTL2.SALESMONEYTAXEXCRF ELSE 0 END) AS SALESMONEYRF,--売上金額" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN SALESSLDTL2.SALESSLIPCDDTLRF = 1 THEN SALESSLDTL2.SALESMONEYTAXEXCRF ELSE 0 END) AS SALESRETGOODSPRICERF,--返品額" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN SALESSLDTL2.SALESSLIPCDDTLRF = 2 THEN SALESSLDTL2.SALESMONEYTAXEXCRF ELSE 0 END) AS DISCOUNTPRICERF,--値引金額" + Environment.NewLine;
                sqlText += "  SUM(SALESSLDTL2.SALESMONEYTAXEXCRF-SALESSLDTL2.COSTRF) AS GROSSPROFITRF--粗利金額" + Environment.NewLine;
                sqlText += " FROM" + Environment.NewLine;
                sqlText += "  (" + Environment.NewLine;
                sqlText += "   SELECT" + Environment.NewLine;
                sqlText += "    SALESSLIP2.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "    SALESSLIP2.RESULTSADDUPSECCDRF," + Environment.NewLine;
                sqlText += "    SALESDTL2.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "    1 AS SALESORDERDIVCDRF," + Environment.NewLine;
                sqlText += "    SALESDTL2.SALESSLIPCDDTLRF," + Environment.NewLine;
                sqlText += "    SALESDTL2.SHIPMENTCNTRF,    " + Environment.NewLine;
                sqlText += "    SALESDTL2.SALESMONEYTAXEXCRF," + Environment.NewLine;
                sqlText += "    SALESDTL2.COSTRF    " + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------>>>
                //sqlText += "   FROM SALESSLIPRF AS SALESSLIP2" + Environment.NewLine;
                sqlText += "   FROM SALESSLIPRF AS SALESSLIP2 WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------<<<
                sqlText += "   LEFT JOIN" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------>>>
                //sqlText += "     SALESDETAILRF AS SALESDTL2" + Environment.NewLine;
                sqlText += "     SALESDETAILRF AS SALESDTL2 WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------<<<
                sqlText += "    ON  SALESSLIP2.ENTERPRISECODERF=SALESDTL2.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "    AND SALESSLIP2.ACPTANODRSTATUSRF=SALESDTL2.ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += "    AND SALESSLIP2.SALESSLIPNUMRF=SALESDTL2.SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += "   WHERE" + Environment.NewLine;
                sqlText += "    SALESSLIP2.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "    AND SALESSLIP2.RESULTSADDUPSECCDRF = @FINDADDUPSECCD    " + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "    AND SALESSLIP2.LOGICALDELETECODERF = 0" + Environment.NewLine;
                sqlText += "    AND SALESSLIP2.DEBITNOTEDIVRF = 0" + Environment.NewLine;
                sqlText += "    AND SALESSLIP2.ACPTANODRSTATUSRF=30" + Environment.NewLine;
                sqlText += "    AND (SALESDTL2.SALESORDERDIVCDRF = 1)" + Environment.NewLine;
                sqlText += "    AND (SALESSLIP2.ADDUPADATERF<=@FINDADDUPDATEED" + Environment.NewLine;
                sqlText += "         AND SALESSLIP2.ADDUPADATERF>@FINDADDUPDATEST)" + Environment.NewLine;
                sqlText += "  ) AS SALESSLDTL2" + Environment.NewLine;
                sqlText += " GROUP BY" + Environment.NewLine;
                sqlText += "  SALESSLDTL2.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  SALESSLDTL2.RESULTSADDUPSECCDRF," + Environment.NewLine;
                sqlText += "  SALESSLDTL2.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  SALESSLDTL2.SALESORDERDIVCDRF" + Environment.NewLine;
                #endregion

                sqlText += " ) AS SALES" + Environment.NewLine;
                sqlText += " ON SALESSTOCKKAY.ENTERPRISECODERF = SALES.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " AND SALESSTOCKKAY.SECTIONCDRF = SALES.RESULTSADDUPSECCDRF" + Environment.NewLine;
                sqlText += " AND SALESSTOCKKAY.SUPPLIERCDRF = SALES.SUPPLIERCDRF" + Environment.NewLine;
                sqlText += " AND SALESSTOCKKAY.ORDERDIVCDRF = SALES.SALESORDERDIVCDRF" + Environment.NewLine;
                #endregion

                #region ■仕入データ集計
                sqlText += "LEFT JOIN" + Environment.NewLine;
                sqlText += "(" + Environment.NewLine;

                #region 仕入データ取得 0:合計
                sqlText += " SELECT" + Environment.NewLine;
                sqlText += "  STOCKSLDTL.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  STOCKSLDTL.STOCKSECTIONCDRF," + Environment.NewLine;
                sqlText += "  STOCKSLDTL.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  STOCKSLDTL.STOCKORDERDIVCDRF,  " + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKSLDTL.STOCKSLIPCDDTLRF = 0 THEN STOCKSLDTL.STOCKCOUNTRF ELSE 0 END) AS STOCKCOUNTRF, " + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKSLDTL.STOCKSLIPCDDTLRF = 1 THEN STOCKSLDTL.STOCKCOUNTRF ELSE 0 END) AS STOCKRETCOUNTRF, " + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKSLDTL.STOCKSLIPCDDTLRF = 0 THEN STOCKSLDTL.STOCKPRICETAXEXCRF ELSE 0 END) AS STOCKTOTALPRICERF,/*仕入金額合計*/" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKSLDTL.STOCKSLIPCDDTLRF = 1 THEN STOCKSLDTL.STOCKPRICETAXEXCRF ELSE 0 END) AS STOCKRETGOODSPRICERF,/*仕入返品額*/" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKSLDTL.STOCKSLIPCDDTLRF = 2 THEN STOCKSLDTL.STOCKPRICETAXEXCRF ELSE 0 END) AS STOCKTOTALDISCOUNTRF/*仕入値引計*/  " + Environment.NewLine;
                sqlText += " FROM" + Environment.NewLine;
                sqlText += "  (" + Environment.NewLine;
                sqlText += "   SELECT" + Environment.NewLine;
                sqlText += "    STOCKSLIP.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "    STOCKSLIP.STOCKSECTIONCDRF," + Environment.NewLine;
                sqlText += "    STOCKSLIP.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "    0 AS STOCKORDERDIVCDRF,  " + Environment.NewLine;
                sqlText += "    STOCKDTL.STOCKSLIPCDDTLRF," + Environment.NewLine;
                sqlText += "    STOCKDTL.STOCKCOUNTRF," + Environment.NewLine;
                sqlText += "    STOCKDTL.STOCKPRICETAXEXCRF   " + Environment.NewLine;
                sqlText += "   FROM " + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------>>>
                //sqlText += "    STOCKSLIPRF AS STOCKSLIP" + Environment.NewLine;
                //sqlText += "   LEFT JOIN STOCKDETAILRF AS STOCKDTL" + Environment.NewLine;
                sqlText += "    STOCKSLIPRF AS STOCKSLIP WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += "   LEFT JOIN STOCKDETAILRF AS STOCKDTL WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------<<<
                sqlText += "    ON  STOCKSLIP.ENTERPRISECODERF = STOCKDTL.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "    AND STOCKSLIP.SUPPLIERFORMALRF = STOCKDTL.SUPPLIERFORMALRF" + Environment.NewLine;
                sqlText += "    AND STOCKSLIP.SUPPLIERSLIPNORF = STOCKDTL.SUPPLIERSLIPNORF  " + Environment.NewLine;
                sqlText += "   WHERE " + Environment.NewLine;
                sqlText += "    STOCKSLIP.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "    AND STOCKSLIP.STOCKSECTIONCDRF = @FINDADDUPSECCD" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "    AND STOCKSLIP.LOGICALDELETECODERF = 0" + Environment.NewLine;
                sqlText += "    AND STOCKSLIP.DEBITNOTEDIVRF = 0" + Environment.NewLine;
                sqlText += "    AND STOCKSLIP.SUPPLIERFORMALRF = 0" + Environment.NewLine;
                sqlText += "    AND (STOCKDTL.STOCKORDERDIVCDRF = 0 OR STOCKDTL.STOCKORDERDIVCDRF = 1)  " + Environment.NewLine;
                sqlText += "    AND (STOCKSLIP.STOCKADDUPADATERF<=@FINDADDUPDATEED " + Environment.NewLine;
                sqlText += "         AND STOCKSLIP.STOCKADDUPADATERF>@FINDADDUPDATEST)      " + Environment.NewLine;
                sqlText += "  ) AS STOCKSLDTL" + Environment.NewLine;
                sqlText += " GROUP BY " + Environment.NewLine;
                sqlText += "  STOCKSLDTL.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  STOCKSLDTL.STOCKSECTIONCDRF," + Environment.NewLine;
                sqlText += "  STOCKSLDTL.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  STOCKSLDTL.STOCKORDERDIVCDRF" + Environment.NewLine;
                #endregion 

                #region 仕入データ取得 1:在庫
                sqlText += " UNION SELECT" + Environment.NewLine;
                sqlText += "  STOCKSLDTL2.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  STOCKSLDTL2.STOCKSECTIONCDRF," + Environment.NewLine;
                sqlText += "  STOCKSLDTL2.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  STOCKSLDTL2.STOCKORDERDIVCDRF,  " + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKSLDTL2.STOCKSLIPCDDTLRF = 0 THEN STOCKSLDTL2.STOCKCOUNTRF ELSE 0 END) AS STOCKCOUNTRF, " + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKSLDTL2.STOCKSLIPCDDTLRF = 1 THEN STOCKSLDTL2.STOCKCOUNTRF ELSE 0 END) AS STOCKRETCOUNTRF, " + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKSLDTL2.STOCKSLIPCDDTLRF = 0 THEN STOCKSLDTL2.STOCKPRICETAXEXCRF ELSE 0 END) AS STOCKTOTALPRICERF,/*仕入金額合計*/" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKSLDTL2.STOCKSLIPCDDTLRF = 1 THEN STOCKSLDTL2.STOCKPRICETAXEXCRF ELSE 0 END) AS STOCKRETGOODSPRICERF,/*仕入返品額*/" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKSLDTL2.STOCKSLIPCDDTLRF = 2 THEN STOCKSLDTL2.STOCKPRICETAXEXCRF ELSE 0 END) AS STOCKTOTALDISCOUNTRF/*仕入値引計*/  " + Environment.NewLine;
                sqlText += " FROM" + Environment.NewLine;
                sqlText += "  (" + Environment.NewLine;
                sqlText += "   SELECT" + Environment.NewLine;
                sqlText += "    STOCKSLIP.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "    STOCKSLIP.STOCKSECTIONCDRF," + Environment.NewLine;
                sqlText += "    STOCKSLIP.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "    1 AS STOCKORDERDIVCDRF,  " + Environment.NewLine;
                sqlText += "    STOCKDTL.STOCKSLIPCDDTLRF," + Environment.NewLine;
                sqlText += "    STOCKDTL.STOCKCOUNTRF," + Environment.NewLine;
                sqlText += "    STOCKDTL.STOCKPRICETAXEXCRF   " + Environment.NewLine;
                sqlText += "   FROM " + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------>>>
                //sqlText += "    STOCKSLIPRF AS STOCKSLIP" + Environment.NewLine;
                //sqlText += "   LEFT JOIN STOCKDETAILRF AS STOCKDTL" + Environment.NewLine;
                sqlText += "    STOCKSLIPRF AS STOCKSLIP WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += "   LEFT JOIN STOCKDETAILRF AS STOCKDTL WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------<<<
                sqlText += "    ON  STOCKSLIP.ENTERPRISECODERF = STOCKDTL.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "    AND STOCKSLIP.SUPPLIERFORMALRF = STOCKDTL.SUPPLIERFORMALRF" + Environment.NewLine;
                sqlText += "    AND STOCKSLIP.SUPPLIERSLIPNORF = STOCKDTL.SUPPLIERSLIPNORF  " + Environment.NewLine;
                sqlText += "   WHERE " + Environment.NewLine;
                sqlText += "    STOCKSLIP.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "    AND STOCKSLIP.STOCKSECTIONCDRF = @FINDADDUPSECCD" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "    AND STOCKSLIP.LOGICALDELETECODERF = 0" + Environment.NewLine;
                sqlText += "    AND STOCKSLIP.DEBITNOTEDIVRF = 0" + Environment.NewLine;
                sqlText += "    AND STOCKSLIP.SUPPLIERFORMALRF = 0" + Environment.NewLine;
                sqlText += "    AND (STOCKDTL.STOCKORDERDIVCDRF = 1)" + Environment.NewLine;
                sqlText += "    AND (STOCKSLIP.STOCKADDUPADATERF<=@FINDADDUPDATEED" + Environment.NewLine;
                sqlText += "         AND STOCKSLIP.STOCKADDUPADATERF>@FINDADDUPDATEST)    " + Environment.NewLine;
                sqlText += "  ) AS STOCKSLDTL2" + Environment.NewLine;
                sqlText += " GROUP BY " + Environment.NewLine;
                sqlText += "  STOCKSLDTL2.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  STOCKSLDTL2.STOCKSECTIONCDRF," + Environment.NewLine;
                sqlText += "  STOCKSLDTL2.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  STOCKSLDTL2.STOCKORDERDIVCDRF" + Environment.NewLine;
                #endregion

                sqlText += ") AS STOCK" + Environment.NewLine;
                sqlText += " ON SALESSTOCKKAY.ENTERPRISECODERF = STOCK.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " AND SALESSTOCKKAY.SECTIONCDRF = STOCK.STOCKSECTIONCDRF" + Environment.NewLine;
                sqlText += " AND SALESSTOCKKAY.SUPPLIERCDRF = STOCK.SUPPLIERCDRF" + Environment.NewLine;
                sqlText += " AND SALESSTOCKKAY.ORDERDIVCDRF = STOCK.STOCKORDERDIVCDRF" + Environment.NewLine;
                #endregion

                #region ■在庫移動データ集計
                sqlText += "LEFT JOIN" + Environment.NewLine;
                sqlText += "(" + Environment.NewLine;

                #region 在庫移動データ取得 0:合計
                sqlText += " SELECT" + Environment.NewLine;
                sqlText += "  STOCKMOVE.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  STOCKMOVE.SECTIONCODERF," + Environment.NewLine;
                sqlText += "  STOCKMOVE.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  STOCKMOVE.ORDERDIVCDRF," + Environment.NewLine;
                // 修正 2009/05/25 >>>
                //sqlText += "  SUM(CASE WHEN STOCKMOVE.MOVESTATUSRF = 9 THEN STOCKMOVE.MOVECOUNTRF ELSE 0 END) AS MOVEARRIVALCNTRF,--移動入荷数" + Environment.NewLine;
                //sqlText += "  SUM(CASE WHEN STOCKMOVE.MOVESTATUSRF = 9 THEN CAST((STOCKMOVE.MOVECOUNTRF * STOCKMOVE.STOCKUNITPRICEFLRF) AS BIGINT)  ELSE 0 END) AS MOVEARRIVALPRICERF1,--移動入荷額 切捨て" + Environment.NewLine;
                //sqlText += "  SUM(CASE WHEN STOCKMOVE.MOVESTATUSRF = 9 THEN CAST(((STOCKMOVE.MOVECOUNTRF * STOCKMOVE.STOCKUNITPRICEFLRF) + 0.5) AS BIGINT)  ELSE 0 END) AS MOVEARRIVALPRICERF2,--移動入荷額 四捨五入" + Environment.NewLine;
                //sqlText += "  SUM(CASE WHEN STOCKMOVE.MOVESTATUSRF = 9 THEN CAST(((STOCKMOVE.MOVECOUNTRF * STOCKMOVE.STOCKUNITPRICEFLRF) + 0.9) AS BIGINT)  ELSE 0 END) AS MOVEARRIVALPRICERF3,--移動入荷額 切上げ" + Environment.NewLine;
                //sqlText += "  SUM(CASE WHEN STOCKMOVE.MOVESTATUSRF = 2 THEN STOCKMOVE.MOVECOUNTRF ELSE 0 END) AS MOVESHIPMENTCNTRF,--移動出荷数" + Environment.NewLine;
                //sqlText += "  SUM(CASE WHEN STOCKMOVE.MOVESTATUSRF = 2 THEN CAST((STOCKMOVE.MOVECOUNTRF * STOCKMOVE.STOCKUNITPRICEFLRF) AS BIGINT)  ELSE 0 END) AS MOVESHIPMENTPRICERF1,--移動出荷額 切捨て" + Environment.NewLine;
                //sqlText += "  SUM(CASE WHEN STOCKMOVE.MOVESTATUSRF = 2 THEN CAST(((STOCKMOVE.MOVECOUNTRF * STOCKMOVE.STOCKUNITPRICEFLRF) + 0.5) AS BIGINT)  ELSE 0 END) AS MOVESHIPMENTPRICERF2,--移動出荷額 四捨五入" + Environment.NewLine;
                //sqlText += "  SUM(CASE WHEN STOCKMOVE.MOVESTATUSRF = 2 THEN CAST(((STOCKMOVE.MOVECOUNTRF * STOCKMOVE.STOCKUNITPRICEFLRF) + 0.9) AS BIGINT)  ELSE 0 END) AS MOVESHIPMENTPRICERF3,--移動出荷額 切上げ" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE.STOCKMOVEFORMALRF=3 OR STOCKMOVE.STOCKMOVEFORMALRF=4 THEN STOCKMOVE.MOVECOUNTRF ELSE 0 END) AS MOVEARRIVALCNTRF,--移動入荷数" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE.STOCKMOVEFORMALRF=3 OR STOCKMOVE.STOCKMOVEFORMALRF=4 THEN CAST((STOCKMOVE.MOVECOUNTRF * STOCKMOVE.STOCKUNITPRICEFLRF) AS BIGINT)  ELSE 0 END) AS MOVEARRIVALPRICERF1,--移動入荷額 切捨て" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE.STOCKMOVEFORMALRF=3 OR STOCKMOVE.STOCKMOVEFORMALRF=4 THEN CAST(((STOCKMOVE.MOVECOUNTRF * STOCKMOVE.STOCKUNITPRICEFLRF) + 0.5) AS BIGINT)  ELSE 0 END) AS MOVEARRIVALPRICERF2,--移動入荷額 四捨五入" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE.STOCKMOVEFORMALRF=3 OR STOCKMOVE.STOCKMOVEFORMALRF=4 THEN CAST(((STOCKMOVE.MOVECOUNTRF * STOCKMOVE.STOCKUNITPRICEFLRF) + 0.9) AS BIGINT)  ELSE 0 END) AS MOVEARRIVALPRICERF3,--移動入荷額 切上げ" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE.STOCKMOVEFORMALRF=1 OR STOCKMOVE.STOCKMOVEFORMALRF=2 THEN STOCKMOVE.MOVECOUNTRF ELSE 0 END) AS MOVESHIPMENTCNTRF,--移動出荷数" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE.STOCKMOVEFORMALRF=1 OR STOCKMOVE.STOCKMOVEFORMALRF=2 THEN CAST((STOCKMOVE.MOVECOUNTRF * STOCKMOVE.STOCKUNITPRICEFLRF) AS BIGINT)  ELSE 0 END) AS MOVESHIPMENTPRICERF1,--移動出荷額 切捨て" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE.STOCKMOVEFORMALRF=1 OR STOCKMOVE.STOCKMOVEFORMALRF=2 THEN CAST(((STOCKMOVE.MOVECOUNTRF * STOCKMOVE.STOCKUNITPRICEFLRF) + 0.5) AS BIGINT)  ELSE 0 END) AS MOVESHIPMENTPRICERF2,--移動出荷額 四捨五入" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE.STOCKMOVEFORMALRF=1 OR STOCKMOVE.STOCKMOVEFORMALRF=2 THEN CAST(((STOCKMOVE.MOVECOUNTRF * STOCKMOVE.STOCKUNITPRICEFLRF) + 0.9) AS BIGINT)  ELSE 0 END) AS MOVESHIPMENTPRICERF3,--移動出荷額 切上げ" + Environment.NewLine;
                // 修正 2009/05/25 <<<
                sqlText += "  MNGTTLST.FRACTIONPROCCDRF --端数処理区分" + Environment.NewLine;
                sqlText += " FROM" + Environment.NewLine;
                sqlText += " (" + Environment.NewLine;
                sqlText += "  SELECT" + Environment.NewLine;
                sqlText += "   SUBSTOCKMOVE.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "   SUBSTOCKMOVE.LOGICALDELETECODERF," + Environment.NewLine;
                //  修正 2009/05/25 >>>
                //sqlText += "   (CASE WHEN SUBSTOCKMOVE.MOVESTATUSRF=2 THEN SUBSTOCKMOVE.BFSECTIONCODERF ELSE (CASE WHEN SUBSTOCKMOVE.MOVESTATUSRF=9 THEN SUBSTOCKMOVE.AFSECTIONCODERF ELSE NUll END ) END)AS SECTIONCODERF," + Environment.NewLine;
                sqlText += "   (CASE WHEN SUBSTOCKMOVE.STOCKMOVEFORMALRF=1 OR SUBSTOCKMOVE.STOCKMOVEFORMALRF=2 THEN SUBSTOCKMOVE.BFSECTIONCODERF " + Environment.NewLine;
                sqlText += "    ELSE (CASE WHEN SUBSTOCKMOVE.STOCKMOVEFORMALRF=3 OR SUBSTOCKMOVE.STOCKMOVEFORMALRF=4 THEN SUBSTOCKMOVE.AFSECTIONCODERF ELSE NUll END ) END)AS SECTIONCODERF," + Environment.NewLine;
                // 修正 2009/05/25 <<<
                sqlText += "   SUBSTOCKMOVE.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "   0 AS ORDERDIVCDRF," + Environment.NewLine;
                sqlText += "   SUBSTOCKMOVE.STOCKMOVEFORMALRF," + Environment.NewLine; // ADD 2009/05/25
                sqlText += "   SUBSTOCKMOVE.MOVESTATUSRF," + Environment.NewLine;
                sqlText += "   SUBSTOCKMOVE.MOVECOUNTRF," + Environment.NewLine;
                sqlText += "   SUBSTOCKMOVE.STOCKUNITPRICEFLRF," + Environment.NewLine;
                sqlText += "   SUBSTOCKMOVE.ARRIVALGOODSDAYRF," + Environment.NewLine;
                sqlText += "   SUBSTOCKMOVE.SHIPMENTFIXDAYRF" + Environment.NewLine;
                sqlText += "  FROM " + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------>>>
                //sqlText += "   STOCKMOVERF AS SUBSTOCKMOVE" + Environment.NewLine;
                sqlText += "   STOCKMOVERF AS SUBSTOCKMOVE WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------<<<
                sqlText += " )AS STOCKMOVE" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------>>>
                //sqlText += " LEFT JOIN STOCKMNGTTLSTRF AS MNGTTLST" + Environment.NewLine;
                sqlText += " LEFT JOIN STOCKMNGTTLSTRF AS MNGTTLST WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------<<<
                sqlText += "  ON MNGTTLST.ENTERPRISECODERF = STOCKMOVE.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND MNGTTLST.SECTIONCODERF = '00'" + Environment.NewLine;
                sqlText += " WHERE  " + Environment.NewLine;
                sqlText += "  STOCKMOVE.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "  AND STOCKMOVE.SECTIONCODERF = @FINDADDUPSECCD" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "  AND STOCKMOVE.LOGICALDELETECODERF = 0" + Environment.NewLine;
                sqlText += "  AND (STOCKMOVE.SECTIONCODERF IS NOT NULL)" + Environment.NewLine;
                sqlText += "  AND (" + Environment.NewLine;
                // 修正 2009/05/25 >>>
                //sqlText += "        (STOCKMOVE.ARRIVALGOODSDAYRF IS NOT NULL " + Environment.NewLine;
                //sqlText += "         AND STOCKMOVE.ARRIVALGOODSDAYRF<=@FINDADDUPDATEED" + Environment.NewLine;
                //sqlText += "         AND STOCKMOVE.ARRIVALGOODSDAYRF>@FINDADDUPDATEST) " + Environment.NewLine;
                //sqlText += "        OR (STOCKMOVE.ARRIVALGOODSDAYRF IS NULL " + Environment.NewLine;
                //sqlText += "          AND STOCKMOVE.SHIPMENTFIXDAYRF IS NOT NULL  " + Environment.NewLine;
                //sqlText += "          AND STOCKMOVE.SHIPMENTFIXDAYRF<=@FINDADDUPDATEED" + Environment.NewLine;
                //sqlText += "          AND STOCKMOVE.SHIPMENTFIXDAYRF>@FINDADDUPDATEST)" + Environment.NewLine;
                sqlText += "        ((STOCKMOVE.STOCKMOVEFORMALRF=3 OR STOCKMOVE.STOCKMOVEFORMALRF=4) " + Environment.NewLine;
                sqlText += "         AND (STOCKMOVE.ARRIVALGOODSDAYRF IS NOT NULL " + Environment.NewLine;
                sqlText += "         AND STOCKMOVE.ARRIVALGOODSDAYRF<=@FINDADDUPDATEED" + Environment.NewLine;
                sqlText += "         AND STOCKMOVE.ARRIVALGOODSDAYRF>@FINDADDUPDATEST)) " + Environment.NewLine;
                sqlText += "        OR  " + Environment.NewLine;
                sqlText += "        (( STOCKMOVE.STOCKMOVEFORMALRF=1 OR STOCKMOVE.STOCKMOVEFORMALRF=2) " + Environment.NewLine;
                sqlText += "          AND( STOCKMOVE.SHIPMENTFIXDAYRF IS NOT NULL  " + Environment.NewLine;
                sqlText += "          AND STOCKMOVE.SHIPMENTFIXDAYRF<=@FINDADDUPDATEED" + Environment.NewLine;
                sqlText += "          AND STOCKMOVE.SHIPMENTFIXDAYRF>@FINDADDUPDATEST))" + Environment.NewLine;
                // 修正 2009/05/25 <<<
                sqlText += "       )" + Environment.NewLine;
                sqlText += " GROUP BY " + Environment.NewLine;
                sqlText += "  STOCKMOVE.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  STOCKMOVE.SECTIONCODERF," + Environment.NewLine;
                sqlText += "  STOCKMOVE.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  STOCKMOVE.ORDERDIVCDRF," + Environment.NewLine;
                sqlText += "  MNGTTLST.FRACTIONPROCCDRF --端数処理区分 " + Environment.NewLine;
                #endregion

                #region 在庫移動データ取得 1:在庫 
                sqlText += " UNION SELECT" + Environment.NewLine;
                sqlText += "  STOCKMOVE2.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  STOCKMOVE2.SECTIONCODERF," + Environment.NewLine;
                sqlText += "  STOCKMOVE2.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  STOCKMOVE2.ORDERDIVCDRF," + Environment.NewLine;
                // 修正 2009/05/25 >>>
                //sqlText += "  SUM(CASE WHEN STOCKMOVE2.MOVESTATUSRF = 9 THEN STOCKMOVE2.MOVECOUNTRF ELSE 0 END) AS MOVEARRIVALCNTRF,--移動入荷数" + Environment.NewLine;
                //sqlText += "  SUM(CASE WHEN STOCKMOVE2.MOVESTATUSRF = 9 THEN CAST((STOCKMOVE2.MOVECOUNTRF * STOCKMOVE2.STOCKUNITPRICEFLRF) AS BIGINT)  ELSE 0 END) AS MOVEARRIVALPRICERF1,--移動入荷額 切捨て" + Environment.NewLine;
                //sqlText += "  SUM(CASE WHEN STOCKMOVE2.MOVESTATUSRF = 9 THEN CAST(((STOCKMOVE2.MOVECOUNTRF * STOCKMOVE2.STOCKUNITPRICEFLRF) + 0.5) AS BIGINT)  ELSE 0 END) AS MOVEARRIVALPRICERF2,--移動入荷額 四捨五入" + Environment.NewLine;
                //sqlText += "  SUM(CASE WHEN STOCKMOVE2.MOVESTATUSRF = 9 THEN CAST(((STOCKMOVE2.MOVECOUNTRF * STOCKMOVE2.STOCKUNITPRICEFLRF) + 0.9) AS BIGINT)  ELSE 0 END) AS MOVEARRIVALPRICERF3,--移動入荷額 切上げ" + Environment.NewLine;
                //sqlText += "  SUM(CASE WHEN STOCKMOVE2.MOVESTATUSRF = 2 THEN STOCKMOVE2.MOVECOUNTRF ELSE 0 END) AS MOVESHIPMENTCNTRF,--移動出荷数" + Environment.NewLine;
                //sqlText += "  SUM(CASE WHEN STOCKMOVE2.MOVESTATUSRF = 2 THEN CAST((STOCKMOVE2.MOVECOUNTRF * STOCKMOVE2.STOCKUNITPRICEFLRF) AS BIGINT)  ELSE 0 END) AS MOVESHIPMENTPRICERF1,--移動出荷額 切捨て" + Environment.NewLine;
                //sqlText += "  SUM(CASE WHEN STOCKMOVE2.MOVESTATUSRF = 2 THEN CAST(((STOCKMOVE2.MOVECOUNTRF * STOCKMOVE2.STOCKUNITPRICEFLRF) + 0.5) AS BIGINT)  ELSE 0 END) AS MOVESHIPMENTPRICERF2,--移動出荷額 四捨五入" + Environment.NewLine;
                //sqlText += "  SUM(CASE WHEN STOCKMOVE2.MOVESTATUSRF = 2 THEN CAST(((STOCKMOVE2.MOVECOUNTRF * STOCKMOVE2.STOCKUNITPRICEFLRF) + 0.9) AS BIGINT)  ELSE 0 END) AS MOVESHIPMENTPRICERF3,--移動出荷額 切上げ" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE2.STOCKMOVEFORMALRF=3 OR STOCKMOVE2.STOCKMOVEFORMALRF=4 THEN STOCKMOVE2.MOVECOUNTRF ELSE 0 END) AS MOVEARRIVALCNTRF,--移動入荷数" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE2.STOCKMOVEFORMALRF=3 OR STOCKMOVE2.STOCKMOVEFORMALRF=4 THEN CAST((STOCKMOVE2.MOVECOUNTRF * STOCKMOVE2.STOCKUNITPRICEFLRF) AS BIGINT)  ELSE 0 END) AS MOVEARRIVALPRICERF1,--移動入荷額 切捨て" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE2.STOCKMOVEFORMALRF=3 OR STOCKMOVE2.STOCKMOVEFORMALRF=4 THEN CAST(((STOCKMOVE2.MOVECOUNTRF * STOCKMOVE2.STOCKUNITPRICEFLRF) + 0.5) AS BIGINT)  ELSE 0 END) AS MOVEARRIVALPRICERF2,--移動入荷額 四捨五入" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE2.STOCKMOVEFORMALRF=3 OR STOCKMOVE2.STOCKMOVEFORMALRF=4 THEN CAST(((STOCKMOVE2.MOVECOUNTRF * STOCKMOVE2.STOCKUNITPRICEFLRF) + 0.9) AS BIGINT)  ELSE 0 END) AS MOVEARRIVALPRICERF3,--移動入荷額 切上げ" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE2.STOCKMOVEFORMALRF=1 OR STOCKMOVE2.STOCKMOVEFORMALRF=2 THEN STOCKMOVE2.MOVECOUNTRF ELSE 0 END) AS MOVESHIPMENTCNTRF,--移動出荷数" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE2.STOCKMOVEFORMALRF=1 OR STOCKMOVE2.STOCKMOVEFORMALRF=2 THEN CAST((STOCKMOVE2.MOVECOUNTRF * STOCKMOVE2.STOCKUNITPRICEFLRF) AS BIGINT)  ELSE 0 END) AS MOVESHIPMENTPRICERF1,--移動出荷額 切捨て" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE2.STOCKMOVEFORMALRF=1 OR STOCKMOVE2.STOCKMOVEFORMALRF=2 THEN CAST(((STOCKMOVE2.MOVECOUNTRF * STOCKMOVE2.STOCKUNITPRICEFLRF) + 0.5) AS BIGINT)  ELSE 0 END) AS MOVESHIPMENTPRICERF2,--移動出荷額 四捨五入" + Environment.NewLine;
                sqlText += "  SUM(CASE WHEN STOCKMOVE2.STOCKMOVEFORMALRF=1 OR STOCKMOVE2.STOCKMOVEFORMALRF=2 THEN CAST(((STOCKMOVE2.MOVECOUNTRF * STOCKMOVE2.STOCKUNITPRICEFLRF) + 0.9) AS BIGINT)  ELSE 0 END) AS MOVESHIPMENTPRICERF3,--移動出荷額 切上げ" + Environment.NewLine;
                // 修正 2009/05/25 <<<
                sqlText += "  MNGTTLST.FRACTIONPROCCDRF --端数処理区分" + Environment.NewLine;
                sqlText += " FROM" + Environment.NewLine;
                sqlText += " (" + Environment.NewLine;
                sqlText += "  SELECT" + Environment.NewLine;
                sqlText += "   SUBSTOCKMOVE.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "   SUBSTOCKMOVE.LOGICALDELETECODERF," + Environment.NewLine;
                // 修正 2009/05/25 >>>
                //sqlText += "   (CASE WHEN SUBSTOCKMOVE.MOVESTATUSRF=2 THEN SUBSTOCKMOVE.BFSECTIONCODERF ELSE (CASE WHEN SUBSTOCKMOVE.MOVESTATUSRF=9 THEN SUBSTOCKMOVE.AFSECTIONCODERF ELSE NUll END ) END)AS SECTIONCODERF," + Environment.NewLine;
                sqlText += "   (CASE WHEN SUBSTOCKMOVE.STOCKMOVEFORMALRF=1 OR SUBSTOCKMOVE.STOCKMOVEFORMALRF=2 THEN SUBSTOCKMOVE.BFSECTIONCODERF " + Environment.NewLine;
                sqlText += "    ELSE (CASE WHEN SUBSTOCKMOVE.STOCKMOVEFORMALRF=3 OR SUBSTOCKMOVE.STOCKMOVEFORMALRF=4 THEN SUBSTOCKMOVE.AFSECTIONCODERF ELSE NUll END ) END)AS SECTIONCODERF," + Environment.NewLine;
                // 修正 2009/05/25 <<<
                sqlText += "   SUBSTOCKMOVE.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "   1 AS ORDERDIVCDRF," + Environment.NewLine;
                sqlText += "   SUBSTOCKMOVE.STOCKMOVEFORMALRF," + Environment.NewLine; // ADD 2009/05/25
                sqlText += "   SUBSTOCKMOVE.MOVESTATUSRF," + Environment.NewLine;
                sqlText += "   SUBSTOCKMOVE.MOVECOUNTRF," + Environment.NewLine;
                sqlText += "   SUBSTOCKMOVE.STOCKUNITPRICEFLRF," + Environment.NewLine;
                sqlText += "   SUBSTOCKMOVE.ARRIVALGOODSDAYRF," + Environment.NewLine;
                sqlText += "   SUBSTOCKMOVE.SHIPMENTFIXDAYRF   " + Environment.NewLine;
                sqlText += "  FROM " + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------>>>
                //sqlText += "   STOCKMOVERF AS SUBSTOCKMOVE" + Environment.NewLine;
                sqlText += "   STOCKMOVERF AS SUBSTOCKMOVE WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------<<<
                // 修正 2009/05/25 >>>
                // 在庫マスタ存在チェックが必要
                // 在庫管理全体設定マスタ[StockMngTtlStRF]・在庫移動確定区分[StockMoveFixCodeRF] = 2:入荷確定なし
                // 在庫移動データ[StockMoveRF]・在庫移動形式[StockMoveFormalRF] = 1:在庫移動(出庫) or 3:在庫移動(入庫)
                // -- UPD 2011/03/15 ------------------------>>>
                //sqlText += " LEFT JOIN STOCKMNGTTLSTRF AS MNGTTLST" + Environment.NewLine;
                sqlText += " LEFT JOIN STOCKMNGTTLSTRF AS MNGTTLST WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------<<<
                sqlText += "  ON MNGTTLST.ENTERPRISECODERF = SUBSTOCKMOVE.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND MNGTTLST.SECTIONCODERF = '00'" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------>>>
                //sqlText += " LEFT JOIN STOCKRF AS STK" + Environment.NewLine;
                sqlText += " LEFT JOIN STOCKRF AS STK WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------<<<
                sqlText += "  ON MNGTTLST.STOCKMOVEFIXCODERF = 2" + Environment.NewLine;
                sqlText += "  AND SUBSTOCKMOVE.ENTERPRISECODERF = STK.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND SUBSTOCKMOVE.GOODSMAKERCDRF = STK.GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += "  AND SUBSTOCKMOVE.GOODSNORF = STK.GOODSNORF" + Environment.NewLine;
                sqlText += "  AND (CASE WHEN SUBSTOCKMOVE.STOCKMOVEFORMALRF=1 THEN SUBSTOCKMOVE.BFENTERWAREHCODERF " + Environment.NewLine;
                sqlText += "     ELSE (CASE WHEN SUBSTOCKMOVE.STOCKMOVEFORMALRF=3 THEN SUBSTOCKMOVE.AFENTERWAREHCODERF ELSE NUll END ) END)= STK.WAREHOUSECODERF" + Environment.NewLine;
                sqlText += " WHERE" + Environment.NewLine;
                sqlText += "  (" + Environment.NewLine;
                sqlText += "   (MNGTTLST.STOCKMOVEFIXCODERF = 2" + Environment.NewLine;
                sqlText += "    AND (SUBSTOCKMOVE.STOCKMOVEFORMALRF=1 OR SUBSTOCKMOVE.STOCKMOVEFORMALRF=3)" + Environment.NewLine;
                sqlText += "    AND STK.WAREHOUSECODERF IS NOT NULL)" + Environment.NewLine;
                sqlText += "   OR" + Environment.NewLine;
                sqlText += "   (MNGTTLST.STOCKMOVEFIXCODERF = 2" + Environment.NewLine;
                sqlText += "    AND (SUBSTOCKMOVE.STOCKMOVEFORMALRF=2 OR SUBSTOCKMOVE.STOCKMOVEFORMALRF=4)" + Environment.NewLine;
                sqlText += "    AND STK.WAREHOUSECODERF IS  NULL)" + Environment.NewLine;
                sqlText += "   OR " + Environment.NewLine;
                sqlText += "   (MNGTTLST.STOCKMOVEFIXCODERF = 1" + Environment.NewLine;
                sqlText += "   AND STK.WAREHOUSECODERF IS NULL)" + Environment.NewLine;
                sqlText += "  )" + Environment.NewLine;
                // 修正 2009/05/25 <<<
                sqlText += " )AS STOCKMOVE2" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------>>>
                //sqlText += " LEFT JOIN STOCKMNGTTLSTRF AS MNGTTLST" + Environment.NewLine;
                sqlText += " LEFT JOIN STOCKMNGTTLSTRF AS MNGTTLST WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2011/03/15 ------------------------<<<
                sqlText += "  ON MNGTTLST.ENTERPRISECODERF = STOCKMOVE2.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND MNGTTLST.SECTIONCODERF = '00'" + Environment.NewLine;
                sqlText += " WHERE  " + Environment.NewLine;
                sqlText += "  STOCKMOVE2.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "  AND STOCKMOVE2.SECTIONCODERF = @FINDADDUPSECCD" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                sqlText += "  AND STOCKMOVE2.LOGICALDELETECODERF = 0" + Environment.NewLine;
                sqlText += "  AND (STOCKMOVE2.SECTIONCODERF IS NOT NULL)" + Environment.NewLine;
                sqlText += "  AND (" + Environment.NewLine;
                // 修正 2009/05/25 >>>
                //sqlText += "        (STOCKMOVE2.ARRIVALGOODSDAYRF IS NOT NULL " + Environment.NewLine;
                //sqlText += "         AND STOCKMOVE2.ARRIVALGOODSDAYRF<=@FINDADDUPDATEED" + Environment.NewLine;
                //sqlText += "         AND STOCKMOVE2.ARRIVALGOODSDAYRF>@FINDADDUPDATEST) " + Environment.NewLine;
                //sqlText += "        OR (STOCKMOVE2.ARRIVALGOODSDAYRF IS NULL " + Environment.NewLine;
                //sqlText += "          AND STOCKMOVE2.SHIPMENTFIXDAYRF IS NOT NULL  " + Environment.NewLine;
                //sqlText += "          AND STOCKMOVE2.SHIPMENTFIXDAYRF<=@FINDADDUPDATEED" + Environment.NewLine;
                //sqlText += "          AND STOCKMOVE2.SHIPMENTFIXDAYRF>@FINDADDUPDATEST)" + Environment.NewLine;
                sqlText += "        ((STOCKMOVE2.STOCKMOVEFORMALRF=3 OR STOCKMOVE2.STOCKMOVEFORMALRF=4) " + Environment.NewLine;
                sqlText += "         AND (STOCKMOVE2.ARRIVALGOODSDAYRF IS NOT NULL " + Environment.NewLine;
                sqlText += "         AND STOCKMOVE2.ARRIVALGOODSDAYRF<=@FINDADDUPDATEED" + Environment.NewLine;
                sqlText += "         AND STOCKMOVE2.ARRIVALGOODSDAYRF>@FINDADDUPDATEST)) " + Environment.NewLine;
                sqlText += "        OR  " + Environment.NewLine;
                sqlText += "        (( STOCKMOVE2.STOCKMOVEFORMALRF=1 OR STOCKMOVE2.STOCKMOVEFORMALRF=2) " + Environment.NewLine;
                sqlText += "          AND( STOCKMOVE2.SHIPMENTFIXDAYRF IS NOT NULL  " + Environment.NewLine;
                sqlText += "          AND STOCKMOVE2.SHIPMENTFIXDAYRF<=@FINDADDUPDATEED" + Environment.NewLine;
                sqlText += "          AND STOCKMOVE2.SHIPMENTFIXDAYRF>@FINDADDUPDATEST))" + Environment.NewLine;
                // 修正 2009/05/25 <<<
                sqlText += "       )" + Environment.NewLine;
                sqlText += " GROUP BY " + Environment.NewLine;
                sqlText += "  STOCKMOVE2.ENTERPRISECODERF," + Environment.NewLine;
                sqlText += "  STOCKMOVE2.SECTIONCODERF," + Environment.NewLine;
                sqlText += "  STOCKMOVE2.SUPPLIERCDRF," + Environment.NewLine;
                sqlText += "  STOCKMOVE2.ORDERDIVCDRF," + Environment.NewLine;
                sqlText += "  MNGTTLST.FRACTIONPROCCDRF --端数処理区分" + Environment.NewLine;
                #endregion

                sqlText += ") AS SMOVE" + Environment.NewLine;
                sqlText += " ON SALESSTOCKKAY.ENTERPRISECODERF = SMOVE.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " AND SALESSTOCKKAY.SECTIONCDRF = SMOVE.SECTIONCODERF" + Environment.NewLine;
                sqlText += " AND SALESSTOCKKAY.SUPPLIERCDRF = SMOVE.SUPPLIERCDRF" + Environment.NewLine;
                sqlText += " AND SALESSTOCKKAY.ORDERDIVCDRF = SMOVE.ORDERDIVCDRF" + Environment.NewLine;
                #endregion

                #endregion  //[Select文作成]

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection))
                {
                    #region Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDateSt = sqlCommand.Parameters.Add("@FINDADDUPDATEST", SqlDbType.Int);
                    SqlParameter findParaAddUpDateEd = sqlCommand.Parameters.Add("@FINDADDUPDATEED", SqlDbType.Int);
                    #endregion

                    #region Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    findParaAddUpDateEd.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpWork.AddUpDate);
                    if (monthlyAddUpWork.AddUpDateSt == DateTime.MinValue)
                    {
                        findParaAddUpDateSt.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(new DateTime(1000,01,01));
                    }
                    else
                    {
                        findParaAddUpDateSt.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpWork.AddUpDateSt);
                    }
                    #endregion

                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCd = sqlCommand.Parameters.Add("@FINDADDUPSECCD", SqlDbType.NChar);
                        findParaAddUpSecCd.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }
                    // 修正 2009/04/02 <<<

                    sqlCommand.CommandTimeout = TimeOut; // ADD 2011/03/16
                    myReader = sqlCommand.ExecuteReader();

                    while (myReader.Read())
                    {
                        #region 結果セット
                        MTtlSalesStockSlipWork mTtlSalesStockSlipWork = new MTtlSalesStockSlipWork();
                        mTtlSalesStockSlipWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));
                        mTtlSalesStockSlipWork.LogicalDeleteCode = 0;
                        mTtlSalesStockSlipWork.AddUpSecCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SECTIONCDRF"));
                        mTtlSalesStockSlipWork.AddUpYearMonth = TDateTime.DateTimeToLongDate(monthlyAddUpWork.AddUpYearMonth);
                        mTtlSalesStockSlipWork.RsltTtlDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ORDERDIVCDRF"));
                        mTtlSalesStockSlipWork.CustomerCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPLIERCDRF"));
                        mTtlSalesStockSlipWork.TotalSalesCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TOTALSALESCOUNTRF"));
                        mTtlSalesStockSlipWork.SalesMoney = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESMONEYRF"));
                        mTtlSalesStockSlipWork.SalesRetGoodsPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESRETGOODSPRICERF"));
                        mTtlSalesStockSlipWork.DiscountPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("DISCOUNTPRICERF"));
                        mTtlSalesStockSlipWork.GrossProfit = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("GROSSPROFITRF"));
                        mTtlSalesStockSlipWork.StockTotalPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("STOCKTOTALPRICERF"));
                        mTtlSalesStockSlipWork.TotalStockCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TOTALSTOCKCOUNTRF"));
                        mTtlSalesStockSlipWork.StockRetGoodsPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("STOCKRETGOODSPRICERF"));
                        mTtlSalesStockSlipWork.StockTotalDiscount = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("STOCKTOTALDISCOUNTRF"));
                        mTtlSalesStockSlipWork.MoveArrivalCnt = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("MOVEARRIVALCNTRF"));
                        mTtlSalesStockSlipWork.MoveShipmentCnt = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("MOVESHIPMENTCNTRF"));

                        // 在庫全体設定 端数処理区分取得
                        FractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FRACTIONPROCCDRF"));
                        if (FractionProcCd == 1) // 切り捨て
                        {
                            mTtlSalesStockSlipWork.MoveShipmentPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("MOVESHIPMENTPRICERF1"));
                            mTtlSalesStockSlipWork.MoveArrivalPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("MOVEARRIVALPRICERF1"));
                        }
                        else if (FractionProcCd == 2) // 四捨五入
                        {
                            mTtlSalesStockSlipWork.MoveShipmentPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("MOVESHIPMENTPRICERF2"));
                            mTtlSalesStockSlipWork.MoveArrivalPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("MOVEARRIVALPRICERF2"));
                        }
                        else if (FractionProcCd == 3) // 切上げ
                        {
                            mTtlSalesStockSlipWork.MoveShipmentPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("MOVESHIPMENTPRICERF3"));
                            mTtlSalesStockSlipWork.MoveArrivalPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("MOVEARRIVALPRICERF3"));
                        }
                        else
                        {
                            mTtlSalesStockSlipWork.MoveShipmentPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("MOVESHIPMENTPRICERF2"));
                            mTtlSalesStockSlipWork.MoveArrivalPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("MOVEARRIVALPRICERF2"));
                        }
                        mTtlSalesStockSlipWorkList.Add(mTtlSalesStockSlipWork);
                        #endregion
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        #endregion
        // ADD 2008.12.22 <<<

        #region [月次締更新パラメータ]

        /// <summary>
        /// 得意先売掛金額マスタ計算処理/月次締更新履歴マスタ更新パラメータ作成
        /// </summary>
        /// <param name="custAccRecWorkList">売掛金額マスタ更新List</param>
        /// <param name="monthlyAddUpHisWorkList">月次締更新履歴マスタ更新para</param>
        /// <param name="monthlyAddUpWork"></param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 得意先売掛金額マスタ計算処理/月次締更新履歴マスタ更新パラメータ作成</br>
        /// <br>Programmer : 20081　疋田　勇人</br>s
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        // 修正 2009/04/02 >>> 
        //private int MakeUpdateCustAccRecList(ref ArrayList custAccRecWorkList, out MonthlyAddUpHisWork monthlyAddUpHisWork, MonthlyAddUpWork monthlyAddUpWork)
        private int MakeUpdateCustAccRecList(ref ArrayList custAccRecWorkList, out ArrayList monthlyAddUpHisWorkList, MonthlyAddUpWork monthlyAddUpWork)
        // 修正 2009/04/02 <<<
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            
            // 修正 2009/04/02 >>>
            //monthlyAddUpHisWork = null;
            monthlyAddUpHisWorkList = new ArrayList();
            int upFlg = 0;
            // 修正 2009/04/02 <<<

            //売掛金額マスタ
            CustAccRecWork custAccRecWork = null;

            for (int i = 0; i < custAccRecWorkList.Count; i++)
            {
                custAccRecWork = custAccRecWorkList[i] as CustAccRecWork;
                // ADD 2009/04/02 >>>
                upFlg = 0;
                MonthlyAddUpHisWork monthlyAddUpHisWork = new MonthlyAddUpHisWork();                // ADD 2008.11.18 >>>
                if (monthlyAddUpHisWorkList.Count > 0)
                {
                    for (int j = 0; j < monthlyAddUpHisWorkList.Count; j++)
                    {
                        if ((((MonthlyAddUpHisWork)monthlyAddUpHisWorkList[j]).EnterpriseCode == custAccRecWork.EnterpriseCode) &&
                            (((MonthlyAddUpHisWork)monthlyAddUpHisWorkList[j]).AddUpSecCode == custAccRecWork.AddUpSecCode))
                        {
                            upFlg = 1;
                            break;
                        }
                    }
                }
                //月次締更新履歴マスタList作成
                if (upFlg == 0)
                {
                // ADD 2009/04/02 <<<
                //if (true)
                //{
                    monthlyAddUpHisWork = new MonthlyAddUpHisWork();
                    monthlyAddUpHisWork.EnterpriseCode = custAccRecWork.EnterpriseCode;  //企業コード
                    monthlyAddUpHisWork.AddUpSecCode = custAccRecWork.AddUpSecCode;      //計上拠点コード
                    //月次更新開始年月日
                    if (custAccRecWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        monthlyAddUpHisWork.StMonCAddUpUpdDate = DateTime.MinValue;
                    else
                        monthlyAddUpHisWork.StMonCAddUpUpdDate = custAccRecWork.LaMonCAddUpUpdDate.AddDays(1);

                    monthlyAddUpHisWork.MonthlyAddUpDate = custAccRecWork.AddUpDate;           //月次更新年月日
                    monthlyAddUpHisWork.MonthAddUpYearMonth = custAccRecWork.AddUpYearMonth;   //月次更新年月
                    monthlyAddUpHisWork.MonthAddUpExpDate = custAccRecWork.MonthAddUpExpDate;  //月次更新実行年月日
                    monthlyAddUpHisWork.LaMonCAddUpUpdDate = custAccRecWork.LaMonCAddUpUpdDate;//前回月次更新年月日
                    // 2008.07.28 add start ---------------------------->>
                    monthlyAddUpHisWork.AccRecAccPayDiv = 0;
                    monthlyAddUpHisWork.ProcDivCd = 0;
                    monthlyAddUpHisWork.ErrorStatus = 0;
                    monthlyAddUpHisWork.HistCtlCd = 0;
                    monthlyAddUpHisWork.ProcResult = "正常終了";
                    monthlyAddUpHisWork.ConvertProcessDivCd = 0;
                    // 2008.07.28 add end ------------------------------<<

                    monthlyAddUpHisWorkList.Add(monthlyAddUpHisWork); // ADD 2009/04/02
                }
            }
            return status;
        }

        /// <summary>
        /// 仕入先買掛金額マスタ計算処理/月次締更新履歴マスタ更新パラメータ作成
        /// </summary>
        /// <param name="suplAccPayWorkList">買掛金額マスタ更新List</param>
        /// <param name="monthlyAddUpHisWorkList">月次締更新履歴マスタ更新para</param>
        /// <param name="monthlyAddUpWork"></param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入先買掛金額マスタ計算処理/月次締更新履歴マスタ更新パラメータ作成</br>
        /// <br>Programmer : 20081　疋田　勇人</br>s
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>

        // 修正 2009/04/02 >>>
        //private int MakeUpdateSuplAccPayList(ref ArrayList suplAccPayWorkList, out MonthlyAddUpHisWork monthlyAddUpHisWork, MonthlyAddUpWork monthlyAddUpWork)
        private int MakeUpdateSuplAccPayList(ref ArrayList suplAccPayWorkList, out ArrayList monthlyAddUpHisWorkList, MonthlyAddUpWork monthlyAddUpWork)
        // 修正 2009/04/02 <<<
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            // 修正 2009/04/02 >>>
            //monthlyAddUpHisWork = null;
            MonthlyAddUpHisWork monthlyAddUpHisWork = new MonthlyAddUpHisWork();
            monthlyAddUpHisWorkList = new ArrayList();
            int upFlg = 0;
            // 修正 2009/04/02 <<<

            //買掛金額マスタ
            SuplAccPayWork suplAccPayWork = null;

            for (int i = 0; i < suplAccPayWorkList.Count; i++)
            {
                suplAccPayWork = suplAccPayWorkList[i] as SuplAccPayWork;

                // ADD 2009/04/02 >>>
                upFlg = 0;
                if (monthlyAddUpHisWorkList.Count > 0)
                {
                    for (int j = 0; j < monthlyAddUpHisWorkList.Count; j++)
                    {
                        if ((((MonthlyAddUpHisWork)monthlyAddUpHisWorkList[j]).EnterpriseCode == suplAccPayWork.EnterpriseCode) &&
                            (((MonthlyAddUpHisWork)monthlyAddUpHisWorkList[j]).AddUpSecCode == suplAccPayWork.AddUpSecCode))
                        {
                            upFlg = 1;
                            break;
                        }
                    }
                }
                if (upFlg == 0)
                {
                // ADD 2009/04/02 <<<


                    //●買掛金額マスタ計算処理
                    status = CulculateSuplAccPay(ref suplAccPayWork);

                    monthlyAddUpHisWork = new MonthlyAddUpHisWork();

                    monthlyAddUpHisWork.EnterpriseCode = suplAccPayWork.EnterpriseCode; //企業コード
                    monthlyAddUpHisWork.AddUpSecCode = suplAccPayWork.AddUpSecCode;     //計上拠点コード
                    //月次更新開始年月日
                    if (suplAccPayWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        monthlyAddUpHisWork.StMonCAddUpUpdDate = DateTime.MinValue;
                    else
                        monthlyAddUpHisWork.StMonCAddUpUpdDate = suplAccPayWork.LaMonCAddUpUpdDate.AddDays(1);

                    monthlyAddUpHisWork.MonthlyAddUpDate = suplAccPayWork.AddUpDate;            //月次更新年月日
                    monthlyAddUpHisWork.MonthAddUpYearMonth = suplAccPayWork.AddUpYearMonth;    //月次更新年月
                    monthlyAddUpHisWork.MonthAddUpExpDate = suplAccPayWork.MonthAddUpExpDate;   //月次更新実行年月日
                    monthlyAddUpHisWork.LaMonCAddUpUpdDate = suplAccPayWork.LaMonCAddUpUpdDate; //前回月次更新年月日
                    // 2008.07.28 add start ---------------------------->>
                    monthlyAddUpHisWork.AccRecAccPayDiv = 1;
                    monthlyAddUpHisWork.ProcDivCd = 0;
                    monthlyAddUpHisWork.ErrorStatus = 0;
                    monthlyAddUpHisWork.HistCtlCd = 0;
                    monthlyAddUpHisWork.ProcResult = "正常終了";
                    monthlyAddUpHisWork.ConvertProcessDivCd = 0;
                    // 2008.07.28 add end ------------------------------<<

                    monthlyAddUpHisWorkList.Add(monthlyAddUpHisWork); // ADD 2009/04/02
                }

            }
            return status;
        }

        /// <summary>
        /// 買掛金額マスタ計算処理（Readメソッドからの呼び出し）
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタ</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 買掛金額マスタ計算処理（Readメソッドからの呼び出し）</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>s
        /// <br>Date       : 2007.06.06</br>
        /// </remarks>
        private int CulculateSuplAccPay(ref SuplAccPayWork suplAccPayWork)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            #region [2008.09.17 DEL]
            /* --- DEL 2008.09.17 ---------->>>>>
            // ↓ 2007.11.07 980081 d
            #region 旧レイアウト(コメントアウト)
            ////●仕入先買掛金額マスタ計算処理
            ////相殺後外税対象額
            //suplAccPayWork.ItdedOffsetOutTax = suplAccPayWork.TtlItdedStcOutTax + suplAccPayWork.TtlItdedRetOutTax;
            ////相殺後内税対象額
            //suplAccPayWork.ItdedOffsetInTax = suplAccPayWork.TtlItdedStcInTax + suplAccPayWork.TtlItdedRetInTax;
            ////相殺後非課税対象額
            ////suplAccPayWork.ItdedOffsetTaxFree = suplAccPayWork.TtlItdedStcTaxFree + suplAccPayWork.TtlItdedRetTaxFree + suplAccPayWork.BalanceAdjust;
            //suplAccPayWork.ItdedOffsetTaxFree = suplAccPayWork.TtlItdedStcTaxFree + suplAccPayWork.TtlItdedRetTaxFree;
            ////請求転嫁の場合は・・　相殺後外税消費税=(仕入外税対象額-返品外税対象額)×消費税税率，端数処理区分(部品にて処理)
            ////相殺後外税消費税（伝票）
            //suplAccPayWork.OffsetOutTaxSlip = suplAccPayWork.TtlStockOuterTaxSlip + suplAccPayWork.TtlRetOuterTaxSlip;
            ////相殺後外税消費税（請求）
            ////suplAccPayWork.OffsetOutTaxDmd = (long)(CalculateConsTax.Fraction((suplAccPayWork.TtlItdedStcOutTax + suplAccPayWork.TtlItdedRetOutTax) * suplAccPayWork.SupplierConsTaxRate, suplAccPayWork.FractionProcCd)); // del 2007.06.05 saito
            //suplAccPayWork.OffsetOutTaxDmd = (long)(CalculateConsTax.Fraction((suplAccPayWork.TtlItdedStcOutTaxDmd + suplAccPayWork.TtlItdedRetOutTaxDmd) * suplAccPayWork.SupplierConsTaxRate, suplAccPayWork.FractionProcCd));
            ////相殺後外税消費税
            //suplAccPayWork.OffsetOutTax = suplAccPayWork.OffsetOutTaxSlip + suplAccPayWork.OffsetOutTaxDmd;
            ////相殺後内税消費税
            //suplAccPayWork.OffsetInTax = suplAccPayWork.TtlStockInnerTax + suplAccPayWork.TtlRetInnerTax;
            ////返品外税額合計（請求）
            //suplAccPayWork.TtlRetOuterTaxDmd = suplAccPayWork.OffsetOutTaxDmd - suplAccPayWork.TtlStockOuterTaxDmd;
            ////返品外税額合計
            //suplAccPayWork.TtlRetOuterTax = suplAccPayWork.TtlRetOuterTaxSlip + suplAccPayWork.TtlRetOuterTaxDmd;
            ////消費税調整額を加算
            ////if (suplAccPayWork.SuppTtlAmntDspWayCd == 0)
            ////{
            ////    //相殺後外税消費税
            ////    suplAccPayWork.OffsetOutTax += suplAccPayWork.TaxAdust;
            ////}
            ////else if (suplAccPayWork.SuppTtlAmntDspWayCd == 1)
            ////{
            ////    //相殺後内税消費税
            ////    suplAccPayWork.OffsetInTax += suplAccPayWork.TaxAdust;
            ////}
            ////今回繰越残高（買掛計）
            //suplAccPayWork.ThisTimeTtlBlcAcPay = suplAccPayWork.LastTimeAccPay - (suplAccPayWork.ThisTimePayNrml + suplAccPayWork.ThisTimeFeePayNrml + suplAccPayWork.ThisTimeDisPayNrml + suplAccPayWork.ThisTimeRbtPayNrml);
            ////今回仕入金額
            ////suplAccPayWork.ThisTimeStockPrice = suplAccPayWork.TtlItdedStcOutTax + suplAccPayWork.TtlItdedStcInTax + suplAccPayWork.TtlItdedStcTaxFree;
            //suplAccPayWork.ThisTimeStockPrice = suplAccPayWork.TtlItdedStcOutTax + suplAccPayWork.TtlItdedStcInTax + suplAccPayWork.TtlItdedStcTaxFree + suplAccPayWork.BalanceAdjust;
            ////今回仕入消費税
            ////suplAccPayWork.ThisStcPrcTax = suplAccPayWork.TtlStockOuterTax + suplAccPayWork.TtlStockInnerTax;
            //suplAccPayWork.ThisStcPrcTax = suplAccPayWork.TtlStockOuterTax + suplAccPayWork.TtlStockInnerTax + suplAccPayWork.TaxAdust;
            ////今回返品金額
            //suplAccPayWork.ThisStckPricRgds = suplAccPayWork.TtlItdedRetOutTax + suplAccPayWork.TtlItdedRetInTax + suplAccPayWork.TtlItdedRetTaxFree;
            ////今回返品消費税
            //suplAccPayWork.ThisStcPrcTaxRgds = suplAccPayWork.TtlRetOuterTax + suplAccPayWork.TtlRetInnerTax;
            ////今回純仕入金額=今回仕入金額-今回返品金額
            //suplAccPayWork.ThisNetStckPrice = suplAccPayWork.ThisTimeStockPrice + suplAccPayWork.ThisStckPricRgds;
            ////今回純仕入消費税=今回仕入消費税-今回返品消費税
            //suplAccPayWork.ThisNetStcPrcTax = suplAccPayWork.ThisStcPrcTax + suplAccPayWork.ThisStcPrcTaxRgds;
            ////仕入合計残高（買掛計）
            //suplAccPayWork.StckTtlAccPayBalance = suplAccPayWork.ThisTimeTtlBlcAcPay + suplAccPayWork.ThisNetStckPrice + suplAccPayWork.ThisNetStcPrcTax;
            #endregion
            // ↑ 2007.11.07 980081 d
            // ↓ 2007.11.07 980081 a
            //今回繰越残高（買掛計）
            // ↓ 2008.02.26 980081 c
            //suplAccPayWork.ThisTimeTtlBlcAcPay = suplAccPayWork.LastTimeAccPay - (suplAccPayWork.ThisTimePayNrml + suplAccPayWork.ThisTimeFeePayNrml + suplAccPayWork.ThisTimeDisPayNrml);
            suplAccPayWork.ThisTimeTtlBlcAcPay = suplAccPayWork.LastTimeAccPay - suplAccPayWork.ThisTimePayNrml;
            // ↑ 2008.02.26 980081 c
            //仕入合計残高（買掛計）
            suplAccPayWork.StckTtlAccPayBalance = suplAccPayWork.ThisTimeTtlBlcAcPay + suplAccPayWork.OfsThisTimeStock + suplAccPayWork.OfsThisStockTax + suplAccPayWork.BalanceAdjust + suplAccPayWork.TaxAdjust;
            // ↑ 2007.11.07 980081 a
               --- DEL 2008.09.17 ----------<<<<< */
            #endregion

            // --- ADD 2008.09.17 ---------->>>>>
            //今回繰越残高（買掛計） 前回買掛金額－今回支払金額（通常支払）
            suplAccPayWork.ThisTimeTtlBlcAcPay = suplAccPayWork.LastTimeAccPay - suplAccPayWork.ThisTimePayNrml;
            //仕入合計残高（買掛計） 今回繰越金額（買掛計）＋（相殺後今回仕入金額＋相殺後今回仕入消費税）
            suplAccPayWork.StckTtlAccPayBalance = suplAccPayWork.ThisTimeTtlBlcAcPay + (suplAccPayWork.OfsThisTimeStock + suplAccPayWork.OfsThisStockTax);
            // --- ADD 2008.09.17 ----------<<<<<

            return status;
        }
        #endregion

        #region [月次締更新履歴マスタ(更新可否チェック)]
        /// <summary>
        /// 月次締更新履歴マスタのチェック
        /// </summary>
        /// <param name="monthlyAddUpWork">月次締更新履歴更新用ワーク</param>
        /// <param name="monAddUpUpdDiv">月次更新区分→0:売上月次更新,1:仕入月次更新</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 請求締更新履歴マスタのチェック</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>s
        /// <br>Date       : 2007.03.22</br>
        /// </remarks>
        private int CheckMonthlyAddUp(ref MonthlyAddUpWork monthlyAddUpWork, int monAddUpUpdDiv, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlDataReader myReader = null;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    sqlCommand.Connection = sqlConnection;

                    #region [Select文作成]
                    string sqlText = string.Empty;
                    sqlText += "SELECT *" + Environment.NewLine;
                    sqlText += " FROM MONTHLYADDUPHISRF WITH(READUNCOMMITTED)" + Environment.NewLine;
                    sqlText += " WHERE" + Environment.NewLine;
                    sqlText += "      ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND ACCRECACCPAYDIVRF=@FINDACCRECACCPAYDIV" + Environment.NewLine;    //売掛買掛区分
                    sqlText += "  AND MONTHLYADDUPDATERF>=@FINDADDUPDATE" + Environment.NewLine;        //月次更新年月日
                    sqlText += "  AND PROCDIVCDRF=0" + Environment.NewLine;                             //処理区分     0:更新処理 1:解除処理
                    sqlText += "  AND HISTCTLCDRF=0" + Environment.NewLine;                             //履歴制御区分 0:確定 1:未確定(履歴情報)
                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        sqlText += "  AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;          //計上拠点コード
                    }
                    // 修正 2009/04/02 <<<

                    #endregion  //[Select文作成]

                    sqlCommand.CommandText = sqlText;

                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAccRecAccPayDiv = sqlCommand.Parameters.Add("@FINDACCRECACCPAYDIV", SqlDbType.Int); // 2008.07.28 add
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    findParaAccRecAccPayDiv.Value = SqlDataMediator.SqlSetInt32(monAddUpUpdDiv); // 2008.07.28 add
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpWork.AddUpDate);

                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }
                    // 修正 2009/04/02 <<<

                    myReader = sqlCommand.ExecuteReader();

                    if (myReader.Read())
                    {
                        //UIから渡された今回月次更新年月日より未来日付のデータがある場合はエラー
                        status = (int)ConstantManagement.DB_Status.ctDB_WARNING;
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        #endregion

        #region [月次更新年月日チェック]
        /// <summary>
        /// 月次更新年月日をチェックします
        /// </summary>
        /// <param name="monthlyAddUpWork">月次更新パラメータ</param>
        /// <param name="monAddUpUpdDiv">月次更新区分→0:売上月次更新,1:仕入月次更新</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 月次更新年月日をチェックします</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        private int CheckMonthlyAddUpDate(ref MonthlyAddUpWork monthlyAddUpWork, int monAddUpUpdDiv, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

            SqlDataReader myReader = null;

            DateTime maxMonthlyAddUpDate = DateTime.MinValue;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    sqlCommand.Connection = sqlConnection;

                    #region [Select文作成]
                    string sqlText = string.Empty;
                    sqlText += "SELECT" + Environment.NewLine;
                    sqlText += "  MAX(MONTHLYADDUPDATERF) AS MAXMONTHLYADDUPDATE" + Environment.NewLine;
                    sqlText += " FROM MONTHLYADDUPHISRF" + Environment.NewLine;
                    sqlText += " WHERE" + Environment.NewLine;
                    sqlText += "      ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND ACCRECACCPAYDIVRF=@FINDACCRECACCPAYDIV" + Environment.NewLine;
                    sqlText += "  AND PROCDIVCDRF=0" + Environment.NewLine;
                    sqlText += "  AND HISTCTLCDRF=0" + Environment.NewLine;
                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        sqlText += "  AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                    }
                    // 修正 2009/04/02 全拠点締対応 <<<

                    sqlCommand.CommandText = sqlText;
                    #endregion  //[Select文作成]

                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAccRecAccPayDiv = sqlCommand.Parameters.Add("@FINDACCRECACCPAYDIV", SqlDbType.Int); // 2008.07.28 add

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    findParaAccRecAccPayDiv.Value = SqlDataMediator.SqlSetInt32(monAddUpUpdDiv);                             // 2008.07.28 add

                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }
                    // 修正 2009/04/02 全拠点締対応 <<<

                    myReader = sqlCommand.ExecuteReader();
                    if (myReader.Read())
                    {
                        //検索結果を戻す
                        maxMonthlyAddUpDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("MAXMONTHLYADDUPDATE"));

                        if (maxMonthlyAddUpDate == DateTime.MinValue)
                        {
                            //月次締取消の履歴が存在しない
                            status = (int)ConstantManagement.DB_Status.ctDB_WARNING;
                        }
                        else
                        {
                            //取消す月次締履歴が存在する
                            monthlyAddUpWork.AddUpDate = maxMonthlyAddUpDate;
                            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                        }
                    }
                    else
                    {
                        //検索結果がない場合は初期データ
                        status = (int)ConstantManagement.DB_Status.ctDB_WARNING;
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        #endregion

        #region [Delete 月次締取消]
        /// <summary>
        /// 売掛・買掛金額マスタを削除します。
        /// </summary>
        /// <param name="paraObj">月次更新パラメータ(締取消)</param>
        /// <param name="retList">月次更新有無ステータスList(締取消)</param>
        /// <param name="msgDiv">エラーメッセージ有無区分</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="monAddUpUpdDiv">月次更新区分→0:売上月次更新,1:仕入月次更新</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 売掛・買掛金額マスタを削除します。</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// </remarks>
        public int Delete(ref object paraObj, out object retList, out bool msgDiv, out string retMsg, int monAddUpUpdDiv)
        {
            //●STATUS初期化
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            SqlConnection sqlConnection = null;
            SqlTransaction sqlTransaction = null;

            retList = null;
            msgDiv = false;
            retMsg = null;

            //●削除パラメータ
            ArrayList custDelList = new ArrayList();
            ArrayList suplDelList = new ArrayList();

            try
            {
                MonthlyAddUpWork monthlyAddUpWork = paraObj as MonthlyAddUpWork;

                //●パラメータチェック
                if (monthlyAddUpWork == null)
                {
                    base.WriteErrorLog(null, "プログラムエラー。パラメータが未設定です");
                    return status;
                }

                //●コネクション生成
                sqlConnection = CreateSqlConnection();
                if (sqlConnection == null) return status;
                sqlConnection.Open();

                //●月次締更新履歴マスタチェック
                status = CheckMonthlyAddUpDate(ref monthlyAddUpWork, monAddUpUpdDiv, ref sqlConnection);
                if (status == (int)ConstantManagement.DB_Status.ctDB_WARNING)
                {
                    msgDiv = true;
                    retMsg = "月次更新の履歴が存在しません。";
                    return status;
                }

                //トランザクション開始
                sqlTransaction = sqlConnection.BeginTransaction((IsolationLevel)ConstantManagement.DB_IsolationLevel.ctDB_Default);

                #region 排他制御
                ShareCheckInfo info = new ShareCheckInfo();
                if (monthlyAddUpWork.AddUpSecCode == "" || monthlyAddUpWork.AddUpSecCode == "00")
                {
                    //システムロック(企業)
                    info.Keys.Add(monthlyAddUpWork.EnterpriseCode, ShareCheckType.Enterprise, "", "");
                    status = this.ShareCheck(info, LockControl.Locke, sqlConnection, sqlTransaction);
                }
                else
                {
                    //システムロック(拠点)
                    info.Keys.Add(monthlyAddUpWork.EnterpriseCode, ShareCheckType.Enterprise, "", "");
                    status = this.ShareCheck(info, LockControl.Locke, sqlConnection, sqlTransaction);
                }
                if (status != 0)
                {
                    return status = 851;
                }
                #endregion

                //●月次締更新履歴マスタ削除
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if (monAddUpUpdDiv == 0) // 売上月次更新
                    {
                        if (monthlyAddUpWork.ProcCntntsFlag == 1)
                            status = UpdateMonthlyAddUpHisCustomerProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);
                    }
                    else　// 仕入月次更新
                    {
                        if (monthlyAddUpWork.ProcCntntsFlag == 1)
                            status = UpdateMonthlyAddUpHisSupplierProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);
                    }
                }

                // 修正 2008.12.22 >>>
                if (monAddUpUpdDiv == 0) // 売上月次更新
                {
                    //●売掛金額マスタ削除
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        status = DeleteCustAccRecProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                    //●売掛入金集計データ削除
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        status = DeleteAccRecDepoTotalProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);
                }
                else // 仕入月次更新
                {
                    //●買掛金額マスタ削除
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        status = DeleteSuplAccPayProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                    //●買掛支払集計データ削除
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        status = DeleteACalcPayTotalProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);
                }

                //●在庫履歴データ削除
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteStockHistoryProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //●売上仕入月次集計データ削除
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteMTtlSalesStockSlipProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);
                // ADD 2009/04/02 >>>
                //●自社情報マスタの更新処理
                if (monthlyAddUpWork.TermLastDiv == 1) // 期末
                {
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        status = WriteCompanyInf(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction, 1);
                    }
                }
                // ADD 2009/04/02 <<<

                // 修正 2008.12.22 <<< 

                //システムロック解除 //2009/1/27 Add sakurai
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    status = this.ShareCheck(info, LockControl.Release, sqlConnection, sqlTransaction);
                }

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    sqlTransaction.Commit();
                else
                {
                    if (sqlTransaction.Connection != null) sqlTransaction.Rollback();
                }
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.Delete");
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;  //ADD 2008.10.01
                // ロールバック
                if (sqlTransaction.Connection != null) sqlTransaction.Rollback();
            }
            finally
            {
                if (sqlTransaction != null) sqlTransaction.Dispose();
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }
            return status;
        }

        /// <summary>
        /// 締取消を行います(月次締更新履歴マスタ更新 売掛)
        /// </summary>
        /// <param name="monthlyAddUpWork"></param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 締取消を行います(月次締更新履歴マスタ更新 売掛)</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        private int UpdateMonthlyAddUpHisCustomerProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            #region [2008.10.01 DEL]
            /* --- DEL 2008.10.01 ---------->>>>>
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            string sqlText = string.Empty;

            sqlText += "UPDATE " + Environment.NewLine;
            sqlText += "   MONTHLYADDUPHISRF " + Environment.NewLine;
            sqlText += " SET " + Environment.NewLine;
            sqlText += "   PROCDIVCDRF=@PROCDIVCD" + Environment.NewLine;
            sqlText += "  ,ERRORSTATUSRF=@ERRORSTATUS" + Environment.NewLine;
            sqlText += "  ,HISTCTLCDRF=@HISTCTLCD" + Environment.NewLine;
            sqlText += "  ,PROCRESULTRF=@PROCRESULT" + Environment.NewLine;
            sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
            sqlText += "    AND ACCRECACCPAYDIVRF=0" + Environment.NewLine;
            sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
            sqlText += "    AND MONTHLYADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaProcDivCd = sqlCommand.Parameters.Add("@PROCDIVCD", SqlDbType.Int);
                    SqlParameter findParaErrorStatus = sqlCommand.Parameters.Add("@ERRORSTATUS", SqlDbType.Int);
                    SqlParameter findParaHistCtlCd = sqlCommand.Parameters.Add("@HISTCTLCD", SqlDbType.Int);
                    SqlParameter findParaProcResult = sqlCommand.Parameters.Add("@PROCRESULT", SqlDbType.NVarChar);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpWork.AddUpDate);
                    findParaProcDivCd.Value = 1;
                    findParaErrorStatus.Value = 0;
                    findParaHistCtlCd.Value = 1;
                    findParaProcResult.Value = string.Empty;

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
               --- DEL 2008.10.01 ----------<<<<< */
            #endregion

            // --- ADD 2008.10.01 ---------->>>>>
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            string sqlText = string.Empty;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            MonthlyAddUpHisWork _monthlyAddUpHisWork = new MonthlyAddUpHisWork();
            ArrayList _monthlyAddUpHisWorkList = new ArrayList();

            //親レコード情報検索 -> 締取消レコードのセット情報に使用
            #region [親レコード情報検索]
            try
            {
                sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);
                sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727

                #region [Select文作成]
                sqlText = string.Empty;
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  *" + Environment.NewLine;
                sqlText += " FROM MONTHLYADDUPHISRF" + Environment.NewLine;
                sqlText += " WHERE" + Environment.NewLine;
                sqlText += "      ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "  AND MONTHLYADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;
                sqlText += "  AND ACCRECACCPAYDIVRF=0" + Environment.NewLine;
                sqlText += "  AND PROCDIVCDRF=0" + Environment.NewLine;
                sqlText += "  AND HISTCTLCDRF=0" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応>>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "  AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<

                sqlCommand.CommandText = sqlText;
                #endregion  //[Select文作成]

                sqlCommand.Parameters.Clear();

                //Prameterオブジェクトの作成
                SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                //Parameterオブジェクトへ値設定
                findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpWork.AddUpDate);

                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                    findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                }
                // 修正 2009/04/02 全拠点締対応


                myReader = sqlCommand.ExecuteReader();
                // 修正 2009/04/02 全拠点締対応 >>>
                //if (myReader.Read())
                //{
                //    _monthlyAddUpHisWork = CopyToMonthlyAddUpHisWorkFromReader(ref myReader);
                //    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                //}
                //else
                //{
                //    throw new Exception("取消対象の親レコードがありません。");
                //}
                while (myReader.Read())
                {
                    _monthlyAddUpHisWorkList.Add(CopyToMonthlyAddUpHisWorkFromReader(ref myReader));
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                if (_monthlyAddUpHisWorkList== null || _monthlyAddUpHisWorkList.Count == 0)
                {
                    throw new Exception("取消対象の親レコードがありません。");
                }
                // 修正 2009/04/02 <<<
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            #endregion  //[親レコード情報検索]

            if (!myReader.IsClosed) myReader.Close();
            if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL) throw new Exception("月次締更新履歴マスタ読込失敗。");
            status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            //締取消レコードINSERT -> 検索した親レコードの情報を使用して取消レコードをINSERT
            #region [締取消レコードINSERT]
            try
            {
                sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);
                sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                for (int i = 0; _monthlyAddUpHisWorkList.Count > i; i++)
                {
                    _monthlyAddUpHisWork = _monthlyAddUpHisWorkList[i] as MonthlyAddUpHisWork;

                    #region [Insert文作成]
                    sqlText = string.Empty;
                    sqlText += "INSERT INTO MONTHLYADDUPHISRF" + Environment.NewLine;
                    sqlText += " (CREATEDATETIMERF" + Environment.NewLine;
                    sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                    sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                    sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                    sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                    sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                    sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                    sqlText += " ,ACCRECACCPAYDIVRF" + Environment.NewLine;
                    sqlText += " ,ADDUPSECCODERF" + Environment.NewLine;
                    sqlText += " ,STMONCADDUPUPDDATERF" + Environment.NewLine;
                    sqlText += " ,MONTHLYADDUPDATERF" + Environment.NewLine;
                    sqlText += " ,MONTHADDUPYEARMONTHRF" + Environment.NewLine;
                    sqlText += " ,MONTHADDUPEXPDATERF" + Environment.NewLine;
                    sqlText += " ,LAMONCADDUPUPDDATERF" + Environment.NewLine;
                    sqlText += " ,DATAUPDATEDATETIMERF" + Environment.NewLine;
                    sqlText += " ,PROCDIVCDRF" + Environment.NewLine;
                    sqlText += " ,ERRORSTATUSRF" + Environment.NewLine;
                    sqlText += " ,HISTCTLCDRF" + Environment.NewLine;
                    sqlText += " ,PROCRESULTRF" + Environment.NewLine;
                    sqlText += " ,CONVERTPROCESSDIVCDRF" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;
                    sqlText += " VALUES" + Environment.NewLine;
                    sqlText += " (@CREATEDATETIME" + Environment.NewLine;
                    sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                    sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                    sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                    sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                    sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                    sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                    sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                    sqlText += " ,@ACCRECACCPAYDIV" + Environment.NewLine;
                    sqlText += " ,@ADDUPSECCODE" + Environment.NewLine;
                    sqlText += " ,@STMONCADDUPUPDDATE" + Environment.NewLine;
                    sqlText += " ,@MONTHLYADDUPDATE" + Environment.NewLine;
                    sqlText += " ,@MONTHADDUPYEARMONTH" + Environment.NewLine;
                    sqlText += " ,@MONTHADDUPEXPDATE" + Environment.NewLine;
                    sqlText += " ,@LAMONCADDUPUPDDATE" + Environment.NewLine;
                    sqlText += " ,@DATAUPDATEDATETIME" + Environment.NewLine;
                    sqlText += " ,@PROCDIVCD" + Environment.NewLine;
                    sqlText += " ,@ERRORSTATUS" + Environment.NewLine;
                    sqlText += " ,@HISTCTLCD" + Environment.NewLine;
                    sqlText += " ,@PROCRESULT" + Environment.NewLine;
                    sqlText += " ,@CONVERTPROCESSDIVCD" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;

                    sqlCommand.CommandText = sqlText;
                    #endregion  //[Insert文作成]

                    sqlCommand.Parameters.Clear();

                    //登録ヘッダ情報を設定
                    object obj = (object)this;
                    IFileHeader flhd = (IFileHeader)_monthlyAddUpHisWork;
                    FileHeader fileHeader = new FileHeader(obj);
                    fileHeader.SetInsertHeader(ref flhd, obj);

                    #region Prameterオブジェクトの作成
                    SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);
                    SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);
                    SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);
                    SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);
                    SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                    SqlParameter paraAccRecAccPayDiv = sqlCommand.Parameters.Add("@ACCRECACCPAYDIV", SqlDbType.Int);
                    SqlParameter paraAddUpSecCode = sqlCommand.Parameters.Add("@ADDUPSECCODE", SqlDbType.NChar);
                    SqlParameter paraStMonCAddUpUpdDate = sqlCommand.Parameters.Add("@STMONCADDUPUPDDATE", SqlDbType.Int);
                    SqlParameter paraMonthlyAddUpDate = sqlCommand.Parameters.Add("@MONTHLYADDUPDATE", SqlDbType.Int);
                    SqlParameter paraMonthAddUpYearMonth = sqlCommand.Parameters.Add("@MONTHADDUPYEARMONTH", SqlDbType.Int);
                    SqlParameter paraMonthAddUpExpDate = sqlCommand.Parameters.Add("@MONTHADDUPEXPDATE", SqlDbType.Int);
                    SqlParameter paraLaMonCAddUpUpdDate = sqlCommand.Parameters.Add("@LAMONCADDUPUPDDATE", SqlDbType.Int);
                    SqlParameter paraDataUpdateDateTime = sqlCommand.Parameters.Add("@DATAUPDATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraProcDivCd = sqlCommand.Parameters.Add("@PROCDIVCD", SqlDbType.Int);
                    SqlParameter paraErrorStatus = sqlCommand.Parameters.Add("@ERRORSTATUS", SqlDbType.Int);
                    SqlParameter paraHistCtlCd = sqlCommand.Parameters.Add("@HISTCTLCD", SqlDbType.Int);
                    SqlParameter paraProcResult = sqlCommand.Parameters.Add("@PROCRESULT", SqlDbType.NVarChar);
                    SqlParameter paraConvertProcessDivCd = sqlCommand.Parameters.Add("@CONVERTPROCESSDIVCD", SqlDbType.Int);
                    #endregion  //Prameterオブジェクトの作成

                    #region Parameterオブジェクトへ値設定
                    paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(_monthlyAddUpHisWork.CreateDateTime);
                    paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(_monthlyAddUpHisWork.UpdateDateTime);
                    paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(_monthlyAddUpHisWork.EnterpriseCode);
                    paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(_monthlyAddUpHisWork.FileHeaderGuid);
                    paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(_monthlyAddUpHisWork.UpdEmployeeCode);
                    paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(_monthlyAddUpHisWork.UpdAssemblyId1);
                    paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(_monthlyAddUpHisWork.UpdAssemblyId2);
                    paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(_monthlyAddUpHisWork.LogicalDeleteCode);
                    paraAccRecAccPayDiv.Value = SqlDataMediator.SqlSetInt32(_monthlyAddUpHisWork.AccRecAccPayDiv);
                    paraAddUpSecCode.Value = SqlDataMediator.SqlSetString(_monthlyAddUpHisWork.AddUpSecCode);
                    // paraStMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(_monthlyAddUpHisWork.StMonCAddUpUpdDate); // DEL 2008.11.25 
                    // ADD 2008.11.25 >>>
                    if (_monthlyAddUpHisWork.StMonCAddUpUpdDate == DateTime.MinValue)
                        paraStMonCAddUpUpdDate.Value = 0;
                    else
                        paraStMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(_monthlyAddUpHisWork.StMonCAddUpUpdDate);
                    // ADD 2008.11.25 <<<
                    paraMonthlyAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(_monthlyAddUpHisWork.MonthlyAddUpDate);
                    paraMonthAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(_monthlyAddUpHisWork.MonthAddUpYearMonth);
                    paraMonthAddUpExpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(_monthlyAddUpHisWork.MonthAddUpExpDate);
                    paraLaMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(_monthlyAddUpHisWork.LaMonCAddUpUpdDate);
                    paraDataUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(_monthlyAddUpHisWork.CreateDateTime);
                    paraErrorStatus.Value = SqlDataMediator.SqlSetInt32(_monthlyAddUpHisWork.ErrorStatus);
                    paraProcResult.Value = SqlDataMediator.SqlSetString(_monthlyAddUpHisWork.ProcResult);
                    paraConvertProcessDivCd.Value = SqlDataMediator.SqlSetInt32(_monthlyAddUpHisWork.ConvertProcessDivCd);
                    paraProcDivCd.Value = 1;
                    paraProcResult.Value = "正常終了";
                    paraHistCtlCd.Value = 1;
                    #endregion  //Parameterオブジェクトへ値設定

                    sqlCommand.ExecuteNonQuery();
                }
                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            #endregion  //[締取消レコードINSERT]

            if (!myReader.IsClosed) myReader.Close();
            if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL) throw new Exception("締取消レコードINSERT失敗。");
            status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            //親レコードUPDATE -> 履歴制御区分を「1:未確定」に更新する
            #region [親レコードUPDATE]
            try
            {
                sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);
                sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727

                #region [Update文作成]
                sqlText = string.Empty;
                sqlText += "UPDATE " + Environment.NewLine;
                sqlText += "   MONTHLYADDUPHISRF " + Environment.NewLine;
                sqlText += " SET " + Environment.NewLine;
                sqlText += "  HISTCTLCDRF=1" + Environment.NewLine;
                sqlText += " WHERE" + Environment.NewLine;
                sqlText += "      ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "  AND MONTHLYADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;
                sqlText += "  AND ACCRECACCPAYDIVRF=0" + Environment.NewLine;
                sqlText += "  AND PROCDIVCDRF=0" + Environment.NewLine;
                sqlText += "  AND HISTCTLCDRF=0" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "  AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<

                sqlCommand.CommandText = sqlText;
                #endregion  //[Update文作成]

                sqlCommand.Parameters.Clear();

                //Prameterオブジェクトの作成
                SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                //Parameterオブジェクトへ値設定
                findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpWork.AddUpDate);

                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                    findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                }
                // 修正 2009/04/02 <<<

                sqlCommand.ExecuteNonQuery();

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            #endregion  //[親レコードUPDATE]

            // --- ADD 2008.10.01 ----------<<<<<

            return status;
        }

        /// <summary>
        /// 締取消を行います(月次締更新履歴マスタ更新 買掛)
        /// </summary>
        /// <param name="monthlyAddUpWork"></param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 締取消を行います(月次締更新履歴マスタ更新 買掛)</br>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        private int UpdateMonthlyAddUpHisSupplierProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            #region [2008.10.01 DEL]
            /* --- DEL 2008.10.01 ---------->>>>>
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            string sqlText = string.Empty;

            sqlText += "UPDATE " + Environment.NewLine;
            sqlText += "   MONTHLYADDUPHISRF " + Environment.NewLine;
            sqlText += " SET " + Environment.NewLine;
            sqlText += "   PROCDIVCDRF=@PROCDIVCD" + Environment.NewLine;
            sqlText += "  ,ERRORSTATUSRF=@ERRORSTATUS" + Environment.NewLine;
            sqlText += "  ,HISTCTLCDRF=@HISTCTLCD" + Environment.NewLine;
            sqlText += "  ,PROCRESULTRF=@PROCRESULT" + Environment.NewLine;
            sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
            sqlText += "    AND ACCRECACCPAYDIVRF=1" + Environment.NewLine;
            sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
            sqlText += "    AND MONTHLYADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;

            try
            {
                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);
                    SqlParameter findParaProcDivCd = sqlCommand.Parameters.Add("@PROCDIVCD", SqlDbType.Int);
                    SqlParameter findParaErrorStatus = sqlCommand.Parameters.Add("@ERRORSTATUS", SqlDbType.Int);
                    SqlParameter findParaHistCtlCd = sqlCommand.Parameters.Add("@HISTCTLCD", SqlDbType.Int);
                    SqlParameter findParaProcResult = sqlCommand.Parameters.Add("@PROCRESULT", SqlDbType.NVarChar);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpWork.AddUpDate);
                    findParaProcDivCd.Value = 1;
                    findParaErrorStatus.Value = 0;
                    findParaHistCtlCd.Value = 1;
                    findParaProcResult.Value = string.Empty;

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
               --- DEL 2008.10.01 ----------<<<<< */
            #endregion

            // --- ADD 2008.10.01 ---------->>>>>
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            string sqlText = string.Empty;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            MonthlyAddUpHisWork _monthlyAddUpHisWork = new MonthlyAddUpHisWork();
            ArrayList _monthlyAddUpHisWorkList = new ArrayList();

            //親レコード情報検索 -> 締取消レコードのセット情報に使用
            #region [親レコード情報検索]
            try
            {
                sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);
                sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                #region [Select文作成]
                sqlText = string.Empty;
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  *" + Environment.NewLine;
                sqlText += " FROM MONTHLYADDUPHISRF" + Environment.NewLine;
                sqlText += " WHERE" + Environment.NewLine;
                sqlText += "      ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "  AND MONTHLYADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;
                sqlText += "  AND ACCRECACCPAYDIVRF=1" + Environment.NewLine;
                sqlText += "  AND PROCDIVCDRF=0" + Environment.NewLine;
                sqlText += "  AND HISTCTLCDRF=0" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応>>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "  AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<

                sqlCommand.CommandText = sqlText;
                #endregion  //[Select文作成]

                sqlCommand.Parameters.Clear();

                //Prameterオブジェクトの作成
                SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                //Parameterオブジェクトへ値設定
                findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpWork.AddUpDate);

                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                    findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                }
                // 修正 2009/04/02 <<<

                myReader = sqlCommand.ExecuteReader();

                // 修正 2009/04/02 全拠点締対応 >>>
                //if (myReader.Read())
                //{
                //    _monthlyAddUpHisWork = CopyToMonthlyAddUpHisWorkFromReader(ref myReader);
                //    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                //}
                //else
                //{
                //    throw new Exception("取消対象の親レコードがありません。");
                //}
                while (myReader.Read())
                {
                    _monthlyAddUpHisWorkList.Add(CopyToMonthlyAddUpHisWorkFromReader(ref myReader));
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                if (_monthlyAddUpHisWorkList == null || _monthlyAddUpHisWorkList.Count == 0)
                {
                    throw new Exception("取消対象の親レコードがありません。");
                }                
                // 修正 2009/04/02 <<<
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            #endregion  //[親レコード情報検索]

            if (!myReader.IsClosed) myReader.Close();
            if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL) throw new Exception("月次締更新履歴マスタ読込失敗。");
            status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            //締取消レコードINSERT -> 検索した親レコードの情報を使用して取消レコードをINSERT
            #region [締取消レコードINSERT]
            try
            {
                sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);
                sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                for (int i = 0; _monthlyAddUpHisWorkList.Count > i; i++)
                {
                    _monthlyAddUpHisWork = _monthlyAddUpHisWorkList[i] as MonthlyAddUpHisWork;

                    #region [Insert文作成]
                    sqlText = string.Empty;
                    sqlText += "INSERT INTO MONTHLYADDUPHISRF" + Environment.NewLine;
                    sqlText += " (CREATEDATETIMERF" + Environment.NewLine;
                    sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                    sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                    sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                    sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                    sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                    sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                    sqlText += " ,ACCRECACCPAYDIVRF" + Environment.NewLine;
                    sqlText += " ,ADDUPSECCODERF" + Environment.NewLine;
                    sqlText += " ,STMONCADDUPUPDDATERF" + Environment.NewLine;
                    sqlText += " ,MONTHLYADDUPDATERF" + Environment.NewLine;
                    sqlText += " ,MONTHADDUPYEARMONTHRF" + Environment.NewLine;
                    sqlText += " ,MONTHADDUPEXPDATERF" + Environment.NewLine;
                    sqlText += " ,LAMONCADDUPUPDDATERF" + Environment.NewLine;
                    sqlText += " ,DATAUPDATEDATETIMERF" + Environment.NewLine;
                    sqlText += " ,PROCDIVCDRF" + Environment.NewLine;
                    sqlText += " ,ERRORSTATUSRF" + Environment.NewLine;
                    sqlText += " ,HISTCTLCDRF" + Environment.NewLine;
                    sqlText += " ,PROCRESULTRF" + Environment.NewLine;
                    sqlText += " ,CONVERTPROCESSDIVCDRF" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;
                    sqlText += " VALUES" + Environment.NewLine;
                    sqlText += " (@CREATEDATETIME" + Environment.NewLine;
                    sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                    sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                    sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                    sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                    sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                    sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                    sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                    sqlText += " ,@ACCRECACCPAYDIV" + Environment.NewLine;
                    sqlText += " ,@ADDUPSECCODE" + Environment.NewLine;
                    sqlText += " ,@STMONCADDUPUPDDATE" + Environment.NewLine;
                    sqlText += " ,@MONTHLYADDUPDATE" + Environment.NewLine;
                    sqlText += " ,@MONTHADDUPYEARMONTH" + Environment.NewLine;
                    sqlText += " ,@MONTHADDUPEXPDATE" + Environment.NewLine;
                    sqlText += " ,@LAMONCADDUPUPDDATE" + Environment.NewLine;
                    sqlText += " ,@DATAUPDATEDATETIME" + Environment.NewLine;
                    sqlText += " ,@PROCDIVCD" + Environment.NewLine;
                    sqlText += " ,@ERRORSTATUS" + Environment.NewLine;
                    sqlText += " ,@HISTCTLCD" + Environment.NewLine;
                    sqlText += " ,@PROCRESULT" + Environment.NewLine;
                    sqlText += " ,@CONVERTPROCESSDIVCD" + Environment.NewLine;
                    sqlText += " )" + Environment.NewLine;

                    sqlCommand.CommandText = sqlText;
                    #endregion  //[Insert文作成]

                    sqlCommand.Parameters.Clear();

                    //登録ヘッダ情報を設定
                    object obj = (object)this;
                    IFileHeader flhd = (IFileHeader)_monthlyAddUpHisWork;
                    FileHeader fileHeader = new FileHeader(obj);
                    fileHeader.SetInsertHeader(ref flhd, obj);

                    #region Prameterオブジェクトの作成
                    SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);
                    SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);
                    SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);
                    SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);
                    SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                    SqlParameter paraAccRecAccPayDiv = sqlCommand.Parameters.Add("@ACCRECACCPAYDIV", SqlDbType.Int);
                    SqlParameter paraAddUpSecCode = sqlCommand.Parameters.Add("@ADDUPSECCODE", SqlDbType.NChar);
                    SqlParameter paraStMonCAddUpUpdDate = sqlCommand.Parameters.Add("@STMONCADDUPUPDDATE", SqlDbType.Int);
                    SqlParameter paraMonthlyAddUpDate = sqlCommand.Parameters.Add("@MONTHLYADDUPDATE", SqlDbType.Int);
                    SqlParameter paraMonthAddUpYearMonth = sqlCommand.Parameters.Add("@MONTHADDUPYEARMONTH", SqlDbType.Int);
                    SqlParameter paraMonthAddUpExpDate = sqlCommand.Parameters.Add("@MONTHADDUPEXPDATE", SqlDbType.Int);
                    SqlParameter paraLaMonCAddUpUpdDate = sqlCommand.Parameters.Add("@LAMONCADDUPUPDDATE", SqlDbType.Int);
                    SqlParameter paraDataUpdateDateTime = sqlCommand.Parameters.Add("@DATAUPDATEDATETIME", SqlDbType.BigInt);
                    SqlParameter paraProcDivCd = sqlCommand.Parameters.Add("@PROCDIVCD", SqlDbType.Int);
                    SqlParameter paraErrorStatus = sqlCommand.Parameters.Add("@ERRORSTATUS", SqlDbType.Int);
                    SqlParameter paraHistCtlCd = sqlCommand.Parameters.Add("@HISTCTLCD", SqlDbType.Int);
                    SqlParameter paraProcResult = sqlCommand.Parameters.Add("@PROCRESULT", SqlDbType.NVarChar);
                    SqlParameter paraConvertProcessDivCd = sqlCommand.Parameters.Add("@CONVERTPROCESSDIVCD", SqlDbType.Int);
                    #endregion  //Prameterオブジェクトの作成

                    #region Parameterオブジェクトへ値設定
                    paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(_monthlyAddUpHisWork.CreateDateTime);
                    paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(_monthlyAddUpHisWork.UpdateDateTime);
                    paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(_monthlyAddUpHisWork.EnterpriseCode);
                    paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(_monthlyAddUpHisWork.FileHeaderGuid);
                    paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(_monthlyAddUpHisWork.UpdEmployeeCode);
                    paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(_monthlyAddUpHisWork.UpdAssemblyId1);
                    paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(_monthlyAddUpHisWork.UpdAssemblyId2);
                    paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(_monthlyAddUpHisWork.LogicalDeleteCode);
                    paraAccRecAccPayDiv.Value = SqlDataMediator.SqlSetInt32(_monthlyAddUpHisWork.AccRecAccPayDiv);
                    paraAddUpSecCode.Value = SqlDataMediator.SqlSetString(_monthlyAddUpHisWork.AddUpSecCode);
                    //paraStMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(_monthlyAddUpHisWork.StMonCAddUpUpdDate);
                    // ADD 2008.11.25 >>>
                    if (_monthlyAddUpHisWork.StMonCAddUpUpdDate == DateTime.MinValue)
                        paraStMonCAddUpUpdDate.Value = 0;
                    else
                        paraStMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(_monthlyAddUpHisWork.StMonCAddUpUpdDate);
                    // ADD 2008.11.25 <<<

                    paraMonthlyAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(_monthlyAddUpHisWork.MonthlyAddUpDate);
                    paraMonthAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(_monthlyAddUpHisWork.MonthAddUpYearMonth);
                    paraMonthAddUpExpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(_monthlyAddUpHisWork.MonthAddUpExpDate);
                    paraLaMonCAddUpUpdDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(_monthlyAddUpHisWork.LaMonCAddUpUpdDate);
                    paraDataUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(_monthlyAddUpHisWork.CreateDateTime);
                    paraErrorStatus.Value = SqlDataMediator.SqlSetInt32(_monthlyAddUpHisWork.ErrorStatus);
                    paraProcResult.Value = SqlDataMediator.SqlSetString(_monthlyAddUpHisWork.ProcResult);
                    paraConvertProcessDivCd.Value = SqlDataMediator.SqlSetInt32(_monthlyAddUpHisWork.ConvertProcessDivCd);
                    paraProcDivCd.Value = 1;
                    paraProcResult.Value = "正常終了";
                    paraHistCtlCd.Value = 1;
                    #endregion  //Parameterオブジェクトへ値設定

                    sqlCommand.ExecuteNonQuery();
                }
                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            #endregion  //[締取消レコードINSERT]

            if (!myReader.IsClosed) myReader.Close();
            if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL) throw new Exception("締取消レコードINSERT失敗。");
            status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            //親レコードUPDATE -> 履歴制御区分を「1:未確定」に更新する
            #region [親レコードUPDATE]
            try
            {
                sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);
                sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                #region [Update文作成]
                sqlText = string.Empty;
                sqlText += "UPDATE " + Environment.NewLine;
                sqlText += "   MONTHLYADDUPHISRF " + Environment.NewLine;
                sqlText += " SET " + Environment.NewLine;
                sqlText += "  HISTCTLCDRF=1" + Environment.NewLine;
                sqlText += " WHERE" + Environment.NewLine;
                sqlText += "      ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "  AND MONTHLYADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;
                sqlText += "  AND ACCRECACCPAYDIVRF=1" + Environment.NewLine;
                sqlText += "  AND PROCDIVCDRF=0" + Environment.NewLine;
                sqlText += "  AND HISTCTLCDRF=0" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "  AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<

                sqlCommand.CommandText = sqlText;
                #endregion  //[Update文作成]

                sqlCommand.Parameters.Clear();

                //Prameterオブジェクトの作成
                SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                //Parameterオブジェクトへ値設定
                findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpWork.AddUpDate);

                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                    findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                }
                // 修正 2009/04/02 <<<

                sqlCommand.ExecuteNonQuery();

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            #endregion  //[親レコードUPDATE]

            // --- ADD 2008.10.01 ----------<<<<<

            return status;
        }

        /// <summary>
        /// 締取消を行います(得意先売掛金額マスタ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 締取消を行います(得意先売掛金額マスタ削除)</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        //private int DeleteCustAccRecProc(ArrayList deleteList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        private int DeleteCustAccRecProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM CUSTACCRECRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                #endregion

                //using (SqlCommand sqlCommand = new SqlCommand("DELETE FROM CUSTACCRECRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND ADDUPSECCODERF=@FINDADDUPSECCODE AND ADDUPDATERF=@FINDADDUPDATE ", sqlConnection, sqlTransaction))
                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpWork.AddUpDate);

                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }
                    // 修正 2009/04/02 <<<

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 締取消を行います(売掛入金集計データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメーター</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 締取消を行います(売掛入金集計データ削除)</br>
        /// <br>Programmer : 23012　畠中 啓次朗</br>
        /// <br>Date       : 2008.12.22</br>
        private int DeleteAccRecDepoTotalProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM ACCRECDEPOTOTALRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                #endregion 
                //using (SqlCommand sqlCommand = new SqlCommand("DELETE FROM ACCRECDEPOTOTALRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND ADDUPSECCODERF=@FINDADDUPSECCODE AND ADDUPDATERF=@FINDADDUPDATE ", sqlConnection, sqlTransaction))
                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpWork.AddUpDate);

                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }
                    // 修正 2009/04/02 <<<

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            return status;
        }

        /// <summary>
        /// 締取消を行います(仕入先買掛金額マスタ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 締取消を行います(得意先売掛金額マスタ削除)</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        private int DeleteSuplAccPayProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            string sqlText = string.Empty;

            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM SUPLACCPAYRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                #endregion

                //using (SqlCommand sqlCommand = new SqlCommand("DELETE FROM SUPLACCPAYRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND ADDUPSECCODERF=@FINDADDUPSECCODE AND ADDUPDATERF=@FINDADDUPDATE ", sqlConnection, sqlTransaction))
                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpWork.AddUpDate);

                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }
                    // 修正 2009/04/02 <<<

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 締取消を行います(買掛支払集計データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 締取消を行います(買掛支払集計データ削除)</br>
        /// <br>Programmer : 23012　畠中 啓次朗</br>
        /// <br>Date       : 2009.01.07</br>
        private int DeleteACalcPayTotalProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            string sqlText = string.Empty;

            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM ACALCPAYTOTALRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPDATERF=@FINDADDUPDATE" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                #endregion


                //using (SqlCommand sqlCommand = new SqlCommand("DELETE FROM ACALCPAYTOTALRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND ADDUPSECCODERF=@FINDADDUPSECCODE AND ADDUPDATERF=@FINDADDUPDATE ", sqlConnection, sqlTransaction))
                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpWork.AddUpDate);

                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }
                    // 修正 2009/04/02 <<<

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 締取消を行います(在庫履歴データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 締取消を行います(在庫履歴データ削除)</br>
        /// <br>Programmer : 23012　畠中 啓次朗</br>
        /// <br>Date       : 2009.01.07</br>
        private int DeleteStockHistoryProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            string sqlText = string.Empty;

            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM STOCKHISTORYRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPYEARMONTHRF=@FINDADDUPYEARMONTH" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND SECTIONCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                #endregion

                //using (SqlCommand sqlCommand = new SqlCommand("DELETE FROM STOCKHISTORYRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND SECTIONCODERF=@FINDADDUPSECCODE AND ADDUPYEARMONTHRF=@FINDADDUPYEARMONTH ", sqlConnection, sqlTransaction))
                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPYEARMONTH", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(monthlyAddUpWork.LstMonAddUpProcDay);

                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }
                    // 修正 2009/04/02 <<<

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 締取消を行います(売上仕入月次集計データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 締取消を行います(売上仕入月次集計データ削除)</br>
        /// <br>Programmer : 23012　畠中 啓次朗</br>
        /// <br>Date       : 2009.01.07</br>
        private int DeleteMTtlSalesStockSlipProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            string sqlText = string.Empty;

            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM MTTLSALESSTOCKSLIPRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPYEARMONTHRF=@FINDADDUPYEARMONTH" + Environment.NewLine;
                // 修正 2009/04/02 全拠点締対応 >>>
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                // 修正 2009/04/02 <<<
                #endregion

                //using (SqlCommand sqlCommand = new SqlCommand("DELETE FROM MTTLSALESSTOCKSLIPRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND ADDUPSECCODERF=@FINDADDUPSECCODE AND ADDUPYEARMONTHRF=@FINDADDUPYEARMONTH ", sqlConnection, sqlTransaction))
                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPYEARMONTH", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(monthlyAddUpWork.LstMonAddUpProcDay);

                    // 修正 2009/04/02 全拠点締対応 >>>
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }
                    // 修正 2009/04/02 <<<

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        #endregion

        //ADD START zhouyu 2011/07/15 FOR 連番 42
        #region [Delete 古いデータの削除]
        /// <summary>
        /// 古いデータを削除します
        /// </summary>
        /// <param name="paraObj">古いデータパラメータ</param>
        /// <param name="msgDiv">エラーメッセージ有無区分</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="monAddUpUpdDiv">月次更新区分→0:売上月次更新,1:仕入月次更新</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : </br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        public int Delete(ref object paraObj, out bool msgDiv, out string retMsg, int monAddUpUpdDiv)
        {
            //●STATUS初期化
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            SqlConnection sqlConnection = null;
            SqlTransaction sqlTransaction = null;

            msgDiv = false;
            retMsg = null;

            try
            {
                MonthlyAddUpWork monthlyAddUpWork = paraObj as MonthlyAddUpWork;

                //●パラメータチェック
                if (monthlyAddUpWork == null)
                    return (int)ConstantManagement.DB_Status.ctDB_NORMAL;

                //●コネクション生成
                sqlConnection = CreateSqlConnection();
                if (sqlConnection == null) return status;
                sqlConnection.Open();

                //トランザクション開始
                sqlTransaction = sqlConnection.BeginTransaction((IsolationLevel)ConstantManagement.DB_IsolationLevel.ctDB_Default);

                //排他制御
                ShareCheckInfo info = new ShareCheckInfo();
                if (monthlyAddUpWork.AddUpSecCode == "" || monthlyAddUpWork.AddUpSecCode == "00")
                {
                    //システムロック(企業)
                    info.Keys.Add(monthlyAddUpWork.EnterpriseCode, ShareCheckType.Enterprise, "", "");
                    status = this.ShareCheck(info, LockControl.Locke, sqlConnection, sqlTransaction);
                }
                else
                {
                    //システムロック(拠点)
                    info.Keys.Add(monthlyAddUpWork.EnterpriseCode, ShareCheckType.Enterprise, "", "");
                    status = this.ShareCheck(info, LockControl.Locke, sqlConnection, sqlTransaction);
                }
                if (status != 0)
                {
                    return status = 851;
                }

                #region ①日次データ削除

                //売上明細データ
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldSalesDetailProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //売上データ
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldSalesSlipProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //入金明細データ
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldDepsitDtlProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //入金マスタ
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldDepsitMainProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //支払明細データ
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldPaymentDtlProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //支払伝票マスタ
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldPaymentSlpProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                #endregion

                #region ②実績データ削除

                //●売掛金額マスタ削除
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldCustAccRecProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //●売掛入金集計データ削除
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldAccRecDepoTotalProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //得意先請求金額マスタ
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldCustDmdPrcProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //請求入金集計データ
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldDmdDepoTotalProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //売上月次集計データ
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldMTtlSalesSlipProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //商品別売上月次集計データ
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldGoodsMTtlSaSlipProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //●買掛金額マスタ削除
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldSuplAccPayProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //●買掛支払集計データ削除
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldACalcPayTotalProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //仕入月次集計データ削除
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldMTtlStockSlipProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //仕入先支払金額マスタ削除
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldSuplierPayProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //精算支払集計データ削除
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldAccPayTotalProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //●在庫履歴データ削除
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldStockHistoryProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                //●売上仕入月次集計データ削除
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    status = DeleteOldMTtlSalesStockSlipProc(monthlyAddUpWork, ref sqlConnection, ref sqlTransaction);

                #endregion

                //システムロック解除
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    status = this.ShareCheck(info, LockControl.Release, sqlConnection, sqlTransaction);
                }

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    sqlTransaction.Commit();
                else
                {
                    if (sqlTransaction.Connection != null) sqlTransaction.Rollback();
                }
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.Delete");
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                // ロールバック
                if (sqlTransaction.Connection != null) sqlTransaction.Rollback();
            }
            finally
            {
                if (sqlTransaction != null) sqlTransaction.Dispose();
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }
            return status;
        }

        /// <summary>
        /// 古いデータの削除を行います(売上データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(売上データ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldSalesSlipProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.DataSaveMonths == 0)
                return status;

            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM SALESSLIPRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPADATERF<=@FINDADDUPADATE" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpADate = sqlCommand.Parameters.Add("@FINDADDUPADATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpADate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpDate.AddMonths((monthlyAddUpWork.DataSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 古いデータの削除を行います(売上明細データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(売上明細データ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldSalesDetailProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.DataSaveMonths == 0)
                return status;

            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE SALESDETAILRF" + Environment.NewLine;
                sqlText += " FROM SALESDETAILRF" + Environment.NewLine;
                sqlText += " LEFT JOIN SALESSLIPRF ON  SALESDETAILRF.ENTERPRISECODERF=SALESSLIPRF.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " AND SALESDETAILRF.ACPTANODRSTATUSRF=SALESSLIPRF.ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " AND SALESDETAILRF.SALESSLIPNUMRF=SALESSLIPRF.SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " WHERE SALESSLIPRF.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND SALESSLIPRF.ADDUPADATERF<=@FINDADDUPADATE" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND SALESSLIPRF.ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpADate = sqlCommand.Parameters.Add("@FINDADDUPADATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpADate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpDate.AddMonths((monthlyAddUpWork.DataSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 古いデータの削除を行います(入金マスタ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(入金マスタ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldDepsitMainProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.DataSaveMonths == 0)
                return status;

            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM DEPSITMAINRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPADATERF<=@FINDADDUPADATE" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpADate = sqlCommand.Parameters.Add("@FINDADDUPADATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpADate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpDate.AddMonths((monthlyAddUpWork.DataSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 古いデータの削除を行います(入金明細データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(入金明細データ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldDepsitDtlProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.DataSaveMonths == 0)
                return status;

            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE DEPSITDTLRF" + Environment.NewLine;
                sqlText += " FROM DEPSITDTLRF" + Environment.NewLine;
                sqlText += " LEFT JOIN DEPSITMAINRF ON DEPSITDTLRF.ENTERPRISECODERF=DEPSITMAINRF.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " AND DEPSITDTLRF.ACPTANODRSTATUSRF=DEPSITMAINRF.ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " AND DEPSITDTLRF.DEPOSITSLIPNORF=DEPSITMAINRF.DEPOSITSLIPNORF" + Environment.NewLine;
                sqlText += " WHERE DEPSITMAINRF.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND DEPSITMAINRF.ADDUPADATERF<=@FINDADDUPADATE" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND DEPSITMAINRF.ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpADate = sqlCommand.Parameters.Add("@FINDADDUPADATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpADate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpDate.AddMonths((monthlyAddUpWork.DataSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 古いデータの削除を行います(支払伝票マスタ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(支払伝票マスタ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldPaymentSlpProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.DataSaveMonths == 0)
                return status;

            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM PAYMENTSLPRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPADATERF<=@FINDADDUPADATE" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpADate = sqlCommand.Parameters.Add("@FINDADDUPADATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpADate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpDate.AddMonths((monthlyAddUpWork.DataSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 古いデータの削除を行います(支払明細データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(支払明細データ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldPaymentDtlProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.DataSaveMonths == 0)
                return status;

            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE PAYMENTDTLRF" + Environment.NewLine;
                sqlText += " FROM PAYMENTDTLRF" + Environment.NewLine;
                sqlText += " LEFT JOIN PAYMENTSLPRF ON PAYMENTSLPRF.ENTERPRISECODERF=PAYMENTDTLRF.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " AND PAYMENTSLPRF.SUPPLIERFORMALRF=PAYMENTDTLRF.SUPPLIERFORMALRF" + Environment.NewLine;
                sqlText += " AND PAYMENTSLPRF.PAYMENTSLIPNORF=PAYMENTDTLRF.PAYMENTSLIPNORF" + Environment.NewLine;
                sqlText += " WHERE PAYMENTSLPRF.ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND PAYMENTSLPRF.ADDUPADATERF<=@FINDADDUPADATE" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND PAYMENTSLPRF.ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpADate = sqlCommand.Parameters.Add("@FINDADDUPADATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpADate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpDate.AddMonths((monthlyAddUpWork.DataSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 古いデータの削除を行います(得意先請求金額マスタ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(得意先請求金額マスタ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldCustDmdPrcProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.ResultDtSaveMonths == 0)
                return status;

            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM CUSTDMDPRCRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPDATERF<=@FINDADDUPDATE" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpDate.AddMonths((monthlyAddUpWork.ResultDtSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 古いデータの削除を行います(請求入金集計データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(請求入金集計データ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldDmdDepoTotalProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.ResultDtSaveMonths == 0)
                return status;

            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM DMDDEPOTOTALRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPDATERF<=@FINDADDUPDATE" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpDate.AddMonths((monthlyAddUpWork.ResultDtSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 古いデータの削除を行います(仕入先支払金額マスタ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(仕入先支払金額マスタ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldSuplierPayProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.ResultDtSaveMonths == 0)
                return status;

            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM SUPLIERPAYRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPDATERF<=@FINDADDUPDATE" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpDate.AddMonths((monthlyAddUpWork.ResultDtSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }
        /// <summary>
        /// 古いデータの削除を行います(精算支払集計データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(精算支払集計データ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldAccPayTotalProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.ResultDtSaveMonths == 0)
                return status;

            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM ACCPAYTOTALRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPDATERF<=@FINDADDUPDATE" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpDate.AddMonths((monthlyAddUpWork.ResultDtSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }
        /// <summary>
        /// 古いデータの削除を行います(売上月次集計データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(売上月次集計データ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldMTtlSalesSlipProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.ResultDtSaveMonths == 0)
                return status;

            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM MTTLSALESSLIPRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPYEARMONTHRF<=@FINDADDUPYEARMONTH" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpYearMonth = sqlCommand.Parameters.Add("@FINDADDUPYEARMONTH", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(monthlyAddUpDate.AddMonths((monthlyAddUpWork.ResultDtSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }
        /// <summary>
        /// 古いデータの削除を行います(商品別売上月次集計データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(商品別売上月次集計データ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldGoodsMTtlSaSlipProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.ResultDtSaveMonths == 0)
                return status;

            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM GOODSMTTLSASLIPRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPYEARMONTHRF<=@FINDADDUPYEARMONTH" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpYearMonth = sqlCommand.Parameters.Add("@FINDADDUPYEARMONTH", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(monthlyAddUpDate.AddMonths((monthlyAddUpWork.ResultDtSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }
        /// <summary>
        /// 古いデータの削除を行います(仕入月次集計データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(仕入月次集計データ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldMTtlStockSlipProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.ResultDtSaveMonths == 0)
                return status;

            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM MTTLSTOCKSLIPRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND STOCKDATEYMRF<=@FINDADDUPYEARMONTH" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpYearMonth = sqlCommand.Parameters.Add("@FINDADDUPYEARMONTH", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(monthlyAddUpDate.AddMonths((monthlyAddUpWork.ResultDtSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 古いデータの削除を行います(得意先売掛金額マスタ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(得意先売掛金額マスタ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldCustAccRecProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.ResultDtSaveMonths == 0)
                return status;

            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM CUSTACCRECRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPDATERF<=@FINDADDUPDATE" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpDate.AddMonths((monthlyAddUpWork.ResultDtSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 古いデータの削除を行います(売掛入金集計データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメーター</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(売掛入金集計データ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldAccRecDepoTotalProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.ResultDtSaveMonths == 0)
                return status;

            string sqlText = string.Empty;
            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM ACCRECDEPOTOTALRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPDATERF<=@FINDADDUPDATE" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion
                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpDate.AddMonths((monthlyAddUpWork.ResultDtSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            return status;
        }

        /// <summary>
        /// 古いデータの削除を行います(仕入先買掛金額マスタ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(仕入先買掛金額マスタ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldSuplAccPayProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.ResultDtSaveMonths == 0)
                return status;

            string sqlText = string.Empty;

            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM SUPLACCPAYRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPDATERF<=@FINDADDUPDATE" + Environment.NewLine;
                //全拠点
                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpDate.AddMonths((monthlyAddUpWork.ResultDtSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 古いデータの削除を行います(買掛支払集計データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(買掛支払集計データ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldACalcPayTotalProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.ResultDtSaveMonths == 0)
                return status;

            string sqlText = string.Empty;

            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM ACALCPAYTOTALRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPDATERF<=@FINDADDUPDATE" + Environment.NewLine;

                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpDate = sqlCommand.Parameters.Add("@FINDADDUPDATE", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(monthlyAddUpDate.AddMonths((monthlyAddUpWork.ResultDtSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 古いデータの削除を行います(在庫履歴データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(在庫履歴データ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldStockHistoryProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.ResultDtSaveMonths == 0)
                return status;

            string sqlText = string.Empty;

            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM STOCKHISTORYRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPYEARMONTHRF<=@FINDADDUPYEARMONTH" + Environment.NewLine;

                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND SECTIONCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpYearMonth = sqlCommand.Parameters.Add("@FINDADDUPYEARMONTH", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(monthlyAddUpDate.AddMonths((monthlyAddUpWork.ResultDtSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }

        /// <summary>
        /// 古いデータの削除を行います(売上仕入月次集計データ削除)
        /// </summary>
        /// <param name="monthlyAddUpWork">削除パラメータ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="sqlTransaction">sqlトランザクション</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 古いデータの削除を行います(売上仕入月次集計データ削除)</br>
        /// <br>Programmer : zhouyu</br>
        /// <br>Date       : 2011.07.11</br>
        private int DeleteOldMTtlSalesStockSlipProc(MonthlyAddUpWork monthlyAddUpWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (monthlyAddUpWork.ResultDtSaveMonths == 0)
                return status;

            string sqlText = string.Empty;

            try
            {
                #region DELETE文作成
                sqlText = string.Empty;
                sqlText += "DELETE" + Environment.NewLine;
                sqlText += " FROM MTTLSALESSTOCKSLIPRF" + Environment.NewLine;
                sqlText += " WHERE ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "        AND ADDUPYEARMONTHRF<=@FINDADDUPYEARMONTH" + Environment.NewLine;

                if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                {
                    sqlText += "        AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                }
                #endregion

                using (SqlCommand sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction))
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpYearMonth = sqlCommand.Parameters.Add("@FINDADDUPYEARMONTH", SqlDbType.Int);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.EnterpriseCode);
                    DateTime monthlyAddUpDate = monthlyAddUpWork.ThisMonAddUpProcDay;
                    findParaAddUpYearMonth.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMM(monthlyAddUpDate.AddMonths((monthlyAddUpWork.ResultDtSaveMonths) * (-1)));

                    //全拠点
                    if (monthlyAddUpWork.AddUpSecCode != "00" && monthlyAddUpWork.AddUpSecCode != "")
                    {
                        SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);
                        findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpWork.AddUpSecCode);
                    }

                    sqlCommand.ExecuteNonQuery();

                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }

            return status;
        }
        #endregion
        //ADD END zhouyu 2011/07/15 FOR 連番 42

        #region [etc クラス格納処理]
        /// <summary>
        /// 得意先マスタ　クラス格納処理 Reader → CustomerWork
        /// </summary>
        /// <param name="myReader">SqlDataReader</param>
        /// <returns>CustomerWork</returns>
        /// <remarks>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// </remarks>
        private CustomerWork CopyToCustomerWorkFromReader(ref SqlDataReader myReader)
        {
            CustomerWork wkCustomerWork = new CustomerWork();

            #region クラスへ格納
            wkCustomerWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));
            wkCustomerWork.CustomerCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CUSTOMERCODERF"));
            wkCustomerWork.Name = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("NAMERF"));
            wkCustomerWork.Name2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("NAME2RF"));
            wkCustomerWork.TotalDay = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("TOTALDAYRF"));
            wkCustomerWork.ConsTaxLayMethod = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CONSTAXLAYMETHODRF"));
            wkCustomerWork.ClaimCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CLAIMCODERF"));
            wkCustomerWork.CustomerSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CUSTOMERSNMRF"));
            wkCustomerWork.MngSectionCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("MNGSECTIONCODERF"));
            wkCustomerWork.AcceptWholeSale = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ACCEPTWHOLESALERF"));
            // --- ADD 2008.09.17 ---------->>>>>
            wkCustomerWork.ClaimName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CLAIMNAMERF"));
            wkCustomerWork.ClaimName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CLAIMNAME2RF"));
            wkCustomerWork.ClaimSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CLAIMSNMRF"));
            wkCustomerWork.SalesCnsTaxFrcProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SALESCNSTAXFRCPROCCDRF"));
            wkCustomerWork.ClaimSectionCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CLAIMSECTIONCODERF"));
            
            // --- ADD 2008.09.17 ----------<<<<<
            #endregion

            return wkCustomerWork;
        }

        /// <summary>
        /// 仕入先マスタ　クラス格納処理 Reader → SupplierWork
        /// </summary>
        /// <param name="myReader">SqlDataReader</param>
        /// <returns>SupplierWork</returns>
        /// <remarks>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        private SupplierWork CopyToSupplierWorkFromReader(ref SqlDataReader myReader)
        {
            SupplierWork wkSupplierWork = new SupplierWork();

            #region クラスへ格納
            wkSupplierWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));
            wkSupplierWork.SupplierCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPLIERCDRF"));
            wkSupplierWork.MngSectionCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("MNGSECTIONCODERF"));
            wkSupplierWork.InpSectionCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INPSECTIONCODERF"));
            wkSupplierWork.PaymentSectionCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYMENTSECTIONCODERF"));
            wkSupplierWork.SupplierNm1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM1RF"));
            wkSupplierWork.SupplierNm2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM2RF"));
            wkSupplierWork.SuppHonorificTitle = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPHONORIFICTITLERF"));
            wkSupplierWork.SupplierKana = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERKANARF"));
            wkSupplierWork.SupplierSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERSNMRF"));
            wkSupplierWork.OrderHonorificTtl = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ORDERHONORIFICTTLRF"));
            wkSupplierWork.BusinessTypeCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("BUSINESSTYPECODERF"));
            wkSupplierWork.SalesAreaCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SALESAREACODERF"));
            wkSupplierWork.SupplierPostNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERPOSTNORF"));
            wkSupplierWork.SupplierAddr1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERADDR1RF"));
            wkSupplierWork.SupplierAddr3 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERADDR3RF"));
            wkSupplierWork.SupplierAddr4 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERADDR4RF"));
            wkSupplierWork.SupplierTelNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERTELNORF"));
            wkSupplierWork.SupplierTelNo1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERTELNO1RF"));
            wkSupplierWork.SupplierTelNo2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERTELNO2RF"));
            wkSupplierWork.PureCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PURECODERF"));
            wkSupplierWork.PaymentMonthCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYMENTMONTHCODERF"));
            wkSupplierWork.PaymentMonthName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYMENTMONTHNAMERF"));
            wkSupplierWork.PaymentDay = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYMENTDAYRF"));
            wkSupplierWork.SuppCTaxLayRefCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPCTAXLAYREFCDRF"));
            wkSupplierWork.SuppCTaxLayCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPCTAXLAYCDRF"));
            wkSupplierWork.SuppCTaxationCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPCTAXATIONCDRF"));
            wkSupplierWork.SuppEnterpriseCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPENTERPRISECDRF"));
            wkSupplierWork.PayeeCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYEECODERF"));
            wkSupplierWork.SupplierAttributeDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPLIERATTRIBUTEDIVRF"));
            wkSupplierWork.SuppTtlAmntDspWayCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPTTLAMNTDSPWAYCDRF"));
            wkSupplierWork.StckTtlAmntDspWayRef = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("STCKTTLAMNTDSPWAYREFRF"));
            wkSupplierWork.PaymentCond = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYMENTCONDRF"));
            wkSupplierWork.PaymentTotalDay = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYMENTTOTALDAYRF"));
            wkSupplierWork.PaymentSight = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYMENTSIGHTRF"));
            wkSupplierWork.StockAgentCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("STOCKAGENTCODERF"));
            wkSupplierWork.StockUnPrcFrcProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("STOCKUNPRCFRCPROCCDRF"));
            wkSupplierWork.StockMoneyFrcProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("STOCKMONEYFRCPROCCDRF"));
            wkSupplierWork.StockCnsTaxFrcProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("STOCKCNSTAXFRCPROCCDRF"));
            wkSupplierWork.NTimeCalcStDate = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("NTIMECALCSTDATERF"));
            wkSupplierWork.SupplierNote1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNOTE1RF"));
            wkSupplierWork.SupplierNote2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNOTE2RF"));
            wkSupplierWork.SupplierNote3 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNOTE3RF"));
            wkSupplierWork.SupplierNote4 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNOTE4RF"));
            // --- ADD 2008.09.17 ---------->>>>>
            wkSupplierWork.PayeeName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYEENM1RF"));
            wkSupplierWork.PayeeName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYEENM2RF"));
            wkSupplierWork.PayeeSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYEESNMRF"));
            // --- ADD 2008.09.17 ----------<<<<<
            #endregion

            return wkSupplierWork;
        }

        /// <summary>
        /// 税率設定マスタ　クラス格納処理 Reader → TaxRateSetWork
        /// </summary>
        /// <param name="myReader">SqlDataReader</param>
        /// <returns>TaxRateSetWork</returns>
        /// <remarks>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// </remarks>
        private TaxRateSetWork CopyToTaxRateSetWorkFromReader(ref SqlDataReader myReader)
        {
            TaxRateSetWork wkTaxRateSetWork = new TaxRateSetWork();

            #region クラスへ格納
            wkTaxRateSetWork.TaxRateStartDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("TAXRATESTARTDATERF"));
            wkTaxRateSetWork.TaxRateEndDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("TAXRATEENDDATERF"));
            wkTaxRateSetWork.TaxRate = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TAXRATERF"));
            wkTaxRateSetWork.TaxRateStartDate2 = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("TAXRATESTARTDATE2RF"));
            wkTaxRateSetWork.TaxRateEndDate2 = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("TAXRATEENDDATE2RF"));
            wkTaxRateSetWork.TaxRate2 = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TAXRATE2RF"));
            wkTaxRateSetWork.TaxRateStartDate3 = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("TAXRATESTARTDATE3RF"));
            wkTaxRateSetWork.TaxRateEndDate3 = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("TAXRATEENDDATE3RF"));
            wkTaxRateSetWork.TaxRate3 = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("TAXRATE3RF"));
            #endregion

            return wkTaxRateSetWork;
        }

        /// <summary>
        /// 入金マスタ　クラス格納処理 Reader → DepsitMainWork
        /// </summary>
        /// <param name="myReader">SqlDataReader</param>
        /// <returns>DepsitMainWork</returns>
        /// <remarks>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// </remarks>
        private DepsitMainWork CopyToDepsitMainWorkFromReader(ref SqlDataReader myReader)
        {
            DepsitMainWork wkDepsitMainWork = new DepsitMainWork();

            #region クラスへ格納
            wkDepsitMainWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF"));
            wkDepsitMainWork.UpdateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));
            wkDepsitMainWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));
            wkDepsitMainWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF"));
            wkDepsitMainWork.UpdEmployeeCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDEMPLOYEECODERF"));
            wkDepsitMainWork.UpdAssemblyId1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID1RF"));
            wkDepsitMainWork.UpdAssemblyId2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID2RF"));
            wkDepsitMainWork.LogicalDeleteCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LOGICALDELETECODERF"));
            wkDepsitMainWork.AcptAnOdrStatus = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ACPTANODRSTATUSRF"));
            wkDepsitMainWork.DepositDebitNoteCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DEPOSITDEBITNOTECDRF"));
            wkDepsitMainWork.DepositSlipNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DEPOSITSLIPNORF"));
            wkDepsitMainWork.SalesSlipNum = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SALESSLIPNUMRF"));
            wkDepsitMainWork.InputDepositSecCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INPUTDEPOSITSECCDRF"));
            wkDepsitMainWork.AddUpSecCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ADDUPSECCODERF"));
            wkDepsitMainWork.UpdateSecCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDATESECCDRF"));
            wkDepsitMainWork.SubSectionCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUBSECTIONCODERF"));
            wkDepsitMainWork.DepositDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("DEPOSITDATERF"));
            wkDepsitMainWork.AddUpADate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("ADDUPADATERF"));
            wkDepsitMainWork.DepositTotal = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("DEPOSITTOTALRF"));
            wkDepsitMainWork.Deposit = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("DEPOSITRF"));
            wkDepsitMainWork.FeeDeposit = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("FEEDEPOSITRF"));
            wkDepsitMainWork.DiscountDeposit = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("DISCOUNTDEPOSITRF"));
            wkDepsitMainWork.AutoDepositCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("AUTODEPOSITCDRF"));
            wkDepsitMainWork.DraftDrawingDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("DRAFTDRAWINGDATERF"));
            wkDepsitMainWork.DraftKind = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DRAFTKINDRF"));
            wkDepsitMainWork.DraftKindName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("DRAFTKINDNAMERF"));
            wkDepsitMainWork.DraftDivide = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DRAFTDIVIDERF"));
            wkDepsitMainWork.DraftDivideName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("DRAFTDIVIDENAMERF"));
            wkDepsitMainWork.DraftNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("DRAFTNORF"));
            wkDepsitMainWork.DepositAllowance = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("DEPOSITALLOWANCERF"));
            wkDepsitMainWork.DepositAlwcBlnce = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("DEPOSITALWCBLNCERF"));
            wkDepsitMainWork.DebitNoteLinkDepoNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DEBITNOTELINKDEPONORF"));
            wkDepsitMainWork.LastReconcileAddUpDt = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("LASTRECONCILEADDUPDTRF"));
            wkDepsitMainWork.DepositAgentCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("DEPOSITAGENTCODERF"));
            wkDepsitMainWork.DepositAgentNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("DEPOSITAGENTNMRF"));
            wkDepsitMainWork.DepositInputAgentCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("DEPOSITINPUTAGENTCDRF"));
            wkDepsitMainWork.DepositInputAgentNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("DEPOSITINPUTAGENTNMRF"));
            wkDepsitMainWork.CustomerCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CUSTOMERCODERF"));
            wkDepsitMainWork.CustomerName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CUSTOMERNAMERF"));
            wkDepsitMainWork.CustomerName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CUSTOMERNAME2RF"));
            wkDepsitMainWork.CustomerSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CUSTOMERSNMRF"));
            wkDepsitMainWork.ClaimCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CLAIMCODERF"));
            wkDepsitMainWork.ClaimName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CLAIMNAMERF"));
            wkDepsitMainWork.ClaimName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CLAIMNAME2RF"));
            wkDepsitMainWork.ClaimSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CLAIMSNMRF"));
            wkDepsitMainWork.Outline = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("OUTLINERF"));
            wkDepsitMainWork.BankCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("BANKCODERF"));
            wkDepsitMainWork.BankName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("BANKNAMERF"));
            #endregion

            return wkDepsitMainWork;
        }

        /// <summary>
        /// 売掛入金集計データ クラス格納処理 Reader → AccRecDepoTotalWork
        /// </summary>
        /// <param name="myReader">SqlDataReader</param>
        /// <returns>AccRecDepoTotalWork</returns>
        /// <remarks>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        private AccRecDepoTotalWork CopyToAccRecDepoTotalWorkFromReader(ref SqlDataReader myReader)
        {
            AccRecDepoTotalWork wkAccRecDepoTotalWork = new AccRecDepoTotalWork();

            #region クラスへ格納
            // 修正 2008.12.22 >>>
            #region 2008.12.22 DEL
            /*
            wkAccRecDepoTotalWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF"));
            wkAccRecDepoTotalWork.UpdateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));
            wkAccRecDepoTotalWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));
            wkAccRecDepoTotalWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF"));
            wkAccRecDepoTotalWork.UpdEmployeeCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDEMPLOYEECODERF"));
            wkAccRecDepoTotalWork.UpdAssemblyId1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID1RF"));
            wkAccRecDepoTotalWork.UpdAssemblyId2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID2RF"));
            wkAccRecDepoTotalWork.LogicalDeleteCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LOGICALDELETECODERF"));
            wkAccRecDepoTotalWork.AddUpSecCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ADDUPSECCODERF"));
            wkAccRecDepoTotalWork.ClaimCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CLAIMCODERF"));
            wkAccRecDepoTotalWork.CustomerCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CUSTOMERCODERF"));
            wkAccRecDepoTotalWork.AddUpDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("ADDUPADATERF"));
            wkAccRecDepoTotalWork.MoneyKindCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MONEYKINDCODERF"));
            wkAccRecDepoTotalWork.MoneyKindName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("MONEYKINDNAMERF"));
            wkAccRecDepoTotalWork.MoneyKindDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MONEYKINDDIVRF"));
            wkAccRecDepoTotalWork.Deposit = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("DEPOSITRF"));
            */
            #endregion
            wkAccRecDepoTotalWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));
            wkAccRecDepoTotalWork.ClaimCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CLAIMCODERF"));
            wkAccRecDepoTotalWork.MoneyKindCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MONEYKINDCODERF"));
            wkAccRecDepoTotalWork.MoneyKindName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("MONEYKINDNAMERF"));
            wkAccRecDepoTotalWork.MoneyKindDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MONEYKINDDIVRF"));
            wkAccRecDepoTotalWork.Deposit = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("DEPOSITRF"));
            // 修正 2008.12.22 <<<
            #endregion

            return wkAccRecDepoTotalWork;
        }

        /// <summary>
        /// 買掛支払集計データ クラス格納処理 Reader → ACalcPayTotalWork
        /// </summary>
        /// <param name="myReader">SqlDataReader</param>
        /// <returns>ACalcPayTotalWork</returns>
        /// <remarks>
        /// <br>Programmer : 20081　疋田　勇人</br>
        /// <br>Date       : 2008.07.28</br>
        /// </remarks>
        private ACalcPayTotalWork CopyToACalcPayTotalWorkFromReader(ref SqlDataReader myReader)
        {
            ACalcPayTotalWork wkACalcPayTotalWork = new ACalcPayTotalWork();

            #region クラスへ格納
            // 修正 2008.12.22 >>>
            #region 2008.12.22 DEL
            /*
            wkACalcPayTotalWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF"));
            wkACalcPayTotalWork.UpdateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));
            wkACalcPayTotalWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));
            wkACalcPayTotalWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF"));
            wkACalcPayTotalWork.UpdEmployeeCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDEMPLOYEECODERF"));
            wkACalcPayTotalWork.UpdAssemblyId1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID1RF"));
            wkACalcPayTotalWork.UpdAssemblyId2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID2RF"));
            wkACalcPayTotalWork.LogicalDeleteCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LOGICALDELETECODERF"));
            wkACalcPayTotalWork.AddUpSecCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ADDUPSECCODERF"));
            wkACalcPayTotalWork.PayeeCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYEECODERF"));
            wkACalcPayTotalWork.SupplierCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPLIERCDRF"));
            wkACalcPayTotalWork.AddUpDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("ADDUPADATERF"));
            wkACalcPayTotalWork.MoneyKindCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MONEYKINDCODERF"));
            wkACalcPayTotalWork.MoneyKindName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("MONEYKINDNAMERF"));
            wkACalcPayTotalWork.MoneyKindDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MONEYKINDDIVRF"));
            wkACalcPayTotalWork.Payment = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("PAYMENTRF"));
            */
            #endregion
            wkACalcPayTotalWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));
            wkACalcPayTotalWork.PayeeCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYEECODERF"));
            wkACalcPayTotalWork.MoneyKindCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MONEYKINDCODERF"));
            wkACalcPayTotalWork.MoneyKindName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("MONEYKINDNAMERF"));
            wkACalcPayTotalWork.MoneyKindDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MONEYKINDDIVRF"));
            wkACalcPayTotalWork.Payment = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("PAYMENTRF"));
            // 修正 2008.12.22 <<<
            #endregion

            return wkACalcPayTotalWork;
        }

        /// <summary>
        /// 支払伝票マスタ　クラス格納処理 Reader → PaymentSlpWork
        /// </summary>
        /// <param name="myReader">SqlDataReader</param>
        /// <returns>PaymentSlpWork</returns>
        /// <remarks>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.06</br>
        /// </remarks>
        private PaymentSlpWork CopyToPaymentSlpWorkFromReader(ref SqlDataReader myReader)
        {
            PaymentSlpWork wkPaymentSlpWork = new PaymentSlpWork();

            #region クラスへ格納
            wkPaymentSlpWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF"));
            wkPaymentSlpWork.UpdateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));
            wkPaymentSlpWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));
            wkPaymentSlpWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF"));
            wkPaymentSlpWork.UpdEmployeeCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDEMPLOYEECODERF"));
            wkPaymentSlpWork.UpdAssemblyId1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID1RF"));
            wkPaymentSlpWork.UpdAssemblyId2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID2RF"));
            wkPaymentSlpWork.LogicalDeleteCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LOGICALDELETECODERF"));
            wkPaymentSlpWork.DebitNoteDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DEBITNOTEDIVRF"));
            wkPaymentSlpWork.PaymentSlipNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYMENTSLIPNORF"));
            wkPaymentSlpWork.SupplierSlipNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPLIERSLIPNORF"));
            wkPaymentSlpWork.SupplierCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPLIERCDRF"));
            wkPaymentSlpWork.SupplierNm1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM1RF"));
            wkPaymentSlpWork.SupplierNm2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERNM2RF"));
            wkPaymentSlpWork.SupplierSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SUPPLIERSNMRF"));
            wkPaymentSlpWork.PayeeCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PAYEECODERF"));
            wkPaymentSlpWork.PayeeName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYEENAMERF"));
            wkPaymentSlpWork.PayeeName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYEENAME2RF"));
            wkPaymentSlpWork.PayeeSnm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYEESNMRF"));
            wkPaymentSlpWork.PaymentInpSectionCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYMENTINPSECTIONCDRF"));
            wkPaymentSlpWork.AddUpSecCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ADDUPSECCODERF"));
            wkPaymentSlpWork.UpdateSecCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDATESECCDRF"));
            wkPaymentSlpWork.SubSectionCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUBSECTIONCODERF"));
            wkPaymentSlpWork.PaymentDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("PAYMENTDATERF"));
            wkPaymentSlpWork.AddUpADate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("ADDUPADATERF"));
            wkPaymentSlpWork.PaymentTotal = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("PAYMENTTOTALRF"));
            wkPaymentSlpWork.Payment = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("PAYMENTRF"));
            wkPaymentSlpWork.FeePayment = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("FEEPAYMENTRF"));
            wkPaymentSlpWork.DiscountPayment = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("DISCOUNTPAYMENTRF"));
            wkPaymentSlpWork.AutoPayment = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("AUTOPAYMENTRF"));
            wkPaymentSlpWork.DraftDrawingDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("DRAFTDRAWINGDATERF"));
            wkPaymentSlpWork.DraftKind = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DRAFTKINDRF"));
            wkPaymentSlpWork.DraftKindName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("DRAFTKINDNAMERF"));
            wkPaymentSlpWork.DraftDivide = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DRAFTDIVIDERF"));
            wkPaymentSlpWork.DraftDivideName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("DRAFTDIVIDENAMERF"));
            wkPaymentSlpWork.DraftNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("DRAFTNORF"));
            wkPaymentSlpWork.DebitNoteLinkPayNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DEBITNOTELINKPAYNORF"));
            wkPaymentSlpWork.PaymentAgentCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYMENTAGENTCODERF"));
            wkPaymentSlpWork.PaymentAgentName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYMENTAGENTNAMERF"));
            wkPaymentSlpWork.PaymentInputAgentCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYMENTINPUTAGENTCDRF"));
            wkPaymentSlpWork.PaymentInputAgentNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PAYMENTINPUTAGENTNMRF"));
            wkPaymentSlpWork.Outline = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("OUTLINERF"));
            wkPaymentSlpWork.BankCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("BANKCODERF"));
            wkPaymentSlpWork.BankName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("BANKNAMERF"));
            #endregion

            return wkPaymentSlpWork;
        }

        /// <summary>
        /// 月次締更新履歴マスタ　クラス格納処理 Reader → MonthlyAddUpHisWork
        /// </summary>
        /// <param name="myReader">SqlDataReader</param>
        /// <returns>MonthlyAddUpHisWork</returns>
        /// <remarks>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.17</br>
        /// </remarks>
        private MonthlyAddUpHisWork CopyToMonthlyAddUpHisWorkFromReader(ref SqlDataReader myReader)
        {
            MonthlyAddUpHisWork wkMonthlyAddUpHisWork = new MonthlyAddUpHisWork();

            #region [2008.10.01 DEL]
            /* --- DEL 2008.10.01 ---------->>>>>
            #region クラスへ格納
            wkMonthlyAddUpHisWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF"));
            wkMonthlyAddUpHisWork.UpdateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));
            wkMonthlyAddUpHisWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));
            wkMonthlyAddUpHisWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF"));
            wkMonthlyAddUpHisWork.UpdEmployeeCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDEMPLOYEECODERF"));
            wkMonthlyAddUpHisWork.UpdAssemblyId1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID1RF"));
            wkMonthlyAddUpHisWork.UpdAssemblyId2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID2RF"));
            wkMonthlyAddUpHisWork.LogicalDeleteCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LOGICALDELETECODERF"));
            wkMonthlyAddUpHisWork.AddUpSecCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ADDUPSECCODERF"));
            wkMonthlyAddUpHisWork.StMonCAddUpUpdDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("STMONCADDUPUPDDATERF"));
            wkMonthlyAddUpHisWork.MonthlyAddUpDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("MONTHLYADDUPDATERF"));
            wkMonthlyAddUpHisWork.MonthAddUpYearMonth = SqlDataMediator.SqlGetDateTimeFromYYYYMM(myReader, myReader.GetOrdinal("MONTHADDUPYEARMONTHRF"));
            wkMonthlyAddUpHisWork.MonthAddUpExpDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("MONTHADDUPEXPDATERF"));
            wkMonthlyAddUpHisWork.LaMonCAddUpUpdDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("LAMONCADDUPUPDDATERF"));
            #endregion
               --- DEL 2008.10.01 ----------<<<<< */
            #endregion

            // --- ADD 2008.10.01 ---------->>>>>
            #region クラスへ格納
            wkMonthlyAddUpHisWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF"));
            wkMonthlyAddUpHisWork.UpdateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));
            wkMonthlyAddUpHisWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));
            wkMonthlyAddUpHisWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF"));
            wkMonthlyAddUpHisWork.UpdEmployeeCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDEMPLOYEECODERF"));
            wkMonthlyAddUpHisWork.UpdAssemblyId1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID1RF"));
            wkMonthlyAddUpHisWork.UpdAssemblyId2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID2RF"));
            wkMonthlyAddUpHisWork.LogicalDeleteCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LOGICALDELETECODERF"));
            wkMonthlyAddUpHisWork.AccRecAccPayDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ACCRECACCPAYDIVRF"));
            wkMonthlyAddUpHisWork.AddUpSecCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ADDUPSECCODERF"));
            wkMonthlyAddUpHisWork.StMonCAddUpUpdDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("STMONCADDUPUPDDATERF"));
            wkMonthlyAddUpHisWork.MonthlyAddUpDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("MONTHLYADDUPDATERF"));
            wkMonthlyAddUpHisWork.MonthAddUpYearMonth = SqlDataMediator.SqlGetDateTimeFromYYYYMM(myReader, myReader.GetOrdinal("MONTHADDUPYEARMONTHRF"));
            wkMonthlyAddUpHisWork.MonthAddUpExpDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("MONTHADDUPEXPDATERF"));
            wkMonthlyAddUpHisWork.LaMonCAddUpUpdDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("LAMONCADDUPUPDDATERF"));
            wkMonthlyAddUpHisWork.DataUpdateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("DATAUPDATEDATETIMERF"));
            wkMonthlyAddUpHisWork.ProcDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PROCDIVCDRF"));
            wkMonthlyAddUpHisWork.ErrorStatus = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ERRORSTATUSRF"));
            wkMonthlyAddUpHisWork.HistCtlCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("HISTCTLCDRF"));
            wkMonthlyAddUpHisWork.ProcResult = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PROCRESULTRF"));
            wkMonthlyAddUpHisWork.ConvertProcessDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CONVERTPROCESSDIVCDRF"));
            // --- ADD 2008.10.01 ----------<<<<<
            #endregion

            return wkMonthlyAddUpHisWork;
        }

        // ↓ 2007.11.07 980081 d
        ///// <summary>
        ///// 支払インセンティブデータ　クラス格納処理 Reader → IncDtbtWork
        ///// </summary>
        ///// <param name="myReader">SqlDataReader</param>
        ///// <returns>IncDtbtWork</returns>
        ///// <remarks>
        ///// <br>Programmer : 20036　斉藤　雅明</br>
        ///// <br>Date       : 2007.06.06</br>
        ///// </remarks>
        //private IncDtbtWork CopyToIncDtbtWorkFromReader(ref SqlDataReader myReader)
        //{
        //    IncDtbtWork wkIncDtbtWork = new IncDtbtWork();
        //
        //    #region クラスへ格納
        //    wkIncDtbtWork.IncDtbtTaxInc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("INCDTBTTAXINCRF"));
        //    wkIncDtbtWork.IncDtbtTaxExc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("INCDTBTTAXEXCRF"));
        //    wkIncDtbtWork.IncDtbtTaxFree = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("INCDTBTTAXFREERF"));
        //    wkIncDtbtWork.TaxationCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("TAXATIONCODERF"));
        //    #endregion
        //
        //    return wkIncDtbtWork;
        //}
        // ↑ 2007.11.07 980081 d

        /// <summary>
        /// SqlConnection生成処理
        /// </summary>
        /// <returns>SqlConnection</returns>
        /// <remarks>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.05</br>
        /// </remarks>
        private SqlConnection CreateSqlConnection()
        {
            SqlConnection retSqlConnection = null;

            SqlConnectionInfo sqlConnectionInfo = new SqlConnectionInfo();
            string connectionText = sqlConnectionInfo.GetConnectionInfo(ConstantManagement_SF_PRO.IndexCode_UserDB);
            if (connectionText == null || connectionText == "") return null;

            retSqlConnection = new SqlConnection(connectionText);

            return retSqlConnection;
        }
        #endregion

        #region [Read 最終月次締履歴取得]
        /// <summary>
        /// 最終月次締履歴取得処理
        /// </summary>
        /// <param name="paraObj">月次締更新履歴マスタReadパラメータ</param>
        /// <param name="retMsg">メッセージ</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 最終月次締履歴取得処理</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.17</br>
        /// </remarks>
        public int ReadHis(ref object paraObj, out string retMsg)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlConnection sqlConnection = null;
            retMsg = null;

            MonthlyAddUpHisWork monthlyAddUpHisWork = null;

            try
            {
                monthlyAddUpHisWork = paraObj as MonthlyAddUpHisWork;

                if (monthlyAddUpHisWork.EnterpriseCode == "" || monthlyAddUpHisWork.AddUpSecCode == "")
                {
                    retMsg = "条件が整っておりません。\r\n再度入力項目を入れなおしてください。";
                    return status;
                }

                //コネクション生成
                sqlConnection = CreateSqlConnection();
                if (sqlConnection == null) return status;
                sqlConnection.Open();

                status = ReadHisProc(ref monthlyAddUpHisWork, ref sqlConnection);

                paraObj = (object)monthlyAddUpHisWork;

            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.ReadHis");
            }
            finally
            {
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// 最終月次締履歴取得処理
        /// </summary>
        /// <param name="monthlyAddUpHisWork">月次締更新履歴マスタReadパラメータ</param>
        /// <param name="sqlConnection">SqlConnection</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 最終月次締履歴取得処理</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.04.17</br>
        private int ReadHisProc(ref MonthlyAddUpHisWork monthlyAddUpHisWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlDataReader myReader = null;

            try
            {
                //Selectコマンドの生成
                // --- ADD 2008.10.01 ---------->>>>>
                //using (SqlCommand sqlCommand = new SqlCommand("SELECT * FROM MONTHLYADDUPHISRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND ADDUPSECCODERF=@FINDADDUPSECCODE AND MONTHLYADDUPDATERF=(SELECT MAX(MONTHLYADDUPDATERF) FROM MONTHLYADDUPHISRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND ADDUPSECCODERF=@FINDADDUPSECCODE)", sqlConnection))
                using (SqlCommand sqlCommand = new SqlCommand())
                // --- ADD 2008.10.01 ----------<<<<<
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    // --- ADD 2008.10.01 ---------->>>>>
                    #region [Select文作成]
                    string sqlText = string.Empty;
                    sqlText += "SELECT *" + Environment.NewLine;
                    sqlText += " FROM MONTHLYADDUPHISRF" + Environment.NewLine;
                    sqlText += " WHERE" + Environment.NewLine;
                    sqlText += "      ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                    sqlText += "  AND MONTHLYADDUPDATERF=" + Environment.NewLine;
                    sqlText += "  (" + Environment.NewLine;
                    sqlText += "   SELECT MAX(MONTHLYADDUPDATERF)" + Environment.NewLine;
                    sqlText += "   FROM MONTHLYADDUPHISRF" + Environment.NewLine;
                    sqlText += "   WHERE" + Environment.NewLine;
                    sqlText += "        ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                    sqlText += "    AND PROCDIVCDRF=0" + Environment.NewLine;
                    sqlText += "    AND HISTCTLCDRF=0" + Environment.NewLine;
                    sqlText += "  )" + Environment.NewLine;

                    sqlCommand.CommandText = sqlText;
                    #endregion  //[Select文作成]
                    // --- ADD 2008.10.01 ----------<<<<<

                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.EnterpriseCode);
                    findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.AddUpSecCode);

                    myReader = sqlCommand.ExecuteReader();
                    if (myReader.Read())
                    {
                        monthlyAddUpHisWork = CopyToMonthlyAddUpHisWorkFromReader(ref myReader);
                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (myReader != null)
                    if (!myReader.IsClosed) myReader.Close();
            }

            return status;
        }

        /// <summary>
        /// 最終月次締履歴取得処理(SqlConnection付)
        /// </summary>
        /// <param name="monthlyAddUpHisWork">月次締更新履歴マスタReadパラメータ</param>
        /// <param name="sqlConnection">SqlConnection</param>
        /// <returns>STATUS</returns>
        public int ReadHis(ref MonthlyAddUpHisWork monthlyAddUpHisWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            status = ReadHisProcProc(ref monthlyAddUpHisWork, ref sqlConnection);
            return status;
        }

        /// <summary>
        /// 最終月次締履歴取得処理(SqlConnection付)
        /// </summary>
        /// <param name="monthlyAddUpHisWork">月次締更新履歴マスタReadパラメータ</param>
        /// <param name="sqlConnection">SqlConnection</param>
        /// <returns>STATUS</returns>
        private int ReadHisProcProc(ref MonthlyAddUpHisWork monthlyAddUpHisWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlDataReader myReader = null;

            try
            {
                // --- ADD 2008.10.01 ---------->>>>>
                //using (SqlCommand sqlCommand = new SqlCommand("SELECT * FROM MONTHLYADDUPHISRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND ADDUPSECCODERF=@FINDADDUPSECCODE AND MONTHLYADDUPDATERF=(SELECT MAX(MONTHLYADDUPDATERF) FROM MONTHLYADDUPHISRF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND ADDUPSECCODERF=@FINDADDUPSECCODE) ", sqlConnection))
                using (SqlCommand sqlCommand = new SqlCommand())
                // --- ADD 2008.10.01 ----------<<<<<
                {
                    sqlCommand.CommandTimeout = TimeOut;    //ADD 2011/12/09 lxl Remine#7727
                    // --- ADD 2008.10.01 ---------->>>>>
                    #region [Select文作成]
                    string sqlText = string.Empty;
                    sqlText += "SELECT *" + Environment.NewLine;
                    sqlText += " FROM MONTHLYADDUPHISRF" + Environment.NewLine;
                    sqlText += " WHERE" + Environment.NewLine;
                    sqlText += "      ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "  AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                    sqlText += "  AND MONTHLYADDUPDATERF=" + Environment.NewLine;
                    sqlText += "  (" + Environment.NewLine;
                    sqlText += "   SELECT MAX(MONTHLYADDUPDATERF)" + Environment.NewLine;
                    sqlText += "   FROM MONTHLYADDUPHISRF" + Environment.NewLine;
                    sqlText += "   WHERE" + Environment.NewLine;
                    sqlText += "        ENTERPRISECODERF=@FINDENTERPRISECODE" + Environment.NewLine;
                    sqlText += "    AND ADDUPSECCODERF=@FINDADDUPSECCODE" + Environment.NewLine;
                    sqlText += "    AND PROCDIVCDRF=0" + Environment.NewLine;
                    sqlText += "    AND HISTCTLCDRF=0" + Environment.NewLine;
                    sqlText += "  )" + Environment.NewLine;

                    sqlCommand.CommandText = sqlText;
                    #endregion  //[Select文作成]
                    // --- ADD 2008.10.01 ----------<<<<<

                    //Prameterオブジェクトの作成
                    SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                    SqlParameter findParaAddUpSecCode = sqlCommand.Parameters.Add("@FINDADDUPSECCODE", SqlDbType.NChar);

                    //Parameterオブジェクトへ値設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.EnterpriseCode);
                    findParaAddUpSecCode.Value = SqlDataMediator.SqlSetString(monthlyAddUpHisWork.AddUpSecCode);

                    myReader = sqlCommand.ExecuteReader();
                    while (myReader.Read())
                    {
                        monthlyAddUpHisWork = CopyToMonthlyAddUpHisWorkFromReader(ref myReader);
                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                }
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (!myReader.IsClosed) myReader.Close();
                myReader.Dispose();
            }

            return status;
        }
        #endregion

        #region [ReadCustAccRec 売掛金額取得]
        /// <summary>
        /// 月次処理結果を取得する（売掛金額マスタ）
        /// </summary>
        /// <param name="paraObj">得意先売掛金額マスタパラメータ</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 月次処理結果を取得する（売掛金額マスタ）</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.05.21</br>
        /// </remarks>
        public int ReadCustAccRec(ref object paraObj, out string retMsg)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlConnection sqlConnection = null;
            //SqlEncryptInfo sqlEncryptInfo = null;
            retMsg = null;

            //●得意先売掛金額マスタ
            CustAccRecWork custAccRecWork = null;
            //●排他制御部品
            ControlExclusiveOrderAccess ctrlExclsvOdAcs = null;
            Int32[] customerCodeList = new Int32[1];

            try
            {
                custAccRecWork = paraObj as CustAccRecWork;

                if (custAccRecWork.EnterpriseCode == "" || custAccRecWork.AddUpSecCode == "" ||
                    custAccRecWork.CustomerCode == 0 || custAccRecWork.AddUpDate == DateTime.MinValue)
                {
                    retMsg = "条件が整っておりません。\r\n再度入力項目を入れなおしてください。";
                    return (int)ConstantManagement.DB_Status.ctDB_WARNING;
                }

                //コネクション生成
                sqlConnection = CreateSqlConnection();
                if (sqlConnection == null) return status;
                sqlConnection.Open();

                ctrlExclsvOdAcs = new ControlExclusiveOrderAccess();

                customerCodeList[0] = new Int32();
                customerCodeList[0] = custAccRecWork.CustomerCode;
                ArrayList custAccRecChildWorkList = new ArrayList(); // 未使用

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    //●得意先マスタ情報取得
                    status = GetCustomerInfo(ref custAccRecWork, ref sqlConnection);
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                    {
                        retMsg = "得意先が設定されておりません。";
                        return status;
                    }

                    //●前回売掛情報取得
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        // ADD 2009.01.13 売掛残高元帳で使用するため条件文追加 >>>
                        // ※LaMonCAddUpUpdDateに日付がセットされている場合は、セットされている日付期間にて集計
                        //   LaMonCAddUpUpdDate(開始日付)より大きい(未来)の日付～AddUpDate(終了日付)以下(過去)の日付
                        //status = GetMonthlyAddUpHisAndCustAccRec(ref custAccRecWork, ref sqlConnection);
                        if (custAccRecWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        {
                            status = GetMonthlyAddUpHisAndCustAccRec(ref custAccRecWork, ref sqlConnection);
                        }
                        // ADD 2009.01.13 <<<
                    }

                    //●入金マスタ取得
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        status = GetDepsitMain(ref custAccRecWork, ref sqlConnection);
                    }

                    //●売上データ取得
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        status = GetSalesSlip(ref custAccRecWork, ref custAccRecChildWorkList, ref sqlConnection);
                    }
                }
                paraObj = (object)custAccRecWork;
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.ReadCustAccRec");
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                retMsg = ex.ToString();
            }
            finally
            {
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// 月次処理結果を取得する（売掛金額マスタ）
        /// </summary>
        /// <param name="paraObj">得意先売掛金額マスタパラメータ</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="sqlConnection">コネクション情報</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 月次処理結果を取得する（売掛金額マスタ）</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.05.21</br>
        /// </remarks>
        public int ReadCustAccRec(ref object paraObj, out string retMsg, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            retMsg = null;

            //●得意先売掛金額マスタ
            CustAccRecWork custAccRecWork = null;
            //●排他制御部品
            ControlExclusiveOrderAccess ctrlExclsvOdAcs = null;
            Int32[] customerCodeList = new Int32[1];
            ArrayList custAccRecChildWorkList = new ArrayList(); // 未使用


            try
            {
                custAccRecWork = paraObj as CustAccRecWork;

                if (custAccRecWork.EnterpriseCode == "" || custAccRecWork.AddUpSecCode == "" ||
                    custAccRecWork.CustomerCode == 0 || custAccRecWork.AddUpDate == DateTime.MinValue)
                {
                    retMsg = "条件が整っておりません。\r\n再度入力項目を入れなおしてください。";
                    return (int)ConstantManagement.DB_Status.ctDB_WARNING;
                }

                ctrlExclsvOdAcs = new ControlExclusiveOrderAccess();

                customerCodeList[0] = new Int32();
                customerCodeList[0] = custAccRecWork.CustomerCode;

                //status = ctrlExclsvOdAcs.LockDB(custAccRecWork.EnterpriseCode, customerCodeList, null); // DEL 2008.11.05
                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL; // ADD 2008.11.05 

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    //●得意先マスタ情報取得
                    status = GetCustomerInfo(ref custAccRecWork, ref sqlConnection);
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                    {
                        retMsg = "得意先が設定されておりません。";
                        return status;
                    }

                    // ↓ 2007.11.07 980081 d
                    ////●全体初期値設定マスタから総額表示方法区分を取得　※全体参照の場合のみ
                    //if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    //{
                    //    if (custAccRecWork.TotalAmntDspWayRef == 0)
                    //        status = GetTotalAmount(ref custAccRecWork, ref sqlConnection);
                    //}
                    //if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                    //{
                    //    retMsg = "全体初期値設定が不正です。";
                    //    return status;
                    //}
                    // ↑ 2007.11.07 980081 d


                    //●前回売掛情報取得
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
　                      // ADD 2009.01.13 売掛残高元帳で使用するため条件文追加 >>>
                        // ※LaMonCAddUpUpdDateに日付がセットされている場合は、セットされている日付期間にて集計
                        //   LaMonCAddUpUpdDate(開始日付)より大きい(未来)の日付～AddUpDate(終了日付)以下(過去)の日付
                        //status = GetMonthlyAddUpHisAndCustAccRec(ref custAccRecWork, ref sqlConnection);
                        if (custAccRecWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        {
                            status = GetMonthlyAddUpHisAndCustAccRec(ref custAccRecWork, ref sqlConnection);
                        }
                        // ADD 2009.01.13 <<<
                    }


                    //●入金マスタ取得
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        status = GetDepsitMain(ref custAccRecWork, ref sqlConnection);
                    }


                    //●売上データ取得
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        status = GetSalesSlip(ref custAccRecWork, ref custAccRecChildWorkList, ref sqlConnection);

                    }
                }

                paraObj = (object)custAccRecWork;
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.ReadCustAccRec");
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;  //2008.09.17 ADD
                retMsg = ex.ToString();                                 //2008.09.17 ADD
            }
            finally
            {
                //if (ctrlExclsvOdAcs != null) ctrlExclsvOdAcs.UnlockDB(); // DEL 2008.11.05
            }

            return status;
        }
        #endregion

        #region [ReadSuplAccPay 買掛金額取得]
        /// <summary>
        /// 月次処理結果を取得する（買掛金額マスタ）
        /// </summary>
        /// <param name="paraObj">仕入先買掛金額マスタパラメータ</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 月次処理結果を取得する（買掛金額マスタ）</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.05.21</br>
        /// </remarks>
        public int ReadSuplAccPay(ref object paraObj, out string retMsg)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlConnection sqlConnection = null;
            //SqlEncryptInfo sqlEncryptInfo = null;
            retMsg = null;

            //●仕入先買掛金額マスタ
            SuplAccPayWork suplAccPayWork = null;
            ArrayList suplAccPayChildWorkList = new ArrayList(); // 未使用

            //●排他制御部品
            ControlExclusiveOrderAccess ctrlExclsvOdAcs = null;
            Int32[] customerCodeList = new Int32[1];

            try
            {
                suplAccPayWork = paraObj as SuplAccPayWork;

                if (suplAccPayWork.EnterpriseCode == "" || suplAccPayWork.AddUpSecCode == "" ||
                    suplAccPayWork.SupplierCd == 0 || suplAccPayWork.AddUpDate == DateTime.MinValue)
                {
                    retMsg = "条件が整っておりません。\r\n再度入力項目を入れなおしてください。";
                    return (int)ConstantManagement.DB_Status.ctDB_WARNING;
                }

                //コネクション生成
                sqlConnection = CreateSqlConnection();
                if (sqlConnection == null) return status;
                sqlConnection.Open();
                ctrlExclsvOdAcs = new ControlExclusiveOrderAccess();
                customerCodeList[0] = new Int32();
                customerCodeList[0] = suplAccPayWork.SupplierCd;
                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL; // ADD 2008.11.05

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    //●仕入先マスタ情報取得
                    status = GetSupplierInfo(ref suplAccPayWork, ref sqlConnection);
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                    {
                        retMsg = "仕入先が設定されておりません。";
                        return status;
                    }
                    // --- ADD 2008.09.17 ---------->>>>>
                    //●仕入先マスタ+税率設定マスタから下記項目を取得
                    //仕入先消費税転嫁方式コード・仕入先消費税税率・仕入先総額表示方法区分
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        status = GetSupplierTaxRate(ref suplAccPayWork, ref sqlConnection);
                    }
                    // --- ADD 2008.09.17 ----------<<<<<

                    //●前回買掛情報取得
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        // 修正 2009.01.13 買掛残高元帳にて使用するため条件の追加 >>> 
                        // ※LaMonCAddUpUpdDateに日付がセットされている場合は、セットされている日付期間にて集計
                        //   LaMonCAddUpUpdDate(開始日付)より大きい(未来)の日付 から AddUpDate(終了日付)以下(過去)の日付の期間を集計します。
                        //status = GetMonthlyAddUpHisAndSuplAccPay(ref suplAccPayWork, ref sqlConnection);
                        if (suplAccPayWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        {
                            status = GetMonthlyAddUpHisAndSuplAccPay(ref suplAccPayWork, ref sqlConnection);                            
                        }
                        // 修正 2009.01.13 <<<
                    }
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                    {
                        //初期データ挿入時はデータがないので前回月次更新年月日に最小値を挿入する
                        suplAccPayWork.LaMonCAddUpUpdDate = DateTime.MinValue;
                        suplAccPayWork.StMonCAddUpUpdDate = DateTime.MinValue;
                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }

                    //●支払伝票マスタ取得
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        status = GetPaymentSlp(ref suplAccPayWork, ref sqlConnection);
                    }

                    //●仕入データ取得
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        status = GetStockSlip(ref suplAccPayWork, ref suplAccPayChildWorkList, ref sqlConnection);

                    }
                }

                paraObj = (object)suplAccPayWork;
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.ReadSuplAccPay");
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;  //2008.09.17 ADD
                retMsg = ex.ToString();                                 //2008.09.17 ADD
            }
            finally
            {
                //●暗号化キーCLOSE
                //if (sqlEncryptInfo.IsOpen) sqlEncryptInfo.CloseSymKey(ref sqlConnection);
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
                //if (ctrlExclsvOdAcs != null) ctrlExclsvOdAcs.UnlockDB(); // DEL 2008.11.05
            }

            return status;
        }

        /// <summary>
        /// 月次処理結果を取得する（買掛金額マスタ）
        /// </summary>
        /// <param name="paraObj">仕入先買掛金額マスタパラメータ</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 月次処理結果を取得する（買掛金額マスタ）</br>
        /// <br>Programmer : 20036　斉藤　雅明</br>
        /// <br>Date       : 2007.05.21</br>
        /// </remarks>
        public int ReadSuplAccPay(ref object paraObj, out string retMsg, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            retMsg = null;

            //●仕入先買掛金額マスタ
            SuplAccPayWork suplAccPayWork = null;
            ArrayList suplAccPayChildWorkList = new ArrayList(); // 未使用

            //●排他制御部品
            ControlExclusiveOrderAccess ctrlExclsvOdAcs = null;
            Int32[] customerCodeList = new Int32[1];

            try
            {
                suplAccPayWork = paraObj as SuplAccPayWork;

                if (suplAccPayWork.EnterpriseCode == "" || suplAccPayWork.AddUpSecCode == "" ||
                    suplAccPayWork.SupplierCd == 0 || suplAccPayWork.AddUpDate == DateTime.MinValue)
                {
                    retMsg = "条件が整っておりません。\r\n再度入力項目を入れなおしてください。";
                    return (int)ConstantManagement.DB_Status.ctDB_WARNING;
                }

                ctrlExclsvOdAcs = new ControlExclusiveOrderAccess();

                customerCodeList[0] = new Int32();
                customerCodeList[0] = suplAccPayWork.SupplierCd;

                //ArrayList al = new ArrayList();//ワーク用
                //al.Add(suplAccPayWork.SupplierCd);
                //Int32[] customerCodeList = (Int32[])al.ToArray(typeof(Int32));

                //status = ctrlExclsvOdAcs.LockDB(suplAccPayWork.EnterpriseCode, customerCodeList, null); // DEL 2008.11.05
                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL; // ADD 2008.11.05

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // --- ADD 2008.09.17 ---------->>>>>
                    //●仕入先マスタ+税率設定マスタから下記項目を取得
                    //仕入先消費税転嫁方式コード・仕入先消費税税率・仕入先総額表示方法区分
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        status = GetSupplierTaxRate(ref suplAccPayWork, ref sqlConnection);
                    }
                    // --- ADD 2008.09.17 ----------<<<<<

                    //●前回買掛情報取得
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        // 修正 2009.01.13 買掛残高元帳にて使用するため条件の追加 >>> 
                        // ※LaMonCAddUpUpdDateに日付がセットされている場合は、セットされている日付期間にて集計
                        //   LaMonCAddUpUpdDate(開始日付)より大きい(未来)の日付～AddUpDate(終了日付)以下(過去)の日付
                        //status = GetMonthlyAddUpHisAndSuplAccPay(ref suplAccPayWork, ref sqlConnection);
                        if (suplAccPayWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                        {
                            status = GetMonthlyAddUpHisAndSuplAccPay(ref suplAccPayWork, ref sqlConnection);
                        }
                        // 修正 2009.01.13 <<<
                    }
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                    {
                        //初期データ挿入時はデータがないので前回月次更新年月日に最小値を挿入する
                        suplAccPayWork.LaMonCAddUpUpdDate = DateTime.MinValue;
                        suplAccPayWork.StMonCAddUpUpdDate = DateTime.MinValue;
                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }


                    //●支払伝票マスタ取得
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        status = GetPaymentSlp(ref suplAccPayWork, ref sqlConnection);
                    }

                    //●仕入データ取得
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {                        
                        status = GetStockSlip(ref suplAccPayWork, ref suplAccPayChildWorkList, ref sqlConnection);
                    }
                }

                paraObj = (object)suplAccPayWork;
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.ReadSuplAccPay");
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;  //2008.09.17 ADD
                retMsg = ex.ToString();                                 //2008.09.17 ADD
            }
            finally
            {
                //if (ctrlExclsvOdAcs != null) ctrlExclsvOdAcs.UnlockDB(); // DEL 2008.11.05
            }

            return status;
        }

        // --- ADD 2012/09/13 ----------->>>>>
        /// <summary>
        /// 月次処理結果を取得する（買掛金額マスタ）
        /// </summary>
        /// <param name="paraObj">仕入先買掛金額マスタパラメータ</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入総括形式で月次処理結果を取得する（買掛金額マスタ）</br>
        /// <br>Programmer : FSI佐々木 貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        public int ReadSuplAccPayByAddUpSecCode(ref object paraObj, out string retMsg)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SqlConnection sqlConnection = null;
            //SqlEncryptInfo sqlEncryptInfo = null;
            retMsg = null;

            //●仕入先買掛金額マスタ
            SuplAccPayWork suplAccPayWork = null;
            ArrayList suplAccPayChildWorkList = new ArrayList(); // 未使用

            //●排他制御部品
            ControlExclusiveOrderAccess ctrlExclsvOdAcs = null;
            Int32[] customerCodeList = new Int32[1];

            try
            {
                suplAccPayWork = paraObj as SuplAccPayWork;

                if (suplAccPayWork.EnterpriseCode == "" || suplAccPayWork.AddUpSecCode == "" ||
                    suplAccPayWork.SupplierCd == 0 || suplAccPayWork.AddUpDate == DateTime.MinValue)
                {
                    retMsg = "条件が整っておりません。\r\n再度入力項目を入れなおしてください。";
                    return (int)ConstantManagement.DB_Status.ctDB_WARNING;
                }

                //コネクション生成
                sqlConnection = CreateSqlConnection();
                if (sqlConnection == null) return status;
                sqlConnection.Open();
                ctrlExclsvOdAcs = new ControlExclusiveOrderAccess();
                customerCodeList[0] = new Int32();
                customerCodeList[0] = suplAccPayWork.SupplierCd;

                status = ReadSuplAccPayProcByAddUpSecCode(ref suplAccPayWork, out retMsg, ref sqlConnection, true);

                paraObj = (object)suplAccPayWork;
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.ReadSuplAccPay");
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                retMsg = ex.ToString();
            }
            finally
            {
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// 月次処理結果を取得する（買掛金額マスタ）
        /// </summary>
        /// <param name="paraObj">仕入先買掛金額マスタパラメータ</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入総括形式で月次処理結果を取得する（買掛金額マスタ）</br>
        /// <br>Programmer : FSI佐々木 貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        public int ReadSuplAccPayByAddUpSecCode(ref object paraObj, out string retMsg, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            retMsg = null;

            //●仕入先買掛金額マスタ
            SuplAccPayWork suplAccPayWork = null;

            //●排他制御部品
            ControlExclusiveOrderAccess ctrlExclsvOdAcs = null;
            Int32[] customerCodeList = new Int32[1];

            try
            {
                suplAccPayWork = paraObj as SuplAccPayWork;

                if (suplAccPayWork.EnterpriseCode == "" || suplAccPayWork.AddUpSecCode == "" ||
                    suplAccPayWork.SupplierCd == 0 || suplAccPayWork.AddUpDate == DateTime.MinValue)
                {
                    retMsg = "条件が整っておりません。\r\n再度入力項目を入れなおしてください。";
                    return (int)ConstantManagement.DB_Status.ctDB_WARNING;
                }

                ctrlExclsvOdAcs = new ControlExclusiveOrderAccess();

                customerCodeList[0] = new Int32();
                customerCodeList[0] = suplAccPayWork.SupplierCd;

                status = ReadSuplAccPayProcByAddUpSecCode(ref suplAccPayWork, out retMsg, ref sqlConnection, false);

                paraObj = (object)suplAccPayWork;
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.ReadSuplAccPay");
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                retMsg = ex.ToString();
            }
            finally
            {
            }

            return status;
        }
        
        /// <summary>
        /// 月次処理結果を取得する実体（買掛金額マスタ）
        /// </summary>
        /// <param name="suplAccPayWork">仕入先買掛金額マスタパラメータ</param>
        /// <param name="retMsg">エラーメッセージ</param>
        /// <param name="sqlConnection">sqlコネクション</param>
        /// <param name="doGetSuplInfo">仕入先マスタ情報取得の有無</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 仕入総括形式で月次処理結果を取得する（買掛金額マスタ）</br>
        /// <br>Programmer : FSI佐々木 貴英</br>
        /// <br>Date       : 2012/09/13</br>
        /// </remarks>
        private int ReadSuplAccPayProcByAddUpSecCode(ref SuplAccPayWork suplAccPayWork, out string retMsg, ref SqlConnection sqlConnection, bool doGetSuplInfo)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            ArrayList suplAccPayChildWorkList = new ArrayList(); // 未使用

            retMsg = null;

            try
            {
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL && doGetSuplInfo)
                {
                    //●仕入先マスタ情報取得
                    status = GetSupplierInfoByAddUpSecCode(ref suplAccPayWork, ref sqlConnection);

                    if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                    {
                        retMsg = "仕入先が設定されておりません。";
                        return status;
                    }
                }

                //●仕入先マスタ+税率設定マスタから下記項目を取得
                //仕入先消費税転嫁方式コード・仕入先消費税税率・仕入先総額表示方法区分
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    status = GetSupplierTaxRate(ref suplAccPayWork, ref sqlConnection);
                }

                //●前回買掛情報取得
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // ※LaMonCAddUpUpdDateに日付がセットされている場合は、セットされている日付期間にて集計
                    //   LaMonCAddUpUpdDate(開始日付)より大きい(未来)の日付～AddUpDate(終了日付)以下(過去)の日付
                    //status = GetMonthlyAddUpHisAndSuplAccPay(ref suplAccPayWork, ref sqlConnection);
                    if (suplAccPayWork.LaMonCAddUpUpdDate == DateTime.MinValue)
                    {
                        status = GetMonthlyAddUpHisAndSuplAccPayBySecCode(ref suplAccPayWork, ref sqlConnection);
                    }
                }
                if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                {
                    //初期データ挿入時はデータがないので前回月次更新年月日に最小値を挿入する
                    suplAccPayWork.LaMonCAddUpUpdDate = DateTime.MinValue;
                    suplAccPayWork.StMonCAddUpUpdDate = DateTime.MinValue;
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;　
                }

                //●支払伝票マスタ取得
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if (0 == suplAccPayWork.PayeeCode)
                    {
                        suplAccPayWork.PayeeCode = suplAccPayWork.SupplierCd;
                    }
                    status = GetPaymentSlp(ref suplAccPayWork, ref sqlConnection);
                }

                //●仕入データ取得
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    status = GetStockSlipByAddUpSecCode(ref suplAccPayWork, ref suplAccPayChildWorkList, ref sqlConnection);
                }
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "MonthlyAddUpDB.ReadSuplAccPayProcByTotalType");
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                retMsg = ex.ToString();
            }
            finally
            {
            }

            return status;
        }
        // --- ADD 2012/09/13 -----------<<<<<
        #endregion

        // ADD 2008.12.22 >>>
        #region [FracCalc 消費税端数処理]
        /// <summary>
        /// 端数処理
        /// </summary>
        /// <param name="inputNumerical">数値</param>
        /// <param name="fractionUnit">端数処理単位</param>
        /// <param name="fractionProcess">端数処理（1:切捨 2:四捨五入 3:切上）</param>
        /// <param name="resultNumerical">算出金額</param>
        private void FracCalc(double inputNumerical, double fractionUnit, Int32 fractionProcess, out Int64 resultNumerical)
        {
            // 初期値セット
            resultNumerical = (Int64)inputNumerical;

            inputNumerical = (double)((decimal)inputNumerical - ((decimal)inputNumerical % (decimal)0.000001));	// 小数点6桁以下切捨
            fractionUnit = (double)((decimal)fractionUnit - ((decimal)fractionUnit % (decimal)0.000001));		// 小数点6桁以下切捨

            // 端数単位で除算
            decimal tmpKin = (decimal)inputNumerical / (decimal)fractionUnit;

            // マイナス補正
            bool sign = false;
            if (tmpKin < 0)
            {
                sign = true;
                tmpKin = tmpKin * (-1);
            }

            // 小数部1桁取得
            decimal tmpDecimal = (tmpKin - (decimal)((long)tmpKin)) * 10;

            // tmpKin 端数指定
            bool wRoundFlg = true; // 切捨
            switch (fractionProcess)
            {
                //--------------------------------------
                // 1:切捨
                //--------------------------------------
                case 1:
                    {
                        wRoundFlg = true; // 切捨
                        break;
                    }
                //--------------------------------------
                // 2:四捨五入
                //--------------------------------------
                case 2: // 四捨五入
                    {
                        if (tmpDecimal >= 5)
                        {
                            wRoundFlg = false; // 切上
                        }
                        break;
                    }
                //--------------------------------------
                // 3:切上
                //--------------------------------------
                case 3: // 切上
                    {
                        if (tmpDecimal > 0)
                        {
                            wRoundFlg = false; // 切上
                        }
                        break;
                    }
            }

            // 端数処理
            if (wRoundFlg == false)
            {
                tmpKin = tmpKin + 1;
            }

            // 小数部切捨
            tmpKin = (decimal)(long)tmpKin;

            // マイナス補正
            if (sign == true)
            {
                tmpKin = tmpKin * (-1);
            }

            decimal a = tmpKin * (decimal)fractionUnit;

            // 算出値セット
            resultNumerical = (Int64)((decimal)tmpKin * (decimal)fractionUnit);

        }
        #endregion
        // ADD 2008.12.22 <<<
    }
    // ↓ 2007.11.07 980081 a
    #region IComparer
    /// <summary>
    /// 請求先子レコード算出時に必要なソート処理
    /// </summary>
    /// <remarks>
    /// <br>Note       : IComparable インターフェイスの実装。</br>
    /// <br>Programmer : 980081  山田 明友</br>
    /// <br>Date       : 2007.11.07</br>
    /// </remarks>
    internal class CompareCustAccRec : IComparer
    {
        /// <summary>
        /// List比較メソッド
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <remarks>
        /// <br>Note       : xとyを比較し、小さいときはマイナス、</br>
        /// <br>           : 大きいときはプラス、同じときはゼロを返します。</br>
        /// <br>Programmer : 980081  山田 明友</br>
        /// <br>Date       : 2007.11.07</br>
        /// </remarks>
        public int Compare(object x, object y)
        {
            CustAccRecWork custAccRecWorkX = (CustAccRecWork)x;
            CustAccRecWork custAccRecWorkY = (CustAccRecWork)y;

            if (custAccRecWorkX.ClaimCode != custAccRecWorkY.ClaimCode)
            {
                return (custAccRecWorkX.ClaimCode - custAccRecWorkY.ClaimCode);
            }

            return (custAccRecWorkX.CustomerCode - custAccRecWorkY.CustomerCode);
        }
    }

    /// <summary>
    /// 支払先子レコード算出時に必要なソート処理
    /// </summary>
    /// <remarks>
    /// <br>Note       : IComparable インターフェイスの実装。</br>
    /// <br>Programmer : 980081  山田 明友</br>
    /// <br>Date       : 2007.11.07</br>
    /// </remarks>
    internal class CompareSuplAccPay : IComparer
    {
        /// <summary>
        /// List比較メソッド
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <remarks>
        /// <br>Note       : xとyを比較し、小さいときはマイナス、</br>
        /// <br>           : 大きいときはプラス、同じときはゼロを返します。</br>
        /// <br>Programmer : 980081  山田 明友</br>
        /// <br>Date       : 2007.11.07</br>
        /// </remarks>
        public int Compare(object x, object y)
        {
            SuplAccPayWork suplAccPayWorkX = (SuplAccPayWork)x;
            SuplAccPayWork suplAccPayWorkY = (SuplAccPayWork)y;

            if (suplAccPayWorkX.PayeeCode != suplAccPayWorkY.PayeeCode)
            {
                return (suplAccPayWorkX.PayeeCode - suplAccPayWorkY.PayeeCode);
            }

            return (suplAccPayWorkX.SupplierCd - suplAccPayWorkY.SupplierCd);
        }
    }
    #endregion
    // ↑ 2007.11.07 980081 a    


}
