//****************************************************************************//
// システム         : PM.NS
// プログラム名称   : EDI連携設定マスタデータパラメータ
// プログラム概要   : EDI連携設定マスタデータパラメータです
//----------------------------------------------------------------------------//
//                (c)Copyright  2017 Broadleaf Co.,Ltd.
//============================================================================//
// 管理番号  11370098-00  作成担当 : 陳艶丹
// 作 成 日  2017/11/16   修正内容 : 新規作成
//----------------------------------------------------------------------------//
using System;
using System.Collections;
using Broadleaf.Library.Data;
using Broadleaf.Library.Runtime.Serialization;

namespace Broadleaf.Application.Remoting.ParamData
{
    /// public class name:   EDICooperatStWork
    /// <summary>
    ///                      EDI連携設定ワーク
    /// </summary>
    /// <remarks>
    /// <br>note             :   EDI連携設定ワークヘッダファイル</br>
    /// <br>Programmer       :   自動生成</br>
    /// <br>Date             :   2017/11/16</br>
    /// <br>Genarated Date   :   2017/11/16  (CSharp File Generated Date)</br>
    /// <br>Update Note      :   </br>
    /// </remarks>
    [Serializable]
    [Broadleaf.Library.Runtime.Serialization.CustomSerializationData]
    public class EDICooperatStWork : IFileHeader
    {
        /// <summary>作成日時</summary>
        /// <remarks>共通ファイルヘッダ（DateTime:精度は100ナノ秒）</remarks>
        private DateTime _createDateTime;

        /// <summary>更新日時</summary>
        /// <remarks>共通ファイルヘッダ（DateTime:精度は100ナノ秒）</remarks>
        private DateTime _updateDateTime;

        /// <summary>企業コード</summary>
        /// <remarks>共通ファイルヘッダ（国2桁+県2桁+業種2桁+ユーザーコード10桁）</remarks>
        private string _enterpriseCode = "";

        /// <summary>GUID</summary>
        /// <remarks>共通ファイルヘッダ</remarks>
        private Guid _fileHeaderGuid;

        /// <summary>更新従業員コード</summary>
        /// <remarks>共通ファイルヘッダ</remarks>
        private string _updEmployeeCode = "";

        /// <summary>更新アセンブリID1</summary>
        /// <remarks>共通ファイルヘッダ（UI側の更新アセンブリID+「:」+バージョン）</remarks>
        private string _updAssemblyId1 = "";

        /// <summary>更新アセンブリID2</summary>
        /// <remarks>共通ファイルヘッダ（Server側の更新アセンブリID+「:」+バージョン）</remarks>
        private string _updAssemblyId2 = "";

        /// <summary>論理削除区分</summary>
        /// <remarks>共通ファイルヘッダ(0:有効,1:論理削除,2:保留,3:完全削除)</remarks>
        private Int32 _logicalDeleteCode;

        /// <summary>拠点コード</summary>
        private string _sectionCode = "";

        /// <summary>得意先コード</summary>
        private Int32 _customerCode;

        /// <summary>商品属性</summary>
        /// <remarks>0:純正　1:その他</remarks>
        private Int32 _goodsKindCode;

        /// <summary>連携事業所コード</summary>
        private string _cooperatOfficeCode = "";

        /// <summary>連携得意先コード</summary>
        private string _cooperatCustCode = "";

        /// <summary>部品商コード</summary>
        private string _tradCompCd = "";

        /// <summary>部品商名称</summary>
        private string _tradCompName = "";

        /// <summary>商品コード</summary>
        private string _goodsCode = "";

        /// <summary>値増BL商品コード</summary>
        private Int32 _increaseBLGoodsCode;

        /// <summary>値引BL商品コード</summary>
        private Int32 _discountBLGoodsCode;


        /// public propaty name  :  CreateDateTime
        /// <summary>作成日時プロパティ</summary>
        /// <value>共通ファイルヘッダ（DateTime:精度は100ナノ秒）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   作成日時プロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public DateTime CreateDateTime
        {
            get { return _createDateTime; }
            set { _createDateTime = value; }
        }

        /// public propaty name  :  UpdateDateTime
        /// <summary>更新日時プロパティ</summary>
        /// <value>共通ファイルヘッダ（DateTime:精度は100ナノ秒）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   更新日時プロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public DateTime UpdateDateTime
        {
            get { return _updateDateTime; }
            set { _updateDateTime = value; }
        }

        /// public propaty name  :  EnterpriseCode
        /// <summary>企業コードプロパティ</summary>
        /// <value>共通ファイルヘッダ（国2桁+県2桁+業種2桁+ユーザーコード10桁）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   企業コードプロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string EnterpriseCode
        {
            get { return _enterpriseCode; }
            set { _enterpriseCode = value; }
        }

        /// public propaty name  :  FileHeaderGuid
        /// <summary>GUIDプロパティ</summary>
        /// <value>共通ファイルヘッダ</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   GUIDプロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Guid FileHeaderGuid
        {
            get { return _fileHeaderGuid; }
            set { _fileHeaderGuid = value; }
        }

        /// public propaty name  :  UpdEmployeeCode
        /// <summary>更新従業員コードプロパティ</summary>
        /// <value>共通ファイルヘッダ</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   更新従業員コードプロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string UpdEmployeeCode
        {
            get { return _updEmployeeCode; }
            set { _updEmployeeCode = value; }
        }

        /// public propaty name  :  UpdAssemblyId1
        /// <summary>更新アセンブリID1プロパティ</summary>
        /// <value>共通ファイルヘッダ（UI側の更新アセンブリID+「:」+バージョン）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   更新アセンブリID1プロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string UpdAssemblyId1
        {
            get { return _updAssemblyId1; }
            set { _updAssemblyId1 = value; }
        }

        /// public propaty name  :  UpdAssemblyId2
        /// <summary>更新アセンブリID2プロパティ</summary>
        /// <value>共通ファイルヘッダ（Server側の更新アセンブリID+「:」+バージョン）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   更新アセンブリID2プロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string UpdAssemblyId2
        {
            get { return _updAssemblyId2; }
            set { _updAssemblyId2 = value; }
        }

        /// public propaty name  :  LogicalDeleteCode
        /// <summary>論理削除区分プロパティ</summary>
        /// <value>共通ファイルヘッダ(0:有効,1:論理削除,2:保留,3:完全削除)</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   論理削除区分プロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 LogicalDeleteCode
        {
            get { return _logicalDeleteCode; }
            set { _logicalDeleteCode = value; }
        }

        /// public propaty name  :  SectionCode
        /// <summary>拠点コードプロパティ</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   拠点コードプロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string SectionCode
        {
            get { return _sectionCode; }
            set { _sectionCode = value; }
        }

        /// public propaty name  :  CustomerCode
        /// <summary>得意先コードプロパティ</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   得意先コードプロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 CustomerCode
        {
            get { return _customerCode; }
            set { _customerCode = value; }
        }

        /// public propaty name  :  GoodsKindCode
        /// <summary>商品属性プロパティ</summary>
        /// <value>0:純正　1:その他</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   商品属性プロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 GoodsKindCode
        {
            get { return _goodsKindCode; }
            set { _goodsKindCode = value; }
        }

        /// public propaty name  :  CooperatOfficeCode
        /// <summary>連携事業所コードプロパティ</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   連携事業所コードプロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string CooperatOfficeCode
        {
            get { return _cooperatOfficeCode; }
            set { _cooperatOfficeCode = value; }
        }

        /// public propaty name  :  CooperatCustCode
        /// <summary>連携得意先コードプロパティ</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   連携得意先コードプロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string CooperatCustCode
        {
            get { return _cooperatCustCode; }
            set { _cooperatCustCode = value; }
        }

        /// public propaty name  :  TradCompCd
        /// <summary>部品商コードプロパティ</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   部品商コードプロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string TradCompCd
        {
            get { return _tradCompCd; }
            set { _tradCompCd = value; }
        }

        /// public propaty name  :  TradCompName
        /// <summary>部品商名称プロパティ</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   部品商名称プロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string TradCompName
        {
            get { return _tradCompName; }
            set { _tradCompName = value; }
        }

        /// public propaty name  :  GoodsCode
        /// <summary>商品コードプロパティ</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   商品コードプロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string GoodsCode
        {
            get { return _goodsCode; }
            set { _goodsCode = value; }
        }

        /// public propaty name  :  IncreaseBLGoodsCode
        /// <summary>値増BL商品コードプロパティ</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   値増BL商品コードプロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 IncreaseBLGoodsCode
        {
            get { return _increaseBLGoodsCode; }
            set { _increaseBLGoodsCode = value; }
        }

        /// public propaty name  :  DiscountBLGoodsCode
        /// <summary>値引BL商品コードプロパティ</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   値引BL商品コードプロパティ</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 DiscountBLGoodsCode
        {
            get { return _discountBLGoodsCode; }
            set { _discountBLGoodsCode = value; }
        }

        /// <summary>
        /// EDI連携設定ワークコンストラクタ
        /// </summary>
        /// <returns>EDICooperatStWorkクラスのインスタンス</returns>
        /// <remarks>
        /// <br>Note　　　　　　 :   EDICooperatStWorkクラスの新しいインスタンスを生成します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public EDICooperatStWork()
        {
        }

        /// <summary>
        /// EDI連携設定マスタコンストラクタ
        /// </summary>
        /// <param name="createDateTime">作成日時(共通ファイルヘッダ（DateTime:精度は100ナノ秒）)</param>
        /// <param name="updateDateTime">更新日時(共通ファイルヘッダ（DateTime:精度は100ナノ秒）)</param>
        /// <param name="enterpriseCode">企業コード(共通ファイルヘッダ（国2桁+県2桁+業種2桁+ユーザーコード10桁）)</param>
        /// <param name="fileHeaderGuid">GUID(共通ファイルヘッダ)</param>
        /// <param name="updEmployeeCode">更新従業員コード(共通ファイルヘッダ)</param>
        /// <param name="updAssemblyId1">更新アセンブリID1(共通ファイルヘッダ（UI側の更新アセンブリID+「:」+バージョン）)</param>
        /// <param name="updAssemblyId2">更新アセンブリID2(共通ファイルヘッダ（Server側の更新アセンブリID+「:」+バージョン）)</param>
        /// <param name="logicalDeleteCode">論理削除区分(共通ファイルヘッダ(0:有効,1:論理削除,2:保留,3:完全削除))</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="customerCode">得意先コード</param>
        /// <param name="goodsKindCode">商品属性(0:純正　1:その他)</param>
        /// <param name="cooperatOfficeCode">連携事業所コード</param>
        /// <param name="cooperatCustCode">連携得意先コード</param>
        /// <param name="tradCompCd">部品商コード</param>
        /// <param name="tradCompName">部品商名称</param>
        /// <param name="goodsCode">商品コード</param>
        /// <param name="increaseBLGoodsCode">値増BL商品コード</param>
        /// <param name="discountBLGoodsCode">値引BL商品コード</param>
        /// <returns>EDICooperatStクラスのインスタンス</returns>
        /// <remarks>
        /// <br>Note　　　　　　 :   EDICooperatStクラスの新しいインスタンスを生成します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public EDICooperatStWork(DateTime createDateTime, DateTime updateDateTime, string enterpriseCode, Guid fileHeaderGuid, string updEmployeeCode, string updAssemblyId1, string updAssemblyId2, Int32 logicalDeleteCode, string sectionCode, Int32 customerCode, Int32 goodsKindCode, string cooperatOfficeCode, string cooperatCustCode, string tradCompCd, string tradCompName, string goodsCode, Int32 increaseBLGoodsCode, Int32 discountBLGoodsCode)
        {
            this.CreateDateTime = createDateTime;
            this.UpdateDateTime = updateDateTime;
            this._enterpriseCode = enterpriseCode;
            this._fileHeaderGuid = fileHeaderGuid;
            this._updEmployeeCode = updEmployeeCode;
            this._updAssemblyId1 = updAssemblyId1;
            this._updAssemblyId2 = updAssemblyId2;
            this._logicalDeleteCode = logicalDeleteCode;
            this._sectionCode = sectionCode;
            this._customerCode = customerCode;
            this._goodsKindCode = goodsKindCode;
            this._cooperatOfficeCode = cooperatOfficeCode;
            this._cooperatCustCode = cooperatCustCode;
            this._tradCompCd = tradCompCd;
            this._tradCompName = tradCompName;
            this._goodsCode = goodsCode;
            this._increaseBLGoodsCode = increaseBLGoodsCode;
            this._discountBLGoodsCode = discountBLGoodsCode;
        }

        /// <summary>
        /// EDI連携設定マスタ複製処理
        /// </summary>
        /// <returns>EDICooperatStクラスのインスタンス</returns>
        /// <remarks>
        /// <br>Note　　　　　　 :   自身の内容と等しいEDICooperatStクラスのインスタンスを返します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public EDICooperatStWork Clone()
        {
            return new EDICooperatStWork(this._createDateTime, this._updateDateTime, this._enterpriseCode, this._fileHeaderGuid, this._updEmployeeCode, this._updAssemblyId1, this._updAssemblyId2, this._logicalDeleteCode, this._sectionCode, this._customerCode, this._goodsKindCode, this._cooperatOfficeCode, this._cooperatCustCode, this._tradCompCd, this._tradCompName, this._goodsCode, this._increaseBLGoodsCode, this._discountBLGoodsCode);
        }

        /// <summary>
        /// EDI連携設定マスタ比較処理
        /// </summary>
        /// <param name="target">比較対象のEDICooperatStクラスのインスタンス</param>
        /// <returns>内容が一致するか否か(true:内容は一致する、false:内容は一致しない)</returns>
        /// <remarks>
        /// <br>Note　　　　　　 :   EDICooperatStクラスの内容が一致するか比較します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public bool Equals(EDICooperatStWork target)
        {
            return ((this.CreateDateTime == target.CreateDateTime)
                 && (this.UpdateDateTime == target.UpdateDateTime)
                 && (this.EnterpriseCode == target.EnterpriseCode)
                 && (this.FileHeaderGuid == target.FileHeaderGuid)
                 && (this.UpdEmployeeCode == target.UpdEmployeeCode)
                 && (this.UpdAssemblyId1 == target.UpdAssemblyId1)
                 && (this.UpdAssemblyId2 == target.UpdAssemblyId2)
                 && (this.LogicalDeleteCode == target.LogicalDeleteCode)
                 && (this.SectionCode == target.SectionCode)
                 && (this.CustomerCode == target.CustomerCode)
                 && (this.GoodsKindCode == target.GoodsKindCode)
                 && (this.CooperatOfficeCode == target.CooperatOfficeCode)
                 && (this.CooperatCustCode == target.CooperatCustCode)
                 && (this.TradCompCd == target.TradCompCd)
                 && (this.TradCompName == target.TradCompName)
                 && (this.GoodsCode == target.GoodsCode)
                 && (this.IncreaseBLGoodsCode == target.IncreaseBLGoodsCode)
                 && (this.DiscountBLGoodsCode == target.DiscountBLGoodsCode));

        }

        /// <summary>
        /// EDI連携設定マスタ比較処理
        /// </summary>
        /// <param name="eDICooperatSt1">
        ///                    比較するEDICooperatStクラスのインスタンス
        /// </param>
        /// <param name="eDICooperatSt2">比較するEDICooperatStクラスのインスタンス</param>
        /// <returns>内容が一致するか否か(true:内容は一致する、false:内容は一致しない)</returns>
        /// <remarks>
        /// <br>Note　　　　　　 :   EDICooperatStクラスの内容が一致するか比較します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public static bool Equals(EDICooperatStWork eDICooperatSt1, EDICooperatStWork eDICooperatSt2)
        {
            return ((eDICooperatSt1.CreateDateTime == eDICooperatSt2.CreateDateTime)
                 && (eDICooperatSt1.UpdateDateTime == eDICooperatSt2.UpdateDateTime)
                 && (eDICooperatSt1.EnterpriseCode == eDICooperatSt2.EnterpriseCode)
                 && (eDICooperatSt1.FileHeaderGuid == eDICooperatSt2.FileHeaderGuid)
                 && (eDICooperatSt1.UpdEmployeeCode == eDICooperatSt2.UpdEmployeeCode)
                 && (eDICooperatSt1.UpdAssemblyId1 == eDICooperatSt2.UpdAssemblyId1)
                 && (eDICooperatSt1.UpdAssemblyId2 == eDICooperatSt2.UpdAssemblyId2)
                 && (eDICooperatSt1.LogicalDeleteCode == eDICooperatSt2.LogicalDeleteCode)
                 && (eDICooperatSt1.SectionCode == eDICooperatSt2.SectionCode)
                 && (eDICooperatSt1.CustomerCode == eDICooperatSt2.CustomerCode)
                 && (eDICooperatSt1.GoodsKindCode == eDICooperatSt2.GoodsKindCode)
                 && (eDICooperatSt1.CooperatOfficeCode == eDICooperatSt2.CooperatOfficeCode)
                 && (eDICooperatSt1.CooperatCustCode == eDICooperatSt2.CooperatCustCode)
                 && (eDICooperatSt1.TradCompCd == eDICooperatSt2.TradCompCd)
                 && (eDICooperatSt1.TradCompName == eDICooperatSt2.TradCompName)
                 && (eDICooperatSt1.GoodsCode == eDICooperatSt2.GoodsCode)
                 && (eDICooperatSt1.IncreaseBLGoodsCode == eDICooperatSt2.IncreaseBLGoodsCode)
                 && (eDICooperatSt1.DiscountBLGoodsCode == eDICooperatSt2.DiscountBLGoodsCode));
        }
        /// <summary>
        /// EDI連携設定マスタ比較処理
        /// </summary>
        /// <param name="target">比較対象のEDICooperatStクラスのインスタンス</param>
        /// <returns>一致しない項目のリスト</returns>
        /// <remarks>
        /// <br>Note　　　　　　 :   EDICooperatStクラスの内容が一致するか比較しし、一致しない項目の名称を返します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public ArrayList Compare(EDICooperatStWork target)
        {
            ArrayList resList = new ArrayList();
            if(this.CreateDateTime != target.CreateDateTime)resList.Add("CreateDateTime");
            if(this.UpdateDateTime != target.UpdateDateTime)resList.Add("UpdateDateTime");
            if(this.EnterpriseCode != target.EnterpriseCode)resList.Add("EnterpriseCode");
            if(this.FileHeaderGuid != target.FileHeaderGuid)resList.Add("FileHeaderGuid");
            if(this.UpdEmployeeCode != target.UpdEmployeeCode)resList.Add("UpdEmployeeCode");
            if(this.UpdAssemblyId1 != target.UpdAssemblyId1)resList.Add("UpdAssemblyId1");
            if(this.UpdAssemblyId2 != target.UpdAssemblyId2)resList.Add("UpdAssemblyId2");
            if(this.LogicalDeleteCode != target.LogicalDeleteCode)resList.Add("LogicalDeleteCode");
            if(this.SectionCode != target.SectionCode)resList.Add("SectionCode");
            if(this.CustomerCode != target.CustomerCode)resList.Add("CustomerCode");
            if(this.GoodsKindCode != target.GoodsKindCode)resList.Add("GoodsKindCode");
            if(this.CooperatOfficeCode != target.CooperatOfficeCode)resList.Add("CooperatOfficeCode");
            if(this.CooperatCustCode != target.CooperatCustCode)resList.Add("CooperatCustCode");
            if(this.TradCompCd != target.TradCompCd)resList.Add("TradCompCd");
            if(this.TradCompName != target.TradCompName)resList.Add("TradCompName");
            if(this.GoodsCode != target.GoodsCode)resList.Add("GoodsCode");
            if(this.IncreaseBLGoodsCode != target.IncreaseBLGoodsCode)resList.Add("IncreaseBLGoodsCode");
            if(this.DiscountBLGoodsCode != target.DiscountBLGoodsCode)resList.Add("DiscountBLGoodsCode");

            return resList;
        }

        /// <summary>
        /// EDI連携設定マスタ比較処理
        /// </summary>
        /// <param name="eDICooperatSt1">比較するEDICooperatStクラスのインスタンス</param>
        /// <param name="eDICooperatSt2">比較するEDICooperatStクラスのインスタンス</param>
        /// <returns>一致しない項目のリスト</returns>
        /// <remarks>
        /// <br>Note　　　　　　 :   EDICooperatStクラスの内容が一致するか比較し、一致しない項目の名称を返します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public static ArrayList Compare(EDICooperatStWork eDICooperatSt1, EDICooperatStWork eDICooperatSt2)
        {
            ArrayList resList = new ArrayList();
            if(eDICooperatSt1.CreateDateTime != eDICooperatSt2.CreateDateTime)resList.Add("CreateDateTime");
            if(eDICooperatSt1.UpdateDateTime != eDICooperatSt2.UpdateDateTime)resList.Add("UpdateDateTime");
            if(eDICooperatSt1.EnterpriseCode != eDICooperatSt2.EnterpriseCode)resList.Add("EnterpriseCode");
            if(eDICooperatSt1.FileHeaderGuid != eDICooperatSt2.FileHeaderGuid)resList.Add("FileHeaderGuid");
            if(eDICooperatSt1.UpdEmployeeCode != eDICooperatSt2.UpdEmployeeCode)resList.Add("UpdEmployeeCode");
            if(eDICooperatSt1.UpdAssemblyId1 != eDICooperatSt2.UpdAssemblyId1)resList.Add("UpdAssemblyId1");
            if(eDICooperatSt1.UpdAssemblyId2 != eDICooperatSt2.UpdAssemblyId2)resList.Add("UpdAssemblyId2");
            if(eDICooperatSt1.LogicalDeleteCode != eDICooperatSt2.LogicalDeleteCode)resList.Add("LogicalDeleteCode");
            if(eDICooperatSt1.SectionCode != eDICooperatSt2.SectionCode)resList.Add("SectionCode");
            if(eDICooperatSt1.CustomerCode != eDICooperatSt2.CustomerCode)resList.Add("CustomerCode");
            if(eDICooperatSt1.GoodsKindCode != eDICooperatSt2.GoodsKindCode)resList.Add("GoodsKindCode");
            if(eDICooperatSt1.CooperatOfficeCode != eDICooperatSt2.CooperatOfficeCode)resList.Add("CooperatOfficeCode");
            if(eDICooperatSt1.CooperatCustCode != eDICooperatSt2.CooperatCustCode)resList.Add("CooperatCustCode");
            if(eDICooperatSt1.TradCompCd != eDICooperatSt2.TradCompCd)resList.Add("TradCompCd");
            if(eDICooperatSt1.TradCompName != eDICooperatSt2.TradCompName)resList.Add("TradCompName");
            if(eDICooperatSt1.GoodsCode != eDICooperatSt2.GoodsCode)resList.Add("GoodsCode");
            if(eDICooperatSt1.IncreaseBLGoodsCode != eDICooperatSt2.IncreaseBLGoodsCode)resList.Add("IncreaseBLGoodsCode");
            if(eDICooperatSt1.DiscountBLGoodsCode != eDICooperatSt2.DiscountBLGoodsCode)resList.Add("DiscountBLGoodsCode");

            return resList;
        }

    }

    /// <summary>
    ///  Ver5.10.1.0用のカスタムシリアライザです。
    /// </summary>
    /// <returns>EDICooperatStWorkクラスのインスタンス(object)</returns>
    /// <remarks>
    /// <br>Note　　　　　　 :   EDICooperatStWorkクラスのカスタムシリアライザを定義します</br>
    /// <br>Programer        :   自動生成</br>
    /// </remarks>
    public class EDICooperatStWork_SerializationSurrogate_For_V51010 : Broadleaf.Library.Runtime.Serialization.ICustomSerializationSurrogate
    {
        #region ICustomSerializationSurrogate メンバ

        /// <summary>
        ///  Ver5.10.1.0用のカスタムシリアライザです
        /// </summary>
        /// <remarks>
        /// <br>Note　　　　　　 :   EDICooperatStWorkクラスのカスタムシリアライザを定義します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public void Serialize(System.IO.BinaryWriter writer, object graph)
        {
            // TODO:  EDICooperatStWork_SerializationSurrogate_For_V51010.Serialize 実装を追加します。
            if (writer == null)
                throw new ArgumentNullException();

            if (graph != null && !(graph is EDICooperatStWork || graph is ArrayList || graph is EDICooperatStWork[]))
                throw new ArgumentException(string.Format("graphが{0}のインスタンスでありません", typeof(EDICooperatStWork).FullName));

            if (graph != null && graph is EDICooperatStWork)
            {
                Type t = graph.GetType();
                if (!CustomFormatterServices.NeedCustomSerialization(t))
                    throw new ArgumentException(string.Format("graphの型:{0}がカスタムシリアライズの対象でありません", t.FullName));
            }

            //SerializationTypeInfo
            Broadleaf.Library.Runtime.Serialization.TypeSerializationInfo serInfo = new Broadleaf.Library.Runtime.Serialization.TypeSerializationInfo(", Version=5.10.1.0, Culture=neutral, publicKeyToken=null", "Broadleaf.Application.Remoting.ParamData.EDICooperatStWork");

            //繰り返し数の判定を行います。この部分は適宜業務要件に応じて行ってください。
            int occurrence = 0;     //一般にゼロの場合もありえます
            if (graph is ArrayList)
            {
                serInfo.RetTypeInfo = 0;
                occurrence = ((ArrayList)graph).Count;
            }
            else if (graph is EDICooperatStWork[])
            {
                serInfo.RetTypeInfo = 2;
                occurrence = ((EDICooperatStWork[])graph).Length;
            }
            else if (graph is EDICooperatStWork)
            {
                serInfo.RetTypeInfo = 1;
                occurrence = 1;
            }

            serInfo.Occurrence = occurrence;         //繰り返し数    

            //作成日時
            serInfo.MemberInfo.Add(typeof(Int64)); //CreateDateTime
            //更新日時
            serInfo.MemberInfo.Add(typeof(Int64)); //UpdateDateTime
            //企業コード
            serInfo.MemberInfo.Add(typeof(string)); //EnterpriseCode
            //GUID
            serInfo.MemberInfo.Add(typeof(byte[]));  //FileHeaderGuid
            //更新従業員コード
            serInfo.MemberInfo.Add(typeof(string)); //UpdEmployeeCode
            //更新アセンブリID1
            serInfo.MemberInfo.Add(typeof(string)); //UpdAssemblyId1
            //更新アセンブリID2
            serInfo.MemberInfo.Add(typeof(string)); //UpdAssemblyId2
            //論理削除区分
            serInfo.MemberInfo.Add(typeof(Int32)); //LogicalDeleteCode
            //拠点コード
            serInfo.MemberInfo.Add(typeof(string)); //SectionCode
            //得意先コード
            serInfo.MemberInfo.Add(typeof(Int32)); //CustomerCode
            //商品属性
            serInfo.MemberInfo.Add(typeof(Int32)); //GoodsKindCode
            //連携事業所コード
            serInfo.MemberInfo.Add(typeof(string)); //CooperatOfficeCode
            //連携得意先コード
            serInfo.MemberInfo.Add(typeof(string)); //CooperatCustCode
            //部品商コード
            serInfo.MemberInfo.Add(typeof(string)); //TradCompCd
            //部品商名称
            serInfo.MemberInfo.Add(typeof(string)); //TradCompName
            //商品コード
            serInfo.MemberInfo.Add(typeof(string)); //GoodsCode
            //値増BL商品コード
            serInfo.MemberInfo.Add(typeof(Int32)); //IncreaseBLGoodsCode
            //値引BL商品コード
            serInfo.MemberInfo.Add(typeof(Int32)); //DiscountBLGoodsCode


            serInfo.Serialize(writer, serInfo);
            if (graph is EDICooperatStWork)
            {
                EDICooperatStWork temp = (EDICooperatStWork)graph;

                SetEDICooperatStWork(writer, temp);
            }
            else
            {
                ArrayList lst = null;
                if (graph is EDICooperatStWork[])
                {
                    lst = new ArrayList();
                    lst.AddRange((EDICooperatStWork[])graph);
                }
                else
                {
                    lst = (ArrayList)graph;
                }

                foreach (EDICooperatStWork temp in lst)
                {
                    SetEDICooperatStWork(writer, temp);
                }

            }


        }


        /// <summary>
        /// EDICooperatStWorkメンバ数(publicプロパティ数)
        /// </summary>
        private const int currentMemberCount = 18;

        /// <summary>
        ///  EDICooperatStWorkインスタンス書き込み
        /// </summary>
        /// <remarks>
        /// <br>Note　　　　　　 :   EDICooperatStWorkのインスタンスを書き込み</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        private void SetEDICooperatStWork(System.IO.BinaryWriter writer, EDICooperatStWork temp)
        {
            //作成日時
            writer.Write((Int64)temp.CreateDateTime.Ticks);
            //更新日時
            writer.Write((Int64)temp.UpdateDateTime.Ticks);
            //企業コード
            writer.Write(temp.EnterpriseCode);
            //GUID
            byte[] fileHeaderGuidArray = temp.FileHeaderGuid.ToByteArray();
            writer.Write(fileHeaderGuidArray.Length);
            writer.Write(temp.FileHeaderGuid.ToByteArray());
            //更新従業員コード
            writer.Write(temp.UpdEmployeeCode);
            //更新アセンブリID1
            writer.Write(temp.UpdAssemblyId1);
            //更新アセンブリID2
            writer.Write(temp.UpdAssemblyId2);
            //論理削除区分
            writer.Write(temp.LogicalDeleteCode);
            //拠点コード
            writer.Write(temp.SectionCode);
            //得意先コード
            writer.Write(temp.CustomerCode);
            //商品属性
            writer.Write(temp.GoodsKindCode);
            //連携事業所コード
            writer.Write(temp.CooperatOfficeCode);
            //連携得意先コード
            writer.Write(temp.CooperatCustCode);
            //部品商コード
            writer.Write(temp.TradCompCd);
            //部品商名称
            writer.Write(temp.TradCompName);
            //商品コード
            writer.Write(temp.GoodsCode);
            //値増BL商品コード
            writer.Write(temp.IncreaseBLGoodsCode);
            //値引BL商品コード
            writer.Write(temp.DiscountBLGoodsCode);

        }

        /// <summary>
        ///  EDICooperatStWorkインスタンス取得
        /// </summary>
        /// <returns>EDICooperatStWorkクラスのインスタンス</returns>
        /// <remarks>
        /// <br>Note　　　　　　 :   EDICooperatStWorkのインスタンスを取得します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        private EDICooperatStWork GetEDICooperatStWork(System.IO.BinaryReader reader, Broadleaf.Library.Runtime.Serialization.TypeSerializationInfo serInfo)
        {
            // V5.1.0.0なので不要ですが、V5.1.0.1以降では
            // serInfo.MemberInfo.Count < currentMemberCount
            // のケースについての配慮が必要になります。

            EDICooperatStWork temp = new EDICooperatStWork();

            //作成日時
            temp.CreateDateTime = new DateTime(reader.ReadInt64());
            //更新日時
            temp.UpdateDateTime = new DateTime(reader.ReadInt64());
            //企業コード
            temp.EnterpriseCode = reader.ReadString();
            //GUID
            int lenOfFileHeaderGuidArray = reader.ReadInt32();
            byte[] fileHeaderGuidArray = reader.ReadBytes(lenOfFileHeaderGuidArray);
            temp.FileHeaderGuid = new Guid(fileHeaderGuidArray);
            //更新従業員コード
            temp.UpdEmployeeCode = reader.ReadString();
            //更新アセンブリID1
            temp.UpdAssemblyId1 = reader.ReadString();
            //更新アセンブリID2
            temp.UpdAssemblyId2 = reader.ReadString();
            //論理削除区分
            temp.LogicalDeleteCode = reader.ReadInt32();
            //拠点コード
            temp.SectionCode = reader.ReadString();
            //得意先コード
            temp.CustomerCode = reader.ReadInt32();
            //商品属性
            temp.GoodsKindCode = reader.ReadInt32();
            //連携事業所コード
            temp.CooperatOfficeCode = reader.ReadString();
            //連携得意先コード
            temp.CooperatCustCode = reader.ReadString();
            //部品商コード
            temp.TradCompCd = reader.ReadString();
            //部品商名称
            temp.TradCompName = reader.ReadString();
            //商品コード
            temp.GoodsCode = reader.ReadString();
            //値増BL商品コード
            temp.IncreaseBLGoodsCode = reader.ReadInt32();
            //値引BL商品コード
            temp.DiscountBLGoodsCode = reader.ReadInt32();


            //以下は読み飛ばしです。このバージョンが想定する EmployeeWork型以降のバージョンの
            //データをデシリアライズする場合、シリアライズしたフォーマッタが記述した
            //型情報にしたがって、ストリームから情報を読み出します...といっても
            //読み出して捨てることになります。
            for (int k = currentMemberCount; k < serInfo.MemberInfo.Count; ++k)
            {
                //byte[],char[]をデシリアライズする直前に、そのlengthが
                //デシリアライズされているケースがある、byte[],char[]の
                //デシリアライズにはlengthが必要なのでint型のデータをデ
                //シリアライズした場合は、この値をこの変数に退避します。
                int optCount = 0;
                object oMemberType = serInfo.MemberInfo[k];
                if (oMemberType is Type)
                {
                    Type t = (Type)oMemberType;
                    object oData = TypeDeserializer.DeserializePrimitiveType(reader, t, optCount);
                    if (t.Equals(typeof(int)))
                    {
                        optCount = Convert.ToInt32(oData);
                    }
                    else
                    {
                        optCount = 0;
                    }
                }
                else if (oMemberType is string)
                {
                    Broadleaf.Library.Runtime.Serialization.ICustomSerializationSurrogate formatter = CustomFormatterServices.GetSurrogate((string)oMemberType);
                    object userData = formatter.Deserialize(reader);  //読み飛ばし
                }
            }
            return temp;
        }

        /// <summary>
        ///  Ver5.10.1.0用のカスタムデシリアライザです
        /// </summary>
        /// <returns>EDICooperatStWorkクラスのインスタンス(object)</returns>
        /// <remarks>
        /// <br>Note　　　　　　 :   EDICooperatStWorkクラスのカスタムデシリアライザを定義します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            object retValue = null;
            Broadleaf.Library.Runtime.Serialization.TypeSerializationInfo serInfo = TypeSerializationInfo.DeserializedObject(reader);
            ArrayList lst = new ArrayList();
            for (int cnt = 0; cnt < serInfo.Occurrence; ++cnt)
            {
                EDICooperatStWork temp = GetEDICooperatStWork(reader, serInfo);
                lst.Add(temp);
            }
            switch (serInfo.RetTypeInfo)
            {
                case 0:
                    retValue = lst;
                    break;
                case 1:
                    retValue = lst[0];
                    break;
                case 2:
                    retValue = (EDICooperatStWork[])lst.ToArray(typeof(EDICooperatStWork));
                    break;
            }
            return retValue;
        }

        #endregion
    }
}
