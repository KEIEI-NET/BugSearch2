//**********************************************************************
// System           :   PM.NS
// Sub System       :
// Program name     :   SCM関連データDBリモートオブジェクト
//                  :   PMSCM01021R.DLL
// Name Space       :   Broadleaf.Application.Remoting
// Programmer       :   22008 長内 数馬
// Date             :   2009.05.13
//----------------------------------------------------------------------
// Update Note      :
//----------------------------------------------------------------------
// 管理番号              作成担当 : gaofeng
// 作 成 日  2011/08/10  修正内容 : Redmine 仕様連絡 #24906の対応
//----------------------------------------------------------------------//
// 管理番号  11170130-00　　作成担当：譚洪
// 修正日    2015/08/28    修正内容：Redmine#47284 SCM仕掛一覧№10722対応
//                         前回受信日時を保管するファイルが破損防止対応（PMのユーザーDBにデータを登録する機能となる）
// ---------------------------------------------------------------------//
// 管理番号  11470007-00 作成担当 : 田建委
// 修 正 日  2018/04/16  修正内容 : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加
//----------------------------------------------------------------------------//
// 管理番号  11600006-00 作成担当 : 田建委
// 修 正 日  2020/08/28  修正内容 : PMKOBETSU-4076 タイムアウト設定
//----------------------------------------------------------------------------//
// 管理番号  11900025-00 作成担当 : 田村顕成
// 修 正 日  2023/04/06  修正内容 : BLP取消返品時に未回答の車両情報が消失する障害の対応
//----------------------------------------------------------------------//
//                (c)Copyright  2009 Broadleaf Co.,Ltd.
//**********************************************************************

using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Collections.Generic;  // ADD 2014/03/11 SCM仕掛一覧№10639対応
using Broadleaf.Application.Remoting.ParamData;
using Broadleaf.Library.Resources;
using Broadleaf.Library.Collections;
using Broadleaf.Library.Data;
using Broadleaf.Library.Data.SqlTypes;
using Broadleaf.Library.Data.SqlClient;
using Broadleaf.Library.Diagnostics;
using Broadleaf.Xml.Serialization;
using Broadleaf.Application.Resources;
// --- ADD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
using System.Xml;
using System.IO;
using Microsoft.Win32;
// --- ADD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
//using Broadleaf.Application.Common;  // ADD 2010/02/26 //DEL 2010/04/15

namespace Broadleaf.Application.Remoting
{
    /// <summary>
    /// SCM受注データ更新DBリモートオブジェクト
    /// </summary>
    /// <remarks>
    /// <br>Note       : SCM関連データの実データ操作を行うクラスです。</br>
    /// <br>Programmer : 22008 長内 数馬</br>
    /// <br>Date       : 2009.05.13</br>
    /// <br></br>
    /// <br>Update Note: ＳＣＭ既存不具合対応</br>
    /// <br>Programmer : 22008 長内 数馬</br>
    /// <br>Date       : 2010/02/26</br>
    /// <br></br>
    /// <br>Update Note: ＳＣＭ返品対応</br>
    /// <br>Programmer : 22008 長内 数馬</br>
    /// <br>Date       : 2010/04/15</br>
    /// <br></br>
    /// <br>Update Note: ＳＣＭ返品対応</br>
    /// <br>Programmer : 20056 對馬 大輔</br>
    /// <br>Date       : 2010/04/20</br>
    /// <br></br>
    /// <br>Update Note: 新着通知の表示データの変更（一部回答、キャンセルも表示）</br>
    /// <br>Programmer : 21024　佐々木 健</br>
    /// <br>Date       : 2010/04/24</br>
    /// <br></br>
    /// <br>Update Note: テーブルレイアウト変更対応</br>
    /// <br>Programmer : 21024　佐々木 健</br>
    /// <br>Date       : 2010/05/26</br>
    /// <br></br>
    /// <br>Update Note: 最新情報取得時の不具合修正</br>
    /// <br>Programmer : 22008　長内 数馬</br>
    /// <br>Date       : 2010/06/17</br>
    /// <br></br>
    /// <br>Update Note: 最新情報取得時、キャンセル拒否分も抽出される不具合の修正</br>
    /// <br>Programmer : 21024　佐々木 健</br>
    /// <br>Date       : 2011/01/05</br>
    /// <br></br>
    /// <br>Update Note: テーブルレイアウト変更対応</br>
    /// <br>Programmer : 21024　佐々木 健</br>
    /// <br>Date       : 2011/02/09</br>
    /// <br></br>
    /// <br>Update Note: キャンセル仕様変更対応</br>
    /// <br>Programmer : 21024　佐々木 健</br>
    /// <br>Date       : 2011/02/18</br>
    /// <br></br>
    /// <br>Update Note: ScmZeroSearchに返品拒否時の対応を追加</br>
    /// <br>Programmer : 22008　長内 数馬</br>
    /// <br>Date       : 2011/02/22</br>
    /// <br></br>
    /// <br>Update Note: 回答区分の管理方法変更に伴う新着取得の条件を修正</br>
    /// <br>Programmer : 21024　佐々木 健</br>
    /// <br>Date       : 2011/02/25</br>
    /// <br></br>
    /// <br>Update Note: CMT連携の取消対応</br>
    /// <br>Programmer : 21024　佐々木 健</br>
    /// <br>Date       : 2011/03/03</br>
    /// <br></br>
    /// <br>Update Note: テーブルレイアウト変更対応(SCM受注データ、SCM受注明細データ(問合せ・発注)、SCM受注明細データ(回答))</br>
    /// <br>Programmer : 21112　久保田 真</br>
    /// <br>Date       : 2011/05/20</br>
    /// <br>Update Note: PCCUOE自動回答の対応</br>
    /// <br>Programmer : 高峰</br>
    /// <br>Date       : 2011/08/10</br>
    /// <br>Update Note: PCCUOE_テーブルレイアウト変更対応</br>
    /// <br>Programmer : 朱宝軍</br>
    /// <br>Date       : 2011/08/23</br>
    /// <br>Update Note: テーブルレイアウト変更対応(SCM受注明細データ(回答))</br>
    /// <br>Programmer : 20073　西 毅</br>
    /// <br>Date       : 2012/01/10</br>
    /// <br></br>
    /// <br>Update Note: 障害No170 PS管理番号対応(SCM受注明細データ(回答))</br>
    /// <br>Programmer : 30745　吉岡 孝憲</br>
    /// <br>Date       : 2012/04/12</br>
    /// <br></br>
    /// <br>Update Note: 障害№124 SFとPMでCTを接続して通話状態とする。</br>
    /// <br>Programmer : 三戸　伸悟</br>
    /// <br>Date       : 2012/04/23</br>
    /// <br></br>
    /// <br>Update Note: テーブルレイアウト変更対応(自動見積部品コード追加)</br>
    /// <br>Programmer : 20073　西 毅</br>
    /// <br>Date       : 2012/05/30</br>
    /// <br></br>
    /// <br>Update Note: 障害No10277 SCM受注データ(車両情報)装備情報の設定方法の変更</br>
    /// <br>Programmer : 30744　湯上 千加子</br>
    /// <br>Date       : 2012/05/31</br>
    /// <br></br>
    /// <br>Update Note: 障害No170のデグレ対応 </br>
    /// <br>Programmer : 20056 對馬 大輔</br>
    /// <br>Date       : 2012/06/11</br>
    /// <br></br>
    /// <br>Update Note: SCM障害No10503対応</br>
    /// <br>Programmer : 30744 湯上 千加子</br>
    /// <br>Date       : 2013/03/29</br>
    /// <br></br>
    /// <br>Update Note: 2013/04/19  30747 三戸 伸悟</br>
    /// <br>           : SCM障害№10521対応</br>
    /// <br>           : 車両管理コード追加</br>
    /// <br></br>
    /// <br>Update Note: 2013/05/02  30744 湯上 千加子</br>
    /// <br>           : SCM障害№10521 デグレ対応</br>
    /// <br>           : マージ漏れ対応</br>
    /// <br></br>
    /// <br>Update Note: 2013/05/23  30744 湯上 千加子</br>
    /// <br>           : SCM障害№10538対応</br>
    /// <br></br>
    /// <br>Update Note: 2013/05/08  30745 吉岡</br>
    /// <br>           : 2013/06/18配信　SCM障害№10308,№10528</br>
    /// <br></br>
    /// <br>Update Note: 2013/05/15  30745 吉岡</br>
    /// <br>           : 2013/06/18配信　SCM障害№10410</br>
    /// <br></br>
    /// <br>Update Note: 2013/05/09  30747 三戸 伸悟</br>
    /// <br>           : SCM障害№10384対応</br>
    /// <br>           : 入庫予定日追加</br>
    /// <br></br>
    /// <br>Update Note: 2013/05/24  30747 三戸 伸悟</br>
    /// <br>           : 2013/06/18配信分 SCM障害№10536対応</br>
    /// <br>           : タブレット使用区分追加</br>
    /// <br></br>
    /// <br>Update Note: 2013/05/24  30744 湯上 千加子</br>
    /// <br>           : SCM障害№10537対応</br>
    /// <br>           : SCM受注データ・車両管理コード追加</br>
    /// <br></br>
    /// <br>Update Note:   管理番号  10900690-00 作成担当 : qijh</br>
    /// <br>           :   配信日なし分 Redmine#34752 「PMSCMのNo.10385」BLPの対応 </br>
    /// <br></br>
    /// <br>Update Note: 2013/05/09  30744 湯上 千加子</br>
    /// <br>           : SCM障害№10470対応</br>
    /// <br>           : テーブルレイアウト変更対応(SCM受注セット部品データ)</br>
    /// <br></br>
    /// <br>Update Note: 2013/06/03  30747 三戸</br>
    /// <br>           : 2013/06/18配信　SCM障害№10410対応時の不具合対応</br>
    /// <br></br>
    /// <br>Update Note: 2014/03/11  30744 湯上 千加子</br>
    /// <br>           : SCM仕掛一覧№10639対応</br>
    /// <br></br>
    /// <br>Update Note: 2014/04/09  30744 湯上 千加子</br>
    /// <br>           : SCM仕掛一覧№10641対応</br>
    /// <br></br>
    /// <br>Update Note: 2014/06/04  30744 湯上 千加子</br>
    /// <br>           : SCM仕掛一覧№10659対応</br>
    /// <br></br>
    /// <br>Update Note: 2014/12/19  30744 湯上 千加子</br>
    /// <br>           : 管理番号 11070266-00</br>
    /// <br>           : SCM高速化 PMNS対応 自動回答方式の追加</br>
    /// <br>           : SCM高速化 PMNS対応 貸出区分、メーカー希望小売価格、オープン価格区分の追加</br>
    /// <br></br>
    /// <br>Update Note: 2015/01/19  31065 豊沢 憲弘</br>
    /// <br>           : 管理番号 11070266-00</br>
    /// <br>           : リコメンド対応</br>
    /// <br>           : SCM高速化 PMNS対応 セット品にメーカー希望小売価格、オープン価格区分の追加</br>
    /// <br></br>
    /// <br>Update Note: 2015/01/30  30744 湯上 千加子</br>
    /// <br>           : 管理番号 11070266-00</br>
    /// <br>           : SCM高速化 生産年式、車台番号対応</br>
    /// <br>           : 型式別部品採用年月、型式別部品廃止年月、型式別部品採用車台番号、型式別部品廃止車台番号の追加</br>
    /// <br>Update Note: 2015/02/10  30745 吉岡</br>
    /// <br>           : 管理番号 11070266-00</br>
    /// <br>           : SCM高速化 回答納期区分対応 項目追加</br>
    /// <br>Update Note: 2015/02/20  31126 下口</br>
    /// <br>           : 管理番号 11070266-00</br>
    /// <br>           : SCM高速化 Ｃ向け種別特記対応</br>
    /// <br>           : </br>商品規格・特記事項(工場向け)、商品規格・特記事項(カーオーナー向け)、優良設定詳細名称２(工場向け)、優良設定詳細名称２(カーオーナー向け)の追加
    /// <br>Update Note: 2015/02/27  30744 湯上</br>
    /// <br>           : 管理番号 11070266-00</br>
    /// <br>           : SCM高速化 Ｃ向け種別特記対応</br>
    /// <br>           : </br>優良設定詳細コード２、優良設定詳細名称２、在庫状況区分の追加
    /// <br>Update Note: 障害No10514対応 売上明細データの更新時、伝票修正時の更新を追加</br>
    /// <br>Programmer : 30744　湯上 千加子</br>
    /// <br>Date       : 2013/04/15</br>
    /// <br>Update Note: 2015/06/05 30746 高川 悟</br>
    /// <br>           : 管理番号 11070266-00</br>
    /// <br>           : SCM社内障害No.0115対応</br>
    /// <br>           : 新着ポップアップが表示されない場合がある障害の対応</br>
    /// <br>Update Note: 2015/08/28  譚洪</br>
    /// <br>           : 管理番号 11170130-00</br>
    /// <br>           : 修正内容：Redmine#47284 SCM仕掛一覧№10722対応</br>
    /// <br>           :           前回受信日時を保管するファイルが破損防止対応（PMのユーザーDBにデータを登録する機能となる）</br>
    /// <br>Update Note: 2018/04/16  田建委</br>
    /// <br>           : 管理番号 11470007-00</br>
    /// <br>           : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
    /// <br>Update Note: 2020/08/28 田建委</br>
    /// <br>管理番号   : 11600006-00</br>
    /// <br>             PMKOBETSU-4076 タイムアウト設定</br>
    /// <br>Update Note: 2023/04/06 田村顕成</br>
    /// <br>管理番号   : 11900025-00</br>
    /// <br>             BLP取消返品時に未回答の車両情報が消失する障害の対応</br>
    /// <br></br>
    /// </remarks>
    [Serializable]
    public class IOWriteScmDB : RemoteWithAppLockDB, IIOWriteScmDB
    {
        /// <summary>
        /// SCM関連データDBリモートオブジェクトクラスコンストラクタ
        /// </summary>
        /// <remarks>
        /// <br>Note       : 特になし</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        /// </remarks>
        public IOWriteScmDB()
            : base("PMSCM01023D", "Broadleaf.Application.Remoting.ParamData.ScmIOWriterDBWork", "ScmIOWriterDB")
        {

        }

        // --- ADD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>> 
        // 伝票更新タイムアウト時間設定ファイル
        private const string XML_FILE_NAME = "DbCommandTimeoutSet.xml";
        // XMLファイルが無い時のデフォルト値
        private const int DB_COMMAND_TIMEOUT = 120;
        // --- ADD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<

        // --- ADD 田村顕成 2023/04/06 BLP取消返品時障害の対応 ------>>>>> 
        /// キャンセル状態区分
        private enum CancelCndtinDiv : short
        {
            /// <summary>0:キャンセルなし</summary>
            None = 0,
            /// <summary>10:キャンセル要求</summary>
            Cancelling = 10,
            /// <summary>20:キャンセル却下</summary>
            Rejected = 20,
            /// <summary>30:キャンセル確定</summary>
            Cancelled = 30
        }
        // --- ADD 田村顕成 2023/04/06 BLP取消返品時障害の対応 ------<<<<<

        // -- DEL 2010/04/15 使わなくなったので削除------------------>>>
        // -- ADD 2010/03/04 ＩＡＡＥ限定機能------------------------>>>
        #region [アカウントと得意先を結ぶXmlファイルの操作]

        //public void WriteCustDat(string acntId, int customerCode)
        //{
        //     CustomerXml cust = new CustomerXml();
        //     cust.AddCustomer(acntId, customerCode);
        //}

        //public int ReadCustDat(string acntId)
        //{
        //    CustomerXml cust = new CustomerXml();
        //    return cust.ReadCustomer(acntId);
        //}

        //public void DeleteCustDat(string acntId)
        //{
        //    CustomerXml cust = new CustomerXml();
        //    cust.DelCustomer(acntId);
        //}
        #endregion
        // -- ADD 2010/03/04 ＩＡＡＥ限定機能------------------------<<<
        // -- DEL 2010/04/15 使わなくなったので削除------------------<<<



        // -- ADD 2010/02/26 ---------------------------------->>>
        
        // -- DEL 2010/04/15 使わなくなったので削除------------>>>
        #region [接続情報]
        ///// <summary>
        ///// 接続情報の追加
        ///// </summary>
        ///// <param name="info">接続情報</param>
        //public void AddConnectionInfo(CMTConnectionInfo info)
        //{
        //    CMTConnectionInfo.AddConnectionInfo(info);
        //}

        ///// <summary>
        ///// 接続情報の削除
        ///// </summary>
        ///// <param name="info">接続情報</param>
        //public void DeleteConnectionInfo(CMTConnectionInfo info)
        //{
        //    CMTConnectionInfo.DeleteConnectionInfo(info);
        //}

        ///// <summary>
        ///// 接続情報の削除
        ///// </summary>
        ///// <param name="cashRegisterNo">端末番号</param>
        //public void DeleteConnectionInfo(int cashRegisterNo)
        //{
        //    CMTConnectionInfo info = new CMTConnectionInfo();
        //    info.CashRegisterNo = cashRegisterNo;
        //    CMTConnectionInfo.DeleteConnectionInfo(info);
        //}

        ///// <summary>
        ///// 接続情報のクリア（全端末の情報をクリアする）
        ///// </summary>
        //public void ClearConnectionInfo()
        //{
        //    CMTConnectionInfo.ClearConnectionInfo();
        //}
        #endregion
        // -- DEL 2010/04/15 ----------------------------------<<<

        # region [GetOrderNewCount]
        /// <summary>
        /// 新着件数取得用
        /// </summary>
        /// <param name="retAcOdrDataObj">検索結果(SCM受注データインスタンス)</param>
        /// <param name="paraSCMReadObj">抽出条件パラメータワーク</param>
        /// <returns>STATUS</returns>
        /// <br>Note       :未回答のＳＣＭ受注データを取得します</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2010.02.26</br>
        public int GetOrderNewCount(out object retAcOdrDataObj, object paraSCMReadObj)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlConnection sqlConnection = null;
            retAcOdrDataObj = null;

            try
            {
                IOWriteSCMReadWork paraSCMReadWork = paraSCMReadObj as IOWriteSCMReadWork;
                CustomSerializeArrayList retSCMAcOdrDataWorkList = null;

                // コネクション生成
                sqlConnection = this.CreateSqlConnection(true);

                status = this.GetOrderNewCountProc(out retSCMAcOdrDataWorkList, paraSCMReadWork, ref sqlConnection);

                retAcOdrDataObj = retSCMAcOdrDataWorkList;
            }
            catch (Exception ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                base.WriteErrorLog(ex, errmsg, status);
            }
            finally
            {
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// 新着件数取得用
        /// </summary>
        /// <param name="retSCMAcOdrDataWorkList">SCM受注データ情報結果</param>
        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       :未回答のＳＣＭ受注データを取得します</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2010.02.26</br>
        private int GetOrderNewCountProc(out CustomSerializeArrayList retSCMAcOdrDataWorkList, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retSCMAcOdrDataWorkList = new CustomSerializeArrayList();

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  SCM.CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCM.UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCM.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,SCM.FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,SCM.UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,SCM.UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,SCM.UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,SCM.LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,SCM.INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,SCM.CUSTOMERCODERF" + Environment.NewLine;
                sqlText += " ,SCM.UPDATEDATERF" + Environment.NewLine;
                sqlText += " ,SCM.UPDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCM.ANSWERDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCM.JUDGEMENTDATERF" + Environment.NewLine;
                sqlText += " ,SCM.INQORDNOTERF" + Environment.NewLine;
                sqlText += " ,SCM.APPENDINGFILERF" + Environment.NewLine;
                sqlText += " ,SCM.APPENDINGFILENMRF" + Environment.NewLine;
                sqlText += " ,SCM.INQEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,SCM.ANSEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,SCM.ANSEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,SCM.INQUIRYDATERF" + Environment.NewLine;
                sqlText += " ,SCM.ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SCM.SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " ,SCM.SALESTOTALTAXINCRF" + Environment.NewLine;
                sqlText += " ,SCM.SALESSUBTOTALTAXRF" + Environment.NewLine;
                sqlText += " ,SCM.INQORDDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQORDANSDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCM.RECEIVEDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCM.ANSWERCREATEDIVRF" + Environment.NewLine;
                // 2010/05/26 Add >>>
                sqlText += " ,SCM.CANCELDIVRF" + Environment.NewLine;
                sqlText += " ,SCM.CMTCOOPRTDIVRF" + Environment.NewLine;
                // 2010/05/26 Add <<<
                sqlText += " ,SCM.SFPMCPRTINSTSLIPNORF" + Environment.NewLine;  //ADD 2011/05/20
                sqlText += " ,SCM.ACCEPTORORDERKINDRF" + Environment.NewLine;   //ADD 2011/08/10
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCM.TABUSEDIVRF" + Environment.NewLine;
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                sqlText += " ,SCM.CARMNGCODERF" + Environment.NewLine;
                // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sqlText += " ,SCM.AUTOANSMTHDRF" + Environment.NewLine;
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                sqlText += "FROM" + Environment.NewLine;
                // -- UPD 2010/04/15 ---------------------------------->>>
                //sqlText += "  SCMACODRDATARF AS SCM" + Environment.NewLine;
                sqlText += "  SCMACODRDATARF AS SCM WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2010/04/15 ----------------------------------<<<
                sqlText += "    INNER JOIN   " + Environment.NewLine;
                sqlText += "    (   " + Environment.NewLine;
                sqlText += "  	  SELECT    " + Environment.NewLine;
                // -- UPD 2010/02/26 ---------------------------------->>>
                //sqlText += "  	   MAX(UPDATETIMERF) AS UPDATETIMERF   " + Environment.NewLine;
                //sqlText += "  	  ,MAX(UPDATEDATERF) AS UPDATEDATERF   " + Environment.NewLine;
                // -- UPD 2010/06/17 -------------------------------------------->>>
                //sqlText += "       MAX(cast(UPDATEDATERF as nvarchar) + cast(UPDATETIMERF as nvarchar)) AS UPDATEDATETIMERF   " + Environment.NewLine;
                sqlText += "       MAX(cast(UPDATEDATERF as nvarchar) + RIGHT('000000000' + cast(UPDATETIMERF as nvarchar),9)) AS UPDATEDATETIMERF   " + Environment.NewLine;
                // -- UPD 2010/06/17 --------------------------------------------<<<
                // -- UPD 2010/02/26 ----------------------------------<<<
                sqlText += "  	  ,ENTERPRISECODERF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALEPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALSECCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHEREPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHERSECCDRF    " + Environment.NewLine;
                sqlText += "  	  ,INQUIRYNUMBERRF  " + Environment.NewLine;
                // 2011/02/25 Add >>>
                sqlText += "  	  ,INQORDDIVCDRF" +
                                 ",CANCELDIVRF";
                // 2011/02/25 Add <<<                // 2010/04/28 Del >>>
                //sqlText += "  	  ,ACPTANODRSTATUSRF	   " + Environment.NewLine;
                //sqlText += "  	  ,SALESSLIPNUMRF  " + Environment.NewLine;
                //sqlText += "  	  ,INQORDDIVCDRF  " + Environment.NewLine;
                // 2010/04/28 Del <<<
                // -- UPD 2010/04/15 ---------------------------------------->>>
                //sqlText += "  	  FROM SCMACODRDATARF    " + Environment.NewLine;
                sqlText += "  	  FROM SCMACODRDATARF WITH (READUNCOMMITTED)  " + Environment.NewLine;
                // -- UPD 2010/04/15 ----------------------------------------<<<
                // sqlText += "  	  WHERE ANSWERDIVCDRF = 0  " + Environment.NewLine; // 未回答のデータのみ   // 2010/04/28 Del 
                // 2015/06/05 ADD TAKAGAWA SCM社内障害No0115対応 ---------->>>>>>>>>>
                sqlText += "      WHERE ACPTANODRSTATUSRF <> 20" + Environment.NewLine;
                // 2015/06/05 ADD TAKAGAWA SCM社内障害No0115対応 ----------<<<<<<<<<<
                sqlText += "  	  GROUP BY    " + Environment.NewLine;
                sqlText += "  	   ENTERPRISECODERF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALEPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALSECCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHEREPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHERSECCDRF    " + Environment.NewLine;
                sqlText += "  	  ,INQUIRYNUMBERRF  " + Environment.NewLine;
                // 2011/02/25 Add >>>
                sqlText += "  	  ,INQORDDIVCDRF" +
                                 ",CANCELDIVRF";
                // 2011/02/25 Add <<<
                // 2010/04/28 Del >>>
                //sqlText += "  	  ,ACPTANODRSTATUSRF	   " + Environment.NewLine;
                //sqlText += "  	  ,SALESSLIPNUMRF  " + Environment.NewLine;
                //sqlText += "  	  ,INQORDDIVCDRF  " + Environment.NewLine;
                // 2010/04/28 Del <<<
                sqlText += "    ) AS SCM2   " + Environment.NewLine;
                sqlText += "    ON   " + Environment.NewLine;
                sqlText += "        SCM2.ENTERPRISECODERF = SCM.ENTERPRISECODERF   " + Environment.NewLine;
                sqlText += "    AND SCM2.INQORIGINALEPCDRF = SCM.INQORIGINALEPCDRF   " + Environment.NewLine;
                sqlText += "    AND SCM2.INQORIGINALSECCDRF = SCM.INQORIGINALSECCDRF   " + Environment.NewLine;
                sqlText += "    AND SCM2.INQOTHEREPCDRF = SCM.INQOTHEREPCDRF   " + Environment.NewLine;
                sqlText += "    AND SCM2.INQOTHERSECCDRF = SCM.INQOTHERSECCDRF   " + Environment.NewLine;
                sqlText += "    AND SCM2.INQUIRYNUMBERRF = SCM.INQUIRYNUMBERRF   " + Environment.NewLine;
                // -- UPD 2010/02/26 ---------------------------------->>>
                //sqlText += "    AND SCM2.UPDATEDATERF = SCM.UPDATEDATERF   " + Environment.NewLine;
                //sqlText += "    AND SCM2.UPDATETIMERF = SCM.UPDATETIMERF   " + Environment.NewLine;
                // -- UPD 2010/06/17 ----------------------------------------->>>
                //sqlText += "    AND SCM2.UPDATEDATETIMERF = (cast(SCM.UPDATEDATERF as nvarchar) + cast(SCM.UPDATETIMERF as nvarchar))   " + Environment.NewLine;
                sqlText += "    AND SCM2.UPDATEDATETIMERF = (cast(SCM.UPDATEDATERF as nvarchar) + RIGHT('000000000' + cast(SCM.UPDATETIMERF as nvarchar),9))   " + Environment.NewLine;
                // -- UPD 2010/06/17 -----------------------------------------<<<
                // -- UPD 2010/02/26 ----------------------------------<<<
                // 2010/04/28 Del >>>
                //sqlText += "    AND SCM2.ACPTANODRSTATUSRF = SCM.ACPTANODRSTATUSRF " + Environment.NewLine;
                //sqlText += "    AND SCM2.SALESSLIPNUMRF = SCM.SALESSLIPNUMRF  " + Environment.NewLine;
                // 2010/04/28 Del <<<
                sqlText += "WHERE" + Environment.NewLine;
                sqlText += "  SCM.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;

                //企業コード
                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.EnterpriseCode);

                //問い合わせ先拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOtherSecCd) == false)
                {
                    sqlText += "  AND SCM.INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;

                    SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);
                    findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOtherSecCd);
                }

                // -- UPD 2010/04/15 ------------------------------------->>>
                //指定日付以降の更新年月日のデータを取得
                if (paraSCMReadWork.UpdateDateOver != DateTime.MinValue)
                {
                    sqlText += "  AND SCM.UPDATEDATERF >= @FINDUPDATEDATE" + Environment.NewLine;

                    SqlParameter findUpdateDate = sqlCommand.Parameters.Add("@FINDUPDATEDATE", SqlDbType.Int);
                    findUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(paraSCMReadWork.UpdateDateOver);
                }
                // -- UPD 2010/04/15 -------------------------------------<<<

                // 2011/02/25 >>>
                // 2010/04/28 >>>
                ////未回答のレコードのみ件数としてカウントする為の条件を記載
                //sqlText += "  AND NOT EXISTS(" + Environment.NewLine;
                //sqlText += "              SELECT" + Environment.NewLine;
                //sqlText += "                ANSWERDIVCDRF" + Environment.NewLine;
                //sqlText += "              FROM " + Environment.NewLine;
                //// -- UPD 2010/04/15 ------------------------------------->>>
                ////sqlText += "                SCMACODRDATARF AS SCM3" + Environment.NewLine;
                //sqlText += "                SCMACODRDATARF AS SCM3 WITH (READUNCOMMITTED)" + Environment.NewLine;
                //// -- UPD 2010/04/15 -------------------------------------<<<
                //sqlText += "              WHERE " + Environment.NewLine;
                //sqlText += "                    SCM3.ENTERPRISECODERF = SCM.ENTERPRISECODERF" + Environment.NewLine;
                //sqlText += "                AND SCM3.INQORIGINALEPCDRF = SCM.INQORIGINALEPCDRF" + Environment.NewLine;
                //sqlText += "                AND SCM3.INQORIGINALSECCDRF = SCM.INQORIGINALSECCDRF" + Environment.NewLine;
                //sqlText += "                AND SCM3.INQOTHEREPCDRF = SCM.INQOTHEREPCDRF" + Environment.NewLine;
                //sqlText += "                AND SCM3.INQOTHERSECCDRF = SCM.INQOTHERSECCDRF" + Environment.NewLine;
                //sqlText += "                AND SCM3.INQUIRYNUMBERRF = SCM.INQUIRYNUMBERRF" + Environment.NewLine;
                //sqlText += "                AND SCM3.ANSWERDIVCDRF != 0" + Environment.NewLine;
                //sqlText += "                AND SCM3.INQORDDIVCDRF = SCM.INQORDDIVCDRF" + Environment.NewLine;
                //sqlText += "                )" + Environment.NewLine;

                // 2011/01/05 >>>
                //// 未回答、キャンセルデータは受注ステータス=０のデータのみ、１部回答
                //sqlText += "  AND (SCM.ANSWERDIVCDRF = 10 OR (SCM.ANSWERDIVCDRF IN (0,99) AND SCM.ACPTANODRSTATUSRF = 0))" + Environment.NewLine;

                // 2011/02/18 >>>
                //// 未回答データは受注ステータス=０のデータのみ、１部回答、キャンセルデータはＳＦで作成したデータのみ
                //sqlText += "  AND ((SCM.ANSWERDIVCDRF = 10) OR (SCM.ANSWERDIVCDRF = 0 AND SCM.ACPTANODRSTATUSRF = 0) OR (SCM.ANSWERDIVCDRF = 99 AND SCM.INQORDANSDIVCDRF = 1))" + Environment.NewLine;

                // 2011/02/25 未回答分も回答分も抽出する >>>
                //sqlText += "  AND ((SCM.CANCELDIVRF = 0 AND SCM.ANSWERDIVCDRF = 10 AND SCM.ANSWERCREATEDIVRF = 0) OR " +
                //                  "(SCM.CANCELDIVRF = 0 AND SCM.ANSWERDIVCDRF = 0 AND SCM.ACPTANODRSTATUSRF = 0) OR"+
                //                  "(SCM.CANCELDIVRF = 1 AND SCM.INQORDANSDIVCDRF = 1))" + Environment.NewLine;
                // 2011/02/25 <<<
                // 2011/02/18 <<<
                // 2011/01/05 <<<
                // 2010/04/28 <<<


                sqlCommand.CommandText = sqlText;
                # endregion

#if DEBUG
                Console.Clear();
                Console.WriteLine(NSDebug.GetSqlCommand(sqlCommand));
#endif

                myReader = sqlCommand.ExecuteReader();

                while (myReader.Read())
                {
                    SCMAcOdrDataWork retWork = CopyToSCMAcOdrDataWorkFromReader(ref myReader);
                    retSCMAcOdrDataWorkList.Add(retWork);
                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if (retSCMAcOdrDataWorkList != null && retSCMAcOdrDataWorkList.Count != 0)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }

        #endregion

        // -- ADD 2010/02/26 ----------------------------------<<<

        // -- ADD 2010/04/15 ---------------------------------->>>
        # region [GetSCMAcOdrData]
        /// <summary>
        /// ＳＣＭ受注データを取得します。(CTIで使用)
        /// </summary>
        /// <param name="retScmCsList">検索結果(SCM受注データインスタンス)</param>
        /// <param name="paraAcOdrDataObj">抽出条件パラメータワーク</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : ＳＣＭ受注データ情報を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2010/04/15</br>
        // 2011/03/03 >>>
        //public int GetSCMAcOdrData(out object retAcOdrDataObj, object paraAcOdrDataObj)
        public int GetSCMAcOdrData(ref CustomSerializeArrayList retScmCsList, object paraAcOdrDataObj)
        // 2011/03/03 <<<
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlConnection sqlConnection = null;
            // 2011/03/03 >>>
            //retAcOdrDataObj = null;
            if (retScmCsList == null) retScmCsList = new CustomSerializeArrayList();
            // 2011/03/03 <<<
            try
            {
                SCMAcOdrDataWork retAcOdrDataWork = null;
                SCMAcOdrDataWork paraAcOdrDataWork = paraAcOdrDataObj as SCMAcOdrDataWork;
                ArrayList retSCMAcOdrDtlIqWorkList = null;      //ＳＣＭ受注明細データ（問合せ・発注）結果リスト   // 2011/03/03 Add

                // コネクション生成
                sqlConnection = this.CreateSqlConnection(true);

                status = this.ReadSCMAcOdrDataProc(out retAcOdrDataWork, paraAcOdrDataWork, ref sqlConnection);

                // 2011/03/03 >>>
                //retAcOdrDataObj = retAcOdrDataWork;
                if (retAcOdrDataWork != null)
                {
                    retScmCsList.Add(retAcOdrDataWork);
                }

                status = this.ReadSCMAcOdrDtlIqProc(out retSCMAcOdrDtlIqWorkList, paraAcOdrDataWork, ref sqlConnection);

                if (retSCMAcOdrDtlIqWorkList != null)
                {
                    retScmCsList.Add(retSCMAcOdrDtlIqWorkList);
                }
                // 2011/03/03 <<<
            }
            catch (Exception ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                base.WriteErrorLog(ex, errmsg, status);
            }
            finally
            {
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// SCM受注データ情報を取得します。
        /// </summary>
        /// <param name="retSCMAcOdrDataWork">SCM受注データ情報結果</param>
        /// <param name="paraAcOdrDataWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM受注データのキー値が一致する、SCM受注データ情報を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2010/04/15</br>
        private int ReadSCMAcOdrDataProc(out SCMAcOdrDataWork retSCMAcOdrDataWork, SCMAcOdrDataWork paraAcOdrDataWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retSCMAcOdrDataWork = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,CUSTOMERCODERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                sqlText += " ,ANSWERDIVCDRF" + Environment.NewLine;
                sqlText += " ,JUDGEMENTDATERF" + Environment.NewLine;
                sqlText += " ,INQORDNOTERF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILERF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILENMRF" + Environment.NewLine;
                sqlText += " ,INQEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,INQEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,ANSEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,ANSEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,INQUIRYDATERF" + Environment.NewLine;
                sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;
                sqlText += " ,SALESSUBTOTALTAXRF" + Environment.NewLine;
                sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                sqlText += " ,INQORDANSDIVCDRF" + Environment.NewLine;
                sqlText += " ,RECEIVEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ANSWERCREATEDIVRF" + Environment.NewLine;
                // 2010/05/26 Add >>>
                sqlText += " ,CANCELDIVRF" + Environment.NewLine;
                sqlText += " ,CMTCOOPRTDIVRF" + Environment.NewLine;
                // 2010/05/26 Add <<<
                sqlText += " ,SFPMCPRTINSTSLIPNORF" + Environment.NewLine;　　//ADD 2011/05/20
                // --- ADD 三戸 2012/04/23 №124 ---------->>>>>
                sqlText += " ,ACCEPTORORDERKINDRF" + Environment.NewLine;
                // --- ADD 三戸 2012/04/23 №124 ----------<<<<<
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,TABUSEDIVRF" + Environment.NewLine;
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                sqlText += " ,CARMNGCODERF" + Environment.NewLine;
                // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sqlText += " ,AUTOANSMTHDRF" + Environment.NewLine;
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                sqlText += "FROM" + Environment.NewLine;
                sqlText += "  SCMACODRDATARF WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += "WHERE " + Environment.NewLine;
                sqlText += "      ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                sqlText += "  AND INQOTHEREPCDRF = @FINDINQOTHEREPCD" + Environment.NewLine;
                sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;
                sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;
                sqlText += "  AND UPDATEDATERF = @FINDUPDATEDATE" + Environment.NewLine;
                sqlText += "  AND UPDATETIMERF = @FINDUPDATETIME " + Environment.NewLine;

                //Prameterオブジェクトの作成
                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                SqlParameter findInqOtherEpCd = sqlCommand.Parameters.Add("@FINDINQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                SqlParameter findUpdateDate = sqlCommand.Parameters.Add("@FINDUPDATEDATE", SqlDbType.Int);  // 更新年月日
                SqlParameter findUpdateTime = sqlCommand.Parameters.Add("@FINDUPDATETIME", SqlDbType.Int);  // 更新時間

                //Parameterオブジェクトへ値設定
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraAcOdrDataWork.EnterpriseCode);  // 企業コード
                findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(paraAcOdrDataWork.InqOriginalEpCd);  // 問合せ元企業コード
                findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(paraAcOdrDataWork.InqOriginalSecCd);  // 問合せ元拠点コード
                findInqOtherEpCd.Value = SqlDataMediator.SqlSetString(paraAcOdrDataWork.InqOtherEpCd);  // 問合せ先企業コード
                findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(paraAcOdrDataWork.InqOtherSecCd);  // 問合せ先拠点コード
                findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(paraAcOdrDataWork.InquiryNumber);  // 問合せ番号
                findUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(paraAcOdrDataWork.UpdateDate);  // 更新年月日
                findUpdateTime.Value = SqlDataMediator.SqlSetInt32(paraAcOdrDataWork.UpdateTime);  // 更新時間

                sqlCommand.CommandText = sqlText;
                # endregion

#if DEBUG
                Console.Clear();
                Console.WriteLine(NSDebug.GetSqlCommand(sqlCommand));
#endif

                myReader = sqlCommand.ExecuteReader();

                if (myReader.Read())
                {
                    retSCMAcOdrDataWork = CopyToSCMAcOdrDataWorkFromReader(ref myReader);
                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if (retSCMAcOdrDataWork != null)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }

        // 2011/03/03 Add >>>
        /// <summary>
        /// SCM受注データ情報を取得します。
        /// </summary>
        /// <param name="retSCMAcOdrDtlIqWorkList">SCM受注明細データ（問合せ・発注）情報結果リスト</param>
        /// <param name="paraAcOdrDataWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM受注データに関連するSCM受注明細データ（問合せ・発注）取得します。</br>
        /// <br>Programmer : 21024 佐々木 健</br>
        /// <br>Date       : 2011/03/03</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        private int ReadSCMAcOdrDtlIqProc(out ArrayList retSCMAcOdrDtlIqWorkList, SCMAcOdrDataWork paraAcOdrDataWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retSCMAcOdrDtlIqWorkList = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                # region --- DEL 2011/05/20 ---
                /*
                sqlText = "SELECT CREATEDATETIMERF, UPDATEDATETIMERF, ENTERPRISECODERF, FILEHEADERGUIDRF, UPDEMPLOYEECODERF, UPDASSEMBLYID1RF, UPDASSEMBLYID2RF, LOGICALDELETECODERF, INQORIGINALEPCDRF, INQORIGINALSECCDRF, INQOTHEREPCDRF, INQOTHERSECCDRF, INQUIRYNUMBERRF, UPDATEDATERF, UPDATETIMERF, INQROWNUMBERRF, INQROWNUMDERIVEDNORF, INQORGDTLDISCGUIDRF, INQOTHDTLDISCGUIDRF, GOODSDIVCDRF, RECYCLEPRTKINDCODERF, RECYCLEPRTKINDNAMERF, DELIVEREDGOODSDIVRF, HANDLEDIVCODERF, GOODSSHAPERF, DELIVRDGDSCONFCDRF, DELIGDSCMPLTDUEDATERF, ANSWERDELIVERYDATERF, BLGOODSCODERF, BLGOODSDRCODERF, INQGOODSNAMERF, ANSGOODSNAMERF, SALESORDERCOUNTRF, DELIVEREDGOODSCOUNTRF, GOODSNORF, GOODSMAKERCDRF, GOODSMAKERNMRF, PUREGOODSMAKERCDRF, INQPUREGOODSNORF, ANSPUREGOODSNORF, LISTPRICERF, UNITPRICERF, GOODSADDINFORF, ROUGHRROFITRF, ROUGHRATERF, ANSWERLIMITDATERF, COMMENTDTLRF, APPENDINGFILEDTLRF, APPENDINGFILENMDTLRF, SHELFNORF, ADDITIONALDIVCDRF, CORRECTDIVCDRF, INQORDDIVCDRF, DISPLAYORDERRF, CANCELCNDTINDIVRF, ACPTANODRSTATUSRF, SALESSLIPNUMRF, SALESROWNORF, DTLTAKEINDIVCDRF "
                    + "FROM "
                        + "  SCMACODRDTLIQRF WITH (READUNCOMMITTED)"
                        + "WHERE "
                        + "  ENTERPRISECODERF = @FINDENTERPRISECODE"
                        + "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD"
                        + "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD"
                        + "  AND INQOTHEREPCDRF = @FINDINQOTHEREPCD"
                        + "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD"
                        + "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER"
                        + "  AND UPDATEDATERF = @FINDUPDATEDATE"
                        + "  AND UPDATETIMERF = @FINDUPDATETIME";
                */
                # endregion

                //--- ADD 2011/05/20 --->>>
                sqlText = string.Empty;
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                sqlText += " ,INQROWNUMBERRF" + Environment.NewLine;
                sqlText += " ,INQROWNUMDERIVEDNORF" + Environment.NewLine;
                sqlText += " ,INQORGDTLDISCGUIDRF" + Environment.NewLine;
                sqlText += " ,INQOTHDTLDISCGUIDRF" + Environment.NewLine;
                sqlText += " ,GOODSDIVCDRF" + Environment.NewLine;
                sqlText += " ,RECYCLEPRTKINDCODERF" + Environment.NewLine;
                sqlText += " ,RECYCLEPRTKINDNAMERF" + Environment.NewLine;
                sqlText += " ,DELIVEREDGOODSDIVRF" + Environment.NewLine;
                sqlText += " ,HANDLEDIVCODERF" + Environment.NewLine;
                sqlText += " ,GOODSSHAPERF" + Environment.NewLine;
                sqlText += " ,DELIVRDGDSCONFCDRF" + Environment.NewLine;
                sqlText += " ,DELIGDSCMPLTDUEDATERF" + Environment.NewLine;
                sqlText += " ,ANSWERDELIVERYDATERF" + Environment.NewLine;
                sqlText += " ,BLGOODSCODERF" + Environment.NewLine;
                sqlText += " ,BLGOODSDRCODERF" + Environment.NewLine;
                sqlText += " ,INQGOODSNAMERF" + Environment.NewLine;
                sqlText += " ,ANSGOODSNAMERF" + Environment.NewLine;
                sqlText += " ,SALESORDERCOUNTRF" + Environment.NewLine;
                sqlText += " ,DELIVEREDGOODSCOUNTRF" + Environment.NewLine;
                sqlText += " ,GOODSNORF" + Environment.NewLine;
                sqlText += " ,GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += " ,GOODSMAKERNMRF" + Environment.NewLine;
                sqlText += " ,PUREGOODSMAKERCDRF" + Environment.NewLine;
                sqlText += " ,INQPUREGOODSNORF" + Environment.NewLine;
                sqlText += " ,ANSPUREGOODSNORF" + Environment.NewLine;
                sqlText += " ,LISTPRICERF" + Environment.NewLine;
                sqlText += " ,UNITPRICERF" + Environment.NewLine;
                sqlText += " ,GOODSADDINFORF" + Environment.NewLine;
                sqlText += " ,ROUGHRROFITRF" + Environment.NewLine;
                sqlText += " ,ROUGHRATERF" + Environment.NewLine;
                sqlText += " ,ANSWERLIMITDATERF" + Environment.NewLine;
                sqlText += " ,COMMENTDTLRF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILEDTLRF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILENMDTLRF" + Environment.NewLine;
                sqlText += " ,SHELFNORF" + Environment.NewLine;
                sqlText += " ,ADDITIONALDIVCDRF" + Environment.NewLine;
                sqlText += " ,CORRECTDIVCDRF" + Environment.NewLine;
                sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                sqlText += " ,DISPLAYORDERRF" + Environment.NewLine;
                sqlText += " ,CANCELCNDTINDIVRF" + Environment.NewLine;
                sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " ,SALESROWNORF" + Environment.NewLine;
                sqlText += " ,DTLTAKEINDIVCDRF" + Environment.NewLine;
                sqlText += " ,WAREHOUSECODERF" + Environment.NewLine;
                sqlText += " ,WAREHOUSENAMERF" + Environment.NewLine;
                sqlText += " ,WAREHOUSESHELFNORF" + Environment.NewLine;
                 // -- ADD 2011/08/10   ------ >>>>>>
                sqlText += " ,PMPRSNTCOUNTRF" + Environment.NewLine;
                sqlText += " ,SETPARTSMKRCDRF" + Environment.NewLine;
                sqlText += " ,SETPARTSNUMBERRF" + Environment.NewLine;
                sqlText += " ,SETPARTSMAINSUBNORF" + Environment.NewLine;
                // -- ADD 2011/08/10   ------ <<<<<<
                // -- ADD 2011/10/10   ------ >>>>>>
                sqlText += " ,CAMPAIGNCODERF" + Environment.NewLine;
                // -- ADD 2011/10/10   ------ <<<<<<
                // -- ADD 2012/01/10   ------ >>>>>>
                sqlText += " ,GOODSSPECIALNOTERF" + Environment.NewLine;  //商品規格・特記事項
                // -- ADD 2012/01/10   ------ <<<<<<
                // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                sqlText += " ,AUTOESTIMATEPARTSCDRF" + Environment.NewLine;  //自動見積部品コード
                // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;  //　売上伝票合計（税込）
                sqlText += " ,SALESTOTALTAXEXCRF" + Environment.NewLine;  // 売上伝票合計（税抜）
                sqlText += " ,SCMCONSTAXLAYMETHODRF" + Environment.NewLine;  // SCM消費税転嫁方式
                sqlText += " ,CONSTAXRATERF" + Environment.NewLine;  // 消費税税率
                sqlText += " ,SCMFRACTIONPROCCDRF" + Environment.NewLine;  // SCM端数処理区分
                sqlText += " ,ACCRECCONSTAXRF" + Environment.NewLine;  // 売掛消費税
                sqlText += " ,PMSALESDATERF" + Environment.NewLine;  // PM売上日
                sqlText += " ,SUPPSLPPRTTIMERF" + Environment.NewLine;  // 仕入先伝票発行時刻
                sqlText += " ,SALESMONEYTAXINCRF" + Environment.NewLine;  // 売上金額（税込み）
                sqlText += " ,SALESMONEYTAXEXCRF" + Environment.NewLine;  // 売上金額（税抜き）
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,DATAINPUTSYSTEMRF" + Environment.NewLine;  // データ入力システム
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                sqlText += " ,PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;
                sqlText += " ,PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;
                sqlText += " ,PMMAINMNGSHELFNORF" + Environment.NewLine;
                sqlText += " ,PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;
                // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                sqlText += " ,PRMSETDTLNO2RF" + Environment.NewLine;
                sqlText += " ,PRMSETDTLNAME2RF" + Environment.NewLine;
                sqlText += " ,STOCKSTATUSDIVRF" + Environment.NewLine;
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sqlText += " ,RENTDIVRF" + Environment.NewLine;
                sqlText += " ,MKRSUGGESTRTPRICRF" + Environment.NewLine;
                sqlText += " ,OPENPRICEDIVRF" + Environment.NewLine;
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                sqlText += " ,BGNGOODSDIVRF" + Environment.NewLine;
                // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                sqlText += " ,MODELPRTSADPTYMRF" + Environment.NewLine;
                sqlText += " ,MODELPRTSABLSYMRF" + Environment.NewLine;
                sqlText += " ,MODELPRTSADPTFRAMENORF" + Environment.NewLine;
                sqlText += " ,MODELPRTSABLSFRAMENORF" + Environment.NewLine;
                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,ANSDELIDATEDIVRF" + Environment.NewLine;
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,GOODSSPECIALNTFORFACRF" + Environment.NewLine;
                sqlText += " ,GOODSSPECIALNTFORCOWRF" + Environment.NewLine;
                sqlText += " ,PRMSETDTLNAME2FORFACRF" + Environment.NewLine;
                sqlText += " ,PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,INQBLUTYPTTHCDRF" + Environment.NewLine;
                sqlText += " ,INQBLUTYPTSBCDRF" + Environment.NewLine;
                sqlText += " ,ANSBLUTYPTTHCDRF" + Environment.NewLine;
                sqlText += " ,ANSBLUTYPTSBCDRF" + Environment.NewLine;
                sqlText += " ,ANSBLGOODSCODERF" + Environment.NewLine;
                sqlText += " ,ANSBLGOODSDRCODERF" + Environment.NewLine;
                // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                sqlText += "FROM" + Environment.NewLine;
                sqlText += "  SCMACODRDTLIQRF WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += "WHERE" + Environment.NewLine;
                sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                sqlText += "  AND INQOTHEREPCDRF = @FINDINQOTHEREPCD" + Environment.NewLine;
                sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;
                sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;
                sqlText += "  AND UPDATEDATERF = @FINDUPDATEDATE" + Environment.NewLine;
                sqlText += "  AND UPDATETIMERF = @FINDUPDATETIME " + Environment.NewLine;
                //--- ADD 2011/05/20 ---<<<

                //Prameterオブジェクトの作成
                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                SqlParameter findInqOtherEpCd = sqlCommand.Parameters.Add("@FINDINQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                SqlParameter findUpdateDate = sqlCommand.Parameters.Add("@FINDUPDATEDATE", SqlDbType.Int);  // 更新年月日
                SqlParameter findUpdateTime = sqlCommand.Parameters.Add("@FINDUPDATETIME", SqlDbType.Int);  // 更新時間

                //Parameterオブジェクトへ値設定
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraAcOdrDataWork.EnterpriseCode);  // 企業コード
                findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(paraAcOdrDataWork.InqOriginalEpCd);  // 問合せ元企業コード
                findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(paraAcOdrDataWork.InqOriginalSecCd);  // 問合せ元拠点コード
                findInqOtherEpCd.Value = SqlDataMediator.SqlSetString(paraAcOdrDataWork.InqOtherEpCd);  // 問合せ先企業コード
                findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(paraAcOdrDataWork.InqOtherSecCd);  // 問合せ先拠点コード
                findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(paraAcOdrDataWork.InquiryNumber);  // 問合せ番号
                findUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(paraAcOdrDataWork.UpdateDate);  // 更新年月日
                findUpdateTime.Value = SqlDataMediator.SqlSetInt32(paraAcOdrDataWork.UpdateTime);  // 更新時間

                sqlCommand.CommandText = sqlText;
                # endregion

#if DEBUG
                Console.Clear();
                Console.WriteLine(NSDebug.GetSqlCommand(sqlCommand));
#endif

                myReader = sqlCommand.ExecuteReader();

                while (myReader.Read())
                {
                    SCMAcOdrDtlIqWork iqWork = CopyToSCMAcOdrDtlIqWorkFromReader(ref myReader);

                    if (retSCMAcOdrDtlIqWorkList == null)
                    {
                        retSCMAcOdrDtlIqWorkList = new ArrayList();
                    }
                    retSCMAcOdrDtlIqWorkList.Add(iqWork);
                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if (retSCMAcOdrDtlIqWorkList != null && retSCMAcOdrDtlIqWorkList.Count != 0)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }
        // 2011/03/03 Add <<<

        #endregion
        // -- ADD 2010/04/15 ----------------------------------<<<

        //>>>2010/04/20
        #region ScmCancelSearch
        /// <summary>
        /// SCM受注データのリストを取得します。
        /// </summary>
        /// <param name="retAcOdrDataObj">検索結果</param>
        /// <param name="paraAcOdrDataObj">抽出条件パラメータワーク</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM関連データのキー値が一致する、全てのSCM関連データ情報を取得します。</br>
        /// <br>Programmer : 20056 對馬 大輔</br>
        /// <br>Date       : 2010.04.20</br>
        public int ScmAcOdrDataSearch(out object retAcOdrDataObj, object paraAcOdrDataObj)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlConnection sqlConnection = null;
            retAcOdrDataObj = null;
            try
            {
                CustomSerializeArrayList retAcOdrDataList = null;
                SCMAcOdrDataWork paraAcOdrDataWork = paraAcOdrDataObj as SCMAcOdrDataWork;

                // コネクション生成
                sqlConnection = this.CreateSqlConnection(true);

                status = this.ScmAcOdrDataSearch(out retAcOdrDataList, paraAcOdrDataWork, ref sqlConnection);

                retAcOdrDataObj = retAcOdrDataList;
            }
            catch (Exception ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                base.WriteErrorLog(ex, errmsg, status);
            }
            finally
            {
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// SCM受注データのリストを取得します。
        /// </summary>
        /// <param name="retList">SCM関連データ情報を格納する CustomSerializeArrayList</param>
        /// <param name="paraAcOdrDataWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM関連データのキー値が一致する、全てのSCM関連データ情報を取得します。</br>
        /// <br>Programmer : 20056 對馬 大輔</br>
        /// <br>Date       : 2010.04.20</br>
        public int ScmAcOdrDataSearch(out CustomSerializeArrayList retList, SCMAcOdrDataWork paraAcOdrDataWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            //ＳＣＭ受注データ抽出処理
            status = ScmAcOdrDataSearchProc(out retList, paraAcOdrDataWork, ref sqlConnection);

            return status;
        }

        /// <summary>
        /// SCM受注データのリストを取得します。
        /// </summary>
        /// <param name="retSCMAcOdrDataWorkList">SCM受注データ情報結果</param>
        /// <param name="paraAcOdrDataWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM関連データのキー値が一致する、全てのSCM関連データ情報を取得します。</br>
        /// <br>Programmer : 20056 對馬 大輔</br>
        /// <br>Date       : 2010.04.20</br>
        private int ScmAcOdrDataSearchProc(out CustomSerializeArrayList retSCMAcOdrDataWorkList, SCMAcOdrDataWork paraAcOdrDataWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retSCMAcOdrDataWorkList = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,CUSTOMERCODERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                sqlText += " ,ANSWERDIVCDRF" + Environment.NewLine;
                sqlText += " ,JUDGEMENTDATERF" + Environment.NewLine;
                sqlText += " ,INQORDNOTERF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILERF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILENMRF" + Environment.NewLine;
                sqlText += " ,INQEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,INQEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,ANSEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,ANSEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,INQUIRYDATERF" + Environment.NewLine;
                sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;
                sqlText += " ,SALESSUBTOTALTAXRF" + Environment.NewLine;
                sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                sqlText += " ,INQORDANSDIVCDRF" + Environment.NewLine;
                sqlText += " ,RECEIVEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ANSWERCREATEDIVRF" + Environment.NewLine;
                // 2010/05/26 Add >>>
                sqlText += " ,CANCELDIVRF" + Environment.NewLine;
                sqlText += " ,CMTCOOPRTDIVRF" + Environment.NewLine;
                // 2010/05/26 Add <<<
                sqlText += " ,SFPMCPRTINSTSLIPNORF" + Environment.NewLine;　　//ADD 2011/05/20
                // ADD 2013/03/29 SCM障害№10503対応 -------------------------------------------->>>>>
                sqlText += " ,ACCEPTORORDERKINDRF" + Environment.NewLine;
                // ADD 2013/03/29 SCM障害№10503対応 --------------------------------------------<<<<<
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,TABUSEDIVRF" + Environment.NewLine;
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                sqlText += " ,CARMNGCODERF" + Environment.NewLine;
                // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sqlText += " ,AUTOANSMTHDRF" + Environment.NewLine;
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                sqlText += "FROM" + Environment.NewLine;
                sqlText += "  SCMACODRDATARF WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += "WHERE " + Environment.NewLine;
                sqlText += "      ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                sqlText += "  AND INQOTHEREPCDRF = @FINDINQOTHEREPCD" + Environment.NewLine;
                sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;
                sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;
                // 2011/02/18 >>>
                //sqlText += "  AND ANSWERDIVCDRF = @FINDANSWERDIVCD " + Environment.NewLine;
                sqlText += "  AND CANCELDIVRF = @FINDCANCELDIV" + Environment.NewLine;
                // 2011/02/18 <<<

                //Prameterオブジェクトの作成
                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                SqlParameter findInqOtherEpCd = sqlCommand.Parameters.Add("@FINDINQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                // 2011/02/18 >>>
                //SqlParameter findAnswerDivCd = sqlCommand.Parameters.Add("@FINDANSWERDIVCD", SqlDbType.Int);  // 回答区分
                SqlParameter findCancelDiv = sqlCommand.Parameters.Add("@FINDCANCELDIV", SqlDbType.SmallInt);  // 回答区分
                // 2011/02/18 <<<

                //Parameterオブジェクトへ値設定
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraAcOdrDataWork.EnterpriseCode);  // 企業コード
                findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(paraAcOdrDataWork.InqOriginalEpCd);  // 問合せ元企業コード
                findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(paraAcOdrDataWork.InqOriginalSecCd);  // 問合せ元拠点コード
                findInqOtherEpCd.Value = SqlDataMediator.SqlSetString(paraAcOdrDataWork.InqOtherEpCd);  // 問合せ先企業コード
                findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(paraAcOdrDataWork.InqOtherSecCd);  // 問合せ先拠点コード
                findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(paraAcOdrDataWork.InquiryNumber);  // 問合せ番号
                // 2011/02/18 >>>
                //findAnswerDivCd.Value = SqlDataMediator.SqlSetInt32(paraAcOdrDataWork.AnswerDivCd); // 回答区分
                findCancelDiv.Value = SqlDataMediator.SqlSetInt16(paraAcOdrDataWork.CancelDiv); // 回答区分
                // 2011/02/18 <<<

                sqlCommand.CommandText = sqlText;
                # endregion

#if DEBUG
                Console.Clear();
                Console.WriteLine(NSDebug.GetSqlCommand(sqlCommand));
#endif
                if (retSCMAcOdrDataWorkList == null) retSCMAcOdrDataWorkList = new CustomSerializeArrayList();

                myReader = sqlCommand.ExecuteReader();

                while (myReader.Read())
                {
                    retSCMAcOdrDataWorkList.Add(CopyToSCMAcOdrDataWorkFromReader(ref myReader));
                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if ((retSCMAcOdrDataWorkList != null) && (retSCMAcOdrDataWorkList.Count != 0))
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;

        }
        #endregion
        //<<<2010/04/20

        # region [ScmAnswerRead]
        /// <summary>
        /// ＳＣＭ受注データの最新レコードを１件のみ取得します。
        /// </summary>
        /// <param name="retAcOdrDataObj">検索結果(SCM受注データインスタンス)</param>
        /// <param name="paraSCMReadObj">抽出条件パラメータワーク</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 回答区分で絞り込んだ最新のＳＣＭ受注データ情報を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.26</br>
        public int ScmAnswerRead(out object retAcOdrDataObj, object paraSCMReadObj)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlConnection sqlConnection = null;
            retAcOdrDataObj = null;
            try
            {
                SCMAcOdrDataWork retAcOdrDataWork = null;
                IOWriteSCMReadWork paraSCMReadWork = paraSCMReadObj as IOWriteSCMReadWork;

                // コネクション生成
                sqlConnection = this.CreateSqlConnection(true);

                status = this.ScmAnswerReadProc(out retAcOdrDataWork, paraSCMReadWork, ref sqlConnection);

                retAcOdrDataObj = retAcOdrDataWork;
            }
            catch (Exception ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                base.WriteErrorLog(ex, errmsg, status);
            }
            finally
            {
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// SCM受注データ情報の最新レコードを１件のみ取得します。
        /// </summary>
        /// <param name="retSCMAcOdrDataWork">SCM受注データ情報結果</param>
        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM受注データのキー値が一致する、SCM受注データ情報の最新レコードを１件のみ取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        private int ScmAnswerReadProc(out SCMAcOdrDataWork retSCMAcOdrDataWork, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retSCMAcOdrDataWork = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT TOP 1" + Environment.NewLine;  //最新のレコードを１つ取得
                sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,CUSTOMERCODERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                sqlText += " ,ANSWERDIVCDRF" + Environment.NewLine;
                sqlText += " ,JUDGEMENTDATERF" + Environment.NewLine;
                sqlText += " ,INQORDNOTERF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILERF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILENMRF" + Environment.NewLine;
                sqlText += " ,INQEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,INQEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,ANSEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,ANSEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,INQUIRYDATERF" + Environment.NewLine;
                sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;
                sqlText += " ,SALESSUBTOTALTAXRF" + Environment.NewLine;
                sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                sqlText += " ,INQORDANSDIVCDRF" + Environment.NewLine;
                sqlText += " ,RECEIVEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ANSWERCREATEDIVRF" + Environment.NewLine;
                // 2010/05/26 Add >>>
                sqlText += " ,CANCELDIVRF" + Environment.NewLine;
                sqlText += " ,CMTCOOPRTDIVRF" + Environment.NewLine;
                // 2010/05/26 Add <<<
                sqlText += " ,SFPMCPRTINSTSLIPNORF" + Environment.NewLine;　　//ADD 2011/05/20
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,TABUSEDIVRF" + Environment.NewLine;
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                sqlText += " ,CARMNGCODERF" + Environment.NewLine;
                // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sqlText += " ,AUTOANSMTHDRF" + Environment.NewLine;
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                sqlText += "FROM" + Environment.NewLine;
                // -- UPD 2010/04/15 ----------------------------------->>>
                //sqlText += "  SCMACODRDATARF" + Environment.NewLine;
                sqlText += "  SCMACODRDATARF WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2010/04/15 -----------------------------------<<<
                sqlText += "WHERE" + Environment.NewLine;
                sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;

                //回答区分   ※配列で複数指定される
                if (paraSCMReadWork.AnswerDivCds != null)
                {
                    string answerDivstr = "";
                    foreach (Int32 divstr in paraSCMReadWork.AnswerDivCds)
                    {
                        if (answerDivstr != "")
                        {
                            answerDivstr += ",";
                        }
                        answerDivstr += divstr.ToString();
                    }

                    if (answerDivstr != "")
                    {
                        sqlText += " AND ANSWERDIVCDRF IN (" + answerDivstr + ") " + Environment.NewLine;
                    }
                }
                // 2011/02/18 Add >>>
                if (paraSCMReadWork.CancelDivs != null)
                {
                    string cancelDivStr = "";
                    foreach (Int16 divstr in paraSCMReadWork.CancelDivs)
                    {
                        if (cancelDivStr != "")
                        {
                            cancelDivStr += ",";
                        }
                        cancelDivStr += divstr.ToString();
                    }

                    if (cancelDivStr != "")
                    {
                        sqlText += " AND CANCELDIVRF IN (" + cancelDivStr + ") " + Environment.NewLine;
                    }
                }
                // 2011/02/18 Add <<<

                sqlText += "ORDER BY" + Environment.NewLine;
                sqlText += "  UPDATEDATERF DESC" + Environment.NewLine;
                sqlText += " ,UPDATETIMERF DESC" + Environment.NewLine;

                //企業コード
                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.EnterpriseCode);

                sqlCommand.CommandText = sqlText;
                # endregion

#if DEBUG
                Console.Clear();
                Console.WriteLine(NSDebug.GetSqlCommand(sqlCommand));
#endif

                myReader = sqlCommand.ExecuteReader();

                if (myReader.Read())
                {
                    retSCMAcOdrDataWork = CopyToSCMAcOdrDataWorkFromReader(ref myReader);
                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if (retSCMAcOdrDataWork != null)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }

        #endregion

        # region [ScmDtlIqRead]
        /// <summary>
        /// ＳＣＭ受注明細データ(問合せ・発注)の最新レコードを１件のみ取得します。
        /// </summary>
        /// <param name="retAcOdrDtlIqObj">検索結果(SCM受注明細データ(問合せ・発注)インスタンス)</param>
        /// <param name="paraSCMReadObj">抽出条件パラメータワーク</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 最新のＳＣＭ受注明細データ(問合せ・発注)情報を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.06.16</br>
        public int ScmDtlIqRead(out object retAcOdrDtlIqObj, object paraSCMReadObj)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlConnection sqlConnection = null;
            retAcOdrDtlIqObj = null;
            try
            {
                SCMAcOdrDtlIqWork retAcOdrDtlIqWork = null;
                IOWriteSCMReadWork paraSCMReadWork = paraSCMReadObj as IOWriteSCMReadWork;

                // コネクション生成
                sqlConnection = this.CreateSqlConnection(true);

                status = this.ScmDtlIqReadProc(out retAcOdrDtlIqWork, paraSCMReadWork, ref sqlConnection);

                retAcOdrDtlIqObj = retAcOdrDtlIqWork;
            }
            catch (Exception ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                base.WriteErrorLog(ex, errmsg, status);
            }
            finally
            {
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// ＳＣＭ受注明細データ(問合せ・発注)の最新レコードを１件のみ取得します。
        /// </summary>
        /// <param name="retSCMAcOdrDtlIqWork">ＳＣＭ受注明細データ(問合せ・発注)情報結果</param>
        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : ＳＣＭ受注明細データ(問合せ・発注)のキー値が一致する、ＳＣＭ受注明細データ(問合せ・発注)の最新レコードを１件のみ取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.06.16</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        private int ScmDtlIqReadProc(out SCMAcOdrDtlIqWork retSCMAcOdrDtlIqWork, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retSCMAcOdrDtlIqWork = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT TOP 1" + Environment.NewLine;  //最新のレコードを１つ取得
                sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                sqlText += " ,INQROWNUMBERRF" + Environment.NewLine;
                sqlText += " ,INQROWNUMDERIVEDNORF" + Environment.NewLine;
                sqlText += " ,INQORGDTLDISCGUIDRF" + Environment.NewLine;
                sqlText += " ,INQOTHDTLDISCGUIDRF" + Environment.NewLine;
                sqlText += " ,GOODSDIVCDRF" + Environment.NewLine;
                sqlText += " ,RECYCLEPRTKINDCODERF" + Environment.NewLine;
                sqlText += " ,RECYCLEPRTKINDNAMERF" + Environment.NewLine;
                sqlText += " ,DELIVEREDGOODSDIVRF" + Environment.NewLine;
                sqlText += " ,HANDLEDIVCODERF" + Environment.NewLine;
                sqlText += " ,GOODSSHAPERF" + Environment.NewLine;
                sqlText += " ,DELIVRDGDSCONFCDRF" + Environment.NewLine;
                sqlText += " ,DELIGDSCMPLTDUEDATERF" + Environment.NewLine;
                sqlText += " ,ANSWERDELIVERYDATERF" + Environment.NewLine;
                sqlText += " ,BLGOODSCODERF" + Environment.NewLine;
                sqlText += " ,BLGOODSDRCODERF" + Environment.NewLine;
                sqlText += " ,INQGOODSNAMERF" + Environment.NewLine;
                sqlText += " ,ANSGOODSNAMERF" + Environment.NewLine;
                sqlText += " ,SALESORDERCOUNTRF" + Environment.NewLine;
                sqlText += " ,DELIVEREDGOODSCOUNTRF" + Environment.NewLine;
                sqlText += " ,GOODSNORF" + Environment.NewLine;
                sqlText += " ,GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += " ,GOODSMAKERNMRF" + Environment.NewLine;
                sqlText += " ,PUREGOODSMAKERCDRF" + Environment.NewLine;
                sqlText += " ,INQPUREGOODSNORF" + Environment.NewLine;
                sqlText += " ,ANSPUREGOODSNORF" + Environment.NewLine;
                sqlText += " ,LISTPRICERF" + Environment.NewLine;
                sqlText += " ,UNITPRICERF" + Environment.NewLine;
                sqlText += " ,GOODSADDINFORF" + Environment.NewLine;
                sqlText += " ,ROUGHRROFITRF" + Environment.NewLine;
                sqlText += " ,ROUGHRATERF" + Environment.NewLine;
                sqlText += " ,ANSWERLIMITDATERF" + Environment.NewLine;
                sqlText += " ,COMMENTDTLRF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILEDTLRF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILENMDTLRF" + Environment.NewLine;
                sqlText += " ,SHELFNORF" + Environment.NewLine;
                sqlText += " ,ADDITIONALDIVCDRF" + Environment.NewLine;
                sqlText += " ,CORRECTDIVCDRF" + Environment.NewLine;
                sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                sqlText += " ,DISPLAYORDERRF" + Environment.NewLine;
                // 2010/05/26 Add >>>
                sqlText += " ,CANCELCNDTINDIVRF" + Environment.NewLine;
                sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " ,SALESROWNORF" + Environment.NewLine;
                // 2010/05/26 Add <<<
                // 2011/02/09 Add >>>
                sqlText += " ,DTLTAKEINDIVCDRF" + Environment.NewLine;
                // 2011/02/09 Add <<<
                //--- ADD 2011/05/20 --->>>
                sqlText += " ,WAREHOUSECODERF" + Environment.NewLine;
                sqlText += " ,WAREHOUSENAMERF" + Environment.NewLine;
                sqlText += " ,WAREHOUSESHELFNORF" + Environment.NewLine;
                //--- ADD 2011/05/20 ---<<<
                 // -- ADD 2011/08/10   ------ >>>>>>
                sqlText += " ,PMPRSNTCOUNTRF" + Environment.NewLine;
                sqlText += " ,SETPARTSMKRCDRF" + Environment.NewLine;
                sqlText += " ,SETPARTSNUMBERRF" + Environment.NewLine;
                sqlText += " ,SETPARTSMAINSUBNORF" + Environment.NewLine;
                // -- ADD 2011/08/10   ------ <<<<<<
                // -- ADD 2011/10/10   ------ >>>>>>
                sqlText += " ,CAMPAIGNCODERF" + Environment.NewLine;
                // -- ADD 2011/10/10   ------ <<<<<<
                // -- ADD 2012/01/10   ------ >>>>>>
                sqlText += " ,GOODSSPECIALNOTERF" + Environment.NewLine;  //商品規格・特記事項
                // -- ADD 2012/01/10   ------ <<<<<<
                // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                sqlText += " ,AUTOESTIMATEPARTSCDRF" + Environment.NewLine;  //自動見積部品コード
                // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;  //　売上伝票合計（税込）
                sqlText += " ,SALESTOTALTAXEXCRF" + Environment.NewLine;  // 売上伝票合計（税抜）
                sqlText += " ,SCMCONSTAXLAYMETHODRF" + Environment.NewLine;  // SCM消費税転嫁方式
                sqlText += " ,CONSTAXRATERF" + Environment.NewLine;  // 消費税税率
                sqlText += " ,SCMFRACTIONPROCCDRF" + Environment.NewLine;  // SCM端数処理区分
                sqlText += " ,ACCRECCONSTAXRF" + Environment.NewLine;  // 売掛消費税
                sqlText += " ,PMSALESDATERF" + Environment.NewLine;  // PM売上日
                sqlText += " ,SUPPSLPPRTTIMERF" + Environment.NewLine;  // 仕入先伝票発行時刻
                sqlText += " ,SALESMONEYTAXINCRF" + Environment.NewLine;  // 売上金額（税込み）
                sqlText += " ,SALESMONEYTAXEXCRF" + Environment.NewLine;  // 売上金額（税抜き）
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,DATAINPUTSYSTEMRF" + Environment.NewLine;  // データ入力システム
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                sqlText += " ,PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;
                sqlText += " ,PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;
                sqlText += " ,PMMAINMNGSHELFNORF" + Environment.NewLine;
                sqlText += " ,PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;
                // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                sqlText += " ,PRMSETDTLNO2RF" + Environment.NewLine;
                sqlText += " ,PRMSETDTLNAME2RF" + Environment.NewLine;
                sqlText += " ,STOCKSTATUSDIVRF" + Environment.NewLine;
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sqlText += " ,RENTDIVRF" + Environment.NewLine;
                sqlText += " ,MKRSUGGESTRTPRICRF" + Environment.NewLine;
                sqlText += " ,OPENPRICEDIVRF" + Environment.NewLine;
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                sqlText += " ,BGNGOODSDIVRF" + Environment.NewLine;
                // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<

                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                sqlText += " ,MODELPRTSADPTYMRF" + Environment.NewLine;
                sqlText += " ,MODELPRTSABLSYMRF" + Environment.NewLine;
                sqlText += " ,MODELPRTSADPTFRAMENORF" + Environment.NewLine;
                sqlText += " ,MODELPRTSABLSFRAMENORF" + Environment.NewLine;
                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<

                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,ANSDELIDATEDIVRF" + Environment.NewLine;
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,GOODSSPECIALNTFORFACRF" + Environment.NewLine;
                sqlText += " ,GOODSSPECIALNTFORCOWRF" + Environment.NewLine;
                sqlText += " ,PRMSETDTLNAME2FORFACRF" + Environment.NewLine;
                sqlText += " ,PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,INQBLUTYPTTHCDRF" + Environment.NewLine;
                sqlText += " ,INQBLUTYPTSBCDRF" + Environment.NewLine;
                sqlText += " ,ANSBLUTYPTTHCDRF" + Environment.NewLine;
                sqlText += " ,ANSBLUTYPTSBCDRF" + Environment.NewLine;
                sqlText += " ,ANSBLGOODSCODERF" + Environment.NewLine;
                sqlText += " ,ANSBLGOODSDRCODERF" + Environment.NewLine;
                // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<


                sqlText += "  FROM" + Environment.NewLine;
                // -- UPD 2010/04/15 ----------------------------->>>
                //sqlText += "  SCMACODRDTLIQRF" + Environment.NewLine;
                sqlText += "  SCMACODRDTLIQRF WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2010/04/15 -----------------------------<<<
                sqlText += "WHERE" + Environment.NewLine;
                sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;

                // ----- ADD 2011/08/10 ----- >>>>>
                if (!string.IsNullOrEmpty(paraSCMReadWork.InqOtherSecCd))
                {
                    sqlText += " AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;
                    //問合せ先拠点コード
                    SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);
                    findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOtherSecCd);
                }
                // ----- ADD 2011/08/10 ----- <<<<<

                sqlText += "ORDER BY" + Environment.NewLine;
                sqlText += "  UPDATEDATERF DESC" + Environment.NewLine;
                sqlText += " ,UPDATETIMERF DESC" + Environment.NewLine;

                //企業コード
                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.EnterpriseCode);

                sqlCommand.CommandText = sqlText;
                # endregion

#if DEBUG
                Console.Clear();
                Console.WriteLine(NSDebug.GetSqlCommand(sqlCommand));
#endif

                myReader = sqlCommand.ExecuteReader();

                if (myReader.Read())
                {
                    retSCMAcOdrDtlIqWork = CopyToSCMAcOdrDtlIqWorkFromReader(ref myReader);
                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if (retSCMAcOdrDtlIqWork != null)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }

        #endregion

        # region [ScmRead]
        /// <summary>
        /// SCM関連データ情報のリストを取得します。
        /// </summary>
        /// <param name="retScmCsObj">検索結果</param>
        /// <param name="paraSCMReadObj">抽出条件パラメータワーク</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM関連データのキー値が一致する、全てのSCM関連データ情報を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        public int ScmRead(ref object retScmCsObj, object paraSCMReadObj)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlConnection sqlConnection = null;

            try
            {
                CustomSerializeArrayList retScmCsList = retScmCsObj as CustomSerializeArrayList;
                IOWriteSCMReadWork paraSCMReadWork = paraSCMReadObj as IOWriteSCMReadWork;
                
                // コネクション生成
                sqlConnection = this.CreateSqlConnection(true);

                status = this.ScmRead(ref retScmCsList, paraSCMReadWork, ref sqlConnection);
            }
            catch (Exception ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                base.WriteErrorLog(ex, errmsg, status);
            }
            finally
            {
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// SCM関連データ情報のリストを取得します。
        /// </summary>
        /// <param name="retScmCsList">SCM関連データ情報を格納する CustomSerializeArrayList</param>
        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM関連データのキー値が一致する、全てのSCM関連データ情報が格納されている CustomSerializeArrayList を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        public int ScmRead(ref CustomSerializeArrayList retScmCsList, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (retScmCsList == null)
            {
                retScmCsList = new CustomSerializeArrayList();
            }

            SCMAcOdrDataWork retSCMAcOdrDataWork = null;    //ＳＣＭ受注データ結果
            SCMAcOdrDtCarWork retSCMAcOdrDtCarWork = null;  //ＳＣＭ受注データ（車両情報）結果
            ArrayList retSCMAcOdrDtlIqWorkList = null;      //ＳＣＭ受注明細データ（問合せ・発注）結果リスト
            ArrayList retSCMAcOdrDtlAsWorkList = null;      //ＳＣＭ受注明細データ（回答）結果リスト
            ArrayList retSCMAcOdSetDtAsWorkList = null;      //ＳＣＭ受注セット部品データ結果リスト // ADD 2011/08/10

            //ＳＣＭ受注データ抽出処理
            status = ScmReadSCMAcOdrDataWorkProc(out retSCMAcOdrDataWork, paraSCMReadWork, ref sqlConnection);

            if (retSCMAcOdrDataWork != null)
            {
                retScmCsList.Add(retSCMAcOdrDataWork);
            }

            //受注データの問合せ番号より受注データ(車両情報)を取得
            status = ScmReadSCMAcOdrDtCarWorkProc(out retSCMAcOdrDtCarWork, paraSCMReadWork, ref sqlConnection);

            if (retSCMAcOdrDtCarWork != null)
            {
                retScmCsList.Add(retSCMAcOdrDtCarWork);
            }
            
            //ＳＣＭ受注明細データ(問合せ・発注)抽出処理
            //※売上伝票番号での検索の場合は、問合せ・発注データは読み込まない
            if (string.IsNullOrEmpty(paraSCMReadWork.SalesSlipNum))
            {
                status = ScmReadSCMAcOdrDtlIqWorkProc(out retSCMAcOdrDtlIqWorkList, paraSCMReadWork, ref sqlConnection);

                if (retSCMAcOdrDtlIqWorkList != null && retSCMAcOdrDtlIqWorkList.Count != 0)
                {
                    retScmCsList.Add(retSCMAcOdrDtlIqWorkList);
                }
            }
            //ＳＣＭ受注明細データ(回答)抽出処理
            status = ScmReadSCMAcOdrDtlAsWorkProc(out retSCMAcOdrDtlAsWorkList, paraSCMReadWork, ref sqlConnection);

            if (retSCMAcOdrDtlAsWorkList != null && retSCMAcOdrDtlAsWorkList.Count != 0)
            {
                retScmCsList.Add(retSCMAcOdrDtlAsWorkList);
            }

             // -- ADD 2011/08/10   ------ >>>>>>
            //ＳＣＭ受注セット部品データ抽出処理
            status = ScmReadSCMAcOdSetDtAsWorkProc(out retSCMAcOdSetDtAsWorkList, paraSCMReadWork, ref sqlConnection);

            if (retSCMAcOdSetDtAsWorkList != null && retSCMAcOdSetDtAsWorkList.Count != 0)
            {
                retScmCsList.Add(retSCMAcOdSetDtAsWorkList);
            }
            // -- ADD 2011/08/10   ------ <<<<<<

            // -- DEL 2011/08/10   ------ <<<<<<
            //if ((status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND) &&
            //    (retSCMAcOdrDataWork != null || retSCMAcOdrDtCarWork != null || retSCMAcOdrDtlIqWorkList != null || retSCMAcOdrDtlAsWorkList != null)
            //)
            // -- DEL 2011/08/10   ------ <<<<<<
             // -- ADD 2011/08/10   ------ >>>>>>
            if ((status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND) &&
                (retSCMAcOdrDataWork != null || retSCMAcOdrDtCarWork != null || retSCMAcOdrDtlIqWorkList != null || retSCMAcOdrDtlAsWorkList != null || retSCMAcOdSetDtAsWorkList != null)
                )
            // -- ADD 2011/08/10   ------ <<<<<<
            {
                //該当無しステータスで対象マスタのどれか１件でも存在した場合はステータスを正常とする。
                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            

            return status;
        }

        /// <summary>
        /// SCM受注データ情報を取得します。
        /// </summary>
        /// <param name="retSCMAcOdrDataWork">SCM受注データ情報結果</param>
        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM受注データのキー値が一致する、SCM受注データ情報を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        private int ScmReadSCMAcOdrDataWorkProc(out SCMAcOdrDataWork retSCMAcOdrDataWork, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
        {   
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retSCMAcOdrDataWork = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT TOP 1" + Environment.NewLine;  //最新のレコードを１つ取得
                sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,CUSTOMERCODERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                sqlText += " ,ANSWERDIVCDRF" + Environment.NewLine;
                sqlText += " ,JUDGEMENTDATERF" + Environment.NewLine;
                sqlText += " ,INQORDNOTERF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILERF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILENMRF" + Environment.NewLine;
                sqlText += " ,INQEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,INQEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,ANSEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,ANSEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,INQUIRYDATERF" + Environment.NewLine;
                sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;
                sqlText += " ,SALESSUBTOTALTAXRF" + Environment.NewLine;
                sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                sqlText += " ,INQORDANSDIVCDRF" + Environment.NewLine;
                sqlText += " ,RECEIVEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ANSWERCREATEDIVRF" + Environment.NewLine;
                // 2010/05/26 Add >>>
                sqlText += " ,CANCELDIVRF" + Environment.NewLine;
                sqlText += " ,CMTCOOPRTDIVRF" + Environment.NewLine;
                // 2010/05/26 Add <<<
                sqlText += " ,SFPMCPRTINSTSLIPNORF" + Environment.NewLine;　　//ADD 2011/05/20
                sqlText += " ,ACCEPTORORDERKINDRF" + Environment.NewLine;　　//ADD 2011/08/10
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,TABUSEDIVRF" + Environment.NewLine;
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                sqlText += " ,CARMNGCODERF" + Environment.NewLine;
                // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sqlText += " ,AUTOANSMTHDRF" + Environment.NewLine;
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                sqlText += "FROM" + Environment.NewLine;
                // -- UPD 2010/04/15 --------------------->>>
                //sqlText += "  SCMACODRDATARF" + Environment.NewLine;
                sqlText += "  SCMACODRDATARF WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2010/04/15 ---------------------<<<
                sqlText += "WHERE" + Environment.NewLine;
                sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;

                //企業コード
                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.EnterpriseCode);

                if (string.IsNullOrEmpty(paraSCMReadWork.SalesSlipNum) == false)
                {
                    //売上伝票番号
                    sqlText += "  AND ACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                    sqlText += "  AND SALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;

                    SqlParameter findAcptAnOdrStatus = sqlCommand.Parameters.Add("@FINDACPTANODRSTATUS", SqlDbType.Int);
                    findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(paraSCMReadWork.AcptAnOdrStatus);

                    SqlParameter findSalesSlipNum = sqlCommand.Parameters.Add("@FINDSALESSLIPNUM", SqlDbType.NChar);
                    findSalesSlipNum.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.SalesSlipNum);

                }
                else
                {
                    //問合せ番号
                    sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;

                    SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);
                    findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(paraSCMReadWork.InquiryNumber);
                }

                //問い合わせ先拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOtherSecCd) == false)
                {
                    sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;

                    SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);
                    findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOtherSecCd);
                }

                // -- ADD 2010/02/26 -------------------->>>
                //問合せ元企業コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalEpCd.Trim()) == false)	//@@@@20230303
                {
                    sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;

                    SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);
                    findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalEpCd);
                }

                //問合せ元拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalSecCd) == false)
                {
                    sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;

                    SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);
                    findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalSecCd);
                }

                //問合せ・発注種別
                if (paraSCMReadWork.InqOrdDivCd != 0)
                {
                    sqlText += "  AND INQORDDIVCDRF = @FINDINQORDDIVCD" + Environment.NewLine;

                    SqlParameter findInqOrdDivCd = sqlCommand.Parameters.Add("@FINDINQORDDIVCD", SqlDbType.Int);
                    findInqOrdDivCd.Value = SqlDataMediator.SqlSetInt32(paraSCMReadWork.InqOrdDivCd);
                }

                //問発・回答種別
                if (paraSCMReadWork.InqOrdAnsDivCd != 0)
                {
                    sqlText += "  AND INQORDANSDIVCDRF = @FINDINQORDANSDIVCD" + Environment.NewLine;

                    SqlParameter findInqOrdAnsDivCd = sqlCommand.Parameters.Add("@FINDINQORDANSDIVCD", SqlDbType.Int);
                    findInqOrdAnsDivCd.Value = SqlDataMediator.SqlSetInt32(paraSCMReadWork.InqOrdAnsDivCd);
                }
                // -- ADD 2010/02/26 --------------------<<<

                // 2011/02/18 >>>
                //// -- ADD 2010/04/15 -------------------->>>
                ////問発・回答種別
                //if (paraSCMReadWork.AnswerDivCds != null)
                //{
                //    if (paraSCMReadWork.AnswerDivCds[0] != 99)
                //    {
                //        //キャンセル以外の最新を取得
                //        sqlText += "  AND ANSWERDIVCDRF <> 99" + Environment.NewLine;
                //    }
                //    else
                //    {
                //        //キャンセル分の最新を取得
                //        sqlText += "  AND ANSWERDIVCDRF = 99" + Environment.NewLine;
                //    }
                //}
                //// -- ADD 2010/04/15 --------------------<<<

                //問発・回答種別
                if (paraSCMReadWork.CancelDivs != null)
                {
                    if (paraSCMReadWork.CancelDivs[0] != 1)
                    {
                        //キャンセル以外の最新を取得
                        sqlText += "  AND CANCELDIVRF <> 1" + Environment.NewLine;
                    }
                    else
                    {
                        //キャンセル分の最新を取得
                        sqlText += "  AND CANCELDIVRF = 1" + Environment.NewLine;
                    }
                }
                // 2011/02/18 <<<

                sqlText += "ORDER BY" + Environment.NewLine;
                sqlText += "  UPDATEDATERF DESC" + Environment.NewLine;
                sqlText += " ,UPDATETIMERF DESC" + Environment.NewLine;


                sqlCommand.CommandText = sqlText;
                # endregion

#if DEBUG
                Console.Clear();
                Console.WriteLine(NSDebug.GetSqlCommand(sqlCommand));
#endif

                myReader = sqlCommand.ExecuteReader();

                if (myReader.Read())
                {
                    retSCMAcOdrDataWork = CopyToSCMAcOdrDataWorkFromReader(ref myReader);
                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if (retSCMAcOdrDataWork != null)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// SCM受注データ(車両情報)情報を取得します。
        /// </summary>
        /// <param name="retSCMAcOdrDtCarWork">SCM受注データ(車両情報)情報結果</param>
        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM受注データ(車両情報)のキー値が一致する、SCM受注データ(車両情報)情報を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        private int ScmReadSCMAcOdrDtCarWorkProc(out SCMAcOdrDtCarWork retSCMAcOdrDtCarWork, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retSCMAcOdrDtCarWork = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,NUMBERPLATE1CODERF" + Environment.NewLine;
                sqlText += " ,NUMBERPLATE1NAMERF" + Environment.NewLine;
                sqlText += " ,NUMBERPLATE2RF" + Environment.NewLine;
                sqlText += " ,NUMBERPLATE3RF" + Environment.NewLine;
                sqlText += " ,NUMBERPLATE4RF" + Environment.NewLine;
                sqlText += " ,MODELDESIGNATIONNORF" + Environment.NewLine;
                sqlText += " ,CATEGORYNORF" + Environment.NewLine;
                sqlText += " ,MAKERCODERF" + Environment.NewLine;
                sqlText += " ,MODELCODERF" + Environment.NewLine;
                sqlText += " ,MODELSUBCODERF" + Environment.NewLine;
                sqlText += " ,MODELNAMERF" + Environment.NewLine;
                sqlText += " ,CARINSPECTCERTMODELRF" + Environment.NewLine;
                sqlText += " ,FULLMODELRF" + Environment.NewLine;
                sqlText += " ,FRAMENORF" + Environment.NewLine;
                sqlText += " ,FRAMEMODELRF" + Environment.NewLine;
                sqlText += " ,CHASSISNORF" + Environment.NewLine;
                sqlText += " ,CARPROPERNORF" + Environment.NewLine;
                sqlText += " ,PRODUCETYPEOFYEARNUMRF" + Environment.NewLine;
                sqlText += " ,COMMENTRF" + Environment.NewLine;
                sqlText += " ,RPCOLORCODERF" + Environment.NewLine;
                sqlText += " ,COLORNAME1RF" + Environment.NewLine;
                sqlText += " ,TRIMCODERF" + Environment.NewLine;
                sqlText += " ,TRIMNAMERF" + Environment.NewLine;
                sqlText += " ,MILEAGERF" + Environment.NewLine;
                sqlText += " ,EQUIPOBJRF" + Environment.NewLine;
                sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                 // -- ADD 2011/08/10   ------ >>>>>>
                sqlText += " ,CARNORF" + Environment.NewLine;
                sqlText += " ,MAKERNAMERF" + Environment.NewLine;
                sqlText += " ,GRADENAMERF" + Environment.NewLine;
                sqlText += " ,BODYNAMERF" + Environment.NewLine;
                sqlText += " ,DOORCOUNTRF" + Environment.NewLine;
                sqlText += " ,ENGINEMODELNMRF" + Environment.NewLine;
                sqlText += " ,CMNNMENGINEDISPLACERF" + Environment.NewLine;
                sqlText += " ,ENGINEMODELRF" + Environment.NewLine;
                sqlText += " ,NUMBEROFGEARRF" + Environment.NewLine;
                sqlText += " ,GEARNMRF" + Environment.NewLine;
                sqlText += " ,EDIVNMRF" + Environment.NewLine;
                sqlText += " ,TRANSMISSIONNMRF" + Environment.NewLine;
                sqlText += " ,SHIFTNMRF" + Environment.NewLine;
                // -- ADD 2011/08/10   ------ <<<<<<
                // ADD 2012/05/31 ------------------------------>>>>>
                sqlText += " ,FIRSTENTRYDATENUMTYPRF" + Environment.NewLine;
                sqlText += " ,CARADDINFRF" + Environment.NewLine;
                sqlText += " ,EQUIPPRTSOBJRF" + Environment.NewLine;
                // ADD 2012/05/31 ------------------------------<<<<<
                // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,CARMNGCODERF" + Environment.NewLine;
                // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/09 SCM障害№10384対応 ------------------------------->>>>>
                sqlText += " ,EXPECTEDCEDATERF" + Environment.NewLine;
                // ADD 2013/05/09 SCM障害№10384対応 -------------------------------<<<<<
                sqlText += "FROM" + Environment.NewLine;
                // -- UPD 2010/04/15 ------------------------->>>
                //sqlText += "  SCMACODRDTCARRF" + Environment.NewLine;
                sqlText += "  SCMACODRDTCARRF WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2010/04/15 -------------------------<<<
                sqlText += "WHERE" + Environment.NewLine;
                sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                if (string.IsNullOrEmpty(paraSCMReadWork.SalesSlipNum) == false)
                {
                    //売上伝票番号
                    sqlText += "  AND ACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                    sqlText += "  AND SALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;
                }
                else
                {
                    //問合せ番号
                    sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;
                }

                //企業コード
                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.EnterpriseCode);

                if (string.IsNullOrEmpty(paraSCMReadWork.SalesSlipNum) == false)
                {
                    SqlParameter findAcptAnOdrStatus = sqlCommand.Parameters.Add("@FINDACPTANODRSTATUS", SqlDbType.Int);
                    findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(paraSCMReadWork.AcptAnOdrStatus);

                    SqlParameter findSalesSlipNum = sqlCommand.Parameters.Add("@FINDSALESSLIPNUM", SqlDbType.NChar);
                    findSalesSlipNum.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.SalesSlipNum);
                }
                else
                {
                    SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);
                    findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(paraSCMReadWork.InquiryNumber);
                }

                // -- ADD 2010/02/26 -------------------->>>
                //問合せ元企業コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalEpCd.Trim()) == false)	//@@@@20230303
                {
                    sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;

                    SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);
                    findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalEpCd);
                }

                //問合せ元拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalSecCd) == false)
                {
                    sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;

                    SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);
                    findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalSecCd);
                }
                // -- ADD 2010/02/26 --------------------<<<

                sqlCommand.CommandText = sqlText;
                # endregion

#if DEBUG
                Console.Clear();
                Console.WriteLine(NSDebug.GetSqlCommand(sqlCommand));
#endif

                myReader = sqlCommand.ExecuteReader();

                if (myReader.Read())
                {
                    retSCMAcOdrDtCarWork = CopyToSCMAcOdrDtCarWorkFromReader(ref myReader);
                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if (retSCMAcOdrDtCarWork != null)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// SCM受注明細データ(問合せ・発注)情報を取得します。
        /// </summary>
        /// <param name="retSCMAcOdrDtlIqWorkList">SCM受注明細データ(問合せ・発注)情報結果</param>
        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM受注明細データ(問合せ・発注)のキー値が一致する、SCM受注明細データ(問合せ・発注)情報を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        private int ScmReadSCMAcOdrDtlIqWorkProc(out ArrayList retSCMAcOdrDtlIqWorkList, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retSCMAcOdrDtlIqWorkList = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  SCM.CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCM.UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCM.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,SCM.FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,SCM.UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,SCM.UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,SCM.UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,SCM.LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,SCM.INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,SCM.UPDATEDATERF" + Environment.NewLine;
                sqlText += " ,SCM.UPDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCM.INQROWNUMBERRF" + Environment.NewLine;
                sqlText += " ,SCM.INQROWNUMDERIVEDNORF" + Environment.NewLine;
                sqlText += " ,SCM.INQORGDTLDISCGUIDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQOTHDTLDISCGUIDRF" + Environment.NewLine;
                sqlText += " ,SCM.GOODSDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCM.RECYCLEPRTKINDCODERF" + Environment.NewLine;
                sqlText += " ,SCM.RECYCLEPRTKINDNAMERF" + Environment.NewLine;
                sqlText += " ,SCM.DELIVEREDGOODSDIVRF" + Environment.NewLine;
                sqlText += " ,SCM.HANDLEDIVCODERF" + Environment.NewLine;
                sqlText += " ,SCM.GOODSSHAPERF" + Environment.NewLine;
                sqlText += " ,SCM.DELIVRDGDSCONFCDRF" + Environment.NewLine;
                sqlText += " ,SCM.DELIGDSCMPLTDUEDATERF" + Environment.NewLine;
                sqlText += " ,SCM.ANSWERDELIVERYDATERF" + Environment.NewLine;
                sqlText += " ,SCM.BLGOODSCODERF" + Environment.NewLine;
                sqlText += " ,SCM.BLGOODSDRCODERF" + Environment.NewLine;
                sqlText += " ,SCM.INQGOODSNAMERF" + Environment.NewLine;
                sqlText += " ,SCM.ANSGOODSNAMERF" + Environment.NewLine;
                sqlText += " ,SCM.SALESORDERCOUNTRF" + Environment.NewLine;
                sqlText += " ,SCM.DELIVEREDGOODSCOUNTRF" + Environment.NewLine;
                sqlText += " ,SCM.GOODSNORF" + Environment.NewLine;
                sqlText += " ,SCM.GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += " ,SCM.GOODSMAKERNMRF" + Environment.NewLine;
                sqlText += " ,SCM.PUREGOODSMAKERCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQPUREGOODSNORF" + Environment.NewLine;
                sqlText += " ,SCM.ANSPUREGOODSNORF" + Environment.NewLine;
                sqlText += " ,SCM.LISTPRICERF" + Environment.NewLine;
                sqlText += " ,SCM.UNITPRICERF" + Environment.NewLine;
                sqlText += " ,SCM.GOODSADDINFORF" + Environment.NewLine;
                sqlText += " ,SCM.ROUGHRROFITRF" + Environment.NewLine;
                sqlText += " ,SCM.ROUGHRATERF" + Environment.NewLine;
                sqlText += " ,SCM.ANSWERLIMITDATERF" + Environment.NewLine;
                sqlText += " ,SCM.COMMENTDTLRF" + Environment.NewLine;
                sqlText += " ,SCM.APPENDINGFILEDTLRF" + Environment.NewLine;
                sqlText += " ,SCM.APPENDINGFILENMDTLRF" + Environment.NewLine;
                sqlText += " ,SCM.SHELFNORF" + Environment.NewLine;
                sqlText += " ,SCM.ADDITIONALDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCM.CORRECTDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQORDDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCM.DISPLAYORDERRF" + Environment.NewLine;
                // 2010/05/26 Add >>>
                sqlText += " ,SCM.CANCELCNDTINDIVRF" + Environment.NewLine;
                sqlText += " ,SCM.ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SCM.SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " ,SCM.SALESROWNORF" + Environment.NewLine;
                // 2010/05/26 Add <<<
                // 2011/02/09 Add >>>
                sqlText += " ,SCM.DTLTAKEINDIVCDRF" + Environment.NewLine;
                // 2011/02/09 Add <<<
                //--- 2011/05/20 --->>>
                sqlText += " ,WAREHOUSECODERF" + Environment.NewLine;
                sqlText += " ,WAREHOUSENAMERF" + Environment.NewLine;
                sqlText += " ,WAREHOUSESHELFNORF" + Environment.NewLine;
                //--- 2011/05/20 ---<<<
                // -- ADD 2011/08/10   ------ >>>>>>
                sqlText += " ,PMPRSNTCOUNTRF" + Environment.NewLine;
                sqlText += " ,SETPARTSMKRCDRF" + Environment.NewLine;
                sqlText += " ,SETPARTSNUMBERRF" + Environment.NewLine;
                sqlText += " ,SETPARTSMAINSUBNORF" + Environment.NewLine;
                // -- ADD 2011/08/10   ------ <<<<<<
                // -- ADD 2011/10/10   ------ >>>>>>
                sqlText += " ,CAMPAIGNCODERF" + Environment.NewLine;
                // -- ADD 2011/10/10   ------ <<<<<<
                // -- ADD 2012/01/10   ------ >>>>>>
                sqlText += " ,SCM.GOODSSPECIALNOTERF" + Environment.NewLine;  //商品規格・特記事項
                // -- ADD 2012/01/10   ------ <<<<<<
                // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                sqlText += " ,SCM.AUTOESTIMATEPARTSCDRF" + Environment.NewLine;  //自動見積部品コード
                // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCM.SALESTOTALTAXINCRF" + Environment.NewLine;  //　売上伝票合計（税込）
                sqlText += " ,SCM.SALESTOTALTAXEXCRF" + Environment.NewLine;  // 売上伝票合計（税抜）
                sqlText += " ,SCM.SCMCONSTAXLAYMETHODRF" + Environment.NewLine;  // SCM消費税転嫁方式
                sqlText += " ,SCM.CONSTAXRATERF" + Environment.NewLine;  // 消費税税率
                sqlText += " ,SCM.SCMFRACTIONPROCCDRF" + Environment.NewLine;  // SCM端数処理区分
                sqlText += " ,SCM.ACCRECCONSTAXRF" + Environment.NewLine;  // 売掛消費税
                sqlText += " ,SCM.PMSALESDATERF" + Environment.NewLine;  // PM売上日
                sqlText += " ,SCM.SUPPSLPPRTTIMERF" + Environment.NewLine;  // 仕入先伝票発行時刻
                sqlText += " ,SCM.SALESMONEYTAXINCRF" + Environment.NewLine;  // 売上金額（税込み）
                sqlText += " ,SCM.SALESMONEYTAXEXCRF" + Environment.NewLine;  // 売上金額（税抜き）
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCM.DATAINPUTSYSTEMRF" + Environment.NewLine;  // データ入力システム
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                sqlText += " ,SCM.PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;
                sqlText += " ,SCM.PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;
                sqlText += " ,SCM.PMMAINMNGSHELFNORF" + Environment.NewLine;
                sqlText += " ,SCM.PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;
                // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                sqlText += " ,SCM.PRMSETDTLNO2RF" + Environment.NewLine;
                sqlText += " ,SCM.PRMSETDTLNAME2RF" + Environment.NewLine;
                sqlText += " ,SCM.STOCKSTATUSDIVRF" + Environment.NewLine;
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sqlText += " ,SCM.RENTDIVRF" + Environment.NewLine;
                sqlText += " ,SCM.MKRSUGGESTRTPRICRF" + Environment.NewLine;
                sqlText += " ,SCM.OPENPRICEDIVRF" + Environment.NewLine;
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                sqlText += " ,SCM.BGNGOODSDIVRF" + Environment.NewLine;
                // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                sqlText += " ,SCM.MODELPRTSADPTYMRF" + Environment.NewLine;
                sqlText += " ,SCM.MODELPRTSABLSYMRF" + Environment.NewLine;
                sqlText += " ,SCM.MODELPRTSADPTFRAMENORF" + Environment.NewLine;
                sqlText += " ,SCM.MODELPRTSABLSFRAMENORF" + Environment.NewLine;
                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<

                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCM.ANSDELIDATEDIVRF" + Environment.NewLine;
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCM.GOODSSPECIALNTFORFACRF" + Environment.NewLine;
                sqlText += " ,SCM.GOODSSPECIALNTFORCOWRF" + Environment.NewLine;
                sqlText += " ,SCM.PRMSETDTLNAME2FORFACRF" + Environment.NewLine;
                sqlText += " ,SCM.PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCM.INQBLUTYPTTHCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQBLUTYPTSBCDRF" + Environment.NewLine;
                sqlText += " ,SCM.ANSBLUTYPTTHCDRF" + Environment.NewLine;
                sqlText += " ,SCM.ANSBLUTYPTSBCDRF" + Environment.NewLine;
                sqlText += " ,SCM.ANSBLGOODSCODERF" + Environment.NewLine;
                sqlText += " ,SCM.ANSBLGOODSDRCODERF" + Environment.NewLine;
                // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                sqlText += "FROM" + Environment.NewLine;
                // -- UPD 2010/04/15 ------------------------------------>>>
                //sqlText += "  SCMACODRDTLIQRF AS SCM" + Environment.NewLine;
                sqlText += "  SCMACODRDTLIQRF AS SCM WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2010/04/15 ------------------------------------<<<

                // -- UPD 2010/04/15 ---------------------------->>>
                #region [削除]
                //sqlText += "    INNER JOIN   " + Environment.NewLine;
                //sqlText += "    (   " + Environment.NewLine;
                //sqlText += "  	 SELECT    " + Environment.NewLine;
                //// -- UPD 2010/02/26 -------------------->>>
                ////sqlText += "  	   MAX(UPDATETIMERF) AS UPDATETIMERF   " + Environment.NewLine;
                ////sqlText += "  	  ,MAX(UPDATEDATERF) AS UPDATEDATERF   " + Environment.NewLine;
                //sqlText += "  	   MAX(cast(UPDATEDATERF as nvarchar) + cast(UPDATETIMERF as nvarchar)) AS UPDATEDATETIMERF   " + Environment.NewLine;
                //// -- UPD 2010/02/26 --------------------<<<
                //sqlText += "  	  ,ENTERPRISECODERF   " + Environment.NewLine;
                //sqlText += "  	  ,INQORIGINALEPCDRF   " + Environment.NewLine;
                //sqlText += "  	  ,INQORIGINALSECCDRF   " + Environment.NewLine;
                //sqlText += "  	  ,INQOTHEREPCDRF   " + Environment.NewLine;
                //sqlText += "  	  ,INQOTHERSECCDRF    " + Environment.NewLine;
                //sqlText += "  	  ,INQUIRYNUMBERRF  " + Environment.NewLine;
                //sqlText += "  	  ,INQROWNUMBERRF	   " + Environment.NewLine;
                //sqlText += "  	  ,INQROWNUMDERIVEDNORF  " + Environment.NewLine;
                //sqlText += "  	 FROM SCMACODRDTLIQRF    " + Environment.NewLine;
                //// -- ADD 2010/02/26 -------------------->>>
                //sqlText += "     WHERE" + Environment.NewLine;
                //sqlText += "       ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;

                ////問合せ・発注種別
                //if (paraSCMReadWork.InqOrdDivCd != 0)
                //{
                //    sqlText += "     AND INQORDDIVCDRF = @FINDINQORDDIVCD    " + Environment.NewLine;

                //    SqlParameter findInqOrdDivCd = sqlCommand.Parameters.Add("@FINDINQORDDIVCD", SqlDbType.Int);
                //    findInqOrdDivCd.Value = SqlDataMediator.SqlSetInt32(paraSCMReadWork.InqOrdDivCd);
                //}
                //// -- ADD 2010/02/26 --------------------<<<
                //sqlText += "  	 GROUP BY    " + Environment.NewLine;
                //sqlText += "  	   ENTERPRISECODERF   " + Environment.NewLine;
                //sqlText += "  	  ,INQORIGINALEPCDRF   " + Environment.NewLine;
                //sqlText += "  	  ,INQORIGINALSECCDRF   " + Environment.NewLine;
                //sqlText += "  	  ,INQOTHEREPCDRF   " + Environment.NewLine;
                //sqlText += "  	  ,INQOTHERSECCDRF    " + Environment.NewLine;
                //sqlText += "  	  ,INQUIRYNUMBERRF  " + Environment.NewLine;
                //sqlText += "  	  ,INQROWNUMBERRF	   " + Environment.NewLine;
                //sqlText += "  	  ,INQROWNUMDERIVEDNORF  " + Environment.NewLine;
                //sqlText += "    ) AS SCM2   " + Environment.NewLine;
                //sqlText += "    ON   " + Environment.NewLine;
                //sqlText += "        SCM2.ENTERPRISECODERF = SCM.ENTERPRISECODERF   " + Environment.NewLine;
                //sqlText += "    AND SCM2.INQORIGINALEPCDRF = SCM.INQORIGINALEPCDRF" + Environment.NewLine;
                //sqlText += "    AND SCM2.INQORIGINALSECCDRF = SCM.INQORIGINALSECCDRF" + Environment.NewLine;
                //sqlText += "    AND SCM2.INQOTHEREPCDRF = SCM.INQOTHEREPCDRF" + Environment.NewLine;
                //sqlText += "    AND SCM2.INQOTHERSECCDRF = SCM.INQOTHERSECCDRF" + Environment.NewLine;
                //sqlText += "    AND SCM2.INQUIRYNUMBERRF = SCM.INQUIRYNUMBERRF" + Environment.NewLine;
                //// -- UPD 2010/02/26 -------------------->>>
                ////sqlText += "    AND SCM2.UPDATEDATERF = SCM.UPDATEDATERF" + Environment.NewLine;
                ////sqlText += "    AND SCM2.UPDATETIMERF = SCM.UPDATETIMERF" + Environment.NewLine;
                //sqlText += "    AND SCM2.UPDATEDATETIMERF = (cast(SCM.UPDATEDATERF as nvarchar) + cast(SCM.UPDATETIMERF as nvarchar))   " + Environment.NewLine;
                //// -- UPD 2010/02/26 --------------------<<<
                //sqlText += "    AND SCM2.INQROWNUMBERRF = SCM.INQROWNUMBERRF" + Environment.NewLine;
                //sqlText += "    AND SCM2.INQROWNUMDERIVEDNORF = SCM.INQROWNUMDERIVEDNORF" + Environment.NewLine;
                #endregion

                // 2011/02/18 >>>
                //if (paraSCMReadWork.AnswerDivCds == null || paraSCMReadWork.AnswerDivCds[0] != 99)
                if (paraSCMReadWork.CancelDivs == null || paraSCMReadWork.CancelDivs[0] != 1)
                // 2011/02/18 <<<
                {
                    //キャンセル以外の指定で抽出する場合は、既存通り最新の取得
                    sqlText += "    INNER JOIN   " + Environment.NewLine;
                    sqlText += "    (   " + Environment.NewLine;
                    sqlText += "  	 SELECT    " + Environment.NewLine;
                    // -- UPD 2010/06/17 ----------------------------------------------->>>
                    //sqlText += "       MAX(cast(UPDATEDATERF as nvarchar) + cast(UPDATETIMERF as nvarchar)) AS UPDATEDATETIMERF   " + Environment.NewLine;
                    sqlText += "       MAX(cast(UPDATEDATERF as nvarchar) + RIGHT('000000000' + cast(UPDATETIMERF as nvarchar),9)) AS UPDATEDATETIMERF   " + Environment.NewLine;
                    // -- UPD 2010/06/17 -----------------------------------------------<<<
                    sqlText += "  	  ,ENTERPRISECODERF   " + Environment.NewLine;
                    sqlText += "  	  ,INQORIGINALEPCDRF   " + Environment.NewLine;
                    sqlText += "  	  ,INQORIGINALSECCDRF   " + Environment.NewLine;
                    sqlText += "  	  ,INQOTHEREPCDRF   " + Environment.NewLine;
                    sqlText += "  	  ,INQOTHERSECCDRF    " + Environment.NewLine;
                    sqlText += "  	  ,INQUIRYNUMBERRF  " + Environment.NewLine;
                    sqlText += "  	  ,INQROWNUMBERRF	   " + Environment.NewLine;
                    sqlText += "  	  ,INQROWNUMDERIVEDNORF  " + Environment.NewLine;
                    sqlText += "  	 FROM SCMACODRDTLIQRF WITH (READUNCOMMITTED)   " + Environment.NewLine;
                    sqlText += "     WHERE" + Environment.NewLine;
                    sqlText += "       ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;

                    //問合せ・発注種別
                    if (paraSCMReadWork.InqOrdDivCd != 0)
                    {
                        sqlText += "     AND INQORDDIVCDRF = @FINDINQORDDIVCD    " + Environment.NewLine;

                        SqlParameter findInqOrdDivCd = sqlCommand.Parameters.Add("@FINDINQORDDIVCD", SqlDbType.Int);
                        findInqOrdDivCd.Value = SqlDataMediator.SqlSetInt32(paraSCMReadWork.InqOrdDivCd);
                    }
                    sqlText += "  	 GROUP BY    " + Environment.NewLine;
                    sqlText += "  	   ENTERPRISECODERF   " + Environment.NewLine;
                    sqlText += "  	  ,INQORIGINALEPCDRF   " + Environment.NewLine;
                    sqlText += "  	  ,INQORIGINALSECCDRF   " + Environment.NewLine;
                    sqlText += "  	  ,INQOTHEREPCDRF   " + Environment.NewLine;
                    sqlText += "  	  ,INQOTHERSECCDRF    " + Environment.NewLine;
                    sqlText += "  	  ,INQUIRYNUMBERRF  " + Environment.NewLine;
                    sqlText += "  	  ,INQROWNUMBERRF	   " + Environment.NewLine;
                    sqlText += "  	  ,INQROWNUMDERIVEDNORF  " + Environment.NewLine;
                    sqlText += "    ) AS SCM2   " + Environment.NewLine;
                    sqlText += "    ON   " + Environment.NewLine;
                    sqlText += "        SCM2.ENTERPRISECODERF = SCM.ENTERPRISECODERF   " + Environment.NewLine;
                    sqlText += "    AND SCM2.INQORIGINALEPCDRF = SCM.INQORIGINALEPCDRF" + Environment.NewLine;
                    sqlText += "    AND SCM2.INQORIGINALSECCDRF = SCM.INQORIGINALSECCDRF" + Environment.NewLine;
                    sqlText += "    AND SCM2.INQOTHEREPCDRF = SCM.INQOTHEREPCDRF" + Environment.NewLine;
                    sqlText += "    AND SCM2.INQOTHERSECCDRF = SCM.INQOTHERSECCDRF" + Environment.NewLine;
                    sqlText += "    AND SCM2.INQUIRYNUMBERRF = SCM.INQUIRYNUMBERRF" + Environment.NewLine;
                    // -- UPD 2010/06/17 ------------------------------------------->>>
                    //sqlText += "    AND SCM2.UPDATEDATETIMERF = (cast(SCM.UPDATEDATERF as nvarchar) + cast(SCM.UPDATETIMERF as nvarchar))   " + Environment.NewLine;
                    sqlText += "    AND SCM2.UPDATEDATETIMERF = (cast(SCM.UPDATEDATERF as nvarchar) + RIGHT('000000000' + cast(SCM.UPDATETIMERF as nvarchar),9))   " + Environment.NewLine;
                    // -- UPD 2010/06/17 -------------------------------------------<<<
                    sqlText += "    AND SCM2.INQROWNUMBERRF = SCM.INQROWNUMBERRF" + Environment.NewLine;
                    sqlText += "    AND SCM2.INQROWNUMDERIVEDNORF = SCM.INQROWNUMDERIVEDNORF" + Environment.NewLine;
                }
                else
                {
                    //キャンセル分の指定がされた場合は、キャンセルの明細のみ取得する
                    sqlText += "   INNER JOIN   " + Environment.NewLine;
                    sqlText += "    (   " + Environment.NewLine;
                    sqlText += "  	 SELECT    " + Environment.NewLine;
                    sqlText += "  	   ENTERPRISECODERF   " + Environment.NewLine;
                    sqlText += "  	  ,INQORIGINALEPCDRF   " + Environment.NewLine;
                    sqlText += "  	  ,INQORIGINALSECCDRF   " + Environment.NewLine;
                    sqlText += "  	  ,INQOTHEREPCDRF   " + Environment.NewLine;
                    sqlText += "  	  ,INQOTHERSECCDRF    " + Environment.NewLine;
                    sqlText += "  	  ,INQUIRYNUMBERRF  " + Environment.NewLine;
                    sqlText += "  	  ,UPDATEDATERF  " + Environment.NewLine;
                    sqlText += "  	  ,UPDATETIMERF  " + Environment.NewLine;
                    sqlText += "  	 FROM SCMACODRDATARF WITH (READUNCOMMITTED) " + Environment.NewLine;
                    sqlText += "       WHERE" + Environment.NewLine;
                    sqlText += "             ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                    // 2011/02/18 >>>
                    //sqlText += "         AND ANSWERDIVCDRF = 99   " + Environment.NewLine;
                    sqlText += "         AND CANCELDIVRF = 1   " + Environment.NewLine;
                    // 2011/02/18 <<<
                    sqlText += "    ) AS SCM2   " + Environment.NewLine;
                    sqlText += "    ON   " + Environment.NewLine;
                    sqlText += "        SCM2.ENTERPRISECODERF = SCM.ENTERPRISECODERF   " + Environment.NewLine;
                    sqlText += "    AND SCM2.INQORIGINALEPCDRF = SCM.INQORIGINALEPCDRF" + Environment.NewLine;
                    sqlText += "    AND SCM2.INQORIGINALSECCDRF = SCM.INQORIGINALSECCDRF" + Environment.NewLine;
                    sqlText += "    AND SCM2.INQOTHEREPCDRF = SCM.INQOTHEREPCDRF" + Environment.NewLine;
                    sqlText += "    AND SCM2.INQOTHERSECCDRF = SCM.INQOTHERSECCDRF" + Environment.NewLine;
                    sqlText += "    AND SCM2.INQUIRYNUMBERRF = SCM.INQUIRYNUMBERRF" + Environment.NewLine;
                    sqlText += "    AND SCM2.UPDATEDATERF = SCM.UPDATEDATERF" + Environment.NewLine;
                    sqlText += "    AND SCM2.UPDATETIMERF = SCM.UPDATETIMERF" + Environment.NewLine;
                }
                // -- UPD 2010/04/15 ----------------------------<<<

                sqlText += "WHERE" + Environment.NewLine;
                //企業コード
                sqlText += "  SCM.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;

                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.EnterpriseCode);

                //問合せ番号
                sqlText += "  AND SCM.INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;

                SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);
                findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(paraSCMReadWork.InquiryNumber);

                //問い合わせ先拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOtherSecCd) == false)
                {
                    sqlText += "  AND SCM.INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;

                    SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);
                    findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOtherSecCd);
                }

                // -- ADD 2010/02/26 -------------------->>>
                //問合せ元企業コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalEpCd.Trim()) == false)	//@@@@20230303
                {
                    sqlText += "  AND SCM.INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;

                    SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);
                    findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalEpCd);
                }

                //問合せ元拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalSecCd) == false)
                {
                    sqlText += "  AND SCM.INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;

                    SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);
                    findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalSecCd);
                }
                // -- ADD 2010/02/26 --------------------<<<

                sqlCommand.CommandText = sqlText;
                # endregion

#if DEBUG
                Console.Clear();
                Console.WriteLine(NSDebug.GetSqlCommand(sqlCommand));
#endif

                myReader = sqlCommand.ExecuteReader();

                while (myReader.Read())
                {
                    SCMAcOdrDtlIqWork iqWork = CopyToSCMAcOdrDtlIqWorkFromReader(ref myReader);

                    if (retSCMAcOdrDtlIqWorkList == null)
                    {
                        retSCMAcOdrDtlIqWorkList = new ArrayList();
                    }

                    //最新の明細のみ取得
                    retSCMAcOdrDtlIqWorkList.Add(iqWork);

                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if (retSCMAcOdrDtlIqWorkList != null && retSCMAcOdrDtlIqWorkList.Count != 0)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// SCM受注明細データ(回答)情報を取得します。
        /// </summary>
        /// <param name="retSCMAcOdrDtlAsWorkList">SCM受注明細データ(回答)情報結果</param>
        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM受注明細データ(回答)のキー値が一致する、SCM受注明細データ(回答)情報を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        private int ScmReadSCMAcOdrDtlAsWorkProc(out ArrayList retSCMAcOdrDtlAsWorkList, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retSCMAcOdrDtlAsWorkList = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  SCM.CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCM.UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCM.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,SCM.FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,SCM.UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,SCM.UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,SCM.UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,SCM.LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,SCM.INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,SCM.UPDATEDATERF" + Environment.NewLine;
                sqlText += " ,SCM.UPDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCM.INQROWNUMBERRF" + Environment.NewLine;
                sqlText += " ,SCM.INQROWNUMDERIVEDNORF" + Environment.NewLine;
                sqlText += " ,SCM.INQORGDTLDISCGUIDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQOTHDTLDISCGUIDRF" + Environment.NewLine;
                sqlText += " ,SCM.GOODSDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCM.RECYCLEPRTKINDCODERF" + Environment.NewLine;
                sqlText += " ,SCM.RECYCLEPRTKINDNAMERF" + Environment.NewLine;
                sqlText += " ,SCM.DELIVEREDGOODSDIVRF" + Environment.NewLine;
                sqlText += " ,SCM.HANDLEDIVCODERF" + Environment.NewLine;
                sqlText += " ,SCM.GOODSSHAPERF" + Environment.NewLine;
                sqlText += " ,SCM.DELIVRDGDSCONFCDRF" + Environment.NewLine;
                sqlText += " ,SCM.DELIGDSCMPLTDUEDATERF" + Environment.NewLine;
                sqlText += " ,SCM.ANSWERDELIVERYDATERF" + Environment.NewLine;
                sqlText += " ,SCM.BLGOODSCODERF" + Environment.NewLine;
                sqlText += " ,SCM.BLGOODSDRCODERF" + Environment.NewLine;
                sqlText += " ,SCM.INQGOODSNAMERF" + Environment.NewLine;
                sqlText += " ,SCM.ANSGOODSNAMERF" + Environment.NewLine;
                sqlText += " ,SCM.SALESORDERCOUNTRF" + Environment.NewLine;
                sqlText += " ,SCM.DELIVEREDGOODSCOUNTRF" + Environment.NewLine;
                sqlText += " ,SCM.GOODSNORF" + Environment.NewLine;
                sqlText += " ,SCM.GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += " ,SCM.GOODSMAKERNMRF" + Environment.NewLine;
                sqlText += " ,SCM.PUREGOODSMAKERCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQPUREGOODSNORF" + Environment.NewLine;
                sqlText += " ,SCM.ANSPUREGOODSNORF" + Environment.NewLine;
                sqlText += " ,SCM.LISTPRICERF" + Environment.NewLine;
                sqlText += " ,SCM.UNITPRICERF" + Environment.NewLine;
                sqlText += " ,SCM.GOODSADDINFORF" + Environment.NewLine;
                sqlText += " ,SCM.ROUGHRROFITRF" + Environment.NewLine;
                sqlText += " ,SCM.ROUGHRATERF" + Environment.NewLine;
                sqlText += " ,SCM.ANSWERLIMITDATERF" + Environment.NewLine;
                sqlText += " ,SCM.COMMENTDTLRF" + Environment.NewLine;
                sqlText += " ,SCM.APPENDINGFILEDTLRF" + Environment.NewLine;
                sqlText += " ,SCM.APPENDINGFILENMDTLRF" + Environment.NewLine;
                sqlText += " ,SCM.SHELFNORF" + Environment.NewLine;
                sqlText += " ,SCM.ADDITIONALDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCM.CORRECTDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCM.ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SCM.SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " ,SCM.SALESROWNORF" + Environment.NewLine;
                sqlText += " ,SCM.CAMPAIGNCODERF" + Environment.NewLine;
                sqlText += " ,SCM.STOCKDIVRF" + Environment.NewLine;
                sqlText += " ,SCM.INQORDDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCM.DISPLAYORDERRF" + Environment.NewLine;
                sqlText += " ,SCM.GOODSMNGNORF" + Environment.NewLine;
                // 2010/05/26 Add >>>
                sqlText += " ,SCM.CANCELCNDTINDIVRF" + Environment.NewLine;
                // 2010/05/26 Add <<<
                // 2011/02/09 Add >>>
                sqlText += " ,SCM.DTLTAKEINDIVCDRF" + Environment.NewLine;
                // 2011/02/09 Add <<<
                //--- ADD 2011/05/20 --->>>
                sqlText += " ,SCM.WAREHOUSECODERF" + Environment.NewLine;
                sqlText += " ,SCM.WAREHOUSENAMERF" + Environment.NewLine;
                sqlText += " ,SCM.WAREHOUSESHELFNORF" + Environment.NewLine;
                //--- ADD 2011/05/20 ---<<<
                // -- ADD 2011/08/10   ------ >>>>>>
                sqlText += " ,PMPRSNTCOUNTRF" + Environment.NewLine;
                sqlText += " ,SETPARTSMKRCDRF" + Environment.NewLine;
                sqlText += " ,SETPARTSNUMBERRF" + Environment.NewLine;
                sqlText += " ,SETPARTSMAINSUBNORF" + Environment.NewLine;
                // -- ADD 2011/08/10   ------ <<<<<<
                // -- ADD 2012/01/10   ------ >>>>>>
                sqlText += " ,SCM.GOODSSPECIALNOTERF" + Environment.NewLine;  //商品規格・特記事項
                // -- ADD 2012/01/10   ------ <<<<<<
                // -- ADD 2012/04/12   ------ >>>>>> 
                sqlText += " ,SCM.PSMNGNORF" + Environment.NewLine;  //PS管理番号
                // -- ADD 2012/04/12   ------ <<<<<<
                // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                sqlText += " ,SCM.AUTOESTIMATEPARTSCDRF" + Environment.NewLine;  //自動見積部品コード
                // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCM.SALESTOTALTAXINCRF" + Environment.NewLine;  //　売上伝票合計（税込）
                sqlText += " ,SCM.SALESTOTALTAXEXCRF" + Environment.NewLine;  // 売上伝票合計（税抜）
                sqlText += " ,SCM.SCMCONSTAXLAYMETHODRF" + Environment.NewLine;  // SCM消費税転嫁方式
                sqlText += " ,SCM.CONSTAXRATERF" + Environment.NewLine;  // 消費税税率
                sqlText += " ,SCM.SCMFRACTIONPROCCDRF" + Environment.NewLine;  // SCM端数処理区分
                sqlText += " ,SCM.ACCRECCONSTAXRF" + Environment.NewLine;  // 売掛消費税
                sqlText += " ,SCM.PMSALESDATERF" + Environment.NewLine;  // PM売上日
                sqlText += " ,SCM.SUPPSLPPRTTIMERF" + Environment.NewLine;  // 仕入先伝票発行時刻
                sqlText += " ,SCM.SALESMONEYTAXINCRF" + Environment.NewLine;  // 売上金額（税込み）
                sqlText += " ,SCM.SALESMONEYTAXEXCRF" + Environment.NewLine;  // 売上金額（税抜き）
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCM.DATAINPUTSYSTEMRF" + Environment.NewLine;  // データ入力システム
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                sqlText += " ,SCM.PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;
                sqlText += " ,SCM.PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;
                sqlText += " ,SCM.PMMAINMNGSHELFNORF" + Environment.NewLine;
                sqlText += " ,SCM.PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;
                // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                sqlText += " ,SCM.PRMSETDTLNO2RF" + Environment.NewLine;
                sqlText += " ,SCM.PRMSETDTLNAME2RF" + Environment.NewLine;
                sqlText += " ,SCM.STOCKSTATUSDIVRF" + Environment.NewLine;
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sqlText += " ,SCM.RENTDIVRF" + Environment.NewLine;
                sqlText += " ,SCM.MKRSUGGESTRTPRICRF" + Environment.NewLine;
                sqlText += " ,SCM.OPENPRICEDIVRF" + Environment.NewLine;
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                sqlText += " ,SCM.BGNGOODSDIVRF" + Environment.NewLine;
                // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<

                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                sqlText += " ,SCM.MODELPRTSADPTYMRF" + Environment.NewLine;
                sqlText += " ,SCM.MODELPRTSABLSYMRF" + Environment.NewLine;
                sqlText += " ,SCM.MODELPRTSADPTFRAMENORF" + Environment.NewLine;
                sqlText += " ,SCM.MODELPRTSABLSFRAMENORF" + Environment.NewLine;
                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<

                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCM.ANSDELIDATEDIVRF" + Environment.NewLine;
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCM.GOODSSPECIALNTFORFACRF" + Environment.NewLine;
                sqlText += " ,SCM.GOODSSPECIALNTFORCOWRF" + Environment.NewLine;
                sqlText += " ,SCM.PRMSETDTLNAME2FORFACRF" + Environment.NewLine;
                sqlText += " ,SCM.PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCM.INQBLUTYPTTHCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQBLUTYPTSBCDRF" + Environment.NewLine;
                sqlText += " ,SCM.ANSBLUTYPTTHCDRF" + Environment.NewLine;
                sqlText += " ,SCM.ANSBLUTYPTSBCDRF" + Environment.NewLine;
                sqlText += " ,SCM.ANSBLGOODSCODERF" + Environment.NewLine;
                sqlText += " ,SCM.ANSBLGOODSDRCODERF" + Environment.NewLine;
                // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                sqlText += "FROM" + Environment.NewLine;
                // -- UPD 2010/04/15 -------------------------------->>>
                //sqlText += "  SCMACODRDTLASRF AS SCM" + Environment.NewLine;
                sqlText += "  SCMACODRDTLASRF AS SCM WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2010/04/15 --------------------------------<<<
                sqlText += "    INNER JOIN   " + Environment.NewLine;
                sqlText += "    (   " + Environment.NewLine;
                sqlText += "  	 SELECT    " + Environment.NewLine;
                // -- UPD 2010/02/26 -------------------->>>
                //sqlText += "  	   MAX(UPDATETIMERF) AS UPDATETIMERF   " + Environment.NewLine;
                //sqlText += "  	  ,MAX(UPDATEDATERF) AS UPDATEDATERF   " + Environment.NewLine;
                // -- UPD 2010/06/17 ----------------------------------->>>
                //sqlText += "       MAX(cast(UPDATEDATERF as nvarchar) + cast(UPDATETIMERF as nvarchar)) AS UPDATEDATETIMERF   " + Environment.NewLine;
                sqlText += "       MAX(cast(UPDATEDATERF as nvarchar) + RIGHT('000000000' + cast(UPDATETIMERF as nvarchar),9)) AS UPDATEDATETIMERF   " + Environment.NewLine;
                // -- UPD 2010/06/17 -----------------------------------<<<
                // -- UPD 2010/02/26 --------------------<<<
                sqlText += "  	  ,ENTERPRISECODERF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALEPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALSECCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHEREPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHERSECCDRF    " + Environment.NewLine;
                sqlText += "  	  ,INQUIRYNUMBERRF  " + Environment.NewLine;
                sqlText += "  	  ,INQROWNUMBERRF	   " + Environment.NewLine;
                sqlText += "  	  ,INQROWNUMDERIVEDNORF  " + Environment.NewLine;
                sqlText += "  	  ,ACPTANODRSTATUSRF  " + Environment.NewLine;
                sqlText += "  	  ,SALESSLIPNUMRF  " + Environment.NewLine;
                sqlText += "  	  ,SALESROWNORF  " + Environment.NewLine;
                // -- UPD 2010/04/15 ------------------------------------->>>
                //sqlText += "  	 FROM SCMACODRDTLASRF    " + Environment.NewLine;
                sqlText += "  	 FROM SCMACODRDTLASRF WITH (READUNCOMMITTED)   " + Environment.NewLine;
                // -- UPD 2010/04/15 -------------------------------------<<<
                // -- ADD 2010/02/26 -------------------->>>
                sqlText += "     WHERE" + Environment.NewLine;
                sqlText += "       ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;

                //問合せ・発注種別
                if (paraSCMReadWork.InqOrdDivCd != 0)
                {
                    sqlText += "   AND INQORDDIVCDRF = @FINDINQORDDIVCD    " + Environment.NewLine;

                    SqlParameter findInqOrdDivCd = sqlCommand.Parameters.Add("@FINDINQORDDIVCD", SqlDbType.Int);
                    findInqOrdDivCd.Value = SqlDataMediator.SqlSetInt32(paraSCMReadWork.InqOrdDivCd);
                }
                // -- ADD 2010/02/26 --------------------<<<
                sqlText += "  	 GROUP BY    " + Environment.NewLine;
                sqlText += "  	   ENTERPRISECODERF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALEPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALSECCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHEREPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHERSECCDRF    " + Environment.NewLine;
                sqlText += "  	  ,INQUIRYNUMBERRF  " + Environment.NewLine;
                sqlText += "  	  ,INQROWNUMBERRF	   " + Environment.NewLine;
                sqlText += "  	  ,INQROWNUMDERIVEDNORF  " + Environment.NewLine;
                sqlText += "  	  ,ACPTANODRSTATUSRF  " + Environment.NewLine;
                sqlText += "  	  ,SALESSLIPNUMRF  " + Environment.NewLine;
                sqlText += "  	  ,SALESROWNORF  " + Environment.NewLine;
                sqlText += "    ) AS SCM2   " + Environment.NewLine;
                sqlText += "    ON   " + Environment.NewLine;
                sqlText += "        SCM2.ENTERPRISECODERF = SCM.ENTERPRISECODERF   " + Environment.NewLine;
                sqlText += "    AND SCM2.INQORIGINALEPCDRF = SCM.INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += "    AND SCM2.INQORIGINALSECCDRF = SCM.INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += "    AND SCM2.INQOTHEREPCDRF = SCM.INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += "    AND SCM2.INQOTHERSECCDRF = SCM.INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += "    AND SCM2.INQUIRYNUMBERRF = SCM.INQUIRYNUMBERRF" + Environment.NewLine;
                // -- UPD 2010/02/26 -------------------->>>
                //sqlText += "    AND SCM2.UPDATEDATERF = SCM.UPDATEDATERF" + Environment.NewLine;
                //sqlText += "    AND SCM2.UPDATETIMERF = SCM.UPDATETIMERF" + Environment.NewLine;
                // -- UPD 2010/06/17 -------------------------------->>>
                //sqlText += "    AND SCM2.UPDATEDATETIMERF = (cast(SCM.UPDATEDATERF as nvarchar) + cast(SCM.UPDATETIMERF as nvarchar))   " + Environment.NewLine;
                sqlText += "    AND SCM2.UPDATEDATETIMERF = (cast(SCM.UPDATEDATERF as nvarchar) + RIGHT('000000000' + cast(SCM.UPDATETIMERF as nvarchar),9))   " + Environment.NewLine;
                // -- UPD 2010/06/17 --------------------------------<<<
                // -- UPD 2010/02/26 --------------------<<<
                sqlText += "    AND SCM2.INQROWNUMBERRF = SCM.INQROWNUMBERRF" + Environment.NewLine;
                sqlText += "    AND SCM2.INQROWNUMDERIVEDNORF = SCM.INQROWNUMDERIVEDNORF" + Environment.NewLine;
                sqlText += "    AND SCM2.ACPTANODRSTATUSRF = SCM.ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += "    AND SCM2.SALESSLIPNUMRF = SCM.SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += "    AND SCM2.SALESROWNORF = SCM.SALESROWNORF" + Environment.NewLine;
                sqlText += "WHERE" + Environment.NewLine;
                //企業コード
                sqlText += "  SCM.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;

                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.EnterpriseCode);

                if (string.IsNullOrEmpty(paraSCMReadWork.SalesSlipNum) == false)
                {
                    //売上伝票番号
                    sqlText += "  AND SCM.ACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                    sqlText += "  AND SCM.SALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;

                    SqlParameter findAcptAnOdrStatus = sqlCommand.Parameters.Add("@FINDACPTANODRSTATUS", SqlDbType.Int);
                    findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(paraSCMReadWork.AcptAnOdrStatus);

                    SqlParameter findSalesSlipNum = sqlCommand.Parameters.Add("@FINDSALESSLIPNUM", SqlDbType.NChar);
                    findSalesSlipNum.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.SalesSlipNum);

                }
                else
                {
                    //問合せ番号
                    sqlText += "  AND SCM.INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;

                    SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);
                    findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(paraSCMReadWork.InquiryNumber);

                }

                //問い合わせ先拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOtherSecCd) == false)
                {
                    sqlText += "  AND SCM.INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;

                    SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);
                    findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOtherSecCd);
                }

                // -- ADD 2010/02/26 -------------------->>>
                //問合せ元企業コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalEpCd.Trim()) == false)	//@@@@20230303
                {
                    sqlText += "  AND SCM.INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;

                    SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);
                    findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalEpCd);
                }

                //問合せ元拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalSecCd) == false)
                {
                    sqlText += "  AND SCM.INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;

                    SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);
                    findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalSecCd);
                }
                // -- ADD 2010/02/26 --------------------<<<

                sqlCommand.CommandText = sqlText;
                # endregion

#if DEBUG
                Console.Clear();
                Console.WriteLine(NSDebug.GetSqlCommand(sqlCommand));
#endif

                myReader = sqlCommand.ExecuteReader();

                while (myReader.Read())
                {
                    SCMAcOdrDtlAsWork asWork = CopyToSCMAcOdrDtlAsWorkFromReader(ref myReader);

                    if (retSCMAcOdrDtlAsWorkList == null)
                    {
                        retSCMAcOdrDtlAsWorkList = new ArrayList();
                    }

                    //最新の明細のみ取得
                    retSCMAcOdrDtlAsWorkList.Add(asWork);

                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if (retSCMAcOdrDtlAsWorkList != null && retSCMAcOdrDtlAsWorkList.Count != 0)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }

        // -- ADD 2011/08/10   ------ >>>>>>
        /// <summary>
        /// SCM受注セット部品データ情報を取得します。
        /// </summary>
        /// <param name="retSCMAcOdSetDtAsWorkList">SCM受注セット部品データ情報結果</param>
        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM受注セット部品データのキー値が一致する、SCM受注セット部品データ情報を取得します。</br>
        /// <br>Programmer : 高峰</br>
        /// <br>Date       : 2011/08/10</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        private int ScmReadSCMAcOdSetDtAsWorkProc(out ArrayList retSCMAcOdSetDtAsWorkList, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retSCMAcOdSetDtAsWorkList = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += " CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,SETPARTSMKRCDRF" + Environment.NewLine;
                sqlText += " ,SETPARTSNUMBERRF" + Environment.NewLine;
                sqlText += " ,SETPARTSMAINSUBNORF" + Environment.NewLine;
                sqlText += " ,GOODSDIVCDRF" + Environment.NewLine;
                sqlText += " ,RECYCLEPRTKINDCODERF" + Environment.NewLine;
                sqlText += " ,RECYCLEPRTKINDNAMERF" + Environment.NewLine;
                sqlText += " ,DELIVEREDGOODSDIVRF" + Environment.NewLine;
                sqlText += " ,HANDLEDIVCODERF" + Environment.NewLine;
                sqlText += " ,GOODSSHAPERF" + Environment.NewLine;
                sqlText += " ,DELIVRDGDSCONFCDRF" + Environment.NewLine;
                sqlText += " ,DELIGDSCMPLTDUEDATERF" + Environment.NewLine;
                sqlText += " ,ANSWERDELIVERYDATERF" + Environment.NewLine;
                sqlText += " ,BLGOODSCODERF" + Environment.NewLine;
                sqlText += " ,BLGOODSDRCODERF" + Environment.NewLine;
                sqlText += " ,INQGOODSNAMERF" + Environment.NewLine;
                sqlText += " ,ANSGOODSNAMERF" + Environment.NewLine;
                sqlText += " ,SALESORDERCOUNTRF" + Environment.NewLine;
                sqlText += " ,DELIVEREDGOODSCOUNTRF" + Environment.NewLine;
                sqlText += " ,GOODSNORF" + Environment.NewLine;
                sqlText += " ,GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += " ,GOODSMAKERNMRF" + Environment.NewLine;
                sqlText += " ,PUREGOODSMAKERCDRF" + Environment.NewLine;
                sqlText += " ,INQPUREGOODSNORF" + Environment.NewLine;
                sqlText += " ,ANSPUREGOODSNORF" + Environment.NewLine;
                sqlText += " ,LISTPRICERF" + Environment.NewLine;
                sqlText += " ,UNITPRICERF" + Environment.NewLine;
                sqlText += " ,GOODSADDINFORF" + Environment.NewLine;
                sqlText += " ,ROUGHRROFITRF" + Environment.NewLine;
                sqlText += " ,ROUGHRATERF" + Environment.NewLine;
                sqlText += " ,ANSWERLIMITDATERF" + Environment.NewLine;
                sqlText += " ,COMMENTDTLRF" + Environment.NewLine;
                sqlText += " ,SHELFNORF" + Environment.NewLine;
                sqlText += " ,PMACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,PMSALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " ,PMSALESROWNORF" + Environment.NewLine;
                sqlText += " ,PMWAREHOUSECDRF" + Environment.NewLine;
                sqlText += " ,PMWAREHOUSENAMERF" + Environment.NewLine;
                sqlText += " ,PMSHELFNORF" + Environment.NewLine;
                sqlText += " ,PMPRSNTCOUNTRF" + Environment.NewLine;
                // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                sqlText += " ,PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;
                sqlText += " ,PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;
                sqlText += " ,PMMAINMNGSHELFNORF" + Environment.NewLine;
                sqlText += " ,PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;
                // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                sqlText += " ,GOODSSPCLINSTRUCTIONRF" + Environment.NewLine;
                // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------->>>>>
                sqlText += " ,MKRSUGGESTRTPRICRF" + Environment.NewLine;
                sqlText += " ,OPENPRICEDIVRF" + Environment.NewLine;
                // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------<<<<<
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,ANSDELIDATEDIVRF" + Environment.NewLine;
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,GOODSSPECIALNTFORFACRF" + Environment.NewLine;
                sqlText += " ,GOODSSPECIALNTFORCOWRF" + Environment.NewLine;
                sqlText += " ,PRMSETDTLNAME2FORFACRF" + Environment.NewLine;
                sqlText += " ,PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                sqlText += " ,PRMSETDTLNO2RF" + Environment.NewLine;
                sqlText += " ,PRMSETDTLNAME2RF" + Environment.NewLine;
                sqlText += " ,STOCKSTATUSDIVRF" + Environment.NewLine;
                // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<

                // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,INQBLUTYPTTHCDRF" + Environment.NewLine;
                sqlText += " ,INQBLUTYPTSBCDRF" + Environment.NewLine;
                sqlText += " ,ANSBLUTYPTTHCDRF" + Environment.NewLine;
                sqlText += " ,ANSBLUTYPTSBCDRF" + Environment.NewLine;
                sqlText += " ,ANSBLGOODSCODERF" + Environment.NewLine;
                sqlText += " ,ANSBLGOODSDRCODERF" + Environment.NewLine;
                // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                sqlText += "FROM" + Environment.NewLine;
                sqlText += "  SCMACODSETDTRF WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += "WHERE" + Environment.NewLine;
                //企業コード
                sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;

                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.EnterpriseCode);

                if (string.IsNullOrEmpty(paraSCMReadWork.SalesSlipNum) == false)
                {
                    //売上伝票番号
                    sqlText += "  AND PMACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                    sqlText += "  AND PMSALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;

                    SqlParameter findAcptAnOdrStatus = sqlCommand.Parameters.Add("@FINDACPTANODRSTATUS", SqlDbType.Int);
                    findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(paraSCMReadWork.AcptAnOdrStatus);

                    SqlParameter findSalesSlipNum = sqlCommand.Parameters.Add("@FINDSALESSLIPNUM", SqlDbType.NChar);
                    findSalesSlipNum.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.SalesSlipNum);

                }
                else
                {
                    //問合せ番号
                    sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;

                    SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);
                    findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(paraSCMReadWork.InquiryNumber);

                }

                //問い合わせ先拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOtherSecCd) == false)
                {
                    sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;

                    SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);
                    findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOtherSecCd);
                }

                //問合せ元企業コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalEpCd.Trim()) == false)	//@@@@20230303
                {
                    sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;

                    SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);
                    findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalEpCd);
                }

                //問合せ元拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalSecCd) == false)
                {
                    sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;

                    SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);
                    findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalSecCd);
                }

                sqlCommand.CommandText = sqlText;
                # endregion

                myReader = sqlCommand.ExecuteReader();

                while (myReader.Read())
                {
                    SCMAcOdSetDtWork asWork = CopyToSCMAcOdSetDtAsWorkFromReader(ref myReader);

                    if (retSCMAcOdSetDtAsWorkList == null)
                    {
                        retSCMAcOdSetDtAsWorkList = new ArrayList();
                    }

                    //最新の明細のみ取得
                    retSCMAcOdSetDtAsWorkList.Add(asWork);

                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if (retSCMAcOdSetDtAsWorkList != null && retSCMAcOdSetDtAsWorkList.Count != 0)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }
        // -- ADD 2011/08/10   ------ <<<<<<
        # endregion

        # region [ScmSearch]
        /// <summary>
        /// SCM関連データ情報のリストを取得します。
        /// </summary>
        /// <param name="retScmCsObj">検索結果</param>
        /// <param name="paraSCMReadObj">抽出条件パラメータワーク</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM関連データのキー値が一致する、全てのSCM関連データ情報を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        public int ScmSearch(ref object retScmCsObj, object paraSCMReadObj)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlConnection sqlConnection = null;

            try
            {
                CustomSerializeArrayList retScmCsList = retScmCsObj as CustomSerializeArrayList;
                IOWriteSCMReadWork paraSCMReadWork = paraSCMReadObj as IOWriteSCMReadWork;

                // コネクション生成
                sqlConnection = this.CreateSqlConnection(true);

                status = this.ScmSearch(ref retScmCsList, paraSCMReadWork, ref sqlConnection);
            }
            catch (Exception ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                base.WriteErrorLog(ex, errmsg, status);
            }
            finally
            {
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }

            return status;
        }

        // -- UPD 2010/02/26 ----------------------------------------->>>
#region [削除]
//        /// <summary>
//        /// SCM関連データ情報のリストを取得します。
//        /// </summary>
//        /// <param name="retList">SCM関連データ情報を格納する CustomSerializeArrayList</param>
//        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
//        /// <param name="sqlConnection">データベース接続情報</param>
//        /// <returns>STATUS</returns>
//        /// <br>Note       : SCM関連データのキー値が一致する、全てのSCM関連データ情報が格納されている CustomSerializeArrayList を取得します。</br>
//        /// <br>Programmer : 22008 長内 数馬</br>
//        /// <br>Date       : 2009.05.13</br>
//        public int ScmSearch(ref CustomSerializeArrayList retList, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
//        {
//            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

//            if (retList == null)
//            {
//                retList = new CustomSerializeArrayList();
//            }

//            ArrayList retSCMAcOdrDataWorkList = null;    //ＳＣＭ受注データ結果
//            SCMAcOdrDtCarWork retSCMAcOdrDtCarWork = null;  //ＳＣＭ受注データ（車両情報）結果
//            ArrayList retSCMAcOdrDtlIqWorkList = null;      //ＳＣＭ受注明細データ（問合せ・発注）結果リスト
//            ArrayList retSCMAcOdrDtlAsWorkList = null;      //ＳＣＭ受注明細データ（回答）結果リスト

//            //ＳＣＭ受注データ抽出処理
//            status = ScmSearchSCMAcOdrDataWorkProc(out retSCMAcOdrDataWorkList, paraSCMReadWork, ref sqlConnection);

//            //受注データの件数分ループして、他関連データを取得
//            foreach (SCMAcOdrDataWork retSCMAcOdrDataWork in retSCMAcOdrDataWorkList)
//            {
//                CustomSerializeArrayList retScmCsList = new CustomSerializeArrayList();

//                retScmCsList.Add(retSCMAcOdrDataWork);

//                paraSCMReadWork.InquiryNumber = 0; //念のため問合せ番号をクリア
//                paraSCMReadWork.AcptAnOdrStatus = retSCMAcOdrDataWork.AcptAnOdrStatus; //受注データの受注ステータス
//                paraSCMReadWork.SalesSlipNum = retSCMAcOdrDataWork.SalesSlipNum; //受注データの売上伝票番号

//                //受注データの問合せ番号より受注データ(車両情報)を取得
//                status = ScmReadSCMAcOdrDtCarWorkProc(out retSCMAcOdrDtCarWork, paraSCMReadWork, ref sqlConnection);

//                if (retSCMAcOdrDtCarWork != null)
//                {
//                    retScmCsList.Add(retSCMAcOdrDtCarWork);
//                }

//                //ＳＣＭ受注明細データ(問合せ・発注)抽出処理
//                //※問合せ・発注データは不要

//                //status = ScmReadSCMAcOdrDtlIqWorkProc(out retSCMAcOdrDtlIqWorkList, paraSCMReadWork, ref sqlConnection);

//                //if (retSCMAcOdrDtlIqWorkList != null && retSCMAcOdrDtlIqWorkList.Count != 0)
//                //{
//                //    retScmCsList.Add(retSCMAcOdrDtlIqWorkList);
//                //}

//                //ＳＣＭ受注明細データ(回答)抽出処理
//                status = ScmReadSCMAcOdrDtlAsWorkProc(out retSCMAcOdrDtlAsWorkList, paraSCMReadWork, ref sqlConnection);

//                if (retSCMAcOdrDtlAsWorkList != null && retSCMAcOdrDtlAsWorkList.Count != 0)
//                {
//                    retScmCsList.Add(retSCMAcOdrDtlAsWorkList);
//                }

//                if ((status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND) &&
//                    (retSCMAcOdrDataWork != null || retSCMAcOdrDtCarWork != null || retSCMAcOdrDtlIqWorkList != null || retSCMAcOdrDtlAsWorkList != null)
//                    )
//                {
//                    //該当無しステータスで対象マスタのどれか１件でも存在した場合はステータスを正常とする。
//                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
//                }

//                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
//                {
//                    retList.Add(retScmCsList);
//                }
//            }

//            if (retList.Count != 0)
//            {
//                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
//            }
//            else
//            {
//                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
//            }

//            return status;
//        }

//        /// <summary>
//        /// SCM受注データ情報を取得します。
//        /// </summary>
//        /// <param name="retSCMAcOdrDataWorkList">SCM受注データ情報結果</param>
//        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
//        /// <param name="sqlConnection">データベース接続情報</param>
//        /// <returns>STATUS</returns>
//        /// <br>Note       : SCM受注データのキー値が一致する、SCM受注データ情報を取得します。</br>
//        /// <br>Programmer : 22008 長内 数馬</br>
//        /// <br>Date       : 2009.05.13</br>
//        private int ScmSearchSCMAcOdrDataWorkProc(out ArrayList retSCMAcOdrDataWorkList, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
//        {
//            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

//            SqlDataReader myReader = null;
//            SqlCommand sqlCommand = null;

//            retSCMAcOdrDataWorkList = null;

//            try
//            {
//                string sqlText = string.Empty;
//                sqlCommand = new SqlCommand(sqlText, sqlConnection);

//                # region [SELECT文]
//                sqlText += "SELECT" + Environment.NewLine; 
//                sqlText += "  SCM.CREATEDATETIMERF" + Environment.NewLine;
//                sqlText += " ,SCM.UPDATEDATETIMERF" + Environment.NewLine;
//                sqlText += " ,SCM.ENTERPRISECODERF" + Environment.NewLine;
//                sqlText += " ,SCM.FILEHEADERGUIDRF" + Environment.NewLine;
//                sqlText += " ,SCM.UPDEMPLOYEECODERF" + Environment.NewLine;
//                sqlText += " ,SCM.UPDASSEMBLYID1RF" + Environment.NewLine;
//                sqlText += " ,SCM.UPDASSEMBLYID2RF" + Environment.NewLine;
//                sqlText += " ,SCM.LOGICALDELETECODERF" + Environment.NewLine;
//                sqlText += " ,SCM.INQORIGINALEPCDRF" + Environment.NewLine;
//                sqlText += " ,SCM.INQORIGINALSECCDRF" + Environment.NewLine;
//                sqlText += " ,SCM.INQOTHEREPCDRF" + Environment.NewLine;
//                sqlText += " ,SCM.INQOTHERSECCDRF" + Environment.NewLine;
//                sqlText += " ,SCM.INQUIRYNUMBERRF" + Environment.NewLine;
//                sqlText += " ,SCM.CUSTOMERCODERF" + Environment.NewLine;
//                sqlText += " ,SCM.UPDATEDATERF" + Environment.NewLine;
//                sqlText += " ,SCM.UPDATETIMERF" + Environment.NewLine;
//                sqlText += " ,SCM.ANSWERDIVCDRF" + Environment.NewLine;
//                sqlText += " ,SCM.JUDGEMENTDATERF" + Environment.NewLine;
//                sqlText += " ,SCM.INQORDNOTERF" + Environment.NewLine;
//                sqlText += " ,SCM.APPENDINGFILERF" + Environment.NewLine;
//                sqlText += " ,SCM.APPENDINGFILENMRF" + Environment.NewLine;
//                sqlText += " ,SCM.INQEMPLOYEECDRF" + Environment.NewLine;
//                sqlText += " ,SCM.INQEMPLOYEENMRF" + Environment.NewLine;
//                sqlText += " ,SCM.ANSEMPLOYEECDRF" + Environment.NewLine;
//                sqlText += " ,SCM.ANSEMPLOYEENMRF" + Environment.NewLine;
//                sqlText += " ,SCM.INQUIRYDATERF" + Environment.NewLine;
//                sqlText += " ,SCM.ACPTANODRSTATUSRF" + Environment.NewLine;
//                sqlText += " ,SCM.SALESSLIPNUMRF" + Environment.NewLine;
//                sqlText += " ,SCM.SALESTOTALTAXINCRF" + Environment.NewLine;
//                sqlText += " ,SCM.SALESSUBTOTALTAXRF" + Environment.NewLine;
//                sqlText += " ,SCM.INQORDDIVCDRF" + Environment.NewLine;
//                sqlText += " ,SCM.INQORDANSDIVCDRF" + Environment.NewLine;
//                sqlText += " ,SCM.RECEIVEDATETIMERF" + Environment.NewLine;
//                sqlText += " ,SCM.ANSWERCREATEDIVRF" + Environment.NewLine;
//                sqlText += "FROM" + Environment.NewLine;
//                sqlText += "  SCMACODRDATARF AS SCM" + Environment.NewLine;
//                sqlText += "    INNER JOIN   " + Environment.NewLine;
//                sqlText += "    (   " + Environment.NewLine;
//                sqlText += "  	  SELECT    " + Environment.NewLine;
//                sqlText += "  	   MAX(UPDATETIMERF) AS UPDATETIMERF   " + Environment.NewLine;
//                sqlText += "  	  ,MAX(UPDATEDATERF) AS UPDATEDATERF   " + Environment.NewLine;
//                sqlText += "  	  ,ENTERPRISECODERF   " + Environment.NewLine;
//                sqlText += "  	  ,INQORIGINALEPCDRF   " + Environment.NewLine;
//                sqlText += "  	  ,INQORIGINALSECCDRF   " + Environment.NewLine;
//                sqlText += "  	  ,INQOTHEREPCDRF   " + Environment.NewLine;
//                sqlText += "  	  ,INQOTHERSECCDRF    " + Environment.NewLine;
//                sqlText += "  	  ,INQUIRYNUMBERRF  " + Environment.NewLine;
//                sqlText += "  	  ,ACPTANODRSTATUSRF	   " + Environment.NewLine;
//                sqlText += "  	  ,SALESSLIPNUMRF  " + Environment.NewLine;
//                sqlText += "  	  FROM SCMACODRDATARF    " + Environment.NewLine;
//                // -- ADD 2010/02/26 -------------------->>>
//                //問合せ・発注種別
//                if (paraSCMReadWork.InqOrdDivCd != 0)
//                {
//                    sqlText += "  	 WHERE INQORDDIVCDRF = @FINDINQORDDIVCD    " + Environment.NewLine;

//                    SqlParameter findInqOrdDivCd = sqlCommand.Parameters.Add("@FINDINQORDDIVCD", SqlDbType.Int);
//                    findInqOrdDivCd.Value = SqlDataMediator.SqlSetInt32(paraSCMReadWork.InqOrdDivCd);
//                }
//                // -- ADD 2010/02/26 --------------------<<<
//                sqlText += "  	  GROUP BY    " + Environment.NewLine;
//                sqlText += "  	   ENTERPRISECODERF   " + Environment.NewLine;
//                sqlText += "  	  ,INQORIGINALEPCDRF   " + Environment.NewLine;
//                sqlText += "  	  ,INQORIGINALSECCDRF   " + Environment.NewLine;
//                sqlText += "  	  ,INQOTHEREPCDRF   " + Environment.NewLine;
//                sqlText += "  	  ,INQOTHERSECCDRF    " + Environment.NewLine;
//                sqlText += "  	  ,INQUIRYNUMBERRF  " + Environment.NewLine;
//                sqlText += "  	  ,ACPTANODRSTATUSRF	   " + Environment.NewLine;
//                sqlText += "  	  ,SALESSLIPNUMRF  " + Environment.NewLine;
//                sqlText += "    ) AS SCM2   " + Environment.NewLine;
//                sqlText += "    ON   " + Environment.NewLine;
//                sqlText += "        SCM2.ENTERPRISECODERF = SCM.ENTERPRISECODERF   " + Environment.NewLine;
//                sqlText += "    AND SCM2.INQORIGINALEPCDRF = SCM.INQORIGINALEPCDRF   " + Environment.NewLine;
//                sqlText += "    AND SCM2.INQORIGINALSECCDRF = SCM.INQORIGINALSECCDRF   " + Environment.NewLine;
//                sqlText += "    AND SCM2.INQOTHEREPCDRF = SCM.INQOTHEREPCDRF   " + Environment.NewLine;
//                sqlText += "    AND SCM2.INQOTHERSECCDRF = SCM.INQOTHERSECCDRF   " + Environment.NewLine;
//                sqlText += "    AND SCM2.INQUIRYNUMBERRF = SCM.INQUIRYNUMBERRF   " + Environment.NewLine;
//                sqlText += "    AND SCM2.UPDATEDATERF = SCM.UPDATEDATERF   " + Environment.NewLine;
//                sqlText += "    AND SCM2.UPDATETIMERF = SCM.UPDATETIMERF   " + Environment.NewLine;
//                sqlText += "    AND SCM2.ACPTANODRSTATUSRF = SCM.ACPTANODRSTATUSRF " + Environment.NewLine;
//                sqlText += "    AND SCM2.SALESSLIPNUMRF = SCM.SALESSLIPNUMRF  " + Environment.NewLine;
//                sqlText += "WHERE" + Environment.NewLine;
//                sqlText += "  SCM.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
//                //企業コード
//                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
//                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.EnterpriseCode);

//                //問い合わせ先拠点コード
//                if (string.IsNullOrEmpty(paraSCMReadWork.InqOtherSecCd) == false)
//                {
//                    sqlText += "  AND SCM.INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;

//                    SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);
//                    findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOtherSecCd);
//                }

//                //回答区分   ※配列で複数指定される
//                if (paraSCMReadWork.AnswerDivCds != null)
//                {
//                    string answerDivstr = "";
//                    foreach (Int32 divstr in paraSCMReadWork.AnswerDivCds)
//                    {
//                        if (answerDivstr != "")
//                        {
//                            answerDivstr += ",";
//                        }
//                        answerDivstr += divstr.ToString();
//                    }

//                    if (answerDivstr != "")
//                    {
//                        sqlText += " AND SCM.ANSWERDIVCDRF IN (" + answerDivstr + ") " + Environment.NewLine;
//                    }
//                }

//                // -- ADD 2010/02/26 -------------------->>>
//                //問合せ元企業コード
//                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalEpCd) == false)
//                {
//                    sqlText += "  AND SCM.INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;

//                    SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);
//                    findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalEpCd);
//                }

//                //問合せ元拠点コード
//                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalSecCd) == false)
//                {
//                    sqlText += "  AND SCM.INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;

//                    SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);
//                    findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalSecCd);
//                }
//                // -- ADD 2010/02/26 --------------------<<<

//                sqlCommand.CommandText = sqlText;
//                # endregion

//#if DEBUG
//                Console.Clear();
//                Console.WriteLine(NSDebug.GetSqlCommand(sqlCommand));
//#endif

//                myReader = sqlCommand.ExecuteReader();

//                while (myReader.Read())
//                {
//                    SCMAcOdrDataWork dtWork = CopyToSCMAcOdrDataWorkFromReader(ref myReader);

//                    if (retSCMAcOdrDataWorkList == null)
//                    {
//                        retSCMAcOdrDataWorkList = new ArrayList();
//                    }

//                    //最新のレコードのみ取得
//                    retSCMAcOdrDataWorkList.Add(dtWork);
//                }

//                if (!myReader.IsClosed)
//                {
//                    myReader.Close();
//                }

//                if (retSCMAcOdrDataWorkList != null && retSCMAcOdrDataWorkList.Count != 0)
//                {
//                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
//                }
//                else
//                {
//                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
//                }
//            }
//            catch (SqlException ex)
//            {
//                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
//                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
//            }
//            finally
//            {
//                if (myReader != null)
//                {
//                    if (!myReader.IsClosed)
//                    {
//                        myReader.Close();
//                    }

//                    myReader.Dispose();
//                }

//                if (sqlCommand != null)
//                {
//                    sqlCommand.Cancel();
//                    sqlCommand.Dispose();
//                }
//            }

//            return status;
//        }
#endregion

        /// <summary>
        /// SCM関連データ情報のリストを取得します。
        /// </summary>
        /// <param name="retList">SCM関連データ情報を格納する CustomSerializeArrayList</param>
        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM関連データのキー値が一致する、全てのSCM関連データ情報が格納されている CustomSerializeArrayList を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        public int ScmSearch(ref CustomSerializeArrayList retList, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            //ＳＣＭ受注データ抽出処理
            status = ScmSearchSCMAcOdrDataWorkProc(ref retList, paraSCMReadWork, ref sqlConnection);

            return status;
        }

        /// <summary>
        /// SCM受注データ情報を取得します。
        /// </summary>
        /// <param name="retSCMAcOdrDataWorkList">SCM受注データ情報結果</param>
        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM受注データのキー値が一致する、SCM受注データ情報を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        private int ScmSearchSCMAcOdrDataWorkProc(ref CustomSerializeArrayList retSCMAcOdrDataWorkList, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  SCM.CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCM.UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCM.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,SCM.FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,SCM.UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,SCM.UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,SCM.UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,SCM.LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,SCM.INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,SCM.CUSTOMERCODERF" + Environment.NewLine;
                sqlText += " ,SCM.UPDATEDATERF" + Environment.NewLine;
                sqlText += " ,SCM.UPDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCM.ANSWERDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCM.JUDGEMENTDATERF" + Environment.NewLine;
                sqlText += " ,SCM.INQORDNOTERF" + Environment.NewLine;
                sqlText += " ,SCM.APPENDINGFILERF" + Environment.NewLine;
                sqlText += " ,SCM.APPENDINGFILENMRF" + Environment.NewLine;
                sqlText += " ,SCM.INQEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,SCM.ANSEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,SCM.ANSEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,SCM.INQUIRYDATERF" + Environment.NewLine;
                sqlText += " ,SCM.ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SCM.SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " ,SCM.SALESTOTALTAXINCRF" + Environment.NewLine;
                sqlText += " ,SCM.SALESSUBTOTALTAXRF" + Environment.NewLine;
                sqlText += " ,SCM.INQORDDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCM.INQORDANSDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCM.RECEIVEDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCM.ANSWERCREATEDIVRF" + Environment.NewLine;
                // 2010/05/26 Add >>>
                sqlText += " ,SCM.CANCELDIVRF" + Environment.NewLine;
                sqlText += " ,SCM.CMTCOOPRTDIVRF" + Environment.NewLine;
                // 2010/05/26 Add <<<
                sqlText += " ,SCM.SFPMCPRTINSTSLIPNORF" + Environment.NewLine;  //ADD 2011/05/20
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCM.TABUSEDIVRF" + Environment.NewLine;
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                sqlText += " ,SCM.CARMNGCODERF" + Environment.NewLine;
                // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sqlText += " ,SCM.AUTOANSMTHDRF" + Environment.NewLine;
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                sqlText += " ,SCMCAR.CREATEDATETIMERF AS CREATEDATETIMERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.UPDATEDATETIMERF AS UPDATEDATETIMERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.ENTERPRISECODERF AS ENTERPRISECODERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.FILEHEADERGUIDRF AS FILEHEADERGUIDRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.UPDEMPLOYEECODERF AS UPDEMPLOYEECODERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.UPDASSEMBLYID1RF AS UPDASSEMBLYID1RF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.UPDASSEMBLYID2RF AS UPDASSEMBLYID2RF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.LOGICALDELETECODERF AS LOGICALDELETECODERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.INQORIGINALEPCDRF AS INQORIGINALEPCDRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.INQORIGINALSECCDRF AS INQORIGINALSECCDRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.INQUIRYNUMBERRF AS INQUIRYNUMBERRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.NUMBERPLATE1CODERF AS NUMBERPLATE1CODERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.NUMBERPLATE1NAMERF AS NUMBERPLATE1NAMERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.NUMBERPLATE2RF AS NUMBERPLATE2RF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.NUMBERPLATE3RF AS NUMBERPLATE3RF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.NUMBERPLATE4RF AS NUMBERPLATE4RF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.MODELDESIGNATIONNORF AS MODELDESIGNATIONNORF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.CATEGORYNORF AS CATEGORYNORF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.MAKERCODERF AS MAKERCODERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.MODELCODERF AS MODELCODERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.MODELSUBCODERF AS MODELSUBCODERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.MODELNAMERF AS MODELNAMERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.CARINSPECTCERTMODELRF AS CARINSPECTCERTMODELRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.FULLMODELRF AS FULLMODELRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.FRAMENORF AS FRAMENORF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.FRAMEMODELRF AS FRAMEMODELRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.CHASSISNORF AS CHASSISNORF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.CARPROPERNORF AS CARPROPERNORF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.PRODUCETYPEOFYEARNUMRF AS PRODUCETYPEOFYEARNUMRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.COMMENTRF AS COMMENTRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.RPCOLORCODERF AS RPCOLORCODERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.COLORNAME1RF AS COLORNAME1RF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.TRIMCODERF AS TRIMCODERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.TRIMNAMERF AS TRIMNAMERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.MILEAGERF AS MILEAGERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.EQUIPOBJRF AS EQUIPOBJRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.ACPTANODRSTATUSRF AS ACPTANODRSTATUSRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.SALESSLIPNUMRF AS SALESSLIPNUMRF_CAR" + Environment.NewLine;
                // -- ADD 2011/08/10   ------ >>>>>>
                sqlText += " ,SCMCAR.MAKERNAMERF AS MAKERNAMERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.GRADENAMERF AS GRADENAMERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.BODYNAMERF AS BODYNAMERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.DOORCOUNTRF AS DOORCOUNTRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.ENGINEMODELNMRF AS ENGINEMODELNMRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.CMNNMENGINEDISPLACERF AS CMNNMENGINEDISPLACERF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.ENGINEMODELRF AS ENGINEMODELRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.NUMBEROFGEARRF AS NUMBEROFGEARRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.GEARNMRF AS GEARNMRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.EDIVNMRF AS EDIVNMRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.TRANSMISSIONNMRF AS TRANSMISSIONNMRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.SHIFTNMRF AS SHIFTNMRF_CAR" + Environment.NewLine;
                // -- ADD 2011/08/10   ------ <<<<<<
                // ADD 2012/05/31 ------------->>>>>
                sqlText += " ,SCMCAR.FIRSTENTRYDATENUMTYPRF AS FIRSTENTRYDATENUMTYPRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.CARADDINFRF AS CARADDINFRF_CAR" + Environment.NewLine;
                sqlText += " ,SCMCAR.EQUIPPRTSOBJRF AS EQUIPPRTSOBJRF_CAR" + Environment.NewLine;
                // ADD 2012/05/31 -------------<<<<<
                // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCMCAR.CARMNGCODERF AS CARMNGCODERF_CAR" + Environment.NewLine;
                // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                sqlText += " ,SCMCAR.EXPECTEDCEDATERF AS EXPECTEDCEDATERF_CAR" + Environment.NewLine;
                // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<
                sqlText += " ,SCMANS.CREATEDATETIMERF AS CREATEDATETIMERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.UPDATEDATETIMERF AS UPDATEDATETIMERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.ENTERPRISECODERF AS ENTERPRISECODERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.FILEHEADERGUIDRF AS FILEHEADERGUIDRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.UPDEMPLOYEECODERF AS UPDEMPLOYEECODERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.UPDASSEMBLYID1RF AS UPDASSEMBLYID1RF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.UPDASSEMBLYID2RF AS UPDASSEMBLYID2RF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.LOGICALDELETECODERF AS LOGICALDELETECODERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.INQORIGINALEPCDRF AS INQORIGINALEPCDRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.INQORIGINALSECCDRF AS INQORIGINALSECCDRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.INQOTHEREPCDRF AS INQOTHEREPCDRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.INQOTHERSECCDRF AS INQOTHERSECCDRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.INQUIRYNUMBERRF AS INQUIRYNUMBERRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.UPDATEDATERF AS UPDATEDATERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.UPDATETIMERF AS UPDATETIMERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.INQROWNUMBERRF AS INQROWNUMBERRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.INQROWNUMDERIVEDNORF AS INQROWNUMDERIVEDNORF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.INQORGDTLDISCGUIDRF AS INQORGDTLDISCGUIDRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.INQOTHDTLDISCGUIDRF AS INQOTHDTLDISCGUIDRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.GOODSDIVCDRF AS GOODSDIVCDRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.RECYCLEPRTKINDCODERF AS RECYCLEPRTKINDCODERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.RECYCLEPRTKINDNAMERF AS RECYCLEPRTKINDNAMERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.DELIVEREDGOODSDIVRF AS DELIVEREDGOODSDIVRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.HANDLEDIVCODERF AS HANDLEDIVCODERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.GOODSSHAPERF AS GOODSSHAPERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.DELIVRDGDSCONFCDRF AS DELIVRDGDSCONFCDRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.DELIGDSCMPLTDUEDATERF AS DELIGDSCMPLTDUEDATERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.ANSWERDELIVERYDATERF AS ANSWERDELIVERYDATERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.BLGOODSCODERF AS BLGOODSCODERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.BLGOODSDRCODERF AS BLGOODSDRCODERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.INQGOODSNAMERF AS INQGOODSNAMERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.ANSGOODSNAMERF AS ANSGOODSNAMERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.SALESORDERCOUNTRF AS SALESORDERCOUNTRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.DELIVEREDGOODSCOUNTRF AS DELIVEREDGOODSCOUNTRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.GOODSNORF AS GOODSNORF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.GOODSMAKERCDRF AS GOODSMAKERCDRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.GOODSMAKERNMRF AS GOODSMAKERNMRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.PUREGOODSMAKERCDRF AS PUREGOODSMAKERCDRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.INQPUREGOODSNORF AS INQPUREGOODSNORF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.ANSPUREGOODSNORF AS ANSPUREGOODSNORF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.LISTPRICERF AS LISTPRICERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.UNITPRICERF AS UNITPRICERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.GOODSADDINFORF AS GOODSADDINFORF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.ROUGHRROFITRF AS ROUGHRROFITRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.ROUGHRATERF AS ROUGHRATERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.ANSWERLIMITDATERF AS ANSWERLIMITDATERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.COMMENTDTLRF AS COMMENTDTLRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.APPENDINGFILEDTLRF AS APPENDINGFILEDTLRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.APPENDINGFILENMDTLRF AS APPENDINGFILENMDTLRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.SHELFNORF AS SHELFNORF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.ADDITIONALDIVCDRF AS ADDITIONALDIVCDRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.CORRECTDIVCDRF AS CORRECTDIVCDRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.ACPTANODRSTATUSRF AS ACPTANODRSTATUSRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.SALESSLIPNUMRF AS SALESSLIPNUMRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.SALESROWNORF AS SALESROWNORF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.CAMPAIGNCODERF AS CAMPAIGNCODERF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.STOCKDIVRF AS STOCKDIVRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.INQORDDIVCDRF AS INQORDDIVCDRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.DISPLAYORDERRF AS DISPLAYORDERRF_ANS" + Environment.NewLine;
                sqlText += " ,SCMANS.GOODSMNGNORF AS GOODSMNGNORF_ANS" + Environment.NewLine;
                // 2010/05/26 Add >>>
                sqlText += " ,SCMANS.CANCELCNDTINDIVRF AS CANCELCNDTINDIVRF_ANS" + Environment.NewLine;
                // 2010/05/26 Add <<<
                // 2011/02/09 Add >>>
                sqlText += " ,SCMANS.DTLTAKEINDIVCDRF AS DTLTAKEINDIVCDRF_ANS" + Environment.NewLine;
                // 2011/02/09 Add <<<
                // -- ADD 2012/04/12   ------ >>>>>> 
                sqlText += " ,SCMANS.PSMNGNORF" + Environment.NewLine;  //PS管理番号
                // -- ADD 2012/04/12   ------ <<<<<<
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCMANS.SALESTOTALTAXINCRF" + Environment.NewLine;  //　売上伝票合計（税込）
                sqlText += " ,SCMANS.SALESTOTALTAXEXCRF" + Environment.NewLine;  // 売上伝票合計（税抜）
                sqlText += " ,SCMANS.SCMCONSTAXLAYMETHODRF" + Environment.NewLine;  // SCM消費税転嫁方式
                sqlText += " ,SCMANS.CONSTAXRATERF" + Environment.NewLine;  // 消費税税率
                sqlText += " ,SCMANS.SCMFRACTIONPROCCDRF" + Environment.NewLine;  // SCM端数処理区分
                sqlText += " ,SCMANS.ACCRECCONSTAXRF" + Environment.NewLine;  // 売掛消費税
                sqlText += " ,SCMANS.PMSALESDATERF" + Environment.NewLine;  // PM売上日
                sqlText += " ,SCMANS.SUPPSLPPRTTIMERF" + Environment.NewLine;  // 仕入先伝票発行時刻
                sqlText += " ,SCMANS.SALESMONEYTAXINCRF" + Environment.NewLine;  // 売上金額（税込み）
                sqlText += " ,SCMANS.SALESMONEYTAXEXCRF" + Environment.NewLine;  // 売上金額（税抜き）
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCMANS.DATAINPUTSYSTEMRF" + Environment.NewLine;  // データ入力システム
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                sqlText += "FROM" + Environment.NewLine;
                // -- UPD 2010/04/15 ------------------------------>>>
                //sqlText += "  SCMACODRDATARF AS SCM" + Environment.NewLine;
                sqlText += "  SCMACODRDATARF AS SCM WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2010/04/15 ------------------------------<<<
                sqlText += "    INNER JOIN   " + Environment.NewLine;
                sqlText += "    (   " + Environment.NewLine;
                sqlText += "  	  SELECT    " + Environment.NewLine;
                // -- UPD 2010/06/17 ------------------------------------->>>
                //sqlText += "  	   MAX(cast(UPDATEDATERF as nvarchar) + cast(UPDATETIMERF as nvarchar)) AS UPDATEDATETIMERF   " + Environment.NewLine;
                sqlText += "       MAX(cast(UPDATEDATERF as nvarchar) + RIGHT('000000000' + cast(UPDATETIMERF as nvarchar),9)) AS UPDATEDATETIMERF   " + Environment.NewLine;
                // -- UPD 2010/06/17 -------------------------------------<<<
                sqlText += "  	  ,ENTERPRISECODERF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALEPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALSECCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHEREPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHERSECCDRF    " + Environment.NewLine;
                sqlText += "  	  ,INQUIRYNUMBERRF  " + Environment.NewLine;
                sqlText += "  	  ,ACPTANODRSTATUSRF	   " + Environment.NewLine;
                sqlText += "  	  ,SALESSLIPNUMRF  " + Environment.NewLine;
                // -- UPD 2010/04/15 ------------------------------------>>>
                //sqlText += "  	  FROM SCMACODRDATARF    " + Environment.NewLine;
                sqlText += "  	  FROM SCMACODRDATARF WITH (READUNCOMMITTED)   " + Environment.NewLine;
                // -- UPD 2010/04/15 ------------------------------------<<<
                sqlText += "      WHERE" + Environment.NewLine;
                sqlText += "        ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                //問合せ・発注種別
                if (paraSCMReadWork.InqOrdDivCd != 0)
                {
                    sqlText += "     AND INQORDDIVCDRF = @FINDINQORDDIVCD    " + Environment.NewLine;

                    SqlParameter findInqOrdDivCd = sqlCommand.Parameters.Add("@FINDINQORDDIVCD", SqlDbType.Int);
                    findInqOrdDivCd.Value = SqlDataMediator.SqlSetInt32(paraSCMReadWork.InqOrdDivCd);
                }

                //問発・回答種別
                if (paraSCMReadWork.InqOrdAnsDivCd != 0)
                {
                    sqlText += "     AND INQORDANSDIVCDRF = @FINDINQORDANSDIVCD    " + Environment.NewLine;

                    SqlParameter findInqOrdAnsDivCd = sqlCommand.Parameters.Add("@FINDINQORDANSDIVCD", SqlDbType.Int);
                    findInqOrdAnsDivCd.Value = SqlDataMediator.SqlSetInt32(paraSCMReadWork.InqOrdAnsDivCd);
                }
                sqlText += "  	  GROUP BY    " + Environment.NewLine;
                sqlText += "  	   ENTERPRISECODERF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALEPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALSECCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHEREPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHERSECCDRF    " + Environment.NewLine;
                sqlText += "  	  ,INQUIRYNUMBERRF  " + Environment.NewLine;
                sqlText += "  	  ,ACPTANODRSTATUSRF	   " + Environment.NewLine;
                sqlText += "  	  ,SALESSLIPNUMRF  " + Environment.NewLine;
                sqlText += "    ) AS SCM2   " + Environment.NewLine;
                sqlText += "    ON   " + Environment.NewLine;
                sqlText += "        SCM2.ENTERPRISECODERF = SCM.ENTERPRISECODERF   " + Environment.NewLine;
                sqlText += "    AND SCM2.INQORIGINALEPCDRF = SCM.INQORIGINALEPCDRF   " + Environment.NewLine;
                sqlText += "    AND SCM2.INQORIGINALSECCDRF = SCM.INQORIGINALSECCDRF   " + Environment.NewLine;
                sqlText += "    AND SCM2.INQOTHEREPCDRF = SCM.INQOTHEREPCDRF   " + Environment.NewLine;
                sqlText += "    AND SCM2.INQOTHERSECCDRF = SCM.INQOTHERSECCDRF   " + Environment.NewLine;
                sqlText += "    AND SCM2.INQUIRYNUMBERRF = SCM.INQUIRYNUMBERRF   " + Environment.NewLine;
                // - UPD 2010/06/17 ----------------------------------------->>>
                //sqlText += "    AND SCM2.UPDATEDATETIMERF = (cast(SCM.UPDATEDATERF as nvarchar) + cast(SCM.UPDATETIMERF as nvarchar))   " + Environment.NewLine;
                sqlText += "    AND SCM2.UPDATEDATETIMERF = (cast(SCM.UPDATEDATERF as nvarchar) + RIGHT('000000000' + cast(SCM.UPDATETIMERF as nvarchar),9))   " + Environment.NewLine;
                // - UPD 2010/06/17 -----------------------------------------<<<
                sqlText += "    AND SCM2.ACPTANODRSTATUSRF = SCM.ACPTANODRSTATUSRF " + Environment.NewLine;
                sqlText += "    AND SCM2.SALESSLIPNUMRF = SCM.SALESSLIPNUMRF  " + Environment.NewLine;

                # region [SCM車両データ]
                sqlText += "LEFT JOIN (" + Environment.NewLine;
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,NUMBERPLATE1CODERF" + Environment.NewLine;
                sqlText += " ,NUMBERPLATE1NAMERF" + Environment.NewLine;
                sqlText += " ,NUMBERPLATE2RF" + Environment.NewLine;
                sqlText += " ,NUMBERPLATE3RF" + Environment.NewLine;
                sqlText += " ,NUMBERPLATE4RF" + Environment.NewLine;
                sqlText += " ,MODELDESIGNATIONNORF" + Environment.NewLine;
                sqlText += " ,CATEGORYNORF" + Environment.NewLine;
                sqlText += " ,MAKERCODERF" + Environment.NewLine;
                sqlText += " ,MODELCODERF" + Environment.NewLine;
                sqlText += " ,MODELSUBCODERF" + Environment.NewLine;
                sqlText += " ,MODELNAMERF" + Environment.NewLine;
                sqlText += " ,CARINSPECTCERTMODELRF" + Environment.NewLine;
                sqlText += " ,FULLMODELRF" + Environment.NewLine;
                sqlText += " ,FRAMENORF" + Environment.NewLine;
                sqlText += " ,FRAMEMODELRF" + Environment.NewLine;
                sqlText += " ,CHASSISNORF" + Environment.NewLine;
                sqlText += " ,CARPROPERNORF" + Environment.NewLine;
                sqlText += " ,PRODUCETYPEOFYEARNUMRF" + Environment.NewLine;
                sqlText += " ,COMMENTRF" + Environment.NewLine;
                sqlText += " ,RPCOLORCODERF" + Environment.NewLine;
                sqlText += " ,COLORNAME1RF" + Environment.NewLine;
                sqlText += " ,TRIMCODERF" + Environment.NewLine;
                sqlText += " ,TRIMNAMERF" + Environment.NewLine;
                sqlText += " ,MILEAGERF" + Environment.NewLine;
                sqlText += " ,EQUIPOBJRF" + Environment.NewLine;
                sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                // -- ADD 2011/08/10   ------ >>>>>>
                sqlText += " ,MAKERNAMERF" + Environment.NewLine;
                sqlText += " ,GRADENAMERF" + Environment.NewLine;
                sqlText += " ,BODYNAMERF" + Environment.NewLine;
                sqlText += " ,DOORCOUNTRF" + Environment.NewLine;
                sqlText += " ,ENGINEMODELNMRF" + Environment.NewLine;
                sqlText += " ,CMNNMENGINEDISPLACERF" + Environment.NewLine;
                sqlText += " ,ENGINEMODELRF" + Environment.NewLine;
                sqlText += " ,NUMBEROFGEARRF" + Environment.NewLine;
                sqlText += " ,GEARNMRF" + Environment.NewLine;
                sqlText += " ,EDIVNMRF" + Environment.NewLine;
                sqlText += " ,TRANSMISSIONNMRF" + Environment.NewLine;
                sqlText += " ,SHIFTNMRF" + Environment.NewLine;
                // -- ADD 2011/08/10   ------ <<<<<<
                // ADD 2012/05/31 ------------->>>>>
                sqlText += " ,FIRSTENTRYDATENUMTYPRF" + Environment.NewLine;
                sqlText += " ,CARADDINFRF" + Environment.NewLine;
                sqlText += " ,EQUIPPRTSOBJRF" + Environment.NewLine;
                // ADD 2012/05/31 -------------<<<<<
                // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,CARMNGCODERF" + Environment.NewLine;
                // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                sqlText += " ,EXPECTEDCEDATERF" + Environment.NewLine;
                // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<
                sqlText += "FROM" + Environment.NewLine;
                // -- UPD 2010/04/15 ---------------------------------------->>>
                //sqlText += "  SCMACODRDTCARRF AS SCMC" + Environment.NewLine;
                sqlText += "  SCMACODRDTCARRF AS SCMC WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2010/04/15 ----------------------------------------<<<
                sqlText += "WHERE" + Environment.NewLine;
                sqlText += "  SCMC.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += ") AS SCMCAR ON " + Environment.NewLine;
                sqlText += "      SCM.ENTERPRISECODERF = SCMCAR.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND SCM.ACPTANODRSTATUSRF = SCMCAR.ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += "  AND SCM.SALESSLIPNUMRF = SCMCAR.SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += "  AND SCM.INQUIRYNUMBERRF = SCMCAR.INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += "  AND SCM.INQORIGINALEPCDRF = SCMCAR.INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += "  AND SCM.INQORIGINALSECCDRF = SCMCAR.INQORIGINALSECCDRF" + Environment.NewLine;

                #endregion [SCM車両データ]

                #region [SCM回答データ]
                sqlText += "LEFT JOIN (" + Environment.NewLine;
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  SCMA.CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCMA.UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCMA.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,SCMA.FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,SCMA.UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,SCMA.UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,SCMA.UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,SCMA.LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,SCMA.INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,SCMA.INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,SCMA.INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += " ,SCMA.INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += " ,SCMA.INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,SCMA.UPDATEDATERF" + Environment.NewLine;
                sqlText += " ,SCMA.UPDATETIMERF" + Environment.NewLine;
                sqlText += " ,SCMA.INQROWNUMBERRF" + Environment.NewLine;
                sqlText += " ,SCMA.INQROWNUMDERIVEDNORF" + Environment.NewLine;
                sqlText += " ,SCMA.INQORGDTLDISCGUIDRF" + Environment.NewLine;
                sqlText += " ,SCMA.INQOTHDTLDISCGUIDRF" + Environment.NewLine;
                sqlText += " ,SCMA.GOODSDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCMA.RECYCLEPRTKINDCODERF" + Environment.NewLine;
                sqlText += " ,SCMA.RECYCLEPRTKINDNAMERF" + Environment.NewLine;
                sqlText += " ,SCMA.DELIVEREDGOODSDIVRF" + Environment.NewLine;
                sqlText += " ,SCMA.HANDLEDIVCODERF" + Environment.NewLine;
                sqlText += " ,SCMA.GOODSSHAPERF" + Environment.NewLine;
                sqlText += " ,SCMA.DELIVRDGDSCONFCDRF" + Environment.NewLine;
                sqlText += " ,SCMA.DELIGDSCMPLTDUEDATERF" + Environment.NewLine;
                sqlText += " ,SCMA.ANSWERDELIVERYDATERF" + Environment.NewLine;
                sqlText += " ,SCMA.BLGOODSCODERF" + Environment.NewLine;
                sqlText += " ,SCMA.BLGOODSDRCODERF" + Environment.NewLine;
                sqlText += " ,SCMA.INQGOODSNAMERF" + Environment.NewLine;
                sqlText += " ,SCMA.ANSGOODSNAMERF" + Environment.NewLine;
                sqlText += " ,SCMA.SALESORDERCOUNTRF" + Environment.NewLine;
                sqlText += " ,SCMA.DELIVEREDGOODSCOUNTRF" + Environment.NewLine;
                sqlText += " ,SCMA.GOODSNORF" + Environment.NewLine;
                sqlText += " ,SCMA.GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += " ,SCMA.GOODSMAKERNMRF" + Environment.NewLine;
                sqlText += " ,SCMA.PUREGOODSMAKERCDRF" + Environment.NewLine;
                sqlText += " ,SCMA.INQPUREGOODSNORF" + Environment.NewLine;
                sqlText += " ,SCMA.ANSPUREGOODSNORF" + Environment.NewLine;
                sqlText += " ,SCMA.LISTPRICERF" + Environment.NewLine;
                sqlText += " ,SCMA.UNITPRICERF" + Environment.NewLine;
                sqlText += " ,SCMA.GOODSADDINFORF" + Environment.NewLine;
                sqlText += " ,SCMA.ROUGHRROFITRF" + Environment.NewLine;
                sqlText += " ,SCMA.ROUGHRATERF" + Environment.NewLine;
                sqlText += " ,SCMA.ANSWERLIMITDATERF" + Environment.NewLine;
                sqlText += " ,SCMA.COMMENTDTLRF" + Environment.NewLine;
                sqlText += " ,SCMA.APPENDINGFILEDTLRF" + Environment.NewLine;
                sqlText += " ,SCMA.APPENDINGFILENMDTLRF" + Environment.NewLine;
                sqlText += " ,SCMA.SHELFNORF" + Environment.NewLine;
                sqlText += " ,SCMA.ADDITIONALDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCMA.CORRECTDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCMA.ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SCMA.SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " ,SCMA.SALESROWNORF" + Environment.NewLine;
                sqlText += " ,SCMA.CAMPAIGNCODERF" + Environment.NewLine;
                sqlText += " ,SCMA.STOCKDIVRF" + Environment.NewLine;
                sqlText += " ,SCMA.INQORDDIVCDRF" + Environment.NewLine;
                sqlText += " ,SCMA.DISPLAYORDERRF" + Environment.NewLine;
                sqlText += " ,SCMA.GOODSMNGNORF" + Environment.NewLine;
                // 2010/05/26 Add >>>
                sqlText += " ,SCMA.CANCELCNDTINDIVRF" + Environment.NewLine;
                // 2010/05/26 Add <<<
                // 2011/02/09 Add >>>
                sqlText += " ,SCMA.DTLTAKEINDIVCDRF" + Environment.NewLine;
                // 2011/02/09 Add <<<
                //---ADD 2011/05/20 --->>>
                sqlText += " ,SCMA.WAREHOUSECODERF" + Environment.NewLine;
                sqlText += " ,SCMA.WAREHOUSENAMERF" + Environment.NewLine;
                sqlText += " ,SCMA.WAREHOUSESHELFNORF" + Environment.NewLine;
                //--- ADD 2011/05/20 ---<<<
                // -- ADD 2012/01/10   ------ >>>>>>
                sqlText += " ,SCMA.GOODSSPECIALNOTERF" + Environment.NewLine;  //商品規格・特記事項
                // -- ADD 2012/01/10   ------ <<<<<<
                // -- ADD 2012/04/12   ------ >>>>>> 
                sqlText += " ,SCMA.PSMNGNORF" + Environment.NewLine;  //PS管理番号
                // -- ADD 2012/04/12   ------ <<<<<<
                // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                sqlText += " ,SCMA.AUTOESTIMATEPARTSCDRF" + Environment.NewLine;  //自動見積部品コード
                // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                sqlText += " ,SCMA.PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;
                sqlText += " ,SCMA.PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;
                sqlText += " ,SCMA.PMMAINMNGSHELFNORF" + Environment.NewLine;
                sqlText += " ,SCMA.PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;
                // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                sqlText += " ,SCMA.PRMSETDTLNO2RF" + Environment.NewLine;
                sqlText += " ,SCMA.PRMSETDTLNAME2RF" + Environment.NewLine;
                sqlText += " ,SCMA.STOCKSTATUSDIVRF" + Environment.NewLine;
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sqlText += " ,SCMA.RENTDIVRF" + Environment.NewLine;
                sqlText += " ,SCMA.MKRSUGGESTRTPRICRF" + Environment.NewLine;
                sqlText += " ,SCMA.OPENPRICEDIVRF" + Environment.NewLine;
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                sqlText += " ,SCMA.BGNGOODSDIVRF" + Environment.NewLine;
                // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                sqlText += " ,SCMA.MODELPRTSADPTYMRF" + Environment.NewLine;
                sqlText += " ,SCMA.MODELPRTSABLSYMRF" + Environment.NewLine;
                sqlText += " ,SCMA.MODELPRTSADPTFRAMENORF" + Environment.NewLine;
                sqlText += " ,SCMA.MODELPRTSABLSFRAMENORF" + Environment.NewLine;
                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCMA.ANSDELIDATEDIVRF" + Environment.NewLine;
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SCMA.GOODSSPECIALNTFORFACRF" + Environment.NewLine;
                sqlText += " ,SCMA.GOODSSPECIALNTFORCOWRF" + Environment.NewLine;
                sqlText += " ,SCMA.PRMSETDTLNAME2FORFACRF" + Environment.NewLine;
                sqlText += " ,SCMA.PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                sqlText += "FROM" + Environment.NewLine;
                // -- UPD 2010/04/15 ----------------------------------->>>
                //sqlText += "  SCMACODRDTLASRF AS SCMA" + Environment.NewLine;
                sqlText += "  SCMACODRDTLASRF AS SCMA WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2010/04/15 -----------------------------------<<<
                sqlText += "    INNER JOIN   " + Environment.NewLine;
                sqlText += "    (   " + Environment.NewLine;
                sqlText += "  	 SELECT    " + Environment.NewLine;
                // -- UPD 2010/06/17 --------------------------------------------->>>
                //sqlText += "  	   MAX(cast(UPDATEDATERF as nvarchar) + cast(UPDATETIMERF as nvarchar)) AS UPDATEDATETIMERF   " + Environment.NewLine;
                sqlText += "       MAX(cast(UPDATEDATERF as nvarchar) + RIGHT('000000000' + cast(UPDATETIMERF as nvarchar),9)) AS UPDATEDATETIMERF   " + Environment.NewLine;
                // -- UPD 2010/06/17 ---------------------------------------------<<<
                sqlText += "  	  ,ENTERPRISECODERF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALEPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALSECCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHEREPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHERSECCDRF    " + Environment.NewLine;
                sqlText += "  	  ,INQUIRYNUMBERRF  " + Environment.NewLine;
                sqlText += "  	  ,INQROWNUMBERRF	   " + Environment.NewLine;
                sqlText += "  	  ,INQROWNUMDERIVEDNORF  " + Environment.NewLine;
                sqlText += "  	  ,ACPTANODRSTATUSRF  " + Environment.NewLine;
                sqlText += "  	  ,SALESSLIPNUMRF  " + Environment.NewLine;
                sqlText += "  	  ,SALESROWNORF  " + Environment.NewLine;
                // -- UPD 2010/04/15 ------------------------------------->>>
                //sqlText += "  	 FROM SCMACODRDTLASRF    " + Environment.NewLine;
                sqlText += "  	 FROM SCMACODRDTLASRF WITH (READUNCOMMITTED)   " + Environment.NewLine;
                // -- UPD 2010/04/15 -------------------------------------<<<
                sqlText += "     WHERE" + Environment.NewLine;
                sqlText += "        ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;

                //問合せ・発注種別
                if (paraSCMReadWork.InqOrdDivCd != 0)
                {
                    sqlText += "    AND INQORDDIVCDRF = @FINDINQORDDIVCD    " + Environment.NewLine;
                }
                sqlText += "  	 GROUP BY    " + Environment.NewLine;
                sqlText += "  	   ENTERPRISECODERF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALEPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQORIGINALSECCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHEREPCDRF   " + Environment.NewLine;
                sqlText += "  	  ,INQOTHERSECCDRF    " + Environment.NewLine;
                sqlText += "  	  ,INQUIRYNUMBERRF  " + Environment.NewLine;
                sqlText += "  	  ,INQROWNUMBERRF	   " + Environment.NewLine;
                sqlText += "  	  ,INQROWNUMDERIVEDNORF  " + Environment.NewLine;
                sqlText += "  	  ,ACPTANODRSTATUSRF  " + Environment.NewLine;
                sqlText += "  	  ,SALESSLIPNUMRF  " + Environment.NewLine;
                sqlText += "  	  ,SALESROWNORF  " + Environment.NewLine;
                sqlText += "    ) AS SCMA2  " + Environment.NewLine;
                sqlText += "    ON   " + Environment.NewLine;
                sqlText += "        SCMA2.ENTERPRISECODERF = SCMA.ENTERPRISECODERF   " + Environment.NewLine;
                sqlText += "    AND SCMA2.INQORIGINALEPCDRF = SCMA.INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += "    AND SCMA2.INQORIGINALSECCDRF = SCMA.INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += "    AND SCMA2.INQOTHEREPCDRF = SCMA.INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += "    AND SCMA2.INQOTHERSECCDRF = SCMA.INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += "    AND SCMA2.INQUIRYNUMBERRF = SCMA.INQUIRYNUMBERRF" + Environment.NewLine;
                // -- UPD 2010/06/17 -------------------------------------->>>
                //sqlText += "    AND SCMA2.UPDATEDATETIMERF = (cast(SCMA.UPDATEDATERF as nvarchar) + cast(SCMA.UPDATETIMERF as nvarchar))   " + Environment.NewLine;
                sqlText += "    AND SCMA2.UPDATEDATETIMERF = (cast(SCMA.UPDATEDATERF as nvarchar) + RIGHT('000000000' + cast(SCMA.UPDATETIMERF as nvarchar),9))   " + Environment.NewLine;
                // -- UPD 2010/06/17 --------------------------------------<<<
                sqlText += "    AND SCMA2.INQROWNUMBERRF = SCMA.INQROWNUMBERRF" + Environment.NewLine;
                sqlText += "    AND SCMA2.INQROWNUMDERIVEDNORF = SCMA.INQROWNUMDERIVEDNORF" + Environment.NewLine;
                sqlText += "    AND SCMA2.ACPTANODRSTATUSRF = SCMA.ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += "    AND SCMA2.SALESSLIPNUMRF = SCMA.SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += "    AND SCMA2.SALESROWNORF = SCMA.SALESROWNORF" + Environment.NewLine;
                sqlText += "WHERE" + Environment.NewLine;
                sqlText += "  SCMA.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += ") AS SCMANS ON " + Environment.NewLine;
                sqlText += "      SCM.ENTERPRISECODERF = SCMANS.ENTERPRISECODERF" + Environment.NewLine;
                sqlText += "  AND SCM.ACPTANODRSTATUSRF = SCMANS.ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += "  AND SCM.SALESSLIPNUMRF = SCMANS.SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += "  AND SCM.INQOTHERSECCDRF = SCMANS.INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += "  AND SCM.INQORIGINALEPCDRF = SCMANS.INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += "  AND SCM.INQORIGINALSECCDRF = SCMANS.INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += "  AND SCM.INQUIRYNUMBERRF = SCMANS.INQUIRYNUMBERRF" + Environment.NewLine;
                #endregion [SCM回答データ]

                sqlText += "WHERE" + Environment.NewLine;
                sqlText += "  SCM.ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                //企業コード
                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.EnterpriseCode);

                //問い合わせ先拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOtherSecCd) == false)
                {
                    sqlText += "  AND SCM.INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;

                    SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);
                    findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOtherSecCd);
                }

                //回答区分   ※配列で複数指定される
                if (paraSCMReadWork.AnswerDivCds != null)
                {
                    string answerDivstr = "";
                    foreach (Int32 divstr in paraSCMReadWork.AnswerDivCds)
                    {
                        if (answerDivstr != "")
                        {
                            answerDivstr += ",";
                        }
                        answerDivstr += divstr.ToString();
                    }

                    if (answerDivstr != "")
                    {
                        sqlText += " AND SCM.ANSWERDIVCDRF IN (" + answerDivstr + ") " + Environment.NewLine;
                    }
                }
                // 2011/02/18 Add >>>
                //キャンセル区分   ※配列で複数指定される
                if (paraSCMReadWork.CancelDivs != null)
                {
                    string cancelDivstr = "";
                    foreach (Int16 divstr in paraSCMReadWork.CancelDivs)
                    {
                        if (cancelDivstr != "")
                        {
                            cancelDivstr += ",";
                        }
                        cancelDivstr += divstr.ToString();
                    }

                    if (cancelDivstr != "")
                    {
                        sqlText += " AND SCM.CANCELDIVRF IN (" + cancelDivstr + ") " + Environment.NewLine;
                    }
                }
                // 2011/02/18 Add <<<

                //問合せ元企業コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalEpCd.Trim()) == false)	//@@@@20230303
                {
                    sqlText += "  AND SCM.INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;

                    SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);
                    findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalEpCd);
                }

                //問合せ元拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalSecCd) == false)
                {
                    sqlText += "  AND SCM.INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;

                    SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);
                    findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalSecCd);
                }

                //指定日付以降の更新年月日のデータを取得
                if (paraSCMReadWork.UpdateDateOver != DateTime.MinValue)
                {
                    sqlText += "  AND SCM.UPDATEDATERF >= @FINDUPDATEDATE" + Environment.NewLine;
                    
                    SqlParameter findUpdateDate = sqlCommand.Parameters.Add("@FINDUPDATEDATE", SqlDbType.Int);
                    findUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(paraSCMReadWork.UpdateDateOver);
                }

                //受信日時MinValueのデータを抽出
                if (paraSCMReadWork.ReceiveDTZeroDiv == 1)
                {
                    sqlText += "  AND SCM.RECEIVEDATETIMERF IS NULL" + Environment.NewLine;
                }


                sqlCommand.CommandText = sqlText;
                # endregion

#if DEBUG
                Console.Clear();
                Console.WriteLine(NSDebug.GetSqlCommand(sqlCommand));
#endif

                myReader = sqlCommand.ExecuteReader();

                if (retSCMAcOdrDataWorkList == null)
                {
                    retSCMAcOdrDataWorkList = new CustomSerializeArrayList();
                }

                SCMAcOdrDataWork scmAcOdrDataWork = null;     //SCM受注データインスタンス
                SCMAcOdrDataWork bakscmAcOdrDataWork = null;  //SCM受注データ退避用インスタンス
                SCMAcOdrDtCarWork scmAcOdrDtCarWork = null;
                SCMAcOdrDtlAsWork scmAcOdrDtlAsWork = null;

                ArrayList scmMAcOdrDtlAsList = null;  //SCM回答データList


                while (myReader.Read())
                {
                    bakscmAcOdrDataWork = CopyToSCMAcOdrDataWorkFromReader(ref myReader);

                    if (scmAcOdrDataWork != null && ScmAcOdrDataWorkEquals(scmAcOdrDataWork,bakscmAcOdrDataWork))
                    {
                        //前回セットしたSCM受注データと同一データの場合は、SCM受注データと車両データを再セットしない。

                        //SCM回答データ追加
                        scmAcOdrDtlAsWork = CopyToSCMAcOdrDtlAsWorkFromReader2(ref myReader);
                        if (scmAcOdrDtlAsWork.CreateDateTime != DateTime.MinValue)
                        {
                            //回答データが取得出来た場合のみセット
                            scmMAcOdrDtlAsList.Add(scmAcOdrDtlAsWork);
                        }
                    }
                    else
                    {

                        //SCM受注データが変わった場合(初回ループ時を除く)
                        if (scmAcOdrDataWork != null)
                        {
                            CustomSerializeArrayList retScmcsList = new CustomSerializeArrayList();
                            retScmcsList.Add(scmAcOdrDataWork);
                            if (scmAcOdrDtCarWork.CreateDateTime != DateTime.MinValue)
                            {
                                retScmcsList.Add(scmAcOdrDataWork);
                            }
                            if (scmMAcOdrDtlAsList.Count != 0)
                            {
                                retScmcsList.Add(scmMAcOdrDtlAsList);
                            }

                            //各データのリストを追加
                            retSCMAcOdrDataWorkList.Add(retScmcsList);

                        }

                        //回答データList初期化
                        scmMAcOdrDtlAsList = new ArrayList();

                        //SCM受注データ追加
                        scmAcOdrDataWork = CopyToSCMAcOdrDataWorkFromReader(ref myReader);

                        //SCM車両データ追加
                        scmAcOdrDtCarWork = CopyToSCMAcOdrDtCarWorkFromReader2(ref myReader);

                        //SCM回答データ追加
                        scmAcOdrDtlAsWork = CopyToSCMAcOdrDtlAsWorkFromReader2(ref myReader);
                        if (scmAcOdrDtlAsWork.CreateDateTime != DateTime.MinValue)
                        {
                            //回答データが取得出来た場合のみセット
                            scmMAcOdrDtlAsList.Add(scmAcOdrDtlAsWork);
                        }

                    }

                }

                //最終データの追加
                if (scmAcOdrDataWork != null)
                {
                    CustomSerializeArrayList retScmcsList = new CustomSerializeArrayList();
                    retScmcsList.Add(scmAcOdrDataWork);
                    if (scmAcOdrDtCarWork.CreateDateTime != DateTime.MinValue)
                    {
                        retScmcsList.Add(scmAcOdrDataWork);
                    }
                    if (scmMAcOdrDtlAsList.Count != 0)
                    {
                        retScmcsList.Add(scmMAcOdrDtlAsList);
                    }

                    //各データのリストを追加
                    retSCMAcOdrDataWorkList.Add(retScmcsList);
                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if (retSCMAcOdrDataWorkList != null && retSCMAcOdrDataWorkList.Count != 0)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// SCM受注データインスタンス比較
        /// </summary>
        /// <param name="work"></param>
        /// <param name="work2"></param>
        /// <returns></returns>
        private bool ScmAcOdrDataWorkEquals(SCMAcOdrDataWork work, SCMAcOdrDataWork work2 )
        {
                if (work.EnterpriseCode == work2.EnterpriseCode &&
                    work.InqOriginalEpCd.Trim() == work2.InqOriginalEpCd.Trim() &&	//@@@@20230303
                    work.InqOriginalSecCd == work2.InqOriginalSecCd &&
                    work.InqOtherEpCd == work2.InqOtherEpCd &&
                    work.InqOtherSecCd == work2.InqOtherSecCd &&
                    work.InquiryNumber == work2.InquiryNumber &&
                    work.AcptAnOdrStatus == work2.AcptAnOdrStatus &&
                    work.SalesSlipNum == work2.SalesSlipNum
                    )
                {
                    return true;
                }

                return false;

        }

        // -- UPD 2010/02/26 -----------------------------------------<<<

        # endregion

        # region [ScmZeroSearch]
        /// <summary>
        /// 未送信のSCM関連データ情報のリストを取得します。
        /// </summary>
        /// <param name="retScmCsObj">検索結果</param>
        /// <param name="paraSCMReadObj">抽出条件パラメータワーク</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 未送信のSCM関連データのキー値が一致する、全てのSCM関連データ情報を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.06.18</br>
        public int ScmZeroSearch(ref object retScmCsObj, object paraSCMReadObj)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlConnection sqlConnection = null;

            try
            {
                CustomSerializeArrayList retScmCsList = retScmCsObj as CustomSerializeArrayList;
                IOWriteSCMReadWork paraSCMReadWork = paraSCMReadObj as IOWriteSCMReadWork;

                // コネクション生成
                sqlConnection = this.CreateSqlConnection(true);

                status = this.ScmZeroSearch(ref retScmCsList, paraSCMReadWork, ref sqlConnection);
            }
            catch (Exception ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                base.WriteErrorLog(ex, errmsg, status);
            }
            finally
            {
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }

            return status;
        }

        // ADD 2014/03/11 SCM仕掛一覧№10639 -------------------------------------------------------------------------->>>>>
        /// <summary>
        /// 未送信のSCM関連データ情報のリストを取得します。（問合せ番号又は売上伝票番号による抽出）
        /// </summary>
        /// <param name="retScmCsObj">検索結果</param>
        /// <param name="paraSCMReadObj">抽出条件パラメータワーク</param>
        /// <param name="paraSalesSlipNumList">売上伝票番号リスト</param>
        /// <param name="paraInquiryNumber">問合せ番号</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 未送信のSCM関連データのキー値が一致する、全てのSCM関連データ情報を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.06.18</br>
        public int ScmZeroSearch(ref object retScmCsObj, object paraSCMReadObj, object paraSalesSlipNumList, long paraInquiryNumber)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlConnection sqlConnection = null;

            try
            {
                CustomSerializeArrayList retScmCsList = retScmCsObj as CustomSerializeArrayList;
                IOWriteSCMReadWork paraSCMReadWork = paraSCMReadObj as IOWriteSCMReadWork;
                List<string> paraSalesSlipNumListWork = paraSalesSlipNumList as List<string>;

                // コネクション生成
                sqlConnection = this.CreateSqlConnection(true);

                status = this.ScmZeroSearch(ref retScmCsList, paraSCMReadWork, paraSalesSlipNumListWork, paraInquiryNumber, ref sqlConnection);
            }
            catch (Exception ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                base.WriteErrorLog(ex, errmsg, status);
            }
            finally
            {
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }

            return status;
        }
        // ADD 2014/03/11 SCM仕掛一覧№10639 --------------------------------------------------------------------------<<<<<

        /// <summary>
        /// 未送信のSCM関連データ情報のリストを取得します。
        /// </summary>
        /// <param name="retList">SCM関連データ情報を格納する CustomSerializeArrayList</param>
        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 未送信のSCM関連データのキー値が一致する、全てのSCM関連データ情報が格納されている CustomSerializeArrayList を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.06.18</br>
        public int ScmZeroSearch(ref CustomSerializeArrayList retList, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (retList == null)
            {
                retList = new CustomSerializeArrayList();
            }

            ArrayList retSCMAcOdrDataWorkList = null;    //ＳＣＭ受注データ結果
            SCMAcOdrDtCarWork retSCMAcOdrDtCarWork = null;  //ＳＣＭ受注データ（車両情報）結果
            ArrayList retSCMAcOdrDtlAsWorkList = null;      //ＳＣＭ受注明細データ（回答）結果リスト
            // -- ADD 2011/08/10   ------ >>>>>>
            ArrayList retSCMAcOdrSetDtWorkList = null;      //ＳＣＭセットマスタ結果リスト
            // -- ADD 2011/08/10   ------ <<<<<<

            //ＳＣＭ受注データ抽出処理
            status = ScmZeroSearchSCMAcOdrDataWorkProc(out retSCMAcOdrDataWorkList, paraSCMReadWork, ref sqlConnection);

            //受注データの件数分ループして、他関連データを取得
            foreach (SCMAcOdrDataWork retSCMAcOdrDataWork in retSCMAcOdrDataWorkList)
            {
                CustomSerializeArrayList retScmCsList = new CustomSerializeArrayList();

                retScmCsList.Add(retSCMAcOdrDataWork);

                // -- UPD 2011/02/22 -------------------------------->>>
                ////車両情報読み込み用にパラメータセット
                //paraSCMReadWork.InquiryNumber = 0; //念のため問合せ番号をクリア
                //paraSCMReadWork.AcptAnOdrStatus = retSCMAcOdrDataWork.AcptAnOdrStatus; //受注データの受注ステータス
                //paraSCMReadWork.SalesSlipNum = retSCMAcOdrDataWork.SalesSlipNum; //受注データの売上伝票番号

                //車両情報読み込み用にパラメータセット
                if (retSCMAcOdrDataWork.AcptAnOdrStatus != 0)
                {
                    paraSCMReadWork.InquiryNumber = 0; //念のため問合せ番号をクリア
                    paraSCMReadWork.AcptAnOdrStatus = retSCMAcOdrDataWork.AcptAnOdrStatus; //受注データの受注ステータス
                    paraSCMReadWork.SalesSlipNum = retSCMAcOdrDataWork.SalesSlipNum; //受注データの売上伝票番号
                }
                else
                {
                    //返品拒否データの場合は、問い合わせ番号をセット
                    paraSCMReadWork.InquiryNumber = retSCMAcOdrDataWork.InquiryNumber;  //問い合わせ番号
                    paraSCMReadWork.InqOriginalEpCd = retSCMAcOdrDataWork.InqOriginalEpCd.Trim(); // 問合せ元企業	//@@@@20230303
                    paraSCMReadWork.InqOriginalSecCd = retSCMAcOdrDataWork.InqOriginalSecCd; // 問合せ元拠点

                    paraSCMReadWork.SalesSlipNum = "";  //売上伝票番号
                    paraSCMReadWork.AcptAnOdrStatus = 0; //受注ステータス
                }

                // -- UPD 2011/02/22 --------------------------------<<<

                //受注データの問合せ番号より受注データ(車両情報)を取得
                status = ScmReadSCMAcOdrDtCarWorkProc(out retSCMAcOdrDtCarWork, paraSCMReadWork, ref sqlConnection);

                if (retSCMAcOdrDtCarWork != null)
                {
                    retScmCsList.Add(retSCMAcOdrDtCarWork);
                }

                //ＳＣＭ受注明細データ(問合せ・発注)抽出処理
                //※ZeroSearch時は問合せ・発注の読み込みは不要

                // -- ADD 2011/02/22 ----------------------------------->>>
                if (retSCMAcOdrDataWork.AcptAnOdrStatus == 0)
                {
                    //車両情報読み込み時に一度、売上伝票番号をクリアしているため、ここで念のため受注データから再セット（"000000000"）
                    paraSCMReadWork.AcptAnOdrStatus = retSCMAcOdrDataWork.AcptAnOdrStatus; //受注データの受注ステータス
                    paraSCMReadWork.SalesSlipNum = retSCMAcOdrDataWork.SalesSlipNum; //受注データの売上伝票番号
                    paraSCMReadWork.InqOtherSecCd = retSCMAcOdrDataWork.InqOtherSecCd; // 問合せ先拠点コード
                }
                // -- ADD 2011/02/22 -----------------------------------<<<
                
                //ＳＣＭ受注明細データ(回答)抽出処理
                status = ScmZeroSearchSCMAcOdrDtlAsWorkProc(out retSCMAcOdrDtlAsWorkList, paraSCMReadWork, ref sqlConnection);

                if (retSCMAcOdrDtlAsWorkList != null && retSCMAcOdrDtlAsWorkList.Count != 0)
                {
                    retScmCsList.Add(retSCMAcOdrDtlAsWorkList);
                }

                if ((status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND) &&
                    (retSCMAcOdrDataWork != null || retSCMAcOdrDtCarWork != null || retSCMAcOdrDtlAsWorkList != null)
                    )
                {
                    //該当無しステータスで対象マスタのどれか１件でも存在した場合はステータスを正常とする。
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // -- ADD 2011/08/10   ------ >>>>>>
                    // 未送信のSCMセットマスタ情報取得処理
                    status = ScmZeroSearchSCMAcOdrSetDtWorkProc(out retSCMAcOdrSetDtWorkList, paraSCMReadWork, ref sqlConnection);

                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL &&
                        retSCMAcOdrSetDtWorkList != null &&
                        retSCMAcOdrSetDtWorkList.Count > 0)
                    {
                        retScmCsList.Add(retSCMAcOdrSetDtWorkList);
                    }
                    // -- ADD 2011/08/10   ------ <<<<<<
                    retList.Add(retScmCsList);
                }
            }

            if (retList.Count != 0)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            else
            {
                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            }

            return status;
        }

        // ADD 2014/03/11 SCM仕掛一覧№10639 -------------------------------------------------------------------------->>>>>
        /// <summary>
        /// 未送信のSCM関連データ情報のリストを取得します。
        /// </summary>
        /// <param name="retList"></param>
        /// <param name="paraSCMReadWork"></param>
        /// <param name="paraSalesSlipNumListWork"></param>
        /// <param name="paraInquiryNumber"></param>
        /// <param name="sqlConnection"></param>
        /// <returns></returns>
        private int ScmZeroSearch(ref CustomSerializeArrayList retList, IOWriteSCMReadWork paraSCMReadWork, List<string> paraSalesSlipNumListWork, long paraInquiryNumber, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (retList == null)
            {
                retList = new CustomSerializeArrayList();
            }

            ArrayList retSCMAcOdrDataWorkList = null;    //ＳＣＭ受注データ結果
            SCMAcOdrDtCarWork retSCMAcOdrDtCarWork = null;  //ＳＣＭ受注データ（車両情報）結果
            ArrayList retSCMAcOdrDtlAsWorkList = null;      //ＳＣＭ受注明細データ（回答）結果リスト
            ArrayList retSCMAcOdrSetDtWorkList = null;      //ＳＣＭセットマスタ結果リスト

            //ＳＣＭ受注データ抽出処理
            status = ScmZeroSearchSCMAcOdrDataWorkProc(out retSCMAcOdrDataWorkList, paraSCMReadWork, paraSalesSlipNumListWork, paraInquiryNumber, ref sqlConnection);

            //受注データの件数分ループして、他関連データを取得
            foreach (SCMAcOdrDataWork retSCMAcOdrDataWork in retSCMAcOdrDataWorkList)
            {
                CustomSerializeArrayList retScmCsList = new CustomSerializeArrayList();

                retScmCsList.Add(retSCMAcOdrDataWork);

                //車両情報読み込み用にパラメータセット
                if (retSCMAcOdrDataWork.AcptAnOdrStatus != 0)
                {
                    paraSCMReadWork.InquiryNumber = 0; //念のため問合せ番号をクリア
                    paraSCMReadWork.AcptAnOdrStatus = retSCMAcOdrDataWork.AcptAnOdrStatus; //受注データの受注ステータス
                    paraSCMReadWork.SalesSlipNum = retSCMAcOdrDataWork.SalesSlipNum; //受注データの売上伝票番号
                }
                else
                {
                    //返品拒否データの場合は、問い合わせ番号をセット
                    paraSCMReadWork.InquiryNumber = retSCMAcOdrDataWork.InquiryNumber;  //問い合わせ番号
                    paraSCMReadWork.InqOriginalEpCd = retSCMAcOdrDataWork.InqOriginalEpCd.Trim(); // 問合せ元企業	//@@@@20230303
                    paraSCMReadWork.InqOriginalSecCd = retSCMAcOdrDataWork.InqOriginalSecCd; // 問合せ元拠点

                    paraSCMReadWork.SalesSlipNum = "";  //売上伝票番号
                    paraSCMReadWork.AcptAnOdrStatus = 0; //受注ステータス
                }


                //受注データの問合せ番号より受注データ(車両情報)を取得
                status = ScmReadSCMAcOdrDtCarWorkProc(out retSCMAcOdrDtCarWork, paraSCMReadWork, ref sqlConnection);

                if (retSCMAcOdrDtCarWork != null)
                {
                    retScmCsList.Add(retSCMAcOdrDtCarWork);
                }

                //ＳＣＭ受注明細データ(問合せ・発注)抽出処理
                //※ZeroSearch時は問合せ・発注の読み込みは不要

                if (retSCMAcOdrDataWork.AcptAnOdrStatus == 0)
                {
                    //車両情報読み込み時に一度、売上伝票番号をクリアしているため、ここで念のため受注データから再セット（"000000000"）
                    paraSCMReadWork.AcptAnOdrStatus = retSCMAcOdrDataWork.AcptAnOdrStatus; //受注データの受注ステータス
                    paraSCMReadWork.SalesSlipNum = retSCMAcOdrDataWork.SalesSlipNum; //受注データの売上伝票番号
                    paraSCMReadWork.InqOtherSecCd = retSCMAcOdrDataWork.InqOtherSecCd; // 問合せ先拠点コード
                }

                //ＳＣＭ受注明細データ(回答)抽出処理
                status = ScmZeroSearchSCMAcOdrDtlAsWorkProc(out retSCMAcOdrDtlAsWorkList, paraSCMReadWork, ref sqlConnection);

                if (retSCMAcOdrDtlAsWorkList != null && retSCMAcOdrDtlAsWorkList.Count != 0)
                {
                    retScmCsList.Add(retSCMAcOdrDtlAsWorkList);
                }

                if ((status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND) &&
                    (retSCMAcOdrDataWork != null || retSCMAcOdrDtCarWork != null || retSCMAcOdrDtlAsWorkList != null)
                    )
                {
                    //該当無しステータスで対象マスタのどれか１件でも存在した場合はステータスを正常とする。
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // 未送信のSCMセットマスタ情報取得処理
                    status = ScmZeroSearchSCMAcOdrSetDtWorkProc(out retSCMAcOdrSetDtWorkList, paraSCMReadWork, ref sqlConnection);

                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL &&
                        retSCMAcOdrSetDtWorkList != null &&
                        retSCMAcOdrSetDtWorkList.Count > 0)
                    {
                        retScmCsList.Add(retSCMAcOdrSetDtWorkList);
                    }
                    retList.Add(retScmCsList);
                }
            }

            if (retList.Count != 0)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            else
            {
                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            }

            return status;
        }
        // ADD 2014/03/11 SCM仕掛一覧№10639 --------------------------------------------------------------------------<<<<<

        /// <summary>
        /// 未送信のSCM受注データ情報を取得します。
        /// </summary>
        /// <param name="retSCMAcOdrDataWorkList">SCM受注データ情報結果</param>
        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 未送信のSCM受注データのキー値が一致する、SCM受注データ情報を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.06.18</br>
        private int ScmZeroSearchSCMAcOdrDataWorkProc(out ArrayList retSCMAcOdrDataWorkList, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retSCMAcOdrDataWorkList = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,CUSTOMERCODERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                sqlText += " ,ANSWERDIVCDRF" + Environment.NewLine;
                sqlText += " ,JUDGEMENTDATERF" + Environment.NewLine;
                sqlText += " ,INQORDNOTERF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILERF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILENMRF" + Environment.NewLine;
                sqlText += " ,INQEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,INQEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,ANSEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,ANSEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,INQUIRYDATERF" + Environment.NewLine;
                sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;
                sqlText += " ,SALESSUBTOTALTAXRF" + Environment.NewLine;
                sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                sqlText += " ,INQORDANSDIVCDRF" + Environment.NewLine;
                sqlText += " ,RECEIVEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ANSWERCREATEDIVRF" + Environment.NewLine;
                // 2010/05/26 Add >>>
                sqlText += " ,CANCELDIVRF" + Environment.NewLine;
                sqlText += " ,CMTCOOPRTDIVRF" + Environment.NewLine;
                // 2010/05/26 Add <<<
                sqlText += " ,SFPMCPRTINSTSLIPNORF" + Environment.NewLine;　　//ADD 2011/05/20
                // -- ADD 2011/08/10   ------ >>>>>>
                sqlText += " ,ACCEPTORORDERKINDRF" + Environment.NewLine;     // 受発注種別 0:通常,1:PCC-UOE
                // -- ADD 2011/08/10   ------ <<<<<<
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,TABUSEDIVRF" + Environment.NewLine;
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                sqlText += " ,CARMNGCODERF" + Environment.NewLine;
                // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sqlText += " ,AUTOANSMTHDRF" + Environment.NewLine;
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                sqlText += "FROM" + Environment.NewLine;
                // -- UPD 2010/04/15 ------------------------------------------>>>
                //sqlText += "  SCMACODRDATARF" + Environment.NewLine;
                sqlText += "  SCMACODRDATARF WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2010/04/15 ------------------------------------------<<<
                sqlText += "WHERE" + Environment.NewLine;
                sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "  AND UPDATEDATERF = 0" + Environment.NewLine;
                sqlText += "  AND UPDATETIMERF = 0" + Environment.NewLine;

                //企業コード
                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.EnterpriseCode);

                sqlCommand.CommandText = sqlText;
                # endregion

#if DEBUG
                Console.Clear();
                Console.WriteLine(NSDebug.GetSqlCommand(sqlCommand));
#endif

                myReader = sqlCommand.ExecuteReader();

                while (myReader.Read())
                {
                    SCMAcOdrDataWork dtWork = CopyToSCMAcOdrDataWorkFromReader(ref myReader);

                    if (retSCMAcOdrDataWorkList == null)
                    {
                        retSCMAcOdrDataWorkList = new ArrayList();
                    }

                    retSCMAcOdrDataWorkList.Add(dtWork);
                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if (retSCMAcOdrDataWorkList != null && retSCMAcOdrDataWorkList.Count != 0)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }

        // ADD 2014/03/11 SCM仕掛一覧№10639 -------------------------------------------------------------------------->>>>>
        /// <summary>
        /// 未送信のSCM受注データ情報を取得します。
        /// </summary>
        /// <param name="retSCMAcOdrDataWorkList"></param>
        /// <param name="paraSCMReadWork"></param>
        /// <param name="paraSalesSlipNumListWork"></param>
        /// <param name="paraInquiryNumber"></param>
        /// <param name="sqlConnection"></param>
        /// <returns></returns>
        private int ScmZeroSearchSCMAcOdrDataWorkProc(out ArrayList retSCMAcOdrDataWorkList, IOWriteSCMReadWork paraSCMReadWork, List<string> paraSalesSlipNumListWork, long paraInquiryNumber, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retSCMAcOdrDataWorkList = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,CUSTOMERCODERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                sqlText += " ,ANSWERDIVCDRF" + Environment.NewLine;
                sqlText += " ,JUDGEMENTDATERF" + Environment.NewLine;
                sqlText += " ,INQORDNOTERF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILERF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILENMRF" + Environment.NewLine;
                sqlText += " ,INQEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,INQEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,ANSEMPLOYEECDRF" + Environment.NewLine;
                sqlText += " ,ANSEMPLOYEENMRF" + Environment.NewLine;
                sqlText += " ,INQUIRYDATERF" + Environment.NewLine;
                sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;
                sqlText += " ,SALESSUBTOTALTAXRF" + Environment.NewLine;
                sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                sqlText += " ,INQORDANSDIVCDRF" + Environment.NewLine;
                sqlText += " ,RECEIVEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ANSWERCREATEDIVRF" + Environment.NewLine;
                sqlText += " ,CANCELDIVRF" + Environment.NewLine;
                sqlText += " ,CMTCOOPRTDIVRF" + Environment.NewLine;
                sqlText += " ,SFPMCPRTINSTSLIPNORF" + Environment.NewLine;　　
                sqlText += " ,ACCEPTORORDERKINDRF" + Environment.NewLine;     // 受発注種別 0:通常,1:PCC-UOE
                sqlText += " ,TABUSEDIVRF" + Environment.NewLine;
                sqlText += " ,CARMNGCODERF" + Environment.NewLine;
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sqlText += " ,AUTOANSMTHDRF" + Environment.NewLine;
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                sqlText += "FROM" + Environment.NewLine;
                sqlText += "  SCMACODRDATARF WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += "WHERE" + Environment.NewLine;
                sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "  AND UPDATEDATERF = 0" + Environment.NewLine;
                sqlText += "  AND UPDATETIMERF = 0" + Environment.NewLine;

                //企業コード
                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.EnterpriseCode);

                // 問合せ番号
                if (paraInquiryNumber != 0)
                {
                    sqlText += "  AND INQUIRYNUMBERRF = " + paraInquiryNumber.ToString() + Environment.NewLine;
                }
                // 売上伝票番号
                else if (paraSalesSlipNumListWork != null && paraSalesSlipNumListWork.Count != 0)
                {
                    for (int i = 0; i < paraSalesSlipNumListWork.Count; i++)
                    {
                        if (i == 0) sqlText += "  AND (" + Environment.NewLine;
                        else sqlText += "  OR ";
                        sqlText += "  SALESSLIPNUMRF = " + paraSalesSlipNumListWork[i] + Environment.NewLine;
                    }
                    sqlText += "  ) " + Environment.NewLine;
                }

                sqlCommand.CommandText = sqlText;
                # endregion

#if DEBUG
                Console.Clear();
                Console.WriteLine(NSDebug.GetSqlCommand(sqlCommand));
#endif

                myReader = sqlCommand.ExecuteReader();

                while (myReader.Read())
                {
                    SCMAcOdrDataWork dtWork = CopyToSCMAcOdrDataWorkFromReader(ref myReader);

                    if (retSCMAcOdrDataWorkList == null)
                    {
                        retSCMAcOdrDataWorkList = new ArrayList();
                    }

                    retSCMAcOdrDataWorkList.Add(dtWork);
                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if (retSCMAcOdrDataWorkList != null && retSCMAcOdrDataWorkList.Count != 0)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }
        // ADD 2014/03/11 SCM仕掛一覧№10639 --------------------------------------------------------------------------<<<<<


        /// <summary>
        /// 未送信のSCM受注明細データ(回答)情報を取得します。
        /// </summary>
        /// <param name="retSCMAcOdrDtlAsWorkList">SCM受注明細データ(回答)情報結果</param>
        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 未送信のSCM受注明細データ(回答)のキー値が一致する、SCM受注明細データ(回答)情報を取得します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.06.18</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        private int ScmZeroSearchSCMAcOdrDtlAsWorkProc(out ArrayList retSCMAcOdrDtlAsWorkList, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retSCMAcOdrDtlAsWorkList = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                sqlText += " ,INQROWNUMBERRF" + Environment.NewLine;
                sqlText += " ,INQROWNUMDERIVEDNORF" + Environment.NewLine;
                sqlText += " ,INQORGDTLDISCGUIDRF" + Environment.NewLine;
                sqlText += " ,INQOTHDTLDISCGUIDRF" + Environment.NewLine;
                sqlText += " ,GOODSDIVCDRF" + Environment.NewLine;
                sqlText += " ,RECYCLEPRTKINDCODERF" + Environment.NewLine;
                sqlText += " ,RECYCLEPRTKINDNAMERF" + Environment.NewLine;
                sqlText += " ,DELIVEREDGOODSDIVRF" + Environment.NewLine;
                sqlText += " ,HANDLEDIVCODERF" + Environment.NewLine;
                sqlText += " ,GOODSSHAPERF" + Environment.NewLine;
                sqlText += " ,DELIVRDGDSCONFCDRF" + Environment.NewLine;
                sqlText += " ,DELIGDSCMPLTDUEDATERF" + Environment.NewLine;
                sqlText += " ,ANSWERDELIVERYDATERF" + Environment.NewLine;
                sqlText += " ,BLGOODSCODERF" + Environment.NewLine;
                sqlText += " ,BLGOODSDRCODERF" + Environment.NewLine;
                sqlText += " ,INQGOODSNAMERF" + Environment.NewLine;
                sqlText += " ,ANSGOODSNAMERF" + Environment.NewLine;
                sqlText += " ,SALESORDERCOUNTRF" + Environment.NewLine;
                sqlText += " ,DELIVEREDGOODSCOUNTRF" + Environment.NewLine;
                sqlText += " ,GOODSNORF" + Environment.NewLine;
                sqlText += " ,GOODSMAKERCDRF" + Environment.NewLine;
                sqlText += " ,GOODSMAKERNMRF" + Environment.NewLine;
                sqlText += " ,PUREGOODSMAKERCDRF" + Environment.NewLine;
                sqlText += " ,INQPUREGOODSNORF" + Environment.NewLine;
                sqlText += " ,ANSPUREGOODSNORF" + Environment.NewLine;
                sqlText += " ,LISTPRICERF" + Environment.NewLine;
                sqlText += " ,UNITPRICERF" + Environment.NewLine;
                sqlText += " ,GOODSADDINFORF" + Environment.NewLine;
                sqlText += " ,ROUGHRROFITRF" + Environment.NewLine;
                sqlText += " ,ROUGHRATERF" + Environment.NewLine;
                sqlText += " ,ANSWERLIMITDATERF" + Environment.NewLine;
                sqlText += " ,COMMENTDTLRF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILEDTLRF" + Environment.NewLine;
                sqlText += " ,APPENDINGFILENMDTLRF" + Environment.NewLine;
                sqlText += " ,SHELFNORF" + Environment.NewLine;
                sqlText += " ,ADDITIONALDIVCDRF" + Environment.NewLine;
                sqlText += " ,CORRECTDIVCDRF" + Environment.NewLine;
                sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                sqlText += " ,SALESROWNORF" + Environment.NewLine;
                sqlText += " ,CAMPAIGNCODERF" + Environment.NewLine;
                sqlText += " ,STOCKDIVRF" + Environment.NewLine;
                sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                sqlText += " ,DISPLAYORDERRF" + Environment.NewLine;
                sqlText += " ,GOODSMNGNORF" + Environment.NewLine;
                // 2010/05/26 Add >>>
                sqlText += " ,CANCELCNDTINDIVRF" + Environment.NewLine;
                // 2010/05/26 Add <<<
                // 2011/02/09 Add >>>
                sqlText += " ,DTLTAKEINDIVCDRF" + Environment.NewLine;
                // 2011/02/09 Add <<<
                //--- ADD 2011/05/20 --->>>
                sqlText += " ,WAREHOUSECODERF" + Environment.NewLine;
                sqlText += " ,WAREHOUSENAMERF" + Environment.NewLine;
                sqlText += " ,WAREHOUSESHELFNORF" + Environment.NewLine;
                // -- ADD 2011/08/10   ------ >>>>>>
                sqlText += " ,PMPRSNTCOUNTRF" + Environment.NewLine;            // PM現在庫数
                sqlText += " ,SETPARTSMKRCDRF" + Environment.NewLine;           // セット部品メーカーコード
                sqlText += " ,SETPARTSNUMBERRF" + Environment.NewLine;          // セット部品番号
                sqlText += " ,SETPARTSMAINSUBNORF" + Environment.NewLine;       // セット部品親子番号
                // -- ADD 2011/08/10   ------ <<<<<<
                //--- ADD 2011/05/20 ---<<<
                //--- ADD 2012/01/10 --->>>
                sqlText += " ,GOODSSPECIALNOTERF" + Environment.NewLine;       // 商品規格・特記事項
                //--- ADD 2012/01/10 ---<<<
                //--- ADD 2012/04/12 --->>> 
                sqlText += " ,PSMNGNORF" + Environment.NewLine;       // PS管理番号
                //--- ADD 2012/04/12 ---<<<
                // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                sqlText += " ,AUTOESTIMATEPARTSCDRF" + Environment.NewLine;  //自動見積部品コード
                // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;  //　売上伝票合計（税込）
                sqlText += " ,SALESTOTALTAXEXCRF" + Environment.NewLine;  // 売上伝票合計（税抜）
                sqlText += " ,SCMCONSTAXLAYMETHODRF" + Environment.NewLine;  // SCM消費税転嫁方式
                sqlText += " ,CONSTAXRATERF" + Environment.NewLine;  // 消費税税率
                sqlText += " ,SCMFRACTIONPROCCDRF" + Environment.NewLine;  // SCM端数処理区分
                sqlText += " ,ACCRECCONSTAXRF" + Environment.NewLine;  // 売掛消費税
                sqlText += " ,PMSALESDATERF" + Environment.NewLine;  // PM売上日
                sqlText += " ,SUPPSLPPRTTIMERF" + Environment.NewLine;  // 仕入先伝票発行時刻
                sqlText += " ,SALESMONEYTAXINCRF" + Environment.NewLine;  // 売上金額（税込み）
                sqlText += " ,SALESMONEYTAXEXCRF" + Environment.NewLine;  // 売上金額（税抜き）
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,DATAINPUTSYSTEMRF" + Environment.NewLine;  // データ入力システム
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                sqlText += " ,PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;  //PM主管倉庫コード
                sqlText += " ,PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;  //PM主管倉庫名称
                sqlText += " ,PMMAINMNGSHELFNORF" + Environment.NewLine;  //PM主管棚番
                sqlText += " ,PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;  //PM主管現在個数
                // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                sqlText += " ,PRMSETDTLNO2RF" + Environment.NewLine;  // 優良設定詳細コード２
                sqlText += " ,PRMSETDTLNAME2RF" + Environment.NewLine;  // 優良設定詳細名称２
                sqlText += " ,STOCKSTATUSDIVRF" + Environment.NewLine;  // 在庫状況区分
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sqlText += " ,RENTDIVRF" + Environment.NewLine;  // 貸出区分
                sqlText += " ,MKRSUGGESTRTPRICRF" + Environment.NewLine;  // メーカー希望小売価格
                sqlText += " ,OPENPRICEDIVRF" + Environment.NewLine;  // オープン価格区分
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                sqlText += " ,BGNGOODSDIVRF" + Environment.NewLine;
                // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                sqlText += " ,MODELPRTSADPTYMRF" + Environment.NewLine;
                sqlText += " ,MODELPRTSABLSYMRF" + Environment.NewLine;
                sqlText += " ,MODELPRTSADPTFRAMENORF" + Environment.NewLine;
                sqlText += " ,MODELPRTSABLSFRAMENORF" + Environment.NewLine;
                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,ANSDELIDATEDIVRF" + Environment.NewLine;
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,GOODSSPECIALNTFORFACRF" + Environment.NewLine;
                sqlText += " ,GOODSSPECIALNTFORCOWRF" + Environment.NewLine;
                sqlText += " ,PRMSETDTLNAME2FORFACRF" + Environment.NewLine;
                sqlText += " ,PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,INQBLUTYPTTHCDRF" + Environment.NewLine;
                sqlText += " ,INQBLUTYPTSBCDRF" + Environment.NewLine;
                sqlText += " ,ANSBLUTYPTTHCDRF" + Environment.NewLine;
                sqlText += " ,ANSBLUTYPTSBCDRF" + Environment.NewLine;
                sqlText += " ,ANSBLGOODSCODERF" + Environment.NewLine;
                sqlText += " ,ANSBLGOODSDRCODERF" + Environment.NewLine;
                // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                sqlText += "FROM" + Environment.NewLine;
                // -- UPD 2010/04/15 ---------------------------->>>
                //sqlText += "  SCMACODRDTLASRF" + Environment.NewLine;
                sqlText += "  SCMACODRDTLASRF WITH (READUNCOMMITTED)" + Environment.NewLine;
                // -- UPD 2010/04/15 ----------------------------<<<
                sqlText += "WHERE" + Environment.NewLine;
                sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                sqlText += "  AND ACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                sqlText += "  AND SALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;
                sqlText += "  AND UPDATEDATERF = 0" + Environment.NewLine;
                sqlText += "  AND UPDATETIMERF = 0" + Environment.NewLine;

                //企業コード
                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.EnterpriseCode);

                SqlParameter findAcptAnOdrStatus = sqlCommand.Parameters.Add("@FINDACPTANODRSTATUS", SqlDbType.Int);
                findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(paraSCMReadWork.AcptAnOdrStatus);

                SqlParameter findSalesSlipNum = sqlCommand.Parameters.Add("@FINDSALESSLIPNUM", SqlDbType.NChar);
                findSalesSlipNum.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.SalesSlipNum);

                // -- ADD 2011/02/22 ------------------------------->>>
                if (paraSCMReadWork.AcptAnOdrStatus == 0)
                {
                    //返品拒否用に問い合わせ番号での抽出処理を追加
                    sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;
                    SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);
                    findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(paraSCMReadWork.InquiryNumber);

                }

                //問合せ元企業コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalEpCd.Trim()) == false)	//@@@@20230303
                {
                    sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;

                    SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);
                    findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalEpCd);
                }

                //問合せ元拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalSecCd) == false)
                {
                    sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;

                    SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);
                    findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalSecCd);
                }

                //問い合わせ先拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOtherSecCd) == false)
                {
                    sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;

                    SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);
                    findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOtherSecCd);
                }
                // -- ADD 2011/02/22 -------------------------------<<<


                sqlCommand.CommandText = sqlText;
                # endregion

#if DEBUG
                Console.Clear();
                Console.WriteLine(NSDebug.GetSqlCommand(sqlCommand));
#endif

                myReader = sqlCommand.ExecuteReader();

                while (myReader.Read())
                {
                    SCMAcOdrDtlAsWork asWork = CopyToSCMAcOdrDtlAsWorkFromReader(ref myReader);

                    if (retSCMAcOdrDtlAsWorkList == null)
                    {
                        retSCMAcOdrDtlAsWorkList = new ArrayList();
                    }

                    retSCMAcOdrDtlAsWorkList.Add(asWork);
                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if (retSCMAcOdrDtlAsWorkList != null && retSCMAcOdrDtlAsWorkList.Count != 0)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }

        // -- ADD 2011/08/10   ------ >>>>>>
        /// <summary>
        /// 未送信のSCMセットマスタ情報を取得します。
        /// </summary>
        /// <param name="retSCMAcOdrSetDtWorkList">SCMセットマスタ情報結果</param>
        /// <param name="paraSCMReadWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : 未送信のSCMセットマスタ情報を取得します。</br>
        /// <br>Programmer : LDNS 劉立</br>
        /// <br>Date       : 2011.08.12</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        private int ScmZeroSearchSCMAcOdrSetDtWorkProc(out ArrayList retSCMAcOdrSetDtWorkList, IOWriteSCMReadWork paraSCMReadWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retSCMAcOdrSetDtWorkList = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += " CREATEDATETIMERF" + Environment.NewLine;               // 作成日時
                sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;              // 更新日時
                sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;              // 企業コード
                sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;              // GUID
                sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;             // 更新従業員コード
                sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;              // 更新アセンブリID1
                sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;              // 更新アセンブリID2
                sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;           // 論理削除区分
                sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;             // 問合せ元企業コード
                sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;            // 問合せ元拠点コード
                sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;                // 問合せ先企業コード
                sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;               // 問合せ先拠点コード
                sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;               // 問合せ番号
                sqlText += " ,SETPARTSMKRCDRF" + Environment.NewLine;               // セット部品メーカーコード
                sqlText += " ,SETPARTSNUMBERRF" + Environment.NewLine;              // セット部品番号
                sqlText += " ,SETPARTSMAINSUBNORF" + Environment.NewLine;           // セット部品親子番号
                sqlText += " ,GOODSDIVCDRF" + Environment.NewLine;                  // 商品種別
                sqlText += " ,RECYCLEPRTKINDCODERF" + Environment.NewLine;          // リサイクル部品種別
                sqlText += " ,RECYCLEPRTKINDNAMERF" + Environment.NewLine;          // リサイクル部品種別名称
                sqlText += " ,DELIVEREDGOODSDIVRF" + Environment.NewLine;           // 納品区分
                sqlText += " ,HANDLEDIVCODERF" + Environment.NewLine;               // 取扱区分
                sqlText += " ,GOODSSHAPERF" + Environment.NewLine;                  // 商品形態
                sqlText += " ,DELIVRDGDSCONFCDRF" + Environment.NewLine;            // 納品確認区分
                sqlText += " ,DELIGDSCMPLTDUEDATERF" + Environment.NewLine;         // 納品完了予定日
                sqlText += " ,ANSWERDELIVERYDATERF" + Environment.NewLine;          // 回答納期
                sqlText += " ,BLGOODSCODERF" + Environment.NewLine;                 // BL商品コード
                sqlText += " ,BLGOODSDRCODERF" + Environment.NewLine;               // BL商品コード枝番
                sqlText += " ,INQGOODSNAMERF" + Environment.NewLine;                // 問発商品名
                sqlText += " ,ANSGOODSNAMERF" + Environment.NewLine;                // 回答商品名
                sqlText += " ,SALESORDERCOUNTRF" + Environment.NewLine;             // 発注数
                sqlText += " ,DELIVEREDGOODSCOUNTRF" + Environment.NewLine;         // 納品数
                sqlText += " ,GOODSNORF" + Environment.NewLine;                     // 商品番号
                sqlText += " ,GOODSMAKERCDRF" + Environment.NewLine;                // 商品メーカーコード
                sqlText += " ,GOODSMAKERNMRF" + Environment.NewLine;                // 商品メーカー名称
                sqlText += " ,PUREGOODSMAKERCDRF" + Environment.NewLine;            // 純正商品メーカーコード
                sqlText += " ,INQPUREGOODSNORF" + Environment.NewLine;              // 問発純正商品番号
                sqlText += " ,ANSPUREGOODSNORF" + Environment.NewLine;              // 回答純正商品番号
                sqlText += " ,LISTPRICERF" + Environment.NewLine;                   // 定価
                sqlText += " ,UNITPRICERF" + Environment.NewLine;                   // 単価
                sqlText += " ,GOODSADDINFORF" + Environment.NewLine;                // 商品補足情報
                sqlText += " ,ROUGHRROFITRF" + Environment.NewLine;                 // 粗利額
                sqlText += " ,ROUGHRATERF" + Environment.NewLine;                   // 粗利率
                sqlText += " ,ANSWERLIMITDATERF" + Environment.NewLine;             // 回答期限
                sqlText += " ,COMMENTDTLRF" + Environment.NewLine;                  // 備考(明細)
                sqlText += " ,SHELFNORF" + Environment.NewLine;                     // 棚番
                sqlText += " ,PMACPTANODRSTATUSRF" + Environment.NewLine;           // PM受注ステータス
                sqlText += " ,PMSALESSLIPNUMRF" + Environment.NewLine;              // PM売上伝票番号
                sqlText += " ,PMSALESROWNORF" + Environment.NewLine;                // PM売上行番号
                sqlText += " ,PMWAREHOUSECDRF" + Environment.NewLine;               // PM倉庫コード
                sqlText += " ,PMWAREHOUSENAMERF" + Environment.NewLine;             // PM倉庫名称
                sqlText += " ,PMSHELFNORF" + Environment.NewLine;                   // PM棚番
                sqlText += " ,PMPRSNTCOUNTRF" + Environment.NewLine;                // PM現在個数
                // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                sqlText += " ,PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;        // PM主管倉庫コード
                sqlText += " ,PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;      // PM主管倉庫名称
                sqlText += " ,PMMAINMNGSHELFNORF" + Environment.NewLine;            // PM主管棚番
                sqlText += " ,PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;         // PM主管現在個数
                // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                sqlText += " ,GOODSSPCLINSTRUCTIONRF" + Environment.NewLine;        // 商品規格・特記事項
                // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------->>>>>
                sqlText += " ,MKRSUGGESTRTPRICRF" + Environment.NewLine;
                sqlText += " ,OPENPRICEDIVRF" + Environment.NewLine;
                // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------<<<<<
                //>>>2012/06/11
                //// 2012/04/12 Add >>> 
                //sqlText += " ,PSMNGNO" + Environment.NewLine;                       // PS管理番号
                //// 2012/04/12 Add <<<
                //<<<2012/06/11
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,ANSDELIDATEDIVRF" + Environment.NewLine;
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,GOODSSPECIALNTFORFACRF" + Environment.NewLine;
                sqlText += " ,GOODSSPECIALNTFORCOWRF" + Environment.NewLine;
                sqlText += " ,PRMSETDTLNAME2FORFACRF" + Environment.NewLine;
                sqlText += " ,PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                sqlText += " ,PRMSETDTLNO2RF" + Environment.NewLine;
                sqlText += " ,PRMSETDTLNAME2RF" + Environment.NewLine;
                sqlText += " ,STOCKSTATUSDIVRF" + Environment.NewLine;
                // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
                // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sqlText += " ,INQBLUTYPTTHCDRF" + Environment.NewLine;
                sqlText += " ,INQBLUTYPTSBCDRF" + Environment.NewLine;
                sqlText += " ,ANSBLUTYPTTHCDRF" + Environment.NewLine;
                sqlText += " ,ANSBLUTYPTSBCDRF" + Environment.NewLine;
                sqlText += " ,ANSBLGOODSCODERF" + Environment.NewLine;
                sqlText += " ,ANSBLGOODSDRCODERF" + Environment.NewLine;
                // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                sqlText += "FROM" + Environment.NewLine;
                sqlText += "  SCMACODSETDTRF WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += "WHERE" + Environment.NewLine;
                sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;

                //企業コード
                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.EnterpriseCode);

                if (string.IsNullOrEmpty(paraSCMReadWork.SalesSlipNum) == false)
                {
                    //売上伝票番号
                    sqlText += "  AND PMACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                    sqlText += "  AND PMSALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;

                    SqlParameter findAcptAnOdrStatus = sqlCommand.Parameters.Add("@FINDACPTANODRSTATUS", SqlDbType.Int);
                    findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(paraSCMReadWork.AcptAnOdrStatus);

                    SqlParameter findSalesSlipNum = sqlCommand.Parameters.Add("@FINDSALESSLIPNUM", SqlDbType.NChar);
                    findSalesSlipNum.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.SalesSlipNum);

                }
                else
                {
                    //問合せ番号
                    sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;

                    SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);
                    findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(paraSCMReadWork.InquiryNumber);

                }

                //問合せ元企業コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalEpCd.Trim()) == false)	//@@@@20230303
                {
                    sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;

                    SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);
                    findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalEpCd);
                }

                //問合せ元拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOriginalSecCd) == false)
                {
                    sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;

                    SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);
                    findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOriginalSecCd);
                }

                //問い合わせ先拠点コード
                if (string.IsNullOrEmpty(paraSCMReadWork.InqOtherSecCd) == false)
                {
                    sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;

                    SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);
                    findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(paraSCMReadWork.InqOtherSecCd);
                }
                
                sqlCommand.CommandText = sqlText;
                # endregion

                myReader = sqlCommand.ExecuteReader();

                while (myReader.Read())
                {
                    retSCMAcOdrSetDtWorkList = new ArrayList();

                    SCMAcOdSetDtWork asWork = CopyToSCMAcOdSetDtAsWorkFromReader(ref myReader);

                    retSCMAcOdrSetDtWorkList.Add(asWork);
                }

                if (!myReader.IsClosed)
                {
                    myReader.Close();
                }

                if (retSCMAcOdrSetDtWorkList != null && retSCMAcOdrSetDtWorkList.Count != 0)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }
        // -- ADD 2011/08/10   ------ <<<<<<

        # endregion

        # region [ScmWrite]
        /// <summary>
        /// SCM関連データ情報を追加・更新します。
        /// </summary>
        /// <param name="retScmCsObj">追加・更新するSCM関連データ情報を含む CustomSerializeArrayList</param>
        /// <param name="writemode">更新モード 0:Insertのみ, 1:UpDateInsert</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : retScmCsObj に格納されているSCM関連データ情報を追加・更新します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        public int ScmWrite(ref object retScmCsObj, int writemode)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlConnection sqlConnection = null;
            SqlTransaction sqlTransaction = null;

            try
            {
                // パラメータのキャスト
                CustomSerializeArrayList retScmCsList = retScmCsObj as CustomSerializeArrayList;

                // コネクション生成
                sqlConnection = this.CreateSqlConnection(true);

                // トランザクション開始
                sqlTransaction = this.CreateTransaction(ref sqlConnection);

                // write実行
                foreach (CustomSerializeArrayList retCsList in retScmCsList)
                {
                    CustomSerializeArrayList retScmCsListSub = retCsList;

                    status = this.ScmWrite(ref retScmCsListSub, writemode, ref sqlConnection, ref sqlTransaction);
                }
            }
            catch (Exception ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                base.WriteErrorLog(ex, errmsg, status);
            }
            finally
            {
                if (sqlTransaction != null)
                {
                    if (sqlTransaction.Connection != null)
                    {
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            // コミット
                            sqlTransaction.Commit();
                        }
                        else
                        {
                            // ロールバック
                            sqlTransaction.Rollback();
                        }
                    }

                    sqlTransaction.Dispose();
                    sqlTransaction = null;
                }

                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                    sqlConnection = null;
                }
            }

            return status;
        }

        /// <summary>
        /// SCM関連データ情報を追加・更新します。
        /// </summary>
        /// <param name="scmCsList">追加・更新するSCM関連データ情報を格納する CustomSerializeArrayList</param>
        /// <param name="writemode">更新モード 0:Insertのみ, 1:UpDateInsert</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : scmCsList に格納されているSCM関連データ情報を追加・更新します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        public int ScmWrite(ref CustomSerializeArrayList scmCsList, int writemode ,ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            ArrayList scmAcOdrDataWorkList = null;  
            ArrayList scmAcOdrDtCarWorkList = null;   
            ArrayList scmAcOdrDtlIqWorkList = null;  
            ArrayList scmAcOdrDtlAsWorkList = null;
            ArrayList scmAcOdSetDtAsWorkList = null;  // ADD 2011/08/10
            // --- ADD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
            int dbCommandTimeout = DB_COMMAND_TIMEOUT; // コマンドタイムアウト（秒）//ADD 田建委 2020/08/28 PMKOBETSU-4076の対応 
            this.GetXmlInfo(ref dbCommandTimeout);
            // --- ADD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
            
            //SCM受注データリスト
            SCMAcOdrDataWork scmAcOdrDataWork = ListUtils.Find(scmCsList, typeof(SCMAcOdrDataWork), ListUtils.FindType.Class) as SCMAcOdrDataWork;
            if (scmAcOdrDataWork != null)
            {
                scmAcOdrDataWorkList = new ArrayList();
                scmAcOdrDataWorkList.Add(scmAcOdrDataWork);
            }   

            //SCM受注データ(車両情報)リスト
            SCMAcOdrDtCarWork scmAcOdrDtCarWork = ListUtils.Find(scmCsList, typeof(SCMAcOdrDtCarWork), ListUtils.FindType.Class) as SCMAcOdrDtCarWork;
            if (scmAcOdrDtCarWork != null)
            {
                scmAcOdrDtCarWorkList = new ArrayList();
                scmAcOdrDtCarWorkList.Add(scmAcOdrDtCarWork);
            }

            //SCM受注明細データ(問合せ・発注)リスト
            scmAcOdrDtlIqWorkList = ListUtils.Find(scmCsList, typeof(SCMAcOdrDtlIqWork), ListUtils.FindType.Array) as ArrayList;

            //SCM受注明細データ(回答)リスト
            scmAcOdrDtlAsWorkList = ListUtils.Find(scmCsList, typeof(SCMAcOdrDtlAsWork), ListUtils.FindType.Array) as ArrayList;

            // -- ADD 2011/08/10   ------ >>>>>>
            //SCM受注セット部品データリスト
            scmAcOdSetDtAsWorkList = ListUtils.Find(scmCsList, typeof(SCMAcOdSetDtWork), ListUtils.FindType.Array) as ArrayList;
            // -- ADD 2011/08/10   ------ <<<<<<

            //SCM受注データ
            if (scmAcOdrDataWorkList != null)
            {
                if (writemode == 0)
                {
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
                    //status = InsertSCMAcOdrDataWorkProc(ref scmAcOdrDataWorkList, ref sqlConnection, ref sqlTransaction);
                    status = InsertSCMAcOdrDataWorkProc(ref scmAcOdrDataWorkList, ref sqlConnection, ref sqlTransaction, dbCommandTimeout);
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
                }
                else
                {
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
                    //status = WriteSCMAcOdrDataWorkProc(ref scmAcOdrDataWorkList, ref sqlConnection, ref sqlTransaction);
                    status = WriteSCMAcOdrDataWorkProc(ref scmAcOdrDataWorkList, ref sqlConnection, ref sqlTransaction, dbCommandTimeout);
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
                }
            }

            //SCM受注データ(車両情報)
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL && scmAcOdrDtCarWorkList != null)
            {
                // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
                //status = WriteSCMAcOdrDtCarWorkProc(ref scmAcOdrDtCarWorkList, ref sqlConnection, ref sqlTransaction);
                status = WriteSCMAcOdrDtCarWorkProc(ref scmAcOdrDtCarWorkList, ref sqlConnection, ref sqlTransaction, dbCommandTimeout);
                // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
            }

            //SCM受注明細(問合せ・発注)
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL && scmAcOdrDtlIqWorkList != null)
            {
                if (writemode == 0)
                {
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
                    //status = InsertSCMAcOdrDtlIqWorkProc(ref scmAcOdrDtlIqWorkList, ref sqlConnection, ref sqlTransaction);
                    status = InsertSCMAcOdrDtlIqWorkProc(ref scmAcOdrDtlIqWorkList, ref sqlConnection, ref sqlTransaction, dbCommandTimeout);
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
                }
                else
                {
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
                    //status = WriteSCMAcOdrDtlIqWorkProc(ref scmAcOdrDtlIqWorkList, ref sqlConnection, ref sqlTransaction);
                    status = WriteSCMAcOdrDtlIqWorkProc(ref scmAcOdrDtlIqWorkList, ref sqlConnection, ref sqlTransaction, dbCommandTimeout);
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
                }
            }

            //SCM受注明細(回答)
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL && scmAcOdrDtlAsWorkList != null)
            {
                if (writemode == 0)
                {
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
                    //status = InsertSCMAcOdrDtlAsWorkProc(ref scmAcOdrDtlAsWorkList, ref sqlConnection, ref sqlTransaction);
                    status = InsertSCMAcOdrDtlAsWorkProc(ref scmAcOdrDtlAsWorkList, ref sqlConnection, ref sqlTransaction, dbCommandTimeout);
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
                }
                else
                {
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
                    //status = WriteSCMAcOdrDtlAsWorkProc(ref scmAcOdrDtlAsWorkList, ref sqlConnection, ref sqlTransaction);
                    status = WriteSCMAcOdrDtlAsWorkProc(ref scmAcOdrDtlAsWorkList, ref sqlConnection, ref sqlTransaction, dbCommandTimeout);
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
                }
            }

            // -- ADD 2011/08/10   ------ >>>>>>

            //SCM受注セット部品データ
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL && scmAcOdSetDtAsWorkList != null)
            {
                if (writemode == 0)
                {
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
                    //status = InsertSCMAcOdSetDtAsWorkProc(ref scmAcOdSetDtAsWorkList, ref sqlConnection, ref sqlTransaction);
                    status = InsertSCMAcOdSetDtAsWorkProc(ref scmAcOdSetDtAsWorkList, ref sqlConnection, ref sqlTransaction, dbCommandTimeout);
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
                }
                else
                {
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
                    //status = WriteSCMAcOdSetDtAsWorkProc(ref scmAcOdSetDtAsWorkList, ref sqlConnection, ref sqlTransaction);
                    status = WriteSCMAcOdSetDtAsWorkProc(ref scmAcOdSetDtAsWorkList, ref sqlConnection, ref sqlTransaction, dbCommandTimeout);
                    // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
                }
            }

            // -- ADD 2011/08/10   ------ <<<<<<

            return status;
        }

        /// <summary>
        /// SCM受注データ情報を追加します。
        /// </summary>
        /// <param name="scmAcOdrDataWorkList">追加するSCM受注データ情報を格納する ArrayList</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <param name="dbCommandTimeout">コマンドタイムアウト</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : scmAcOdrDataWorkList に格納されているSCM受注データ情報を追加します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        /// <br>Update Note: 2020/08/28 田建委</br>
        /// <br>             PMKOBETSU-4076 タイムアウト設定</br>
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
        //private int InsertSCMAcOdrDataWorkProc(ref ArrayList scmAcOdrDataWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        private int InsertSCMAcOdrDataWorkProc(ref ArrayList scmAcOdrDataWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction, int dbCommandTimeout)
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlCommand sqlCommand = null;

            ArrayList al = new ArrayList();
            try
            {
                if (scmAcOdrDataWorkList != null)
                {
                    string sqlText = string.Empty;
                    sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);

                    # region [INSERT文]
                    sqlText += "  INSERT INTO SCMACODRDATARF (" + Environment.NewLine;
                    sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                    sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                    sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                    sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                    sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                    sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                    sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                    sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                    sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                    sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                    sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                    sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                    sqlText += " ,CUSTOMERCODERF" + Environment.NewLine;
                    sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                    sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                    sqlText += " ,ANSWERDIVCDRF" + Environment.NewLine;
                    sqlText += " ,JUDGEMENTDATERF" + Environment.NewLine;
                    sqlText += " ,INQORDNOTERF" + Environment.NewLine;
                    sqlText += " ,APPENDINGFILERF" + Environment.NewLine;
                    sqlText += " ,APPENDINGFILENMRF" + Environment.NewLine;
                    sqlText += " ,INQEMPLOYEECDRF" + Environment.NewLine;
                    sqlText += " ,INQEMPLOYEENMRF" + Environment.NewLine;
                    sqlText += " ,ANSEMPLOYEECDRF" + Environment.NewLine;
                    sqlText += " ,ANSEMPLOYEENMRF" + Environment.NewLine;
                    sqlText += " ,INQUIRYDATERF" + Environment.NewLine;
                    sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                    sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                    sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;
                    sqlText += " ,SALESSUBTOTALTAXRF" + Environment.NewLine;
                    sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                    sqlText += " ,INQORDANSDIVCDRF" + Environment.NewLine;
                    sqlText += " ,RECEIVEDATETIMERF" + Environment.NewLine;
                    // 2010/05/26 >>>
                    //sqlText += " ,ANSWERCREATEDIVRF)" + Environment.NewLine;
                    sqlText += " ,ANSWERCREATEDIVRF" + Environment.NewLine;
                    sqlText += " ,CANCELDIVRF" + Environment.NewLine;
                    sqlText += " ,CMTCOOPRTDIVRF" + Environment.NewLine;
                    sqlText += " ,SFPMCPRTINSTSLIPNORF" + Environment.NewLine;  //ADD 2011/05/20
                    sqlText += " ,ACCEPTORORDERKINDRF" + Environment.NewLine;  //ADD 2011/08/10
                    // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,TABUSEDIVRF" + Environment.NewLine;
                    // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                    sqlText += " ,CARMNGCODERF" + Environment.NewLine;
                    // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                    // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                    sqlText += " ,AUTOANSMTHDRF" + Environment.NewLine;
                    // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                    sqlText += " )" + Environment.NewLine;
                    // 2010/05/26 <<<
                    sqlText += "  VALUES" + Environment.NewLine;
                    sqlText += "  (@CREATEDATETIME" + Environment.NewLine;
                    sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                    sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                    sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                    sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                    sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                    sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                    sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                    sqlText += " ,@INQORIGINALEPCD" + Environment.NewLine;
                    sqlText += " ,@INQORIGINALSECCD" + Environment.NewLine;
                    sqlText += " ,@INQOTHEREPCD" + Environment.NewLine;
                    sqlText += " ,@INQOTHERSECCD" + Environment.NewLine;
                    sqlText += " ,@INQUIRYNUMBER" + Environment.NewLine;
                    sqlText += " ,@CUSTOMERCODE" + Environment.NewLine;
                    sqlText += " ,@UPDATEDATE" + Environment.NewLine;
                    sqlText += " ,@UPDATETIME" + Environment.NewLine;
                    sqlText += " ,@ANSWERDIVCD" + Environment.NewLine;
                    sqlText += " ,@JUDGEMENTDATE" + Environment.NewLine;
                    sqlText += " ,@INQORDNOTE" + Environment.NewLine;
                    sqlText += " ,@APPENDINGFILE" + Environment.NewLine;
                    sqlText += " ,@APPENDINGFILENM" + Environment.NewLine;
                    sqlText += " ,@INQEMPLOYEECD" + Environment.NewLine;
                    sqlText += " ,@INQEMPLOYEENM" + Environment.NewLine;
                    sqlText += " ,@ANSEMPLOYEECD" + Environment.NewLine;
                    sqlText += " ,@ANSEMPLOYEENM" + Environment.NewLine;
                    sqlText += " ,@INQUIRYDATE" + Environment.NewLine;
                    sqlText += " ,@ACPTANODRSTATUS" + Environment.NewLine;
                    sqlText += " ,@SALESSLIPNUM" + Environment.NewLine;
                    sqlText += " ,@SALESTOTALTAXINC" + Environment.NewLine;
                    sqlText += " ,@SALESSUBTOTALTAX" + Environment.NewLine;
                    sqlText += " ,@INQORDDIVCD" + Environment.NewLine;
                    sqlText += " ,@INQORDANSDIVCD" + Environment.NewLine;
                    sqlText += " ,@RECEIVEDATETIME" + Environment.NewLine;
                    // 2010/05/26 >>>
                    //sqlText += " ,@ANSWERCREATEDIV)" + Environment.NewLine;
                    sqlText += " ,@ANSWERCREATEDIV" + Environment.NewLine;
                    sqlText += " ,@CANCELDIV" + Environment.NewLine;
                    sqlText += " ,@CMTCOOPRTDIV" + Environment.NewLine;
                    sqlText += " ,@SFPMCPRTINSTSLIPNO" + Environment.NewLine;  //ADD 2011/05/20
                    sqlText += " ,@ACCEPTORORDERKIND" + Environment.NewLine;  //ADD 2011/08/10
                    // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,@TABUSEDIV" + Environment.NewLine;
                    // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                    sqlText += " ,@CARMNGCODE" + Environment.NewLine;
                    // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                    // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                    sqlText += " ,@AUTOANSMTHD" + Environment.NewLine;
                    // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                    sqlText += " )" + Environment.NewLine;
                    // 2010/05/26 <<<
                    sqlCommand.CommandText = sqlText;
                    # endregion


                    for (int i = 0; i < scmAcOdrDataWorkList.Count; i++)
                    {
                        SCMAcOdrDataWork sCMAcOdrDataWork = scmAcOdrDataWorkList[i] as SCMAcOdrDataWork;
                        sqlCommand.Parameters.Clear();

                        // 登録ヘッダ情報を設定
                        object obj = (object)this;
                        IFileHeader flhd = (IFileHeader)sCMAcOdrDataWork;
                        FileHeader fileHeader = new FileHeader(obj);
                        fileHeader.SetInsertHeader(ref flhd, obj);

                        //Parameterオブジェクトの作成(更新用)
                        SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);  // 作成日時
                        SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);  // 更新日時
                        SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                        SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);  // GUID
                        SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);  // 更新従業員コード
                        SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);  // 更新アセンブリID1
                        SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);  // 更新アセンブリID2
                        SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);  // 論理削除区分
                        SqlParameter paraInqOriginalEpCd = sqlCommand.Parameters.Add("@INQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                        SqlParameter paraInqOriginalSecCd = sqlCommand.Parameters.Add("@INQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                        SqlParameter paraInqOtherEpCd = sqlCommand.Parameters.Add("@INQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                        SqlParameter paraInqOtherSecCd = sqlCommand.Parameters.Add("@INQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                        SqlParameter paraInquiryNumber = sqlCommand.Parameters.Add("@INQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                        SqlParameter paraCustomerCode = sqlCommand.Parameters.Add("@CUSTOMERCODE", SqlDbType.Int);  // 得意先コード
                        SqlParameter paraUpdateDate = sqlCommand.Parameters.Add("@UPDATEDATE", SqlDbType.Int);  // 更新年月日
                        SqlParameter paraUpdateTime = sqlCommand.Parameters.Add("@UPDATETIME", SqlDbType.Int);  // 更新時間
                        SqlParameter paraAnswerDivCd = sqlCommand.Parameters.Add("@ANSWERDIVCD", SqlDbType.Int);  // 回答区分
                        SqlParameter paraJudgementDate = sqlCommand.Parameters.Add("@JUDGEMENTDATE", SqlDbType.Int);  // 確定日
                        SqlParameter paraInqOrdNote = sqlCommand.Parameters.Add("@INQORDNOTE", SqlDbType.NVarChar);  // 問合せ・発注備考
                        SqlParameter paraAppendingFile = sqlCommand.Parameters.Add("@APPENDINGFILE", SqlDbType.VarBinary);  // 添付ファイル
                        SqlParameter paraAppendingFileNm = sqlCommand.Parameters.Add("@APPENDINGFILENM", SqlDbType.NVarChar);  // 添付ファイル名
                        SqlParameter paraInqEmployeeCd = sqlCommand.Parameters.Add("@INQEMPLOYEECD", SqlDbType.NChar);  // 問合せ従業員コード
                        SqlParameter paraInqEmployeeNm = sqlCommand.Parameters.Add("@INQEMPLOYEENM", SqlDbType.NVarChar);  // 問合せ従業員名称
                        SqlParameter paraAnsEmployeeCd = sqlCommand.Parameters.Add("@ANSEMPLOYEECD", SqlDbType.NChar);  // 回答従業員コード
                        SqlParameter paraAnsEmployeeNm = sqlCommand.Parameters.Add("@ANSEMPLOYEENM", SqlDbType.NVarChar);  // 回答従業員名称
                        SqlParameter paraInquiryDate = sqlCommand.Parameters.Add("@INQUIRYDATE", SqlDbType.Int);  // 問合せ日
                        SqlParameter paraAcptAnOdrStatus = sqlCommand.Parameters.Add("@ACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                        SqlParameter paraSalesSlipNum = sqlCommand.Parameters.Add("@SALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号
                        SqlParameter paraSalesTotalTaxInc = sqlCommand.Parameters.Add("@SALESTOTALTAXINC", SqlDbType.BigInt);  // 売上伝票合計（税込み）
                        SqlParameter paraSalesSubtotalTax = sqlCommand.Parameters.Add("@SALESSUBTOTALTAX", SqlDbType.BigInt);  // 売上小計（税）
                        SqlParameter paraInqOrdDivCd = sqlCommand.Parameters.Add("@INQORDDIVCD", SqlDbType.Int);  // 問合せ・発注種別
                        SqlParameter paraInqOrdAnsDivCd = sqlCommand.Parameters.Add("@INQORDANSDIVCD", SqlDbType.Int);  // 問発・回答種別
                        SqlParameter paraReceiveDateTime = sqlCommand.Parameters.Add("@RECEIVEDATETIME", SqlDbType.BigInt);  // 受信日時
                        SqlParameter paraAnswerCreateDiv = sqlCommand.Parameters.Add("@ANSWERCREATEDIV", SqlDbType.Int);  // 回答作成区分
                        // 2010/05/24 Add >>>
                        SqlParameter paraCancelDiv = sqlCommand.Parameters.Add("@FINDCANCELDIV", SqlDbType.SmallInt);  // キャンセル区分
                        SqlParameter paraCMTCooprtDiv = sqlCommand.Parameters.Add("@FINDCMTCOOPRTDIV", SqlDbType.SmallInt);  // CMT連携区分
                        // 2010/05/24 Add <<<
                        SqlParameter paraSfPmCprtInstSlipNo = sqlCommand.Parameters.Add("@SFPMCPRTINSTSLIPNO", SqlDbType.NVarChar);  // SF-PM連携指示書番号  //ADD 2011/05/20
                        SqlParameter paraAcceptOrOrderKind = sqlCommand.Parameters.Add("@ACCEPTORORDERKIND", SqlDbType.Int);  // 受発注種別  // ADD 2011/08/10
                        // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraTabUseDiv = sqlCommand.Parameters.Add("@TABUSEDIV", SqlDbType.Int);  // タブレット使用区分
                        // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                        SqlParameter paraCarMngCode = sqlCommand.Parameters.Add("@CARMNGCODE", SqlDbType.NChar);  // 車両管理コード
                        // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                        // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                        SqlParameter paraAutoAnsMthd = sqlCommand.Parameters.Add("@AUTOANSMTHD", SqlDbType.SmallInt);  // 自動回答方式
                        // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<

                        //Parameterオブジェクトへ値設定
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDataWork.CreateDateTime);  // 作成日時
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDataWork.UpdateDateTime);  // 更新日時
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.EnterpriseCode);  // 企業コード
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDataWork.FileHeaderGuid);  // GUID
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.UpdEmployeeCode);  // 更新従業員コード
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.UpdAssemblyId1);  // 更新アセンブリID1
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.UpdAssemblyId2);  // 更新アセンブリID2
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.LogicalDeleteCode);  // 論理削除区分
                        paraInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOriginalEpCd);  // 問合せ元企業コード
                        paraInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        paraInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOtherEpCd);  // 問合せ先企業コード
                        paraInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOtherSecCd);  // 問合せ先拠点コード
                        paraInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDataWork.InquiryNumber);  // 問合せ番号
                        paraCustomerCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.CustomerCode);  // 得意先コード
                        if (sCMAcOdrDataWork.UpdateDate == DateTime.MinValue)
                        {
                            paraUpdateDate.Value = 0;  // 更新年月日
                        }
                        else
                        {
                            paraUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDataWork.UpdateDate);  // 更新年月日
                        }
                        paraUpdateTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.UpdateTime);  // 更新時間
                        paraAnswerDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.AnswerDivCd);  // 回答区分
                        paraJudgementDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDataWork.JudgementDate);  // 確定日
                        paraInqOrdNote.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOrdNote);  // 問合せ・発注備考
                        paraAppendingFile.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDataWork.AppendingFile);  // 添付ファイル
                        paraAppendingFileNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.AppendingFileNm);  // 添付ファイル名
                        paraInqEmployeeCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqEmployeeCd);  // 問合せ従業員コード
                        paraInqEmployeeNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqEmployeeNm);  // 問合せ従業員名称
                        paraAnsEmployeeCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.AnsEmployeeCd);  // 回答従業員コード
                        paraAnsEmployeeNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.AnsEmployeeNm);  // 回答従業員名称
                        paraInquiryDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDataWork.InquiryDate);  // 問合せ日
                        paraAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.AcptAnOdrStatus);  // 受注ステータス
                        paraSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.SalesSlipNum);  // 売上伝票番号
                        paraSalesTotalTaxInc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDataWork.SalesTotalTaxInc);  // 売上伝票合計（税込み）
                        paraSalesSubtotalTax.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDataWork.SalesSubtotalTax);  // 売上小計（税）
                        paraInqOrdDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.InqOrdDivCd);  // 問合せ・発注種別
                        paraInqOrdAnsDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.InqOrdAnsDivCd);  // 問発・回答種別
                        paraReceiveDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDataWork.ReceiveDateTime);  // 受信日時
                        paraAnswerCreateDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.AnswerCreateDiv);  // 回答作成区分
                        // 2010/05/26 Add >>>
                        paraCancelDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDataWork.CancelDiv);  // キャンセル区分
                        paraCMTCooprtDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDataWork.CMTCooprtDiv);  // CMT連携区分
                        // 2010/05/26 Add <<<
                        paraSfPmCprtInstSlipNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.SfPmCprtInstSlipNo);  // SF-PM連携指示書番号  //ADD 2011/05/20
                        paraAcceptOrOrderKind.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDataWork.AcceptOrOrderKind);  // 受発注種別 //ADD 2011/08/10
                        // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                        paraTabUseDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.TabUseDiv);  // タブレット使用区分
                        // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                        paraCarMngCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.CarMngCode);  // 車両管理コード
                        // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                        // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                        paraAutoAnsMthd.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDataWork.AutoAnsMthd);  // 自動回答方式
                        // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                        sqlCommand.CommandTimeout = dbCommandTimeout; //ADD 田建委 2020/08/28 PMKOBETSU-4076の対応 
                        sqlCommand.ExecuteNonQuery();
                        al.Add(sCMAcOdrDataWork);
                    }
                }

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            scmAcOdrDataWorkList = al;

            return status;
        }

        // --- ADD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
        #region 設定ファイル取得
        /// <summary>
        /// 設定ファイル取得
        /// </summary>
        /// <param name="dbCommandTimeout">タイムアウト時間</param>
        /// <remarks>
        /// <br>Note         : 設定ファイル取得処理を行う</br>
        /// <br>Programmer   : 田建委</br>
        /// <br>Date         : 2020/08/28</br>
        /// </remarks>
        private void GetXmlInfo(ref int dbCommandTimeout)
        {
            // 初期値設定
            string fileName = this.InitializeXmlSettings();

            if (fileName != string.Empty)
            {
                XmlReaderSettings settings = new XmlReaderSettings();

                try
                {
                    using (XmlReader reader = XmlReader.Create(fileName, settings))
                    {
                        while (reader.Read())
                        {
                            //タイムアウト時間を取得
                            if (reader.IsStartElement("DbCommandTimeout")) dbCommandTimeout = reader.ReadElementContentAsInt();
                        }
                    }
                }
                catch
                {
                    base.WriteErrorLog(null, "設定ファイル取得エラー");
                }
            }

        }
        #endregion // 設定ファイル取得

        #region XMLファイル操作
        /// <summary>
        /// XMLファイル名取得
        /// </summary>
        /// <returns>XMLファイル名</returns>
        /// <remarks>
        /// <br>Note         : XML情報取得処理を行う</br>
        /// <br>Programmer   : 田建委</br>
        /// <br>Date         : 2020/08/28</br>
        /// </remarks>
        private string InitializeXmlSettings()
        {
            string homeDir = string.Empty;
            string path = string.Empty;

            try
            {
                // カレントディレクトリ取得
                homeDir = this.GetCurrentDirectory();

                // ディレクトリ情報にXMLファイル名を連結
                path = Path.Combine(homeDir, XML_FILE_NAME);

                // ファイルが存在しない場合は空白にする
                if (!File.Exists(path))
                {
                    path = string.Empty;
                }
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "SalesSlipDB.InitializeXmlSettings:" + ex.Message);
            }
            return path;
        }
        #endregion //XMLファイル操作

        #region カレントフォルダ
        /// <summary>
        /// カレントフォルダ取得
        /// </summary>
        /// <returns>XMLファイル名</returns>
        /// <remarks>
        /// <br>Note         : カレントフォルダ処理を行う</br>
        /// <br>Programmer   : 田建委</br>
        /// <br>Date         : 2020/08/28</br>
        /// </remarks>
        private string GetCurrentDirectory()
        {
            string defaultDir = string.Empty;
            string homeDir = string.Empty;

            // XML格納ディレクトリ取得
            try
            {
                // dll格納パスを初期ディレクトリとする
                defaultDir = AppDomain.CurrentDomain.BaseDirectory.TrimEnd(); // 末尾の「\」は常になし

                // レジストリ情報よりUSER_APのキー情報を取得
                RegistryKey keyForUSERAP = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Broadleaf\Service\Partsman\USER_AP");

                if (keyForUSERAP == null)
                {
                    keyForUSERAP = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\WOW6432Node\Broadleaf\Service\Partsman\USER_AP");
                    if (keyForUSERAP == null)
                    {
                        // レジストリ情報を取得できない場合は初期ディレクトリ // 運用上ありえないケース
                        homeDir = defaultDir;
                    }
                    else
                    {
                        homeDir = keyForUSERAP.GetValue("InstallDirectory", defaultDir).ToString();
                    }
                }
                else
                {
                    homeDir = keyForUSERAP.GetValue("InstallDirectory", defaultDir).ToString();
                }

                // 取得ディレクトリが存在しない場合は初期ディレクトリを設定
                // 運用上ありえないケース
                if (!Directory.Exists(homeDir))
                {
                    homeDir = defaultDir;
                }
            }
            catch (Exception ex)
            {
                //USER_APのLOGフォルダにログ出力
                base.WriteErrorLog(ex, "SalesSlipDB.GetCurrentDirectory:" + ex.Message);
                if (!string.IsNullOrEmpty(defaultDir))
                {
                    homeDir = defaultDir;
                }
            }
            return homeDir;
        }
        #endregion // カレントフォルダ
        // --- ADD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<

        /// <summary>
        /// SCM受注データ情報を追加・更新します。
        /// </summary>
        /// <param name="scmAcOdrDataWorkList">追加・更新するSCM受注データ情報を格納する ArrayList</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <param name="dbCommandTimeout">コマンドタイムアウト</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : scmAcOdrDataWorkList に格納されているSCM受注データ情報を追加・更新します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.06.17</br>
        /// <br>Update Note: 2020/08/28 田建委</br>
        /// <br>             PMKOBETSU-4076 タイムアウト設定</br> 
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
        //private int WriteSCMAcOdrDataWorkProc(ref ArrayList scmAcOdrDataWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        private int WriteSCMAcOdrDataWorkProc(ref ArrayList scmAcOdrDataWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction, int dbCommandTimeout)
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            ArrayList al = new ArrayList();
            try
            {
                if (scmAcOdrDataWorkList != null)
                {
                    string sqlText = string.Empty;
                    sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);

                    for (int i = 0; i < scmAcOdrDataWorkList.Count; i++)
                    {
                        SCMAcOdrDataWork sCMAcOdrDataWork = scmAcOdrDataWorkList[i] as SCMAcOdrDataWork;

                        # region [SELECT文]
                        sqlText = string.Empty;
                        sqlText += "SELECT" + Environment.NewLine;
                        sqlText += "  UPDATEDATETIMERF" + Environment.NewLine;
                        sqlText += "FROM" + Environment.NewLine;
                        sqlText += "  SCMACODRDATARF " + Environment.NewLine;
                        sqlText += "WHERE" + Environment.NewLine;
                        sqlText += "      ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                        sqlText += "  AND INQOTHEREPCDRF = @FINDINQOTHEREPCD" + Environment.NewLine;
                        sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;
                        sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;
                        sqlText += "  AND UPDATEDATERF = @FINDUPDATEDATE" + Environment.NewLine;
                        sqlText += "  AND UPDATETIMERF = @FINDUPDATETIME" + Environment.NewLine;
                        sqlText += "  AND ACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                        sqlText += "  AND SALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;
                        sqlCommand.CommandText = sqlText;
                        # endregion

                        sqlCommand.Parameters.Clear();

                        //Prameterオブジェクトの作成
                        SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                        SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                        SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                        SqlParameter findInqOtherEpCd = sqlCommand.Parameters.Add("@FINDINQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                        SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                        SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                        SqlParameter findUpdateDate = sqlCommand.Parameters.Add("@FINDUPDATEDATE", SqlDbType.Int);  // 更新年月日
                        SqlParameter findUpdateTime = sqlCommand.Parameters.Add("@FINDUPDATETIME", SqlDbType.Int);  // 更新時間
                        SqlParameter findAcptAnOdrStatus = sqlCommand.Parameters.Add("@FINDACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                        SqlParameter findSalesSlipNum = sqlCommand.Parameters.Add("@FINDSALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号

                        //Parameterオブジェクトへ値設定
                        findEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.EnterpriseCode);  // 企業コード
                        findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOriginalEpCd);  // 問合せ元企業コード
                        findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        findInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOtherEpCd);  // 問合せ先企業コード
                        findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOtherSecCd);  // 問合せ先拠点コード
                        findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDataWork.InquiryNumber);  // 問合せ番号
                        if (sCMAcOdrDataWork.UpdateDate == DateTime.MinValue)
                        {
                            findUpdateDate.Value = 0;  // 更新年月日
                        }
                        else
                        {
                            findUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDataWork.UpdateDate);  // 更新年月日
                        }
                        findUpdateTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.UpdateTime);  // 更新時間
                        findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.AcptAnOdrStatus);  // 受注ステータス
                        findSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.SalesSlipNum);  // 売上伝票番号
                        sqlCommand.CommandTimeout = dbCommandTimeout;  //ADD 田建委 2020/08/28 PMKOBETSU-4076の対応
                        myReader = sqlCommand.ExecuteReader();

                        sqlText = string.Empty;

                        if (myReader.Read())
                        {
                            // 既存GUIDデータがある場合で更新日時が異なる場合は排他エラーで戻す
                            DateTime _updateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));// 更新日時

                            if (_updateDateTime != sCMAcOdrDataWork.UpdateDateTime)
                            {
                                if (sCMAcOdrDataWork.UpdateDateTime == DateTime.MinValue)
                                {
                                    // 新規登録で該当データ有りの場合には重複
                                    status = (int)ConstantManagement.DB_Status.ctDB_DUPLICATE;
                                }
                                else
                                {
                                    // 既存データで更新日時違いの場合には排他
                                    status = (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE;
                                }

                                return status;
                            }

                            # region [UPDATE文]
                            sqlText += "  UPDATE SCMACODRDATARF" + Environment.NewLine;
                            sqlText += "  SET" + Environment.NewLine;
                            sqlText += "  CREATEDATETIMERF = @CREATEDATETIME" + Environment.NewLine;
                            sqlText += " ,UPDATEDATETIMERF = @UPDATEDATETIME" + Environment.NewLine;
                            sqlText += " ,ENTERPRISECODERF = @ENTERPRISECODE" + Environment.NewLine;
                            sqlText += " ,FILEHEADERGUIDRF = @FILEHEADERGUID" + Environment.NewLine;
                            sqlText += " ,UPDEMPLOYEECODERF = @UPDEMPLOYEECODE" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID1RF = @UPDASSEMBLYID1" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID2RF = @UPDASSEMBLYID2" + Environment.NewLine;
                            sqlText += " ,LOGICALDELETECODERF = @LOGICALDELETECODE" + Environment.NewLine;
                            sqlText += " ,INQORIGINALEPCDRF = @INQORIGINALEPCD" + Environment.NewLine;
                            sqlText += " ,INQORIGINALSECCDRF = @INQORIGINALSECCD" + Environment.NewLine;
                            sqlText += " ,INQOTHEREPCDRF = @INQOTHEREPCD" + Environment.NewLine;
                            sqlText += " ,INQOTHERSECCDRF = @INQOTHERSECCD" + Environment.NewLine;
                            sqlText += " ,INQUIRYNUMBERRF = @INQUIRYNUMBER" + Environment.NewLine;
                            sqlText += " ,CUSTOMERCODERF = @CUSTOMERCODE" + Environment.NewLine;
                            sqlText += " ,UPDATEDATERF = @UPDATEDATE" + Environment.NewLine;
                            sqlText += " ,UPDATETIMERF = @UPDATETIME" + Environment.NewLine;
                            sqlText += " ,ANSWERDIVCDRF = @ANSWERDIVCD" + Environment.NewLine;
                            sqlText += " ,JUDGEMENTDATERF = @JUDGEMENTDATE" + Environment.NewLine;
                            sqlText += " ,INQORDNOTERF = @INQORDNOTE" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILERF = @APPENDINGFILE" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILENMRF = @APPENDINGFILENM" + Environment.NewLine;
                            sqlText += " ,INQEMPLOYEECDRF = @INQEMPLOYEECD" + Environment.NewLine;
                            sqlText += " ,INQEMPLOYEENMRF = @INQEMPLOYEENM" + Environment.NewLine;
                            sqlText += " ,ANSEMPLOYEECDRF = @ANSEMPLOYEECD" + Environment.NewLine;
                            sqlText += " ,ANSEMPLOYEENMRF = @ANSEMPLOYEENM" + Environment.NewLine;
                            sqlText += " ,INQUIRYDATERF = @INQUIRYDATE" + Environment.NewLine;
                            sqlText += " ,ACPTANODRSTATUSRF = @ACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += " ,SALESSLIPNUMRF = @SALESSLIPNUM" + Environment.NewLine;
                            sqlText += " ,SALESTOTALTAXINCRF = @SALESTOTALTAXINC" + Environment.NewLine;
                            sqlText += " ,SALESSUBTOTALTAXRF = @SALESSUBTOTALTAX" + Environment.NewLine;
                            sqlText += " ,INQORDDIVCDRF = @INQORDDIVCD" + Environment.NewLine;
                            sqlText += " ,INQORDANSDIVCDRF = @INQORDANSDIVCD" + Environment.NewLine;
                            sqlText += " ,RECEIVEDATETIMERF = @RECEIVEDATETIME" + Environment.NewLine;
                            sqlText += " ,ANSWERCREATEDIVRF = @ANSWERCREATEDIV" + Environment.NewLine;
                            // 2010/05/26 >>>
                            sqlText += " ,CANCELDIVRF = @CANCELDIV " + Environment.NewLine;
                            sqlText += " ,CMTCOOPRTDIVRF = @CMTCOOPRTDIV" + Environment.NewLine;
                            // 2010/05/26 <<<
                            sqlText += " ,CMTCOOPRTDIVRF = @SFPMCPRTINSTSLIPNO" + Environment.NewLine;  //ADD 2011/05/20
                            sqlText += " ,ACCEPTORORDERKINDRF = @ACCEPTORORDERKIND" + Environment.NewLine; // ADD 2011/08/10
                            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,TABUSEDIVRF = @TABUSEDIV" + Environment.NewLine;
                            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                            sqlText += " ,CARMNGCODERF = @CARMNGCODE" + Environment.NewLine;
                            // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                            sqlText += " ,AUTOANSMTHDRF = @AUTOANSMTHD" + Environment.NewLine;
                            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                            sqlText += "  WHERE" + Environment.NewLine;
                            sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                            sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                            sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                            sqlText += "  AND INQOTHEREPCDRF = @FINDINQOTHEREPCD" + Environment.NewLine;
                            sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;
                            sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;
                            sqlText += "  AND UPDATEDATERF = @FINDUPDATEDATE" + Environment.NewLine;
                            sqlText += "  AND UPDATETIMERF = @FINDUPDATETIME" + Environment.NewLine;
                            sqlText += "  AND ACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += "  AND SALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;
                            sqlCommand.CommandText = sqlText;
                            # endregion

                            // KEYコマンドを再設定
                            findEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.EnterpriseCode);  // 企業コード
                            findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOriginalEpCd);  // 問合せ元企業コード
                            findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOriginalSecCd);  // 問合せ元拠点コード
                            findInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOtherEpCd);  // 問合せ先企業コード
                            findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOtherSecCd);  // 問合せ先拠点コード
                            findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDataWork.InquiryNumber);  // 問合せ番号
                            if (sCMAcOdrDataWork.UpdateDate == DateTime.MinValue)
                            {
                                findUpdateDate.Value = 0;  // 更新年月日
                            }
                            else
                            {
                                findUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDataWork.UpdateDate);  // 更新年月日
                            }
                            findUpdateTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.UpdateTime);  // 更新時間
                            findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.AcptAnOdrStatus);  // 受注ステータス
                            findSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.SalesSlipNum);  // 売上伝票番号

                            // 更新ヘッダ情報を設定
                            object obj = (object)this;
                            IFileHeader flhd = (IFileHeader)sCMAcOdrDataWork;
                            FileHeader fileHeader = new FileHeader(obj);
                            fileHeader.SetUpdateHeader(ref flhd, obj);
                        }
                        else
                        {
                            // 既存GUIDデータが無い場合で更新日時が更新対象データに入っている場合はすでに削除されている意味で排他を戻す
                            if (sCMAcOdrDataWork.UpdateDateTime > DateTime.MinValue)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE;
                                return status;
                            }

                            # region [INSERT文]
                            sqlText += "  INSERT INTO SCMACODRDATARF (" + Environment.NewLine;
                            sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                            sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                            sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                            sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                            sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                            sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                            sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                            sqlText += " ,CUSTOMERCODERF" + Environment.NewLine;
                            sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                            sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                            sqlText += " ,ANSWERDIVCDRF" + Environment.NewLine;
                            sqlText += " ,JUDGEMENTDATERF" + Environment.NewLine;
                            sqlText += " ,INQORDNOTERF" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILERF" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILENMRF" + Environment.NewLine;
                            sqlText += " ,INQEMPLOYEECDRF" + Environment.NewLine;
                            sqlText += " ,INQEMPLOYEENMRF" + Environment.NewLine;
                            sqlText += " ,ANSEMPLOYEECDRF" + Environment.NewLine;
                            sqlText += " ,ANSEMPLOYEENMRF" + Environment.NewLine;
                            sqlText += " ,INQUIRYDATERF" + Environment.NewLine;
                            sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                            sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                            sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;
                            sqlText += " ,SALESSUBTOTALTAXRF" + Environment.NewLine;
                            sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                            sqlText += " ,INQORDANSDIVCDRF" + Environment.NewLine;
                            sqlText += " ,RECEIVEDATETIMERF" + Environment.NewLine;
                            // 2010/05/26 >>>
                            //sqlText += " ,ANSWERCREATEDIVRF)" + Environment.NewLine;
                            sqlText += " ,ANSWERCREATEDIVRF" + Environment.NewLine;
                            sqlText += " ,CANCELDIVRF" + Environment.NewLine;
                            sqlText += " ,CMTCOOPRTDIVRF" + Environment.NewLine;
                            sqlText += " ,SFPMCPRTINSTSLIPNORF" + Environment.NewLine;  //ADD 2011/05/20
                            sqlText += " ,ACCEPTORORDERKINDRF" + Environment.NewLine;  // ADD 2011/08/10
                            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,TABUSEDIVRF" + Environment.NewLine;
                            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                            sqlText += " ,CARMNGCODERF" + Environment.NewLine;
                            // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                            sqlText += " ,AUTOANSMTHDRF" + Environment.NewLine;
                            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                            sqlText += " )" + Environment.NewLine;
                            // 2010/05/26 <<<
                            sqlText += "  VALUES" + Environment.NewLine;
                            sqlText += "  (@CREATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                            sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                            sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                            sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALEPCD" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALSECCD" + Environment.NewLine;
                            sqlText += " ,@INQOTHEREPCD" + Environment.NewLine;
                            sqlText += " ,@INQOTHERSECCD" + Environment.NewLine;
                            sqlText += " ,@INQUIRYNUMBER" + Environment.NewLine;
                            sqlText += " ,@CUSTOMERCODE" + Environment.NewLine;
                            sqlText += " ,@UPDATEDATE" + Environment.NewLine;
                            sqlText += " ,@UPDATETIME" + Environment.NewLine;
                            sqlText += " ,@ANSWERDIVCD" + Environment.NewLine;
                            sqlText += " ,@JUDGEMENTDATE" + Environment.NewLine;
                            sqlText += " ,@INQORDNOTE" + Environment.NewLine;
                            sqlText += " ,@APPENDINGFILE" + Environment.NewLine;
                            sqlText += " ,@APPENDINGFILENM" + Environment.NewLine;
                            sqlText += " ,@INQEMPLOYEECD" + Environment.NewLine;
                            sqlText += " ,@INQEMPLOYEENM" + Environment.NewLine;
                            sqlText += " ,@ANSEMPLOYEECD" + Environment.NewLine;
                            sqlText += " ,@ANSEMPLOYEENM" + Environment.NewLine;
                            sqlText += " ,@INQUIRYDATE" + Environment.NewLine;
                            sqlText += " ,@ACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += " ,@SALESSLIPNUM" + Environment.NewLine;
                            sqlText += " ,@SALESTOTALTAXINC" + Environment.NewLine;
                            sqlText += " ,@SALESSUBTOTALTAX" + Environment.NewLine;
                            sqlText += " ,@INQORDDIVCD" + Environment.NewLine;
                            sqlText += " ,@INQORDANSDIVCD" + Environment.NewLine;
                            sqlText += " ,@RECEIVEDATETIME" + Environment.NewLine;
                            // 2010/05/26 >>>
                            //sqlText += " ,@ANSWERCREATEDIV)" + Environment.NewLine;
                            sqlText += " ,@ANSWERCREATEDIV" + Environment.NewLine;
                            sqlText += " ,@CANCELDIV" + Environment.NewLine;
                            sqlText += " ,@CMTCOOPRTDIV" + Environment.NewLine;
                            sqlText += " ,@SFPMCPRTINSTSLIPNO" + Environment.NewLine;  //ADD 2011/05/20
                            sqlText += " ,@ACCEPTORORDERKIND" + Environment.NewLine;  // ADD 2011/08/10
                            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@TABUSEDIV" + Environment.NewLine;
                            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                            sqlText += " ,@CARMNGCODE" + Environment.NewLine;
                            // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                            sqlText += " ,@AUTOANSMTHD" + Environment.NewLine;
                            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                            sqlText += " )" + Environment.NewLine;
                            // 2010/05/26 <<<
                            sqlCommand.CommandText = sqlText;
                            # endregion

                            // 登録ヘッダ情報を設定
                            object obj = (object)this;
                            IFileHeader flhd = (IFileHeader)sCMAcOdrDataWork;
                            FileHeader fileHeader = new FileHeader(obj);
                            fileHeader.SetInsertHeader(ref flhd, obj);
                        }

                        if (!myReader.IsClosed)
                        {
                            myReader.Close();
                        }

                        //Parameterオブジェクトの作成(更新用)
                        SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);  // 作成日時
                        SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);  // 更新日時
                        SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                        SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);  // GUID
                        SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);  // 更新従業員コード
                        SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);  // 更新アセンブリID1
                        SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);  // 更新アセンブリID2
                        SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);  // 論理削除区分
                        SqlParameter paraInqOriginalEpCd = sqlCommand.Parameters.Add("@INQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                        SqlParameter paraInqOriginalSecCd = sqlCommand.Parameters.Add("@INQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                        SqlParameter paraInqOtherEpCd = sqlCommand.Parameters.Add("@INQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                        SqlParameter paraInqOtherSecCd = sqlCommand.Parameters.Add("@INQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                        SqlParameter paraInquiryNumber = sqlCommand.Parameters.Add("@INQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                        SqlParameter paraCustomerCode = sqlCommand.Parameters.Add("@CUSTOMERCODE", SqlDbType.Int);  // 得意先コード
                        SqlParameter paraUpdateDate = sqlCommand.Parameters.Add("@UPDATEDATE", SqlDbType.Int);  // 更新年月日
                        SqlParameter paraUpdateTime = sqlCommand.Parameters.Add("@UPDATETIME", SqlDbType.Int);  // 更新時間
                        SqlParameter paraAnswerDivCd = sqlCommand.Parameters.Add("@ANSWERDIVCD", SqlDbType.Int);  // 回答区分
                        SqlParameter paraJudgementDate = sqlCommand.Parameters.Add("@JUDGEMENTDATE", SqlDbType.Int);  // 確定日
                        SqlParameter paraInqOrdNote = sqlCommand.Parameters.Add("@INQORDNOTE", SqlDbType.NVarChar);  // 問合せ・発注備考
                        SqlParameter paraAppendingFile = sqlCommand.Parameters.Add("@APPENDINGFILE", SqlDbType.VarBinary);  // 添付ファイル
                        SqlParameter paraAppendingFileNm = sqlCommand.Parameters.Add("@APPENDINGFILENM", SqlDbType.NVarChar);  // 添付ファイル名
                        SqlParameter paraInqEmployeeCd = sqlCommand.Parameters.Add("@INQEMPLOYEECD", SqlDbType.NChar);  // 問合せ従業員コード
                        SqlParameter paraInqEmployeeNm = sqlCommand.Parameters.Add("@INQEMPLOYEENM", SqlDbType.NVarChar);  // 問合せ従業員名称
                        SqlParameter paraAnsEmployeeCd = sqlCommand.Parameters.Add("@ANSEMPLOYEECD", SqlDbType.NChar);  // 回答従業員コード
                        SqlParameter paraAnsEmployeeNm = sqlCommand.Parameters.Add("@ANSEMPLOYEENM", SqlDbType.NVarChar);  // 回答従業員名称
                        SqlParameter paraInquiryDate = sqlCommand.Parameters.Add("@INQUIRYDATE", SqlDbType.Int);  // 問合せ日
                        SqlParameter paraAcptAnOdrStatus = sqlCommand.Parameters.Add("@ACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                        SqlParameter paraSalesSlipNum = sqlCommand.Parameters.Add("@SALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号
                        SqlParameter paraSalesTotalTaxInc = sqlCommand.Parameters.Add("@SALESTOTALTAXINC", SqlDbType.BigInt);  // 売上伝票合計（税込み）
                        SqlParameter paraSalesSubtotalTax = sqlCommand.Parameters.Add("@SALESSUBTOTALTAX", SqlDbType.BigInt);  // 売上小計（税）
                        SqlParameter paraInqOrdDivCd = sqlCommand.Parameters.Add("@INQORDDIVCD", SqlDbType.Int);  // 問合せ・発注種別
                        SqlParameter paraInqOrdAnsDivCd = sqlCommand.Parameters.Add("@INQORDANSDIVCD", SqlDbType.Int);  // 問発・回答種別
                        SqlParameter paraReceiveDateTime = sqlCommand.Parameters.Add("@RECEIVEDATETIME", SqlDbType.BigInt);  // 受信日時
                        SqlParameter paraAnswerCreateDiv = sqlCommand.Parameters.Add("@ANSWERCREATEDIV", SqlDbType.Int);  // 回答作成区分
                        // 2010/05/26 Add >>>
                        SqlParameter paraCancelDiv = sqlCommand.Parameters.Add("@CANCELDIV", SqlDbType.SmallInt);  // キャンセル区分
                        SqlParameter paraCMTCooprtDiv = sqlCommand.Parameters.Add("@CMTCOOPRTDIV", SqlDbType.SmallInt);  // CMT連携区分
                        // 2010/05/26 Add <<<
                        SqlParameter paraSfPmCprtInstSlipNo = sqlCommand.Parameters.Add("@SFPMCPRTINSTSLIPNO", SqlDbType.NVarChar);  // SF-PM連携指示書番号  //ADD 2011/05/20
                        SqlParameter paraAcceptOrOrderKind = sqlCommand.Parameters.Add("@ACCEPTORORDERKIND", SqlDbType.Int);  // 受発注種別 // ADD 2011/08/10
                        // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraTabUseDiv = sqlCommand.Parameters.Add("@TABUSEDIV", SqlDbType.Int);  // タブレット使用区分
                        // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                        SqlParameter paraCarMngCode = sqlCommand.Parameters.Add("@CARMNGCODE", SqlDbType.NChar);  // 車両管理コード
                        // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                        // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                        SqlParameter paraAutoAnsMthd = sqlCommand.Parameters.Add("@AUTOANSMTHD", SqlDbType.SmallInt);  // 自動回答方式
                        // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<

                        //Parameterオブジェクトへ値設定
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDataWork.CreateDateTime);  // 作成日時
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDataWork.UpdateDateTime);  // 更新日時
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.EnterpriseCode);  // 企業コード
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDataWork.FileHeaderGuid);  // GUID
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.UpdEmployeeCode);  // 更新従業員コード
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.UpdAssemblyId1);  // 更新アセンブリID1
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.UpdAssemblyId2);  // 更新アセンブリID2
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.LogicalDeleteCode);  // 論理削除区分
                        paraInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOriginalEpCd);  // 問合せ元企業コード
                        paraInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        paraInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOtherEpCd);  // 問合せ先企業コード
                        paraInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOtherSecCd);  // 問合せ先拠点コード
                        paraInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDataWork.InquiryNumber);  // 問合せ番号
                        paraCustomerCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.CustomerCode);  // 得意先コード
                        if (sCMAcOdrDataWork.UpdateDate == DateTime.MinValue)
                        {
                            paraUpdateDate.Value = 0;  // 更新年月日
                        }
                        else
                        {
                            paraUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDataWork.UpdateDate);  // 更新年月日
                        }
                        paraUpdateTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.UpdateTime);  // 更新時間
                        paraAnswerDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.AnswerDivCd);  // 回答区分
                        paraJudgementDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDataWork.JudgementDate);  // 確定日
                        paraInqOrdNote.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOrdNote);  // 問合せ・発注備考
                        paraAppendingFile.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDataWork.AppendingFile);  // 添付ファイル
                        paraAppendingFileNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.AppendingFileNm);  // 添付ファイル名
                        paraInqEmployeeCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqEmployeeCd);  // 問合せ従業員コード
                        paraInqEmployeeNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqEmployeeNm);  // 問合せ従業員名称
                        paraAnsEmployeeCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.AnsEmployeeCd);  // 回答従業員コード
                        paraAnsEmployeeNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.AnsEmployeeNm);  // 回答従業員名称
                        paraInquiryDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDataWork.InquiryDate);  // 問合せ日
                        paraAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.AcptAnOdrStatus);  // 受注ステータス
                        paraSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.SalesSlipNum);  // 売上伝票番号
                        paraSalesTotalTaxInc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDataWork.SalesTotalTaxInc);  // 売上伝票合計（税込み）
                        paraSalesSubtotalTax.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDataWork.SalesSubtotalTax);  // 売上小計（税）
                        paraInqOrdDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.InqOrdDivCd);  // 問合せ・発注種別
                        paraInqOrdAnsDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.InqOrdAnsDivCd);  // 問発・回答種別
                        paraReceiveDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDataWork.ReceiveDateTime);  // 受信日時
                        paraAnswerCreateDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.AnswerCreateDiv);  // 回答作成区分
                        // 2010/05/26 Add >>>
                        paraCancelDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDataWork.CancelDiv);  // キャンセル区分
                        paraCMTCooprtDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDataWork.CMTCooprtDiv);  // CMT連携区分
                        // 2010/05/26 Add <<<
                        paraSfPmCprtInstSlipNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.SfPmCprtInstSlipNo);  // SF-PM連携指示書番号  //ADD 2011/05/20
                        paraAcceptOrOrderKind.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDataWork.AcceptOrOrderKind);  // 受発注種別  // ADD 2011/08/10
                        // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                        paraTabUseDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.TabUseDiv);  // タブレット使用区分
                        // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                        paraCarMngCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.CarMngCode);  // 車両管理コード
                        // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                        // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                        paraAutoAnsMthd.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDataWork.AutoAnsMthd);  // 自動回答方式
                        // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                        sqlCommand.ExecuteNonQuery();
                        al.Add(sCMAcOdrDataWork);
                    }
                }

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            scmAcOdrDataWorkList = al;

            return status;
        }

        /// <summary>
        /// SCM受注データ(車両情報)情報を追加・更新します。
        /// </summary>
        /// <param name="scmAcOdrDtCarWorkList">追加・更新するSCM受注データ(車両情報)情報を格納する ArrayList</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <param name="dbCommandTimeout">コマンドタイムアウト</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : scmAcOdrDtCarWorkList に格納されているSCM受注データ(車両情報)情報を追加・更新します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        /// <br>Update Note: 2020/08/28 田建委</br>
        /// <br>             PMKOBETSU-4076 タイムアウト設定</br> 
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
        //private int WriteSCMAcOdrDtCarWorkProc(ref ArrayList scmAcOdrDtCarWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        private int WriteSCMAcOdrDtCarWorkProc(ref ArrayList scmAcOdrDtCarWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction, int dbCommandTimeout)
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            ArrayList al = new ArrayList();
            try
            {
                if (scmAcOdrDtCarWorkList != null)
                {
                    string sqlText = string.Empty;
                    sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);

                    for (int i = 0; i < scmAcOdrDtCarWorkList.Count; i++)
                    {
                        SCMAcOdrDtCarWork sCMAcOdrDtCarWork = scmAcOdrDtCarWorkList[i] as SCMAcOdrDtCarWork;

                        # region [SELECT文]
                        sqlText = string.Empty;
                        sqlText += "SELECT" + Environment.NewLine;
                        sqlText += "  UPDATEDATETIMERF" + Environment.NewLine;
                        sqlText += "FROM" + Environment.NewLine;
                        sqlText += "  SCMACODRDTCARRF " + Environment.NewLine;
                        sqlText += "WHERE" + Environment.NewLine;
                        sqlText += "      ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                        sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;
                        sqlText += "  AND ACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                        sqlText += "  AND SALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;
                        sqlCommand.CommandText = sqlText;
                        # endregion

                        sqlCommand.Parameters.Clear();
                        //Prameterオブジェクトの作成
                        SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                        SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                        SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                        SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                        SqlParameter findAcptAnOdrStatus = sqlCommand.Parameters.Add("@FINDACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                        SqlParameter findSalesSlipNum = sqlCommand.Parameters.Add("@FINDSALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号

                        //Parameterオブジェクトへ値設定
                        findEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EnterpriseCode);  // 企業コード
                        findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.InqOriginalEpCd);  // 問合せ元企業コード
                        findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtCarWork.InquiryNumber);  // 問合せ番号
                        findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.AcptAnOdrStatus);  // 受注ステータス
                        findSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.SalesSlipNum);  // 売上伝票番号

                        sqlCommand.CommandTimeout = dbCommandTimeout;  //ADD 田建委 2020/08/28 PMKOBETSU-4076の対応
                        myReader = sqlCommand.ExecuteReader();

                        sqlText = string.Empty;

                        if (myReader.Read())
                        {
                            // 既存GUIDデータがある場合で更新日時が異なる場合は排他エラーで戻す
                            DateTime _updateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));// 更新日時

                            if (_updateDateTime != sCMAcOdrDtCarWork.UpdateDateTime)
                            {
                                if (sCMAcOdrDtCarWork.UpdateDateTime == DateTime.MinValue)
                                {
                                    // 新規登録で該当データ有りの場合には重複
                                    status = (int)ConstantManagement.DB_Status.ctDB_DUPLICATE;
                                }
                                else
                                {
                                    // 既存データで更新日時違いの場合には排他
                                    status = (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE;
                                }

                                return status;
                            }

                            # region [UPDATE文]
                            sqlText += "UPDATE SCMACODRDTCARRF" + Environment.NewLine;
                            sqlText += "  SET" + Environment.NewLine;
                            sqlText += "  CREATEDATETIMERF = @CREATEDATETIME" + Environment.NewLine;
                            sqlText += " ,UPDATEDATETIMERF = @UPDATEDATETIME" + Environment.NewLine;
                            sqlText += " ,ENTERPRISECODERF = @ENTERPRISECODE" + Environment.NewLine;
                            sqlText += " ,FILEHEADERGUIDRF = @FILEHEADERGUID" + Environment.NewLine;
                            sqlText += " ,UPDEMPLOYEECODERF = @UPDEMPLOYEECODE" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID1RF = @UPDASSEMBLYID1" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID2RF = @UPDASSEMBLYID2" + Environment.NewLine;
                            sqlText += " ,LOGICALDELETECODERF = @LOGICALDELETECODE" + Environment.NewLine;
                            sqlText += " ,INQORIGINALEPCDRF = @INQORIGINALEPCD" + Environment.NewLine;
                            sqlText += " ,INQORIGINALSECCDRF = @INQORIGINALSECCD" + Environment.NewLine;
                            sqlText += " ,INQUIRYNUMBERRF = @INQUIRYNUMBER" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE1CODERF = @NUMBERPLATE1CODE" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE1NAMERF = @NUMBERPLATE1NAME" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE2RF = @NUMBERPLATE2" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE3RF = @NUMBERPLATE3" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE4RF = @NUMBERPLATE4" + Environment.NewLine;
                            sqlText += " ,MODELDESIGNATIONNORF = @MODELDESIGNATIONNO" + Environment.NewLine;
                            sqlText += " ,CATEGORYNORF = @CATEGORYNO" + Environment.NewLine;
                            sqlText += " ,MAKERCODERF = @MAKERCODE" + Environment.NewLine;
                            sqlText += " ,MODELCODERF = @MODELCODE" + Environment.NewLine;
                            sqlText += " ,MODELSUBCODERF = @MODELSUBCODE" + Environment.NewLine;
                            sqlText += " ,MODELNAMERF = @MODELNAME" + Environment.NewLine;
                            sqlText += " ,CARINSPECTCERTMODELRF = @CARINSPECTCERTMODEL" + Environment.NewLine;
                            sqlText += " ,FULLMODELRF = @FULLMODEL" + Environment.NewLine;
                            sqlText += " ,FRAMENORF = @FRAMENO" + Environment.NewLine;
                            sqlText += " ,FRAMEMODELRF = @FRAMEMODEL" + Environment.NewLine;
                            sqlText += " ,CHASSISNORF = @CHASSISNO" + Environment.NewLine;
                            sqlText += " ,CARPROPERNORF = @CARPROPERNO" + Environment.NewLine;
                            sqlText += " ,PRODUCETYPEOFYEARNUMRF = @PRODUCETYPEOFYEARNUM" + Environment.NewLine;
                            sqlText += " ,COMMENTRF = @COMMENT" + Environment.NewLine;
                            sqlText += " ,RPCOLORCODERF = @RPCOLORCODE" + Environment.NewLine;
                            sqlText += " ,COLORNAME1RF = @COLORNAME1" + Environment.NewLine;
                            sqlText += " ,TRIMCODERF = @TRIMCODE" + Environment.NewLine;
                            sqlText += " ,TRIMNAMERF = @TRIMNAME" + Environment.NewLine;
                            sqlText += " ,MILEAGERF = @MILEAGE" + Environment.NewLine;
                            sqlText += " ,EQUIPOBJRF = @EQUIPOBJ" + Environment.NewLine;
                            sqlText += " ,ACPTANODRSTATUSRF = @ACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += " ,SALESSLIPNUMRF = @SALESSLIPNUM" + Environment.NewLine;
                            // -- ADD 2011/08/10   ------ >>>>>>
                            // ADD 2013/05/23 SCM障害№10538対応 ------------------------------->>>>>
                            sqlText += " ,CARNORF = @CARNO" + Environment.NewLine;
                            // ADD 2013/05/23 SCM障害№10538対応 -------------------------------<<<<<
                            sqlText += " ,MAKERNAMERF = @MAKERNAME" + Environment.NewLine;
                            sqlText += " ,GRADENAMERF = @GRADENAME" + Environment.NewLine;
                            sqlText += " ,BODYNAMERF = @BODYNAME" + Environment.NewLine;
                            sqlText += " ,DOORCOUNTRF = @DOORCOUNT" + Environment.NewLine;
                            sqlText += " ,ENGINEMODELNMRF = @ENGINEMODELNM" + Environment.NewLine;
                            sqlText += " ,CMNNMENGINEDISPLACERF = @CMNNMENGINEDISPLACE" + Environment.NewLine;
                            sqlText += " ,ENGINEMODELRF = @ENGINEMODEL" + Environment.NewLine;
                            sqlText += " ,NUMBEROFGEARRF = @NUMBEROFGEAR" + Environment.NewLine;
                            sqlText += " ,GEARNMRF = @GEARNM" + Environment.NewLine;
                            sqlText += " ,EDIVNMRF = @EDIVNM" + Environment.NewLine;
                            sqlText += " ,TRANSMISSIONNMRF = @TRANSMISSIONNMRF" + Environment.NewLine;
                            sqlText += " ,SHIFTNMRF = @SHIFTNMRF" + Environment.NewLine;
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // ADD 2012/05/31 ------------->>>>>
                            sqlText += " ,FIRSTENTRYDATENUMTYPRF = @FIRSTENTRYDATENUMTYPRF" + Environment.NewLine;
                            sqlText += " ,CARADDINFRF = @CARADDINFRF" + Environment.NewLine;
                            sqlText += " ,EQUIPPRTSOBJRF = @EQUIPPRTSOBJRF" + Environment.NewLine;
                            // ADD 2012/05/31 -------------<<<<<
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,CARMNGCODERF = @CARMNGCODERF" + Environment.NewLine;
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                            sqlText += " ,EXPECTEDCEDATERF = @EXPECTEDCEDATERF" + Environment.NewLine;
                            // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<
                            sqlText += "WHERE" + Environment.NewLine;
                            sqlText += "      ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                            sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                            sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                            sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;
                            sqlText += "  AND ACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += "  AND SALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;
                            sqlCommand.CommandText = sqlText;
                            # endregion

                            // KEYコマンドを再設定
                            findEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EnterpriseCode);  // 企業コード
                            findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.InqOriginalEpCd);  // 問合せ元企業コード
                            findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.InqOriginalSecCd);  // 問合せ元拠点コード
                            findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtCarWork.InquiryNumber);  // 問合せ番号
                            findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.AcptAnOdrStatus);  // 受注ステータス
                            findSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.SalesSlipNum);  // 売上伝票番号

                            // 更新ヘッダ情報を設定
                            object obj = (object)this;
                            IFileHeader flhd = (IFileHeader)sCMAcOdrDtCarWork;
                            FileHeader fileHeader = new FileHeader(obj);
                            fileHeader.SetUpdateHeader(ref flhd, obj);
                        }
                        else
                        {
                            // 既存GUIDデータが無い場合で更新日時が更新対象データに入っている場合はすでに削除されている意味で排他を戻す
                            if (sCMAcOdrDtCarWork.UpdateDateTime > DateTime.MinValue)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE;
                                return status;
                            }

                            # region [INSERT文]
                            sqlText += "  INSERT INTO SCMACODRDTCARRF (" + Environment.NewLine;
                            sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                            sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                            sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                            sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                            sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE1CODERF" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE1NAMERF" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE2RF" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE3RF" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE4RF" + Environment.NewLine;
                            sqlText += " ,MODELDESIGNATIONNORF" + Environment.NewLine;
                            sqlText += " ,CATEGORYNORF" + Environment.NewLine;
                            sqlText += " ,MAKERCODERF" + Environment.NewLine;
                            sqlText += " ,MODELCODERF" + Environment.NewLine;
                            sqlText += " ,MODELSUBCODERF" + Environment.NewLine;
                            sqlText += " ,MODELNAMERF" + Environment.NewLine;
                            sqlText += " ,CARINSPECTCERTMODELRF" + Environment.NewLine;
                            sqlText += " ,FULLMODELRF" + Environment.NewLine;
                            sqlText += " ,FRAMENORF" + Environment.NewLine;
                            sqlText += " ,FRAMEMODELRF" + Environment.NewLine;
                            sqlText += " ,CHASSISNORF" + Environment.NewLine;
                            sqlText += " ,CARPROPERNORF" + Environment.NewLine;
                            sqlText += " ,PRODUCETYPEOFYEARNUMRF" + Environment.NewLine;
                            sqlText += " ,COMMENTRF" + Environment.NewLine;
                            sqlText += " ,RPCOLORCODERF" + Environment.NewLine;
                            sqlText += " ,COLORNAME1RF" + Environment.NewLine;
                            sqlText += " ,TRIMCODERF" + Environment.NewLine;
                            sqlText += " ,TRIMNAMERF" + Environment.NewLine;
                            sqlText += " ,MILEAGERF" + Environment.NewLine;
                            sqlText += " ,EQUIPOBJRF" + Environment.NewLine;
                            sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                            sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                            // -- ADD 2011/08/10   ------ >>>>>>
                            // ADD 2013/05/23 SCM障害№10538対応 ------------------------------->>>>>
                            sqlText += " ,CARNORF" + Environment.NewLine;
                            // ADD 2013/05/23 SCM障害№10538対応 -------------------------------<<<<<
                            sqlText += " ,MAKERNAMERF" + Environment.NewLine;
                            sqlText += " ,GRADENAMERF" + Environment.NewLine;
                            sqlText += " ,BODYNAMERF" + Environment.NewLine;
                            sqlText += " ,DOORCOUNTRF" + Environment.NewLine;
                            sqlText += " ,ENGINEMODELNMRF" + Environment.NewLine;
                            sqlText += " ,CMNNMENGINEDISPLACERF" + Environment.NewLine;
                            sqlText += " ,ENGINEMODELRF" + Environment.NewLine;
                            sqlText += " ,NUMBEROFGEARRF" + Environment.NewLine;
                            sqlText += " ,GEARNMRF" + Environment.NewLine;
                            sqlText += " ,EDIVNMRF" + Environment.NewLine;
                            sqlText += " ,TRANSMISSIONNMRF" + Environment.NewLine;
                            // UPD 2012/05/31 ------------->>>>>
                            //sqlText += " ,SHIFTNMRF)" + Environment.NewLine;
                            sqlText += " ,SHIFTNMRF" + Environment.NewLine;
                            // UPD 2012/05/31 -------------<<<<<
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // ADD 2012/05/31 ------------->>>>>
                            sqlText += " ,FIRSTENTRYDATENUMTYPRF" + Environment.NewLine;
                            sqlText += " ,CARADDINFRF" + Environment.NewLine;
                            sqlText += " ,EQUIPPRTSOBJRF" + Environment.NewLine;
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,CARMNGCODERF" + Environment.NewLine;
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                            sqlText += " ,EXPECTEDCEDATERF" + Environment.NewLine;
                            // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<
                            sqlText += " )" + Environment.NewLine;
                            // ADD 2012/05/31 -------------<<<<<
                            sqlText += "  VALUES" + Environment.NewLine;
                            sqlText += "  (@CREATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                            sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                            sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                            sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALEPCD" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALSECCD" + Environment.NewLine;
                            sqlText += " ,@INQUIRYNUMBER" + Environment.NewLine;
                            sqlText += " ,@NUMBERPLATE1CODE" + Environment.NewLine;
                            sqlText += " ,@NUMBERPLATE1NAME" + Environment.NewLine;
                            sqlText += " ,@NUMBERPLATE2" + Environment.NewLine;
                            sqlText += " ,@NUMBERPLATE3" + Environment.NewLine;
                            sqlText += " ,@NUMBERPLATE4" + Environment.NewLine;
                            sqlText += " ,@MODELDESIGNATIONNO" + Environment.NewLine;
                            sqlText += " ,@CATEGORYNO" + Environment.NewLine;
                            sqlText += " ,@MAKERCODE" + Environment.NewLine;
                            sqlText += " ,@MODELCODE" + Environment.NewLine;
                            sqlText += " ,@MODELSUBCODE" + Environment.NewLine;
                            sqlText += " ,@MODELNAME" + Environment.NewLine;
                            sqlText += " ,@CARINSPECTCERTMODEL" + Environment.NewLine;
                            sqlText += " ,@FULLMODEL" + Environment.NewLine;
                            sqlText += " ,@FRAMENO" + Environment.NewLine;
                            sqlText += " ,@FRAMEMODEL" + Environment.NewLine;
                            sqlText += " ,@CHASSISNO" + Environment.NewLine;
                            sqlText += " ,@CARPROPERNO" + Environment.NewLine;
                            sqlText += " ,@PRODUCETYPEOFYEARNUM" + Environment.NewLine;
                            sqlText += " ,@COMMENT" + Environment.NewLine;
                            sqlText += " ,@RPCOLORCODE" + Environment.NewLine;
                            sqlText += " ,@COLORNAME1" + Environment.NewLine;
                            sqlText += " ,@TRIMCODE" + Environment.NewLine;
                            sqlText += " ,@TRIMNAME" + Environment.NewLine;
                            sqlText += " ,@MILEAGE" + Environment.NewLine;
                            sqlText += " ,@EQUIPOBJ" + Environment.NewLine;
                            sqlText += " ,@ACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += " ,@SALESSLIPNUM" + Environment.NewLine;
                            // -- ADD 2011/08/10   ------ >>>>>>
                            // ADD 2013/05/23 SCM障害№10538対応 ------------------------------->>>>>
                            sqlText += " ,@CARNO" + Environment.NewLine;
                            // ADD 2013/05/23 SCM障害№10538対応 -------------------------------<<<<<
                            sqlText += " ,@MAKERNAME" + Environment.NewLine;
                            sqlText += " ,@GRADENAME" + Environment.NewLine;
                            sqlText += " ,@BODYNAME" + Environment.NewLine;
                            sqlText += " ,@DOORCOUNT" + Environment.NewLine;
                            sqlText += " ,@ENGINEMODELNM" + Environment.NewLine;
                            sqlText += " ,@CMNNMENGINEDISPLACE" + Environment.NewLine;
                            sqlText += " ,@ENGINEMODEL" + Environment.NewLine;
                            sqlText += " ,@NUMBEROFGEAR" + Environment.NewLine;
                            sqlText += " ,@GEARNM" + Environment.NewLine;
                            sqlText += " ,@EDIVNM" + Environment.NewLine;
                            sqlText += " ,@TRANSMISSIONNMRF" + Environment.NewLine;
                            // UPD 2012/05/31 ------------->>>>>
                            //sqlText += " ,@SHIFTNMRF)" + Environment.NewLine;
                            sqlText += " ,@SHIFTNMRF" + Environment.NewLine;
                            // UPD 2012/05/31 -------------<<<<<
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // ADD 2012/05/31 ------------->>>>>
                            sqlText += " ,@FIRSTENTRYDATENUMTYPRF" + Environment.NewLine;
                            sqlText += " ,@CARADDINFRF" + Environment.NewLine;
                            sqlText += " ,@EQUIPPRTSOBJRF" + Environment.NewLine;
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@CARMNGCODERF" + Environment.NewLine;
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                            sqlText += " ,@EXPECTEDCEDATERF" + Environment.NewLine;
                            // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<
                            sqlText += " )" + Environment.NewLine;
                            // ADD 2012/05/31 -------------<<<<<
                            sqlCommand.CommandText = sqlText;
                            # endregion

                            // 登録ヘッダ情報を設定
                            object obj = (object)this;
                            IFileHeader flhd = (IFileHeader)sCMAcOdrDtCarWork;
                            FileHeader fileHeader = new FileHeader(obj);
                            fileHeader.SetInsertHeader(ref flhd, obj);
                        }

                        if (!myReader.IsClosed)
                        {
                            myReader.Close();
                        }

                        //Parameterオブジェクトの作成(更新用)
                        SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);  // 作成日時
                        SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);  // 更新日時
                        SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                        SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);  // GUID
                        SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);  // 更新従業員コード
                        SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);  // 更新アセンブリID1
                        SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);  // 更新アセンブリID2
                        SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);  // 論理削除区分
                        SqlParameter paraInqOriginalEpCd = sqlCommand.Parameters.Add("@INQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                        SqlParameter paraInqOriginalSecCd = sqlCommand.Parameters.Add("@INQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                        SqlParameter paraInquiryNumber = sqlCommand.Parameters.Add("@INQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                        SqlParameter paraNumberPlate1Code = sqlCommand.Parameters.Add("@NUMBERPLATE1CODE", SqlDbType.Int);  // 陸運事務所番号
                        SqlParameter paraNumberPlate1Name = sqlCommand.Parameters.Add("@NUMBERPLATE1NAME", SqlDbType.NVarChar);  // 陸運事務局名称
                        SqlParameter paraNumberPlate2 = sqlCommand.Parameters.Add("@NUMBERPLATE2", SqlDbType.NVarChar);  // 車両登録番号（種別）
                        SqlParameter paraNumberPlate3 = sqlCommand.Parameters.Add("@NUMBERPLATE3", SqlDbType.NVarChar);  // 車両登録番号（カナ）
                        SqlParameter paraNumberPlate4 = sqlCommand.Parameters.Add("@NUMBERPLATE4", SqlDbType.Int);  // 車両登録番号（プレート番号）
                        SqlParameter paraModelDesignationNo = sqlCommand.Parameters.Add("@MODELDESIGNATIONNO", SqlDbType.Int);  // 型式指定番号
                        SqlParameter paraCategoryNo = sqlCommand.Parameters.Add("@CATEGORYNO", SqlDbType.Int);  // 類別番号
                        SqlParameter paraMakerCode = sqlCommand.Parameters.Add("@MAKERCODE", SqlDbType.Int);  // メーカーコード
                        SqlParameter paraModelCode = sqlCommand.Parameters.Add("@MODELCODE", SqlDbType.Int);  // 車種コード
                        SqlParameter paraModelSubCode = sqlCommand.Parameters.Add("@MODELSUBCODE", SqlDbType.Int);  // 車種サブコード
                        SqlParameter paraModelName = sqlCommand.Parameters.Add("@MODELNAME", SqlDbType.NVarChar);  // 車種名
                        SqlParameter paraCarInspectCertModel = sqlCommand.Parameters.Add("@CARINSPECTCERTMODEL", SqlDbType.NVarChar);  // 車検証型式
                        SqlParameter paraFullModel = sqlCommand.Parameters.Add("@FULLMODEL", SqlDbType.NVarChar);  // 型式（フル型）
                        SqlParameter paraFrameNo = sqlCommand.Parameters.Add("@FRAMENO", SqlDbType.NVarChar);  // 車台番号
                        SqlParameter paraFrameModel = sqlCommand.Parameters.Add("@FRAMEMODEL", SqlDbType.NVarChar);  // 車台型式
                        SqlParameter paraChassisNo = sqlCommand.Parameters.Add("@CHASSISNO", SqlDbType.NVarChar);  // シャシーNo
                        SqlParameter paraCarProperNo = sqlCommand.Parameters.Add("@CARPROPERNO", SqlDbType.Int);  // 車両固有番号
                        SqlParameter paraProduceTypeOfYearNum = sqlCommand.Parameters.Add("@PRODUCETYPEOFYEARNUM", SqlDbType.Int);  // 生産年式（NUMタイプ）
                        SqlParameter paraComment = sqlCommand.Parameters.Add("@COMMENT", SqlDbType.NVarChar);  // コメント
                        SqlParameter paraRpColorCode = sqlCommand.Parameters.Add("@RPCOLORCODE", SqlDbType.NVarChar);  // リペアカラーコード
                        SqlParameter paraColorName1 = sqlCommand.Parameters.Add("@COLORNAME1", SqlDbType.NVarChar);  // カラー名称1
                        SqlParameter paraTrimCode = sqlCommand.Parameters.Add("@TRIMCODE", SqlDbType.NVarChar);  // トリムコード
                        SqlParameter paraTrimName = sqlCommand.Parameters.Add("@TRIMNAME", SqlDbType.NVarChar);  // トリム名称
                        SqlParameter paraMileage = sqlCommand.Parameters.Add("@MILEAGE", SqlDbType.Int);  // 車両走行距離
                        SqlParameter paraEquipObj = sqlCommand.Parameters.Add("@EQUIPOBJ", SqlDbType.VarBinary);  // 装備オブジェクト
                        SqlParameter paraAcptAnOdrStatus = sqlCommand.Parameters.Add("@ACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                        SqlParameter paraSalesSlipNum = sqlCommand.Parameters.Add("@SALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号

                        // -- ADD 2011/08/10   ------ >>>>>>
                        // ADD 2013/05/23 SCM障害№10538対応 ------------------------------->>>>>
                        SqlParameter paraCarNo = sqlCommand.Parameters.Add("@CARNO", SqlDbType.NVarChar);  // 号車
                        // ADD 2013/05/23 SCM障害№10538対応 -------------------------------<<<<<
                        SqlParameter paraMakerName = sqlCommand.Parameters.Add("@MAKERNAME", SqlDbType.NVarChar);  // メーカー名称
                        SqlParameter paraGradeName = sqlCommand.Parameters.Add("@GRADENAME", SqlDbType.NVarChar);  // グレード名称
                        SqlParameter paraBodyName = sqlCommand.Parameters.Add("@BODYNAME", SqlDbType.NVarChar);  // ボディー名称
                        SqlParameter paraDoorCount = sqlCommand.Parameters.Add("@DOORCOUNT", SqlDbType.Int);  // ドア数
                        SqlParameter paraEngineModelNm = sqlCommand.Parameters.Add("@ENGINEMODELNM", SqlDbType.NVarChar);  // エンジン型式名称
                        SqlParameter paraCmnNmEngineDisPlace = sqlCommand.Parameters.Add("@CMNNMENGINEDISPLACE", SqlDbType.Int);  // 通称排気量
                        SqlParameter paraEngineModel = sqlCommand.Parameters.Add("@ENGINEMODEL", SqlDbType.NVarChar);  // 原動機型式（エンジン）
                        SqlParameter paraNumberOfGear = sqlCommand.Parameters.Add("@NUMBEROFGEAR", SqlDbType.Int);  // 変速段数
                        SqlParameter paraGearNm = sqlCommand.Parameters.Add("@GEARNM", SqlDbType.NVarChar);  // 変速機名称
                        SqlParameter paraEDivNm = sqlCommand.Parameters.Add("@EDIVNM", SqlDbType.NVarChar);  // E区分名称
                        SqlParameter parTransmissionNm = sqlCommand.Parameters.Add("@TRANSMISSIONNMRF", SqlDbType.NChar);  // ミッション名称
                        SqlParameter parShiftNm = sqlCommand.Parameters.Add("@SHIFTNMRF", SqlDbType.NChar);  // シフト名称
                        // -- ADD 2011/08/10   ------ <<<<<<

                        // ADD 2012/05/31 ------------->>>>>
                        SqlParameter paraFirstEntryDateNumTyp = sqlCommand.Parameters.Add("@FIRSTENTRYDATENUMTYPRF", SqlDbType.Int);  // 初年度（NUMタイプ）
                        SqlParameter paraCarAddInf = sqlCommand.Parameters.Add("@CARADDINFRF", SqlDbType.VarBinary);  // 車両付加情報オブジェクト
                        SqlParameter paraEquipPrtsObj = sqlCommand.Parameters.Add("@EQUIPPRTSOBJRF", SqlDbType.VarBinary);  // 装備部品オブジェクト
                        // ADD 2012/05/31 -------------<<<<<

                        // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraCarMngCode = sqlCommand.Parameters.Add("@CARMNGCODERF", SqlDbType.NVarChar);  // 車両管理コード
                        // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<

                        // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                        SqlParameter paraExpectedCeDate = sqlCommand.Parameters.Add("@EXPECTEDCEDATERF", SqlDbType.Int);  // 入庫予定日
                        // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<

                        //Parameterオブジェクトへ値設定(更新用)
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtCarWork.CreateDateTime);  // 作成日時
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtCarWork.UpdateDateTime);  // 更新日時
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EnterpriseCode);  // 企業コード
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtCarWork.FileHeaderGuid);  // GUID
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.UpdEmployeeCode);  // 更新従業員コード
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.UpdAssemblyId1);  // 更新アセンブリID1
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.UpdAssemblyId2);  // 更新アセンブリID2
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.LogicalDeleteCode);  // 論理削除区分
                        paraInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.InqOriginalEpCd);  // 問合せ元企業コード
                        paraInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        paraInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtCarWork.InquiryNumber);  // 問合せ番号
                        paraNumberPlate1Code.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.NumberPlate1Code);  // 陸運事務所番号
                        paraNumberPlate1Name.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.NumberPlate1Name);  // 陸運事務局名称
                        paraNumberPlate2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.NumberPlate2);  // 車両登録番号（種別）
                        paraNumberPlate3.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.NumberPlate3);  // 車両登録番号（カナ）
                        paraNumberPlate4.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.NumberPlate4);  // 車両登録番号（プレート番号）
                        paraModelDesignationNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.ModelDesignationNo);  // 型式指定番号
                        paraCategoryNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.CategoryNo);  // 類別番号
                        paraMakerCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.MakerCode);  // メーカーコード
                        paraModelCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.ModelCode);  // 車種コード
                        paraModelSubCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.ModelSubCode);  // 車種サブコード
                        paraModelName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.ModelName);  // 車種名
                        paraCarInspectCertModel.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.CarInspectCertModel);  // 車検証型式
                        paraFullModel.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.FullModel);  // 型式（フル型）
                        paraFrameNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.FrameNo);  // 車台番号
                        paraFrameModel.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.FrameModel);  // 車台型式
                        paraChassisNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.ChassisNo);  // シャシーNo
                        paraCarProperNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.CarProperNo);  // 車両固有番号
                        paraProduceTypeOfYearNum.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.ProduceTypeOfYearNum);  // 生産年式（NUMタイプ）
                        paraComment.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.Comment);  // コメント
                        paraRpColorCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.RpColorCode);  // リペアカラーコード
                        paraColorName1.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.ColorName1);  // カラー名称1
                        paraTrimCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.TrimCode);  // トリムコード
                        paraTrimName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.TrimName);  // トリム名称
                        paraMileage.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.Mileage);  // 車両走行距離
                        paraEquipObj.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDtCarWork.EquipObj);  // 装備オブジェクト
                        paraAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.AcptAnOdrStatus);  // 受注ステータス
                        paraSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.SalesSlipNum);  // 売上伝票番号

                        // -- ADD 2011/08/10   ------ >>>>>>
                        // ADD 2013/05/23 SCM障害№10538対応 ------------------------------->>>>>
                        paraCarNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.CarNo);  // 号車
                        // ADD 2013/05/23 SCM障害№10538対応 -------------------------------<<<<<
                        paraMakerName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.MakerName);  // メーカー名称
                        paraGradeName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.GradeName);  // グレード名称
                        paraBodyName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.BodyName);  // ボディー名称
                        paraDoorCount.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.DoorCount);  // ドア数
                        paraEngineModelNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EngineModelNm);  // エンジン型式名称
                        paraCmnNmEngineDisPlace.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.CmnNmEngineDisPlace);  // 通称排気量
                        paraEngineModel.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EngineModel);  // 原動機型式（エンジン）
                        paraNumberOfGear.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.NumberOfGear);  // 変速段数
                        paraGearNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.GearNm);  // 変速機名称
                        paraEDivNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EDivNm);  // E区分名称
                        parTransmissionNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.TransmissionNm);  // ミッション名称
                        parShiftNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.ShiftNm);  // シフト名称
                        // -- ADD 2011/08/10   ------ <<<<<<

                        // ADD 2012/05/31 ------------->>>>>
                        paraFirstEntryDateNumTyp.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.FirstEntryDateNumTyp);  // 初年度（NUMタイプ）
                        paraCarAddInf.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDtCarWork.CarAddInf);  // 車両付加情報オブジェクト
                        paraEquipPrtsObj.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDtCarWork.EquipPrtsObj);  // 装備部品オブジェクト
                        // ADD 2012/05/31 -------------<<<<<

                        // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                        paraCarMngCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.CarMngCode);  // 車両管理コード
                        // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<

                        // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                        paraExpectedCeDate.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.ExpectedCeDate);  // 入庫予定日
                        // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<

                        sqlCommand.ExecuteNonQuery();
                        al.Add(sCMAcOdrDtCarWork);
                    }
                }

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            scmAcOdrDtCarWorkList = al;

            return status;
        }

        /// <summary>
        /// SCM受注明細データ(問合せ・発注)情報を追加・更新します。
        /// </summary>
        /// <param name="scmAcOdrDtlIqWorkList">追加するSCM受注明細データ(問合せ・発注)情報を格納する ArrayList</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <param name="dbCommandTimeout">コマンドタイムアウト</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : scmAcOdrDtlIqWorkList に格納されているSCM受注明細データ(問合せ・発注)情報を追加します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        /// <br>Update Note : 2020/08/28 田建委</br>
        /// <br>管理番号    : 11600006-00</br>
        /// <br>              PMKOBETSU-4076 タイムアウト設定</br>
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
        //private int InsertSCMAcOdrDtlIqWorkProc(ref ArrayList scmAcOdrDtlIqWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        private int InsertSCMAcOdrDtlIqWorkProc(ref ArrayList scmAcOdrDtlIqWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction, int dbCommandTimeout)
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlCommand sqlCommand = null;

            ArrayList al = new ArrayList();
            try
            {
                if (scmAcOdrDtlIqWorkList != null)
                {
                    string sqlText = string.Empty;
                    sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);

                    # region [INSERT文]
                    sqlText += "  INSERT INTO SCMACODRDTLIQRF (" + Environment.NewLine;
                    sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                    sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                    sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                    sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                    sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                    sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                    sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                    sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                    sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                    sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                    sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                    sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                    sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                    sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                    sqlText += " ,INQROWNUMBERRF" + Environment.NewLine;
                    sqlText += " ,INQROWNUMDERIVEDNORF" + Environment.NewLine;
                    sqlText += " ,INQORGDTLDISCGUIDRF" + Environment.NewLine;
                    sqlText += " ,INQOTHDTLDISCGUIDRF" + Environment.NewLine;
                    sqlText += " ,GOODSDIVCDRF" + Environment.NewLine;
                    sqlText += " ,RECYCLEPRTKINDCODERF" + Environment.NewLine;
                    sqlText += " ,RECYCLEPRTKINDNAMERF" + Environment.NewLine;
                    sqlText += " ,DELIVEREDGOODSDIVRF" + Environment.NewLine;
                    sqlText += " ,HANDLEDIVCODERF" + Environment.NewLine;
                    sqlText += " ,GOODSSHAPERF" + Environment.NewLine;
                    sqlText += " ,DELIVRDGDSCONFCDRF" + Environment.NewLine;
                    sqlText += " ,DELIGDSCMPLTDUEDATERF" + Environment.NewLine;
                    sqlText += " ,ANSWERDELIVERYDATERF" + Environment.NewLine;
                    sqlText += " ,BLGOODSCODERF" + Environment.NewLine;
                    sqlText += " ,BLGOODSDRCODERF" + Environment.NewLine;
                    sqlText += " ,INQGOODSNAMERF" + Environment.NewLine;
                    sqlText += " ,ANSGOODSNAMERF" + Environment.NewLine;
                    sqlText += " ,SALESORDERCOUNTRF" + Environment.NewLine;
                    sqlText += " ,DELIVEREDGOODSCOUNTRF" + Environment.NewLine;
                    sqlText += " ,GOODSNORF" + Environment.NewLine;
                    sqlText += " ,GOODSMAKERCDRF" + Environment.NewLine;
                    sqlText += " ,GOODSMAKERNMRF" + Environment.NewLine;
                    sqlText += " ,PUREGOODSMAKERCDRF" + Environment.NewLine;
                    sqlText += " ,INQPUREGOODSNORF" + Environment.NewLine;
                    sqlText += " ,ANSPUREGOODSNORF" + Environment.NewLine;
                    sqlText += " ,LISTPRICERF" + Environment.NewLine;
                    sqlText += " ,UNITPRICERF" + Environment.NewLine;
                    sqlText += " ,GOODSADDINFORF" + Environment.NewLine;
                    sqlText += " ,ROUGHRROFITRF" + Environment.NewLine;
                    sqlText += " ,ROUGHRATERF" + Environment.NewLine;
                    sqlText += " ,ANSWERLIMITDATERF" + Environment.NewLine;
                    sqlText += " ,COMMENTDTLRF" + Environment.NewLine;
                    sqlText += " ,APPENDINGFILEDTLRF" + Environment.NewLine;
                    sqlText += " ,APPENDINGFILENMDTLRF" + Environment.NewLine;
                    sqlText += " ,SHELFNORF" + Environment.NewLine;
                    sqlText += " ,ADDITIONALDIVCDRF" + Environment.NewLine;
                    sqlText += " ,CORRECTDIVCDRF" + Environment.NewLine;
                    sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                    // 2010/05/26 >>>
                    //sqlText += " ,DISPLAYORDERRF)" + Environment.NewLine;
                    sqlText += " ,DISPLAYORDERRF" + Environment.NewLine;
                    sqlText += " ,CANCELCNDTINDIVRF" + Environment.NewLine;
                    sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                    sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                    sqlText += " ,SALESROWNORF" + Environment.NewLine;
                    // 2011/02/09 Add >>>
                    sqlText += " ,DTLTAKEINDIVCDRF" + Environment.NewLine;
                    // 2011/02/09 Add <<<
                    //--- ADD 2011/05/20 --->>>
                    sqlText += " ,WAREHOUSECODERF" + Environment.NewLine;
                    sqlText += " ,WAREHOUSENAMERF" + Environment.NewLine;
                    sqlText += " ,WAREHOUSESHELFNORF" + Environment.NewLine;
                    //--- ADD 2011/05/20 ---<<<
                    // -- ADD 2011/08/10   ------ >>>>>>
                    sqlText += " ,PMPRSNTCOUNTRF" + Environment.NewLine;
                    sqlText += " ,SETPARTSMKRCDRF" + Environment.NewLine;
                    sqlText += " ,SETPARTSNUMBERRF" + Environment.NewLine;
                    sqlText += " ,SETPARTSMAINSUBNORF" + Environment.NewLine;
                    // -- ADD 2011/08/10   ------ <<<<<<
                    // 2011/10/10 Add >>>
                    sqlText += " ,CAMPAIGNCODERF" + Environment.NewLine;
                    // 2011/10/10 Add <<<
                    // -- ADD 2012/01/10   ------ >>>>>>
                    sqlText += " ,GOODSSPECIALNOTERF" + Environment.NewLine;  //商品規格・特記事項
                    // -- ADD 2012/01/10   ------ <<<<<<
                    // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                    sqlText += " ,AUTOESTIMATEPARTSCDRF" + Environment.NewLine;  //自動見積部品コード
                    // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                    // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;  //　売上伝票合計（税込）
                    sqlText += " ,SALESTOTALTAXEXCRF" + Environment.NewLine;  // 売上伝票合計（税抜）
                    sqlText += " ,SCMCONSTAXLAYMETHODRF" + Environment.NewLine;  // SCM消費税転嫁方式
                    sqlText += " ,CONSTAXRATERF" + Environment.NewLine;  // 消費税税率
                    sqlText += " ,SCMFRACTIONPROCCDRF" + Environment.NewLine;  // SCM端数処理区分
                    sqlText += " ,ACCRECCONSTAXRF" + Environment.NewLine;  // 売掛消費税
                    sqlText += " ,PMSALESDATERF" + Environment.NewLine;  // PM売上日
                    sqlText += " ,SUPPSLPPRTTIMERF" + Environment.NewLine;  // 仕入先伝票発行時刻
                    sqlText += " ,SALESMONEYTAXINCRF" + Environment.NewLine;  // 売上金額（税込み）
                    sqlText += " ,SALESMONEYTAXEXCRF" + Environment.NewLine;  // 売上金額（税抜き）
                    // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,DATAINPUTSYSTEMRF" + Environment.NewLine;  // データ入力システム
                    // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                    sqlText += " ,PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;
                    sqlText += " ,PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;
                    sqlText += " ,PMMAINMNGSHELFNORF" + Environment.NewLine;
                    sqlText += " ,PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;
                    // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                    // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                    sqlText += " ,PRMSETDTLNO2RF  " + Environment.NewLine;
                    sqlText += " ,PRMSETDTLNAME2RF" + Environment.NewLine;
                    sqlText += " ,STOCKSTATUSDIVRF" + Environment.NewLine;
                    // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                    // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                    sqlText += " ,RENTDIVRF" + Environment.NewLine;
                    sqlText += " ,MKRSUGGESTRTPRICRF" + Environment.NewLine;
                    sqlText += " ,OPENPRICEDIVRF" + Environment.NewLine;
                    // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                    // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                    sqlText += " ,BGNGOODSDIVRF" + Environment.NewLine;
                    // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                    // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                    sqlText += " ,MODELPRTSADPTYMRF" + Environment.NewLine;
                    sqlText += " ,MODELPRTSABLSYMRF" + Environment.NewLine;
                    sqlText += " ,MODELPRTSADPTFRAMENORF" + Environment.NewLine;
                    sqlText += " ,MODELPRTSABLSFRAMENORF" + Environment.NewLine;
                    // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                    // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,ANSDELIDATEDIVRF" + Environment.NewLine;
                    // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,GOODSSPECIALNTFORFACRF" + Environment.NewLine;
                    sqlText += " ,GOODSSPECIALNTFORCOWRF" + Environment.NewLine;
                    sqlText += " ,PRMSETDTLNAME2FORFACRF" + Environment.NewLine;
                    sqlText += " ,PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;
                    // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,INQBLUTYPTTHCDRF" + Environment.NewLine;
                    sqlText += " ,INQBLUTYPTSBCDRF" + Environment.NewLine;
                    sqlText += " ,ANSBLUTYPTTHCDRF" + Environment.NewLine;
                    sqlText += " ,ANSBLUTYPTSBCDRF" + Environment.NewLine;
                    sqlText += " ,ANSBLGOODSCODERF" + Environment.NewLine;
                    sqlText += " ,ANSBLGOODSDRCODERF" + Environment.NewLine;
                    // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    sqlText += " )" + Environment.NewLine;
                    // 2010/05/26 <<<
                    sqlText += "  VALUES" + Environment.NewLine;
                    sqlText += "  (@CREATEDATETIME" + Environment.NewLine;
                    sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                    sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                    sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                    sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                    sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                    sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                    sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                    sqlText += " ,@INQORIGINALEPCD" + Environment.NewLine;
                    sqlText += " ,@INQORIGINALSECCD" + Environment.NewLine;
                    sqlText += " ,@INQOTHEREPCD" + Environment.NewLine;
                    sqlText += " ,@INQOTHERSECCD" + Environment.NewLine;
                    sqlText += " ,@INQUIRYNUMBER" + Environment.NewLine;
                    sqlText += " ,@UPDATEDATE" + Environment.NewLine;
                    sqlText += " ,@UPDATETIME" + Environment.NewLine;
                    sqlText += " ,@INQROWNUMBER" + Environment.NewLine;
                    sqlText += " ,@INQROWNUMDERIVEDNO" + Environment.NewLine;
                    sqlText += " ,@INQORGDTLDISCGUID" + Environment.NewLine;
                    sqlText += " ,@INQOTHDTLDISCGUID" + Environment.NewLine;
                    sqlText += " ,@GOODSDIVCD" + Environment.NewLine;
                    sqlText += " ,@RECYCLEPRTKINDCODE" + Environment.NewLine;
                    sqlText += " ,@RECYCLEPRTKINDNAME" + Environment.NewLine;
                    sqlText += " ,@DELIVEREDGOODSDIV" + Environment.NewLine;
                    sqlText += " ,@HANDLEDIVCODE" + Environment.NewLine;
                    sqlText += " ,@GOODSSHAPE" + Environment.NewLine;
                    sqlText += " ,@DELIVRDGDSCONFCD" + Environment.NewLine;
                    sqlText += " ,@DELIGDSCMPLTDUEDATE" + Environment.NewLine;
                    sqlText += " ,@ANSWERDELIVERYDATE" + Environment.NewLine;
                    sqlText += " ,@BLGOODSCODE" + Environment.NewLine;
                    sqlText += " ,@BLGOODSDRCODE" + Environment.NewLine;
                    sqlText += " ,@INQGOODSNAME" + Environment.NewLine;
                    sqlText += " ,@ANSGOODSNAME" + Environment.NewLine;
                    sqlText += " ,@SALESORDERCOUNT" + Environment.NewLine;
                    sqlText += " ,@DELIVEREDGOODSCOUNT" + Environment.NewLine;
                    sqlText += " ,@GOODSNO" + Environment.NewLine;
                    sqlText += " ,@GOODSMAKERCD" + Environment.NewLine;
                    sqlText += " ,@GOODSMAKERNM" + Environment.NewLine;
                    sqlText += " ,@PUREGOODSMAKERCD" + Environment.NewLine;
                    sqlText += " ,@INQPUREGOODSNO" + Environment.NewLine;
                    sqlText += " ,@ANSPUREGOODSNO" + Environment.NewLine;
                    sqlText += " ,@LISTPRICE" + Environment.NewLine;
                    sqlText += " ,@UNITPRICE" + Environment.NewLine;
                    sqlText += " ,@GOODSADDINFO" + Environment.NewLine;
                    sqlText += " ,@ROUGHRROFIT" + Environment.NewLine;
                    sqlText += " ,@ROUGHRATE" + Environment.NewLine;
                    sqlText += " ,@ANSWERLIMITDATE" + Environment.NewLine;
                    sqlText += " ,@COMMENTDTL" + Environment.NewLine;
                    sqlText += " ,@APPENDINGFILEDTL" + Environment.NewLine;
                    sqlText += " ,@APPENDINGFILENMDTL" + Environment.NewLine;
                    sqlText += " ,@SHELFNO" + Environment.NewLine;
                    sqlText += " ,@ADDITIONALDIVCD" + Environment.NewLine;
                    sqlText += " ,@CORRECTDIVCD" + Environment.NewLine;
                    sqlText += " ,@INQORDDIVCD" + Environment.NewLine;
                    // 2010/05/26 >>>
                    //sqlText += " ,@DISPLAYORDER)" + Environment.NewLine;
                    sqlText += " ,@DISPLAYORDER" + Environment.NewLine;
                    sqlText += " ,@CANCELCNDTINDIV" + Environment.NewLine;
                    sqlText += " ,@ACPTANODRSTATUS" + Environment.NewLine;
                    sqlText += " ,@SALESSLIPNUM" + Environment.NewLine;
                    sqlText += " ,@SALESROWNO" + Environment.NewLine;
                    // 2011/02/09 Add >>>
                    sqlText += " ,@DTLTAKEINDIVCD" + Environment.NewLine;
                    // 2011/02/09 Add <<<
                    //--- ADD 2011/05/20 --->>>
                    sqlText += " ,@WAREHOUSECODE" + Environment.NewLine;
                    sqlText += " ,@WAREHOUSENAME" + Environment.NewLine;
                    sqlText += " ,@WAREHOUSESHELFNO" + Environment.NewLine;
                    //--- ADD 2011/05/20 ---<<<
                    // -- ADD 2011/08/10   ------ >>>>>>
                    sqlText += " ,@PMPRSNTCOUNT" + Environment.NewLine;
                    sqlText += " ,@SETPARTSMKRCD" + Environment.NewLine;
                    sqlText += " ,@SETPARTSNUMBER" + Environment.NewLine;
                    sqlText += " ,@SETPARTSMAINSUBNO" + Environment.NewLine;
                    // -- ADD 2011/08/10   ------ <<<<<<
                    // 2011/10/10 Add >>>
                    sqlText += " ,@CAMPAIGNCODE" + Environment.NewLine;
                    // 2011/10/10 Add <<<
                    // -- ADD 2012/01/10   ------ >>>>>>
                    sqlText += " ,@GOODSSPECIALNOTE" + Environment.NewLine;  //商品規格・特記事項
                    // -- ADD 2012/01/10   ------ <<<<<<
                    // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                    sqlText += " ,@AUTOESTIMATEPARTSCD" + Environment.NewLine;  //自動見積部品コード
                    // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                    // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,@SALESTOTALTAXINC" + Environment.NewLine;  //　売上伝票合計（税込）
                    sqlText += " ,@SALESTOTALTAXEXC" + Environment.NewLine;  // 売上伝票合計（税抜）
                    sqlText += " ,@SCMCONSTAXLAYMETHOD" + Environment.NewLine;  // SCM消費税転嫁方式
                    sqlText += " ,@CONSTAXRATE" + Environment.NewLine;  // 消費税税率
                    sqlText += " ,@SCMFRACTIONPROCCD" + Environment.NewLine;  // SCM端数処理区分
                    sqlText += " ,@ACCRECCONSTAX" + Environment.NewLine;  // 売掛消費税
                    sqlText += " ,@PMSALESDATE" + Environment.NewLine;  // PM売上日
                    sqlText += " ,@SUPPSLPPRTTIME" + Environment.NewLine;  // 仕入先伝票発行時刻
                    sqlText += " ,@SALESMONEYTAXINC" + Environment.NewLine;  // 売上金額（税込み）
                    sqlText += " ,@SALESMONEYTAXEXC" + Environment.NewLine;  // 売上金額（税抜き）
                    // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,@DATAINPUTSYSTEM" + Environment.NewLine;  // データ入力システム
                    // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                    sqlText += " ,@PMMAINMNGWAREHOUSECD" + Environment.NewLine;
                    sqlText += " ,@PMMAINMNGWAREHOUSENAME" + Environment.NewLine;
                    sqlText += " ,@PMMAINMNGSHELFNO" + Environment.NewLine;
                    sqlText += " ,@PMMAINMNGPRSNTCOUNT" + Environment.NewLine;
                    // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                    // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                    sqlText += " ,@PRMSETDTLNO2  " + Environment.NewLine;
                    sqlText += " ,@PRMSETDTLNAME2" + Environment.NewLine;
                    sqlText += " ,@STOCKSTATUSDIV" + Environment.NewLine;
                    // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                    // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                    sqlText += " ,@RENTDIV" + Environment.NewLine;
                    sqlText += " ,@MKRSUGGESTRTPRIC" + Environment.NewLine;
                    sqlText += " ,@OPENPRICEDIV" + Environment.NewLine;
                    // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                    // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                    sqlText += " ,@BGNGOODSDIV" + Environment.NewLine;
                    // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                    // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                    sqlText += " ,@MODELPRTSADPTYM" + Environment.NewLine;
                    sqlText += " ,@MODELPRTSABLSYM" + Environment.NewLine;
                    sqlText += " ,@MODELPRTSADPTFRAMENO" + Environment.NewLine;
                    sqlText += " ,@MODELPRTSABLSFRAMENO" + Environment.NewLine;
                    // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                    // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,@ANSDELIDATEDIV" + Environment.NewLine;
                    // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,@GOODSSPECIALNTFORFAC" + Environment.NewLine;
                    sqlText += " ,@GOODSSPECIALNTFORCOW" + Environment.NewLine;
                    sqlText += " ,@PRMSETDTLNAME2FORFAC" + Environment.NewLine;
                    sqlText += " ,@PRMSETDTLNAME2FORCOW" + Environment.NewLine;
                    // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                    // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,@INQBLUTYPTTHCD" + Environment.NewLine;
                    sqlText += " ,@INQBLUTYPTSBCD" + Environment.NewLine;
                    sqlText += " ,@ANSBLUTYPTTHCD" + Environment.NewLine;
                    sqlText += " ,@ANSBLUTYPTSBCD" + Environment.NewLine;
                    sqlText += " ,@ANSBLGOODSCODE" + Environment.NewLine;
                    sqlText += " ,@ANSBLGOODSDRCODE" + Environment.NewLine;
                    // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    sqlText += " )" + Environment.NewLine;
                    // 2010/05/26 <<<
                    sqlCommand.CommandText = sqlText;
                    # endregion

                    for (int i = 0; i < scmAcOdrDtlIqWorkList.Count; i++)
                    {
                        SCMAcOdrDtlIqWork sCMAcOdrDtlIqWork = scmAcOdrDtlIqWorkList[i] as SCMAcOdrDtlIqWork;
                        sqlCommand.Parameters.Clear();

                        // 登録ヘッダ情報を設定
                        object obj = (object)this;
                        IFileHeader flhd = (IFileHeader)sCMAcOdrDtlIqWork;
                        FileHeader fileHeader = new FileHeader(obj);
                        fileHeader.SetInsertHeader(ref flhd, obj);

                        //Prameterオブジェクトの作成
                        SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);  // 作成日時
                        SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);  // 更新日時
                        SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                        SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);  // GUID
                        SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);  // 更新従業員コード
                        SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);  // 更新アセンブリID1
                        SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);  // 更新アセンブリID2
                        SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);  // 論理削除区分
                        SqlParameter paraInqOriginalEpCd = sqlCommand.Parameters.Add("@INQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                        SqlParameter paraInqOriginalSecCd = sqlCommand.Parameters.Add("@INQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                        SqlParameter paraInqOtherEpCd = sqlCommand.Parameters.Add("@INQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                        SqlParameter paraInqOtherSecCd = sqlCommand.Parameters.Add("@INQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                        SqlParameter paraInquiryNumber = sqlCommand.Parameters.Add("@INQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                        SqlParameter paraUpdateDate = sqlCommand.Parameters.Add("@UPDATEDATE", SqlDbType.Int);  // 更新年月日
                        SqlParameter paraUpdateTime = sqlCommand.Parameters.Add("@UPDATETIME", SqlDbType.Int);  // 更新時間
                        SqlParameter paraInqRowNumber = sqlCommand.Parameters.Add("@INQROWNUMBER", SqlDbType.Int);  // 問合せ行番号
                        SqlParameter paraInqRowNumDerivedNo = sqlCommand.Parameters.Add("@INQROWNUMDERIVEDNO", SqlDbType.Int);  // 問合せ行番号枝番
                        SqlParameter paraInqOrgDtlDiscGuid = sqlCommand.Parameters.Add("@INQORGDTLDISCGUID", SqlDbType.UniqueIdentifier);  // 問合せ元明細識別GUID
                        SqlParameter paraInqOthDtlDiscGuid = sqlCommand.Parameters.Add("@INQOTHDTLDISCGUID", SqlDbType.UniqueIdentifier);  // 問合せ先明細識別GUID
                        SqlParameter paraGoodsDivCd = sqlCommand.Parameters.Add("@GOODSDIVCD", SqlDbType.Int);  // 商品種別
                        SqlParameter paraRecyclePrtKindCode = sqlCommand.Parameters.Add("@RECYCLEPRTKINDCODE", SqlDbType.Int);  // リサイクル部品種別
                        SqlParameter paraRecyclePrtKindName = sqlCommand.Parameters.Add("@RECYCLEPRTKINDNAME", SqlDbType.NVarChar);  // リサイクル部品種別名称
                        SqlParameter paraDeliveredGoodsDiv = sqlCommand.Parameters.Add("@DELIVEREDGOODSDIV", SqlDbType.Int);  // 納品区分
                        SqlParameter paraHandleDivCode = sqlCommand.Parameters.Add("@HANDLEDIVCODE", SqlDbType.Int);  // 取扱区分
                        SqlParameter paraGoodsShape = sqlCommand.Parameters.Add("@GOODSSHAPE", SqlDbType.Int);  // 商品形態
                        SqlParameter paraDelivrdGdsConfCd = sqlCommand.Parameters.Add("@DELIVRDGDSCONFCD", SqlDbType.Int);  // 納品確認区分
                        SqlParameter paraDeliGdsCmpltDueDate = sqlCommand.Parameters.Add("@DELIGDSCMPLTDUEDATE", SqlDbType.Int);  // 納品完了予定日
                        SqlParameter paraAnswerDeliveryDate = sqlCommand.Parameters.Add("@ANSWERDELIVERYDATE", SqlDbType.NVarChar);  // 回答納期
                        SqlParameter paraBLGoodsCode = sqlCommand.Parameters.Add("@BLGOODSCODE", SqlDbType.Int);  // BL商品コード
                        SqlParameter paraBLGoodsDrCode = sqlCommand.Parameters.Add("@BLGOODSDRCODE", SqlDbType.Int);  // BL商品コード枝番
                        SqlParameter paraInqGoodsName = sqlCommand.Parameters.Add("@INQGOODSNAME", SqlDbType.NVarChar);  // 問発商品名
                        SqlParameter paraAnsGoodsName = sqlCommand.Parameters.Add("@ANSGOODSNAME", SqlDbType.NVarChar);  // 回答商品名
                        SqlParameter paraSalesOrderCount = sqlCommand.Parameters.Add("@SALESORDERCOUNT", SqlDbType.Float);  // 発注数
                        SqlParameter paraDeliveredGoodsCount = sqlCommand.Parameters.Add("@DELIVEREDGOODSCOUNT", SqlDbType.Float);  // 納品数
                        SqlParameter paraGoodsNo = sqlCommand.Parameters.Add("@GOODSNO", SqlDbType.NVarChar);  // 商品番号
                        SqlParameter paraGoodsMakerCd = sqlCommand.Parameters.Add("@GOODSMAKERCD", SqlDbType.Int);  // 商品メーカーコード
                        SqlParameter paraGoodsMakerNm = sqlCommand.Parameters.Add("@GOODSMAKERNM", SqlDbType.NVarChar);  // 商品メーカー名称
                        SqlParameter paraPureGoodsMakerCd = sqlCommand.Parameters.Add("@PUREGOODSMAKERCD", SqlDbType.Int);  // 純正商品メーカーコード
                        SqlParameter paraInqPureGoodsNo = sqlCommand.Parameters.Add("@INQPUREGOODSNO", SqlDbType.NVarChar);  // 問発純正商品番号
                        SqlParameter paraAnsPureGoodsNo = sqlCommand.Parameters.Add("@ANSPUREGOODSNO", SqlDbType.NVarChar);  // 回答純正商品番号
                        SqlParameter paraListPrice = sqlCommand.Parameters.Add("@LISTPRICE", SqlDbType.BigInt);  // 定価
                        SqlParameter paraUnitPrice = sqlCommand.Parameters.Add("@UNITPRICE", SqlDbType.BigInt);  // 単価
                        SqlParameter paraGoodsAddInfo = sqlCommand.Parameters.Add("@GOODSADDINFO", SqlDbType.NVarChar);  // 商品補足情報
                        SqlParameter paraRoughRrofit = sqlCommand.Parameters.Add("@ROUGHRROFIT", SqlDbType.BigInt);  // 粗利額
                        SqlParameter paraRoughRate = sqlCommand.Parameters.Add("@ROUGHRATE", SqlDbType.Float);  // 粗利率
                        SqlParameter paraAnswerLimitDate = sqlCommand.Parameters.Add("@ANSWERLIMITDATE", SqlDbType.Int);  // 回答期限
                        SqlParameter paraCommentDtl = sqlCommand.Parameters.Add("@COMMENTDTL", SqlDbType.NVarChar);  // 備考(明細)
                        SqlParameter paraAppendingFileDtl = sqlCommand.Parameters.Add("@APPENDINGFILEDTL", SqlDbType.VarBinary);  // 添付ファイル(明細)
                        SqlParameter paraAppendingFileNmDtl = sqlCommand.Parameters.Add("@APPENDINGFILENMDTL", SqlDbType.NVarChar);  // 添付ファイル名(明細)
                        SqlParameter paraShelfNo = sqlCommand.Parameters.Add("@SHELFNO", SqlDbType.NVarChar);  // 棚番
                        SqlParameter paraAdditionalDivCd = sqlCommand.Parameters.Add("@ADDITIONALDIVCD", SqlDbType.Int);  // 追加区分
                        SqlParameter paraCorrectDivCD = sqlCommand.Parameters.Add("@CORRECTDIVCD", SqlDbType.Int);  // 訂正区分
                        SqlParameter paraInqOrdDivCd = sqlCommand.Parameters.Add("@INQORDDIVCD", SqlDbType.Int);  // 問合せ・発注種別
                        SqlParameter paraDisplayOrder = sqlCommand.Parameters.Add("@DISPLAYORDER", SqlDbType.Int);  // 表示順位
                        // 2010/05/26 Add >>>
                        SqlParameter paraCancelCndtinDiv = sqlCommand.Parameters.Add("@CANCELCNDTINDIV", SqlDbType.SmallInt);  // キャンセル状態区分
                        SqlParameter paraAcptAnOdrStatus = sqlCommand.Parameters.Add("@ACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                        SqlParameter paraSalesSlipNum = sqlCommand.Parameters.Add("@SALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号
                        SqlParameter paraSalesRowNo = sqlCommand.Parameters.Add("@SALESROWNO", SqlDbType.Int);  // 売上行番号
                        // 2010/05/26 Add <<<
                        // 2011/02/09 Add >>>
                        SqlParameter paraDtlTakeinDivCd = sqlCommand.Parameters.Add("@DTLTAKEINDIVCD", SqlDbType.Int);  // 明細取込区分
                        // 2011/02/09 Add <<<
                        //--- ADD 2011/05/20 --->>>
                        SqlParameter paraWarehouseCode = sqlCommand.Parameters.Add("@WAREHOUSECODE", SqlDbType.NChar);  // 倉庫コード
                        SqlParameter paraWarehouseName = sqlCommand.Parameters.Add("@WAREHOUSENAME", SqlDbType.NVarChar);  // 倉庫名称
                        SqlParameter paraWarehouseShelfNo = sqlCommand.Parameters.Add("@WAREHOUSESHELFNO", SqlDbType.NVarChar);  // 倉庫棚番
                        //--- ADD 2011/05/20 ---<<<
                        // -- ADD 2011/08/10   ------ >>>>>>
                        SqlParameter paraPmPrsntCount = sqlCommand.Parameters.Add("@PMPRSNTCOUNT", SqlDbType.Float);  // PM現在庫数
                        SqlParameter paraSetPartsMkrCd = sqlCommand.Parameters.Add("@SETPARTSMKRCD", SqlDbType.Int);  // セット部品メーカーコード
                        SqlParameter paraSetPartsNumber = sqlCommand.Parameters.Add("@SETPARTSNUMBER", SqlDbType.NVarChar);  // セット部品番号
                        SqlParameter paraSetPartsMainSubNo = sqlCommand.Parameters.Add("@SETPARTSMAINSUBNO", SqlDbType.Int);  // セット部品親子番号
                        // -- ADD 2011/08/10   ------ <<<<<<
                        // 2011/10/10 Add >>>
                        SqlParameter paraCampaignCode = sqlCommand.Parameters.Add("@CAMPAIGNCODE", SqlDbType.Int);  // キャンペーンコード
                        // 2011/10/10 Add <<<
                        // -- ADD 2012/01/10   ------ >>>>>>
                        SqlParameter paraGoodsSpecialNote = sqlCommand.Parameters.Add("@GOODSSPECIALNOTE", SqlDbType.NVarChar);  //商品規格・特記事項
                        // -- ADD 2012/01/10   ------ <<<<<<
                        // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                        SqlParameter paraAutoEstimatePartsCd = sqlCommand.Parameters.Add("@AUTOESTIMATEPARTSCD", SqlDbType.NVarChar);  //自動見積部品コード
                        // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraSalesTotalTaxInc = sqlCommand.Parameters.Add("@SALESTOTALTAXINC", SqlDbType.BigInt);  // 売上伝票合計（税込）
                        SqlParameter paraSalesTotalTaxExc = sqlCommand.Parameters.Add("@SALESTOTALTAXEXC", SqlDbType.BigInt);  // 売上伝票合計（税抜）
                        SqlParameter paraScmConsTaxLayMethod = sqlCommand.Parameters.Add("@SCMCONSTAXLAYMETHOD", SqlDbType.Int);  // SCM消費税転嫁方式
                        SqlParameter paraConsTaxRate = sqlCommand.Parameters.Add("@CONSTAXRATE", SqlDbType.Float);  // 消費税税率
                        SqlParameter paraScmFractionProcCd = sqlCommand.Parameters.Add("@SCMFRACTIONPROCCD", SqlDbType.Int);  // SCM端数処理区分
                        SqlParameter paraAccRecConsTax = sqlCommand.Parameters.Add("@ACCRECCONSTAX", SqlDbType.BigInt);  // 売掛消費税
                        SqlParameter paraPMSalesDate = sqlCommand.Parameters.Add("@PMSALESDATE", SqlDbType.Int);  // PM売上日
                        SqlParameter paraSuppSlpPrtTime = sqlCommand.Parameters.Add("@SUPPSLPPRTTIME", SqlDbType.Int);  // 仕入先伝票発行時刻
                        SqlParameter paraSalesMoneyTaxInc = sqlCommand.Parameters.Add("@SALESMONEYTAXINC", SqlDbType.BigInt);  // 売上金額（税込み）
                        SqlParameter paraSalesMoneyTaxExc = sqlCommand.Parameters.Add("@SALESMONEYTAXEXC", SqlDbType.BigInt);  // 売上金額（税抜き）
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraDataInputSystem = sqlCommand.Parameters.Add("@DATAINPUTSYSTEM", SqlDbType.Int);  // データ入力システム
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                        SqlParameter paraPmMainMngWarehouseCd = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSECD", SqlDbType.NVarChar);// PM主管倉庫コード
                        SqlParameter paraPmMainMngWarehouseName = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSENAME", SqlDbType.NVarChar);//PM主管倉庫名称
                        SqlParameter paraPmMainMngShelfNo = sqlCommand.Parameters.Add("@PMMAINMNGSHELFNO", SqlDbType.NVarChar);//PM主管棚番
                        SqlParameter paraPmMainMngPrsntCount = sqlCommand.Parameters.Add("@PMMAINMNGPRSNTCOUNT", SqlDbType.Float);//PM主管現在個数
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                        SqlParameter paraPrmSetDtlNo2 = sqlCommand.Parameters.Add("@PRMSETDTLNO2", SqlDbType.Int);  // 優良設定詳細コード２
                        SqlParameter paraPrmSetDtlName2 = sqlCommand.Parameters.Add("@PRMSETDTLNAME2", SqlDbType.NVarChar);  // 優良設定詳細名称２
                        SqlParameter paraStockStatusDiv = sqlCommand.Parameters.Add("@STOCKSTATUSDIV", SqlDbType.SmallInt);  // 在庫状況区分
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                        // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                        SqlParameter paraRentDiv = sqlCommand.Parameters.Add("@RENTDIV", SqlDbType.SmallInt);  // 貸出区分
                        SqlParameter paraMkrSuggestRtPric = sqlCommand.Parameters.Add("@MKRSUGGESTRTPRIC", SqlDbType.BigInt);  // メーカー希望小売価格
                        SqlParameter paraOpenPriceDiv = sqlCommand.Parameters.Add("@OPENPRICEDIV", SqlDbType.Int);  // オープン価格区分
                        // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                        // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                        SqlParameter paraBgnGoodsDiv = sqlCommand.Parameters.Add("@BGNGOODSDIV", SqlDbType.SmallInt);  // お買得商品選択区分
                        // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                        SqlParameter paraModelPrtsAdptYm = sqlCommand.Parameters.Add("@MODELPRTSADPTYM", SqlDbType.Int);  // 型式別部品採用年月
                        SqlParameter paraModelPrtsAblsYm = sqlCommand.Parameters.Add("@MODELPRTSABLSYM", SqlDbType.Int);  // 型式別部品廃止年月
                        SqlParameter paraModelPrtsAdptFrameNo = sqlCommand.Parameters.Add("@MODELPRTSADPTFRAMENO", SqlDbType.Int);  // 型式別部品採用車台番号
                        SqlParameter paraModelPrtsAblsFrameNo = sqlCommand.Parameters.Add("@MODELPRTSABLSFRAMENO", SqlDbType.Int);  // 型式別部品廃止車台番号
                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraAnsDeliDateDiv = sqlCommand.Parameters.Add("@ANSDELIDATEDIV", SqlDbType.SmallInt);  // 回答納期区分
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraGoodsSpecialNtForFac = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORFAC", SqlDbType.NVarChar);  // 商品規格・特記事項(工場向け)
                        SqlParameter paraGoodsSpecialNtForCOw = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORCOW", SqlDbType.NVarChar);  // 商品規格・特記事項(カーオーナー向け)
                        SqlParameter paraPrmSetDtlName2ForFac = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORFAC", SqlDbType.NVarChar);  // 優良設定詳細名称２(工場向け)
                        SqlParameter paraPrmSetDtlName2ForCOw = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORCOW", SqlDbType.NVarChar);  // 優良設定詳細名称２(カーオーナー向け)
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraInqBlUtyPtThCd = sqlCommand.Parameters.Add("@INQBLUTYPTTHCD", SqlDbType.NChar);  // 問発BL統一部品コード(スリーコード版)
                        SqlParameter paraInqBlUtyPtSbCd = sqlCommand.Parameters.Add("@INQBLUTYPTSBCD", SqlDbType.Int);  // 問発BL統一部品サブコード
                        SqlParameter paraAnsBlUtyPtThCd = sqlCommand.Parameters.Add("@ANSBLUTYPTTHCD", SqlDbType.NChar);  // 回答BL統一部品コード(スリーコード版)
                        SqlParameter paraAnsBlUtyPtSbCd = sqlCommand.Parameters.Add("@ANSBLUTYPTSBCD", SqlDbType.Int);  // 回答BL統一部品サブコード
                        SqlParameter paraAnsBLGoodsCode = sqlCommand.Parameters.Add("@ANSBLGOODSCODE", SqlDbType.Int);  // 回答BL商品コード
                        SqlParameter paraAnsBLGoodsDrCode = sqlCommand.Parameters.Add("@ANSBLGOODSDRCODE", SqlDbType.Int);  // 回答BL商品コード枝番
                        // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        //Parameterオブジェクトへ値設定
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtlIqWork.CreateDateTime);  // 作成日時
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtlIqWork.UpdateDateTime);  // 更新日時
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.EnterpriseCode);  // 企業コード
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtlIqWork.FileHeaderGuid);  // GUID
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.UpdEmployeeCode);  // 更新従業員コード
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.UpdAssemblyId1);  // 更新アセンブリID1
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.UpdAssemblyId2);  // 更新アセンブリID2
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.LogicalDeleteCode);  // 論理削除区分
                        paraInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOriginalEpCd);  // 問合せ元企業コード
                        paraInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        paraInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOtherEpCd);  // 問合せ先企業コード
                        paraInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOtherSecCd);  // 問合せ先拠点コード
                        paraInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.InquiryNumber);  // 問合せ番号
                        if (sCMAcOdrDtlIqWork.UpdateDate == DateTime.MinValue)
                        {
                            paraUpdateDate.Value = 0;  // 更新年月日
                        }
                        else
                        {
                            paraUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlIqWork.UpdateDate);  // 更新年月日
                        }
                        paraUpdateTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.UpdateTime);  // 更新時間
                        paraInqRowNumber.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.InqRowNumber);  // 問合せ行番号
                        paraInqRowNumDerivedNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.InqRowNumDerivedNo);  // 問合せ行番号枝番
                        paraInqOrgDtlDiscGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtlIqWork.InqOrgDtlDiscGuid);  // 問合せ元明細識別GUID
                        paraInqOthDtlDiscGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtlIqWork.InqOthDtlDiscGuid);  // 問合せ先明細識別GUID
                        paraGoodsDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.GoodsDivCd);  // 商品種別
                        paraRecyclePrtKindCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.RecyclePrtKindCode);  // リサイクル部品種別
                        paraRecyclePrtKindName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.RecyclePrtKindName);  // リサイクル部品種別名称
                        paraDeliveredGoodsDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.DeliveredGoodsDiv);  // 納品区分
                        paraHandleDivCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.HandleDivCode);  // 取扱区分
                        paraGoodsShape.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.GoodsShape);  // 商品形態
                        paraDelivrdGdsConfCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.DelivrdGdsConfCd);  // 納品確認区分
                        paraDeliGdsCmpltDueDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlIqWork.DeliGdsCmpltDueDate);  // 納品完了予定日
                        paraAnswerDeliveryDate.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.AnswerDeliveryDate);  // 回答納期
                        paraBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.BLGoodsCode);  // BL商品コード
                        paraBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.BLGoodsDrCode);  // BL商品コード枝番
                        paraInqGoodsName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqGoodsName);  // 問発商品名
                        paraAnsGoodsName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.AnsGoodsName);  // 回答商品名
                        paraSalesOrderCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlIqWork.SalesOrderCount);  // 発注数
                        paraDeliveredGoodsCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlIqWork.DeliveredGoodsCount);  // 納品数
                        paraGoodsNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.GoodsNo);  // 商品番号
                        paraGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.GoodsMakerCd);  // 商品メーカーコード
                        paraGoodsMakerNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.GoodsMakerNm);  // 商品メーカー名称
                        paraPureGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.PureGoodsMakerCd);  // 純正商品メーカーコード
                        paraInqPureGoodsNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqPureGoodsNo);  // 問発純正商品番号
                        paraAnsPureGoodsNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.AnsPureGoodsNo);  // 回答純正商品番号
                        paraListPrice.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.ListPrice);  // 定価
                        paraUnitPrice.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.UnitPrice);  // 単価
                        paraGoodsAddInfo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.GoodsAddInfo);  // 商品補足情報
                        paraRoughRrofit.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.RoughRrofit);  // 粗利額
                        paraRoughRate.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlIqWork.RoughRate);  // 粗利率
                        paraAnswerLimitDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlIqWork.AnswerLimitDate);  // 回答期限
                        paraCommentDtl.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.CommentDtl);  // 備考(明細)
                        paraAppendingFileDtl.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDtlIqWork.AppendingFileDtl);  // 添付ファイル(明細)
                        paraAppendingFileNmDtl.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.AppendingFileNmDtl);  // 添付ファイル名(明細)
                        paraShelfNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.ShelfNo);  // 棚番
                        paraAdditionalDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.AdditionalDivCd);  // 追加区分
                        paraCorrectDivCD.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.CorrectDivCD);  // 訂正区分
                        paraInqOrdDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.InqOrdDivCd);  // 問合せ・発注種別
                        paraDisplayOrder.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.DisplayOrder);  // 表示順位
                        // 2010/05/26 Add >>>
                        paraCancelCndtinDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlIqWork.CancelCndtinDiv);  // キャンセル状態区分
                        paraAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.AcptAnOdrStatus);  // 受注ステータス
                        paraSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.SalesSlipNum);  // 売上伝票番号
                        paraSalesRowNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.SalesRowNo);  // 売上行番号
                        // 2010/05/26 Add <<<
                        // 2011/02/09 Add >>>
                        paraDtlTakeinDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.DtlTakeinDivCd);  // 明細取込区分
                        // 2011/02/09 Add <<<
                        //--- ADD 2011/05/20 --->>>
                        paraWarehouseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.WarehouseCode);  // 倉庫コード
                        paraWarehouseName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.WarehouseName);  // 倉庫名称
                        paraWarehouseShelfNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.WarehouseShelfNo);  // 倉庫棚番
                        //--- ADD 2011/05/20 ---<<<
                        // -- ADD 2011/08/10   ------ >>>>>>
                        paraPmPrsntCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlIqWork.PmPrsntCount);  // PM現在庫数
                        paraSetPartsMkrCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.SetPartsMkrCd);  // セット部品メーカーコード
                        paraSetPartsNumber.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.SetPartsNumber);  // セット部品番号
                        paraSetPartsMainSubNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.SetPartsMainSubNo);  // セット部品親子番号
                        // -- ADD 2011/08/10   ------ <<<<<<
                        // 2011/10/10 Add >>>
                        paraCampaignCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.CampaignCode);  // キャンペーンコード
                        // 2011/10/10 Add <<<
                        // -- ADD 2012/01/10   ------ >>>>>>
                        paraGoodsSpecialNote.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.GoodsSpecialNote);  //商品規格・特記事項
                        // -- ADD 2012/01/10   ------ <<<<<<
                        // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                        paraAutoEstimatePartsCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.AutoEstimatePartsCd); // 自動見積部品コード
                        // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraSalesTotalTaxInc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.SalesTotalTaxInc);  // 売上伝票合計（税込）
                        paraSalesTotalTaxExc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.SalesTotalTaxExc);  // 売上伝票合計（税抜）
                        paraScmConsTaxLayMethod.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.ScmConsTaxLayMethod);  // SCM消費税転嫁方式
                        paraConsTaxRate.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlIqWork.ConsTaxRate);  // 消費税税率
                        paraScmFractionProcCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.ScmFractionProcCd);  // SCM端数処理区分
                        paraAccRecConsTax.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.AccRecConsTax);  // 売掛消費税
                        paraPMSalesDate.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.PMSalesDate);  // PM売上日
                        paraSuppSlpPrtTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.SuppSlpPrtTime);  // 仕入先伝票発行時刻
                        paraSalesMoneyTaxInc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.SalesMoneyTaxInc);  // 売上金額（税込み）
                        paraSalesMoneyTaxExc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.SalesMoneyTaxExc);  // 売上金額（税抜き）
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraDataInputSystem.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.DataInputSystem);  // データ入力システム
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                        paraPmMainMngWarehouseCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.PmMainMngWarehouseCd);// PM主管倉庫コード
                        paraPmMainMngWarehouseName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.PmMainMngWarehouseName);// PM主管倉庫名称
                        paraPmMainMngShelfNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.PmMainMngShelfNo);// PM主管棚番
                        paraPmMainMngPrsntCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlIqWork.PmMainMngPrsntCount);// PM主管現在個数
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                        paraPrmSetDtlNo2.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.PrmSetDtlNo2); // 優良設定詳細コード２
                        paraPrmSetDtlName2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.PrmSetDtlName2); // 優良設定詳細名称２
                        paraStockStatusDiv.Value = SqlDataMediator.SqlSetShort(sCMAcOdrDtlIqWork.StockStatusDiv); // 在庫状況区分
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                        // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                        paraRentDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlIqWork.RentDiv); // 貸出区分            
                        paraMkrSuggestRtPric.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.MkrSuggestRtPric); // メーカー希望小売価格
                        paraOpenPriceDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.OpenPriceDiv); // オープン価格区分    
                        // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                        // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                        paraBgnGoodsDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlIqWork.BgnGoodsDiv); // お買得商品選択区分
                        // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                        paraModelPrtsAdptYm.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.ModelPrtsAdptYm); // 型式別部品採用年月    
                        paraModelPrtsAblsYm.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.ModelPrtsAblsYm); // 型式別部品廃止年月    
                        paraModelPrtsAdptFrameNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.ModelPrtsAdptFrameNo); // 型式別部品採用車台番号    
                        paraModelPrtsAblsFrameNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.ModelPrtsAblsFrameNo); // 型式別部品廃止車台番号    
                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraAnsDeliDateDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlIqWork.AnsDeliDateDiv); // 回答納期区分
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraGoodsSpecialNtForFac.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.GoodsSpecialNtForFac); // 商品規格・特記事項(工場向け)
                        paraGoodsSpecialNtForCOw.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.GoodsSpecialNtForCOw); // 商品規格・特記事項(カーオーナー向け)
                        paraPrmSetDtlName2ForFac.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.PrmSetDtlName2ForFac); // 優良設定詳細名称２(工場向け)
                        paraPrmSetDtlName2ForCOw.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.PrmSetDtlName2ForCOw); // 優良設定詳細名称２(カーオーナー向け)
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraInqBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqBlUtyPtThCd);  // 問発BL統一部品コード(スリーコード版)
                        paraInqBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.InqBlUtyPtSbCd);  // 問発BL統一部品サブコード
                        paraAnsBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.AnsBlUtyPtThCd);  // 回答BL統一部品コード(スリーコード版)
                        paraAnsBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.AnsBlUtyPtSbCd);  // 回答BL統一部品サブコード
                        paraAnsBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.AnsBLGoodsCode);  // 回答BL商品コード
                        paraAnsBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.AnsBLGoodsDrCode);  // 回答BL商品コード枝番
                        // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        sqlCommand.CommandTimeout = dbCommandTimeout; // ADD 田建委 2020/08/28 PMKOBETSU-4076の対応
                        sqlCommand.ExecuteNonQuery();
                        al.Add(sCMAcOdrDtlIqWork);
                    }
                }

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            scmAcOdrDtlIqWorkList = al;

            return status;
        }

        /// <summary>
        /// SCM受注明細データ(問合せ・発注)情報を追加・更新します。
        /// </summary>
        /// <param name="scmAcOdrDtlIqWorkList">追加・更新するSCM受注明細データ(問合せ・発注)情報を格納する ArrayList</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <param name="dbCommandTimeout">コマンドタイムアウト</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : scmAcOdrDtlIqWorkList に格納されているSCM受注明細データ(問合せ・発注)情報を追加・更新します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.06.17</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        /// <br>Update Note: 2020/08/28 田建委</br>
        /// <br>管理番号   : 11600006-00</br>
        /// <br>             PMKOBETSU-4076 タイムアウト設定</br> 
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
        //private int WriteSCMAcOdrDtlIqWorkProc(ref ArrayList scmAcOdrDtlIqWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        private int WriteSCMAcOdrDtlIqWorkProc(ref ArrayList scmAcOdrDtlIqWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction, int dbCommandTimeout)
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            ArrayList al = new ArrayList();
            try
            {
                if (scmAcOdrDtlIqWorkList != null)
                {
                    string sqlText = string.Empty;
                    sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);

                    for (int i = 0; i < scmAcOdrDtlIqWorkList.Count; i++)
                    {
                        SCMAcOdrDtlIqWork sCMAcOdrDtlIqWork = scmAcOdrDtlIqWorkList[i] as SCMAcOdrDtlIqWork;

                        # region [SELECT文]
                        sqlText = string.Empty;
                        sqlText += "SELECT" + Environment.NewLine;
                        sqlText += "  UPDATEDATETIMERF" + Environment.NewLine;
                        sqlText += "FROM" + Environment.NewLine;
                        sqlText += "  SCMACODRDTLIQRF " + Environment.NewLine;
                        sqlText += "WHERE" + Environment.NewLine;
                        sqlText += "      ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                        sqlText += "  AND INQOTHEREPCDRF = @FINDINQOTHEREPCD" + Environment.NewLine;
                        sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;
                        sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;
                        sqlText += "  AND UPDATEDATERF = @FINDUPDATEDATE" + Environment.NewLine;
                        sqlText += "  AND UPDATETIMERF = @FINDUPDATETIME" + Environment.NewLine;
                        sqlText += "  AND INQROWNUMBERRF = @FINDINQROWNUMBER" + Environment.NewLine;
                        sqlText += "  AND INQROWNUMDERIVEDNORF = @FINDINQROWNUMDERIVEDNO" + Environment.NewLine;
                        sqlCommand.CommandText = sqlText;
                        # endregion

                        sqlCommand.Parameters.Clear();

                        //Prameterオブジェクトの作成
                        SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                        SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                        SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                        SqlParameter findInqOtherEpCd = sqlCommand.Parameters.Add("@FINDINQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                        SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                        SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                        SqlParameter findUpdateDate = sqlCommand.Parameters.Add("@FINDUPDATEDATE", SqlDbType.Int);  // 更新年月日
                        SqlParameter findUpdateTime = sqlCommand.Parameters.Add("@FINDUPDATETIME", SqlDbType.Int);  // 更新時間
                        SqlParameter findInqRowNumber = sqlCommand.Parameters.Add("@FINDINQROWNUMBER", SqlDbType.Int);  // 問合せ行番号
                        SqlParameter findInqRowNumDerivedNo = sqlCommand.Parameters.Add("@FINDINQROWNUMDERIVEDNO", SqlDbType.Int);  // 問合せ行番号枝番

                        //Parameterオブジェクトへ値設定
                        findEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.EnterpriseCode);  // 企業コード
                        findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOriginalEpCd);  // 問合せ元企業コード
                        findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        findInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOtherEpCd);  // 問合せ先企業コード
                        findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOtherSecCd);  // 問合せ先拠点コード
                        findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.InquiryNumber);  // 問合せ番号
                        if (sCMAcOdrDtlIqWork.UpdateDate == DateTime.MinValue)
                        {
                            findUpdateDate.Value = 0;  // 更新年月日
                        }
                        else
                        {
                            findUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlIqWork.UpdateDate);  // 更新年月日
                        }
                        findUpdateTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.UpdateTime);  // 更新時間
                        findInqRowNumber.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.InqRowNumber);  // 問合せ行番号
                        findInqRowNumDerivedNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.InqRowNumDerivedNo);  // 問合せ行番号枝番

                        sqlCommand.CommandTimeout = dbCommandTimeout;  //ADD 田建委 2020/08/28 PMKOBETSU-4076の対応
                        myReader = sqlCommand.ExecuteReader();

                        sqlText = string.Empty;

                        if (myReader.Read())
                        {
                            // 既存GUIDデータがある場合で更新日時が異なる場合は排他エラーで戻す
                            DateTime _updateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));// 更新日時

                            if (_updateDateTime != sCMAcOdrDtlIqWork.UpdateDateTime)
                            {
                                if (sCMAcOdrDtlIqWork.UpdateDateTime == DateTime.MinValue)
                                {
                                    // 新規登録で該当データ有りの場合には重複
                                    status = (int)ConstantManagement.DB_Status.ctDB_DUPLICATE;
                                }
                                else
                                {
                                    // 既存データで更新日時違いの場合には排他
                                    status = (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE;
                                }

                                return status;
                            }

                            # region [UPDATE文]
                            sqlText += "  UPDATE SCMACODRDTLIQRF" + Environment.NewLine;
                            sqlText += "  SET" + Environment.NewLine;
                            sqlText += "  CREATEDATETIMERF = @CREATEDATETIME" + Environment.NewLine;
                            sqlText += " ,UPDATEDATETIMERF = @UPDATEDATETIME" + Environment.NewLine;
                            sqlText += " ,ENTERPRISECODERF = @ENTERPRISECODE" + Environment.NewLine;
                            sqlText += " ,FILEHEADERGUIDRF = @FILEHEADERGUID" + Environment.NewLine;
                            sqlText += " ,UPDEMPLOYEECODERF = @UPDEMPLOYEECODE" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID1RF = @UPDASSEMBLYID1" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID2RF = @UPDASSEMBLYID2" + Environment.NewLine;
                            sqlText += " ,LOGICALDELETECODERF = @LOGICALDELETECODE" + Environment.NewLine;
                            sqlText += " ,INQORIGINALEPCDRF = @INQORIGINALEPCD" + Environment.NewLine;
                            sqlText += " ,INQORIGINALSECCDRF = @INQORIGINALSECCD" + Environment.NewLine;
                            sqlText += " ,INQOTHEREPCDRF = @INQOTHEREPCD" + Environment.NewLine;
                            sqlText += " ,INQOTHERSECCDRF = @INQOTHERSECCD" + Environment.NewLine;
                            sqlText += " ,INQUIRYNUMBERRF = @INQUIRYNUMBER" + Environment.NewLine;
                            sqlText += " ,UPDATEDATERF = @UPDATEDATE" + Environment.NewLine;
                            sqlText += " ,UPDATETIMERF = @UPDATETIME" + Environment.NewLine;
                            sqlText += " ,INQROWNUMBERRF = @INQROWNUMBER" + Environment.NewLine;
                            sqlText += " ,INQROWNUMDERIVEDNORF = @INQROWNUMDERIVEDNO" + Environment.NewLine;
                            sqlText += " ,INQORGDTLDISCGUIDRF = @INQORGDTLDISCGUID" + Environment.NewLine;
                            sqlText += " ,INQOTHDTLDISCGUIDRF = @INQOTHDTLDISCGUID" + Environment.NewLine;
                            sqlText += " ,GOODSDIVCDRF = @GOODSDIVCD" + Environment.NewLine;
                            sqlText += " ,RECYCLEPRTKINDCODERF = @RECYCLEPRTKINDCODE" + Environment.NewLine;
                            sqlText += " ,RECYCLEPRTKINDNAMERF = @RECYCLEPRTKINDNAME" + Environment.NewLine;
                            sqlText += " ,DELIVEREDGOODSDIVRF = @DELIVEREDGOODSDIV" + Environment.NewLine;
                            sqlText += " ,HANDLEDIVCODERF = @HANDLEDIVCODE" + Environment.NewLine;
                            sqlText += " ,GOODSSHAPERF = @GOODSSHAPE" + Environment.NewLine;
                            sqlText += " ,DELIVRDGDSCONFCDRF = @DELIVRDGDSCONFCD" + Environment.NewLine;
                            sqlText += " ,DELIGDSCMPLTDUEDATERF = @DELIGDSCMPLTDUEDATE" + Environment.NewLine;
                            sqlText += " ,ANSWERDELIVERYDATERF = @ANSWERDELIVERYDATE" + Environment.NewLine;
                            sqlText += " ,BLGOODSCODERF = @BLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,BLGOODSDRCODERF = @BLGOODSDRCODE" + Environment.NewLine;
                            sqlText += " ,INQGOODSNAMERF = @INQGOODSNAME" + Environment.NewLine;
                            sqlText += " ,ANSGOODSNAMERF = @ANSGOODSNAME" + Environment.NewLine;
                            sqlText += " ,SALESORDERCOUNTRF = @SALESORDERCOUNT" + Environment.NewLine;
                            sqlText += " ,DELIVEREDGOODSCOUNTRF = @DELIVEREDGOODSCOUNT" + Environment.NewLine;
                            sqlText += " ,GOODSNORF = @GOODSNO" + Environment.NewLine;
                            sqlText += " ,GOODSMAKERCDRF = @GOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,GOODSMAKERNMRF = @GOODSMAKERNM" + Environment.NewLine;
                            sqlText += " ,PUREGOODSMAKERCDRF = @PUREGOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,INQPUREGOODSNORF = @INQPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,ANSPUREGOODSNORF = @ANSPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,LISTPRICERF = @LISTPRICE" + Environment.NewLine;
                            sqlText += " ,UNITPRICERF = @UNITPRICE" + Environment.NewLine;
                            sqlText += " ,GOODSADDINFORF = @GOODSADDINFO" + Environment.NewLine;
                            sqlText += " ,ROUGHRROFITRF = @ROUGHRROFIT" + Environment.NewLine;
                            sqlText += " ,ROUGHRATERF = @ROUGHRATE" + Environment.NewLine;
                            sqlText += " ,ANSWERLIMITDATERF = @ANSWERLIMITDATE" + Environment.NewLine;
                            sqlText += " ,COMMENTDTLRF = @COMMENTDTL" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILEDTLRF = @APPENDINGFILEDTL" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILENMDTLRF = @APPENDINGFILENMDTL" + Environment.NewLine;
                            sqlText += " ,SHELFNORF = @SHELFNO" + Environment.NewLine;
                            sqlText += " ,ADDITIONALDIVCDRF = @ADDITIONALDIVCD" + Environment.NewLine;
                            sqlText += " ,CORRECTDIVCDRF = @CORRECTDIVCD" + Environment.NewLine;
                            sqlText += " ,INQORDDIVCDRF = @INQORDDIVCD" + Environment.NewLine;
                            sqlText += " ,DISPLAYORDERRF = @DISPLAYORDER" + Environment.NewLine;
                            // 2010/05/26 Add >>>
                            sqlText += " ,CANCELCNDTINDIVRF = @CANCELCNDTINDIV" + Environment.NewLine;
                            sqlText += " ,ACPTANODRSTATUSRF = @ACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += " ,SALESSLIPNUMRF = @SALESSLIPNUM" + Environment.NewLine;
                            sqlText += " ,SALESROWNORF = @SALESROWNO" + Environment.NewLine;
                            // 2010/05/26 Add <<<
                            // 2011/02/09 Add >>>
                            sqlText += " ,DTLTAKEINDIVCDRF = @DTLTAKEINDIVCD" + Environment.NewLine;
                            // 2011/02/09 Add <<<
                            //--- ADD 2011/05/20 --->>>
                            sqlText += " ,WAREHOUSECODERF = @WAREHOUSECODE" + Environment.NewLine;
                            sqlText += " ,WAREHOUSENAMERF = @WAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,WAREHOUSESHELFNORF = @WAREHOUSESHELFNO" + Environment.NewLine;
                            //--- ADD 2011/05/20 ---<<<
                            // -- ADD 2011/08/10   ------ >>>>>>
                            sqlText += " ,PMPRSNTCOUNTRF = @PMPRSNTCOUNT" + Environment.NewLine;
                            sqlText += " ,SETPARTSMKRCDRF = @SETPARTSMKRCD" + Environment.NewLine;
                            sqlText += " ,SETPARTSNUMBERRF = @SETPARTSNUMBER" + Environment.NewLine;
                            sqlText += " ,SETPARTSMAINSUBNORF = @SETPARTSMAINSUBNO" + Environment.NewLine;
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // -- ADD 2011/10/10   ------ <<<<<<
                            sqlText += " ,CAMPAIGNCODERF = @CAMPAIGNCODE" + Environment.NewLine;
                            // -- ADD 2011/10/10   ------ <<<<<<
                            // -- ADD 2012/01/10   ------ >>>>>>
                            sqlText += " ,GOODSSPECIALNOTERF = @GOODSSPECIALNOTE" + Environment.NewLine;  //商品規格・特記事項
                            // -- ADD 2012/01/10   ------ <<<<<<
                            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                            sqlText += " ,AUTOESTIMATEPARTSCDRF = @AUTOESTIMATEPARTSCD" + Environment.NewLine;  //自動見積部品コード
                            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,SALESTOTALTAXINCRF = @SALESTOTALTAXINC" + Environment.NewLine;  //　売上伝票合計（税込）
                            sqlText += " ,SALESTOTALTAXEXCRF = @SALESTOTALTAXEXC" + Environment.NewLine;  // 売上伝票合計（税抜）
                            sqlText += " ,SCMCONSTAXLAYMETHODRF = @SCMCONSTAXLAYMETHOD" + Environment.NewLine;  // SCM消費税転嫁方式
                            sqlText += " ,CONSTAXRATERF = @CONSTAXRATE" + Environment.NewLine;  // 消費税税率
                            sqlText += " ,SCMFRACTIONPROCCDRF = @SCMFRACTIONPROCCD" + Environment.NewLine;  // SCM端数処理区分
                            sqlText += " ,ACCRECCONSTAXRF = @ACCRECCONSTAX" + Environment.NewLine;  // 売掛消費税
                            sqlText += " ,PMSALESDATERF = @PMSALESDATE" + Environment.NewLine;  // PM売上日
                            sqlText += " ,SUPPSLPPRTTIMERF = @SUPPSLPPRTTIME" + Environment.NewLine;  // 仕入先伝票発行時刻
                            sqlText += " ,SALESMONEYTAXINCRF = @SALESMONEYTAXINC" + Environment.NewLine;  // 売上金額（税込み）
                            sqlText += " ,SALESMONEYTAXEXCRF = @SALESMONEYTAXEXC" + Environment.NewLine;  // 売上金額（税抜き）
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,DATAINPUTSYSTEMRF = @DATAINPUTSYSTEM" + Environment.NewLine;  // データ入力システム
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            sqlText += " ,PMMAINMNGWAREHOUSECDRF = @PMMAINMNGWAREHOUSECD" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGWAREHOUSENAMERF = @PMMAINMNGWAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGSHELFNORF = @PMMAINMNGSHELFNO" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGPRSNTCOUNTRF = @PMMAINMNGPRSNTCOUNT" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,INQBLUTYPTTHCDRF=@INQBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,INQBLUTYPTSBCDRF=@INQBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTTHCDRF=@ANSBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTSBCDRF=@ANSBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSCODERF=@ANSBLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSDRCODERF=@ANSBLGOODSDRCODE" + Environment.NewLine;
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            sqlText += "WHERE" + Environment.NewLine;
                            sqlText += "      ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                            sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                            sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                            sqlText += "  AND INQOTHEREPCDRF = @FINDINQOTHEREPCD" + Environment.NewLine;
                            sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;
                            sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;
                            sqlText += "  AND UPDATEDATERF = @FINDUPDATEDATE" + Environment.NewLine;
                            sqlText += "  AND UPDATETIMERF = @FINDUPDATETIME" + Environment.NewLine;
                            sqlText += "  AND INQROWNUMBERRF = @FINDINQROWNUMBER" + Environment.NewLine;
                            sqlText += "  AND INQROWNUMDERIVEDNORF = @FINDINQROWNUMDERIVEDNO" + Environment.NewLine;
                            sqlCommand.CommandText = sqlText;
                            # endregion

                            // KEYコマンドを再設定
                            findEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.EnterpriseCode);  // 企業コード
                            findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOriginalEpCd);  // 問合せ元企業コード
                            findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOriginalSecCd);  // 問合せ元拠点コード
                            findInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOtherEpCd);  // 問合せ先企業コード
                            findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOtherSecCd);  // 問合せ先拠点コード
                            findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.InquiryNumber);  // 問合せ番号
                            if (sCMAcOdrDtlIqWork.UpdateDate == DateTime.MinValue)
                            {
                                findUpdateDate.Value = 0;  // 更新年月日
                            }
                            else
                            {
                                findUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlIqWork.UpdateDate);  // 更新年月日
                            }
                            findUpdateTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.UpdateTime);  // 更新時間
                            findInqRowNumber.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.InqRowNumber);  // 問合せ行番号
                            findInqRowNumDerivedNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.InqRowNumDerivedNo);  // 問合せ行番号枝番

                            // 更新ヘッダ情報を設定
                            object obj = (object)this;
                            IFileHeader flhd = (IFileHeader)sCMAcOdrDtlIqWork;
                            FileHeader fileHeader = new FileHeader(obj);
                            fileHeader.SetUpdateHeader(ref flhd, obj);
                        }
                        else
                        {
                            // 既存GUIDデータが無い場合で更新日時が更新対象データに入っている場合はすでに削除されている意味で排他を戻す
                            if (sCMAcOdrDtlIqWork.UpdateDateTime > DateTime.MinValue)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE;
                                return status;
                            }

                            # region [INSERT文]
                            sqlText += "  INSERT INTO SCMACODRDTLIQRF (" + Environment.NewLine;
                            sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                            sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                            sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                            sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                            sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                            sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                            sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                            sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                            sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                            sqlText += " ,INQROWNUMBERRF" + Environment.NewLine;
                            sqlText += " ,INQROWNUMDERIVEDNORF" + Environment.NewLine;
                            sqlText += " ,INQORGDTLDISCGUIDRF" + Environment.NewLine;
                            sqlText += " ,INQOTHDTLDISCGUIDRF" + Environment.NewLine;
                            sqlText += " ,GOODSDIVCDRF" + Environment.NewLine;
                            sqlText += " ,RECYCLEPRTKINDCODERF" + Environment.NewLine;
                            sqlText += " ,RECYCLEPRTKINDNAMERF" + Environment.NewLine;
                            sqlText += " ,DELIVEREDGOODSDIVRF" + Environment.NewLine;
                            sqlText += " ,HANDLEDIVCODERF" + Environment.NewLine;
                            sqlText += " ,GOODSSHAPERF" + Environment.NewLine;
                            sqlText += " ,DELIVRDGDSCONFCDRF" + Environment.NewLine;
                            sqlText += " ,DELIGDSCMPLTDUEDATERF" + Environment.NewLine;
                            sqlText += " ,ANSWERDELIVERYDATERF" + Environment.NewLine;
                            sqlText += " ,BLGOODSCODERF" + Environment.NewLine;
                            sqlText += " ,BLGOODSDRCODERF" + Environment.NewLine;
                            sqlText += " ,INQGOODSNAMERF" + Environment.NewLine;
                            sqlText += " ,ANSGOODSNAMERF" + Environment.NewLine;
                            sqlText += " ,SALESORDERCOUNTRF" + Environment.NewLine;
                            sqlText += " ,DELIVEREDGOODSCOUNTRF" + Environment.NewLine;
                            sqlText += " ,GOODSNORF" + Environment.NewLine;
                            sqlText += " ,GOODSMAKERCDRF" + Environment.NewLine;
                            sqlText += " ,GOODSMAKERNMRF" + Environment.NewLine;
                            sqlText += " ,PUREGOODSMAKERCDRF" + Environment.NewLine;
                            sqlText += " ,INQPUREGOODSNORF" + Environment.NewLine;
                            sqlText += " ,ANSPUREGOODSNORF" + Environment.NewLine;
                            sqlText += " ,LISTPRICERF" + Environment.NewLine;
                            sqlText += " ,UNITPRICERF" + Environment.NewLine;
                            sqlText += " ,GOODSADDINFORF" + Environment.NewLine;
                            sqlText += " ,ROUGHRROFITRF" + Environment.NewLine;
                            sqlText += " ,ROUGHRATERF" + Environment.NewLine;
                            sqlText += " ,ANSWERLIMITDATERF" + Environment.NewLine;
                            sqlText += " ,COMMENTDTLRF" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILEDTLRF" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILENMDTLRF" + Environment.NewLine;
                            sqlText += " ,SHELFNORF" + Environment.NewLine;
                            sqlText += " ,ADDITIONALDIVCDRF" + Environment.NewLine;
                            sqlText += " ,CORRECTDIVCDRF" + Environment.NewLine;
                            sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                            // 2010/05/26 >>>
                            //sqlText += " ,DISPLAYORDERRF)" + Environment.NewLine;
                            sqlText += " ,DISPLAYORDERRF" + Environment.NewLine;
                            sqlText += " ,CANCELCNDTINDIVRF" + Environment.NewLine;
                            sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                            sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                            sqlText += " ,SALESROWNORF" + Environment.NewLine;
                            // 2011/02/09 Add >>>
                            sqlText += " ,DTLTAKEINDIVCDRF" + Environment.NewLine;
                            // 2011/02/09 Add <<<
                            //--- ADD 2011/05/20 --->>>
                            sqlText += " ,WAREHOUSECODERF" + Environment.NewLine;
                            sqlText += " ,WAREHOUSENAMERF" + Environment.NewLine;
                            sqlText += " ,WAREHOUSESHELFNORF" + Environment.NewLine;
                            //--- ADD 2011/05/20 ---<<<
                            // -- ADD 2011/08/10   ------ >>>>>>
                            sqlText += " ,PMPRSNTCOUNTRF" + Environment.NewLine;
                            sqlText += " ,SETPARTSMKRCDRF" + Environment.NewLine;
                            sqlText += " ,SETPARTSNUMBERRF" + Environment.NewLine;
                            sqlText += " ,SETPARTSMAINSUBNORF" + Environment.NewLine;
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // -- ADD 2011/10/10   ------ >>>>>>
                            sqlText += " ,CAMPAIGNCODERF" + Environment.NewLine;
                            // -- ADD 2011/10/10   ------ <<<<<<
                            // -- ADD 2012/01/10   ------ >>>>>>
                            sqlText += " ,GOODSSPECIALNOTERF" + Environment.NewLine;  //商品規格・特記事項
                            // -- ADD 2012/01/10   ------ <<<<<<
                            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                            sqlText += " ,AUTOESTIMATEPARTSCDRF" + Environment.NewLine;  //自動見積部品コード
                            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;  //　売上伝票合計（税込）
                            sqlText += " ,SALESTOTALTAXEXCRF" + Environment.NewLine;  // 売上伝票合計（税抜）
                            sqlText += " ,SCMCONSTAXLAYMETHODRF" + Environment.NewLine;  // SCM消費税転嫁方式
                            sqlText += " ,CONSTAXRATERF" + Environment.NewLine;  // 消費税税率
                            sqlText += " ,SCMFRACTIONPROCCDRF" + Environment.NewLine;  // SCM端数処理区分
                            sqlText += " ,ACCRECCONSTAXRF" + Environment.NewLine;  // 売掛消費税
                            sqlText += " ,PMSALESDATERF" + Environment.NewLine;  // PM売上日
                            sqlText += " ,SUPPSLPPRTTIMERF" + Environment.NewLine;  // 仕入先伝票発行時刻
                            sqlText += " ,SALESMONEYTAXINCRF" + Environment.NewLine;  // 売上金額（税込み）
                            sqlText += " ,SALESMONEYTAXEXCRF" + Environment.NewLine;  // 売上金額（税抜き）
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            // UPD 2013/06/03 三戸 2013/06/18配信 SCM障害№10410対応時の不具合 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            //sqlText += " ,DATAINPUTSYSTEMRF = @DATAINPUTSYSTEM" + Environment.NewLine;  // データ入力システム
                            sqlText += " ,DATAINPUTSYSTEMRF" + Environment.NewLine;  // データ入力システム
                            // dbg end
                            // UPD 2013/06/03 三戸 2013/06/18配信 SCM障害№10410対応時の不具合 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            sqlText += " ,PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGSHELFNORF" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                            sqlText += " ,PRMSETDTLNO2RF  " + Environment.NewLine;
                            sqlText += " ,PRMSETDTLNAME2RF" + Environment.NewLine;
                            sqlText += " ,STOCKSTATUSDIVRF" + Environment.NewLine;
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                            sqlText += " ,RENTDIVRF" + Environment.NewLine;
                            sqlText += " ,MKRSUGGESTRTPRICRF" + Environment.NewLine;
                            sqlText += " ,OPENPRICEDIVRF" + Environment.NewLine;
                            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                            // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                            sqlText += " ,BGNGOODSDIVRF" + Environment.NewLine;
                            // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                            sqlText += " ,MODELPRTSADPTYMRF" + Environment.NewLine;
                            sqlText += " ,MODELPRTSABLSYMRF" + Environment.NewLine;
                            sqlText += " ,MODELPRTSADPTFRAMENORF" + Environment.NewLine;
                            sqlText += " ,MODELPRTSABLSFRAMENORF" + Environment.NewLine;
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,ANSDELIDATEDIVRF" + Environment.NewLine;
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,GOODSSPECIALNTFORFACRF" + Environment.NewLine;
                            sqlText += " ,GOODSSPECIALNTFORCOWRF" + Environment.NewLine;
                            sqlText += " ,PRMSETDTLNAME2FORFACRF" + Environment.NewLine;
                            sqlText += " ,PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,INQBLUTYPTTHCDRF" + Environment.NewLine;
                            sqlText += " ,INQBLUTYPTSBCDRF" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTTHCDRF" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTSBCDRF" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSCODERF" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSDRCODERF" + Environment.NewLine;
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                            sqlText += " )" + Environment.NewLine;
                            // 2010/05/26 <<<
                            sqlText += "  VALUES" + Environment.NewLine;
                            sqlText += "  (@CREATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                            sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                            sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                            sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALEPCD" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALSECCD" + Environment.NewLine;
                            sqlText += " ,@INQOTHEREPCD" + Environment.NewLine;
                            sqlText += " ,@INQOTHERSECCD" + Environment.NewLine;
                            sqlText += " ,@INQUIRYNUMBER" + Environment.NewLine;
                            sqlText += " ,@UPDATEDATE" + Environment.NewLine;
                            sqlText += " ,@UPDATETIME" + Environment.NewLine;
                            sqlText += " ,@INQROWNUMBER" + Environment.NewLine;
                            sqlText += " ,@INQROWNUMDERIVEDNO" + Environment.NewLine;
                            sqlText += " ,@INQORGDTLDISCGUID" + Environment.NewLine;
                            sqlText += " ,@INQOTHDTLDISCGUID" + Environment.NewLine;
                            sqlText += " ,@GOODSDIVCD" + Environment.NewLine;
                            sqlText += " ,@RECYCLEPRTKINDCODE" + Environment.NewLine;
                            sqlText += " ,@RECYCLEPRTKINDNAME" + Environment.NewLine;
                            sqlText += " ,@DELIVEREDGOODSDIV" + Environment.NewLine;
                            sqlText += " ,@HANDLEDIVCODE" + Environment.NewLine;
                            sqlText += " ,@GOODSSHAPE" + Environment.NewLine;
                            sqlText += " ,@DELIVRDGDSCONFCD" + Environment.NewLine;
                            sqlText += " ,@DELIGDSCMPLTDUEDATE" + Environment.NewLine;
                            sqlText += " ,@ANSWERDELIVERYDATE" + Environment.NewLine;
                            sqlText += " ,@BLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,@BLGOODSDRCODE" + Environment.NewLine;
                            sqlText += " ,@INQGOODSNAME" + Environment.NewLine;
                            sqlText += " ,@ANSGOODSNAME" + Environment.NewLine;
                            sqlText += " ,@SALESORDERCOUNT" + Environment.NewLine;
                            sqlText += " ,@DELIVEREDGOODSCOUNT" + Environment.NewLine;
                            sqlText += " ,@GOODSNO" + Environment.NewLine;
                            sqlText += " ,@GOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,@GOODSMAKERNM" + Environment.NewLine;
                            sqlText += " ,@PUREGOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,@INQPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,@ANSPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,@LISTPRICE" + Environment.NewLine;
                            sqlText += " ,@UNITPRICE" + Environment.NewLine;
                            sqlText += " ,@GOODSADDINFO" + Environment.NewLine;
                            sqlText += " ,@ROUGHRROFIT" + Environment.NewLine;
                            sqlText += " ,@ROUGHRATE" + Environment.NewLine;
                            sqlText += " ,@ANSWERLIMITDATE" + Environment.NewLine;
                            sqlText += " ,@COMMENTDTL" + Environment.NewLine;
                            sqlText += " ,@APPENDINGFILEDTL" + Environment.NewLine;
                            sqlText += " ,@APPENDINGFILENMDTL" + Environment.NewLine;
                            sqlText += " ,@SHELFNO" + Environment.NewLine;
                            sqlText += " ,@ADDITIONALDIVCD" + Environment.NewLine;
                            sqlText += " ,@CORRECTDIVCD" + Environment.NewLine;
                            sqlText += " ,@INQORDDIVCD" + Environment.NewLine;
                            // 2010/05/26 >>>
                            //sqlText += " ,@DISPLAYORDER)" + Environment.NewLine;
                            sqlText += " ,@DISPLAYORDER" + Environment.NewLine;
                            sqlText += " ,@CANCELCNDTINDIV" + Environment.NewLine;
                            sqlText += " ,@ACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += " ,@SALESSLIPNUM" + Environment.NewLine;
                            sqlText += " ,@SALESROWNO" + Environment.NewLine;
                            // 2011/02/09 Add >>>
                            sqlText += " ,@DTLTAKEINDIVCD" + Environment.NewLine;
                            // 2011/02/09 Add <<<
                            //--- ADD 2011/05/20 --->>>
                            sqlText += " ,@WAREHOUSECODE" + Environment.NewLine;
                            sqlText += " ,@WAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,@WAREHOUSESHELFNO" + Environment.NewLine;
                            //--- ADD 2011/05/20 ---<<<
                            // -- ADD 2011/08/10   ------ >>>>>>
                            sqlText += " ,@PMPRSNTCOUNT" + Environment.NewLine;
                            sqlText += " ,@SETPARTSMKRCD" + Environment.NewLine;
                            sqlText += " ,@SETPARTSNUMBER" + Environment.NewLine;
                            sqlText += " ,@SETPARTSMAINSUBNO" + Environment.NewLine;
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // -- ADD 2011/10/10   ------ >>>>>>
                            sqlText += " ,@CAMPAIGNCODE" + Environment.NewLine;
                            // -- ADD 2011/10/10   ------ <<<<<<
                            // -- ADD 2012/01/10   ------ >>>>>>
                            sqlText += " ,@GOODSSPECIALNOTE" + Environment.NewLine;  //商品規格・特記事項
                            // -- ADD 2012/01/10   ------ <<<<<<
                            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                            sqlText += " ,@AUTOESTIMATEPARTSCD" + Environment.NewLine;  //自動見積部品コード
                            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@SALESTOTALTAXINC" + Environment.NewLine;  //　売上伝票合計（税込）
                            sqlText += " ,@SALESTOTALTAXEXC" + Environment.NewLine;  // 売上伝票合計（税抜）
                            sqlText += " ,@SCMCONSTAXLAYMETHOD" + Environment.NewLine;  // SCM消費税転嫁方式
                            sqlText += " ,@CONSTAXRATE" + Environment.NewLine;  // 消費税税率
                            sqlText += " ,@SCMFRACTIONPROCCD" + Environment.NewLine;  // SCM端数処理区分
                            sqlText += " ,@ACCRECCONSTAX" + Environment.NewLine;  // 売掛消費税
                            sqlText += " ,@PMSALESDATE" + Environment.NewLine;  // PM売上日
                            sqlText += " ,@SUPPSLPPRTTIME" + Environment.NewLine;  // 仕入先伝票発行時刻
                            sqlText += " ,@SALESMONEYTAXINC" + Environment.NewLine;  // 売上金額（税込み）
                            sqlText += " ,@SALESMONEYTAXEXC" + Environment.NewLine;  // 売上金額（税抜き）
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@DATAINPUTSYSTEM" + Environment.NewLine;  // データ入力システム
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            sqlText += " ,@PMMAINMNGWAREHOUSECD" + Environment.NewLine;
                            sqlText += " ,@PMMAINMNGWAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,@PMMAINMNGSHELFNO" + Environment.NewLine;
                            sqlText += " ,@PMMAINMNGPRSNTCOUNT" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                            sqlText += " ,@PRMSETDTLNO2  " + Environment.NewLine;
                            sqlText += " ,@PRMSETDTLNAME2" + Environment.NewLine;
                            sqlText += " ,@STOCKSTATUSDIV" + Environment.NewLine;
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                            sqlText += " ,@RENTDIV" + Environment.NewLine;
                            sqlText += " ,@MKRSUGGESTRTPRIC" + Environment.NewLine;
                            sqlText += " ,@OPENPRICEDIV" + Environment.NewLine;
                            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                            // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                            sqlText += " ,@BGNGOODSDIV" + Environment.NewLine;
                            // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                            sqlText += " ,@MODELPRTSADPTYM" + Environment.NewLine;
                            sqlText += " ,@MODELPRTSABLSYM" + Environment.NewLine;
                            sqlText += " ,@MODELPRTSADPTFRAMENO" + Environment.NewLine;
                            sqlText += " ,@MODELPRTSABLSFRAMENO" + Environment.NewLine;
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@ANSDELIDATEDIV" + Environment.NewLine;
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@GOODSSPECIALNTFORFAC" + Environment.NewLine;
                            sqlText += " ,@GOODSSPECIALNTFORCOW" + Environment.NewLine;
                            sqlText += " ,@PRMSETDTLNAME2FORFAC" + Environment.NewLine;
                            sqlText += " ,@PRMSETDTLNAME2FORCOW" + Environment.NewLine;
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@INQBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,@INQBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,@ANSBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,@ANSBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,@ANSBLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,@ANSBLGOODSDRCODE" + Environment.NewLine;
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                            sqlText += " )" + Environment.NewLine;
                            // 2010/05/26 <<<
                            sqlCommand.CommandText = sqlText;
                            # endregion

                            // 登録ヘッダ情報を設定
                            object obj = (object)this;
                            IFileHeader flhd = (IFileHeader)sCMAcOdrDtlIqWork;
                            FileHeader fileHeader = new FileHeader(obj);
                            fileHeader.SetInsertHeader(ref flhd, obj);
                        }

                        if (!myReader.IsClosed)
                        {
                            myReader.Close();
                        }

                        //Prameterオブジェクトの作成
                        SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);  // 作成日時
                        SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);  // 更新日時
                        SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                        SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);  // GUID
                        SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);  // 更新従業員コード
                        SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);  // 更新アセンブリID1
                        SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);  // 更新アセンブリID2
                        SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);  // 論理削除区分
                        SqlParameter paraInqOriginalEpCd = sqlCommand.Parameters.Add("@INQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                        SqlParameter paraInqOriginalSecCd = sqlCommand.Parameters.Add("@INQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                        SqlParameter paraInqOtherEpCd = sqlCommand.Parameters.Add("@INQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                        SqlParameter paraInqOtherSecCd = sqlCommand.Parameters.Add("@INQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                        SqlParameter paraInquiryNumber = sqlCommand.Parameters.Add("@INQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                        SqlParameter paraUpdateDate = sqlCommand.Parameters.Add("@UPDATEDATE", SqlDbType.Int);  // 更新年月日
                        SqlParameter paraUpdateTime = sqlCommand.Parameters.Add("@UPDATETIME", SqlDbType.Int);  // 更新時間
                        SqlParameter paraInqRowNumber = sqlCommand.Parameters.Add("@INQROWNUMBER", SqlDbType.Int);  // 問合せ行番号
                        SqlParameter paraInqRowNumDerivedNo = sqlCommand.Parameters.Add("@INQROWNUMDERIVEDNO", SqlDbType.Int);  // 問合せ行番号枝番
                        SqlParameter paraInqOrgDtlDiscGuid = sqlCommand.Parameters.Add("@INQORGDTLDISCGUID", SqlDbType.UniqueIdentifier);  // 問合せ元明細識別GUID
                        SqlParameter paraInqOthDtlDiscGuid = sqlCommand.Parameters.Add("@INQOTHDTLDISCGUID", SqlDbType.UniqueIdentifier);  // 問合せ先明細識別GUID
                        SqlParameter paraGoodsDivCd = sqlCommand.Parameters.Add("@GOODSDIVCD", SqlDbType.Int);  // 商品種別
                        SqlParameter paraRecyclePrtKindCode = sqlCommand.Parameters.Add("@RECYCLEPRTKINDCODE", SqlDbType.Int);  // リサイクル部品種別
                        SqlParameter paraRecyclePrtKindName = sqlCommand.Parameters.Add("@RECYCLEPRTKINDNAME", SqlDbType.NVarChar);  // リサイクル部品種別名称
                        SqlParameter paraDeliveredGoodsDiv = sqlCommand.Parameters.Add("@DELIVEREDGOODSDIV", SqlDbType.Int);  // 納品区分
                        SqlParameter paraHandleDivCode = sqlCommand.Parameters.Add("@HANDLEDIVCODE", SqlDbType.Int);  // 取扱区分
                        SqlParameter paraGoodsShape = sqlCommand.Parameters.Add("@GOODSSHAPE", SqlDbType.Int);  // 商品形態
                        SqlParameter paraDelivrdGdsConfCd = sqlCommand.Parameters.Add("@DELIVRDGDSCONFCD", SqlDbType.Int);  // 納品確認区分
                        SqlParameter paraDeliGdsCmpltDueDate = sqlCommand.Parameters.Add("@DELIGDSCMPLTDUEDATE", SqlDbType.Int);  // 納品完了予定日
                        SqlParameter paraAnswerDeliveryDate = sqlCommand.Parameters.Add("@ANSWERDELIVERYDATE", SqlDbType.NVarChar);  // 回答納期
                        SqlParameter paraBLGoodsCode = sqlCommand.Parameters.Add("@BLGOODSCODE", SqlDbType.Int);  // BL商品コード
                        SqlParameter paraBLGoodsDrCode = sqlCommand.Parameters.Add("@BLGOODSDRCODE", SqlDbType.Int);  // BL商品コード枝番
                        SqlParameter paraInqGoodsName = sqlCommand.Parameters.Add("@INQGOODSNAME", SqlDbType.NVarChar);  // 問発商品名
                        SqlParameter paraAnsGoodsName = sqlCommand.Parameters.Add("@ANSGOODSNAME", SqlDbType.NVarChar);  // 回答商品名
                        SqlParameter paraSalesOrderCount = sqlCommand.Parameters.Add("@SALESORDERCOUNT", SqlDbType.Float);  // 発注数
                        SqlParameter paraDeliveredGoodsCount = sqlCommand.Parameters.Add("@DELIVEREDGOODSCOUNT", SqlDbType.Float);  // 納品数
                        SqlParameter paraGoodsNo = sqlCommand.Parameters.Add("@GOODSNO", SqlDbType.NVarChar);  // 商品番号
                        SqlParameter paraGoodsMakerCd = sqlCommand.Parameters.Add("@GOODSMAKERCD", SqlDbType.Int);  // 商品メーカーコード
                        SqlParameter paraGoodsMakerNm = sqlCommand.Parameters.Add("@GOODSMAKERNM", SqlDbType.NVarChar);  // 商品メーカー名称
                        SqlParameter paraPureGoodsMakerCd = sqlCommand.Parameters.Add("@PUREGOODSMAKERCD", SqlDbType.Int);  // 純正商品メーカーコード
                        SqlParameter paraInqPureGoodsNo = sqlCommand.Parameters.Add("@INQPUREGOODSNO", SqlDbType.NVarChar);  // 問発純正商品番号
                        SqlParameter paraAnsPureGoodsNo = sqlCommand.Parameters.Add("@ANSPUREGOODSNO", SqlDbType.NVarChar);  // 回答純正商品番号
                        SqlParameter paraListPrice = sqlCommand.Parameters.Add("@LISTPRICE", SqlDbType.BigInt);  // 定価
                        SqlParameter paraUnitPrice = sqlCommand.Parameters.Add("@UNITPRICE", SqlDbType.BigInt);  // 単価
                        SqlParameter paraGoodsAddInfo = sqlCommand.Parameters.Add("@GOODSADDINFO", SqlDbType.NVarChar);  // 商品補足情報
                        SqlParameter paraRoughRrofit = sqlCommand.Parameters.Add("@ROUGHRROFIT", SqlDbType.BigInt);  // 粗利額
                        SqlParameter paraRoughRate = sqlCommand.Parameters.Add("@ROUGHRATE", SqlDbType.Float);  // 粗利率
                        SqlParameter paraAnswerLimitDate = sqlCommand.Parameters.Add("@ANSWERLIMITDATE", SqlDbType.Int);  // 回答期限
                        SqlParameter paraCommentDtl = sqlCommand.Parameters.Add("@COMMENTDTL", SqlDbType.NVarChar);  // 備考(明細)
                        SqlParameter paraAppendingFileDtl = sqlCommand.Parameters.Add("@APPENDINGFILEDTL", SqlDbType.VarBinary);  // 添付ファイル(明細)
                        SqlParameter paraAppendingFileNmDtl = sqlCommand.Parameters.Add("@APPENDINGFILENMDTL", SqlDbType.NVarChar);  // 添付ファイル名(明細)
                        SqlParameter paraShelfNo = sqlCommand.Parameters.Add("@SHELFNO", SqlDbType.NVarChar);  // 棚番
                        SqlParameter paraAdditionalDivCd = sqlCommand.Parameters.Add("@ADDITIONALDIVCD", SqlDbType.Int);  // 追加区分
                        SqlParameter paraCorrectDivCD = sqlCommand.Parameters.Add("@CORRECTDIVCD", SqlDbType.Int);  // 訂正区分
                        SqlParameter paraInqOrdDivCd = sqlCommand.Parameters.Add("@INQORDDIVCD", SqlDbType.Int);  // 問合せ・発注種別
                        SqlParameter paraDisplayOrder = sqlCommand.Parameters.Add("@DISPLAYORDER", SqlDbType.Int);  // 表示順位
                        // 2010/05/26 Add >>>
                        SqlParameter paraCancelCndtinDiv = sqlCommand.Parameters.Add("@CANCELCNDTINDIV", SqlDbType.SmallInt);  // キャンセル状態区分
                        SqlParameter paraAcptAnOdrStatus = sqlCommand.Parameters.Add("@ACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                        SqlParameter paraSalesSlipNum = sqlCommand.Parameters.Add("@SALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号
                        SqlParameter paraSalesRowNo = sqlCommand.Parameters.Add("@SALESROWNO", SqlDbType.Int);  // 売上行番号
                        // 2010/05/26 Add <<<
                        // 2011/02/09 Add >>>
                        SqlParameter paraDtlTakeinDivCd = sqlCommand.Parameters.Add("@DTLTAKEINDIVCD", SqlDbType.Int);  // 明細取込区分
                        // 2011/02/09 Add <<<
                        //--- ADD 2011/05/20 --->>>
                        SqlParameter paraWarehouseCode = sqlCommand.Parameters.Add("@WAREHOUSECODE", SqlDbType.NChar);  // 倉庫コード
                        SqlParameter paraWarehouseName = sqlCommand.Parameters.Add("@WAREHOUSENAME", SqlDbType.NVarChar);  // 倉庫名称
                        SqlParameter paraWarehouseShelfNo = sqlCommand.Parameters.Add("@WAREHOUSESHELFNO", SqlDbType.NVarChar);  // 倉庫棚番
                        //--- ADD 2011/05/20 ---<<<
                        // -- ADD 2011/08/10   ------ >>>>>>
                        SqlParameter paraPmPrsntCount = sqlCommand.Parameters.Add("@PMPRSNTCOUNT", SqlDbType.Float);  // PM現在庫数
                        SqlParameter paraSetPartsMkrCd = sqlCommand.Parameters.Add("@SETPARTSMKRCD", SqlDbType.Int);  // セット部品メーカーコード
                        SqlParameter paraSetPartsNumber = sqlCommand.Parameters.Add("@SETPARTSNUMBER", SqlDbType.NVarChar);  // セット部品番号
                        SqlParameter paraSetPartsMainSubNo = sqlCommand.Parameters.Add("@SETPARTSMAINSUBNO", SqlDbType.Int);  // セット部品親子番号
                        // -- ADD 2011/08/10   ------ <<<<<<
                        // -- ADD 2011/10/10   ------ >>>>>>
                        SqlParameter paraCampaignCode = sqlCommand.Parameters.Add("@CAMPAIGNCODE", SqlDbType.Int);  // キャンペーンコード
                        // -- ADD 2011/10/10   ------ <<<<<<
                        // -- ADD 2012/01/10   ------ >>>>>>
                        SqlParameter paraGoodsSpecialNote = sqlCommand.Parameters.Add("@GOODSSPECIALNOTE", SqlDbType.NVarChar);  //商品規格・特記事項
                        // -- ADD 2012/01/10   ------ <<<<<<
                        // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                        SqlParameter paraAutoEstimatePartsCd = sqlCommand.Parameters.Add("@AUTOESTIMATEPARTSCD", SqlDbType.NVarChar);  //自動見積部品コード
                        // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraSalesTotalTaxInc = sqlCommand.Parameters.Add("@SALESTOTALTAXINC", SqlDbType.BigInt);  // 売上伝票合計（税込）
                        SqlParameter paraSalesTotalTaxExc = sqlCommand.Parameters.Add("@SALESTOTALTAXEXC", SqlDbType.BigInt);  // 売上伝票合計（税抜）
                        SqlParameter paraScmConsTaxLayMethod = sqlCommand.Parameters.Add("@SCMCONSTAXLAYMETHOD", SqlDbType.Int);  // SCM消費税転嫁方式
                        SqlParameter paraConsTaxRate = sqlCommand.Parameters.Add("@CONSTAXRATE", SqlDbType.Float);  // 消費税税率
                        SqlParameter paraScmFractionProcCd = sqlCommand.Parameters.Add("@SCMFRACTIONPROCCD", SqlDbType.Int);  // SCM端数処理区分
                        SqlParameter paraAccRecConsTax = sqlCommand.Parameters.Add("@ACCRECCONSTAX", SqlDbType.BigInt);  // 売掛消費税
                        SqlParameter paraPMSalesDate = sqlCommand.Parameters.Add("@PMSALESDATE", SqlDbType.Int);  // PM売上日
                        SqlParameter paraSuppSlpPrtTime = sqlCommand.Parameters.Add("@SUPPSLPPRTTIME", SqlDbType.Int);  // 仕入先伝票発行時刻
                        SqlParameter paraSalesMoneyTaxInc = sqlCommand.Parameters.Add("@SALESMONEYTAXINC", SqlDbType.BigInt);  // 売上金額（税込み）
                        SqlParameter paraSalesMoneyTaxExc = sqlCommand.Parameters.Add("@SALESMONEYTAXEXC", SqlDbType.BigInt);  // 売上金額（税抜き）
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraDataInputSystem = sqlCommand.Parameters.Add("@DATAINPUTSYSTEM", SqlDbType.Int);  // データ入力システム
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                        SqlParameter paraPmMainMngWarehouseCd = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSECD", SqlDbType.NVarChar);
                        SqlParameter paraPmMainMngWarehouseName = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSENAME", SqlDbType.NVarChar);
                        SqlParameter paraPmMainMngShelfNo = sqlCommand.Parameters.Add("@PMMAINMNGSHELFNO", SqlDbType.NVarChar);
                        SqlParameter paraPmMainMngPrsntCount = sqlCommand.Parameters.Add("@PMMAINMNGPRSNTCOUNT", SqlDbType.Float);
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                        SqlParameter paraPrmSetDtlNo2 = sqlCommand.Parameters.Add("@PRMSETDTLNO2", SqlDbType.Int);  // 優良設定詳細コード２
                        SqlParameter paraPrmSetDtlName2 = sqlCommand.Parameters.Add("@PRMSETDTLNAME2", SqlDbType.NVarChar);  // 優良設定詳細名称２
                        SqlParameter paraStockStatusDiv = sqlCommand.Parameters.Add("@STOCKSTATUSDIV", SqlDbType.SmallInt);  // 在庫状況区分
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                        // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                        SqlParameter paraRentDiv = sqlCommand.Parameters.Add("@RENTDIV", SqlDbType.SmallInt);  // 貸出区分            
                        SqlParameter paraMkrSuggestRtPric = sqlCommand.Parameters.Add("@MKRSUGGESTRTPRIC", SqlDbType.BigInt);  // メーカー希望小売価格
                        SqlParameter paraOpenPriceDiv = sqlCommand.Parameters.Add("@OPENPRICEDIV", SqlDbType.Int);  // オープン価格区分    
                        // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                        // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                        SqlParameter paraBgnGoodsDiv = sqlCommand.Parameters.Add("@BGNGOODSDIV", SqlDbType.SmallInt);  // お買得商品選択区分
                        // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                        SqlParameter paraModelPrtsAdptYm = sqlCommand.Parameters.Add("@MODELPRTSADPTYM", SqlDbType.Int);  // 型式別部品採用年月    
                        SqlParameter paraModelPrtsAblsYm = sqlCommand.Parameters.Add("@MODELPRTSABLSYM", SqlDbType.Int);  // 型式別部品廃止年月    
                        SqlParameter paraModelPrtsAdptFrameNo = sqlCommand.Parameters.Add("@MODELPRTSADPTFRAMENO", SqlDbType.Int);  // 型式別部品採用車台番号    
                        SqlParameter paraModelPrtsAblsFrameNo = sqlCommand.Parameters.Add("@MODELPRTSABLSFRAMENO", SqlDbType.Int);  // 型式別部品廃止車台番号    
                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraAnsDeliDateDiv = sqlCommand.Parameters.Add("@ANSDELIDATEDIV", SqlDbType.SmallInt);  // 回答納期区分
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraGoodsSpecialNtForFac = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORFAC", SqlDbType.NVarChar);  // 商品規格・特記事項(工場向け)
                        SqlParameter paraGoodsSpecialNtForCOw = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORCOW", SqlDbType.NVarChar);  // 商品規格・特記事項(カーオーナー向け)
                        SqlParameter paraPrmSetDtlName2ForFac = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORFAC", SqlDbType.NVarChar);  // 優良設定詳細名称２(工場向け)
                        SqlParameter paraPrmSetDtlName2ForCOw = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORCOW", SqlDbType.NVarChar);  // 優良設定詳細名称２(カーオーナー向け)
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraInqBlUtyPtThCd = sqlCommand.Parameters.Add("@INQBLUTYPTTHCD", SqlDbType.NChar);  // 問発BL統一部品コード(スリーコード版)
                        SqlParameter paraInqBlUtyPtSbCd = sqlCommand.Parameters.Add("@INQBLUTYPTSBCD", SqlDbType.Int);  // 問発BL統一部品サブコード
                        SqlParameter paraAnsBlUtyPtThCd = sqlCommand.Parameters.Add("@ANSBLUTYPTTHCD", SqlDbType.NChar);  // 回答BL統一部品コード(スリーコード版)
                        SqlParameter paraAnsBlUtyPtSbCd = sqlCommand.Parameters.Add("@ANSBLUTYPTSBCD", SqlDbType.Int);  // 回答BL統一部品サブコード
                        SqlParameter paraAnsBLGoodsCode = sqlCommand.Parameters.Add("@ANSBLGOODSCODE", SqlDbType.Int);  // 回答BL商品コード
                        SqlParameter paraAnsBLGoodsDrCode = sqlCommand.Parameters.Add("@ANSBLGOODSDRCODE", SqlDbType.Int);  // 回答BL商品コード枝番
                        // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        //Parameterオブジェクトへ値設定
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtlIqWork.CreateDateTime);  // 作成日時
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtlIqWork.UpdateDateTime);  // 更新日時
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.EnterpriseCode);  // 企業コード
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtlIqWork.FileHeaderGuid);  // GUID
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.UpdEmployeeCode);  // 更新従業員コード
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.UpdAssemblyId1);  // 更新アセンブリID1
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.UpdAssemblyId2);  // 更新アセンブリID2
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.LogicalDeleteCode);  // 論理削除区分
                        paraInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOriginalEpCd);  // 問合せ元企業コード
                        paraInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        paraInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOtherEpCd);  // 問合せ先企業コード
                        paraInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqOtherSecCd);  // 問合せ先拠点コード
                        paraInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.InquiryNumber);  // 問合せ番号
                        if (sCMAcOdrDtlIqWork.UpdateDate == DateTime.MinValue)
                        {
                            paraUpdateDate.Value = 0;  // 更新年月日
                        }
                        else
                        {
                            paraUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlIqWork.UpdateDate);  // 更新年月日
                        }
                        paraUpdateTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.UpdateTime);  // 更新時間
                        paraInqRowNumber.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.InqRowNumber);  // 問合せ行番号
                        paraInqRowNumDerivedNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.InqRowNumDerivedNo);  // 問合せ行番号枝番
                        paraInqOrgDtlDiscGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtlIqWork.InqOrgDtlDiscGuid);  // 問合せ元明細識別GUID
                        paraInqOthDtlDiscGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtlIqWork.InqOthDtlDiscGuid);  // 問合せ先明細識別GUID
                        paraGoodsDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.GoodsDivCd);  // 商品種別
                        paraRecyclePrtKindCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.RecyclePrtKindCode);  // リサイクル部品種別
                        paraRecyclePrtKindName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.RecyclePrtKindName);  // リサイクル部品種別名称
                        paraDeliveredGoodsDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.DeliveredGoodsDiv);  // 納品区分
                        paraHandleDivCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.HandleDivCode);  // 取扱区分
                        paraGoodsShape.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.GoodsShape);  // 商品形態
                        paraDelivrdGdsConfCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.DelivrdGdsConfCd);  // 納品確認区分
                        paraDeliGdsCmpltDueDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlIqWork.DeliGdsCmpltDueDate);  // 納品完了予定日
                        paraAnswerDeliveryDate.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.AnswerDeliveryDate);  // 回答納期
                        paraBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.BLGoodsCode);  // BL商品コード
                        paraBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.BLGoodsDrCode);  // BL商品コード枝番
                        paraInqGoodsName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqGoodsName);  // 問発商品名
                        paraAnsGoodsName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.AnsGoodsName);  // 回答商品名
                        paraSalesOrderCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlIqWork.SalesOrderCount);  // 発注数
                        paraDeliveredGoodsCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlIqWork.DeliveredGoodsCount);  // 納品数
                        paraGoodsNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.GoodsNo);  // 商品番号
                        paraGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.GoodsMakerCd);  // 商品メーカーコード
                        paraGoodsMakerNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.GoodsMakerNm);  // 商品メーカー名称
                        paraPureGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.PureGoodsMakerCd);  // 純正商品メーカーコード
                        paraInqPureGoodsNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqPureGoodsNo);  // 問発純正商品番号
                        paraAnsPureGoodsNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.AnsPureGoodsNo);  // 回答純正商品番号
                        paraListPrice.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.ListPrice);  // 定価
                        paraUnitPrice.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.UnitPrice);  // 単価
                        paraGoodsAddInfo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.GoodsAddInfo);  // 商品補足情報
                        paraRoughRrofit.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.RoughRrofit);  // 粗利額
                        paraRoughRate.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlIqWork.RoughRate);  // 粗利率
                        paraAnswerLimitDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlIqWork.AnswerLimitDate);  // 回答期限
                        paraCommentDtl.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.CommentDtl);  // 備考(明細)
                        paraAppendingFileDtl.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDtlIqWork.AppendingFileDtl);  // 添付ファイル(明細)
                        paraAppendingFileNmDtl.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.AppendingFileNmDtl);  // 添付ファイル名(明細)
                        paraShelfNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.ShelfNo);  // 棚番
                        paraAdditionalDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.AdditionalDivCd);  // 追加区分
                        paraCorrectDivCD.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.CorrectDivCD);  // 訂正区分
                        paraInqOrdDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.InqOrdDivCd);  // 問合せ・発注種別
                        paraDisplayOrder.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.DisplayOrder);  // 表示順位
                        // 2010/05/26 Add >>>
                        paraCancelCndtinDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlIqWork.CancelCndtinDiv);  // キャンセル状態区分
                        paraAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.AcptAnOdrStatus);  // 受注ステータス
                        paraSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.SalesSlipNum);  // 売上伝票番号
                        paraSalesRowNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.SalesRowNo);  // 売上行番号
                        // 2010/05/26 Add <<<
                        // 2011/02/09 Add >>>
                        paraDtlTakeinDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.DtlTakeinDivCd);  // 明細取込区分
                        // 2011/02/09 Add <<<
                        //--- ADD 2011/05/20 --->>>
                        paraWarehouseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.WarehouseCode);  // 倉庫コード
                        paraWarehouseName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.WarehouseName);  // 倉庫名称
                        paraWarehouseShelfNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.WarehouseShelfNo);  // 倉庫棚番
                        //--- ADD 2011/05/20 ---<<<
                        // -- ADD 2011/08/10   ------ >>>>>>
                        paraPmPrsntCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlIqWork.PmPrsntCount);  // PM現在庫数
                        paraSetPartsMkrCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.SetPartsMkrCd);  // セット部品メーカーコード
                        paraSetPartsNumber.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.SetPartsNumber);  // セット部品番号
                        paraSetPartsMainSubNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.SetPartsMainSubNo);  // セット部品親子番号
                        // -- ADD 2011/08/10   ------ <<<<<<

                        // -- ADD 2011/10/10   ------ >>>>>>
                        paraCampaignCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.CampaignCode);  // キャンペーンコード
                        // -- ADD 2011/10/10   ------ <<<<<<
                        // -- ADD 2012/01/10   ------ >>>>>>
                        paraGoodsSpecialNote.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.GoodsSpecialNote);  //商品規格・特記事項
                        // -- ADD 2012/01/10   ------ <<<<<<
                        // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                        paraAutoEstimatePartsCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.AutoEstimatePartsCd);  // 自動見積部品コード
                        // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraSalesTotalTaxInc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.SalesTotalTaxInc);  // 売上伝票合計（税込）
                        paraSalesTotalTaxExc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.SalesTotalTaxExc);  // 売上伝票合計（税抜）
                        paraScmConsTaxLayMethod.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.ScmConsTaxLayMethod);  // SCM消費税転嫁方式
                        paraConsTaxRate.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlIqWork.ConsTaxRate);  // 消費税税率
                        paraScmFractionProcCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.ScmFractionProcCd);  // SCM端数処理区分
                        paraAccRecConsTax.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.AccRecConsTax);  // 売掛消費税
                        paraPMSalesDate.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.PMSalesDate);  // PM売上日
                        paraSuppSlpPrtTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.SuppSlpPrtTime);  // 仕入先伝票発行時刻
                        paraSalesMoneyTaxInc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.SalesMoneyTaxInc);  // 売上金額（税込み）
                        paraSalesMoneyTaxExc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.SalesMoneyTaxExc);  // 売上金額（税抜き）
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraDataInputSystem.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.DataInputSystem);  // データ入力システム
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                        paraPmMainMngWarehouseCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.PmMainMngWarehouseCd);
                        paraPmMainMngWarehouseName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.PmMainMngWarehouseName);
                        paraPmMainMngShelfNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.PmMainMngShelfNo);
                        paraPmMainMngPrsntCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlIqWork.PmMainMngPrsntCount);
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                        paraPrmSetDtlNo2.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.PrmSetDtlNo2); // 優良設定詳細コード２
                        paraPrmSetDtlName2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.PrmSetDtlName2); // 優良設定詳細名称２
                        paraStockStatusDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlIqWork.StockStatusDiv); // 在庫状況区分
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                        // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                        paraRentDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlIqWork.RentDiv); // 貸出区分            
                        paraMkrSuggestRtPric.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlIqWork.MkrSuggestRtPric); // メーカー希望小売価格
                        paraOpenPriceDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.OpenPriceDiv); // オープン価格区分    
                        // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                        // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                        paraBgnGoodsDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlIqWork.BgnGoodsDiv); // お買得商品選択区分
                        // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                        paraModelPrtsAdptYm.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.ModelPrtsAdptYm); // 型式別部品採用年月    
                        paraModelPrtsAblsYm.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.ModelPrtsAblsYm); // 型式別部品廃止年月    
                        paraModelPrtsAdptFrameNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.ModelPrtsAdptFrameNo); // 型式別部品採用車台番号    
                        paraModelPrtsAblsFrameNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.ModelPrtsAblsFrameNo); // 型式別部品廃止車台番号    
                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraAnsDeliDateDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlIqWork.AnsDeliDateDiv); // 回答納期区分
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraGoodsSpecialNtForFac.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.GoodsSpecialNtForFac); // 商品規格・特記事項(工場向け)
                        paraGoodsSpecialNtForCOw.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.GoodsSpecialNtForCOw); // 商品規格・特記事項(カーオーナー向け)
                        paraPrmSetDtlName2ForFac.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.PrmSetDtlName2ForFac); // 優良設定詳細名称２(工場向け)
                        paraPrmSetDtlName2ForCOw.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.PrmSetDtlName2ForCOw); // 優良設定詳細名称２(カーオーナー向け)
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraInqBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.InqBlUtyPtThCd);  // 問発BL統一部品コード(スリーコード版)
                        paraInqBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.InqBlUtyPtSbCd);  // 問発BL統一部品サブコード
                        paraAnsBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlIqWork.AnsBlUtyPtThCd);  // 回答BL統一部品コード(スリーコード版)
                        paraAnsBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.AnsBlUtyPtSbCd);  // 回答BL統一部品サブコード
                        paraAnsBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.AnsBLGoodsCode);  // 回答BL商品コード
                        paraAnsBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlIqWork.AnsBLGoodsDrCode);  // 回答BL商品コード枝番
                        // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        sqlCommand.ExecuteNonQuery();
                        al.Add(sCMAcOdrDtlIqWork);
                    }
                }

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            scmAcOdrDtlIqWorkList = al;

            return status;
        }
        
        /// <summary>
        /// SCM受注明細データ(回答)情報を追加・更新します。
        /// </summary>
        /// <param name="scmAcOdrDtlAsWorkList">追加するSCM受注明細データ(回答)情報を格納する ArrayList</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <param name="dbCommandTimeout">コマンドタイムアウト</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : scmAcOdrDtlAsWorkList に格納されているSCM受注明細データ(回答)情報を追加します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        /// <br>Update Note: 2020/08/28 田建委</br>
        /// <br>管理番号   : 11600006-00</br>
        /// <br>             PMKOBETSU-4076 タイムアウト設定</br> 
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
        //private int InsertSCMAcOdrDtlAsWorkProc(ref ArrayList scmAcOdrDtlAsWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        private int InsertSCMAcOdrDtlAsWorkProc(ref ArrayList scmAcOdrDtlAsWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction, int dbCommandTimeout)
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlCommand sqlCommand = null;

            ArrayList al = new ArrayList();
            try
            {
                if (scmAcOdrDtlAsWorkList != null)
                {
                    string sqlText = string.Empty;
                    sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);

                    # region [INSERT文]
                    sqlText += "  INSERT INTO SCMACODRDTLASRF (" + Environment.NewLine;
                    sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                    sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                    sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                    sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                    sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                    sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                    sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                    sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                    sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                    sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                    sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                    sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                    sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                    sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                    sqlText += " ,INQROWNUMBERRF" + Environment.NewLine;
                    sqlText += " ,INQROWNUMDERIVEDNORF" + Environment.NewLine;
                    sqlText += " ,INQORGDTLDISCGUIDRF" + Environment.NewLine;
                    sqlText += " ,INQOTHDTLDISCGUIDRF" + Environment.NewLine;
                    sqlText += " ,GOODSDIVCDRF" + Environment.NewLine;
                    sqlText += " ,RECYCLEPRTKINDCODERF" + Environment.NewLine;
                    sqlText += " ,RECYCLEPRTKINDNAMERF" + Environment.NewLine;
                    sqlText += " ,DELIVEREDGOODSDIVRF" + Environment.NewLine;
                    sqlText += " ,HANDLEDIVCODERF" + Environment.NewLine;
                    sqlText += " ,GOODSSHAPERF" + Environment.NewLine;
                    sqlText += " ,DELIVRDGDSCONFCDRF" + Environment.NewLine;
                    sqlText += " ,DELIGDSCMPLTDUEDATERF" + Environment.NewLine;
                    sqlText += " ,ANSWERDELIVERYDATERF" + Environment.NewLine;
                    sqlText += " ,BLGOODSCODERF" + Environment.NewLine;
                    sqlText += " ,BLGOODSDRCODERF" + Environment.NewLine;
                    sqlText += " ,INQGOODSNAMERF" + Environment.NewLine;
                    sqlText += " ,ANSGOODSNAMERF" + Environment.NewLine;
                    sqlText += " ,SALESORDERCOUNTRF" + Environment.NewLine;
                    sqlText += " ,DELIVEREDGOODSCOUNTRF" + Environment.NewLine;
                    sqlText += " ,GOODSNORF" + Environment.NewLine;
                    sqlText += " ,GOODSMAKERCDRF" + Environment.NewLine;
                    sqlText += " ,GOODSMAKERNMRF" + Environment.NewLine;
                    sqlText += " ,PUREGOODSMAKERCDRF" + Environment.NewLine;
                    sqlText += " ,INQPUREGOODSNORF" + Environment.NewLine;
                    sqlText += " ,ANSPUREGOODSNORF" + Environment.NewLine;
                    sqlText += " ,LISTPRICERF" + Environment.NewLine;
                    sqlText += " ,UNITPRICERF" + Environment.NewLine;
                    sqlText += " ,GOODSADDINFORF" + Environment.NewLine;
                    sqlText += " ,ROUGHRROFITRF" + Environment.NewLine;
                    sqlText += " ,ROUGHRATERF" + Environment.NewLine;
                    sqlText += " ,ANSWERLIMITDATERF" + Environment.NewLine;
                    sqlText += " ,COMMENTDTLRF" + Environment.NewLine;
                    sqlText += " ,APPENDINGFILEDTLRF" + Environment.NewLine;
                    sqlText += " ,APPENDINGFILENMDTLRF" + Environment.NewLine;
                    sqlText += " ,SHELFNORF" + Environment.NewLine;
                    sqlText += " ,ADDITIONALDIVCDRF" + Environment.NewLine;
                    sqlText += " ,CORRECTDIVCDRF" + Environment.NewLine;
                    sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                    sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                    sqlText += " ,SALESROWNORF" + Environment.NewLine;
                    sqlText += " ,CAMPAIGNCODERF" + Environment.NewLine;
                    sqlText += " ,STOCKDIVRF" + Environment.NewLine;
                    sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                    sqlText += " ,DISPLAYORDERRF" + Environment.NewLine;
                    // 2010/05/26 >>>
                    //sqlText += " ,GOODSMNGNORF)" + Environment.NewLine;
                    sqlText += " ,GOODSMNGNORF" + Environment.NewLine;
                    sqlText += " ,CANCELCNDTINDIVRF" + Environment.NewLine;
                    // 2011/02/09 Add >>>
                    sqlText += " ,DTLTAKEINDIVCDRF" + Environment.NewLine;
                    // 2011/02/09 Add <<<
                    //--- ADD 2011/05/20 --->>>
                    sqlText += " ,WAREHOUSECODERF" + Environment.NewLine;
                    sqlText += " ,WAREHOUSENAMERF" + Environment.NewLine;
                    sqlText += " ,WAREHOUSESHELFNORF" + Environment.NewLine;
                    //--- ADD 2011/05/20 ---<<<
                    // -- ADD 2011/08/10   ------ >>>>>>
                    sqlText += " ,PMPRSNTCOUNTRF" + Environment.NewLine;
                    sqlText += " ,SETPARTSMKRCDRF" + Environment.NewLine;
                    sqlText += " ,SETPARTSNUMBERRF" + Environment.NewLine;
                    sqlText += " ,SETPARTSMAINSUBNORF" + Environment.NewLine;
                    // -- ADD 2011/08/10   ------ <<<<<<
                    //--- ADD 2012/01/10 --->>>
                    sqlText += " ,GOODSSPECIALNOTERF" + Environment.NewLine;       // 商品規格・特記事項
                    //--- ADD 2012/01/10 ---<<<
                    //--- ADD 2012/04/12 --->>> 
                    sqlText += " ,PSMNGNORF" + Environment.NewLine;       // PS管理番号
                    //--- ADD 2012/04/12 ---<<<
                    // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                    sqlText += " ,AUTOESTIMATEPARTSCDRF" + Environment.NewLine;  //自動見積部品コード
                    // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                    // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;  //　売上伝票合計（税込）
                    sqlText += " ,SALESTOTALTAXEXCRF" + Environment.NewLine;  // 売上伝票合計（税抜）
                    sqlText += " ,SCMCONSTAXLAYMETHODRF" + Environment.NewLine;  // SCM消費税転嫁方式
                    sqlText += " ,CONSTAXRATERF" + Environment.NewLine;  // 消費税税率
                    sqlText += " ,SCMFRACTIONPROCCDRF" + Environment.NewLine;  // SCM端数処理区分
                    sqlText += " ,ACCRECCONSTAXRF" + Environment.NewLine;  // 売掛消費税
                    sqlText += " ,PMSALESDATERF" + Environment.NewLine;  // PM売上日
                    sqlText += " ,SUPPSLPPRTTIMERF" + Environment.NewLine;  // 仕入先伝票発行時刻
                    sqlText += " ,SALESMONEYTAXINCRF" + Environment.NewLine;  // 売上金額（税込み）
                    sqlText += " ,SALESMONEYTAXEXCRF" + Environment.NewLine;  // 売上金額（税抜き）
                    // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,DATAINPUTSYSTEMRF" + Environment.NewLine;  // データ入力システム
                    // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                    sqlText += " ,PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;
                    sqlText += " ,PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;
                    sqlText += " ,PMMAINMNGSHELFNORF" + Environment.NewLine;
                    sqlText += " ,PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;
                    // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                    // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                    sqlText += " ,PRMSETDTLNO2RF  " + Environment.NewLine;
                    sqlText += " ,PRMSETDTLNAME2RF" + Environment.NewLine;
                    sqlText += " ,STOCKSTATUSDIVRF" + Environment.NewLine;
                    // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                    // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                    sqlText += " ,RENTDIVRF" + Environment.NewLine;
                    sqlText += " ,MKRSUGGESTRTPRICRF" + Environment.NewLine;
                    sqlText += " ,OPENPRICEDIVRF" + Environment.NewLine;
                    // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                    // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                    sqlText += " ,BGNGOODSDIVRF" + Environment.NewLine;
                    // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                    // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                    sqlText += " ,MODELPRTSADPTYMRF" + Environment.NewLine;
                    sqlText += " ,MODELPRTSABLSYMRF" + Environment.NewLine;
                    sqlText += " ,MODELPRTSADPTFRAMENORF" + Environment.NewLine;
                    sqlText += " ,MODELPRTSABLSFRAMENORF" + Environment.NewLine;
                    // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                    // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,ANSDELIDATEDIVRF" + Environment.NewLine;     // 回答納期区分
                    // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,GOODSSPECIALNTFORFACRF" + Environment.NewLine;     // 商品規格・特記事項(工場向け)
                    sqlText += " ,GOODSSPECIALNTFORCOWRF" + Environment.NewLine;     // 商品規格・特記事項(カーオーナー向け)
                    sqlText += " ,PRMSETDTLNAME2FORFACRF" + Environment.NewLine;     // 優良設定詳細名称２(工場向け)
                    sqlText += " ,PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;     // 優良設定詳細名称２(カーオーナー向け)
                    // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                    // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,INQBLUTYPTTHCDRF" + Environment.NewLine;
                    sqlText += " ,INQBLUTYPTSBCDRF" + Environment.NewLine;
                    sqlText += " ,ANSBLUTYPTTHCDRF" + Environment.NewLine;
                    sqlText += " ,ANSBLUTYPTSBCDRF" + Environment.NewLine;
                    sqlText += " ,ANSBLGOODSCODERF" + Environment.NewLine;
                    sqlText += " ,ANSBLGOODSDRCODERF" + Environment.NewLine;
                    // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                    sqlText += " )" + Environment.NewLine;
                    // 2010/05/26 <<<
                    sqlText += "  VALUES" + Environment.NewLine;
                    sqlText += "  (@CREATEDATETIME" + Environment.NewLine;
                    sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                    sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                    sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                    sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                    sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                    sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                    sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                    sqlText += " ,@INQORIGINALEPCD" + Environment.NewLine;
                    sqlText += " ,@INQORIGINALSECCD" + Environment.NewLine;
                    sqlText += " ,@INQOTHEREPCD" + Environment.NewLine;
                    sqlText += " ,@INQOTHERSECCD" + Environment.NewLine;
                    sqlText += " ,@INQUIRYNUMBER" + Environment.NewLine;
                    sqlText += " ,@UPDATEDATE" + Environment.NewLine;
                    sqlText += " ,@UPDATETIME" + Environment.NewLine;
                    sqlText += " ,@INQROWNUMBER" + Environment.NewLine;
                    sqlText += " ,@INQROWNUMDERIVEDNO" + Environment.NewLine;
                    sqlText += " ,@INQORGDTLDISCGUID" + Environment.NewLine;
                    sqlText += " ,@INQOTHDTLDISCGUID" + Environment.NewLine;
                    sqlText += " ,@GOODSDIVCD" + Environment.NewLine;
                    sqlText += " ,@RECYCLEPRTKINDCODE" + Environment.NewLine;
                    sqlText += " ,@RECYCLEPRTKINDNAME" + Environment.NewLine;
                    sqlText += " ,@DELIVEREDGOODSDIV" + Environment.NewLine;
                    sqlText += " ,@HANDLEDIVCODE" + Environment.NewLine;
                    sqlText += " ,@GOODSSHAPE" + Environment.NewLine;
                    sqlText += " ,@DELIVRDGDSCONFCD" + Environment.NewLine;
                    sqlText += " ,@DELIGDSCMPLTDUEDATE" + Environment.NewLine;
                    sqlText += " ,@ANSWERDELIVERYDATE" + Environment.NewLine;
                    sqlText += " ,@BLGOODSCODE" + Environment.NewLine;
                    sqlText += " ,@BLGOODSDRCODE" + Environment.NewLine;
                    sqlText += " ,@INQGOODSNAME" + Environment.NewLine;
                    sqlText += " ,@ANSGOODSNAME" + Environment.NewLine;
                    sqlText += " ,@SALESORDERCOUNT" + Environment.NewLine;
                    sqlText += " ,@DELIVEREDGOODSCOUNT" + Environment.NewLine;
                    sqlText += " ,@GOODSNO" + Environment.NewLine;
                    sqlText += " ,@GOODSMAKERCD" + Environment.NewLine;
                    sqlText += " ,@GOODSMAKERNM" + Environment.NewLine;
                    sqlText += " ,@PUREGOODSMAKERCD" + Environment.NewLine;
                    sqlText += " ,@INQPUREGOODSNO" + Environment.NewLine;
                    sqlText += " ,@ANSPUREGOODSNO" + Environment.NewLine;
                    sqlText += " ,@LISTPRICE" + Environment.NewLine;
                    sqlText += " ,@UNITPRICE" + Environment.NewLine;
                    sqlText += " ,@GOODSADDINFO" + Environment.NewLine;
                    sqlText += " ,@ROUGHRROFIT" + Environment.NewLine;
                    sqlText += " ,@ROUGHRATE" + Environment.NewLine;
                    sqlText += " ,@ANSWERLIMITDATE" + Environment.NewLine;
                    sqlText += " ,@COMMENTDTL" + Environment.NewLine;
                    sqlText += " ,@APPENDINGFILEDTL" + Environment.NewLine;
                    sqlText += " ,@APPENDINGFILENMDTL" + Environment.NewLine;
                    sqlText += " ,@SHELFNO" + Environment.NewLine;
                    sqlText += " ,@ADDITIONALDIVCD" + Environment.NewLine;
                    sqlText += " ,@CORRECTDIVCD" + Environment.NewLine;
                    sqlText += " ,@ACPTANODRSTATUS" + Environment.NewLine;
                    sqlText += " ,@SALESSLIPNUM" + Environment.NewLine;
                    sqlText += " ,@SALESROWNO" + Environment.NewLine;
                    sqlText += " ,@CAMPAIGNCODE" + Environment.NewLine;
                    sqlText += " ,@STOCKDIV" + Environment.NewLine;
                    sqlText += " ,@INQORDDIVCD" + Environment.NewLine;
                    sqlText += " ,@DISPLAYORDER" + Environment.NewLine;
                    // 2010/05/26 >>>
                    //sqlText += " ,@GOODSMNGNO)" + Environment.NewLine;
                    sqlText += " ,@GOODSMNGNO" + Environment.NewLine;
                    sqlText += " ,@CANCELCNDTINDIV" + Environment.NewLine;
                    // 2011/02/09 Add >>>
                    sqlText += " ,@DTLTAKEINDIVCD" + Environment.NewLine;
                    // 2011/02/09 Add <<<
                    //--- ADD 2011/05/20 --->>>
                    sqlText += " ,@WAREHOUSECODE" + Environment.NewLine;
                    sqlText += " ,@WAREHOUSENAME" + Environment.NewLine;
                    sqlText += " ,@WAREHOUSESHELFNO" + Environment.NewLine;
                    //--- ADD 2011/05/20 ---<<<
                    // -- ADD 2011/08/10   ------ >>>>>>
                    sqlText += " ,@PMPRSNTCOUNT" + Environment.NewLine;
                    sqlText += " ,@SETPARTSMKRCD" + Environment.NewLine;
                    sqlText += " ,@SETPARTSNUMBER" + Environment.NewLine;
                    sqlText += " ,@SETPARTSMAINSUBNO" + Environment.NewLine;
                    // -- ADD 2011/08/10   ------ <<<<<<
                    //--- ADD 2012/01/10 --->>>
                    sqlText += " ,@GOODSSPECIALNOTE" + Environment.NewLine;       // 商品規格・特記事項
                    //--- ADD 2012/01/10 ---<<<
                    //--- ADD 2012/04/12 --->>> 
                    sqlText += " ,@PSMNGNO" + Environment.NewLine;       // PS管理番号
                    //--- ADD 2012/04/12 ---<<<
                    // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                    sqlText += " ,@AUTOESTIMATEPARTSCD" + Environment.NewLine;  //自動見積部品コード
                    // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                    // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,@SALESTOTALTAXINC" + Environment.NewLine;  //　売上伝票合計（税込）
                    sqlText += " ,@SALESTOTALTAXEXC" + Environment.NewLine;  // 売上伝票合計（税抜）
                    sqlText += " ,@SCMCONSTAXLAYMETHOD" + Environment.NewLine;  // SCM消費税転嫁方式
                    sqlText += " ,@CONSTAXRATE" + Environment.NewLine;  // 消費税税率
                    sqlText += " ,@SCMFRACTIONPROCCD" + Environment.NewLine;  // SCM端数処理区分
                    sqlText += " ,@ACCRECCONSTAX" + Environment.NewLine;  // 売掛消費税
                    sqlText += " ,@PMSALESDATE" + Environment.NewLine;  // PM売上日
                    sqlText += " ,@SUPPSLPPRTTIME" + Environment.NewLine;  // 仕入先伝票発行時刻
                    sqlText += " ,@SALESMONEYTAXINC" + Environment.NewLine;  // 売上金額（税込み）
                    sqlText += " ,@SALESMONEYTAXEXC" + Environment.NewLine;  // 売上金額（税抜き）
                    // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,@DATAINPUTSYSTEM" + Environment.NewLine;  // データ入力システム
                    // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                    sqlText += " ,@PMMAINMNGWAREHOUSECD" + Environment.NewLine;
                    sqlText += " ,@PMMAINMNGWAREHOUSENAME" + Environment.NewLine;
                    sqlText += " ,@PMMAINMNGSHELFNO" + Environment.NewLine;
                    sqlText += " ,@PMMAINMNGPRSNTCOUNT" + Environment.NewLine;
                    // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                    // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                    sqlText += " ,@PRMSETDTLNO2  " + Environment.NewLine;
                    sqlText += " ,@PRMSETDTLNAME2" + Environment.NewLine;
                    sqlText += " ,@STOCKSTATUSDIV" + Environment.NewLine;
                    // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                    // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                    sqlText += " ,@RENTDIV" + Environment.NewLine;
                    sqlText += " ,@MKRSUGGESTRTPRIC" + Environment.NewLine;
                    sqlText += " ,@OPENPRICEDIV" + Environment.NewLine;
                    // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                    // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                    sqlText += " ,@BGNGOODSDIV" + Environment.NewLine;
                    // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                    // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                    sqlText += " ,@MODELPRTSADPTYM" + Environment.NewLine;
                    sqlText += " ,@MODELPRTSABLSYM" + Environment.NewLine;
                    sqlText += " ,@MODELPRTSADPTFRAMENO" + Environment.NewLine;
                    sqlText += " ,@MODELPRTSABLSFRAMENO" + Environment.NewLine;
                    // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                    // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,@ANSDELIDATEDIV" + Environment.NewLine;
                    // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,@GOODSSPECIALNTFORFAC" + Environment.NewLine;
                    sqlText += " ,@GOODSSPECIALNTFORCOW" + Environment.NewLine;
                    sqlText += " ,@PRMSETDTLNAME2FORFAC" + Environment.NewLine;
                    sqlText += " ,@PRMSETDTLNAME2FORCOW" + Environment.NewLine;
                    // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,@INQBLUTYPTTHCD" + Environment.NewLine;
                    sqlText += " ,@INQBLUTYPTSBCD" + Environment.NewLine;
                    sqlText += " ,@ANSBLUTYPTTHCD" + Environment.NewLine;
                    sqlText += " ,@ANSBLUTYPTSBCD" + Environment.NewLine;
                    sqlText += " ,@ANSBLGOODSCODE" + Environment.NewLine;
                    sqlText += " ,@ANSBLGOODSDRCODE" + Environment.NewLine;
                    // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                    sqlText += " )" + Environment.NewLine;
                    // 2010/05/26 <<<
                    sqlCommand.CommandText = sqlText;
                    # endregion

                    for (int i = 0; i < scmAcOdrDtlAsWorkList.Count; i++)
                    {
                        SCMAcOdrDtlAsWork sCMAcOdrDtlAsWork = scmAcOdrDtlAsWorkList[i] as SCMAcOdrDtlAsWork;
                        sqlCommand.Parameters.Clear();

                        // 登録ヘッダ情報を設定
                        object obj = (object)this;
                        IFileHeader flhd = (IFileHeader)sCMAcOdrDtlAsWork;
                        FileHeader fileHeader = new FileHeader(obj);
                        fileHeader.SetInsertHeader(ref flhd, obj);

                        //Prameterオブジェクトの作成
                        SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);  // 作成日時
                        SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);  // 更新日時
                        SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                        SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);  // GUID
                        SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);  // 更新従業員コード
                        SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);  // 更新アセンブリID1
                        SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);  // 更新アセンブリID2
                        SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);  // 論理削除区分
                        SqlParameter paraInqOriginalEpCd = sqlCommand.Parameters.Add("@INQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                        SqlParameter paraInqOriginalSecCd = sqlCommand.Parameters.Add("@INQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                        SqlParameter paraInqOtherEpCd = sqlCommand.Parameters.Add("@INQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                        SqlParameter paraInqOtherSecCd = sqlCommand.Parameters.Add("@INQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                        SqlParameter paraInquiryNumber = sqlCommand.Parameters.Add("@INQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                        SqlParameter paraUpdateDate = sqlCommand.Parameters.Add("@UPDATEDATE", SqlDbType.Int);  // 更新年月日
                        SqlParameter paraUpdateTime = sqlCommand.Parameters.Add("@UPDATETIME", SqlDbType.Int);  // 更新時間
                        SqlParameter paraInqRowNumber = sqlCommand.Parameters.Add("@INQROWNUMBER", SqlDbType.Int);  // 問合せ行番号
                        SqlParameter paraInqRowNumDerivedNo = sqlCommand.Parameters.Add("@INQROWNUMDERIVEDNO", SqlDbType.Int);  // 問合せ行番号枝番
                        SqlParameter paraInqOrgDtlDiscGuid = sqlCommand.Parameters.Add("@INQORGDTLDISCGUID", SqlDbType.UniqueIdentifier);  // 問合せ元明細識別GUID
                        SqlParameter paraInqOthDtlDiscGuid = sqlCommand.Parameters.Add("@INQOTHDTLDISCGUID", SqlDbType.UniqueIdentifier);  // 問合せ先明細識別GUID
                        SqlParameter paraGoodsDivCd = sqlCommand.Parameters.Add("@GOODSDIVCD", SqlDbType.Int);  // 商品種別
                        SqlParameter paraRecyclePrtKindCode = sqlCommand.Parameters.Add("@RECYCLEPRTKINDCODE", SqlDbType.Int);  // リサイクル部品種別
                        SqlParameter paraRecyclePrtKindName = sqlCommand.Parameters.Add("@RECYCLEPRTKINDNAME", SqlDbType.NVarChar);  // リサイクル部品種別名称
                        SqlParameter paraDeliveredGoodsDiv = sqlCommand.Parameters.Add("@DELIVEREDGOODSDIV", SqlDbType.Int);  // 納品区分
                        SqlParameter paraHandleDivCode = sqlCommand.Parameters.Add("@HANDLEDIVCODE", SqlDbType.Int);  // 取扱区分
                        SqlParameter paraGoodsShape = sqlCommand.Parameters.Add("@GOODSSHAPE", SqlDbType.Int);  // 商品形態
                        SqlParameter paraDelivrdGdsConfCd = sqlCommand.Parameters.Add("@DELIVRDGDSCONFCD", SqlDbType.Int);  // 納品確認区分
                        SqlParameter paraDeliGdsCmpltDueDate = sqlCommand.Parameters.Add("@DELIGDSCMPLTDUEDATE", SqlDbType.Int);  // 納品完了予定日
                        SqlParameter paraAnswerDeliveryDate = sqlCommand.Parameters.Add("@ANSWERDELIVERYDATE", SqlDbType.NVarChar);  // 回答納期
                        SqlParameter paraBLGoodsCode = sqlCommand.Parameters.Add("@BLGOODSCODE", SqlDbType.Int);  // BL商品コード
                        SqlParameter paraBLGoodsDrCode = sqlCommand.Parameters.Add("@BLGOODSDRCODE", SqlDbType.Int);  // BL商品コード枝番
                        SqlParameter paraInqGoodsName = sqlCommand.Parameters.Add("@INQGOODSNAME", SqlDbType.NVarChar);  // 問発商品名
                        SqlParameter paraAnsGoodsName = sqlCommand.Parameters.Add("@ANSGOODSNAME", SqlDbType.NVarChar);  // 回答商品名
                        SqlParameter paraSalesOrderCount = sqlCommand.Parameters.Add("@SALESORDERCOUNT", SqlDbType.Float);  // 発注数
                        SqlParameter paraDeliveredGoodsCount = sqlCommand.Parameters.Add("@DELIVEREDGOODSCOUNT", SqlDbType.Float);  // 納品数
                        SqlParameter paraGoodsNo = sqlCommand.Parameters.Add("@GOODSNO", SqlDbType.NVarChar);  // 商品番号
                        SqlParameter paraGoodsMakerCd = sqlCommand.Parameters.Add("@GOODSMAKERCD", SqlDbType.Int);  // 商品メーカーコード
                        SqlParameter paraGoodsMakerNm = sqlCommand.Parameters.Add("@GOODSMAKERNM", SqlDbType.NVarChar);  // 商品メーカー名称
                        SqlParameter paraPureGoodsMakerCd = sqlCommand.Parameters.Add("@PUREGOODSMAKERCD", SqlDbType.Int);  // 純正商品メーカーコード
                        SqlParameter paraInqPureGoodsNo = sqlCommand.Parameters.Add("@INQPUREGOODSNO", SqlDbType.NVarChar);  // 問発純正商品番号
                        SqlParameter paraAnsPureGoodsNo = sqlCommand.Parameters.Add("@ANSPUREGOODSNO", SqlDbType.NVarChar);  // 回答純正商品番号
                        SqlParameter paraListPrice = sqlCommand.Parameters.Add("@LISTPRICE", SqlDbType.BigInt);  // 定価
                        SqlParameter paraUnitPrice = sqlCommand.Parameters.Add("@UNITPRICE", SqlDbType.BigInt);  // 単価
                        SqlParameter paraGoodsAddInfo = sqlCommand.Parameters.Add("@GOODSADDINFO", SqlDbType.NVarChar);  // 商品補足情報
                        SqlParameter paraRoughRrofit = sqlCommand.Parameters.Add("@ROUGHRROFIT", SqlDbType.BigInt);  // 粗利額
                        SqlParameter paraRoughRate = sqlCommand.Parameters.Add("@ROUGHRATE", SqlDbType.Float);  // 粗利率
                        SqlParameter paraAnswerLimitDate = sqlCommand.Parameters.Add("@ANSWERLIMITDATE", SqlDbType.Int);  // 回答期限
                        SqlParameter paraCommentDtl = sqlCommand.Parameters.Add("@COMMENTDTL", SqlDbType.NVarChar);  // 備考(明細)
                        SqlParameter paraAppendingFileDtl = sqlCommand.Parameters.Add("@APPENDINGFILEDTL", SqlDbType.VarBinary);  // 添付ファイル(明細)
                        SqlParameter paraAppendingFileNmDtl = sqlCommand.Parameters.Add("@APPENDINGFILENMDTL", SqlDbType.NVarChar);  // 添付ファイル名(明細)
                        SqlParameter paraShelfNo = sqlCommand.Parameters.Add("@SHELFNO", SqlDbType.NVarChar);  // 棚番
                        SqlParameter paraAdditionalDivCd = sqlCommand.Parameters.Add("@ADDITIONALDIVCD", SqlDbType.Int);  // 追加区分
                        SqlParameter paraCorrectDivCD = sqlCommand.Parameters.Add("@CORRECTDIVCD", SqlDbType.Int);  // 訂正区分
                        SqlParameter paraAcptAnOdrStatus = sqlCommand.Parameters.Add("@ACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                        SqlParameter paraSalesSlipNum = sqlCommand.Parameters.Add("@SALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号
                        SqlParameter paraSalesRowNo = sqlCommand.Parameters.Add("@SALESROWNO", SqlDbType.Int);  // 売上行番号
                        SqlParameter paraCampaignCode = sqlCommand.Parameters.Add("@CAMPAIGNCODE", SqlDbType.Int);  // キャンペーンコード
                        SqlParameter paraStockDiv = sqlCommand.Parameters.Add("@STOCKDIV", SqlDbType.Int);  // 在庫区分
                        SqlParameter paraInqOrdDivCd = sqlCommand.Parameters.Add("@INQORDDIVCD", SqlDbType.Int);  // 問合せ・発注種別
                        SqlParameter paraDisplayOrder = sqlCommand.Parameters.Add("@DISPLAYORDER", SqlDbType.Int);  // 表示順位
                        SqlParameter paraGoodsMngNo = sqlCommand.Parameters.Add("@GOODSMNGNO", SqlDbType.Int);  // 商品管理番号
                        // 2010/05/26 Add >>>
                        SqlParameter paraCancelCndtinDiv = sqlCommand.Parameters.Add("@CANCELCNDTINDIV", SqlDbType.SmallInt);  // キャンセル状態区分
                        // 2010/05/26 Add <<<
                        // 2011/02/09 Add >>>
                        SqlParameter paraDtlTakeinDivCd = sqlCommand.Parameters.Add("@DTLTAKEINDIVCD", SqlDbType.Int);  // 明細取込区分
                        // 2011/02/09 Add <<<
                        //--- ADD 2011/05/20 --->>>
                        SqlParameter paraWarehouseCode = sqlCommand.Parameters.Add("@WAREHOUSECODE", SqlDbType.NChar);  // 倉庫コード
                        SqlParameter paraWarehouseName = sqlCommand.Parameters.Add("@WAREHOUSENAME", SqlDbType.NVarChar);  // 倉庫名称
                        SqlParameter paraWarehouseShelfNo = sqlCommand.Parameters.Add("@WAREHOUSESHELFNO", SqlDbType.NVarChar);  // 倉庫棚番
                        //--- ADD 2011/05/20 ---<<<
                        // -- ADD 2011/08/10   ------ >>>>>>
                        SqlParameter paraPmPrsntCount = sqlCommand.Parameters.Add("@PMPRSNTCOUNT", SqlDbType.NChar);  // PM現在庫数
                        SqlParameter paraSetPartsMkrCd = sqlCommand.Parameters.Add("@SETPARTSMKRCD", SqlDbType.NVarChar);  // セット部品メーカーコード
                        SqlParameter paraSetPartsNumber = sqlCommand.Parameters.Add("@SETPARTSNUMBER", SqlDbType.NChar);  // セット部品番号
                        SqlParameter paraSetPartsMainSubNo = sqlCommand.Parameters.Add("@SETPARTSMAINSUBNO", SqlDbType.NVarChar);  // セット部品親子番号
                        // -- ADD 2011/08/10   ------ <<<<<<
                        //--- ADD 2012/01/10 --->>>
                        SqlParameter paraGoodsSpecialNote = sqlCommand.Parameters.Add("@GOODSSPECIALNOTE", SqlDbType.NVarChar);  // 商品規格・特記事項
                        //--- ADD 2012/01/10 ---<<<
                        //--- ADD 2012/04/12 --->>> 
                        SqlParameter paraPsMngNo = sqlCommand.Parameters.Add("@PSMNGNO", SqlDbType.Int);  // PS管理番号
                        //--- ADD 2012/04/12 ---<<<
                        // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                        SqlParameter paraAutoEstimatePartsCd = sqlCommand.Parameters.Add("@AUTOESTIMATEPARTSCD", SqlDbType.NVarChar);  //自動見積部品コード
                        // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraSalesTotalTaxInc = sqlCommand.Parameters.Add("@SALESTOTALTAXINC", SqlDbType.BigInt);  // 売上伝票合計（税込）
                        SqlParameter paraSalesTotalTaxExc = sqlCommand.Parameters.Add("@SALESTOTALTAXEXC", SqlDbType.BigInt);  // 売上伝票合計（税抜）
                        SqlParameter paraScmConsTaxLayMethod = sqlCommand.Parameters.Add("@SCMCONSTAXLAYMETHOD", SqlDbType.Int);  // SCM消費税転嫁方式
                        SqlParameter paraConsTaxRate = sqlCommand.Parameters.Add("@CONSTAXRATE", SqlDbType.Float);  // 消費税税率
                        SqlParameter paraScmFractionProcCd = sqlCommand.Parameters.Add("@SCMFRACTIONPROCCD", SqlDbType.Int);  // SCM端数処理区分
                        SqlParameter paraAccRecConsTax = sqlCommand.Parameters.Add("@ACCRECCONSTAX", SqlDbType.BigInt);  // 売掛消費税
                        SqlParameter paraPMSalesDate = sqlCommand.Parameters.Add("@PMSALESDATE", SqlDbType.Int);  // PM売上日
                        SqlParameter paraSuppSlpPrtTime = sqlCommand.Parameters.Add("@SUPPSLPPRTTIME", SqlDbType.Int);  // 仕入先伝票発行時刻
                        SqlParameter paraSalesMoneyTaxInc = sqlCommand.Parameters.Add("@SALESMONEYTAXINC", SqlDbType.BigInt);  // 売上金額（税込み）
                        SqlParameter paraSalesMoneyTaxExc = sqlCommand.Parameters.Add("@SALESMONEYTAXEXC", SqlDbType.BigInt);  // 売上金額（税抜き）
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraDataInputSystem = sqlCommand.Parameters.Add("@DATAINPUTSYSTEM", SqlDbType.Int);  // データ入力システム
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                        SqlParameter paraPmMainMngWarehouseCd = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSECD", SqlDbType.NVarChar);
                        SqlParameter paraPmMainMngWarehouseName = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSENAME", SqlDbType.NVarChar);
                        SqlParameter paraPmMainMngShelfNo = sqlCommand.Parameters.Add("@PMMAINMNGSHELFNO", SqlDbType.NVarChar);
                        SqlParameter paraPmMainMngPrsntCount = sqlCommand.Parameters.Add("@PMMAINMNGPRSNTCOUNT", SqlDbType.Float);
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                        SqlParameter paraPrmSetDtlNo2 = sqlCommand.Parameters.Add("@PRMSETDTLNO2", SqlDbType.Int);  // 優良設定詳細コード２
                        SqlParameter paraPrmSetDtlName2 = sqlCommand.Parameters.Add("@PRMSETDTLNAME2", SqlDbType.NVarChar);  // 優良設定詳細名称２
                        SqlParameter paraStockStatusDiv = sqlCommand.Parameters.Add("@STOCKSTATUSDIV", SqlDbType.SmallInt);  // 在庫状況区分
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                        // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                        SqlParameter paraRentDiv = sqlCommand.Parameters.Add("@RENTDIV", SqlDbType.SmallInt);  // 貸出区分            
                        SqlParameter paraMkrSuggestRtPric = sqlCommand.Parameters.Add("@MKRSUGGESTRTPRIC", SqlDbType.BigInt);  // メーカー希望小売価格
                        SqlParameter paraOpenPriceDiv = sqlCommand.Parameters.Add("@OPENPRICEDIV", SqlDbType.Int);  // オープン価格区分    
                        // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                        // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                        SqlParameter paraBgnGoodsDiv = sqlCommand.Parameters.Add("@BGNGOODSDIV", SqlDbType.SmallInt);  // お買得商品選択区分
                        // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                        SqlParameter paraModelPrtsAdptYm = sqlCommand.Parameters.Add("@MODELPRTSADPTYM", SqlDbType.Int);  // 型式別部品採用年月    
                        SqlParameter paraModelPrtsAblsYm = sqlCommand.Parameters.Add("@MODELPRTSABLSYM", SqlDbType.Int);  // 型式別部品廃止年月    
                        SqlParameter paraModelPrtsAdptFrameNo = sqlCommand.Parameters.Add("@MODELPRTSADPTFRAMENO", SqlDbType.Int);  // 型式別部品採用車台番号    
                        SqlParameter paraModelPrtsAblsFrameNo = sqlCommand.Parameters.Add("@MODELPRTSABLSFRAMENO", SqlDbType.Int);  // 型式別部品廃止車台番号    
                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraAnsDeliDateDiv = sqlCommand.Parameters.Add("@ANSDELIDATEDIV", SqlDbType.SmallInt);  // 回答納期区分
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraGoodsSpecialNtForFac = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORFAC", SqlDbType.NVarChar);  // 商品規格・特記事項(工場向け)
                        SqlParameter paraGoodsSpecialNtForCOw = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORCOW", SqlDbType.NVarChar);  // 商品規格・特記事項(カーオーナー向け)
                        SqlParameter paraPrmSetDtlName2ForFac = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORFAC", SqlDbType.NVarChar);  // 優良設定詳細名称２(工場向け)
                        SqlParameter paraPrmSetDtlName2ForCOw = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORCOW", SqlDbType.NVarChar);  // 優良設定詳細名称２(カーオーナー向け)
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraInqBlUtyPtThCd = sqlCommand.Parameters.Add("@INQBLUTYPTTHCD", SqlDbType.NChar);  // 問発BL統一部品コード(スリーコード版)
                        SqlParameter paraInqBlUtyPtSbCd = sqlCommand.Parameters.Add("@INQBLUTYPTSBCD", SqlDbType.Int);  // 問発BL統一部品サブコード
                        SqlParameter paraAnsBlUtyPtThCd = sqlCommand.Parameters.Add("@ANSBLUTYPTTHCD", SqlDbType.NChar);  // 回答BL統一部品コード(スリーコード版)
                        SqlParameter paraAnsBlUtyPtSbCd = sqlCommand.Parameters.Add("@ANSBLUTYPTSBCD", SqlDbType.Int);  // 回答BL統一部品サブコード
                        SqlParameter paraAnsBLGoodsCode = sqlCommand.Parameters.Add("@ANSBLGOODSCODE", SqlDbType.Int);  // 回答BL商品コード
                        SqlParameter paraAnsBLGoodsDrCode = sqlCommand.Parameters.Add("@ANSBLGOODSDRCODE", SqlDbType.Int);  // 回答BL商品コード枝番
                        // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        //Parameterオブジェクトへ値設定
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtlAsWork.CreateDateTime);  // 作成日時
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtlAsWork.UpdateDateTime);  // 更新日時
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.EnterpriseCode);  // 企業コード
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtlAsWork.FileHeaderGuid);  // GUID
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.UpdEmployeeCode);  // 更新従業員コード
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.UpdAssemblyId1);  // 更新アセンブリID1
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.UpdAssemblyId2);  // 更新アセンブリID2
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.LogicalDeleteCode);  // 論理削除区分
                        paraInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOriginalEpCd);  // 問合せ元企業コード
                        paraInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        paraInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOtherEpCd);  // 問合せ先企業コード
                        paraInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOtherSecCd);  // 問合せ先拠点コード
                        paraInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.InquiryNumber);  // 問合せ番号
                        if (sCMAcOdrDtlAsWork.UpdateDate == DateTime.MinValue)
                        {
                            paraUpdateDate.Value = 0;  // 更新年月日
                        }
                        else
                        {
                            paraUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlAsWork.UpdateDate);  // 更新年月日
                        }
                        paraUpdateTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.UpdateTime);  // 更新時間
                        paraInqRowNumber.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqRowNumber);  // 問合せ行番号
                        paraInqRowNumDerivedNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqRowNumDerivedNo);  // 問合せ行番号枝番
                        paraInqOrgDtlDiscGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtlAsWork.InqOrgDtlDiscGuid);  // 問合せ元明細識別GUID
                        paraInqOthDtlDiscGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtlAsWork.InqOthDtlDiscGuid);  // 問合せ先明細識別GUID
                        paraGoodsDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.GoodsDivCd);  // 商品種別
                        paraRecyclePrtKindCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.RecyclePrtKindCode);  // リサイクル部品種別
                        paraRecyclePrtKindName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.RecyclePrtKindName);  // リサイクル部品種別名称
                        paraDeliveredGoodsDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.DeliveredGoodsDiv);  // 納品区分
                        paraHandleDivCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.HandleDivCode);  // 取扱区分
                        paraGoodsShape.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.GoodsShape);  // 商品形態
                        paraDelivrdGdsConfCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.DelivrdGdsConfCd);  // 納品確認区分
                        paraDeliGdsCmpltDueDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlAsWork.DeliGdsCmpltDueDate);  // 納品完了予定日
                        paraAnswerDeliveryDate.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AnswerDeliveryDate);  // 回答納期
                        paraBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.BLGoodsCode);  // BL商品コード
                        paraBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.BLGoodsDrCode);  // BL商品コード枝番
                        paraInqGoodsName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqGoodsName);  // 問発商品名
                        paraAnsGoodsName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AnsGoodsName);  // 回答商品名
                        paraSalesOrderCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.SalesOrderCount);  // 発注数
                        paraDeliveredGoodsCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.DeliveredGoodsCount);  // 納品数
                        paraGoodsNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsNo);  // 商品番号
                        paraGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.GoodsMakerCd);  // 商品メーカーコード
                        paraGoodsMakerNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsMakerNm);  // 商品メーカー名称
                        paraPureGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.PureGoodsMakerCd);  // 純正商品メーカーコード
                        paraInqPureGoodsNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqPureGoodsNo);  // 問発純正商品番号
                        paraAnsPureGoodsNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AnsPureGoodsNo);  // 回答純正商品番号
                        paraListPrice.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.ListPrice);  // 定価
                        paraUnitPrice.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.UnitPrice);  // 単価
                        paraGoodsAddInfo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsAddInfo);  // 商品補足情報
                        paraRoughRrofit.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.RoughRrofit);  // 粗利額
                        paraRoughRate.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.RoughRate);  // 粗利率
                        paraAnswerLimitDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlAsWork.AnswerLimitDate);  // 回答期限
                        paraCommentDtl.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.CommentDtl);  // 備考(明細)
                        paraAppendingFileDtl.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDtlAsWork.AppendingFileDtl);  // 添付ファイル(明細)
                        paraAppendingFileNmDtl.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AppendingFileNmDtl);  // 添付ファイル名(明細)
                        paraShelfNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.ShelfNo);  // 棚番
                        paraAdditionalDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AdditionalDivCd);  // 追加区分
                        paraCorrectDivCD.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.CorrectDivCD);  // 訂正区分
                        paraAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AcptAnOdrStatus);  // 受注ステータス
                        paraSalesSlipNum.Value = sCMAcOdrDtlAsWork.SalesSlipNum;  // 売上伝票番号
                        paraSalesRowNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SalesRowNo);  // 売上行番号
                        paraCampaignCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.CampaignCode);  // キャンペーンコード
                        paraStockDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.StockDiv);  // 在庫区分
                        paraInqOrdDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqOrdDivCd);  // 問合せ・発注種別
                        paraDisplayOrder.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.DisplayOrder);  // 表示順位
                        paraGoodsMngNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.GoodsMngNo);  // 商品管理番号
                        // 2010/05/26 Add >>>
                        paraCancelCndtinDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlAsWork.CancelCndtinDiv);  // キャンセル状態区分
                        // 2010/05/26 Add <<<
                        // 2011/02/09 Add >>>
                        paraDtlTakeinDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.DtlTakeinDivCd);  // 明細取込区分
                        // 2011/02/09 Add <<<
                        //--- ADD 2011/05/20 --->>>
                        paraWarehouseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.WarehouseCode);  // 倉庫コード
                        paraWarehouseName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.WarehouseName);  // 倉庫名称
                        paraWarehouseShelfNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.WarehouseShelfNo);  // 倉庫棚番
                        //--- ADD 2011/05/20 ---<<<
                        // -- ADD 2011/08/10   ------ >>>>>>
                        paraPmPrsntCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.PmPrsntCount);  // PM現在庫数
                        paraSetPartsMkrCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SetPartsMkrCd);  // セット部品メーカーコード
                        paraSetPartsNumber.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.SetPartsNumber);  // セット部品番号
                        paraSetPartsMainSubNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SetPartsMainSubNo);  // セット部品親子番号
                        // -- ADD 2011/08/10   ------ <<<<<<
                        //--- ADD 2012/01/10 --->>>
                        paraGoodsSpecialNote.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsSpecialNote);  // 商品規格・特記事項
                        //--- ADD 2012/01/10 ---<<<
                        //--- ADD 2012/04/12 --->>> 
                        paraPsMngNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.PSMngNo);  // PS管理番号
                        //--- ADD 2012/04/12 ---<<<
                        // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                        paraAutoEstimatePartsCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AutoEstimatePartsCd);  // 自動見積部品コード
                        // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraSalesTotalTaxInc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.SalesTotalTaxInc);  // 売上伝票合計（税込）
                        paraSalesTotalTaxExc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.SalesTotalTaxExc);  // 売上伝票合計（税抜）
                        paraScmConsTaxLayMethod.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ScmConsTaxLayMethod);  // SCM消費税転嫁方式
                        paraConsTaxRate.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.ConsTaxRate);  // 消費税税率
                        paraScmFractionProcCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ScmFractionProcCd);  // SCM端数処理区分
                        paraAccRecConsTax.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.AccRecConsTax);  // 売掛消費税
                        paraPMSalesDate.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.PMSalesDate);  // PM売上日
                        paraSuppSlpPrtTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SuppSlpPrtTime);  // 仕入先伝票発行時刻
                        paraSalesMoneyTaxInc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.SalesMoneyTaxInc);  // 売上金額（税込み）
                        paraSalesMoneyTaxExc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.SalesMoneyTaxExc);  // 売上金額（税抜き）
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraDataInputSystem.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.DataInputSystem);  // データ入力システム
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                        paraPmMainMngWarehouseCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PmMainMngWarehouseCd);
                        paraPmMainMngWarehouseName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PmMainMngWarehouseName);
                        paraPmMainMngShelfNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PmMainMngShelfNo);
                        paraPmMainMngPrsntCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.PmMainMngPrsntCount);
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                        paraPrmSetDtlNo2.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.PrmSetDtlNo2); // 優良設定詳細コード２
                        paraPrmSetDtlName2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PrmSetDtlName2); // 優良設定詳細名称２
                        paraStockStatusDiv.Value = SqlDataMediator.SqlSetShort(sCMAcOdrDtlAsWork.StockStatusDiv); // 在庫状況区分
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<

                        // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                        paraRentDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlAsWork.RentDiv); // 貸出区分            
                        paraMkrSuggestRtPric.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.MkrSuggestRtPric); // メーカー希望小売価格
                        paraOpenPriceDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.OpenPriceDiv); // オープン価格区分    
                        // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<

                        // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                        paraBgnGoodsDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlAsWork.BgnGoodsDiv); // お買得商品選択区分
                        // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<

                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                        paraModelPrtsAdptYm.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ModelPrtsAdptYm); // 型式別部品採用年月    
                        paraModelPrtsAblsYm.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ModelPrtsAblsYm); // 型式別部品廃止年月    
                        paraModelPrtsAdptFrameNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ModelPrtsAdptFrameNo); // 型式別部品採用車台番号    
                        paraModelPrtsAblsFrameNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ModelPrtsAblsFrameNo); // 型式別部品廃止車台番号    
                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<

                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraAnsDeliDateDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlAsWork.AnsDeliDateDiv); // 回答納期区分
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraGoodsSpecialNtForFac.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsSpecialNtForFac); // 商品規格・特記事項(工場向け)
                        paraGoodsSpecialNtForCOw.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsSpecialNtForCOw); // 商品規格・特記事項(カーオーナー向け)
                        paraPrmSetDtlName2ForFac.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PrmSetDtlName2ForFac); // 優良設定詳細名称２(工場向け)
                        paraPrmSetDtlName2ForCOw.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PrmSetDtlName2ForCOw); // 優良設定詳細名称２(カーオーナー向け)
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraInqBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqBlUtyPtThCd);  // 問発BL統一部品コード(スリーコード版)
                        paraInqBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqBlUtyPtSbCd);  // 問発BL統一部品サブコード
                        paraAnsBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AnsBlUtyPtThCd);  // 回答BL統一部品コード(スリーコード版)
                        paraAnsBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AnsBlUtyPtSbCd);  // 回答BL統一部品サブコード
                        paraAnsBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AnsBLGoodsCode);  // 回答BL商品コード
                        paraAnsBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AnsBLGoodsDrCode);  // 回答BL商品コード枝番
                        // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        sqlCommand.CommandTimeout = dbCommandTimeout; // ADD 田建委 2020/08/28 PMKOBETSU-4076の対応
                        sqlCommand.ExecuteNonQuery();
                        al.Add(sCMAcOdrDtlAsWork);
                    }
                }

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            scmAcOdrDtlAsWorkList = al;

            return status;
        }

        /// <summary>
        /// SCM受注明細データ(回答)情報を追加・更新します。
        /// </summary>
        /// <param name="scmAcOdrDtlAsWorkList">追加・更新するSCM受注明細データ(回答)情報を格納する ArrayList</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <param name="dbCommandTimeout">コマンドタイムアウト情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : scmAcOdrDtlAsWorkList に格納されているSCM受注明細データ(回答)情報を追加・更新します。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.06.17</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        /// <br>Update Note: 2020/08/28 田建委</br>
        /// <br>管理番号   : 11600006-00</br>
        /// <br>             PMKOBETSU-4076 タイムアウト設定</br> 
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
        //private int WriteSCMAcOdrDtlAsWorkProc(ref ArrayList scmAcOdrDtlAsWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        private int WriteSCMAcOdrDtlAsWorkProc(ref ArrayList scmAcOdrDtlAsWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction, int dbCommandTimeout)
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            ArrayList al = new ArrayList();
            try
            {
                if (scmAcOdrDtlAsWorkList != null)
                {
                    string sqlText = string.Empty;
                    sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);

                    for (int i = 0; i < scmAcOdrDtlAsWorkList.Count; i++)
                    {
                        SCMAcOdrDtlAsWork sCMAcOdrDtlAsWork = scmAcOdrDtlAsWorkList[i] as SCMAcOdrDtlAsWork;

                        # region [SELECT文]
                        sqlText = string.Empty;
                        sqlText += "SELECT" + Environment.NewLine;
                        sqlText += "  UPDATEDATETIMERF" + Environment.NewLine;
                        sqlText += "FROM" + Environment.NewLine;
                        sqlText += "  SCMACODRDTLASRF " + Environment.NewLine;
                        sqlText += "WHERE" + Environment.NewLine;
                        sqlText += "      ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                        sqlText += "  AND INQOTHEREPCDRF = @FINDINQOTHEREPCD" + Environment.NewLine;
                        sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;
                        sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;
                        sqlText += "  AND UPDATEDATERF = @FINDUPDATEDATE" + Environment.NewLine;
                        sqlText += "  AND UPDATETIMERF = @FINDUPDATETIME" + Environment.NewLine;
                        sqlText += "  AND INQROWNUMBERRF = @FINDINQROWNUMBER" + Environment.NewLine;
                        sqlText += "  AND INQROWNUMDERIVEDNORF = @FINDINQROWNUMDERIVEDNO" + Environment.NewLine;
                        sqlText += "  AND ACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                        sqlText += "  AND SALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;
                        sqlText += "  AND SALESROWNORF = @FINDSALESROWNO" + Environment.NewLine;
                        sqlCommand.CommandText = sqlText;
                        # endregion

                        sqlCommand.Parameters.Clear();

                        //Prameterオブジェクトの作成
                        SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                        SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                        SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                        SqlParameter findInqOtherEpCd = sqlCommand.Parameters.Add("@FINDINQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                        SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                        SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                        SqlParameter findUpdateDate = sqlCommand.Parameters.Add("@FINDUPDATEDATE", SqlDbType.Int);  // 更新年月日
                        SqlParameter findUpdateTime = sqlCommand.Parameters.Add("@FINDUPDATETIME", SqlDbType.Int);  // 更新時間
                        SqlParameter findInqRowNumber = sqlCommand.Parameters.Add("@FINDINQROWNUMBER", SqlDbType.Int);  // 問合せ行番号
                        SqlParameter findInqRowNumDerivedNo = sqlCommand.Parameters.Add("@FINDINQROWNUMDERIVEDNO", SqlDbType.Int);  // 問合せ行番号枝番
                        SqlParameter findAcptAnOdrStatus = sqlCommand.Parameters.Add("@FINDACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                        SqlParameter findSalesSlipNum = sqlCommand.Parameters.Add("@FINDSALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号
                        SqlParameter findSalesRowNo = sqlCommand.Parameters.Add("@FINDSALESROWNO", SqlDbType.Int);  // 売上行番号

                        //Parameterオブジェクトへ値設定
                        findEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.EnterpriseCode);  // 企業コード
                        findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOriginalEpCd);  // 問合せ元企業コード
                        findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        findInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOtherEpCd);  // 問合せ先企業コード
                        findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOtherSecCd);  // 問合せ先拠点コード
                        findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.InquiryNumber);  // 問合せ番号
                        if (sCMAcOdrDtlAsWork.UpdateDate == DateTime.MinValue)
                        {
                            findUpdateDate.Value = 0;  // 更新年月日
                        }
                        else
                        {
                            findUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlAsWork.UpdateDate);  // 更新年月日
                        }
                        findUpdateTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.UpdateTime);  // 更新時間
                        findInqRowNumber.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqRowNumber);  // 問合せ行番号
                        findInqRowNumDerivedNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqRowNumDerivedNo);  // 問合せ行番号枝番
                        findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AcptAnOdrStatus);  // 受注ステータス
                        findSalesSlipNum.Value = sCMAcOdrDtlAsWork.SalesSlipNum;  // 売上伝票番号
                        findSalesRowNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SalesRowNo);  // 売上行番号

                        sqlCommand.CommandTimeout = dbCommandTimeout;  //ADD 田建委 2020/08/28 PMKOBETSU-4076の対応
                        myReader = sqlCommand.ExecuteReader();

                        sqlText = string.Empty;

                        if (myReader.Read())
                        {
                            // 既存GUIDデータがある場合で更新日時が異なる場合は排他エラーで戻す
                            DateTime _updateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));// 更新日時

                            if (_updateDateTime != sCMAcOdrDtlAsWork.UpdateDateTime)
                            {
                                if (sCMAcOdrDtlAsWork.UpdateDateTime == DateTime.MinValue)
                                {
                                    // 新規登録で該当データ有りの場合には重複
                                    status = (int)ConstantManagement.DB_Status.ctDB_DUPLICATE;
                                }
                                else
                                {
                                    // 既存データで更新日時違いの場合には排他
                                    status = (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE;
                                }

                                return status;
                            }

                            # region [UPDATE文]
                            sqlText += "  UPDATE SCMACODRDTLASRF" + Environment.NewLine;
                            sqlText += "  SET" + Environment.NewLine;
                            sqlText += "  CREATEDATETIMERF = @CREATEDATETIME" + Environment.NewLine;
                            sqlText += " ,UPDATEDATETIMERF = @UPDATEDATETIME" + Environment.NewLine;
                            sqlText += " ,ENTERPRISECODERF = @ENTERPRISECODE" + Environment.NewLine;
                            sqlText += " ,FILEHEADERGUIDRF = @FILEHEADERGUID" + Environment.NewLine;
                            sqlText += " ,UPDEMPLOYEECODERF = @UPDEMPLOYEECODE" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID1RF = @UPDASSEMBLYID1" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID2RF = @UPDASSEMBLYID2" + Environment.NewLine;
                            sqlText += " ,LOGICALDELETECODERF = @LOGICALDELETECODE" + Environment.NewLine;
                            sqlText += " ,INQORIGINALEPCDRF = @INQORIGINALEPCD" + Environment.NewLine;
                            sqlText += " ,INQORIGINALSECCDRF = @INQORIGINALSECCD" + Environment.NewLine;
                            sqlText += " ,INQOTHEREPCDRF = @INQOTHEREPCD" + Environment.NewLine;
                            sqlText += " ,INQOTHERSECCDRF = @INQOTHERSECCD" + Environment.NewLine;
                            sqlText += " ,INQUIRYNUMBERRF = @INQUIRYNUMBER" + Environment.NewLine;
                            sqlText += " ,UPDATEDATERF = @UPDATEDATE" + Environment.NewLine;
                            sqlText += " ,UPDATETIMERF = @UPDATETIME" + Environment.NewLine;
                            sqlText += " ,INQROWNUMBERRF = @INQROWNUMBER" + Environment.NewLine;
                            sqlText += " ,INQROWNUMDERIVEDNORF = @INQROWNUMDERIVEDNO" + Environment.NewLine;
                            sqlText += " ,INQORGDTLDISCGUIDRF = @INQORGDTLDISCGUID" + Environment.NewLine;
                            sqlText += " ,INQOTHDTLDISCGUIDRF = @INQOTHDTLDISCGUID" + Environment.NewLine;
                            sqlText += " ,GOODSDIVCDRF = @GOODSDIVCD" + Environment.NewLine;
                            sqlText += " ,RECYCLEPRTKINDCODERF = @RECYCLEPRTKINDCODE" + Environment.NewLine;
                            sqlText += " ,RECYCLEPRTKINDNAMERF = @RECYCLEPRTKINDNAME" + Environment.NewLine;
                            sqlText += " ,DELIVEREDGOODSDIVRF = @DELIVEREDGOODSDIV" + Environment.NewLine;
                            sqlText += " ,HANDLEDIVCODERF = @HANDLEDIVCODE" + Environment.NewLine;
                            sqlText += " ,GOODSSHAPERF = @GOODSSHAPE" + Environment.NewLine;
                            sqlText += " ,DELIVRDGDSCONFCDRF = @DELIVRDGDSCONFCD" + Environment.NewLine;
                            sqlText += " ,DELIGDSCMPLTDUEDATERF = @DELIGDSCMPLTDUEDATE" + Environment.NewLine;
                            sqlText += " ,ANSWERDELIVERYDATERF = @ANSWERDELIVERYDATE" + Environment.NewLine;
                            sqlText += " ,BLGOODSCODERF = @BLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,BLGOODSDRCODERF = @BLGOODSDRCODE" + Environment.NewLine;
                            sqlText += " ,INQGOODSNAMERF = @INQGOODSNAME" + Environment.NewLine;
                            sqlText += " ,ANSGOODSNAMERF = @ANSGOODSNAME" + Environment.NewLine;
                            sqlText += " ,SALESORDERCOUNTRF = @SALESORDERCOUNT" + Environment.NewLine;
                            sqlText += " ,DELIVEREDGOODSCOUNTRF = @DELIVEREDGOODSCOUNT" + Environment.NewLine;
                            sqlText += " ,GOODSNORF = @GOODSNO" + Environment.NewLine;
                            sqlText += " ,GOODSMAKERCDRF = @GOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,GOODSMAKERNMRF = @GOODSMAKERNM" + Environment.NewLine;
                            sqlText += " ,PUREGOODSMAKERCDRF = @PUREGOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,INQPUREGOODSNORF = @INQPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,ANSPUREGOODSNORF = @ANSPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,LISTPRICERF = @LISTPRICE" + Environment.NewLine;
                            sqlText += " ,UNITPRICERF = @UNITPRICE" + Environment.NewLine;
                            sqlText += " ,GOODSADDINFORF = @GOODSADDINFO" + Environment.NewLine;
                            sqlText += " ,ROUGHRROFITRF = @ROUGHRROFIT" + Environment.NewLine;
                            sqlText += " ,ROUGHRATERF = @ROUGHRATE" + Environment.NewLine;
                            sqlText += " ,ANSWERLIMITDATERF = @ANSWERLIMITDATE" + Environment.NewLine;
                            sqlText += " ,COMMENTDTLRF = @COMMENTDTL" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILEDTLRF = @APPENDINGFILEDTL" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILENMDTLRF = @APPENDINGFILENMDTL" + Environment.NewLine;
                            sqlText += " ,SHELFNORF = @SHELFNO" + Environment.NewLine;
                            sqlText += " ,ADDITIONALDIVCDRF = @ADDITIONALDIVCD" + Environment.NewLine;
                            sqlText += " ,CORRECTDIVCDRF = @CORRECTDIVCD" + Environment.NewLine;
                            sqlText += " ,ACPTANODRSTATUSRF = @ACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += " ,SALESSLIPNUMRF = @SALESSLIPNUM" + Environment.NewLine;
                            sqlText += " ,SALESROWNORF = @SALESROWNO" + Environment.NewLine;
                            sqlText += " ,CAMPAIGNCODERF = @CAMPAIGNCODE" + Environment.NewLine;
                            sqlText += " ,STOCKDIVRF = @STOCKDIV" + Environment.NewLine;
                            sqlText += " ,INQORDDIVCDRF = @INQORDDIVCD" + Environment.NewLine;
                            sqlText += " ,DISPLAYORDERRF = @DISPLAYORDER" + Environment.NewLine;
                            sqlText += " ,GOODSMNGNORF = @GOODSMNGNO" + Environment.NewLine;
                            // 2010/05/26 Add >>>
                            sqlText += " ,CANCELCNDTINDIVRF = @CANCELCNDTINDIV" + Environment.NewLine;
                            // 2010/05/26 Add <<<
                            // 2011/02/09 Add >>>
                            sqlText += " ,DTLTAKEINDIVCDRF = @DTLTAKEINDIVCD" + Environment.NewLine;
                            // 2011/02/09 Add <<<
                            //--- ADD 2011/05/20 --->>>
                            sqlText += " ,WAREHOUSECODERF = @WAREHOUSECODE" + Environment.NewLine;
                            sqlText += " ,WAREHOUSENAMERF = @WAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,WAREHOUSESHELFNORF = @WAREHOUSESHELFNO" + Environment.NewLine;
                            //--- ADD 2011/05/20 ---<<<
                            // -- ADD 2011/08/10   ------ >>>>>>
                            sqlText += " ,PMPRSNTCOUNTRF = @PMPRSNTCOUNT" + Environment.NewLine;
                            sqlText += " ,SETPARTSMKRCDRF = @SETPARTSMKRCD" + Environment.NewLine;
                            sqlText += " ,SETPARTSNUMBERRF = @SETPARTSNUMBER" + Environment.NewLine;
                            sqlText += " ,SETPARTSMAINSUBNORF = @SETPARTSMAINSUBNO" + Environment.NewLine;
                            // -- ADD 2011/08/10   ------ <<<<<<
                            //--- ADD 2012/01/10 --->>>
                            sqlText += " ,GOODSSPECIALNOTERF = @GOODSSPECIALNOTE" + Environment.NewLine;
                            //--- ADD 2012/01/10 ---<<<
                            //--- ADD 2012/04/12 --->>> 
                            sqlText += " ,PSMNGNORF = @PSMNGNO" + Environment.NewLine;
                            //--- ADD 2012/04/12 ---<<<
                            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                            sqlText += " ,AUTOESTIMATEPARTSCDRF = @AUTOESTIMATEPARTSCD" + Environment.NewLine;  //自動見積部品コード
                            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,SALESTOTALTAXINCRF = @SALESTOTALTAXINC" + Environment.NewLine;  //　売上伝票合計（税込）
                            sqlText += " ,SALESTOTALTAXEXCRF = @SALESTOTALTAXEXC" + Environment.NewLine;  // 売上伝票合計（税抜）
                            sqlText += " ,SCMCONSTAXLAYMETHODRF = @SCMCONSTAXLAYMETHOD" + Environment.NewLine;  // SCM消費税転嫁方式
                            sqlText += " ,CONSTAXRATERF = @CONSTAXRATE" + Environment.NewLine;  // 消費税税率
                            sqlText += " ,SCMFRACTIONPROCCDRF = @SCMFRACTIONPROCCD" + Environment.NewLine;  // SCM端数処理区分
                            sqlText += " ,ACCRECCONSTAXRF = @ACCRECCONSTAX" + Environment.NewLine;  // 売掛消費税
                            sqlText += " ,PMSALESDATERF = @PMSALESDATE" + Environment.NewLine;  // PM売上日
                            sqlText += " ,SUPPSLPPRTTIMERF = @SUPPSLPPRTTIME" + Environment.NewLine;  // 仕入先伝票発行時刻
                            sqlText += " ,SALESMONEYTAXINCRF = @SALESMONEYTAXINC" + Environment.NewLine;  // 売上金額（税込み）
                            sqlText += " ,SALESMONEYTAXEXCRF = @SALESMONEYTAXEXC" + Environment.NewLine;  // 売上金額（税抜き）
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,DATAINPUTSYSTEMRF = @DATAINPUTSYSTEM" + Environment.NewLine;  // データ入力システム
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            sqlText += " ,PMMAINMNGWAREHOUSECDRF = @PMMAINMNGWAREHOUSECD" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGWAREHOUSENAMERF = @PMMAINMNGWAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGSHELFNORF = @PMMAINMNGSHELFNO" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGPRSNTCOUNTRF = @PMMAINMNGPRSNTCOUNT" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,INQBLUTYPTTHCDRF=@INQBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,INQBLUTYPTSBCDRF=@INQBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTTHCDRF=@ANSBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTSBCDRF=@ANSBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSCODERF=@ANSBLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSDRCODERF=@ANSBLGOODSDRCODE" + Environment.NewLine;
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            sqlText += "  WHERE" + Environment.NewLine;
                            sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                            sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                            sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                            sqlText += "  AND INQOTHEREPCDRF = @FINDINQOTHEREPCD" + Environment.NewLine;
                            sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;
                            sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;
                            sqlText += "  AND UPDATEDATERF = @FINDUPDATEDATE" + Environment.NewLine;
                            sqlText += "  AND UPDATETIMERF = @FINDUPDATETIME" + Environment.NewLine;
                            sqlText += "  AND INQROWNUMBERRF = @FINDINQROWNUMBER" + Environment.NewLine;
                            sqlText += "  AND INQROWNUMDERIVEDNORF = @FINDINQROWNUMDERIVEDNO" + Environment.NewLine;
                            sqlText += "  AND ACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += "  AND SALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;
                            sqlText += "  AND SALESROWNORF = @FINDSALESROWNO" + Environment.NewLine;
                            sqlCommand.CommandText = sqlText;
                            # endregion

                            // KEYコマンドを再設定
                            findEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.EnterpriseCode);  // 企業コード
                            findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOriginalEpCd);  // 問合せ元企業コード
                            findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOriginalSecCd);  // 問合せ元拠点コード
                            findInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOtherEpCd);  // 問合せ先企業コード
                            findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOtherSecCd);  // 問合せ先拠点コード
                            findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.InquiryNumber);  // 問合せ番号
                            if (sCMAcOdrDtlAsWork.UpdateDate == DateTime.MinValue)
                            {
                                findUpdateDate.Value = 0;  // 更新年月日
                            }
                            else
                            {
                                findUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlAsWork.UpdateDate);  // 更新年月日
                            }
                            findUpdateTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.UpdateTime);  // 更新時間
                            findInqRowNumber.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqRowNumber);  // 問合せ行番号
                            findInqRowNumDerivedNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqRowNumDerivedNo);  // 問合せ行番号枝番
                            findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AcptAnOdrStatus);  // 受注ステータス
                            findSalesSlipNum.Value = sCMAcOdrDtlAsWork.SalesSlipNum;  // 売上伝票番号
                            findSalesRowNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SalesRowNo);  // 売上行番号

                            // 更新ヘッダ情報を設定
                            object obj = (object)this;
                            IFileHeader flhd = (IFileHeader)sCMAcOdrDtlAsWork;
                            FileHeader fileHeader = new FileHeader(obj);
                            fileHeader.SetUpdateHeader(ref flhd, obj);
                        }
                        else
                        {
                            // 既存GUIDデータが無い場合で更新日時が更新対象データに入っている場合はすでに削除されている意味で排他を戻す
                            if (sCMAcOdrDtlAsWork.UpdateDateTime > DateTime.MinValue)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE;
                                return status;
                            }

                            # region [INSERT文]
                            sqlText += "  INSERT INTO SCMACODRDTLASRF (" + Environment.NewLine;
                            sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                            sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                            sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                            sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                            sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                            sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                            sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                            sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                            sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                            sqlText += " ,INQROWNUMBERRF" + Environment.NewLine;
                            sqlText += " ,INQROWNUMDERIVEDNORF" + Environment.NewLine;
                            sqlText += " ,INQORGDTLDISCGUIDRF" + Environment.NewLine;
                            sqlText += " ,INQOTHDTLDISCGUIDRF" + Environment.NewLine;
                            sqlText += " ,GOODSDIVCDRF" + Environment.NewLine;
                            sqlText += " ,RECYCLEPRTKINDCODERF" + Environment.NewLine;
                            sqlText += " ,RECYCLEPRTKINDNAMERF" + Environment.NewLine;
                            sqlText += " ,DELIVEREDGOODSDIVRF" + Environment.NewLine;
                            sqlText += " ,HANDLEDIVCODERF" + Environment.NewLine;
                            sqlText += " ,GOODSSHAPERF" + Environment.NewLine;
                            sqlText += " ,DELIVRDGDSCONFCDRF" + Environment.NewLine;
                            sqlText += " ,DELIGDSCMPLTDUEDATERF" + Environment.NewLine;
                            sqlText += " ,ANSWERDELIVERYDATERF" + Environment.NewLine;
                            sqlText += " ,BLGOODSCODERF" + Environment.NewLine;
                            sqlText += " ,BLGOODSDRCODERF" + Environment.NewLine;
                            sqlText += " ,INQGOODSNAMERF" + Environment.NewLine;
                            sqlText += " ,ANSGOODSNAMERF" + Environment.NewLine;
                            sqlText += " ,SALESORDERCOUNTRF" + Environment.NewLine;
                            sqlText += " ,DELIVEREDGOODSCOUNTRF" + Environment.NewLine;
                            sqlText += " ,GOODSNORF" + Environment.NewLine;
                            sqlText += " ,GOODSMAKERCDRF" + Environment.NewLine;
                            sqlText += " ,GOODSMAKERNMRF" + Environment.NewLine;
                            sqlText += " ,PUREGOODSMAKERCDRF" + Environment.NewLine;
                            sqlText += " ,INQPUREGOODSNORF" + Environment.NewLine;
                            sqlText += " ,ANSPUREGOODSNORF" + Environment.NewLine;
                            sqlText += " ,LISTPRICERF" + Environment.NewLine;
                            sqlText += " ,UNITPRICERF" + Environment.NewLine;
                            sqlText += " ,GOODSADDINFORF" + Environment.NewLine;
                            sqlText += " ,ROUGHRROFITRF" + Environment.NewLine;
                            sqlText += " ,ROUGHRATERF" + Environment.NewLine;
                            sqlText += " ,ANSWERLIMITDATERF" + Environment.NewLine;
                            sqlText += " ,COMMENTDTLRF" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILEDTLRF" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILENMDTLRF" + Environment.NewLine;
                            sqlText += " ,SHELFNORF" + Environment.NewLine;
                            sqlText += " ,ADDITIONALDIVCDRF" + Environment.NewLine;
                            sqlText += " ,CORRECTDIVCDRF" + Environment.NewLine;
                            sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                            sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                            sqlText += " ,SALESROWNORF" + Environment.NewLine;
                            sqlText += " ,CAMPAIGNCODERF" + Environment.NewLine;
                            sqlText += " ,STOCKDIVRF" + Environment.NewLine;
                            sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                            sqlText += " ,DISPLAYORDERRF" + Environment.NewLine;
                            // 2010/05/26 >>>
                            //sqlText += " ,GOODSMNGNORF)" + Environment.NewLine;
                            sqlText += " ,GOODSMNGNORF" + Environment.NewLine;
                            sqlText += " ,CANCELCNDTINDIVRF" + Environment.NewLine;
                            // 2011/02/09 Add >>>
                            sqlText += " ,DTLTAKEINDIVCDRF" + Environment.NewLine;
                            // 2011/02/09 Add <<<
                            //--- ADD 2011/05/20 --->>>
                            sqlText += " ,WAREHOUSECODERF" + Environment.NewLine;
                            sqlText += " ,WAREHOUSENAMERF" + Environment.NewLine;
                            sqlText += " ,WAREHOUSESHELFNORF" + Environment.NewLine;
                            //--- ADD 2011/05/20 ---<<<
                            // -- ADD 2011/08/10   ------ >>>>>>
                            sqlText += " ,PMPRSNTCOUNTRF" + Environment.NewLine;
                            sqlText += " ,SETPARTSMKRCDRF" + Environment.NewLine;
                            sqlText += " ,SETPARTSNUMBERRF" + Environment.NewLine;
                            sqlText += " ,SETPARTSMAINSUBNORF" + Environment.NewLine;
                            // -- ADD 2011/08/10   ------ <<<<<<
                            //--- ADD 2012/01/10 --->>>
                            sqlText += " ,GOODSSPECIALNOTERF" + Environment.NewLine;
                            //--- ADD 2012/01/10 ---<<<
                            //--- ADD 2012/04/12 --->>> 
                            sqlText += " ,PSMNGNORF" + Environment.NewLine;       // PS管理番号
                            //--- ADD 2012/04/12 ---<<<
                            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                            sqlText += " ,AUTOESTIMATEPARTSCDRF" + Environment.NewLine;  //自動見積部品コード
                            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;  //　売上伝票合計（税込）
                            sqlText += " ,SALESTOTALTAXEXCRF" + Environment.NewLine;  // 売上伝票合計（税抜）
                            sqlText += " ,SCMCONSTAXLAYMETHODRF" + Environment.NewLine;  // SCM消費税転嫁方式
                            sqlText += " ,CONSTAXRATERF" + Environment.NewLine;  // 消費税税率
                            sqlText += " ,SCMFRACTIONPROCCDRF" + Environment.NewLine;  // SCM端数処理区分
                            sqlText += " ,ACCRECCONSTAXRF" + Environment.NewLine;  // 売掛消費税
                            sqlText += " ,PMSALESDATERF" + Environment.NewLine;  // PM売上日
                            sqlText += " ,SUPPSLPPRTTIMERF" + Environment.NewLine;  // 仕入先伝票発行時刻
                            sqlText += " ,SALESMONEYTAXINCRF" + Environment.NewLine;  // 売上金額（税込み）
                            sqlText += " ,SALESMONEYTAXEXCRF" + Environment.NewLine;  // 売上金額（税抜き）
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,DATAINPUTSYSTEMRF" + Environment.NewLine;  // データ入力システム
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            sqlText += " ,PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGSHELFNORF" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                            sqlText += " ,PRMSETDTLNO2RF  " + Environment.NewLine;
                            sqlText += " ,PRMSETDTLNAME2RF" + Environment.NewLine;
                            sqlText += " ,STOCKSTATUSDIVRF" + Environment.NewLine;
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                            sqlText += " ,RENTDIVRF" + Environment.NewLine;
                            sqlText += " ,MKRSUGGESTRTPRICRF" + Environment.NewLine;
                            sqlText += " ,OPENPRICEDIVRF" + Environment.NewLine;
                            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                            // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                            sqlText += " ,BGNGOODSDIVRF" + Environment.NewLine;
                            // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                            sqlText += " ,MODELPRTSADPTYMRF" + Environment.NewLine;
                            sqlText += " ,MODELPRTSABLSYMRF" + Environment.NewLine;
                            sqlText += " ,MODELPRTSADPTFRAMENORF" + Environment.NewLine;
                            sqlText += " ,MODELPRTSABLSFRAMENORF" + Environment.NewLine;
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,ANSDELIDATEDIVRF" + Environment.NewLine;     // 回答納期区分
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,GOODSSPECIALNTFORFACRF" + Environment.NewLine;     // 商品規格・特記事項(工場向け)
                            sqlText += " ,GOODSSPECIALNTFORCOWRF" + Environment.NewLine;     // 商品規格・特記事項(カーオーナー向け)
                            sqlText += " ,PRMSETDTLNAME2FORFACRF" + Environment.NewLine;     // 優良設定詳細名称２(工場向け)
                            sqlText += " ,PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;     // 優良設定詳細名称２(カーオーナー向け)
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,INQBLUTYPTTHCDRF" + Environment.NewLine;
                            sqlText += " ,INQBLUTYPTSBCDRF" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTTHCDRF" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTSBCDRF" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSCODERF" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSDRCODERF" + Environment.NewLine;
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                            sqlText += " )" + Environment.NewLine;
                            // 2010/05/26 <<<
                            sqlText += "  VALUES" + Environment.NewLine;
                            sqlText += "  (@CREATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                            sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                            sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                            sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALEPCD" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALSECCD" + Environment.NewLine;
                            sqlText += " ,@INQOTHEREPCD" + Environment.NewLine;
                            sqlText += " ,@INQOTHERSECCD" + Environment.NewLine;
                            sqlText += " ,@INQUIRYNUMBER" + Environment.NewLine;
                            sqlText += " ,@UPDATEDATE" + Environment.NewLine;
                            sqlText += " ,@UPDATETIME" + Environment.NewLine;
                            sqlText += " ,@INQROWNUMBER" + Environment.NewLine;
                            sqlText += " ,@INQROWNUMDERIVEDNO" + Environment.NewLine;
                            sqlText += " ,@INQORGDTLDISCGUID" + Environment.NewLine;
                            sqlText += " ,@INQOTHDTLDISCGUID" + Environment.NewLine;
                            sqlText += " ,@GOODSDIVCD" + Environment.NewLine;
                            sqlText += " ,@RECYCLEPRTKINDCODE" + Environment.NewLine;
                            sqlText += " ,@RECYCLEPRTKINDNAME" + Environment.NewLine;
                            sqlText += " ,@DELIVEREDGOODSDIV" + Environment.NewLine;
                            sqlText += " ,@HANDLEDIVCODE" + Environment.NewLine;
                            sqlText += " ,@GOODSSHAPE" + Environment.NewLine;
                            sqlText += " ,@DELIVRDGDSCONFCD" + Environment.NewLine;
                            sqlText += " ,@DELIGDSCMPLTDUEDATE" + Environment.NewLine;
                            sqlText += " ,@ANSWERDELIVERYDATE" + Environment.NewLine;
                            sqlText += " ,@BLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,@BLGOODSDRCODE" + Environment.NewLine;
                            sqlText += " ,@INQGOODSNAME" + Environment.NewLine;
                            sqlText += " ,@ANSGOODSNAME" + Environment.NewLine;
                            sqlText += " ,@SALESORDERCOUNT" + Environment.NewLine;
                            sqlText += " ,@DELIVEREDGOODSCOUNT" + Environment.NewLine;
                            sqlText += " ,@GOODSNO" + Environment.NewLine;
                            sqlText += " ,@GOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,@GOODSMAKERNM" + Environment.NewLine;
                            sqlText += " ,@PUREGOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,@INQPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,@ANSPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,@LISTPRICE" + Environment.NewLine;
                            sqlText += " ,@UNITPRICE" + Environment.NewLine;
                            sqlText += " ,@GOODSADDINFO" + Environment.NewLine;
                            sqlText += " ,@ROUGHRROFIT" + Environment.NewLine;
                            sqlText += " ,@ROUGHRATE" + Environment.NewLine;
                            sqlText += " ,@ANSWERLIMITDATE" + Environment.NewLine;
                            sqlText += " ,@COMMENTDTL" + Environment.NewLine;
                            sqlText += " ,@APPENDINGFILEDTL" + Environment.NewLine;
                            sqlText += " ,@APPENDINGFILENMDTL" + Environment.NewLine;
                            sqlText += " ,@SHELFNO" + Environment.NewLine;
                            sqlText += " ,@ADDITIONALDIVCD" + Environment.NewLine;
                            sqlText += " ,@CORRECTDIVCD" + Environment.NewLine;
                            sqlText += " ,@ACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += " ,@SALESSLIPNUM" + Environment.NewLine;
                            sqlText += " ,@SALESROWNO" + Environment.NewLine;
                            sqlText += " ,@CAMPAIGNCODE" + Environment.NewLine;
                            sqlText += " ,@STOCKDIV" + Environment.NewLine;
                            sqlText += " ,@INQORDDIVCD" + Environment.NewLine;
                            sqlText += " ,@DISPLAYORDER" + Environment.NewLine;
                            // 2010/05/26 >>>
                            //sqlText += " ,@GOODSMNGNO)" + Environment.NewLine;
                            sqlText += " ,@GOODSMNGNO" + Environment.NewLine;
                            sqlText += " ,@CANCELCNDTINDIV" + Environment.NewLine;
                            // 2011/02/09 Add >>>
                            sqlText += " ,@DTLTAKEINDIVCD" + Environment.NewLine;
                            // 2011/02/09 Add <<<
                            //--- ADD 2011/05/20 --->>>
                            sqlText += " ,@WAREHOUSECODE" + Environment.NewLine;
                            sqlText += " ,@WAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,@WAREHOUSESHELFNO" + Environment.NewLine;
                            //--- ADD 2011/05/20 ---<<<
                            // -- ADD 2011/08/10   ------ >>>>>>
                            sqlText += " ,@PMPRSNTCOUNT" + Environment.NewLine;
                            sqlText += " ,@SETPARTSMKRCD" + Environment.NewLine;
                            sqlText += " ,@SETPARTSNUMBER" + Environment.NewLine;
                            sqlText += " ,@SETPARTSMAINSUBNO" + Environment.NewLine;
                            // -- ADD 2011/08/10   ------ <<<<<<
                            //--- ADD 2012/01/10 --->>>
                            sqlText += " ,@GOODSSPECIALNOTE" + Environment.NewLine;  //商品規格・特記事項
                            //--- ADD 2012/01/10 ---<<<
                            //--- ADD 2012/04/12 --->>> 
                            sqlText += " ,@PSMNGNO" + Environment.NewLine;       // PS管理番号
                            //--- ADD 2012/04/12 ---<<<
                            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                            sqlText += " ,@AUTOESTIMATEPARTSCD" + Environment.NewLine;  //自動見積部品コード
                            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@SALESTOTALTAXINC" + Environment.NewLine;  //　売上伝票合計（税込）
                            sqlText += " ,@SALESTOTALTAXEXC" + Environment.NewLine;  // 売上伝票合計（税抜）
                            sqlText += " ,@SCMCONSTAXLAYMETHOD" + Environment.NewLine;  // SCM消費税転嫁方式
                            sqlText += " ,@CONSTAXRATE" + Environment.NewLine;  // 消費税税率
                            sqlText += " ,@SCMFRACTIONPROCCD" + Environment.NewLine;  // SCM端数処理区分
                            sqlText += " ,@ACCRECCONSTAX" + Environment.NewLine;  // 売掛消費税
                            sqlText += " ,@PMSALESDATE" + Environment.NewLine;  // PM売上日
                            sqlText += " ,@SUPPSLPPRTTIME" + Environment.NewLine;  // 仕入先伝票発行時刻
                            sqlText += " ,@SALESMONEYTAXINC" + Environment.NewLine;  // 売上金額（税込み）
                            sqlText += " ,@SALESMONEYTAXEXC" + Environment.NewLine;  // 売上金額（税抜き）
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@DATAINPUTSYSTEM" + Environment.NewLine;  // データ入力システム
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            sqlText += " ,@PMMAINMNGWAREHOUSECD" + Environment.NewLine;
                            sqlText += " ,@PMMAINMNGWAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,@PMMAINMNGSHELFNO" + Environment.NewLine;
                            sqlText += " ,@PMMAINMNGPRSNTCOUNT" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                            sqlText += " ,@PRMSETDTLNO2  " + Environment.NewLine;
                            sqlText += " ,@PRMSETDTLNAME2" + Environment.NewLine;
                            sqlText += " ,@STOCKSTATUSDIV" + Environment.NewLine;
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                            sqlText += " ,@RENTDIV" + Environment.NewLine;
                            sqlText += " ,@MKRSUGGESTRTPRIC" + Environment.NewLine;
                            sqlText += " ,@OPENPRICEDIV" + Environment.NewLine;
                            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                            // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                            sqlText += " ,@BGNGOODSDIV" + Environment.NewLine;
                            // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                            sqlText += " ,@MODELPRTSADPTYM" + Environment.NewLine;
                            sqlText += " ,@MODELPRTSABLSYM" + Environment.NewLine;
                            sqlText += " ,@MODELPRTSADPTFRAMENO" + Environment.NewLine;
                            sqlText += " ,@MODELPRTSABLSFRAMENO" + Environment.NewLine;
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@ANSDELIDATEDIV" + Environment.NewLine;
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@GOODSSPECIALNTFORFAC" + Environment.NewLine;
                            sqlText += " ,@GOODSSPECIALNTFORCOW" + Environment.NewLine;
                            sqlText += " ,@PRMSETDTLNAME2FORFAC" + Environment.NewLine;
                            sqlText += " ,@PRMSETDTLNAME2FORCOW" + Environment.NewLine;
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@INQBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,@INQBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,@ANSBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,@ANSBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,@ANSBLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,@ANSBLGOODSDRCODE" + Environment.NewLine;
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                            sqlText += " )" + Environment.NewLine;
                            // 2010/05/26 <<<
                            sqlCommand.CommandText = sqlText;
                            # endregion

                            // 登録ヘッダ情報を設定
                            object obj = (object)this;
                            IFileHeader flhd = (IFileHeader)sCMAcOdrDtlAsWork;
                            FileHeader fileHeader = new FileHeader(obj);
                            fileHeader.SetInsertHeader(ref flhd, obj);
                        }

                        if (!myReader.IsClosed)
                        {
                            myReader.Close();
                        }

                        //Prameterオブジェクトの作成
                        SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);  // 作成日時
                        SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);  // 更新日時
                        SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                        SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);  // GUID
                        SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);  // 更新従業員コード
                        SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);  // 更新アセンブリID1
                        SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);  // 更新アセンブリID2
                        SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);  // 論理削除区分
                        SqlParameter paraInqOriginalEpCd = sqlCommand.Parameters.Add("@INQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                        SqlParameter paraInqOriginalSecCd = sqlCommand.Parameters.Add("@INQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                        SqlParameter paraInqOtherEpCd = sqlCommand.Parameters.Add("@INQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                        SqlParameter paraInqOtherSecCd = sqlCommand.Parameters.Add("@INQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                        SqlParameter paraInquiryNumber = sqlCommand.Parameters.Add("@INQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                        SqlParameter paraUpdateDate = sqlCommand.Parameters.Add("@UPDATEDATE", SqlDbType.Int);  // 更新年月日
                        SqlParameter paraUpdateTime = sqlCommand.Parameters.Add("@UPDATETIME", SqlDbType.Int);  // 更新時間
                        SqlParameter paraInqRowNumber = sqlCommand.Parameters.Add("@INQROWNUMBER", SqlDbType.Int);  // 問合せ行番号
                        SqlParameter paraInqRowNumDerivedNo = sqlCommand.Parameters.Add("@INQROWNUMDERIVEDNO", SqlDbType.Int);  // 問合せ行番号枝番
                        SqlParameter paraInqOrgDtlDiscGuid = sqlCommand.Parameters.Add("@INQORGDTLDISCGUID", SqlDbType.UniqueIdentifier);  // 問合せ元明細識別GUID
                        SqlParameter paraInqOthDtlDiscGuid = sqlCommand.Parameters.Add("@INQOTHDTLDISCGUID", SqlDbType.UniqueIdentifier);  // 問合せ先明細識別GUID
                        SqlParameter paraGoodsDivCd = sqlCommand.Parameters.Add("@GOODSDIVCD", SqlDbType.Int);  // 商品種別
                        SqlParameter paraRecyclePrtKindCode = sqlCommand.Parameters.Add("@RECYCLEPRTKINDCODE", SqlDbType.Int);  // リサイクル部品種別
                        SqlParameter paraRecyclePrtKindName = sqlCommand.Parameters.Add("@RECYCLEPRTKINDNAME", SqlDbType.NVarChar);  // リサイクル部品種別名称
                        SqlParameter paraDeliveredGoodsDiv = sqlCommand.Parameters.Add("@DELIVEREDGOODSDIV", SqlDbType.Int);  // 納品区分
                        SqlParameter paraHandleDivCode = sqlCommand.Parameters.Add("@HANDLEDIVCODE", SqlDbType.Int);  // 取扱区分
                        SqlParameter paraGoodsShape = sqlCommand.Parameters.Add("@GOODSSHAPE", SqlDbType.Int);  // 商品形態
                        SqlParameter paraDelivrdGdsConfCd = sqlCommand.Parameters.Add("@DELIVRDGDSCONFCD", SqlDbType.Int);  // 納品確認区分
                        SqlParameter paraDeliGdsCmpltDueDate = sqlCommand.Parameters.Add("@DELIGDSCMPLTDUEDATE", SqlDbType.Int);  // 納品完了予定日
                        SqlParameter paraAnswerDeliveryDate = sqlCommand.Parameters.Add("@ANSWERDELIVERYDATE", SqlDbType.NVarChar);  // 回答納期
                        SqlParameter paraBLGoodsCode = sqlCommand.Parameters.Add("@BLGOODSCODE", SqlDbType.Int);  // BL商品コード
                        SqlParameter paraBLGoodsDrCode = sqlCommand.Parameters.Add("@BLGOODSDRCODE", SqlDbType.Int);  // BL商品コード枝番
                        SqlParameter paraInqGoodsName = sqlCommand.Parameters.Add("@INQGOODSNAME", SqlDbType.NVarChar);  // 問発商品名
                        SqlParameter paraAnsGoodsName = sqlCommand.Parameters.Add("@ANSGOODSNAME", SqlDbType.NVarChar);  // 回答商品名
                        SqlParameter paraSalesOrderCount = sqlCommand.Parameters.Add("@SALESORDERCOUNT", SqlDbType.Float);  // 発注数
                        SqlParameter paraDeliveredGoodsCount = sqlCommand.Parameters.Add("@DELIVEREDGOODSCOUNT", SqlDbType.Float);  // 納品数
                        SqlParameter paraGoodsNo = sqlCommand.Parameters.Add("@GOODSNO", SqlDbType.NVarChar);  // 商品番号
                        SqlParameter paraGoodsMakerCd = sqlCommand.Parameters.Add("@GOODSMAKERCD", SqlDbType.Int);  // 商品メーカーコード
                        SqlParameter paraGoodsMakerNm = sqlCommand.Parameters.Add("@GOODSMAKERNM", SqlDbType.NVarChar);  // 商品メーカー名称
                        SqlParameter paraPureGoodsMakerCd = sqlCommand.Parameters.Add("@PUREGOODSMAKERCD", SqlDbType.Int);  // 純正商品メーカーコード
                        SqlParameter paraInqPureGoodsNo = sqlCommand.Parameters.Add("@INQPUREGOODSNO", SqlDbType.NVarChar);  // 問発純正商品番号
                        SqlParameter paraAnsPureGoodsNo = sqlCommand.Parameters.Add("@ANSPUREGOODSNO", SqlDbType.NVarChar);  // 回答純正商品番号
                        SqlParameter paraListPrice = sqlCommand.Parameters.Add("@LISTPRICE", SqlDbType.BigInt);  // 定価
                        SqlParameter paraUnitPrice = sqlCommand.Parameters.Add("@UNITPRICE", SqlDbType.BigInt);  // 単価
                        SqlParameter paraGoodsAddInfo = sqlCommand.Parameters.Add("@GOODSADDINFO", SqlDbType.NVarChar);  // 商品補足情報
                        SqlParameter paraRoughRrofit = sqlCommand.Parameters.Add("@ROUGHRROFIT", SqlDbType.BigInt);  // 粗利額
                        SqlParameter paraRoughRate = sqlCommand.Parameters.Add("@ROUGHRATE", SqlDbType.Float);  // 粗利率
                        SqlParameter paraAnswerLimitDate = sqlCommand.Parameters.Add("@ANSWERLIMITDATE", SqlDbType.Int);  // 回答期限
                        SqlParameter paraCommentDtl = sqlCommand.Parameters.Add("@COMMENTDTL", SqlDbType.NVarChar);  // 備考(明細)
                        SqlParameter paraAppendingFileDtl = sqlCommand.Parameters.Add("@APPENDINGFILEDTL", SqlDbType.VarBinary);  // 添付ファイル(明細)
                        SqlParameter paraAppendingFileNmDtl = sqlCommand.Parameters.Add("@APPENDINGFILENMDTL", SqlDbType.NVarChar);  // 添付ファイル名(明細)
                        SqlParameter paraShelfNo = sqlCommand.Parameters.Add("@SHELFNO", SqlDbType.NVarChar);  // 棚番
                        SqlParameter paraAdditionalDivCd = sqlCommand.Parameters.Add("@ADDITIONALDIVCD", SqlDbType.Int);  // 追加区分
                        SqlParameter paraCorrectDivCD = sqlCommand.Parameters.Add("@CORRECTDIVCD", SqlDbType.Int);  // 訂正区分
                        SqlParameter paraAcptAnOdrStatus = sqlCommand.Parameters.Add("@ACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                        SqlParameter paraSalesSlipNum = sqlCommand.Parameters.Add("@SALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号
                        SqlParameter paraSalesRowNo = sqlCommand.Parameters.Add("@SALESROWNO", SqlDbType.Int);  // 売上行番号
                        SqlParameter paraCampaignCode = sqlCommand.Parameters.Add("@CAMPAIGNCODE", SqlDbType.Int);  // キャンペーンコード
                        SqlParameter paraStockDiv = sqlCommand.Parameters.Add("@STOCKDIV", SqlDbType.Int);  // 在庫区分
                        SqlParameter paraInqOrdDivCd = sqlCommand.Parameters.Add("@INQORDDIVCD", SqlDbType.Int);  // 問合せ・発注種別
                        SqlParameter paraDisplayOrder = sqlCommand.Parameters.Add("@DISPLAYORDER", SqlDbType.Int);  // 表示順位
                        SqlParameter paraGoodsMngNo = sqlCommand.Parameters.Add("@GOODSMNGNO", SqlDbType.Int);  // 商品管理番号
                        // 2010/05/26 Add >>>
                        SqlParameter paraCancelCndtinDiv = sqlCommand.Parameters.Add("@CANCELCNDTINDIV", SqlDbType.SmallInt);  // キャンセル状態区分
                        // 2010/05/26 Add <<<
                        // 2011/02/09 Add >>>
                        SqlParameter paraDtlTakeinDivCd = sqlCommand.Parameters.Add("@DTLTAKEINDIVCD", SqlDbType.Int);  // 明細取込区分
                        // 2011/02/09 Add <<<
                        //--- ADD 2011/05/20 --->>>
                        SqlParameter paraWarehouseCode = sqlCommand.Parameters.Add("@WAREHOUSECODE", SqlDbType.NChar);  // 倉庫コード
                        SqlParameter paraWarehouseName = sqlCommand.Parameters.Add("@WAREHOUSENAME", SqlDbType.NVarChar);  // 倉庫名称
                        SqlParameter paraWarehouseShelfNo = sqlCommand.Parameters.Add("@WAREHOUSESHELFNO", SqlDbType.NVarChar);  // 倉庫棚番
                        //--- ADD 2011/05/20 ---<<<
                        // -- ADD 2011/08/10   ------ >>>>>>
                        SqlParameter paraPmPrsntCount = sqlCommand.Parameters.Add("@PMPRSNTCOUNT", SqlDbType.NChar);  // PM現在庫数
                        SqlParameter paraSetPartsMkrCd = sqlCommand.Parameters.Add("@SETPARTSMKRCD", SqlDbType.NVarChar);  // セット部品メーカーコード
                        SqlParameter paraSetPartsNumber = sqlCommand.Parameters.Add("@SETPARTSNUMBER", SqlDbType.NChar);  // セット部品番号
                        SqlParameter paraSetPartsMainSubNo = sqlCommand.Parameters.Add("@SETPARTSMAINSUBNO", SqlDbType.NVarChar);  // セット部品親子番号
                        // -- ADD 2011/08/10   ------ <<<<<<
                        //--- ADD 2012/01/10 --->>>
                        SqlParameter paraGoodsSpecialNote = sqlCommand.Parameters.Add("@GOODSSPECIALNOTE", SqlDbType.NVarChar);  //商品規格・特記事項
                        //--- ADD 2012/01/10 ---<<<
                        //--- ADD 2012/04/12 --->>> 
                        SqlParameter paraPsMngNo = sqlCommand.Parameters.Add("@PSMNGNO", SqlDbType.Int);  // PS管理番号
                        //--- ADD 2012/04/12 ---<<<
                        // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                        SqlParameter paraAutoEstimatePartsCd = sqlCommand.Parameters.Add("@AUTOESTIMATEPARTSCD", SqlDbType.NVarChar);  //自動見積部品コード
                        // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraSalesTotalTaxInc = sqlCommand.Parameters.Add("@SALESTOTALTAXINC", SqlDbType.BigInt);  // 売上伝票合計（税込）
                        SqlParameter paraSalesTotalTaxExc = sqlCommand.Parameters.Add("@SALESTOTALTAXEXC", SqlDbType.BigInt);  // 売上伝票合計（税抜）
                        SqlParameter paraScmConsTaxLayMethod = sqlCommand.Parameters.Add("@SCMCONSTAXLAYMETHOD", SqlDbType.Int);  // SCM消費税転嫁方式
                        SqlParameter paraConsTaxRate = sqlCommand.Parameters.Add("@CONSTAXRATE", SqlDbType.Float);  // 消費税税率
                        SqlParameter paraScmFractionProcCd = sqlCommand.Parameters.Add("@SCMFRACTIONPROCCD", SqlDbType.Int);  // SCM端数処理区分
                        SqlParameter paraAccRecConsTax = sqlCommand.Parameters.Add("@ACCRECCONSTAX", SqlDbType.BigInt);  // 売掛消費税
                        SqlParameter paraPMSalesDate = sqlCommand.Parameters.Add("@PMSALESDATE", SqlDbType.Int);  // PM売上日
                        SqlParameter paraSuppSlpPrtTime = sqlCommand.Parameters.Add("@SUPPSLPPRTTIME", SqlDbType.Int);  // 仕入先伝票発行時刻
                        SqlParameter paraSalesMoneyTaxInc = sqlCommand.Parameters.Add("@SALESMONEYTAXINC", SqlDbType.BigInt);  // 売上金額（税込み）
                        SqlParameter paraSalesMoneyTaxExc = sqlCommand.Parameters.Add("@SALESMONEYTAXEXC", SqlDbType.BigInt);  // 売上金額（税抜き）
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraDataInputSystem = sqlCommand.Parameters.Add("@DATAINPUTSYSTEM", SqlDbType.Int);  // データ入力システム
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                        SqlParameter paraPmMainMngWarehouseCd = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSECD", SqlDbType.NVarChar);
                        SqlParameter paraPmMainMngWarehouseName = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSENAME", SqlDbType.NVarChar);
                        SqlParameter paraPmMainMngShelfNo = sqlCommand.Parameters.Add("@PMMAINMNGSHELFNO", SqlDbType.NVarChar);
                        SqlParameter paraPmMainMngPrsntCount = sqlCommand.Parameters.Add("@PMMAINMNGPRSNTCOUNT", SqlDbType.Float);
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                        SqlParameter paraPrmSetDtlNo2 = sqlCommand.Parameters.Add("@PRMSETDTLNO2", SqlDbType.Int);  // 優良設定詳細コード２
                        SqlParameter paraPrmSetDtlName2 = sqlCommand.Parameters.Add("@PRMSETDTLNAME2", SqlDbType.NVarChar);  // 優良設定詳細名称２
                        SqlParameter paraStockStatusDiv = sqlCommand.Parameters.Add("@STOCKSTATUSDIV", SqlDbType.SmallInt);  // 在庫状況区分
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                        // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                        SqlParameter paraRentDiv = sqlCommand.Parameters.Add("@RENTDIV", SqlDbType.SmallInt);  // 貸出区分            
                        SqlParameter paraMkrSuggestRtPric = sqlCommand.Parameters.Add("@MKRSUGGESTRTPRIC", SqlDbType.BigInt);  // メーカー希望小売価格
                        SqlParameter paraOpenPriceDiv = sqlCommand.Parameters.Add("@OPENPRICEDIV", SqlDbType.Int);  // オープン価格区分    
                        // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                        // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                        SqlParameter paraBgnGoodsDiv = sqlCommand.Parameters.Add("@BGNGOODSDIV", SqlDbType.SmallInt);  // お買得商品選択区分
                        // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                        SqlParameter paraModelPrtsAdptYm = sqlCommand.Parameters.Add("@MODELPRTSADPTYM", SqlDbType.Int);  // 型式別部品採用年月    
                        SqlParameter paraModelPrtsAblsYm = sqlCommand.Parameters.Add("@MODELPRTSABLSYM", SqlDbType.Int);  // 型式別部品廃止年月    
                        SqlParameter paraModelPrtsAdptFrameNo = sqlCommand.Parameters.Add("@MODELPRTSADPTFRAMENO", SqlDbType.Int);  // 型式別部品採用車台番号    
                        SqlParameter paraModelPrtsAblsFrameNo = sqlCommand.Parameters.Add("@MODELPRTSABLSFRAMENO", SqlDbType.Int);  // 型式別部品廃止車台番号    
                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraAnsDeliDateDiv = sqlCommand.Parameters.Add("@ANSDELIDATEDIV", SqlDbType.SmallInt);  // 回答納期区分
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraGoodsSpecialNtForFac = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORFAC", SqlDbType.NVarChar);  // 商品規格・特記事項(工場向け)
                        SqlParameter paraGoodsSpecialNtForCOw = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORCOW", SqlDbType.NVarChar);  // 商品規格・特記事項(カーオーナー向け)
                        SqlParameter paraPrmSetDtlName2ForFac = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORFAC", SqlDbType.NVarChar);  // 優良設定詳細名称２(工場向け)
                        SqlParameter paraPrmSetDtlName2ForCOw = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORCOW", SqlDbType.NVarChar);  // 優良設定詳細名称２(カーオーナー向け)
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraInqBlUtyPtThCd = sqlCommand.Parameters.Add("@INQBLUTYPTTHCD", SqlDbType.NChar);  // 問発BL統一部品コード(スリーコード版)
                        SqlParameter paraInqBlUtyPtSbCd = sqlCommand.Parameters.Add("@INQBLUTYPTSBCD", SqlDbType.Int);  // 問発BL統一部品サブコード
                        SqlParameter paraAnsBlUtyPtThCd = sqlCommand.Parameters.Add("@ANSBLUTYPTTHCD", SqlDbType.NChar);  // 回答BL統一部品コード(スリーコード版)
                        SqlParameter paraAnsBlUtyPtSbCd = sqlCommand.Parameters.Add("@ANSBLUTYPTSBCD", SqlDbType.Int);  // 回答BL統一部品サブコード
                        SqlParameter paraAnsBLGoodsCode = sqlCommand.Parameters.Add("@ANSBLGOODSCODE", SqlDbType.Int);  // 回答BL商品コード
                        SqlParameter paraAnsBLGoodsDrCode = sqlCommand.Parameters.Add("@ANSBLGOODSDRCODE", SqlDbType.Int);  // 回答BL商品コード枝番
                        // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        //Parameterオブジェクトへ値設定
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtlAsWork.CreateDateTime);  // 作成日時
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtlAsWork.UpdateDateTime);  // 更新日時
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.EnterpriseCode);  // 企業コード
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtlAsWork.FileHeaderGuid);  // GUID
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.UpdEmployeeCode);  // 更新従業員コード
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.UpdAssemblyId1);  // 更新アセンブリID1
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.UpdAssemblyId2);  // 更新アセンブリID2
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.LogicalDeleteCode);  // 論理削除区分
                        paraInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOriginalEpCd);  // 問合せ元企業コード
                        paraInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        paraInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOtherEpCd);  // 問合せ先企業コード
                        paraInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOtherSecCd);  // 問合せ先拠点コード
                        paraInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.InquiryNumber);  // 問合せ番号
                        if (sCMAcOdrDtlAsWork.UpdateDate == DateTime.MinValue)
                        {
                            paraUpdateDate.Value = 0;  // 更新年月日
                        }
                        else
                        {
                            paraUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlAsWork.UpdateDate);  // 更新年月日
                        }
                        paraUpdateTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.UpdateTime);  // 更新時間
                        paraInqRowNumber.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqRowNumber);  // 問合せ行番号
                        paraInqRowNumDerivedNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqRowNumDerivedNo);  // 問合せ行番号枝番
                        paraInqOrgDtlDiscGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtlAsWork.InqOrgDtlDiscGuid);  // 問合せ元明細識別GUID
                        paraInqOthDtlDiscGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtlAsWork.InqOthDtlDiscGuid);  // 問合せ先明細識別GUID
                        paraGoodsDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.GoodsDivCd);  // 商品種別
                        paraRecyclePrtKindCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.RecyclePrtKindCode);  // リサイクル部品種別
                        paraRecyclePrtKindName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.RecyclePrtKindName);  // リサイクル部品種別名称
                        paraDeliveredGoodsDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.DeliveredGoodsDiv);  // 納品区分
                        paraHandleDivCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.HandleDivCode);  // 取扱区分
                        paraGoodsShape.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.GoodsShape);  // 商品形態
                        paraDelivrdGdsConfCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.DelivrdGdsConfCd);  // 納品確認区分
                        paraDeliGdsCmpltDueDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlAsWork.DeliGdsCmpltDueDate);  // 納品完了予定日
                        paraAnswerDeliveryDate.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AnswerDeliveryDate);  // 回答納期
                        paraBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.BLGoodsCode);  // BL商品コード
                        paraBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.BLGoodsDrCode);  // BL商品コード枝番
                        paraInqGoodsName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqGoodsName);  // 問発商品名
                        paraAnsGoodsName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AnsGoodsName);  // 回答商品名
                        paraSalesOrderCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.SalesOrderCount);  // 発注数
                        paraDeliveredGoodsCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.DeliveredGoodsCount);  // 納品数
                        paraGoodsNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsNo);  // 商品番号
                        paraGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.GoodsMakerCd);  // 商品メーカーコード
                        paraGoodsMakerNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsMakerNm);  // 商品メーカー名称
                        paraPureGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.PureGoodsMakerCd);  // 純正商品メーカーコード
                        paraInqPureGoodsNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqPureGoodsNo);  // 問発純正商品番号
                        paraAnsPureGoodsNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AnsPureGoodsNo);  // 回答純正商品番号
                        paraListPrice.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.ListPrice);  // 定価
                        paraUnitPrice.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.UnitPrice);  // 単価
                        paraGoodsAddInfo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsAddInfo);  // 商品補足情報
                        paraRoughRrofit.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.RoughRrofit);  // 粗利額
                        paraRoughRate.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.RoughRate);  // 粗利率
                        paraAnswerLimitDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlAsWork.AnswerLimitDate);  // 回答期限
                        paraCommentDtl.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.CommentDtl);  // 備考(明細)
                        paraAppendingFileDtl.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDtlAsWork.AppendingFileDtl);  // 添付ファイル(明細)
                        paraAppendingFileNmDtl.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AppendingFileNmDtl);  // 添付ファイル名(明細)
                        paraShelfNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.ShelfNo);  // 棚番
                        paraAdditionalDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AdditionalDivCd);  // 追加区分
                        paraCorrectDivCD.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.CorrectDivCD);  // 訂正区分
                        paraAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AcptAnOdrStatus);  // 受注ステータス
                        paraSalesSlipNum.Value = sCMAcOdrDtlAsWork.SalesSlipNum;  // 売上伝票番号
                        paraSalesRowNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SalesRowNo);  // 売上行番号
                        paraCampaignCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.CampaignCode);  // キャンペーンコード
                        paraStockDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.StockDiv);  // 在庫区分
                        paraInqOrdDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqOrdDivCd);  // 問合せ・発注種別
                        paraDisplayOrder.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.DisplayOrder);  // 表示順位
                        paraGoodsMngNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.GoodsMngNo);  // 商品管理番号
                        // 2010/05/26 Add >>>
                        paraCancelCndtinDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlAsWork.CancelCndtinDiv);  // キャンセル状態区分
                        // 2010/05/26 Add <<<
                        // 2011/02/09 Add >>>
                        paraDtlTakeinDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.DtlTakeinDivCd);  // 明細取込区分
                        // 2011/02/09 Add <<<
                        //--- ADD 2011/05/20 --->>>
                        paraWarehouseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.WarehouseCode);  // 倉庫コード
                        paraWarehouseName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.WarehouseName);  // 倉庫名称
                        paraWarehouseShelfNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.WarehouseShelfNo);  // 倉庫棚番
                        //--- ADD 2011/05/20 ---<<<
                        // -- ADD 2011/08/10   ------ >>>>>>
                        paraPmPrsntCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.PmPrsntCount);  // PM現在庫数
                        paraSetPartsMkrCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SetPartsMkrCd);  // セット部品メーカーコード
                        paraSetPartsNumber.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.SetPartsNumber);  // セット部品番号
                        paraSetPartsMainSubNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SetPartsMainSubNo);  // セット部品親子番号
                        // -- ADD 2011/08/10   ------ <<<<<<
                        //--- ADD 2012/01/10 --->>>
                        paraGoodsSpecialNote.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsSpecialNote);  //商品規格・特記事項
                        //--- ADD 2012/01/10 ---<<<
                        //--- ADD 2012/04/12 --->>> 
                        paraPsMngNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.PSMngNo);  // PS管理番号
                        //--- ADD 2012/04/12 ---<<<
                        // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                        paraAutoEstimatePartsCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AutoEstimatePartsCd);  // 自動見積部品コード
                        // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraSalesTotalTaxInc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.SalesTotalTaxInc);  // 売上伝票合計（税込）
                        paraSalesTotalTaxExc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.SalesTotalTaxExc);  // 売上伝票合計（税抜）
                        paraScmConsTaxLayMethod.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ScmConsTaxLayMethod);  // SCM消費税転嫁方式
                        paraConsTaxRate.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.ConsTaxRate);  // 消費税税率
                        paraScmFractionProcCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ScmFractionProcCd);  // SCM端数処理区分
                        paraAccRecConsTax.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.AccRecConsTax);  // 売掛消費税
                        paraPMSalesDate.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.PMSalesDate);  // PM売上日
                        paraSuppSlpPrtTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SuppSlpPrtTime);  // 仕入先伝票発行時刻
                        paraSalesMoneyTaxInc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.SalesMoneyTaxInc);  // 売上金額（税込み）
                        paraSalesMoneyTaxExc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.SalesMoneyTaxExc);  // 売上金額（税抜き）
                        // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraDataInputSystem.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.DataInputSystem);  // データ入力システム
                        // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                        paraPmMainMngWarehouseCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PmMainMngWarehouseCd);
                        paraPmMainMngWarehouseName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PmMainMngWarehouseName);
                        paraPmMainMngShelfNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PmMainMngShelfNo);
                        paraPmMainMngPrsntCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.PmMainMngPrsntCount);
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                        paraPrmSetDtlNo2.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.PrmSetDtlNo2); // 優良設定詳細コード２
                        paraPrmSetDtlName2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PrmSetDtlName2); // 優良設定詳細名称２
                        paraStockStatusDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlAsWork.StockStatusDiv); // 在庫状況区分
                        // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<

                        // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                        paraRentDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlAsWork.RentDiv); // 貸出区分            
                        paraMkrSuggestRtPric.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.MkrSuggestRtPric); // メーカー希望小売価格
                        paraOpenPriceDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.OpenPriceDiv); // オープン価格区分    
                        // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<

                        // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                        paraBgnGoodsDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlAsWork.BgnGoodsDiv); // お買得商品選択区分
                        // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<

                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                        paraModelPrtsAdptYm.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ModelPrtsAdptYm); // 型式別部品採用年月   
                        paraModelPrtsAblsYm.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ModelPrtsAblsYm); // 型式別部品廃止年月   
                        paraModelPrtsAdptFrameNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ModelPrtsAdptFrameNo); // 型式別部品採用車台番号   
                        paraModelPrtsAblsFrameNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ModelPrtsAblsFrameNo); // 型式別部品廃止車台番号   
                        // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<

                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraAnsDeliDateDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlAsWork.AnsDeliDateDiv); // 回答納期区分
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraGoodsSpecialNtForFac.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsSpecialNtForFac); // 商品規格・特記事項(工場向け)
                        paraGoodsSpecialNtForCOw.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsSpecialNtForCOw); // 商品規格・特記事項(カーオーナー向け)
                        paraPrmSetDtlName2ForFac.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PrmSetDtlName2ForFac); // 優良設定詳細名称２(工場向け)
                        paraPrmSetDtlName2ForCOw.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PrmSetDtlName2ForCOw); // 優良設定詳細名称２(カーオーナー向け)
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraInqBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqBlUtyPtThCd);  // 問発BL統一部品コード(スリーコード版)
                        paraInqBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqBlUtyPtSbCd);  // 問発BL統一部品サブコード
                        paraAnsBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AnsBlUtyPtThCd);  // 回答BL統一部品コード(スリーコード版)
                        paraAnsBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AnsBlUtyPtSbCd);  // 回答BL統一部品サブコード
                        paraAnsBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AnsBLGoodsCode);  // 回答BL商品コード
                        paraAnsBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AnsBLGoodsDrCode);  // 回答BL商品コード枝番
                        // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        sqlCommand.ExecuteNonQuery();
                        al.Add(sCMAcOdrDtlAsWork);
                    }
                }

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            scmAcOdrDtlAsWorkList = al;

            return status;
        }

        // -- ADD 2011/08/10   ------ >>>>>>
        /// <summary>
        /// SCM受注セット部品データ情報を追加・更新します。
        /// </summary>
        /// <param name="scmAcOdSetDtAsWorkList">追加するSCM受注セット部品データ情報を格納する ArrayList</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <param name="dbCommandTimeout">コマンドタイムアウト</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : scmAcOdSetDtAsWorkList に格納されているSCM受注セット部品データ情報を追加します。</br>
        /// <br>Programmer : 高峰</br>
        /// <br>Date       : 2011/08/10</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        /// <br>Update Note: 2020/08/28 田建委</br>
        /// <br>管理番号   : 11600006-00</br>
        /// <br>             PMKOBETSU-4076 タイムアウト設定</br> 
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
        //private int InsertSCMAcOdSetDtAsWorkProc(ref ArrayList scmAcOdSetDtAsWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        private int InsertSCMAcOdSetDtAsWorkProc(ref ArrayList scmAcOdSetDtAsWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction, int dbCommandTimeout)
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlCommand sqlCommand = null;

            ArrayList al = new ArrayList();
            try
            {
                if (scmAcOdSetDtAsWorkList != null)
                {
                    string sqlText = string.Empty;
                    sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);

                    # region [INSERT文]
                    sqlText += "  INSERT INTO SCMACODSETDTRF  (" + Environment.NewLine;
                    sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                    sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                    sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                    sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                    sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                    sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                    sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                    sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                    sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                    sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                    sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                    sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                    sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                    sqlText += " ,SETPARTSMKRCDRF" + Environment.NewLine;
                    sqlText += " ,SETPARTSNUMBERRF" + Environment.NewLine;
                    sqlText += " ,SETPARTSMAINSUBNORF" + Environment.NewLine;
                    sqlText += " ,GOODSDIVCDRF" + Environment.NewLine;
                    sqlText += " ,RECYCLEPRTKINDCODERF" + Environment.NewLine;
                    sqlText += " ,RECYCLEPRTKINDNAMERF" + Environment.NewLine;
                    sqlText += " ,DELIVEREDGOODSDIVRF" + Environment.NewLine;
                    sqlText += " ,HANDLEDIVCODERF" + Environment.NewLine;
                    sqlText += " ,GOODSSHAPERF" + Environment.NewLine;
                    sqlText += " ,DELIVRDGDSCONFCDRF" + Environment.NewLine;
                    sqlText += " ,DELIGDSCMPLTDUEDATERF" + Environment.NewLine;
                    sqlText += " ,ANSWERDELIVERYDATERF" + Environment.NewLine;
                    sqlText += " ,BLGOODSCODERF" + Environment.NewLine;
                    sqlText += " ,BLGOODSDRCODERF" + Environment.NewLine;
                    sqlText += " ,INQGOODSNAMERF" + Environment.NewLine;
                    sqlText += " ,ANSGOODSNAMERF" + Environment.NewLine;
                    sqlText += " ,SALESORDERCOUNTRF" + Environment.NewLine;
                    sqlText += " ,DELIVEREDGOODSCOUNTRF" + Environment.NewLine;
                    sqlText += " ,GOODSNORF" + Environment.NewLine;
                    sqlText += " ,GOODSMAKERCDRF" + Environment.NewLine;
                    sqlText += " ,GOODSMAKERNMRF" + Environment.NewLine;
                    sqlText += " ,PUREGOODSMAKERCDRF" + Environment.NewLine;
                    sqlText += " ,INQPUREGOODSNORF" + Environment.NewLine;
                    sqlText += " ,ANSPUREGOODSNORF" + Environment.NewLine;
                    sqlText += " ,LISTPRICERF" + Environment.NewLine;
                    sqlText += " ,UNITPRICERF" + Environment.NewLine;
                    sqlText += " ,GOODSADDINFORF" + Environment.NewLine;
                    sqlText += " ,ROUGHRROFITRF" + Environment.NewLine;
                    sqlText += " ,ROUGHRATERF" + Environment.NewLine;
                    sqlText += " ,ANSWERLIMITDATERF" + Environment.NewLine;
                    sqlText += " ,COMMENTDTLRF" + Environment.NewLine;
                    sqlText += " ,SHELFNORF" + Environment.NewLine;
                    sqlText += " ,PMACPTANODRSTATUSRF" + Environment.NewLine;
                    sqlText += " ,PMSALESSLIPNUMRF" + Environment.NewLine;
                    sqlText += " ,PMSALESROWNORF" + Environment.NewLine;
                    sqlText += " ,PMWAREHOUSECDRF" + Environment.NewLine;
                    sqlText += " ,PMWAREHOUSENAMERF" + Environment.NewLine;
                    sqlText += " ,PMSHELFNORF" + Environment.NewLine;
                    sqlText += " ,PMPRSNTCOUNTRF" + Environment.NewLine;
                    // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                    sqlText += " ,PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;
                    sqlText += " ,PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;
                    sqlText += " ,PMMAINMNGSHELFNORF" + Environment.NewLine;
                    sqlText += " ,PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;
                    // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                    // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                    sqlText += " ,GOODSSPCLINSTRUCTIONRF" + Environment.NewLine;
                    // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                    // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------->>>>>
                    sqlText += " ,MKRSUGGESTRTPRICRF" + Environment.NewLine;
                    sqlText += " ,OPENPRICEDIVRF" + Environment.NewLine;
                    // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------<<<<<
                    // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,ANSDELIDATEDIVRF" + Environment.NewLine;     // 回答納期区分
                    // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,GOODSSPECIALNTFORFACRF" + Environment.NewLine;     // 商品規格・特記事項(工場向け)
                    sqlText += " ,GOODSSPECIALNTFORCOWRF" + Environment.NewLine;     // 商品規格・特記事項(カーオーナー向け)
                    sqlText += " ,PRMSETDTLNAME2FORFACRF" + Environment.NewLine;     // 優良設定詳細名称２(工場向け)
                    sqlText += " ,PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;     // 優良設定詳細名称２(カーオーナー向け)
                    // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                    sqlText += " ,PRMSETDTLNO2RF" + Environment.NewLine;     // 優良設定詳細コード２
                    sqlText += " ,PRMSETDTLNAME2RF" + Environment.NewLine;     // 優良設定詳細名称２
                    sqlText += " ,STOCKSTATUSDIVRF" + Environment.NewLine;     // 在庫状況区分
                    // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
                    // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,INQBLUTYPTTHCDRF" + Environment.NewLine;
                    sqlText += " ,INQBLUTYPTSBCDRF" + Environment.NewLine;
                    sqlText += " ,ANSBLUTYPTTHCDRF" + Environment.NewLine;
                    sqlText += " ,ANSBLUTYPTSBCDRF" + Environment.NewLine;
                    sqlText += " ,ANSBLGOODSCODERF" + Environment.NewLine;
                    sqlText += " ,ANSBLGOODSDRCODERF" + Environment.NewLine;
                    // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                    sqlText += " )" + Environment.NewLine;
                    sqlText += "  VALUES" + Environment.NewLine;
                    sqlText += "  (@CREATEDATETIME" + Environment.NewLine;
                    sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                    sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                    sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                    sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                    sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                    sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                    sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                    sqlText += " ,@INQOTHEREPCD" + Environment.NewLine;
                    sqlText += " ,@INQORIGINALSECCD" + Environment.NewLine;
                    sqlText += " ,@INQOTHEREPCD" + Environment.NewLine;
                    sqlText += " ,@INQOTHERSECCD" + Environment.NewLine;
                    sqlText += " ,@INQUIRYNUMBER" + Environment.NewLine;
                    sqlText += " ,@SETPARTSMKRCD" + Environment.NewLine;
                    sqlText += " ,@SETPARTSNUMBER" + Environment.NewLine;
                    sqlText += " ,@SETPARTSMAINSUBNO" + Environment.NewLine;
                    sqlText += " ,@GOODSDIVCD" + Environment.NewLine;
                    sqlText += " ,@RECYCLEPRTKINDCODE" + Environment.NewLine;
                    sqlText += " ,@RECYCLEPRTKINDNAME" + Environment.NewLine;
                    sqlText += " ,@DELIVEREDGOODSDIV" + Environment.NewLine;
                    sqlText += " ,@HANDLEDIVCODE" + Environment.NewLine;
                    sqlText += " ,@GOODSSHAPE" + Environment.NewLine;
                    sqlText += " ,@DELIVRDGDSCONFCD" + Environment.NewLine;
                    sqlText += " ,@DELIGDSCMPLTDUEDATE" + Environment.NewLine;
                    sqlText += " ,@ANSWERDELIVERYDATE" + Environment.NewLine;
                    sqlText += " ,@BLGOODSCODE" + Environment.NewLine;
                    sqlText += " ,@BLGOODSDRCODE" + Environment.NewLine;
                    sqlText += " ,@INQGOODSNAME" + Environment.NewLine;
                    sqlText += " ,@ANSGOODSNAME" + Environment.NewLine;
                    sqlText += " ,@SALESORDERCOUNT" + Environment.NewLine;
                    sqlText += " ,@DELIVEREDGOODSCOUNT" + Environment.NewLine;
                    sqlText += " ,@GOODSNO" + Environment.NewLine;
                    sqlText += " ,@GOODSMAKERCD" + Environment.NewLine;
                    sqlText += " ,@GOODSMAKERNM" + Environment.NewLine;
                    sqlText += " ,@PUREGOODSMAKERCD" + Environment.NewLine;
                    sqlText += " ,@INQPUREGOODSNO" + Environment.NewLine;
                    sqlText += " ,@ANSPUREGOODSNO" + Environment.NewLine;
                    sqlText += " ,@LISTPRICE" + Environment.NewLine;
                    sqlText += " ,@UNITPRICE" + Environment.NewLine;
                    sqlText += " ,@GOODSADDINFO" + Environment.NewLine;
                    sqlText += " ,@ROUGHRROFIT" + Environment.NewLine;
                    sqlText += " ,@ROUGHRATE" + Environment.NewLine;
                    sqlText += " ,@ANSWERLIMITDATE" + Environment.NewLine;
                    sqlText += " ,@COMMENTDTL" + Environment.NewLine;
                    sqlText += " ,@SHELFNO" + Environment.NewLine;
                    sqlText += " ,@PMACPTANODRSTATUS" + Environment.NewLine;
                    sqlText += " ,@PMSALESSLIPNUM" + Environment.NewLine;
                    sqlText += " ,@PMSALESROWNO" + Environment.NewLine;
                    sqlText += " ,@PMWAREHOUSECD" + Environment.NewLine;
                    sqlText += " ,@PMWAREHOUSENAME" + Environment.NewLine;
                    sqlText += " ,@PMSHELFNO" + Environment.NewLine;
                    sqlText += " ,@PMPRSNTCOUNT" + Environment.NewLine;
                    // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                    sqlText += " ,@PMMAINMNGWAREHOUSECD" + Environment.NewLine;
                    sqlText += " ,@PMMAINMNGWAREHOUSENAME" + Environment.NewLine;
                    sqlText += " ,@PMMAINMNGSHELFNO" + Environment.NewLine;
                    sqlText += " ,@PMMAINMNGPRSNTCOUNT" + Environment.NewLine;
                    // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                    // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                    sqlText += " ,@GOODSSPCLINSTRUCTION" + Environment.NewLine;
                    // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                    // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------->>>>>
                    sqlText += " ,@MKRSUGGESTRTPRIC" + Environment.NewLine;
                    sqlText += " ,@OPENPRICEDIV" + Environment.NewLine;
                    // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------<<<<<
                    // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,@ANSDELIDATEDIV" + Environment.NewLine;
                    // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,@GOODSSPECIALNTFORFAC" + Environment.NewLine;
                    sqlText += " ,@GOODSSPECIALNTFORCOW" + Environment.NewLine;
                    sqlText += " ,@PRMSETDTLNAME2FORFAC" + Environment.NewLine;
                    sqlText += " ,@PRMSETDTLNAME2FORCOW" + Environment.NewLine;
                    // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                    sqlText += " ,@PRMSETDTLNO2" + Environment.NewLine;
                    sqlText += " ,@PRMSETDTLNAME2" + Environment.NewLine;
                    sqlText += " ,@STOCKSTATUSDIV" + Environment.NewLine;
                    // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
                    // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    sqlText += " ,@INQBLUTYPTTHCD" + Environment.NewLine;
                    sqlText += " ,@INQBLUTYPTSBCD" + Environment.NewLine;
                    sqlText += " ,@ANSBLUTYPTTHCD" + Environment.NewLine;
                    sqlText += " ,@ANSBLUTYPTSBCD" + Environment.NewLine;
                    sqlText += " ,@ANSBLGOODSCODE" + Environment.NewLine;
                    sqlText += " ,@ANSBLGOODSDRCODE" + Environment.NewLine;
                    // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    sqlText += " )" + Environment.NewLine;
                    sqlCommand.CommandText = sqlText;
                    # endregion

                    for (int i = 0; i < scmAcOdSetDtAsWorkList.Count; i++)
                    {
                        SCMAcOdSetDtWork scmAcOdSetDtWork = scmAcOdSetDtAsWorkList[i] as SCMAcOdSetDtWork;
                        sqlCommand.Parameters.Clear();

                        // 登録ヘッダ情報を設定
                        object obj = (object)this;
                        IFileHeader flhd = (IFileHeader)scmAcOdSetDtWork;
                        FileHeader fileHeader = new FileHeader(obj);
                        fileHeader.SetInsertHeader(ref flhd, obj);

                        //Prameterオブジェクトの作成
                        SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                        SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                        SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);
                        SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);
                        SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);
                        SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);
                        SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                        SqlParameter paraInqOriginalEpCd = sqlCommand.Parameters.Add("@INQORIGINALEPCD", SqlDbType.NChar);
                        SqlParameter paraInqOriginalSecCd = sqlCommand.Parameters.Add("@INQORIGINALSECCD", SqlDbType.NChar);
                        SqlParameter paraInqOtherEpCd = sqlCommand.Parameters.Add("@INQOTHEREPCD", SqlDbType.NChar);
                        SqlParameter paraInqOtherSecCd = sqlCommand.Parameters.Add("@INQOTHERSECCD", SqlDbType.NChar);
                        SqlParameter paraInquiryNumber = sqlCommand.Parameters.Add("@INQUIRYNUMBER", SqlDbType.BigInt);
                        SqlParameter paraSetPartsMkrCd = sqlCommand.Parameters.Add("@SETPARTSMKRCD", SqlDbType.Int);
                        SqlParameter paraSetPartsNumber = sqlCommand.Parameters.Add("@SETPARTSNUMBER", SqlDbType.NVarChar);
                        SqlParameter paraSetPartsMainSubNo = sqlCommand.Parameters.Add("@SETPARTSMAINSUBNO", SqlDbType.Int);
                        SqlParameter paraGoodsDivCd = sqlCommand.Parameters.Add("@GOODSDIVCD", SqlDbType.Int);
                        SqlParameter paraRecyclePrtKindCode = sqlCommand.Parameters.Add("@RECYCLEPRTKINDCODE", SqlDbType.Int);
                        SqlParameter paraRecyclePrtKindName = sqlCommand.Parameters.Add("@RECYCLEPRTKINDNAME", SqlDbType.NVarChar);
                        SqlParameter paraDeliveredGoodsDiv = sqlCommand.Parameters.Add("@DELIVEREDGOODSDIV", SqlDbType.Int);
                        SqlParameter paraHandleDivCode = sqlCommand.Parameters.Add("@HANDLEDIVCODE", SqlDbType.Int);
                        SqlParameter paraGoodsShape = sqlCommand.Parameters.Add("@GOODSSHAPE", SqlDbType.Int);
                        SqlParameter paraDelivrdGdsConfCd = sqlCommand.Parameters.Add("@DELIVRDGDSCONFCD", SqlDbType.Int);
                        SqlParameter paraDeliGdsCmpltDueDate = sqlCommand.Parameters.Add("@DELIGDSCMPLTDUEDATE", SqlDbType.Int);
                        SqlParameter paraAnswerDeliveryDate = sqlCommand.Parameters.Add("@ANSWERDELIVERYDATE", SqlDbType.NVarChar);
                        SqlParameter paraBLGoodsCode = sqlCommand.Parameters.Add("@BLGOODSCODE", SqlDbType.Int);
                        SqlParameter paraBLGoodsDrCode = sqlCommand.Parameters.Add("@BLGOODSDRCODE", SqlDbType.Int);
                        SqlParameter paraInqGoodsName = sqlCommand.Parameters.Add("@INQGOODSNAME", SqlDbType.NVarChar);
                        SqlParameter paraAnsGoodsName = sqlCommand.Parameters.Add("@ANSGOODSNAME", SqlDbType.NVarChar);
                        SqlParameter paraSalesOrderCount = sqlCommand.Parameters.Add("@SALESORDERCOUNT", SqlDbType.Float);
                        SqlParameter paraDeliveredGoodsCount = sqlCommand.Parameters.Add("@DELIVEREDGOODSCOUNT", SqlDbType.Float);
                        SqlParameter paraGoodsNo = sqlCommand.Parameters.Add("@GOODSNO", SqlDbType.NVarChar);
                        SqlParameter paraGoodsMakerCd = sqlCommand.Parameters.Add("@GOODSMAKERCD", SqlDbType.Int);
                        SqlParameter paraGoodsMakerNm = sqlCommand.Parameters.Add("@GOODSMAKERNM", SqlDbType.NVarChar);
                        SqlParameter paraPureGoodsMakerCd = sqlCommand.Parameters.Add("@PUREGOODSMAKERCD", SqlDbType.Int);
                        SqlParameter paraInqPureGoodsNo = sqlCommand.Parameters.Add("@INQPUREGOODSNO", SqlDbType.NVarChar);
                        SqlParameter paraAnsPureGoodsNo = sqlCommand.Parameters.Add("@ANSPUREGOODSNO", SqlDbType.NVarChar);
                        SqlParameter paraListPrice = sqlCommand.Parameters.Add("@LISTPRICE", SqlDbType.BigInt);
                        SqlParameter paraUnitPrice = sqlCommand.Parameters.Add("@UNITPRICE", SqlDbType.BigInt);
                        SqlParameter paraGoodsAddInfo = sqlCommand.Parameters.Add("@GOODSADDINFO", SqlDbType.NVarChar);
                        SqlParameter paraRoughRrofit = sqlCommand.Parameters.Add("@ROUGHRROFIT", SqlDbType.BigInt);
                        SqlParameter paraRoughRate = sqlCommand.Parameters.Add("@ROUGHRATE", SqlDbType.Float);
                        SqlParameter paraAnswerLimitDate = sqlCommand.Parameters.Add("@ANSWERLIMITDATE", SqlDbType.Int);
                        SqlParameter paraCommentDtl = sqlCommand.Parameters.Add("@COMMENTDTL", SqlDbType.NVarChar);
                        SqlParameter paraShelfNo = sqlCommand.Parameters.Add("@SHELFNO", SqlDbType.NVarChar);
                        SqlParameter paraPMAcptAnOdrStatus = sqlCommand.Parameters.Add("@PMACPTANODRSTATUS", SqlDbType.Int);
                        SqlParameter paraPMSalesSlipNum = sqlCommand.Parameters.Add("@PMSALESSLIPNUM", SqlDbType.Int);
                        SqlParameter paraPMSalesRowNo = sqlCommand.Parameters.Add("@PMSALESROWNO", SqlDbType.Int);
                        SqlParameter paraPmWarehouseCd = sqlCommand.Parameters.Add("@PMWAREHOUSECD", SqlDbType.NVarChar);
                        SqlParameter paraPmWarehouseName = sqlCommand.Parameters.Add("@PMWAREHOUSENAME", SqlDbType.NVarChar);
                        SqlParameter paraPmShelfNo = sqlCommand.Parameters.Add("@PMSHELFNO", SqlDbType.NVarChar);
                        SqlParameter paraPmPrsntCount = sqlCommand.Parameters.Add("@PMPRSNTCOUNT", SqlDbType.Float);
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                        SqlParameter paraPmMainMngWarehouseCd = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSECD", SqlDbType.NVarChar);
                        SqlParameter paraPmMainMngWarehouseName = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSENAME", SqlDbType.NVarChar);
                        SqlParameter paraPmMainMngShelfNo = sqlCommand.Parameters.Add("@PMMAINMNGSHELFNO", SqlDbType.NVarChar);
                        SqlParameter paraPmMainMngPrsntCount = sqlCommand.Parameters.Add("@PMMAINMNGPRSNTCOUNT", SqlDbType.Float);
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                        // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                        SqlParameter paraGoodsSpclInstruction = sqlCommand.Parameters.Add("@GOODSSPCLINSTRUCTION", SqlDbType.NVarChar);
                        // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                        // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------->>>>>
                        SqlParameter paraMkrSuggestRtPric = sqlCommand.Parameters.Add("@MKRSUGGESTRTPRIC", SqlDbType.BigInt);
                        SqlParameter paraOpenPriceDiv = sqlCommand.Parameters.Add("@OPENPRICEDIV", SqlDbType.Int);
                        // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------<<<<<
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraAnsDeliDateDiv = sqlCommand.Parameters.Add("@ANSDELIDATEDIV", SqlDbType.SmallInt);  // 回答納期区分
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraGoodsSpecialNtForFac = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORFAC", SqlDbType.NVarChar);  // 商品規格・特記事項(工場向け)
                        SqlParameter paraGoodsSpecialNtForCOw = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORCOW", SqlDbType.NVarChar);  // 商品規格・特記事項(カーオーナー向け)
                        SqlParameter paraPrmSetDtlName2ForFac = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORFAC", SqlDbType.NVarChar);  // 優良設定詳細名称２(工場向け)
                        SqlParameter paraPrmSetDtlName2ForCOw = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORCOW", SqlDbType.NVarChar);  // 優良設定詳細名称２(カーオーナー向け)
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                        SqlParameter paraPrmSetDtlNo2 = sqlCommand.Parameters.Add("@PRMSETDTLNO2", SqlDbType.Int);  // 優良設定詳細コード２
                        SqlParameter paraPrmSetDtlName2 = sqlCommand.Parameters.Add("@PRMSETDTLNAME2", SqlDbType.NVarChar);  // 優良設定詳細名称２
                        SqlParameter paraStockStatusDiv = sqlCommand.Parameters.Add("@STOCKSTATUSDIV", SqlDbType.SmallInt);  // 在庫状況区分
                        // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
                        // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraInqBlUtyPtThCd = sqlCommand.Parameters.Add("@INQBLUTYPTTHCD", SqlDbType.NChar);  // 問発BL統一部品コード(スリーコード版)
                        SqlParameter paraInqBlUtyPtSbCd = sqlCommand.Parameters.Add("@INQBLUTYPTSBCD", SqlDbType.Int);  // 問発BL統一部品サブコード
                        SqlParameter paraAnsBlUtyPtThCd = sqlCommand.Parameters.Add("@ANSBLUTYPTTHCD", SqlDbType.NChar);  // 回答BL統一部品コード(スリーコード版)
                        SqlParameter paraAnsBlUtyPtSbCd = sqlCommand.Parameters.Add("@ANSBLUTYPTSBCD", SqlDbType.Int);  // 回答BL統一部品サブコード
                        SqlParameter paraAnsBLGoodsCode = sqlCommand.Parameters.Add("@ANSBLGOODSCODE", SqlDbType.Int);  // 回答BL商品コード
                        SqlParameter paraAnsBLGoodsDrCode = sqlCommand.Parameters.Add("@ANSBLGOODSDRCODE", SqlDbType.Int);  // 回答BL商品コード枝番
                        // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        //Parameterオブジェクトへ値設定
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(scmAcOdSetDtWork.CreateDateTime);
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(scmAcOdSetDtWork.UpdateDateTime);
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.EnterpriseCode);
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(scmAcOdSetDtWork.FileHeaderGuid);
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.UpdEmployeeCode);
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.UpdAssemblyId1);
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.UpdAssemblyId2);
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.LogicalDeleteCode);
                        paraInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOriginalEpCd);
                        paraInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOriginalSecCd);
                        paraInqOtherEpCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOtherEpCd);
                        paraInqOtherSecCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOtherSecCd);
                        paraInquiryNumber.Value = SqlDataMediator.SqlSetInt64(scmAcOdSetDtWork.InquiryNumber);
                        paraSetPartsMkrCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.SetPartsMkrCd);
                        paraSetPartsNumber.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.SetPartsNumber);
                        paraSetPartsMainSubNo.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.SetPartsMainSubNo);
                        paraGoodsDivCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.GoodsDivCd);
                        paraRecyclePrtKindCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.RecyclePrtKindCode);
                        paraRecyclePrtKindName.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.RecyclePrtKindName);
                        paraDeliveredGoodsDiv.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.DeliveredGoodsDiv);
                        paraHandleDivCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.HandleDivCode);
                        paraGoodsShape.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.GoodsShape);
                        paraDelivrdGdsConfCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.DelivrdGdsConfCd);
                        paraDeliGdsCmpltDueDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(scmAcOdSetDtWork.DeliGdsCmpltDueDate);
                        paraAnswerDeliveryDate.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.AnswerDeliveryDate);
                        paraBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.BLGoodsCode);
                        paraBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.BLGoodsDrCode);
                        paraInqGoodsName.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqGoodsName);
                        paraAnsGoodsName.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.AnsGoodsName);
                        paraSalesOrderCount.Value = SqlDataMediator.SqlSetDouble(scmAcOdSetDtWork.SalesOrderCount);
                        paraDeliveredGoodsCount.Value = SqlDataMediator.SqlSetDouble(scmAcOdSetDtWork.DeliveredGoodsCount);
                        paraGoodsNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsNo);
                        paraGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.GoodsMakerCd);
                        paraGoodsMakerNm.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsMakerNm);
                        paraPureGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.PureGoodsMakerCd);
                        paraInqPureGoodsNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqPureGoodsNo);
                        paraAnsPureGoodsNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.AnsPureGoodsNo);
                        paraListPrice.Value = SqlDataMediator.SqlSetInt64(scmAcOdSetDtWork.ListPrice);
                        paraUnitPrice.Value = SqlDataMediator.SqlSetInt64(scmAcOdSetDtWork.UnitPrice);
                        paraGoodsAddInfo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsAddInfo);
                        paraRoughRrofit.Value = SqlDataMediator.SqlSetInt64(scmAcOdSetDtWork.RoughRrofit);
                        paraRoughRate.Value = SqlDataMediator.SqlSetDouble(scmAcOdSetDtWork.RoughRate);
                        paraAnswerLimitDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(scmAcOdSetDtWork.AnswerLimitDate);
                        paraCommentDtl.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.CommentDtl);
                        paraShelfNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.ShelfNo);
                        paraPMAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.PMAcptAnOdrStatus);
                        paraPMSalesSlipNum.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.PMSalesSlipNum);
                        paraPMSalesRowNo.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.PMSalesRowNo);
                        paraPmWarehouseCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmWarehouseCd);
                        paraPmWarehouseName.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmWarehouseName);
                        paraPmShelfNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmShelfNo);
                        paraPmPrsntCount.Value = SqlDataMediator.SqlSetDouble(scmAcOdSetDtWork.PmPrsntCount);
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                        paraPmMainMngWarehouseCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmMainMngWarehouseCd);
                        paraPmMainMngWarehouseName.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmMainMngWarehouseName);
                        paraPmMainMngShelfNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmMainMngShelfNo);
                        paraPmMainMngPrsntCount.Value = SqlDataMediator.SqlSetDouble(scmAcOdSetDtWork.PmMainMngPrsntCount);
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                        // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                        paraGoodsSpclInstruction.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsSpclInstruction);
                        // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                        // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------->>>>>
                        paraMkrSuggestRtPric.Value = SqlDataMediator.SqlSetInt64(scmAcOdSetDtWork.MkrSuggestRtPric);
                        paraOpenPriceDiv.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.OpenPriceDiv);
                        // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------<<<<<
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraAnsDeliDateDiv.Value = SqlDataMediator.SqlSetInt16(scmAcOdSetDtWork.AnsDeliDateDiv); // 回答納期区分
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraGoodsSpecialNtForFac.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsSpecialNtForFac); // 商品規格・特記事項(工場向け)
                        paraGoodsSpecialNtForCOw.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsSpecialNtForCOw); // 商品規格・特記事項(カーオーナー向け)
                        paraPrmSetDtlName2ForFac.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PrmSetDtlName2ForFac); // 優良設定詳細名称２(工場向け)
                        paraPrmSetDtlName2ForCOw.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PrmSetDtlName2ForCOw); // 優良設定詳細名称２(カーオーナー向け)
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                        paraPrmSetDtlNo2.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.PrmSetDtlNo2); // 優良設定詳細コード２
                        paraPrmSetDtlName2.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PrmSetDtlName2); // 優良設定詳細名称２
                        paraStockStatusDiv.Value = SqlDataMediator.SqlSetInt16(scmAcOdSetDtWork.StockStatusDiv); // 在庫状況区分
                        // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
                        // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraInqBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqBlUtyPtThCd);  // 問発BL統一部品コード(スリーコード版)
                        paraInqBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.InqBlUtyPtSbCd);  // 問発BL統一部品サブコード
                        paraAnsBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.AnsBlUtyPtThCd);  // 回答BL統一部品コード(スリーコード版)
                        paraAnsBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.AnsBlUtyPtSbCd);  // 回答BL統一部品サブコード
                        paraAnsBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.AnsBLGoodsCode);  // 回答BL商品コード
                        paraAnsBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.AnsBLGoodsDrCode);  // 回答BL商品コード枝番
                        // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        sqlCommand.CommandTimeout = dbCommandTimeout; // ADD 田建委 2020/08/28 PMKOBETSU-4076の対応
                        sqlCommand.ExecuteNonQuery();
                        al.Add(scmAcOdSetDtWork);
                    }
                }

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            scmAcOdSetDtAsWorkList = al;

            return status;
        }

        /// <summary>
        /// SCM受注セット部品データを追加・更新します。
        /// </summary>
        /// <param name="scmAcOdSetDtAsWorkList">追加・更新するSCM受注セット部品データ情報を格納する ArrayList</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <param name="dbCommandTimeout">コマンドタイムアウト</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : scmAcOdSetDtAsWorkList に格納されているSCM受注セット部品データ情報を追加・更新します。</br>
        /// <br>Programmer : 高峰</br>
        /// <br>Date       : 2011/08/10</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        /// <br>Update Note: 2020/08/28 田建委</br>
        /// <br>管理番号   : 11600006-00</br>
        /// <br>             PMKOBETSU-4076 タイムアウト設定</br>
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------>>>>>
        //private int WriteSCMAcOdSetDtAsWorkProc(ref ArrayList scmAcOdSetDtAsWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        private int WriteSCMAcOdSetDtAsWorkProc(ref ArrayList scmAcOdSetDtAsWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction, int dbCommandTimeout)
        // --- UPD 田建委 2020/08/28 PMKOBETSU-4076の対応 ------<<<<<
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            ArrayList al = new ArrayList();
            try
            {
                if (scmAcOdSetDtAsWorkList != null)
                {
                    string sqlText = string.Empty;
                    sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);

                    for (int i = 0; i < scmAcOdSetDtAsWorkList.Count; i++)
                    {
                        SCMAcOdSetDtWork scmAcOdSetDtWork = scmAcOdSetDtAsWorkList[i] as SCMAcOdSetDtWork;

                        # region [SELECT文]
                        sqlText = string.Empty;
                        sqlText += "SELECT" + Environment.NewLine;
                        sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                        sqlText += "  ,UPDATEDATETIMERF" + Environment.NewLine;
                        sqlText += "  ,FILEHEADERGUIDRF" + Environment.NewLine;
                        sqlText += "FROM" + Environment.NewLine;
                        sqlText += "  SCMACODSETDTRF " + Environment.NewLine;
                        sqlText += "WHERE" + Environment.NewLine;
                        sqlText += "      ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALEPCDRF=@FINDINQORIGINALEPCD " + Environment.NewLine;
                        sqlText += "  AND INQORIGINALSECCDRF=@FINDINQORIGINALSECCD" + Environment.NewLine;
                        sqlText += "  AND INQOTHEREPCDRF=@FINDINQOTHEREPCD" + Environment.NewLine;
                        sqlText += "  AND INQOTHERSECCDRF=@FINDINQOTHERSECCD" + Environment.NewLine;
                        sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;
                        sqlText += "  AND SETPARTSMKRCDRF=@FINDSETPARTSMKRCD" + Environment.NewLine;
                        sqlText += "  AND SETPARTSNUMBERRF=@FINDSETPARTSNUMBER" + Environment.NewLine;
                        sqlText += "  AND SETPARTSMAINSUBNORF=@FINDSETPARTSMAINSUBNO" + Environment.NewLine;
                        sqlCommand.CommandText = sqlText;
                        # endregion

                        sqlCommand.Parameters.Clear();

                        //Prameterオブジェクトの作成
                        SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter findParaInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);
                        SqlParameter findParaInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);
                        SqlParameter findParaInqOtherEpCd = sqlCommand.Parameters.Add("@FINDINQOTHEREPCD", SqlDbType.NChar);
                        SqlParameter findParaInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);
                        SqlParameter findParaInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);
                        SqlParameter findParaSetPartsMkrCd = sqlCommand.Parameters.Add("@FINDSETPARTSMKRCD", SqlDbType.Int);
                        SqlParameter findParaSetPartsNumber = sqlCommand.Parameters.Add("@FINDSETPARTSNUMBER", SqlDbType.NVarChar);
                        SqlParameter findParaSetPartsMainSubNo = sqlCommand.Parameters.Add("@FINDSETPARTSMAINSUBNO", SqlDbType.Int);

                        //Parameterオブジェクトへ値設定
                        findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.EnterpriseCode);  // 企業コード
                        findParaInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOriginalEpCd);  // 問合せ元企業コード
                        findParaInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        findParaInqOtherEpCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOtherEpCd);  // 問合せ先企業コード
                        findParaInqOtherSecCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOtherSecCd);  // 問合せ先拠点コード
                        findParaInquiryNumber.Value = SqlDataMediator.SqlSetInt64(scmAcOdSetDtWork.InquiryNumber);  // 問合せ番号
                        findParaSetPartsMkrCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.SetPartsMkrCd);
                        findParaSetPartsNumber.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.SetPartsNumber);
                        findParaSetPartsMainSubNo.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.SetPartsMainSubNo);

                        sqlCommand.CommandTimeout = dbCommandTimeout;  //ADD 田建委 2020/08/28 PMKOBETSU-4076の対応
                        myReader = sqlCommand.ExecuteReader();

                        sqlText = string.Empty;

                        if (myReader.Read())
                        {
                            // 既存GUIDデータがある場合で更新日時が異なる場合は排他エラーで戻す
                            DateTime _updateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));// 更新日時

                            if (_updateDateTime != scmAcOdSetDtWork.UpdateDateTime)
                            {
                                if (scmAcOdSetDtWork.UpdateDateTime != DateTime.MinValue)
                                {
                                    // 既存データで更新日時違いの場合には排他
                                    return (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE;
                                }
                            }

                            // 作成日時再取得
                            scmAcOdSetDtWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF"));

                            // GUID再取得
                            scmAcOdSetDtWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF"));

                            # region [UPDATE文]
                            sqlText += "  UPDATE SCMACODSETDTRF" + Environment.NewLine;
                            sqlText += "  SET" + Environment.NewLine;
                            sqlText += "  CREATEDATETIMERF = @CREATEDATETIME" + Environment.NewLine;
                            sqlText += " ,UPDATEDATETIMERF = @UPDATEDATETIME" + Environment.NewLine;
                            sqlText += " ,ENTERPRISECODERF = @ENTERPRISECODE" + Environment.NewLine;
                            sqlText += " ,FILEHEADERGUIDRF = @FILEHEADERGUID" + Environment.NewLine;
                            sqlText += " ,UPDEMPLOYEECODERF = @UPDEMPLOYEECODE" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID1RF = @UPDASSEMBLYID1" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID2RF = @UPDASSEMBLYID2" + Environment.NewLine;
                            sqlText += " ,LOGICALDELETECODERF = @LOGICALDELETECODE" + Environment.NewLine;
                            sqlText += " ,INQORIGINALEPCDRF=@INQORIGINALEPCD" + Environment.NewLine;
                            sqlText += " ,INQORIGINALSECCDRF=@INQORIGINALSECCD " + Environment.NewLine;
                            sqlText += " ,INQOTHEREPCDRF=@INQOTHEREPCD" + Environment.NewLine;
                            sqlText += " ,INQOTHERSECCDRF=@INQOTHERSECCD" + Environment.NewLine;
                            sqlText += " ,INQUIRYNUMBERRF=@INQUIRYNUMBER" + Environment.NewLine;
                            sqlText += " ,SETPARTSMKRCDRF=@SETPARTSMKRCD" + Environment.NewLine;
                            sqlText += " ,SETPARTSNUMBERRF=@SETPARTSNUMBER" + Environment.NewLine;
                            sqlText += " ,SETPARTSMAINSUBNORF=@SETPARTSMAINSUBNO" + Environment.NewLine;
                            sqlText += " ,GOODSDIVCDRF = @GOODSDIVCD" + Environment.NewLine;
                            sqlText += " ,RECYCLEPRTKINDCODERF = @RECYCLEPRTKINDCODE" + Environment.NewLine;
                            sqlText += " ,RECYCLEPRTKINDNAMERF = @RECYCLEPRTKINDNAME" + Environment.NewLine;
                            sqlText += " ,DELIVEREDGOODSDIVRF = @DELIVEREDGOODSDIV" + Environment.NewLine;
                            sqlText += " ,HANDLEDIVCODERF = @HANDLEDIVCODE" + Environment.NewLine;
                            sqlText += " ,GOODSSHAPERF = @GOODSSHAPE" + Environment.NewLine;
                            sqlText += " ,DELIVRDGDSCONFCDRF = @DELIVRDGDSCONFCD" + Environment.NewLine;
                            sqlText += " ,DELIGDSCMPLTDUEDATERF = @DELIGDSCMPLTDUEDATE" + Environment.NewLine;
                            sqlText += " ,ANSWERDELIVERYDATERF = @ANSWERDELIVERYDATE" + Environment.NewLine;
                            sqlText += " ,BLGOODSCODERF = @BLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,BLGOODSDRCODERF = @BLGOODSDRCODE" + Environment.NewLine;
                            sqlText += " ,INQGOODSNAMERF = @INQGOODSNAME" + Environment.NewLine;
                            sqlText += " ,ANSGOODSNAMERF = @ANSGOODSNAME" + Environment.NewLine;
                            sqlText += " ,SALESORDERCOUNTRF = @SALESORDERCOUNT" + Environment.NewLine;
                            sqlText += " ,DELIVEREDGOODSCOUNTRF = @DELIVEREDGOODSCOUNT" + Environment.NewLine;
                            sqlText += " ,GOODSNORF = @GOODSNO" + Environment.NewLine;
                            sqlText += " ,GOODSMAKERCDRF = @GOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,GOODSMAKERNMRF = @GOODSMAKERNM" + Environment.NewLine;
                            sqlText += " ,PUREGOODSMAKERCDRF = @PUREGOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,INQPUREGOODSNORF = @INQPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,ANSPUREGOODSNORF = @ANSPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,LISTPRICERF = @LISTPRICE" + Environment.NewLine;
                            sqlText += " ,UNITPRICERF = @UNITPRICE" + Environment.NewLine;
                            sqlText += " ,GOODSADDINFORF = @GOODSADDINFO" + Environment.NewLine;
                            sqlText += " ,ROUGHRROFITRF = @ROUGHRROFIT" + Environment.NewLine;
                            sqlText += " ,ROUGHRATERF = @ROUGHRATE" + Environment.NewLine;
                            sqlText += " ,ANSWERLIMITDATERF = @ANSWERLIMITDATE" + Environment.NewLine;
                            sqlText += " ,COMMENTDTLRF = @COMMENTDTL" + Environment.NewLine;
                            sqlText += " ,SHELFNORF = @SHELFNO" + Environment.NewLine;
                            sqlText += " ,PMACPTANODRSTATUSRF=@PMACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += " ,PMSALESSLIPNUMRF=@PMSALESSLIPNUM" + Environment.NewLine;
                            sqlText += " ,PMSALESROWNORF=@PMSALESROWNO" + Environment.NewLine;
                            sqlText += " ,PMWAREHOUSECDRF=@PMWAREHOUSECD" + Environment.NewLine;
                            sqlText += " ,PMWAREHOUSENAMERF=@PMWAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,PMSHELFNORF=@PMSHELFNO" + Environment.NewLine;
                            sqlText += " ,PMPRSNTCOUNTRF=@PMPRSNTCOUNT" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            sqlText += " ,PMMAINMNGWAREHOUSECDRF = @PMMAINMNGWAREHOUSECD" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGWAREHOUSENAMERF = @PMMAINMNGWAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGSHELFNORF = @PMMAINMNGSHELFNO" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGPRSNTCOUNTRF = @PMMAINMNGPRSNTCOUNT" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                            sqlText += " ,GOODSSPCLINSTRUCTIONRF=@GOODSSPCLINSTRUCTION" + Environment.NewLine;
                            // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                            // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------->>>>>
                            sqlText += " ,MKRSUGGESTRTPRICRF = @MKRSUGGESTRTPRIC" + Environment.NewLine;
                            sqlText += " ,OPENPRICEDIVRF = @OPENPRICEDIV" + Environment.NewLine;
                            // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------<<<<<
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,ANSDELIDATEDIVRF = @ANSDELIDATEDIV" + Environment.NewLine;     // 回答納期区分
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,GOODSSPECIALNTFORFACRF = @GOODSSPECIALNTFORFAC" + Environment.NewLine;     // 商品規格・特記事項(工場向け)
                            sqlText += " ,GOODSSPECIALNTFORCOWRF = @GOODSSPECIALNTFORCOW" + Environment.NewLine;     // 商品規格・特記事項(カーオーナー向け)
                            sqlText += " ,PRMSETDTLNAME2FORFACRF = @PRMSETDTLNAME2FORFAC" + Environment.NewLine;     // 優良設定詳細名称２(工場向け)
                            sqlText += " ,PRMSETDTLNAME2FORCOWRF = @PRMSETDTLNAME2FORCOW" + Environment.NewLine;     // 優良設定詳細名称２(カーオーナー向け)
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                            sqlText += " ,PRMSETDTLNO2RF = @PRMSETDTLNO2" + Environment.NewLine;     // 優良設定詳細コード２
                            sqlText += " ,PRMSETDTLNAME2RF = @PRMSETDTLNAME2" + Environment.NewLine;     // 優良設定詳細名称２
                            sqlText += " ,STOCKSTATUSDIVRF = @STOCKSTATUSDIV" + Environment.NewLine;     // 在庫状況区分
                            // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,INQBLUTYPTTHCDRF=@INQBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,INQBLUTYPTSBCDRF=@INQBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTTHCDRF=@ANSBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTSBCDRF=@ANSBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSCODERF=@ANSBLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSDRCODERF=@ANSBLGOODSDRCODE" + Environment.NewLine;
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            sqlText += "  WHERE" + Environment.NewLine;
                            sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                            sqlText += "  AND INQORIGINALEPCDRF=@FINDINQORIGINALEPCD " + Environment.NewLine;
                            sqlText += "  AND INQORIGINALSECCDRF=@FINDINQORIGINALSECCD" + Environment.NewLine;
                            sqlText += "  AND INQOTHEREPCDRF=@FINDINQOTHEREPCD" + Environment.NewLine;
                            sqlText += "  AND INQOTHERSECCDRF=@FINDINQOTHERSECCD" + Environment.NewLine;
                            sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBER" + Environment.NewLine;
                            sqlText += "  AND SETPARTSMKRCDRF=@FINDSETPARTSMKRCD" + Environment.NewLine;
                            sqlText += "  AND SETPARTSNUMBERRF=@FINDSETPARTSNUMBER" + Environment.NewLine;
                            sqlText += "  AND SETPARTSMAINSUBNORF=@FINDSETPARTSMAINSUBNO" + Environment.NewLine;
                            sqlCommand.CommandText = sqlText;
                            # endregion

                            // KEYコマンドを再設定
                            findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.EnterpriseCode);  // 企業コード
                            findParaInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOriginalEpCd);  // 問合せ元企業コード
                            findParaInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOriginalSecCd);  // 問合せ元拠点コード
                            findParaInqOtherEpCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOtherEpCd);  // 問合せ先企業コード
                            findParaInqOtherSecCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOtherSecCd);  // 問合せ先拠点コード
                            findParaInquiryNumber.Value = SqlDataMediator.SqlSetInt64(scmAcOdSetDtWork.InquiryNumber);  // 問合せ番号
                            findParaSetPartsMkrCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.SetPartsMkrCd);
                            findParaSetPartsNumber.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.SetPartsNumber);
                            findParaSetPartsMainSubNo.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.SetPartsMainSubNo);

                            // 更新ヘッダ情報を設定
                            object obj = (object)this;
                            IFileHeader flhd = (IFileHeader)scmAcOdSetDtWork;
                            FileHeader fileHeader = new FileHeader(obj);
                            fileHeader.SetUpdateHeader(ref flhd, obj);
                        }
                        else
                        {
                            // 既存GUIDデータが無い場合で更新日時が更新対象データに入っている場合はすでに削除されている意味で排他を戻す
                            if (scmAcOdSetDtWork.UpdateDateTime > DateTime.MinValue)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE;
                                return status;
                            }

                            # region [INSERT文]
                            sqlText += "  INSERT INTO SCMACODSETDTRF  (" + Environment.NewLine;
                            sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                            sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                            sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                            sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                            sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                            sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                            sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                            sqlText += " ,SETPARTSMKRCDRF" + Environment.NewLine;
                            sqlText += " ,SETPARTSNUMBERRF" + Environment.NewLine;
                            sqlText += " ,SETPARTSMAINSUBNORF" + Environment.NewLine;
                            sqlText += " ,GOODSDIVCDRF" + Environment.NewLine;
                            sqlText += " ,RECYCLEPRTKINDCODERF" + Environment.NewLine;
                            sqlText += " ,RECYCLEPRTKINDNAMERF" + Environment.NewLine;
                            sqlText += " ,DELIVEREDGOODSDIVRF" + Environment.NewLine;
                            sqlText += " ,HANDLEDIVCODERF" + Environment.NewLine;
                            sqlText += " ,GOODSSHAPERF" + Environment.NewLine;
                            sqlText += " ,DELIVRDGDSCONFCDRF" + Environment.NewLine;
                            sqlText += " ,DELIGDSCMPLTDUEDATERF" + Environment.NewLine;
                            sqlText += " ,ANSWERDELIVERYDATERF" + Environment.NewLine;
                            sqlText += " ,BLGOODSCODERF" + Environment.NewLine;
                            sqlText += " ,BLGOODSDRCODERF" + Environment.NewLine;
                            sqlText += " ,INQGOODSNAMERF" + Environment.NewLine;
                            sqlText += " ,ANSGOODSNAMERF" + Environment.NewLine;
                            sqlText += " ,SALESORDERCOUNTRF" + Environment.NewLine;
                            sqlText += " ,DELIVEREDGOODSCOUNTRF" + Environment.NewLine;
                            sqlText += " ,GOODSNORF" + Environment.NewLine;
                            sqlText += " ,GOODSMAKERCDRF" + Environment.NewLine;
                            sqlText += " ,GOODSMAKERNMRF" + Environment.NewLine;
                            sqlText += " ,PUREGOODSMAKERCDRF" + Environment.NewLine;
                            sqlText += " ,INQPUREGOODSNORF" + Environment.NewLine;
                            sqlText += " ,ANSPUREGOODSNORF" + Environment.NewLine;
                            sqlText += " ,LISTPRICERF" + Environment.NewLine;
                            sqlText += " ,UNITPRICERF" + Environment.NewLine;
                            sqlText += " ,GOODSADDINFORF" + Environment.NewLine;
                            sqlText += " ,ROUGHRROFITRF" + Environment.NewLine;
                            sqlText += " ,ROUGHRATERF" + Environment.NewLine;
                            sqlText += " ,ANSWERLIMITDATERF" + Environment.NewLine;
                            sqlText += " ,COMMENTDTLRF" + Environment.NewLine;
                            sqlText += " ,SHELFNORF" + Environment.NewLine;
                            sqlText += " ,PMACPTANODRSTATUSRF" + Environment.NewLine;
                            sqlText += " ,PMSALESSLIPNUMRF" + Environment.NewLine;
                            sqlText += " ,PMSALESROWNORF" + Environment.NewLine;
                            sqlText += " ,PMWAREHOUSECDRF" + Environment.NewLine;
                            sqlText += " ,PMWAREHOUSENAMERF" + Environment.NewLine;
                            sqlText += " ,PMSHELFNORF" + Environment.NewLine;
                            sqlText += " ,PMPRSNTCOUNTRF" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            sqlText += " ,PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGSHELFNORF" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                            sqlText += " ,GOODSSPCLINSTRUCTIONRF" + Environment.NewLine;
                            // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                            // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------->>>>>
                            sqlText += " ,MKRSUGGESTRTPRICRF" + Environment.NewLine;
                            sqlText += " ,OPENPRICEDIVRF" + Environment.NewLine;
                            // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------<<<<<
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,ANSDELIDATEDIVRF" + Environment.NewLine;     // 回答納期区分
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,GOODSSPECIALNTFORFACRF" + Environment.NewLine;     // 商品規格・特記事項(工場向け)
                            sqlText += " ,GOODSSPECIALNTFORCOWRF" + Environment.NewLine;     // 商品規格・特記事項(カーオーナー向け)
                            sqlText += " ,PRMSETDTLNAME2FORFACRF" + Environment.NewLine;     // 優良設定詳細名称２(工場向け)
                            sqlText += " ,PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;     // 優良設定詳細名称２(カーオーナー向け)
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                            sqlText += " ,PRMSETDTLNO2RF" + Environment.NewLine;     // 優良設定詳細コード２
                            sqlText += " ,PRMSETDTLNAME2RF" + Environment.NewLine;     // 優良設定詳細名称２
                            sqlText += " ,STOCKSTATUSDIVRF" + Environment.NewLine;     // 在庫状況区分
                            // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,INQBLUTYPTTHCDRF" + Environment.NewLine;
                            sqlText += " ,INQBLUTYPTSBCDRF" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTTHCDRF" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTSBCDRF" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSCODERF" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSDRCODERF" + Environment.NewLine;
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            sqlText += " )" + Environment.NewLine;
                            sqlText += "  VALUES" + Environment.NewLine;
                            sqlText += "  (@CREATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                            sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                            sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                            sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALEPCD" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALSECCD" + Environment.NewLine;
                            sqlText += " ,@INQOTHEREPCD" + Environment.NewLine;
                            sqlText += " ,@INQOTHERSECCD" + Environment.NewLine;
                            sqlText += " ,@INQUIRYNUMBER" + Environment.NewLine;
                            sqlText += " ,@SETPARTSMKRCD" + Environment.NewLine;
                            sqlText += " ,@SETPARTSNUMBER" + Environment.NewLine;
                            sqlText += " ,@SETPARTSMAINSUBNO" + Environment.NewLine;
                            sqlText += " ,@GOODSDIVCD" + Environment.NewLine;
                            sqlText += " ,@RECYCLEPRTKINDCODE" + Environment.NewLine;
                            sqlText += " ,@RECYCLEPRTKINDNAME" + Environment.NewLine;
                            sqlText += " ,@DELIVEREDGOODSDIV" + Environment.NewLine;
                            sqlText += " ,@HANDLEDIVCODE" + Environment.NewLine;
                            sqlText += " ,@GOODSSHAPE" + Environment.NewLine;
                            sqlText += " ,@DELIVRDGDSCONFCD" + Environment.NewLine;
                            sqlText += " ,@DELIGDSCMPLTDUEDATE" + Environment.NewLine;
                            sqlText += " ,@ANSWERDELIVERYDATE" + Environment.NewLine;
                            sqlText += " ,@BLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,@BLGOODSDRCODE" + Environment.NewLine;
                            sqlText += " ,@INQGOODSNAME" + Environment.NewLine;
                            sqlText += " ,@ANSGOODSNAME" + Environment.NewLine;
                            sqlText += " ,@SALESORDERCOUNT" + Environment.NewLine;
                            sqlText += " ,@DELIVEREDGOODSCOUNT" + Environment.NewLine;
                            sqlText += " ,@GOODSNO" + Environment.NewLine;
                            sqlText += " ,@GOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,@GOODSMAKERNM" + Environment.NewLine;
                            sqlText += " ,@PUREGOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,@INQPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,@ANSPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,@LISTPRICE" + Environment.NewLine;
                            sqlText += " ,@UNITPRICE" + Environment.NewLine;
                            sqlText += " ,@GOODSADDINFO" + Environment.NewLine;
                            sqlText += " ,@ROUGHRROFIT" + Environment.NewLine;
                            sqlText += " ,@ROUGHRATE" + Environment.NewLine;
                            sqlText += " ,@ANSWERLIMITDATE" + Environment.NewLine;
                            sqlText += " ,@COMMENTDTL" + Environment.NewLine;
                            sqlText += " ,@SHELFNO" + Environment.NewLine;
                            sqlText += " ,@PMACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += " ,@PMSALESSLIPNUM" + Environment.NewLine;
                            sqlText += " ,@PMSALESROWNO" + Environment.NewLine;
                            sqlText += " ,@PMWAREHOUSECD" + Environment.NewLine;
                            sqlText += " ,@PMWAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,@PMSHELFNO" + Environment.NewLine;
                            sqlText += " ,@PMPRSNTCOUNT" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            sqlText += " ,@PMMAINMNGWAREHOUSECD" + Environment.NewLine;
                            sqlText += " ,@PMMAINMNGWAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,@PMMAINMNGSHELFNO" + Environment.NewLine;
                            sqlText += " ,@PMMAINMNGPRSNTCOUNT" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                            sqlText += " ,@GOODSSPCLINSTRUCTION" + Environment.NewLine;
                            // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                            // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------->>>>>
                            sqlText += " ,@MKRSUGGESTRTPRIC" + Environment.NewLine;
                            sqlText += " ,@OPENPRICEDIV" + Environment.NewLine;
                            // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------<<<<<
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@ANSDELIDATEDIV" + Environment.NewLine;    // 回答納期区分
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@GOODSSPECIALNTFORFAC" + Environment.NewLine;    // 商品規格・特記事項(工場向け)
                            sqlText += " ,@GOODSSPECIALNTFORCOW" + Environment.NewLine;    // 商品規格・特記事項(カーオーナー向け)
                            sqlText += " ,@PRMSETDTLNAME2FORFAC" + Environment.NewLine;    // 優良設定詳細名称２(工場向け)
                            sqlText += " ,@PRMSETDTLNAME2FORCOW" + Environment.NewLine;    // 優良設定詳細名称２(カーオーナー向け)
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                            sqlText += " ,@PRMSETDTLNO2" + Environment.NewLine;    // 優良設定詳細コード２
                            sqlText += " ,@PRMSETDTLNAME2" + Environment.NewLine;    // 優良設定詳細名称２
                            sqlText += " ,@STOCKSTATUSDIV" + Environment.NewLine;    // 在庫状況区分
                            // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@INQBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,@INQBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,@ANSBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,@ANSBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,@ANSBLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,@ANSBLGOODSDRCODE" + Environment.NewLine;
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            sqlText += " )" + Environment.NewLine;

                            sqlCommand.CommandText = sqlText;
                            # endregion

                            // 登録ヘッダ情報を設定
                            object obj = (object)this;
                            IFileHeader flhd = (IFileHeader)scmAcOdSetDtWork;
                            FileHeader fileHeader = new FileHeader(obj);
                            fileHeader.SetInsertHeader(ref flhd, obj);
                        }

                        if (!myReader.IsClosed)
                        {
                            myReader.Close();
                        }

                        //Prameterオブジェクトの作成
                        SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                        SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                        SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);
                        SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);
                        SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);
                        SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);
                        SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                        SqlParameter paraInqOriginalEpCd = sqlCommand.Parameters.Add("@INQORIGINALEPCD", SqlDbType.NChar);
                        SqlParameter paraInqOriginalSecCd = sqlCommand.Parameters.Add("@INQORIGINALSECCD", SqlDbType.NChar);
                        SqlParameter paraInqOtherEpCd = sqlCommand.Parameters.Add("@INQOTHEREPCD", SqlDbType.NChar);
                        SqlParameter paraInqOtherSecCd = sqlCommand.Parameters.Add("@INQOTHERSECCD", SqlDbType.NChar);
                        SqlParameter paraInquiryNumber = sqlCommand.Parameters.Add("@INQUIRYNUMBER", SqlDbType.BigInt);
                        SqlParameter paraSetPartsMkrCd = sqlCommand.Parameters.Add("@SETPARTSMKRCD", SqlDbType.Int);
                        SqlParameter paraSetPartsNumber = sqlCommand.Parameters.Add("@SETPARTSNUMBER", SqlDbType.NVarChar);
                        SqlParameter paraSetPartsMainSubNo = sqlCommand.Parameters.Add("@SETPARTSMAINSUBNO", SqlDbType.Int);
                        SqlParameter paraGoodsDivCd = sqlCommand.Parameters.Add("@GOODSDIVCD", SqlDbType.Int);
                        SqlParameter paraRecyclePrtKindCode = sqlCommand.Parameters.Add("@RECYCLEPRTKINDCODE", SqlDbType.Int);
                        SqlParameter paraRecyclePrtKindName = sqlCommand.Parameters.Add("@RECYCLEPRTKINDNAME", SqlDbType.NVarChar);
                        SqlParameter paraDeliveredGoodsDiv = sqlCommand.Parameters.Add("@DELIVEREDGOODSDIV", SqlDbType.Int);
                        SqlParameter paraHandleDivCode = sqlCommand.Parameters.Add("@HANDLEDIVCODE", SqlDbType.Int);
                        SqlParameter paraGoodsShape = sqlCommand.Parameters.Add("@GOODSSHAPE", SqlDbType.Int);
                        SqlParameter paraDelivrdGdsConfCd = sqlCommand.Parameters.Add("@DELIVRDGDSCONFCD", SqlDbType.Int);
                        SqlParameter paraDeliGdsCmpltDueDate = sqlCommand.Parameters.Add("@DELIGDSCMPLTDUEDATE", SqlDbType.Int);
                        SqlParameter paraAnswerDeliveryDate = sqlCommand.Parameters.Add("@ANSWERDELIVERYDATE", SqlDbType.NVarChar);
                        SqlParameter paraBLGoodsCode = sqlCommand.Parameters.Add("@BLGOODSCODE", SqlDbType.Int);
                        SqlParameter paraBLGoodsDrCode = sqlCommand.Parameters.Add("@BLGOODSDRCODE", SqlDbType.Int);
                        SqlParameter paraInqGoodsName = sqlCommand.Parameters.Add("@INQGOODSNAME", SqlDbType.NVarChar);
                        SqlParameter paraAnsGoodsName = sqlCommand.Parameters.Add("@ANSGOODSNAME", SqlDbType.NVarChar);
                        SqlParameter paraSalesOrderCount = sqlCommand.Parameters.Add("@SALESORDERCOUNT", SqlDbType.Float);
                        SqlParameter paraDeliveredGoodsCount = sqlCommand.Parameters.Add("@DELIVEREDGOODSCOUNT", SqlDbType.Float);
                        SqlParameter paraGoodsNo = sqlCommand.Parameters.Add("@GOODSNO", SqlDbType.NVarChar);
                        SqlParameter paraGoodsMakerCd = sqlCommand.Parameters.Add("@GOODSMAKERCD", SqlDbType.Int);
                        SqlParameter paraGoodsMakerNm = sqlCommand.Parameters.Add("@GOODSMAKERNM", SqlDbType.NVarChar);
                        SqlParameter paraPureGoodsMakerCd = sqlCommand.Parameters.Add("@PUREGOODSMAKERCD", SqlDbType.Int);
                        SqlParameter paraInqPureGoodsNo = sqlCommand.Parameters.Add("@INQPUREGOODSNO", SqlDbType.NVarChar);
                        SqlParameter paraAnsPureGoodsNo = sqlCommand.Parameters.Add("@ANSPUREGOODSNO", SqlDbType.NVarChar);
                        SqlParameter paraListPrice = sqlCommand.Parameters.Add("@LISTPRICE", SqlDbType.BigInt);
                        SqlParameter paraUnitPrice = sqlCommand.Parameters.Add("@UNITPRICE", SqlDbType.BigInt);
                        SqlParameter paraGoodsAddInfo = sqlCommand.Parameters.Add("@GOODSADDINFO", SqlDbType.NVarChar);
                        SqlParameter paraRoughRrofit = sqlCommand.Parameters.Add("@ROUGHRROFIT", SqlDbType.BigInt);
                        SqlParameter paraRoughRate = sqlCommand.Parameters.Add("@ROUGHRATE", SqlDbType.Float);
                        SqlParameter paraAnswerLimitDate = sqlCommand.Parameters.Add("@ANSWERLIMITDATE", SqlDbType.Int);
                        SqlParameter paraCommentDtl = sqlCommand.Parameters.Add("@COMMENTDTL", SqlDbType.NVarChar);
                        SqlParameter paraShelfNo = sqlCommand.Parameters.Add("@SHELFNO", SqlDbType.NVarChar);
                        SqlParameter paraPMAcptAnOdrStatus = sqlCommand.Parameters.Add("@PMACPTANODRSTATUS", SqlDbType.Int);
                        SqlParameter paraPMSalesSlipNum = sqlCommand.Parameters.Add("@PMSALESSLIPNUM", SqlDbType.Int);
                        SqlParameter paraPMSalesRowNo = sqlCommand.Parameters.Add("@PMSALESROWNO", SqlDbType.Int);
                        SqlParameter paraPmWarehouseCd = sqlCommand.Parameters.Add("@PMWAREHOUSECD", SqlDbType.NVarChar);
                        SqlParameter paraPmWarehouseName = sqlCommand.Parameters.Add("@PMWAREHOUSENAME", SqlDbType.NVarChar);
                        SqlParameter paraPmShelfNo = sqlCommand.Parameters.Add("@PMSHELFNO", SqlDbType.NVarChar);
                        SqlParameter paraPmPrsntCount = sqlCommand.Parameters.Add("@PMPRSNTCOUNT", SqlDbType.Float);
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                        SqlParameter paraPmMainMngWarehouseCd = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSECD", SqlDbType.NVarChar);
                        SqlParameter paraPmMainMngWarehouseName = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSENAME", SqlDbType.NVarChar);
                        SqlParameter paraPmMainMngShelfNo = sqlCommand.Parameters.Add("@PMMAINMNGSHELFNO", SqlDbType.NVarChar);
                        SqlParameter paraPmMainMngPrsntCount = sqlCommand.Parameters.Add("@PMMAINMNGPRSNTCOUNT", SqlDbType.Float);
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                        // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                        SqlParameter paraGoodsSpclInstruction = sqlCommand.Parameters.Add("@GOODSSPCLINSTRUCTION", SqlDbType.NVarChar);
                        // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                        // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------------------->>>>>
                        SqlParameter paraMkrSuggestRtPric = sqlCommand.Parameters.Add("@MKRSUGGESTRTPRIC", SqlDbType.BigInt);  // メーカー希望小売価格
                        SqlParameter paraOpenPriceDiv = sqlCommand.Parameters.Add("@OPENPRICEDIV", SqlDbType.Int);  // オープン価格区分    
                        // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------------------<<<<<
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraAnsDeliDateDiv = sqlCommand.Parameters.Add("@ANSDELIDATEDIV", SqlDbType.SmallInt);  // 回答納期区分
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraGoodsSpecialNtForFac = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORFAC", SqlDbType.NVarChar);  // 商品規格・特記事項(工場向け)
                        SqlParameter paraGoodsSpecialNtForCOw = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORCOW", SqlDbType.NVarChar);  // 商品規格・特記事項(カーオーナー向け)
                        SqlParameter paraPrmSetDtlName2ForFac = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORFAC", SqlDbType.NVarChar);  // 優良設定詳細名称２(工場向け)
                        SqlParameter paraPrmSetDtlName2ForCOw = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORCOW", SqlDbType.NVarChar);  // 優良設定詳細名称２(カーオーナー向け)
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                        SqlParameter paraPrmSetDtlNo2 = sqlCommand.Parameters.Add("@PRMSETDTLNO2", SqlDbType.Int);  // 優良設定詳細コード２
                        SqlParameter paraPrmSetDtlName2 = sqlCommand.Parameters.Add("@PRMSETDTLNAME2", SqlDbType.NVarChar);  // 優良設定詳細名称２
                        SqlParameter paraStockStatusDiv = sqlCommand.Parameters.Add("@STOCKSTATUSDIV", SqlDbType.SmallInt);  // 在庫状況区分
                        // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
                        // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        SqlParameter paraInqBlUtyPtThCd = sqlCommand.Parameters.Add("@INQBLUTYPTTHCD", SqlDbType.NChar);  // 問発BL統一部品コード(スリーコード版)
                        SqlParameter paraInqBlUtyPtSbCd = sqlCommand.Parameters.Add("@INQBLUTYPTSBCD", SqlDbType.Int);  // 問発BL統一部品サブコード
                        SqlParameter paraAnsBlUtyPtThCd = sqlCommand.Parameters.Add("@ANSBLUTYPTTHCD", SqlDbType.NChar);  // 回答BL統一部品コード(スリーコード版)
                        SqlParameter paraAnsBlUtyPtSbCd = sqlCommand.Parameters.Add("@ANSBLUTYPTSBCD", SqlDbType.Int);  // 回答BL統一部品サブコード
                        SqlParameter paraAnsBLGoodsCode = sqlCommand.Parameters.Add("@ANSBLGOODSCODE", SqlDbType.Int);  // 回答BL商品コード
                        SqlParameter paraAnsBLGoodsDrCode = sqlCommand.Parameters.Add("@ANSBLGOODSDRCODE", SqlDbType.Int);  // 回答BL商品コード枝番
                        // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        //Parameterオブジェクトへ値設定
                        paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(scmAcOdSetDtWork.CreateDateTime);
                        paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(scmAcOdSetDtWork.UpdateDateTime);
                        paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.EnterpriseCode);
                        paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(scmAcOdSetDtWork.FileHeaderGuid);
                        paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.UpdEmployeeCode);
                        paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.UpdAssemblyId1);
                        paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.UpdAssemblyId2);
                        paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.LogicalDeleteCode);
                        paraInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOriginalEpCd);
                        paraInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOriginalSecCd);
                        paraInqOtherEpCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOtherEpCd);
                        paraInqOtherSecCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOtherSecCd);
                        paraInquiryNumber.Value = SqlDataMediator.SqlSetInt64(scmAcOdSetDtWork.InquiryNumber);
                        paraSetPartsMkrCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.SetPartsMkrCd);
                        paraSetPartsNumber.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.SetPartsNumber);
                        paraSetPartsMainSubNo.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.SetPartsMainSubNo);
                        paraGoodsDivCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.GoodsDivCd);
                        paraRecyclePrtKindCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.RecyclePrtKindCode);
                        paraRecyclePrtKindName.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.RecyclePrtKindName);
                        paraDeliveredGoodsDiv.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.DeliveredGoodsDiv);
                        paraHandleDivCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.HandleDivCode);
                        paraGoodsShape.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.GoodsShape);
                        paraDelivrdGdsConfCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.DelivrdGdsConfCd);
                        paraDeliGdsCmpltDueDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(scmAcOdSetDtWork.DeliGdsCmpltDueDate);
                        paraAnswerDeliveryDate.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.AnswerDeliveryDate);
                        paraBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.BLGoodsCode);
                        paraBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.BLGoodsDrCode);
                        paraInqGoodsName.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqGoodsName);
                        paraAnsGoodsName.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.AnsGoodsName);
                        paraSalesOrderCount.Value = SqlDataMediator.SqlSetDouble(scmAcOdSetDtWork.SalesOrderCount);
                        paraDeliveredGoodsCount.Value = SqlDataMediator.SqlSetDouble(scmAcOdSetDtWork.DeliveredGoodsCount);
                        paraGoodsNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsNo);
                        paraGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.GoodsMakerCd);
                        paraGoodsMakerNm.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsMakerNm);
                        paraPureGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.PureGoodsMakerCd);
                        paraInqPureGoodsNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqPureGoodsNo);
                        paraAnsPureGoodsNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.AnsPureGoodsNo);
                        paraListPrice.Value = SqlDataMediator.SqlSetInt64(scmAcOdSetDtWork.ListPrice);
                        paraUnitPrice.Value = SqlDataMediator.SqlSetInt64(scmAcOdSetDtWork.UnitPrice);
                        paraGoodsAddInfo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsAddInfo);
                        paraRoughRrofit.Value = SqlDataMediator.SqlSetInt64(scmAcOdSetDtWork.RoughRrofit);
                        paraRoughRate.Value = SqlDataMediator.SqlSetDouble(scmAcOdSetDtWork.RoughRate);
                        paraAnswerLimitDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(scmAcOdSetDtWork.AnswerLimitDate);
                        paraCommentDtl.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.CommentDtl);
                        paraShelfNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.ShelfNo);
                        paraPMAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.PMAcptAnOdrStatus);
                        paraPMSalesSlipNum.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.PMSalesSlipNum);
                        paraPMSalesRowNo.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.PMSalesRowNo);
                        paraPmWarehouseCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmWarehouseCd);
                        paraPmWarehouseName.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmWarehouseName);
                        paraPmShelfNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmShelfNo);
                        paraPmPrsntCount.Value = SqlDataMediator.SqlSetDouble(scmAcOdSetDtWork.PmPrsntCount);
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                        paraPmMainMngWarehouseCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmMainMngWarehouseCd);
                        paraPmMainMngWarehouseName.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmMainMngWarehouseName);
                        paraPmMainMngShelfNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmMainMngShelfNo);
                        paraPmMainMngPrsntCount.Value = SqlDataMediator.SqlSetDouble(scmAcOdSetDtWork.PmMainMngPrsntCount);
                        // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                        // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                        paraGoodsSpclInstruction.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsSpclInstruction);
                        // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                        // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------------------->>>>>
                        paraMkrSuggestRtPric.Value = SqlDataMediator.SqlSetInt64(scmAcOdSetDtWork.MkrSuggestRtPric); // メーカー希望小売価格
                        paraOpenPriceDiv.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.OpenPriceDiv); // オープン価格区分    
                        // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------------------<<<<<
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraAnsDeliDateDiv.Value = SqlDataMediator.SqlSetInt16(scmAcOdSetDtWork.AnsDeliDateDiv); // 回答納期区分
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraGoodsSpecialNtForFac.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsSpecialNtForFac); // 商品規格・特記事項(工場向け)
                        paraGoodsSpecialNtForCOw.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsSpecialNtForCOw); // 商品規格・特記事項(カーオーナー向け)
                        paraPrmSetDtlName2ForFac.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PrmSetDtlName2ForFac); // 優良設定詳細名称２(工場向け)
                        paraPrmSetDtlName2ForCOw.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PrmSetDtlName2ForCOw); // 優良設定詳細名称２(カーオーナー向け)
                        // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                        paraPrmSetDtlNo2.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.PrmSetDtlNo2); // 優良設定詳細コード２
                        paraPrmSetDtlName2.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PrmSetDtlName2); // 優良設定詳細名称２
                        paraStockStatusDiv.Value = SqlDataMediator.SqlSetInt16(scmAcOdSetDtWork.StockStatusDiv); // 在庫状況区分
                        // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
                        // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        paraInqBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqBlUtyPtThCd);  // 問発BL統一部品コード(スリーコード版)
                        paraInqBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.InqBlUtyPtSbCd);  // 問発BL統一部品サブコード
                        paraAnsBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.AnsBlUtyPtThCd);  // 回答BL統一部品コード(スリーコード版)
                        paraAnsBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.AnsBlUtyPtSbCd);  // 回答BL統一部品サブコード
                        paraAnsBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.AnsBLGoodsCode);  // 回答BL商品コード
                        paraAnsBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.AnsBLGoodsDrCode);  // 回答BL商品コード枝番
                        // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        sqlCommand.ExecuteNonQuery();
                        al.Add(scmAcOdSetDtWork);
                    }
                }

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            scmAcOdSetDtAsWorkList = al;

            return status;
        }
        // -- ADD 2011/08/10   ------ <<<<<<
        # endregion

        # region [ScmDeleteInsert]
        /// <summary>
        /// SCM関連データ情報をDeleteInsertします。
        /// </summary>
        /// <param name="retScmCsObj">DeleteInsertするSCM関連データ情報を含む CustomSerializeArrayList</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : retScmCsObj に格納されているSCM関連データ情報をDeleteInsertします。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.06.18</br>
        public int ScmDeleteInsert(ref object retScmCsObj)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlConnection sqlConnection = null;
            SqlTransaction sqlTransaction = null;

            try
            {
                // パラメータのキャスト
                CustomSerializeArrayList retScmCsList = retScmCsObj as CustomSerializeArrayList;

                // コネクション生成
                sqlConnection = this.CreateSqlConnection(true);

                // トランザクション開始
                sqlTransaction = this.CreateTransaction(ref sqlConnection);

                // write実行
                foreach (CustomSerializeArrayList retCsList in retScmCsList)
                {
                    CustomSerializeArrayList retScmCsListSub = retCsList;

                    status = this.ScmDeleteInsert(ref retScmCsListSub, ref sqlConnection, ref sqlTransaction);
                }
            }
            catch (Exception ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                base.WriteErrorLog(ex, errmsg, status);
            }
            finally
            {
                if (sqlTransaction != null)
                {
                    if (sqlTransaction.Connection != null)
                    {
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            // コミット
                            sqlTransaction.Commit();
                        }
                        else
                        {
                            // ロールバック
                            sqlTransaction.Rollback();
                        }
                    }

                    sqlTransaction.Dispose();
                    sqlTransaction = null;
                }

                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                    sqlConnection = null;
                }
            }

            return status;
        }

        /// <summary>
        /// SCM関連データ情報をDeleteInsertします。
        /// </summary>
        /// <param name="scmCsList">DeleteInsertするSCM関連データ情報を格納する CustomSerializeArrayList</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : scmCsList に格納されているSCM関連データ情報をDeleteInsertします。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.06.18</br>
        /// <br>Note       : BLP取消返品時に未回答の車両情報が消失する障害の対応</br>
        /// <br>Programmer : 32427 田村顕成</br>
        /// <br>Date       : 2023/04/06</br>
        public int ScmDeleteInsert(ref CustomSerializeArrayList scmCsList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            ArrayList scmAcOdrDataWorkList = null;
            ArrayList scmAcOdrDtCarWorkList = null;
            ArrayList scmAcOdrDtlAsWorkList = null;
            // -- ADD 2011/08/10   ------ >>>>>>
            ArrayList setWorkList = null;
            // -- ADD 2011/08/10   ------ <<<<<<

            //SCM受注データリスト
            SCMAcOdrDataWork scmAcOdrDataWork = ListUtils.Find(scmCsList, typeof(SCMAcOdrDataWork), ListUtils.FindType.Class) as SCMAcOdrDataWork;
            if (scmAcOdrDataWork != null)
            {
                scmAcOdrDataWorkList = new ArrayList();
                scmAcOdrDataWorkList.Add(scmAcOdrDataWork);
            }

            //SCM受注データ(車両情報)リスト
            SCMAcOdrDtCarWork scmAcOdrDtCarWork = ListUtils.Find(scmCsList, typeof(SCMAcOdrDtCarWork), ListUtils.FindType.Class) as SCMAcOdrDtCarWork;
            if (scmAcOdrDtCarWork != null)
            {
                scmAcOdrDtCarWorkList = new ArrayList();
                scmAcOdrDtCarWorkList.Add(scmAcOdrDtCarWork);
            }

            //SCM受注明細データ(回答)リスト
            scmAcOdrDtlAsWorkList = ListUtils.Find(scmCsList, typeof(SCMAcOdrDtlAsWork), ListUtils.FindType.Array) as ArrayList;

            // -- ADD 2011/08/10   ------ >>>>>>
            //セット情報
            setWorkList = ListUtils.Find(scmCsList, typeof(SCMAcOdSetDtWork), ListUtils.FindType.Array) as ArrayList;
            // -- ADD 2011/08/10   ------ <<<<<<
            

            //SCM受注データ
            if (scmAcOdrDataWorkList != null)
            {
                status = DelInsSCMAcOdrDataWorkProc(ref scmAcOdrDataWorkList, ref sqlConnection, ref sqlTransaction);
            }

            //SCM受注データ(車両情報)
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL && scmAcOdrDtCarWorkList != null)
            {
                // --- ADD 田村顕成 2023/04/06 BLP取消返品時障害の対応 ------>>>>> 
                bool RejectStatus = false;
                for (int i = 0; i < scmAcOdrDtlAsWorkList.Count; i++)
                {
                    //SCM受注明細(回答)のキャンセル区分が拒否かどうかを判断する
                    SCMAcOdrDtlAsWork list = (SCMAcOdrDtlAsWork)scmAcOdrDtlAsWorkList[i];
                    if (list.CancelCndtinDiv.Equals((short)CancelCndtinDiv.Rejected) == true) RejectStatus = true;
                }
                if (RejectStatus == true)
                {
                    //SCM受注明細(回答)のキャンセル区分が拒否の場合のみ、問合せ番号を条件に追加して車両情報をDeleteInsertする
                    status = DelInsSCMAcOdrDtCarWorkProc2(ref scmAcOdrDtCarWorkList, ref sqlConnection, ref sqlTransaction);
                }
                else
                {
                // --- ADD 田村顕成 2023/04/06 BLP取消返品時障害の対応 ------<<<<<
                    status = DelInsSCMAcOdrDtCarWorkProc(ref scmAcOdrDtCarWorkList, ref sqlConnection, ref sqlTransaction);
                }// --- ADD 田村顕成 2023/04/06 BLP取消返品時障害の対応
            }

            //SCM受注明細(回答)
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL && scmAcOdrDtlAsWorkList != null)
            {
                status = DelInsSCMAcOdrDtlAsWorkProc(ref scmAcOdrDtlAsWorkList, ref sqlConnection, ref sqlTransaction);
            }
            // -- ADD 2011/08/10   ------ >>>>>>
            //セット情報
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL && setWorkList != null)
            {
                status = DelInsSCMAcOdSetDataWorkProc(ref setWorkList, ref sqlConnection, ref sqlTransaction);
            }
            // -- ADD 2011/08/10   ------ <<<<<<
            return status;
        }

        /// <summary>
        /// SCM受注データ情報をDeleteInsertします。
        /// </summary>
        /// <param name="scmAcOdrDataWorkList">DeleteInsertするSCM受注データ情報を格納する ArrayList</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : scmAcOdrDataWorkList に格納されているSCM受注データ情報をDeleteInsertします。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.06.18</br>
        private int DelInsSCMAcOdrDataWorkProc(ref ArrayList scmAcOdrDataWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlCommand sqlCommand = null;

            ArrayList al = new ArrayList();

            try
            {
                if (scmAcOdrDataWorkList != null)
                {
                    string sqlText = string.Empty;
                    sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);

                    for (int i = 0; i < scmAcOdrDataWorkList.Count; i++)
                    {
                        SCMAcOdrDataWork sCMAcOdrDataWork = scmAcOdrDataWorkList[i] as SCMAcOdrDataWork;

                        sqlText = string.Empty;
                        sqlText += "  DELETE" + Environment.NewLine;
                        sqlText += "  FROM" + Environment.NewLine;
                        sqlText += "  SCMACODRDATARF" + Environment.NewLine;
                        sqlText += "  WHERE" + Environment.NewLine;
                        sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                        sqlText += "  AND INQOTHEREPCDRF = @FINDINQOTHEREPCD" + Environment.NewLine;
                        sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;
                        sqlText += "  AND UPDATEDATERF = 0" + Environment.NewLine;
                        sqlText += "  AND UPDATETIMERF = 0" + Environment.NewLine;
                        sqlText += "  AND ACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                        sqlText += "  AND SALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;
                        sqlCommand.CommandText = sqlText;

                        sqlCommand.Parameters.Clear();

                        //Prameterオブジェクトの作成
                        SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                        SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                        SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                        SqlParameter findInqOtherEpCd = sqlCommand.Parameters.Add("@FINDINQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                        SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                        SqlParameter findAcptAnOdrStatus = sqlCommand.Parameters.Add("@FINDACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                        SqlParameter findSalesSlipNum = sqlCommand.Parameters.Add("@FINDSALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号

                        //Parameterオブジェクトへ値設定
                        findEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.EnterpriseCode);  // 企業コード
                        findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOriginalEpCd);  // 問合せ元企業コード
                        findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        findInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOtherEpCd);  // 問合せ先企業コード
                        findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOtherSecCd);  // 問合せ先拠点コード
                        findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.AcptAnOdrStatus);  // 受注ステータス
                        findSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.SalesSlipNum);  // 売上伝票番号

                        sqlCommand.ExecuteNonQuery();

                        sqlCommand.Parameters.Clear();
                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------>>>>>
                        // 論理削除済(LogicalDeleteCode=1)の時Insertしない
                        if (sCMAcOdrDataWork.LogicalDeleteCode == 0)
                        {
                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------<<<<<
                            # region [INSERT文]
                            sqlText = string.Empty;
                            sqlText += "  INSERT INTO SCMACODRDATARF (" + Environment.NewLine;
                            sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                            sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                            sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                            sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                            sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                            sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                            sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                            sqlText += " ,CUSTOMERCODERF" + Environment.NewLine;
                            sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                            sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                            sqlText += " ,ANSWERDIVCDRF" + Environment.NewLine;
                            sqlText += " ,JUDGEMENTDATERF" + Environment.NewLine;
                            sqlText += " ,INQORDNOTERF" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILERF" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILENMRF" + Environment.NewLine;
                            sqlText += " ,INQEMPLOYEECDRF" + Environment.NewLine;
                            sqlText += " ,INQEMPLOYEENMRF" + Environment.NewLine;
                            sqlText += " ,ANSEMPLOYEECDRF" + Environment.NewLine;
                            sqlText += " ,ANSEMPLOYEENMRF" + Environment.NewLine;
                            sqlText += " ,INQUIRYDATERF" + Environment.NewLine;
                            sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                            sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                            sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;
                            sqlText += " ,SALESSUBTOTALTAXRF" + Environment.NewLine;
                            sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                            sqlText += " ,INQORDANSDIVCDRF" + Environment.NewLine;
                            sqlText += " ,RECEIVEDATETIMERF" + Environment.NewLine;
                            // 2010/05/26 >>>
                            //sqlText += " ,ANSWERCREATEDIVRF)" + Environment.NewLine;
                            sqlText += " ,ANSWERCREATEDIVRF" + Environment.NewLine;
                            sqlText += " ,CANCELDIVRF" + Environment.NewLine;
                            sqlText += " ,CMTCOOPRTDIVRF" + Environment.NewLine;
                            sqlText += " ,SFPMCPRTINSTSLIPNORF" + Environment.NewLine;  //ADD 2011/05/20
                            // -- ADD 2011/08/10   ------ >>>>>>
                            sqlText += " ,ACCEPTORORDERKINDRF" + Environment.NewLine;     // 受発注種別 0:通常,1:PCC-UOE
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,TABUSEDIVRF" + Environment.NewLine;
                            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                            sqlText += " ,CARMNGCODERF" + Environment.NewLine;
                            // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                            sqlText += " ,AUTOANSMTHDRF" + Environment.NewLine;
                            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                            sqlText += " )" + Environment.NewLine;
                            // 2010/05/26 <<<
                            sqlText += "  VALUES" + Environment.NewLine;
                            sqlText += "  (@CREATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                            sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                            sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                            sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALEPCD" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALSECCD" + Environment.NewLine;
                            sqlText += " ,@INQOTHEREPCD" + Environment.NewLine;
                            sqlText += " ,@INQOTHERSECCD" + Environment.NewLine;
                            sqlText += " ,@INQUIRYNUMBER" + Environment.NewLine;
                            sqlText += " ,@CUSTOMERCODE" + Environment.NewLine;
                            sqlText += " ,@UPDATEDATE" + Environment.NewLine;
                            sqlText += " ,@UPDATETIME" + Environment.NewLine;
                            sqlText += " ,@ANSWERDIVCD" + Environment.NewLine;
                            sqlText += " ,@JUDGEMENTDATE" + Environment.NewLine;
                            sqlText += " ,@INQORDNOTE" + Environment.NewLine;
                            sqlText += " ,@APPENDINGFILE" + Environment.NewLine;
                            sqlText += " ,@APPENDINGFILENM" + Environment.NewLine;
                            sqlText += " ,@INQEMPLOYEECD" + Environment.NewLine;
                            sqlText += " ,@INQEMPLOYEENM" + Environment.NewLine;
                            sqlText += " ,@ANSEMPLOYEECD" + Environment.NewLine;
                            sqlText += " ,@ANSEMPLOYEENM" + Environment.NewLine;
                            sqlText += " ,@INQUIRYDATE" + Environment.NewLine;
                            sqlText += " ,@ACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += " ,@SALESSLIPNUM" + Environment.NewLine;
                            sqlText += " ,@SALESTOTALTAXINC" + Environment.NewLine;
                            sqlText += " ,@SALESSUBTOTALTAX" + Environment.NewLine;
                            sqlText += " ,@INQORDDIVCD" + Environment.NewLine;
                            sqlText += " ,@INQORDANSDIVCD" + Environment.NewLine;
                            sqlText += " ,@RECEIVEDATETIME" + Environment.NewLine;
                            // 2010/05/26 >>>
                            //sqlText += " ,@ANSWERCREATEDIV)" + Environment.NewLine;
                            sqlText += " ,@ANSWERCREATEDIV" + Environment.NewLine;
                            sqlText += " ,@CANCELDIV" + Environment.NewLine;
                            sqlText += " ,@CMTCOOPRTDIV" + Environment.NewLine;
                            sqlText += " ,@SFPMCPRTINSTSLIPNO" + Environment.NewLine;  //ADD 2011/05/20
                            // -- ADD 2011/08/10   ------ >>>>>>
                            sqlText += " ,@ACCEPTORORDERKINDRF" + Environment.NewLine;     // 受発注種別 0:通常,1:PCC-UOE
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@TABUSEDIV" + Environment.NewLine;
                            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                            sqlText += " ,@CARMNGCODE" + Environment.NewLine;
                            // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                            sqlText += " ,@AUTOANSMTHD" + Environment.NewLine;
                            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                            sqlText += " )" + Environment.NewLine;
                            // 2010/05/26 <<<
                            sqlCommand.CommandText = sqlText;
                            # endregion

                            // 登録ヘッダ情報を設定
                            object obj = (object)this;
                            IFileHeader flhd = (IFileHeader)sCMAcOdrDataWork;
                            FileHeader fileHeader = new FileHeader(obj);
                            fileHeader.SetInsertHeader(ref flhd, obj);

                            //Parameterオブジェクトの作成(更新用)
                            SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);  // 作成日時
                            SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);  // 更新日時
                            SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                            SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);  // GUID
                            SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);  // 更新従業員コード
                            SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);  // 更新アセンブリID1
                            SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);  // 更新アセンブリID2
                            SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);  // 論理削除区分
                            SqlParameter paraInqOriginalEpCd = sqlCommand.Parameters.Add("@INQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                            SqlParameter paraInqOriginalSecCd = sqlCommand.Parameters.Add("@INQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                            SqlParameter paraInqOtherEpCd = sqlCommand.Parameters.Add("@INQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                            SqlParameter paraInqOtherSecCd = sqlCommand.Parameters.Add("@INQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                            SqlParameter paraInquiryNumber = sqlCommand.Parameters.Add("@INQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                            SqlParameter paraCustomerCode = sqlCommand.Parameters.Add("@CUSTOMERCODE", SqlDbType.Int);  // 得意先コード
                            SqlParameter paraUpdateDate = sqlCommand.Parameters.Add("@UPDATEDATE", SqlDbType.Int);  // 更新年月日
                            SqlParameter paraUpdateTime = sqlCommand.Parameters.Add("@UPDATETIME", SqlDbType.Int);  // 更新時間
                            SqlParameter paraAnswerDivCd = sqlCommand.Parameters.Add("@ANSWERDIVCD", SqlDbType.Int);  // 回答区分
                            SqlParameter paraJudgementDate = sqlCommand.Parameters.Add("@JUDGEMENTDATE", SqlDbType.Int);  // 確定日
                            SqlParameter paraInqOrdNote = sqlCommand.Parameters.Add("@INQORDNOTE", SqlDbType.NVarChar);  // 問合せ・発注備考
                            SqlParameter paraAppendingFile = sqlCommand.Parameters.Add("@APPENDINGFILE", SqlDbType.VarBinary);  // 添付ファイル
                            SqlParameter paraAppendingFileNm = sqlCommand.Parameters.Add("@APPENDINGFILENM", SqlDbType.NVarChar);  // 添付ファイル名
                            SqlParameter paraInqEmployeeCd = sqlCommand.Parameters.Add("@INQEMPLOYEECD", SqlDbType.NChar);  // 問合せ従業員コード
                            SqlParameter paraInqEmployeeNm = sqlCommand.Parameters.Add("@INQEMPLOYEENM", SqlDbType.NVarChar);  // 問合せ従業員名称
                            SqlParameter paraAnsEmployeeCd = sqlCommand.Parameters.Add("@ANSEMPLOYEECD", SqlDbType.NChar);  // 回答従業員コード
                            SqlParameter paraAnsEmployeeNm = sqlCommand.Parameters.Add("@ANSEMPLOYEENM", SqlDbType.NVarChar);  // 回答従業員名称
                            SqlParameter paraInquiryDate = sqlCommand.Parameters.Add("@INQUIRYDATE", SqlDbType.Int);  // 問合せ日
                            SqlParameter paraAcptAnOdrStatus = sqlCommand.Parameters.Add("@ACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                            SqlParameter paraSalesSlipNum = sqlCommand.Parameters.Add("@SALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号
                            SqlParameter paraSalesTotalTaxInc = sqlCommand.Parameters.Add("@SALESTOTALTAXINC", SqlDbType.BigInt);  // 売上伝票合計（税込み）
                            SqlParameter paraSalesSubtotalTax = sqlCommand.Parameters.Add("@SALESSUBTOTALTAX", SqlDbType.BigInt);  // 売上小計（税）
                            SqlParameter paraInqOrdDivCd = sqlCommand.Parameters.Add("@INQORDDIVCD", SqlDbType.Int);  // 問合せ・発注種別
                            SqlParameter paraInqOrdAnsDivCd = sqlCommand.Parameters.Add("@INQORDANSDIVCD", SqlDbType.Int);  // 問発・回答種別
                            SqlParameter paraReceiveDateTime = sqlCommand.Parameters.Add("@RECEIVEDATETIME", SqlDbType.BigInt);  // 受信日時
                            SqlParameter paraAnswerCreateDiv = sqlCommand.Parameters.Add("@ANSWERCREATEDIV", SqlDbType.Int);  // 回答作成区分
                            // 2010/05/26 >>>
                            SqlParameter paraCancelDiv = sqlCommand.Parameters.Add("@CANCELDIV", SqlDbType.SmallInt);  // キャンセル区分
                            SqlParameter paraCMTCooprtDiv = sqlCommand.Parameters.Add("@CMTCOOPRTDIV", SqlDbType.SmallInt);  // CMT連携区分
                            // 2010/05/26 <<<
                            SqlParameter paraSfPmCprtInstSlipNo = sqlCommand.Parameters.Add("@SFPMCPRTINSTSLIPNO", SqlDbType.NVarChar);  // SF-PM連携指示書番号  //ADD 2011/05/20
                            // -- ADD 2011/08/10   ------ >>>>>>
                            SqlParameter paraAcceptOrOrderKind = sqlCommand.Parameters.Add("@ACCEPTORORDERKINDRF", SqlDbType.NVarChar); // 受発注種別 0:通常,1:PCC-UOE
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            SqlParameter paraTabUseDiv = sqlCommand.Parameters.Add("@TABUSEDIV", SqlDbType.Int);  // タブレット使用区分
                            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                            SqlParameter paraCarMngCode = sqlCommand.Parameters.Add("@CARMNGCODE", SqlDbType.NChar);  // 車両管理コード
                            // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                            SqlParameter paraAutoAnsMthd = sqlCommand.Parameters.Add("@AUTOANSMTHD", SqlDbType.SmallInt);  // 自動回答方式
                            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<

                            //Parameterオブジェクトへ値設定
                            paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDataWork.CreateDateTime);  // 作成日時
                            paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDataWork.UpdateDateTime);  // 更新日時
                            paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.EnterpriseCode);  // 企業コード
                            paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDataWork.FileHeaderGuid);  // GUID
                            paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.UpdEmployeeCode);  // 更新従業員コード
                            paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.UpdAssemblyId1);  // 更新アセンブリID1
                            paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.UpdAssemblyId2);  // 更新アセンブリID2
                            paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.LogicalDeleteCode);  // 論理削除区分
                            paraInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOriginalEpCd);  // 問合せ元企業コード
                            paraInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOriginalSecCd);  // 問合せ元拠点コード
                            paraInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOtherEpCd);  // 問合せ先企業コード
                            paraInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOtherSecCd);  // 問合せ先拠点コード
                            paraInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDataWork.InquiryNumber);  // 問合せ番号
                            paraCustomerCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.CustomerCode);  // 得意先コード
                            if (sCMAcOdrDataWork.UpdateDate == DateTime.MinValue)
                            {
                                paraUpdateDate.Value = 0;  // 更新年月日
                            }
                            else
                            {
                                paraUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDataWork.UpdateDate);  // 更新年月日
                            }
                            paraUpdateTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.UpdateTime);  // 更新時間
                            paraAnswerDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.AnswerDivCd);  // 回答区分
                            paraJudgementDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDataWork.JudgementDate);  // 確定日
                            paraInqOrdNote.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqOrdNote);  // 問合せ・発注備考
                            paraAppendingFile.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDataWork.AppendingFile);  // 添付ファイル
                            paraAppendingFileNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.AppendingFileNm);  // 添付ファイル名
                            paraInqEmployeeCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqEmployeeCd);  // 問合せ従業員コード
                            paraInqEmployeeNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.InqEmployeeNm);  // 問合せ従業員名称
                            paraAnsEmployeeCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.AnsEmployeeCd);  // 回答従業員コード
                            paraAnsEmployeeNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.AnsEmployeeNm);  // 回答従業員名称
                            paraInquiryDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDataWork.InquiryDate);  // 問合せ日
                            paraAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.AcptAnOdrStatus);  // 受注ステータス
                            paraSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.SalesSlipNum);  // 売上伝票番号
                            paraSalesTotalTaxInc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDataWork.SalesTotalTaxInc);  // 売上伝票合計（税込み）
                            paraSalesSubtotalTax.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDataWork.SalesSubtotalTax);  // 売上小計（税）
                            paraInqOrdDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.InqOrdDivCd);  // 問合せ・発注種別
                            paraInqOrdAnsDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.InqOrdAnsDivCd);  // 問発・回答種別
                            paraReceiveDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDataWork.ReceiveDateTime);  // 受信日時
                            paraAnswerCreateDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.AnswerCreateDiv);  // 回答作成区分
                            // 2010/05/26 >>>
                            paraCancelDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDataWork.CancelDiv);  // キャンセル区分
                            paraCMTCooprtDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDataWork.CMTCooprtDiv);  // CMT連携区分
                            // 2010/05/26 <<<
                            paraSfPmCprtInstSlipNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.SfPmCprtInstSlipNo);  // SF-PM連携指示書番号  //ADD 2011/05/20
                            // -- ADD 2011/08/10   ------ >>>>>>
                            paraAcceptOrOrderKind.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDataWork.AcceptOrOrderKind);      // 受発注種別 0:通常,1:PCC-UOE
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            paraTabUseDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDataWork.TabUseDiv);  // タブレット使用区分
                            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                            paraCarMngCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDataWork.CarMngCode);  // 車両管理コード
                            // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                            paraAutoAnsMthd.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDataWork.AutoAnsMthd);  // 自動回答方式
                            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<

                            sqlCommand.ExecuteNonQuery();
                            al.Add(sCMAcOdrDataWork);
                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------>>>>>
                        }
                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------<<<<<
                    }
                }

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            scmAcOdrDataWorkList = al;

            return status;
        }

        /// <summary>
        /// SCM受注データ(車両情報)情報をDeleteInsertします。
        /// </summary>
        /// <param name="scmAcOdrDtCarWorkList">DeleteInsertするSCM受注データ(車両情報)情報を格納する ArrayList</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : scmAcOdrDtCarWorkList に格納されているSCM受注データ(車両情報)情報をDeleteInsertします。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.06.18</br>
        private int DelInsSCMAcOdrDtCarWorkProc(ref ArrayList scmAcOdrDtCarWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlCommand sqlCommand = null;

            ArrayList al = new ArrayList();

            try
            {
                if (scmAcOdrDtCarWorkList != null)
                {
                    string sqlText = string.Empty;
                    sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);

                    for (int i = 0; i < scmAcOdrDtCarWorkList.Count; i++)
                    {
                        SCMAcOdrDtCarWork sCMAcOdrDtCarWork = scmAcOdrDtCarWorkList[i] as SCMAcOdrDtCarWork;

                        sqlText = string.Empty;
                        sqlText += "  DELETE" + Environment.NewLine;
                        sqlText += "  FROM" + Environment.NewLine;
                        sqlText += "  SCMACODRDTCARRF" + Environment.NewLine;
                        sqlText += "  WHERE" + Environment.NewLine;
                        sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                        sqlText += "  AND ACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                        sqlText += "  AND SALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;
                        sqlCommand.CommandText = sqlText;
                        
                        sqlCommand.Parameters.Clear();
                        //Prameterオブジェクトの作成
                        SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                        SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                        SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                        SqlParameter findAcptAnOdrStatus = sqlCommand.Parameters.Add("@FINDACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                        SqlParameter findSalesSlipNum = sqlCommand.Parameters.Add("@FINDSALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号

                        //Parameterオブジェクトへ値設定
                        findEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EnterpriseCode);  // 企業コード
                        findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.InqOriginalEpCd);  // 問合せ元企業コード
                        findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.AcptAnOdrStatus);  // 受注ステータス
                        findSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.SalesSlipNum);  // 売上伝票番号

                        sqlCommand.ExecuteNonQuery();

                        sqlCommand.Parameters.Clear();
                        sqlText = string.Empty;

                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------>>>>>
                        // 論理削除済(LogicalDeleteCode=1)の時Insertしない
                        if (sCMAcOdrDtCarWork.LogicalDeleteCode == 0)
                        {
                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------<<<<<
                            # region [INSERT文]
                            sqlText += "  INSERT INTO SCMACODRDTCARRF (" + Environment.NewLine;
                            sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                            sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                            sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                            sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                            sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE1CODERF" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE1NAMERF" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE2RF" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE3RF" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE4RF" + Environment.NewLine;
                            sqlText += " ,MODELDESIGNATIONNORF" + Environment.NewLine;
                            sqlText += " ,CATEGORYNORF" + Environment.NewLine;
                            sqlText += " ,MAKERCODERF" + Environment.NewLine;
                            sqlText += " ,MODELCODERF" + Environment.NewLine;
                            sqlText += " ,MODELSUBCODERF" + Environment.NewLine;
                            sqlText += " ,MODELNAMERF" + Environment.NewLine;
                            sqlText += " ,CARINSPECTCERTMODELRF" + Environment.NewLine;
                            sqlText += " ,FULLMODELRF" + Environment.NewLine;
                            sqlText += " ,FRAMENORF" + Environment.NewLine;
                            sqlText += " ,FRAMEMODELRF" + Environment.NewLine;
                            sqlText += " ,CHASSISNORF" + Environment.NewLine;
                            sqlText += " ,CARPROPERNORF" + Environment.NewLine;
                            sqlText += " ,PRODUCETYPEOFYEARNUMRF" + Environment.NewLine;
                            sqlText += " ,COMMENTRF" + Environment.NewLine;
                            sqlText += " ,RPCOLORCODERF" + Environment.NewLine;
                            sqlText += " ,COLORNAME1RF" + Environment.NewLine;
                            sqlText += " ,TRIMCODERF" + Environment.NewLine;
                            sqlText += " ,TRIMNAMERF" + Environment.NewLine;
                            sqlText += " ,MILEAGERF" + Environment.NewLine;
                            sqlText += " ,EQUIPOBJRF" + Environment.NewLine;
                            sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                            sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                            // -- ADD 2011/08/10   ------ >>>>>>
                            sqlText += " ,CARNORF" + Environment.NewLine;
                            sqlText += " ,MAKERNAMERF" + Environment.NewLine;
                            sqlText += " ,GRADENAMERF" + Environment.NewLine;
                            sqlText += " ,BODYNAMERF" + Environment.NewLine;
                            sqlText += " ,DOORCOUNTRF" + Environment.NewLine;
                            sqlText += " ,ENGINEMODELNMRF" + Environment.NewLine;
                            sqlText += " ,CMNNMENGINEDISPLACERF" + Environment.NewLine;
                            sqlText += " ,ENGINEMODELRF" + Environment.NewLine;
                            sqlText += " ,NUMBEROFGEARRF" + Environment.NewLine;
                            sqlText += " ,GEARNMRF" + Environment.NewLine;
                            sqlText += " ,EDIVNMRF" + Environment.NewLine;
                            sqlText += " ,TRANSMISSIONNMRF" + Environment.NewLine;
                            // UPD 2012/05/31 -------------------->>>>>
                            //sqlText += " ,SHIFTNMRF)" + Environment.NewLine;
                            sqlText += " ,SHIFTNMRF" + Environment.NewLine;
                            // UPD 2012/05/31 --------------------<<<<<
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // ADD 2012/05/31 -------------------->>>>>
                            sqlText += " ,FIRSTENTRYDATENUMTYPRF" + Environment.NewLine;
                            sqlText += " ,CARADDINFRF" + Environment.NewLine;
                            sqlText += " ,EQUIPPRTSOBJRF" + Environment.NewLine;
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,CARMNGCODERF" + Environment.NewLine;
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                            sqlText += " ,EXPECTEDCEDATERF" + Environment.NewLine;
                            // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<
                            sqlText += " )" + Environment.NewLine;
                            // ADD 2012/05/31 --------------------<<<<<
                            sqlText += "  VALUES" + Environment.NewLine;
                            sqlText += "  (@CREATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                            sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                            sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                            sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALEPCD" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALSECCD" + Environment.NewLine;
                            sqlText += " ,@INQUIRYNUMBER" + Environment.NewLine;
                            sqlText += " ,@NUMBERPLATE1CODE" + Environment.NewLine;
                            sqlText += " ,@NUMBERPLATE1NAME" + Environment.NewLine;
                            sqlText += " ,@NUMBERPLATE2" + Environment.NewLine;
                            sqlText += " ,@NUMBERPLATE3" + Environment.NewLine;
                            sqlText += " ,@NUMBERPLATE4" + Environment.NewLine;
                            sqlText += " ,@MODELDESIGNATIONNO" + Environment.NewLine;
                            sqlText += " ,@CATEGORYNO" + Environment.NewLine;
                            sqlText += " ,@MAKERCODE" + Environment.NewLine;
                            sqlText += " ,@MODELCODE" + Environment.NewLine;
                            sqlText += " ,@MODELSUBCODE" + Environment.NewLine;
                            sqlText += " ,@MODELNAME" + Environment.NewLine;
                            sqlText += " ,@CARINSPECTCERTMODEL" + Environment.NewLine;
                            sqlText += " ,@FULLMODEL" + Environment.NewLine;
                            sqlText += " ,@FRAMENO" + Environment.NewLine;
                            sqlText += " ,@FRAMEMODEL" + Environment.NewLine;
                            sqlText += " ,@CHASSISNO" + Environment.NewLine;
                            sqlText += " ,@CARPROPERNO" + Environment.NewLine;
                            sqlText += " ,@PRODUCETYPEOFYEARNUM" + Environment.NewLine;
                            sqlText += " ,@COMMENT" + Environment.NewLine;
                            sqlText += " ,@RPCOLORCODE" + Environment.NewLine;
                            sqlText += " ,@COLORNAME1" + Environment.NewLine;
                            sqlText += " ,@TRIMCODE" + Environment.NewLine;
                            sqlText += " ,@TRIMNAME" + Environment.NewLine;
                            sqlText += " ,@MILEAGE" + Environment.NewLine;
                            sqlText += " ,@EQUIPOBJ" + Environment.NewLine;
                            sqlText += " ,@ACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += " ,@SALESSLIPNUM" + Environment.NewLine;
                            // -- ADD 2011/08/10   ------ >>>>>>
                            sqlText += " ,@CARNORF" + Environment.NewLine;
                            sqlText += " ,@MAKERNAMERF" + Environment.NewLine;
                            sqlText += " ,@GRADENAMERF" + Environment.NewLine;
                            sqlText += " ,@BODYNAMERF" + Environment.NewLine;
                            sqlText += " ,@DOORCOUNTRF" + Environment.NewLine;
                            sqlText += " ,@ENGINEMODELNMRF" + Environment.NewLine;
                            sqlText += " ,@CMNNMENGINEDISPLACERF" + Environment.NewLine;
                            sqlText += " ,@ENGINEMODELRF" + Environment.NewLine;
                            sqlText += " ,@NUMBEROFGEARRF" + Environment.NewLine;
                            sqlText += " ,@GEARNMRF" + Environment.NewLine;
                            sqlText += " ,@EDIVNMRF" + Environment.NewLine;
                            sqlText += " ,@TRANSMISSIONNMRF" + Environment.NewLine;
                            // UPD 2012/05/31 -------------------->>>>>
                            //sqlText += " ,@SHIFTNMRF)" + Environment.NewLine;
                            sqlText += " ,@SHIFTNMRF" + Environment.NewLine;
                            // UPD 2012/05/31 --------------------<<<<<
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // ADD 2012/05/31 -------------------->>>>>
                            sqlText += " ,@FIRSTENTRYDATENUMTYPRF" + Environment.NewLine;
                            sqlText += " ,@CARADDINFRF" + Environment.NewLine;
                            sqlText += " ,@EQUIPPRTSOBJRF" + Environment.NewLine;
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@CARMNGCODERF" + Environment.NewLine;
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                            sqlText += " ,@EXPECTEDCEDATERF" + Environment.NewLine;
                            // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<
                            sqlText += " )" + Environment.NewLine;
                            // ADD 2012/05/31 --------------------<<<<<

                            sqlCommand.CommandText = sqlText;
                            # endregion

                            // 登録ヘッダ情報を設定
                            object obj = (object)this;
                            IFileHeader flhd = (IFileHeader)sCMAcOdrDtCarWork;
                            FileHeader fileHeader = new FileHeader(obj);
                            fileHeader.SetInsertHeader(ref flhd, obj);

                            //Parameterオブジェクトの作成(更新用)
                            SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);  // 作成日時
                            SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);  // 更新日時
                            SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                            SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);  // GUID
                            SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);  // 更新従業員コード
                            SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);  // 更新アセンブリID1
                            SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);  // 更新アセンブリID2
                            SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);  // 論理削除区分
                            SqlParameter paraInqOriginalEpCd = sqlCommand.Parameters.Add("@INQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                            SqlParameter paraInqOriginalSecCd = sqlCommand.Parameters.Add("@INQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                            SqlParameter paraInquiryNumber = sqlCommand.Parameters.Add("@INQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                            SqlParameter paraNumberPlate1Code = sqlCommand.Parameters.Add("@NUMBERPLATE1CODE", SqlDbType.Int);  // 陸運事務所番号
                            SqlParameter paraNumberPlate1Name = sqlCommand.Parameters.Add("@NUMBERPLATE1NAME", SqlDbType.NVarChar);  // 陸運事務局名称
                            SqlParameter paraNumberPlate2 = sqlCommand.Parameters.Add("@NUMBERPLATE2", SqlDbType.NVarChar);  // 車両登録番号（種別）
                            SqlParameter paraNumberPlate3 = sqlCommand.Parameters.Add("@NUMBERPLATE3", SqlDbType.NVarChar);  // 車両登録番号（カナ）
                            SqlParameter paraNumberPlate4 = sqlCommand.Parameters.Add("@NUMBERPLATE4", SqlDbType.Int);  // 車両登録番号（プレート番号）
                            SqlParameter paraModelDesignationNo = sqlCommand.Parameters.Add("@MODELDESIGNATIONNO", SqlDbType.Int);  // 型式指定番号
                            SqlParameter paraCategoryNo = sqlCommand.Parameters.Add("@CATEGORYNO", SqlDbType.Int);  // 類別番号
                            SqlParameter paraMakerCode = sqlCommand.Parameters.Add("@MAKERCODE", SqlDbType.Int);  // メーカーコード
                            SqlParameter paraModelCode = sqlCommand.Parameters.Add("@MODELCODE", SqlDbType.Int);  // 車種コード
                            SqlParameter paraModelSubCode = sqlCommand.Parameters.Add("@MODELSUBCODE", SqlDbType.Int);  // 車種サブコード
                            SqlParameter paraModelName = sqlCommand.Parameters.Add("@MODELNAME", SqlDbType.NVarChar);  // 車種名
                            SqlParameter paraCarInspectCertModel = sqlCommand.Parameters.Add("@CARINSPECTCERTMODEL", SqlDbType.NVarChar);  // 車検証型式
                            SqlParameter paraFullModel = sqlCommand.Parameters.Add("@FULLMODEL", SqlDbType.NVarChar);  // 型式（フル型）
                            SqlParameter paraFrameNo = sqlCommand.Parameters.Add("@FRAMENO", SqlDbType.NVarChar);  // 車台番号
                            SqlParameter paraFrameModel = sqlCommand.Parameters.Add("@FRAMEMODEL", SqlDbType.NVarChar);  // 車台型式
                            SqlParameter paraChassisNo = sqlCommand.Parameters.Add("@CHASSISNO", SqlDbType.NVarChar);  // シャシーNo
                            SqlParameter paraCarProperNo = sqlCommand.Parameters.Add("@CARPROPERNO", SqlDbType.Int);  // 車両固有番号
                            SqlParameter paraProduceTypeOfYearNum = sqlCommand.Parameters.Add("@PRODUCETYPEOFYEARNUM", SqlDbType.Int);  // 生産年式（NUMタイプ）
                            SqlParameter paraComment = sqlCommand.Parameters.Add("@COMMENT", SqlDbType.NVarChar);  // コメント
                            SqlParameter paraRpColorCode = sqlCommand.Parameters.Add("@RPCOLORCODE", SqlDbType.NVarChar);  // リペアカラーコード
                            SqlParameter paraColorName1 = sqlCommand.Parameters.Add("@COLORNAME1", SqlDbType.NVarChar);  // カラー名称1
                            SqlParameter paraTrimCode = sqlCommand.Parameters.Add("@TRIMCODE", SqlDbType.NVarChar);  // トリムコード
                            SqlParameter paraTrimName = sqlCommand.Parameters.Add("@TRIMNAME", SqlDbType.NVarChar);  // トリム名称
                            SqlParameter paraMileage = sqlCommand.Parameters.Add("@MILEAGE", SqlDbType.Int);  // 車両走行距離
                            SqlParameter paraEquipObj = sqlCommand.Parameters.Add("@EQUIPOBJ", SqlDbType.VarBinary);  // 装備オブジェクト
                            SqlParameter paraAcptAnOdrStatus = sqlCommand.Parameters.Add("@ACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                            SqlParameter paraSalesSlipNum = sqlCommand.Parameters.Add("@SALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号
                            // -- ADD 2011/08/10   ------ >>>>>>
                            SqlParameter paraCarNo = sqlCommand.Parameters.Add("@CARNORF", SqlDbType.NChar);  // 号車
                            SqlParameter paraMakerName = sqlCommand.Parameters.Add("@MAKERNAMERF", SqlDbType.NChar);  // メーカー名称
                            SqlParameter paraGradeName = sqlCommand.Parameters.Add("@GRADENAMERF", SqlDbType.NChar);  // グレード名称
                            SqlParameter paraBodyName = sqlCommand.Parameters.Add("@BODYNAMERF", SqlDbType.NChar);  // ボディー名称
                            SqlParameter paraDoorCount = sqlCommand.Parameters.Add("@DOORCOUNTRF", SqlDbType.Int);  // ドア数
                            SqlParameter paraEngineModelNm = sqlCommand.Parameters.Add("@ENGINEMODELNMRF", SqlDbType.NChar);  // エンジン型式名称
                            SqlParameter paraCmnNmEngineDisPlace = sqlCommand.Parameters.Add("@CMNNMENGINEDISPLACERF", SqlDbType.Int);  // 通称排気量
                            SqlParameter paraEngineModel = sqlCommand.Parameters.Add("@ENGINEMODELRF", SqlDbType.NChar);  // 原動機型式（エンジン）
                            SqlParameter paraNumberOfGear = sqlCommand.Parameters.Add("@NUMBEROFGEARRF", SqlDbType.Int); // 変速段数
                            SqlParameter paraGearNm = sqlCommand.Parameters.Add("@GEARNMRF", SqlDbType.NChar);  // 変速機名称
                            SqlParameter paraEDivNm = sqlCommand.Parameters.Add("@EDIVNMRF", SqlDbType.NChar);  // E区分名称
                            SqlParameter parTransmissionNm = sqlCommand.Parameters.Add("@TRANSMISSIONNMRF", SqlDbType.NChar);  // ミッション名称
                            SqlParameter parShiftNm = sqlCommand.Parameters.Add("@SHIFTNMRF", SqlDbType.NChar);  // シフト名称
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // ADD 2012/05/31 ------------->>>>>
                            SqlParameter paraFirstEntryDateNumTyp = sqlCommand.Parameters.Add("@FIRSTENTRYDATENUMTYPRF", SqlDbType.Int);  // 初年度（NUMタイプ）
                            SqlParameter paraCarAddInf = sqlCommand.Parameters.Add("@CARADDINFRF", SqlDbType.VarBinary);  // 車両付加情報オブジェクト
                            SqlParameter paraEquipPrtsObj = sqlCommand.Parameters.Add("@EQUIPPRTSOBJRF", SqlDbType.VarBinary);  // 装備部品オブジェクト
                            // ADD 2012/05/31 -------------<<<<<

                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            SqlParameter paraCarMngCode = sqlCommand.Parameters.Add("@CARMNGCODERF", SqlDbType.NVarChar);  // 車両管理コード
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<

                            // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                            SqlParameter paraExpectedCeDate = sqlCommand.Parameters.Add("@EXPECTEDCEDATERF", SqlDbType.Int);  // 入庫予定日
                            // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<

                            //Parameterオブジェクトへ値設定(更新用)
                            paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtCarWork.CreateDateTime);  // 作成日時
                            paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtCarWork.UpdateDateTime);  // 更新日時
                            paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EnterpriseCode);  // 企業コード
                            paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtCarWork.FileHeaderGuid);  // GUID
                            paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.UpdEmployeeCode);  // 更新従業員コード
                            paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.UpdAssemblyId1);  // 更新アセンブリID1
                            paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.UpdAssemblyId2);  // 更新アセンブリID2
                            paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.LogicalDeleteCode);  // 論理削除区分
                            paraInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.InqOriginalEpCd);  // 問合せ元企業コード
                            paraInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.InqOriginalSecCd);  // 問合せ元拠点コード
                            paraInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtCarWork.InquiryNumber);  // 問合せ番号
                            paraNumberPlate1Code.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.NumberPlate1Code);  // 陸運事務所番号
                            paraNumberPlate1Name.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.NumberPlate1Name);  // 陸運事務局名称
                            paraNumberPlate2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.NumberPlate2);  // 車両登録番号（種別）
                            paraNumberPlate3.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.NumberPlate3);  // 車両登録番号（カナ）
                            paraNumberPlate4.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.NumberPlate4);  // 車両登録番号（プレート番号）
                            paraModelDesignationNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.ModelDesignationNo);  // 型式指定番号
                            paraCategoryNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.CategoryNo);  // 類別番号
                            paraMakerCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.MakerCode);  // メーカーコード
                            paraModelCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.ModelCode);  // 車種コード
                            paraModelSubCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.ModelSubCode);  // 車種サブコード
                            paraModelName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.ModelName);  // 車種名
                            paraCarInspectCertModel.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.CarInspectCertModel);  // 車検証型式
                            paraFullModel.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.FullModel);  // 型式（フル型）
                            paraFrameNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.FrameNo);  // 車台番号
                            paraFrameModel.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.FrameModel);  // 車台型式
                            paraChassisNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.ChassisNo);  // シャシーNo
                            paraCarProperNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.CarProperNo);  // 車両固有番号
                            paraProduceTypeOfYearNum.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.ProduceTypeOfYearNum);  // 生産年式（NUMタイプ）
                            paraComment.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.Comment);  // コメント
                            paraRpColorCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.RpColorCode);  // リペアカラーコード
                            paraColorName1.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.ColorName1);  // カラー名称1
                            paraTrimCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.TrimCode);  // トリムコード
                            paraTrimName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.TrimName);  // トリム名称
                            paraMileage.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.Mileage);  // 車両走行距離
                            paraEquipObj.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDtCarWork.EquipObj);  // 装備オブジェクト
                            paraAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.AcptAnOdrStatus);  // 受注ステータス
                            paraSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.SalesSlipNum);  // 売上伝票番号
                            // -- ADD 2011/08/10   ------ >>>>>>
                            paraCarNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.CarNo);  // 号車
                            paraMakerName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.MakerName);  // メーカー名称
                            paraGradeName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.GradeName);  // グレード名称
                            paraBodyName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.BodyName);  // ボディー名称
                            paraDoorCount.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.DoorCount);  // ドア数
                            paraEngineModelNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EngineModelNm);  // エンジン型式名称
                            paraCmnNmEngineDisPlace.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.CmnNmEngineDisPlace);  // 通称排気量
                            paraEngineModel.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EngineModel);  // 原動機型式（エンジン）
                            paraNumberOfGear.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.NumberOfGear); // 変速段数
                            paraGearNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.GearNm);  // 変速機名称
                            paraEDivNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EDivNm);  // E区分名称
                            parTransmissionNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.TransmissionNm);  // ミッション名称
                            parShiftNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.ShiftNm);  // シフト名称
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // ADD 2012/05/31 ------------->>>>>
                            paraFirstEntryDateNumTyp.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.FirstEntryDateNumTyp);  // 初年度（NUMタイプ）
                            paraCarAddInf.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDtCarWork.CarAddInf);  // 車両付加情報オブジェクト
                            paraEquipPrtsObj.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDtCarWork.EquipPrtsObj);  // 装備部品オブジェクト
                            // ADD 2012/05/31 -------------<<<<<

                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            paraCarMngCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.CarMngCode);  // 車両管理コード
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<

                            // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                            paraExpectedCeDate.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.ExpectedCeDate);  // 入庫予定日
                            // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<

                            sqlCommand.ExecuteNonQuery();
                            al.Add(sCMAcOdrDtCarWork);
                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------>>>>>
                        }
                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------<<<<<

                    }
                }

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            scmAcOdrDtCarWorkList = al;

            return status;
        }

        // --- ADD 田村顕成 2023/04/06 BLP取消返品時障害の対応 ------>>>>> 
        /// <summary>
        /// SCM受注データ(車両情報)情報をDeleteInsertします。
        /// </summary>
        /// <param name="scmAcOdrDtCarWorkList">DeleteInsertするSCM受注データ(車両情報)情報を格納する ArrayList</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : BLP取消返品時に未回答の車両情報が消失する障害の対応</br>
        /// <br>Programmer : 32427 田村顕成</br>
        /// <br>Date       : 2023/04/06</br>
        private int DelInsSCMAcOdrDtCarWorkProc2(ref ArrayList scmAcOdrDtCarWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlCommand sqlCommand = null;

            ArrayList al = new ArrayList();

            try
            {
                if (scmAcOdrDtCarWorkList != null)
                {
                    string sqlText = string.Empty;
                    sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);

                    for (int i = 0; i < scmAcOdrDtCarWorkList.Count; i++)
                    {
                        SCMAcOdrDtCarWork sCMAcOdrDtCarWork = scmAcOdrDtCarWorkList[i] as SCMAcOdrDtCarWork;

                        sqlText = string.Empty;
                        sqlText += "  DELETE" + Environment.NewLine;
                        sqlText += "  FROM" + Environment.NewLine;
                        sqlText += "  SCMACODRDTCARRF" + Environment.NewLine;
                        sqlText += "  WHERE" + Environment.NewLine;
                        sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                        sqlText += "  AND ACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                        sqlText += "  AND SALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;
                        sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBERRF" + Environment.NewLine;
                        sqlCommand.CommandText = sqlText;

                        sqlCommand.Parameters.Clear();
                        //Prameterオブジェクトの作成
                        SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                        SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                        SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                        SqlParameter findAcptAnOdrStatus = sqlCommand.Parameters.Add("@FINDACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                        SqlParameter findSalesSlipNum = sqlCommand.Parameters.Add("@FINDSALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号
                        //キャンセル拒否時は伝票番号=0で検索されるため、レコードの検索に問合せ番号を追加することで
                        //未回答データの車両情報が削除されないように対応
                        SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBERRF", SqlDbType.BigInt);  // 問合せ番号


                        //Parameterオブジェクトへ値設定
                        findEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EnterpriseCode);  // 企業コード
                        findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.InqOriginalEpCd);  // 問合せ元企業コード
                        findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.AcptAnOdrStatus);  // 受注ステータス
                        findSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.SalesSlipNum);  // 売上伝票番号
                        findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtCarWork.InquiryNumber);  // 問合せ番号

                        sqlCommand.ExecuteNonQuery();

                        sqlCommand.Parameters.Clear();
                        sqlText = string.Empty;

                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------>>>>>
                        // 論理削除済(LogicalDeleteCode=1)の時Insertしない
                        if (sCMAcOdrDtCarWork.LogicalDeleteCode == 0)
                        {
                            // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------<<<<<
                            # region [INSERT文]
                            sqlText += "  INSERT INTO SCMACODRDTCARRF (" + Environment.NewLine;
                            sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                            sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                            sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                            sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                            sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE1CODERF" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE1NAMERF" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE2RF" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE3RF" + Environment.NewLine;
                            sqlText += " ,NUMBERPLATE4RF" + Environment.NewLine;
                            sqlText += " ,MODELDESIGNATIONNORF" + Environment.NewLine;
                            sqlText += " ,CATEGORYNORF" + Environment.NewLine;
                            sqlText += " ,MAKERCODERF" + Environment.NewLine;
                            sqlText += " ,MODELCODERF" + Environment.NewLine;
                            sqlText += " ,MODELSUBCODERF" + Environment.NewLine;
                            sqlText += " ,MODELNAMERF" + Environment.NewLine;
                            sqlText += " ,CARINSPECTCERTMODELRF" + Environment.NewLine;
                            sqlText += " ,FULLMODELRF" + Environment.NewLine;
                            sqlText += " ,FRAMENORF" + Environment.NewLine;
                            sqlText += " ,FRAMEMODELRF" + Environment.NewLine;
                            sqlText += " ,CHASSISNORF" + Environment.NewLine;
                            sqlText += " ,CARPROPERNORF" + Environment.NewLine;
                            sqlText += " ,PRODUCETYPEOFYEARNUMRF" + Environment.NewLine;
                            sqlText += " ,COMMENTRF" + Environment.NewLine;
                            sqlText += " ,RPCOLORCODERF" + Environment.NewLine;
                            sqlText += " ,COLORNAME1RF" + Environment.NewLine;
                            sqlText += " ,TRIMCODERF" + Environment.NewLine;
                            sqlText += " ,TRIMNAMERF" + Environment.NewLine;
                            sqlText += " ,MILEAGERF" + Environment.NewLine;
                            sqlText += " ,EQUIPOBJRF" + Environment.NewLine;
                            sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                            sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                            // -- ADD 2011/08/10   ------ >>>>>>
                            sqlText += " ,CARNORF" + Environment.NewLine;
                            sqlText += " ,MAKERNAMERF" + Environment.NewLine;
                            sqlText += " ,GRADENAMERF" + Environment.NewLine;
                            sqlText += " ,BODYNAMERF" + Environment.NewLine;
                            sqlText += " ,DOORCOUNTRF" + Environment.NewLine;
                            sqlText += " ,ENGINEMODELNMRF" + Environment.NewLine;
                            sqlText += " ,CMNNMENGINEDISPLACERF" + Environment.NewLine;
                            sqlText += " ,ENGINEMODELRF" + Environment.NewLine;
                            sqlText += " ,NUMBEROFGEARRF" + Environment.NewLine;
                            sqlText += " ,GEARNMRF" + Environment.NewLine;
                            sqlText += " ,EDIVNMRF" + Environment.NewLine;
                            sqlText += " ,TRANSMISSIONNMRF" + Environment.NewLine;
                            // UPD 2012/05/31 -------------------->>>>>
                            //sqlText += " ,SHIFTNMRF)" + Environment.NewLine;
                            sqlText += " ,SHIFTNMRF" + Environment.NewLine;
                            // UPD 2012/05/31 --------------------<<<<<
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // ADD 2012/05/31 -------------------->>>>>
                            sqlText += " ,FIRSTENTRYDATENUMTYPRF" + Environment.NewLine;
                            sqlText += " ,CARADDINFRF" + Environment.NewLine;
                            sqlText += " ,EQUIPPRTSOBJRF" + Environment.NewLine;
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,CARMNGCODERF" + Environment.NewLine;
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                            sqlText += " ,EXPECTEDCEDATERF" + Environment.NewLine;
                            // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<
                            sqlText += " )" + Environment.NewLine;
                            // ADD 2012/05/31 --------------------<<<<<
                            sqlText += "  VALUES" + Environment.NewLine;
                            sqlText += "  (@CREATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                            sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                            sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                            sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALEPCD" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALSECCD" + Environment.NewLine;
                            sqlText += " ,@INQUIRYNUMBER" + Environment.NewLine;
                            sqlText += " ,@NUMBERPLATE1CODE" + Environment.NewLine;
                            sqlText += " ,@NUMBERPLATE1NAME" + Environment.NewLine;
                            sqlText += " ,@NUMBERPLATE2" + Environment.NewLine;
                            sqlText += " ,@NUMBERPLATE3" + Environment.NewLine;
                            sqlText += " ,@NUMBERPLATE4" + Environment.NewLine;
                            sqlText += " ,@MODELDESIGNATIONNO" + Environment.NewLine;
                            sqlText += " ,@CATEGORYNO" + Environment.NewLine;
                            sqlText += " ,@MAKERCODE" + Environment.NewLine;
                            sqlText += " ,@MODELCODE" + Environment.NewLine;
                            sqlText += " ,@MODELSUBCODE" + Environment.NewLine;
                            sqlText += " ,@MODELNAME" + Environment.NewLine;
                            sqlText += " ,@CARINSPECTCERTMODEL" + Environment.NewLine;
                            sqlText += " ,@FULLMODEL" + Environment.NewLine;
                            sqlText += " ,@FRAMENO" + Environment.NewLine;
                            sqlText += " ,@FRAMEMODEL" + Environment.NewLine;
                            sqlText += " ,@CHASSISNO" + Environment.NewLine;
                            sqlText += " ,@CARPROPERNO" + Environment.NewLine;
                            sqlText += " ,@PRODUCETYPEOFYEARNUM" + Environment.NewLine;
                            sqlText += " ,@COMMENT" + Environment.NewLine;
                            sqlText += " ,@RPCOLORCODE" + Environment.NewLine;
                            sqlText += " ,@COLORNAME1" + Environment.NewLine;
                            sqlText += " ,@TRIMCODE" + Environment.NewLine;
                            sqlText += " ,@TRIMNAME" + Environment.NewLine;
                            sqlText += " ,@MILEAGE" + Environment.NewLine;
                            sqlText += " ,@EQUIPOBJ" + Environment.NewLine;
                            sqlText += " ,@ACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += " ,@SALESSLIPNUM" + Environment.NewLine;
                            // -- ADD 2011/08/10   ------ >>>>>>
                            sqlText += " ,@CARNORF" + Environment.NewLine;
                            sqlText += " ,@MAKERNAMERF" + Environment.NewLine;
                            sqlText += " ,@GRADENAMERF" + Environment.NewLine;
                            sqlText += " ,@BODYNAMERF" + Environment.NewLine;
                            sqlText += " ,@DOORCOUNTRF" + Environment.NewLine;
                            sqlText += " ,@ENGINEMODELNMRF" + Environment.NewLine;
                            sqlText += " ,@CMNNMENGINEDISPLACERF" + Environment.NewLine;
                            sqlText += " ,@ENGINEMODELRF" + Environment.NewLine;
                            sqlText += " ,@NUMBEROFGEARRF" + Environment.NewLine;
                            sqlText += " ,@GEARNMRF" + Environment.NewLine;
                            sqlText += " ,@EDIVNMRF" + Environment.NewLine;
                            sqlText += " ,@TRANSMISSIONNMRF" + Environment.NewLine;
                            // UPD 2012/05/31 -------------------->>>>>
                            //sqlText += " ,@SHIFTNMRF)" + Environment.NewLine;
                            sqlText += " ,@SHIFTNMRF" + Environment.NewLine;
                            // UPD 2012/05/31 --------------------<<<<<
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // ADD 2012/05/31 -------------------->>>>>
                            sqlText += " ,@FIRSTENTRYDATENUMTYPRF" + Environment.NewLine;
                            sqlText += " ,@CARADDINFRF" + Environment.NewLine;
                            sqlText += " ,@EQUIPPRTSOBJRF" + Environment.NewLine;
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@CARMNGCODERF" + Environment.NewLine;
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                            sqlText += " ,@EXPECTEDCEDATERF" + Environment.NewLine;
                            // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<
                            sqlText += " )" + Environment.NewLine;
                            // ADD 2012/05/31 --------------------<<<<<

                            sqlCommand.CommandText = sqlText;
                            # endregion

                            // 登録ヘッダ情報を設定
                            object obj = (object)this;
                            IFileHeader flhd = (IFileHeader)sCMAcOdrDtCarWork;
                            FileHeader fileHeader = new FileHeader(obj);
                            fileHeader.SetInsertHeader(ref flhd, obj);

                            //Parameterオブジェクトの作成(更新用)
                            SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);  // 作成日時
                            SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);  // 更新日時
                            SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                            SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);  // GUID
                            SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);  // 更新従業員コード
                            SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);  // 更新アセンブリID1
                            SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);  // 更新アセンブリID2
                            SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);  // 論理削除区分
                            SqlParameter paraInqOriginalEpCd = sqlCommand.Parameters.Add("@INQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                            SqlParameter paraInqOriginalSecCd = sqlCommand.Parameters.Add("@INQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                            SqlParameter paraInquiryNumber = sqlCommand.Parameters.Add("@INQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                            SqlParameter paraNumberPlate1Code = sqlCommand.Parameters.Add("@NUMBERPLATE1CODE", SqlDbType.Int);  // 陸運事務所番号
                            SqlParameter paraNumberPlate1Name = sqlCommand.Parameters.Add("@NUMBERPLATE1NAME", SqlDbType.NVarChar);  // 陸運事務局名称
                            SqlParameter paraNumberPlate2 = sqlCommand.Parameters.Add("@NUMBERPLATE2", SqlDbType.NVarChar);  // 車両登録番号（種別）
                            SqlParameter paraNumberPlate3 = sqlCommand.Parameters.Add("@NUMBERPLATE3", SqlDbType.NVarChar);  // 車両登録番号（カナ）
                            SqlParameter paraNumberPlate4 = sqlCommand.Parameters.Add("@NUMBERPLATE4", SqlDbType.Int);  // 車両登録番号（プレート番号）
                            SqlParameter paraModelDesignationNo = sqlCommand.Parameters.Add("@MODELDESIGNATIONNO", SqlDbType.Int);  // 型式指定番号
                            SqlParameter paraCategoryNo = sqlCommand.Parameters.Add("@CATEGORYNO", SqlDbType.Int);  // 類別番号
                            SqlParameter paraMakerCode = sqlCommand.Parameters.Add("@MAKERCODE", SqlDbType.Int);  // メーカーコード
                            SqlParameter paraModelCode = sqlCommand.Parameters.Add("@MODELCODE", SqlDbType.Int);  // 車種コード
                            SqlParameter paraModelSubCode = sqlCommand.Parameters.Add("@MODELSUBCODE", SqlDbType.Int);  // 車種サブコード
                            SqlParameter paraModelName = sqlCommand.Parameters.Add("@MODELNAME", SqlDbType.NVarChar);  // 車種名
                            SqlParameter paraCarInspectCertModel = sqlCommand.Parameters.Add("@CARINSPECTCERTMODEL", SqlDbType.NVarChar);  // 車検証型式
                            SqlParameter paraFullModel = sqlCommand.Parameters.Add("@FULLMODEL", SqlDbType.NVarChar);  // 型式（フル型）
                            SqlParameter paraFrameNo = sqlCommand.Parameters.Add("@FRAMENO", SqlDbType.NVarChar);  // 車台番号
                            SqlParameter paraFrameModel = sqlCommand.Parameters.Add("@FRAMEMODEL", SqlDbType.NVarChar);  // 車台型式
                            SqlParameter paraChassisNo = sqlCommand.Parameters.Add("@CHASSISNO", SqlDbType.NVarChar);  // シャシーNo
                            SqlParameter paraCarProperNo = sqlCommand.Parameters.Add("@CARPROPERNO", SqlDbType.Int);  // 車両固有番号
                            SqlParameter paraProduceTypeOfYearNum = sqlCommand.Parameters.Add("@PRODUCETYPEOFYEARNUM", SqlDbType.Int);  // 生産年式（NUMタイプ）
                            SqlParameter paraComment = sqlCommand.Parameters.Add("@COMMENT", SqlDbType.NVarChar);  // コメント
                            SqlParameter paraRpColorCode = sqlCommand.Parameters.Add("@RPCOLORCODE", SqlDbType.NVarChar);  // リペアカラーコード
                            SqlParameter paraColorName1 = sqlCommand.Parameters.Add("@COLORNAME1", SqlDbType.NVarChar);  // カラー名称1
                            SqlParameter paraTrimCode = sqlCommand.Parameters.Add("@TRIMCODE", SqlDbType.NVarChar);  // トリムコード
                            SqlParameter paraTrimName = sqlCommand.Parameters.Add("@TRIMNAME", SqlDbType.NVarChar);  // トリム名称
                            SqlParameter paraMileage = sqlCommand.Parameters.Add("@MILEAGE", SqlDbType.Int);  // 車両走行距離
                            SqlParameter paraEquipObj = sqlCommand.Parameters.Add("@EQUIPOBJ", SqlDbType.VarBinary);  // 装備オブジェクト
                            SqlParameter paraAcptAnOdrStatus = sqlCommand.Parameters.Add("@ACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                            SqlParameter paraSalesSlipNum = sqlCommand.Parameters.Add("@SALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号
                            // -- ADD 2011/08/10   ------ >>>>>>
                            SqlParameter paraCarNo = sqlCommand.Parameters.Add("@CARNORF", SqlDbType.NChar);  // 号車
                            SqlParameter paraMakerName = sqlCommand.Parameters.Add("@MAKERNAMERF", SqlDbType.NChar);  // メーカー名称
                            SqlParameter paraGradeName = sqlCommand.Parameters.Add("@GRADENAMERF", SqlDbType.NChar);  // グレード名称
                            SqlParameter paraBodyName = sqlCommand.Parameters.Add("@BODYNAMERF", SqlDbType.NChar);  // ボディー名称
                            SqlParameter paraDoorCount = sqlCommand.Parameters.Add("@DOORCOUNTRF", SqlDbType.Int);  // ドア数
                            SqlParameter paraEngineModelNm = sqlCommand.Parameters.Add("@ENGINEMODELNMRF", SqlDbType.NChar);  // エンジン型式名称
                            SqlParameter paraCmnNmEngineDisPlace = sqlCommand.Parameters.Add("@CMNNMENGINEDISPLACERF", SqlDbType.Int);  // 通称排気量
                            SqlParameter paraEngineModel = sqlCommand.Parameters.Add("@ENGINEMODELRF", SqlDbType.NChar);  // 原動機型式（エンジン）
                            SqlParameter paraNumberOfGear = sqlCommand.Parameters.Add("@NUMBEROFGEARRF", SqlDbType.Int); // 変速段数
                            SqlParameter paraGearNm = sqlCommand.Parameters.Add("@GEARNMRF", SqlDbType.NChar);  // 変速機名称
                            SqlParameter paraEDivNm = sqlCommand.Parameters.Add("@EDIVNMRF", SqlDbType.NChar);  // E区分名称
                            SqlParameter parTransmissionNm = sqlCommand.Parameters.Add("@TRANSMISSIONNMRF", SqlDbType.NChar);  // ミッション名称
                            SqlParameter parShiftNm = sqlCommand.Parameters.Add("@SHIFTNMRF", SqlDbType.NChar);  // シフト名称
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // ADD 2012/05/31 ------------->>>>>
                            SqlParameter paraFirstEntryDateNumTyp = sqlCommand.Parameters.Add("@FIRSTENTRYDATENUMTYPRF", SqlDbType.Int);  // 初年度（NUMタイプ）
                            SqlParameter paraCarAddInf = sqlCommand.Parameters.Add("@CARADDINFRF", SqlDbType.VarBinary);  // 車両付加情報オブジェクト
                            SqlParameter paraEquipPrtsObj = sqlCommand.Parameters.Add("@EQUIPPRTSOBJRF", SqlDbType.VarBinary);  // 装備部品オブジェクト
                            // ADD 2012/05/31 -------------<<<<<

                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            SqlParameter paraCarMngCode = sqlCommand.Parameters.Add("@CARMNGCODERF", SqlDbType.NVarChar);  // 車両管理コード
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<

                            // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                            SqlParameter paraExpectedCeDate = sqlCommand.Parameters.Add("@EXPECTEDCEDATERF", SqlDbType.Int);  // 入庫予定日
                            // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<

                            //Parameterオブジェクトへ値設定(更新用)
                            paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtCarWork.CreateDateTime);  // 作成日時
                            paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtCarWork.UpdateDateTime);  // 更新日時
                            paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EnterpriseCode);  // 企業コード
                            paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtCarWork.FileHeaderGuid);  // GUID
                            paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.UpdEmployeeCode);  // 更新従業員コード
                            paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.UpdAssemblyId1);  // 更新アセンブリID1
                            paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.UpdAssemblyId2);  // 更新アセンブリID2
                            paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.LogicalDeleteCode);  // 論理削除区分
                            paraInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.InqOriginalEpCd);  // 問合せ元企業コード
                            paraInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.InqOriginalSecCd);  // 問合せ元拠点コード
                            paraInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtCarWork.InquiryNumber);  // 問合せ番号
                            paraNumberPlate1Code.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.NumberPlate1Code);  // 陸運事務所番号
                            paraNumberPlate1Name.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.NumberPlate1Name);  // 陸運事務局名称
                            paraNumberPlate2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.NumberPlate2);  // 車両登録番号（種別）
                            paraNumberPlate3.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.NumberPlate3);  // 車両登録番号（カナ）
                            paraNumberPlate4.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.NumberPlate4);  // 車両登録番号（プレート番号）
                            paraModelDesignationNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.ModelDesignationNo);  // 型式指定番号
                            paraCategoryNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.CategoryNo);  // 類別番号
                            paraMakerCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.MakerCode);  // メーカーコード
                            paraModelCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.ModelCode);  // 車種コード
                            paraModelSubCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.ModelSubCode);  // 車種サブコード
                            paraModelName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.ModelName);  // 車種名
                            paraCarInspectCertModel.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.CarInspectCertModel);  // 車検証型式
                            paraFullModel.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.FullModel);  // 型式（フル型）
                            paraFrameNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.FrameNo);  // 車台番号
                            paraFrameModel.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.FrameModel);  // 車台型式
                            paraChassisNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.ChassisNo);  // シャシーNo
                            paraCarProperNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.CarProperNo);  // 車両固有番号
                            paraProduceTypeOfYearNum.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.ProduceTypeOfYearNum);  // 生産年式（NUMタイプ）
                            paraComment.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.Comment);  // コメント
                            paraRpColorCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.RpColorCode);  // リペアカラーコード
                            paraColorName1.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.ColorName1);  // カラー名称1
                            paraTrimCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.TrimCode);  // トリムコード
                            paraTrimName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.TrimName);  // トリム名称
                            paraMileage.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.Mileage);  // 車両走行距離
                            paraEquipObj.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDtCarWork.EquipObj);  // 装備オブジェクト
                            paraAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.AcptAnOdrStatus);  // 受注ステータス
                            paraSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.SalesSlipNum);  // 売上伝票番号
                            // -- ADD 2011/08/10   ------ >>>>>>
                            paraCarNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.CarNo);  // 号車
                            paraMakerName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.MakerName);  // メーカー名称
                            paraGradeName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.GradeName);  // グレード名称
                            paraBodyName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.BodyName);  // ボディー名称
                            paraDoorCount.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.DoorCount);  // ドア数
                            paraEngineModelNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EngineModelNm);  // エンジン型式名称
                            paraCmnNmEngineDisPlace.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.CmnNmEngineDisPlace);  // 通称排気量
                            paraEngineModel.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EngineModel);  // 原動機型式（エンジン）
                            paraNumberOfGear.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.NumberOfGear); // 変速段数
                            paraGearNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.GearNm);  // 変速機名称
                            paraEDivNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.EDivNm);  // E区分名称
                            parTransmissionNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.TransmissionNm);  // ミッション名称
                            parShiftNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.ShiftNm);  // シフト名称
                            // -- ADD 2011/08/10   ------ <<<<<<
                            // ADD 2012/05/31 ------------->>>>>
                            paraFirstEntryDateNumTyp.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.FirstEntryDateNumTyp);  // 初年度（NUMタイプ）
                            paraCarAddInf.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDtCarWork.CarAddInf);  // 車両付加情報オブジェクト
                            paraEquipPrtsObj.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDtCarWork.EquipPrtsObj);  // 装備部品オブジェクト
                            // ADD 2012/05/31 -------------<<<<<

                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 --------->>>>>>>>>>>>>>>>>>>>>>>>
                            paraCarMngCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtCarWork.CarMngCode);  // 車両管理コード
                            // --- ADD 2013/04/19 三戸 2013/05/22配信分 SCM障害№10521 ---------<<<<<<<<<<<<<<<<<<<<<<<<

                            // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                            paraExpectedCeDate.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtCarWork.ExpectedCeDate);  // 入庫予定日
                            // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<

                            sqlCommand.ExecuteNonQuery();
                            al.Add(sCMAcOdrDtCarWork);
                            // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------>>>>>
                        }
                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------<<<<<

                    }
                }

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            scmAcOdrDtCarWorkList = al;

            return status;
        }
        // --- ADD 田村顕成 2023/04/06 BLP取消返品時障害の対応 ------<<<<<

        /// <summary>
        /// SCM受注明細データ(回答)情報をDeleteInsertします。
        /// </summary>
        /// <param name="scmAcOdrDtlAsWorkList">DeleteInsertするSCM受注明細データ(回答)情報を格納する ArrayList</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : scmAcOdrDtlAsWorkList に格納されているSCM受注明細データ(回答)情報をDeleteInsertします。</br>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.06.18</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        private int DelInsSCMAcOdrDtlAsWorkProc(ref ArrayList scmAcOdrDtlAsWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlCommand sqlCommand = null;

            ArrayList al = new ArrayList();

            try
            {
                if (scmAcOdrDtlAsWorkList != null)
                {
                    string sqlText = string.Empty;
                    sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);

                    for (int i = 0; i < scmAcOdrDtlAsWorkList.Count; i++)
                    {
                        SCMAcOdrDtlAsWork sCMAcOdrDtlAsWork = scmAcOdrDtlAsWorkList[i] as SCMAcOdrDtlAsWork;

                        sqlText = string.Empty;

                        sqlText += "  DELETE" + Environment.NewLine;
                        sqlText += "  FROM" + Environment.NewLine;
                        sqlText += "  SCMACODRDTLASRF" + Environment.NewLine;
                        sqlText += "  WHERE" + Environment.NewLine;
                        sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                        sqlText += "  AND INQOTHEREPCDRF = @FINDINQOTHEREPCD" + Environment.NewLine;
                        sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;
                        sqlText += "  AND UPDATEDATERF = 0" + Environment.NewLine;
                        sqlText += "  AND UPDATETIMERF = 0" + Environment.NewLine;
                        sqlText += "  AND ACPTANODRSTATUSRF = @FINDACPTANODRSTATUS" + Environment.NewLine;
                        sqlText += "  AND SALESSLIPNUMRF = @FINDSALESSLIPNUM" + Environment.NewLine;
                        sqlText += "  AND SALESROWNORF = @FINDSALESROWNO" + Environment.NewLine;
                        sqlCommand.CommandText = sqlText;

                        sqlCommand.Parameters.Clear();

                        //Prameterオブジェクトの作成
                        SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                        SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                        SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                        SqlParameter findInqOtherEpCd = sqlCommand.Parameters.Add("@FINDINQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                        SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                        SqlParameter findAcptAnOdrStatus = sqlCommand.Parameters.Add("@FINDACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                        SqlParameter findSalesSlipNum = sqlCommand.Parameters.Add("@FINDSALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号
                        SqlParameter findSalesRowNo = sqlCommand.Parameters.Add("@FINDSALESROWNO", SqlDbType.Int);  // 売上行番号

                        //Parameterオブジェクトへ値設定
                        findEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.EnterpriseCode);  // 企業コード
                        findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOriginalEpCd);  // 問合せ元企業コード
                        findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOriginalSecCd);  // 問合せ元拠点コード
                        findInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOtherEpCd);  // 問合せ先企業コード
                        findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOtherSecCd);  // 問合せ先拠点コード
                        findAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AcptAnOdrStatus);  // 受注ステータス
                        findSalesSlipNum.Value = sCMAcOdrDtlAsWork.SalesSlipNum;  // 売上伝票番号
                        findSalesRowNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SalesRowNo);  // 売上行番号

                        sqlCommand.ExecuteNonQuery();
                        // ---------------------- ADD START 2011/08/23 zhubj ----------------->>>>>
                        sqlText = string.Empty;
                        sqlText = "UPDATE SALESDETAILRF SET INQUIRYNUMBERRF=@INQUIRYNUMBER , INQROWNUMBERRF=@INQROWNUMBER WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND ACPTANODRSTATUSRF=@FINDACPTANODRSTATUS AND SALESSLIPNUMRF=@FINDSALESSLIPNUM AND SALESROWNORF=@FINDSALESROWNO AND INQUIRYNUMBERRF=@FINDINQUIRYNUMBER ";
                        sqlCommand.CommandText = sqlText;

                        sqlCommand.Parameters.Clear();
                        //Parameterオブジェクトの作成(更新用)
                        SqlParameter salesParaInquiryNumber = sqlCommand.Parameters.Add("@INQUIRYNUMBER", SqlDbType.BigInt);
                        SqlParameter salesParaInqRowNumber = sqlCommand.Parameters.Add("@INQROWNUMBER", SqlDbType.Int);

                        //Parameterオブジェクトへ値設定(更新用)
                        salesParaInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.InquiryNumber);
                        salesParaInqRowNumber.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqRowNumber);

                        //Parameterオブジェクトの作成(検索用)
                        SqlParameter salesFindEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                        SqlParameter salesFindAcptAnOdrStatus = sqlCommand.Parameters.Add("@FINDACPTANODRSTATUS", SqlDbType.Int);
                        SqlParameter salesFindSalesSlipNum = sqlCommand.Parameters.Add("@FINDSALESSLIPNUM", SqlDbType.NChar);
                        SqlParameter salesFindSalesRowNo = sqlCommand.Parameters.Add("@FINDSALESROWNO", SqlDbType.Int);
                        SqlParameter salesFindParaInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER", SqlDbType.BigInt);

                        //Parameterオブジェクトへ値設定(検索用)
                        salesFindEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.EnterpriseCode);
                        salesFindSalesSlipNum.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.SalesSlipNum);
                        salesFindSalesRowNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SalesRowNo);
                        salesFindAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AcptAnOdrStatus);
                        salesFindParaInquiryNumber.Value = SqlDataMediator.SqlSetInt32(0);

                        sqlCommand.ExecuteNonQuery();

                        sqlText = string.Empty;
                        sqlText = "UPDATE SALESHISTDTLRF SET INQUIRYNUMBERRF=@INQUIRYNUMBER , INQROWNUMBERRF=@INQROWNUMBER WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND ACPTANODRSTATUSRF=@FINDACPTANODRSTATUS AND SALESSLIPNUMRF=@FINDSALESSLIPNUM AND SALESROWNORF=@FINDSALESROWNO AND INQUIRYNUMBERRF=@FINDINQUIRYNUMBER ";
                        sqlCommand.CommandText = sqlText;
                        sqlCommand.ExecuteNonQuery();

                        // ---------------------- ADD END   2011/08/23 zhubj -----------------<<<<<

                        // ADD 2013/04/15 SCM障害№10514対応 -------------------------------------->>>>>
                        //Parameterオブジェクトの作成(伝票更新時の検索用)
                        SqlParameter salesFindParaInquiryNumber2 = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBER2", SqlDbType.BigInt);
                        SqlParameter salesFindParaInqRowNumber = sqlCommand.Parameters.Add("@FINDINQROWNUMBER", SqlDbType.Int);

                        //Parameterオブジェクトへ値設定(伝票更新時の検索用)
                        salesFindParaInquiryNumber2.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.InquiryNumber);
                        salesFindParaInqRowNumber.Value = SqlDataMediator.SqlSetInt32(0);

                        sqlText = string.Empty;
                        sqlText = "UPDATE SALESDETAILRF SET INQUIRYNUMBERRF=@INQUIRYNUMBER , INQROWNUMBERRF=@INQROWNUMBER WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND ACPTANODRSTATUSRF=@FINDACPTANODRSTATUS AND SALESSLIPNUMRF=@FINDSALESSLIPNUM AND SALESROWNORF=@FINDSALESROWNO AND INQUIRYNUMBERRF=@FINDINQUIRYNUMBER2 AND INQROWNUMBERRF<@FINDINQROWNUMBER ";
                        sqlCommand.CommandText = sqlText;

                        sqlCommand.ExecuteNonQuery();

                        sqlText = string.Empty;
                        sqlText = "UPDATE SALESHISTDTLRF SET INQUIRYNUMBERRF=@INQUIRYNUMBER , INQROWNUMBERRF=@INQROWNUMBER WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND ACPTANODRSTATUSRF=@FINDACPTANODRSTATUS AND SALESSLIPNUMRF=@FINDSALESSLIPNUM AND SALESROWNORF=@FINDSALESROWNO AND INQUIRYNUMBERRF=@FINDINQUIRYNUMBER2 AND INQROWNUMBERRF<@FINDINQROWNUMBER ";
                        sqlCommand.CommandText = sqlText;

                        sqlCommand.ExecuteNonQuery();

                        // ADD 2013/04/15 SCM障害№10514対応 --------------------------------------<<<<<

                        sqlCommand.Parameters.Clear();
                        sqlText = string.Empty;

                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------>>>>>
                        // 論理削除済(LogicalDeleteCode=1)の時Insertしない
                        if (sCMAcOdrDtlAsWork.LogicalDeleteCode == 0)
                        {
                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------<<<<<

                            # region [INSERT文]
                            sqlText += "  INSERT INTO SCMACODRDTLASRF (" + Environment.NewLine;
                            sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                            sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                            sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                            sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                            sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                            sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALEPCDRF" + Environment.NewLine;
                            sqlText += " ,INQORIGINALSECCDRF" + Environment.NewLine;
                            sqlText += " ,INQOTHEREPCDRF" + Environment.NewLine;
                            sqlText += " ,INQOTHERSECCDRF" + Environment.NewLine;
                            sqlText += " ,INQUIRYNUMBERRF" + Environment.NewLine;
                            sqlText += " ,UPDATEDATERF" + Environment.NewLine;
                            sqlText += " ,UPDATETIMERF" + Environment.NewLine;
                            sqlText += " ,INQROWNUMBERRF" + Environment.NewLine;
                            sqlText += " ,INQROWNUMDERIVEDNORF" + Environment.NewLine;
                            sqlText += " ,INQORGDTLDISCGUIDRF" + Environment.NewLine;
                            sqlText += " ,INQOTHDTLDISCGUIDRF" + Environment.NewLine;
                            sqlText += " ,GOODSDIVCDRF" + Environment.NewLine;
                            sqlText += " ,RECYCLEPRTKINDCODERF" + Environment.NewLine;
                            sqlText += " ,RECYCLEPRTKINDNAMERF" + Environment.NewLine;
                            sqlText += " ,DELIVEREDGOODSDIVRF" + Environment.NewLine;
                            sqlText += " ,HANDLEDIVCODERF" + Environment.NewLine;
                            sqlText += " ,GOODSSHAPERF" + Environment.NewLine;
                            sqlText += " ,DELIVRDGDSCONFCDRF" + Environment.NewLine;
                            sqlText += " ,DELIGDSCMPLTDUEDATERF" + Environment.NewLine;
                            sqlText += " ,ANSWERDELIVERYDATERF" + Environment.NewLine;
                            sqlText += " ,BLGOODSCODERF" + Environment.NewLine;
                            sqlText += " ,BLGOODSDRCODERF" + Environment.NewLine;
                            sqlText += " ,INQGOODSNAMERF" + Environment.NewLine;
                            sqlText += " ,ANSGOODSNAMERF" + Environment.NewLine;
                            sqlText += " ,SALESORDERCOUNTRF" + Environment.NewLine;
                            sqlText += " ,DELIVEREDGOODSCOUNTRF" + Environment.NewLine;
                            sqlText += " ,GOODSNORF" + Environment.NewLine;
                            sqlText += " ,GOODSMAKERCDRF" + Environment.NewLine;
                            sqlText += " ,GOODSMAKERNMRF" + Environment.NewLine;
                            sqlText += " ,PUREGOODSMAKERCDRF" + Environment.NewLine;
                            sqlText += " ,INQPUREGOODSNORF" + Environment.NewLine;
                            sqlText += " ,ANSPUREGOODSNORF" + Environment.NewLine;
                            sqlText += " ,LISTPRICERF" + Environment.NewLine;
                            sqlText += " ,UNITPRICERF" + Environment.NewLine;
                            sqlText += " ,GOODSADDINFORF" + Environment.NewLine;
                            sqlText += " ,ROUGHRROFITRF" + Environment.NewLine;
                            sqlText += " ,ROUGHRATERF" + Environment.NewLine;
                            sqlText += " ,ANSWERLIMITDATERF" + Environment.NewLine;
                            sqlText += " ,COMMENTDTLRF" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILEDTLRF" + Environment.NewLine;
                            sqlText += " ,APPENDINGFILENMDTLRF" + Environment.NewLine;
                            sqlText += " ,SHELFNORF" + Environment.NewLine;
                            sqlText += " ,ADDITIONALDIVCDRF" + Environment.NewLine;
                            sqlText += " ,CORRECTDIVCDRF" + Environment.NewLine;
                            sqlText += " ,ACPTANODRSTATUSRF" + Environment.NewLine;
                            sqlText += " ,SALESSLIPNUMRF" + Environment.NewLine;
                            sqlText += " ,SALESROWNORF" + Environment.NewLine;
                            sqlText += " ,CAMPAIGNCODERF" + Environment.NewLine;
                            sqlText += " ,STOCKDIVRF" + Environment.NewLine;
                            sqlText += " ,INQORDDIVCDRF" + Environment.NewLine;
                            sqlText += " ,DISPLAYORDERRF" + Environment.NewLine;
                            // 2010/05/26 >>>
                            //sqlText += " ,GOODSMNGNORF)" + Environment.NewLine;
                            sqlText += " ,GOODSMNGNORF" + Environment.NewLine;
                            sqlText += " ,CANCELCNDTINDIVRF" + Environment.NewLine;
                            // 2011/02/09 Add >>>
                            sqlText += " ,DTLTAKEINDIVCDRF" + Environment.NewLine;
                            // 2011/02/09 Add <<<
                            //--- ADD 2011/05/20 --->>>
                            sqlText += " ,WAREHOUSECODERF" + Environment.NewLine;
                            sqlText += " ,WAREHOUSENAMERF" + Environment.NewLine;
                            sqlText += " ,WAREHOUSESHELFNORF" + Environment.NewLine;
                            //--- ADD 2011/05/20 ---<<<
                            // -- ADD 2011/08/10   ------ >>>>>>
                            sqlText += " ,PMPRSNTCOUNTRF" + Environment.NewLine;            // PM現在庫数
                            sqlText += " ,SETPARTSMKRCDRF" + Environment.NewLine;           // セット部品メーカーコード
                            sqlText += " ,SETPARTSNUMBERRF" + Environment.NewLine;          // セット部品番号
                            sqlText += " ,SETPARTSMAINSUBNORF" + Environment.NewLine;       // セット部品親子番号
                            // -- ADD 2011/08/10   ------ <<<<<<
                            //--- ADD 2012/01/10 --->>>
                            sqlText += " ,GOODSSPECIALNOTERF" + Environment.NewLine;       // 商品規格・特記事項
                            //--- ADD 2012/01/10 ---<<<
                            //--- ADD 2012/04/12 --->>> 
                            sqlText += " ,PSMNGNORF" + Environment.NewLine;       // PS管理番号
                            //--- ADD 2012/04/12 ---<<<
                            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                            sqlText += " ,AUTOESTIMATEPARTSCDRF" + Environment.NewLine;  //自動見積部品コード
                            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,SALESTOTALTAXINCRF" + Environment.NewLine;  //　売上伝票合計（税込）
                            sqlText += " ,SALESTOTALTAXEXCRF" + Environment.NewLine;  // 売上伝票合計（税抜）
                            sqlText += " ,SCMCONSTAXLAYMETHODRF" + Environment.NewLine;  // SCM消費税転嫁方式
                            sqlText += " ,CONSTAXRATERF" + Environment.NewLine;  // 消費税税率
                            sqlText += " ,SCMFRACTIONPROCCDRF" + Environment.NewLine;  // SCM端数処理区分
                            sqlText += " ,ACCRECCONSTAXRF" + Environment.NewLine;  // 売掛消費税
                            sqlText += " ,PMSALESDATERF" + Environment.NewLine;  // PM売上日
                            sqlText += " ,SUPPSLPPRTTIMERF" + Environment.NewLine;  // 仕入先伝票発行時刻
                            sqlText += " ,SALESMONEYTAXINCRF" + Environment.NewLine;  // 売上金額（税込み）
                            sqlText += " ,SALESMONEYTAXEXCRF" + Environment.NewLine;  // 売上金額（税抜き）
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,DATAINPUTSYSTEMRF" + Environment.NewLine;  // データ入力システム
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            sqlText += " ,PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGSHELFNORF" + Environment.NewLine;
                            sqlText += " ,PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                            sqlText += " ,PRMSETDTLNO2RF" + Environment.NewLine;  // 優良設定詳細コード２
                            sqlText += " ,PRMSETDTLNAME2RF" + Environment.NewLine;  // 優良設定詳細名称２
                            sqlText += " ,STOCKSTATUSDIVRF" + Environment.NewLine;  // 在庫状況区分
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                            sqlText += " ,RENTDIVRF" + Environment.NewLine;  // 貸出区分            
                            sqlText += " ,MKRSUGGESTRTPRICRF" + Environment.NewLine;  // メーカー希望小売価格
                            sqlText += " ,OPENPRICEDIVRF" + Environment.NewLine;  // オープン価格区分    
                            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                            // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                            sqlText += " ,BGNGOODSDIVRF" + Environment.NewLine;
                            // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                            sqlText += " ,MODELPRTSADPTYMRF" + Environment.NewLine;
                            sqlText += " ,MODELPRTSABLSYMRF" + Environment.NewLine;
                            sqlText += " ,MODELPRTSADPTFRAMENORF" + Environment.NewLine;
                            sqlText += " ,MODELPRTSABLSFRAMENORF" + Environment.NewLine;
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,ANSDELIDATEDIVRF" + Environment.NewLine;     // 回答納期区分
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,GOODSSPECIALNTFORFACRF" + Environment.NewLine;     // 商品規格・特記事項(工場向け)
                            sqlText += " ,GOODSSPECIALNTFORCOWRF" + Environment.NewLine;     // 商品規格・特記事項(カーオーナー向け)
                            sqlText += " ,PRMSETDTLNAME2FORFACRF" + Environment.NewLine;     // 優良設定詳細名称２(工場向け)
                            sqlText += " ,PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;     // 優良設定詳細名称２(カーオーナー向け)
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,INQBLUTYPTTHCDRF" + Environment.NewLine;
                            sqlText += " ,INQBLUTYPTSBCDRF" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTTHCDRF" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTSBCDRF" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSCODERF" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSDRCODERF" + Environment.NewLine;
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            sqlText += " )" + Environment.NewLine;
                            // 2010/05/26 <<<
                            sqlText += "  VALUES" + Environment.NewLine;
                            sqlText += "  (@CREATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                            sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                            sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                            sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALEPCD" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALSECCD" + Environment.NewLine;
                            sqlText += " ,@INQOTHEREPCD" + Environment.NewLine;
                            sqlText += " ,@INQOTHERSECCD" + Environment.NewLine;
                            sqlText += " ,@INQUIRYNUMBER" + Environment.NewLine;
                            sqlText += " ,@UPDATEDATE" + Environment.NewLine;
                            sqlText += " ,@UPDATETIME" + Environment.NewLine;
                            sqlText += " ,@INQROWNUMBER" + Environment.NewLine;
                            sqlText += " ,@INQROWNUMDERIVEDNO" + Environment.NewLine;
                            sqlText += " ,@INQORGDTLDISCGUID" + Environment.NewLine;
                            sqlText += " ,@INQOTHDTLDISCGUID" + Environment.NewLine;
                            sqlText += " ,@GOODSDIVCD" + Environment.NewLine;
                            sqlText += " ,@RECYCLEPRTKINDCODE" + Environment.NewLine;
                            sqlText += " ,@RECYCLEPRTKINDNAME" + Environment.NewLine;
                            sqlText += " ,@DELIVEREDGOODSDIV" + Environment.NewLine;
                            sqlText += " ,@HANDLEDIVCODE" + Environment.NewLine;
                            sqlText += " ,@GOODSSHAPE" + Environment.NewLine;
                            sqlText += " ,@DELIVRDGDSCONFCD" + Environment.NewLine;
                            sqlText += " ,@DELIGDSCMPLTDUEDATE" + Environment.NewLine;
                            sqlText += " ,@ANSWERDELIVERYDATE" + Environment.NewLine;
                            sqlText += " ,@BLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,@BLGOODSDRCODE" + Environment.NewLine;
                            sqlText += " ,@INQGOODSNAME" + Environment.NewLine;
                            sqlText += " ,@ANSGOODSNAME" + Environment.NewLine;
                            sqlText += " ,@SALESORDERCOUNT" + Environment.NewLine;
                            sqlText += " ,@DELIVEREDGOODSCOUNT" + Environment.NewLine;
                            sqlText += " ,@GOODSNO" + Environment.NewLine;
                            sqlText += " ,@GOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,@GOODSMAKERNM" + Environment.NewLine;
                            sqlText += " ,@PUREGOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,@INQPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,@ANSPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,@LISTPRICE" + Environment.NewLine;
                            sqlText += " ,@UNITPRICE" + Environment.NewLine;
                            sqlText += " ,@GOODSADDINFO" + Environment.NewLine;
                            sqlText += " ,@ROUGHRROFIT" + Environment.NewLine;
                            sqlText += " ,@ROUGHRATE" + Environment.NewLine;
                            sqlText += " ,@ANSWERLIMITDATE" + Environment.NewLine;
                            sqlText += " ,@COMMENTDTL" + Environment.NewLine;
                            sqlText += " ,@APPENDINGFILEDTL" + Environment.NewLine;
                            sqlText += " ,@APPENDINGFILENMDTL" + Environment.NewLine;
                            sqlText += " ,@SHELFNO" + Environment.NewLine;
                            sqlText += " ,@ADDITIONALDIVCD" + Environment.NewLine;
                            sqlText += " ,@CORRECTDIVCD" + Environment.NewLine;
                            sqlText += " ,@ACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += " ,@SALESSLIPNUM" + Environment.NewLine;
                            sqlText += " ,@SALESROWNO" + Environment.NewLine;
                            sqlText += " ,@CAMPAIGNCODE" + Environment.NewLine;
                            sqlText += " ,@STOCKDIV" + Environment.NewLine;
                            sqlText += " ,@INQORDDIVCD" + Environment.NewLine;
                            sqlText += " ,@DISPLAYORDER" + Environment.NewLine;
                            // 2010/05/26 >>>
                            //sqlText += " ,@GOODSMNGNO)" + Environment.NewLine;
                            sqlText += " ,@GOODSMNGNO" + Environment.NewLine;
                            sqlText += " ,@CANCELCNDTINDIV" + Environment.NewLine;
                            // 2011/02/09 Add >>>
                            sqlText += " ,@DTLTAKEINDIVCD" + Environment.NewLine;
                            // 2011/02/09 Add <<<
                            //--- ADD 2011/05/20 --->>>
                            sqlText += " ,@WAREHOUSECODE" + Environment.NewLine;
                            sqlText += " ,@WAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,@WAREHOUSESHELFNO" + Environment.NewLine;
                            //--- ADD 2011/05/20 ---<<<
                            // -- ADD 2011/08/10   ------ >>>>>>
                            sqlText += " ,@PMPRSNTCOUNTRF" + Environment.NewLine;            // PM現在庫数
                            sqlText += " ,@SETPARTSMKRCDRF" + Environment.NewLine;           // セット部品メーカーコード
                            sqlText += " ,@SETPARTSNUMBERRF" + Environment.NewLine;          // セット部品番号
                            sqlText += " ,@SETPARTSMAINSUBNORF" + Environment.NewLine;       // セット部品親子番号
                            // -- ADD 2011/08/10   ------ <<<<<<
                            //--- ADD 2012/01/10 --->>>
                            sqlText += " ,@GOODSSPECIALNOTE" + Environment.NewLine;       // 商品規格・特記事項
                            //--- ADD 2012/01/10 ---<<<
                            //--- ADD 2012/04/12 --->>> 
                            sqlText += " ,@PSMNGNO" + Environment.NewLine;       // PS管理番号
                            //--- ADD 2012/04/12 ---<<<
                            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                            sqlText += " ,@AUTOESTIMATEPARTSCD" + Environment.NewLine;  //自動見積部品コード
                            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@SALESTOTALTAXINC" + Environment.NewLine;  //　売上伝票合計（税込）
                            sqlText += " ,@SALESTOTALTAXEXC" + Environment.NewLine;  // 売上伝票合計（税抜）
                            sqlText += " ,@SCMCONSTAXLAYMETHOD" + Environment.NewLine;  // SCM消費税転嫁方式
                            sqlText += " ,@CONSTAXRATE" + Environment.NewLine;  // 消費税税率
                            sqlText += " ,@SCMFRACTIONPROCCD" + Environment.NewLine;  // SCM端数処理区分
                            sqlText += " ,@ACCRECCONSTAX" + Environment.NewLine;  // 売掛消費税
                            sqlText += " ,@PMSALESDATE" + Environment.NewLine;  // PM売上日
                            sqlText += " ,@SUPPSLPPRTTIME" + Environment.NewLine;  // 仕入先伝票発行時刻
                            sqlText += " ,@SALESMONEYTAXINC" + Environment.NewLine;  // 売上金額（税込み）
                            sqlText += " ,@SALESMONEYTAXEXC" + Environment.NewLine;  // 売上金額（税抜き）
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@DATAINPUTSYSTEM" + Environment.NewLine;  // データ入力システム
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            sqlText += " ,@PMMAINMNGWAREHOUSECD" + Environment.NewLine;
                            sqlText += " ,@PMMAINMNGWAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,@PMMAINMNGSHELFNO" + Environment.NewLine;
                            sqlText += " ,@PMMAINMNGPRSNTCOUNT" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                            sqlText += " ,@PRMSETDTLNO2" + Environment.NewLine;  // 優良設定詳細コード２
                            sqlText += " ,@PRMSETDTLNAME2" + Environment.NewLine;  // 優良設定詳細名称２
                            sqlText += " ,@STOCKSTATUSDIV" + Environment.NewLine;  // 在庫状況区分
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                            sqlText += " ,@RENTDIV" + Environment.NewLine;  // 貸出区分            
                            sqlText += " ,@MKRSUGGESTRTPRIC" + Environment.NewLine;  // メーカー希望小売価格
                            sqlText += " ,@OPENPRICEDIV" + Environment.NewLine;  // オープン価格区分    
                            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                            // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                            sqlText += " ,@BGNGOODSDIV" + Environment.NewLine;
                            // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                            sqlText += " ,@MODELPRTSADPTYM" + Environment.NewLine;
                            sqlText += " ,@MODELPRTSABLSYM" + Environment.NewLine;
                            sqlText += " ,@MODELPRTSADPTFRAMENO" + Environment.NewLine;
                            sqlText += " ,@MODELPRTSABLSFRAMENO" + Environment.NewLine;
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@ANSDELIDATEDIV" + Environment.NewLine;    // 回答納期区分
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@GOODSSPECIALNTFORFAC" + Environment.NewLine;    // 商品規格・特記事項(工場向け)
                            sqlText += " ,@GOODSSPECIALNTFORCOW" + Environment.NewLine;    // 商品規格・特記事項(カーオーナー向け)
                            sqlText += " ,@PRMSETDTLNAME2FORFAC" + Environment.NewLine;    // 優良設定詳細名称２(工場向け)
                            sqlText += " ,@PRMSETDTLNAME2FORCOW" + Environment.NewLine;    // 優良設定詳細名称２(カーオーナー向け)
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@INQBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,@INQBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,@ANSBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,@ANSBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,@ANSBLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,@ANSBLGOODSDRCODE" + Environment.NewLine;
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            sqlText += " )" + Environment.NewLine;
                            // 2010/05/26 <<<
                            sqlCommand.CommandText = sqlText;
                            # endregion

                            // 登録ヘッダ情報を設定
                            object obj = (object)this;
                            IFileHeader flhd = (IFileHeader)sCMAcOdrDtlAsWork;
                            FileHeader fileHeader = new FileHeader(obj);
                            fileHeader.SetInsertHeader(ref flhd, obj);

                            //Prameterオブジェクトの作成
                            SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);  // 作成日時
                            SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);  // 更新日時
                            SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                            SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);  // GUID
                            SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);  // 更新従業員コード
                            SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);  // 更新アセンブリID1
                            SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);  // 更新アセンブリID2
                            SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);  // 論理削除区分
                            SqlParameter paraInqOriginalEpCd = sqlCommand.Parameters.Add("@INQORIGINALEPCD", SqlDbType.NChar);  // 問合せ元企業コード
                            SqlParameter paraInqOriginalSecCd = sqlCommand.Parameters.Add("@INQORIGINALSECCD", SqlDbType.NChar);  // 問合せ元拠点コード
                            SqlParameter paraInqOtherEpCd = sqlCommand.Parameters.Add("@INQOTHEREPCD", SqlDbType.NChar);  // 問合せ先企業コード
                            SqlParameter paraInqOtherSecCd = sqlCommand.Parameters.Add("@INQOTHERSECCD", SqlDbType.NChar);  // 問合せ先拠点コード
                            SqlParameter paraInquiryNumber = sqlCommand.Parameters.Add("@INQUIRYNUMBER", SqlDbType.BigInt);  // 問合せ番号
                            SqlParameter paraUpdateDate = sqlCommand.Parameters.Add("@UPDATEDATE", SqlDbType.Int);  // 更新年月日
                            SqlParameter paraUpdateTime = sqlCommand.Parameters.Add("@UPDATETIME", SqlDbType.Int);  // 更新時間
                            SqlParameter paraInqRowNumber = sqlCommand.Parameters.Add("@INQROWNUMBER", SqlDbType.Int);  // 問合せ行番号
                            SqlParameter paraInqRowNumDerivedNo = sqlCommand.Parameters.Add("@INQROWNUMDERIVEDNO", SqlDbType.Int);  // 問合せ行番号枝番
                            SqlParameter paraInqOrgDtlDiscGuid = sqlCommand.Parameters.Add("@INQORGDTLDISCGUID", SqlDbType.UniqueIdentifier);  // 問合せ元明細識別GUID
                            SqlParameter paraInqOthDtlDiscGuid = sqlCommand.Parameters.Add("@INQOTHDTLDISCGUID", SqlDbType.UniqueIdentifier);  // 問合せ先明細識別GUID
                            SqlParameter paraGoodsDivCd = sqlCommand.Parameters.Add("@GOODSDIVCD", SqlDbType.Int);  // 商品種別
                            SqlParameter paraRecyclePrtKindCode = sqlCommand.Parameters.Add("@RECYCLEPRTKINDCODE", SqlDbType.Int);  // リサイクル部品種別
                            SqlParameter paraRecyclePrtKindName = sqlCommand.Parameters.Add("@RECYCLEPRTKINDNAME", SqlDbType.NVarChar);  // リサイクル部品種別名称
                            SqlParameter paraDeliveredGoodsDiv = sqlCommand.Parameters.Add("@DELIVEREDGOODSDIV", SqlDbType.Int);  // 納品区分
                            SqlParameter paraHandleDivCode = sqlCommand.Parameters.Add("@HANDLEDIVCODE", SqlDbType.Int);  // 取扱区分
                            SqlParameter paraGoodsShape = sqlCommand.Parameters.Add("@GOODSSHAPE", SqlDbType.Int);  // 商品形態
                            SqlParameter paraDelivrdGdsConfCd = sqlCommand.Parameters.Add("@DELIVRDGDSCONFCD", SqlDbType.Int);  // 納品確認区分
                            SqlParameter paraDeliGdsCmpltDueDate = sqlCommand.Parameters.Add("@DELIGDSCMPLTDUEDATE", SqlDbType.Int);  // 納品完了予定日
                            SqlParameter paraAnswerDeliveryDate = sqlCommand.Parameters.Add("@ANSWERDELIVERYDATE", SqlDbType.NVarChar);  // 回答納期
                            SqlParameter paraBLGoodsCode = sqlCommand.Parameters.Add("@BLGOODSCODE", SqlDbType.Int);  // BL商品コード
                            SqlParameter paraBLGoodsDrCode = sqlCommand.Parameters.Add("@BLGOODSDRCODE", SqlDbType.Int);  // BL商品コード枝番
                            SqlParameter paraInqGoodsName = sqlCommand.Parameters.Add("@INQGOODSNAME", SqlDbType.NVarChar);  // 問発商品名
                            SqlParameter paraAnsGoodsName = sqlCommand.Parameters.Add("@ANSGOODSNAME", SqlDbType.NVarChar);  // 回答商品名
                            SqlParameter paraSalesOrderCount = sqlCommand.Parameters.Add("@SALESORDERCOUNT", SqlDbType.Float);  // 発注数
                            SqlParameter paraDeliveredGoodsCount = sqlCommand.Parameters.Add("@DELIVEREDGOODSCOUNT", SqlDbType.Float);  // 納品数
                            SqlParameter paraGoodsNo = sqlCommand.Parameters.Add("@GOODSNO", SqlDbType.NVarChar);  // 商品番号
                            SqlParameter paraGoodsMakerCd = sqlCommand.Parameters.Add("@GOODSMAKERCD", SqlDbType.Int);  // 商品メーカーコード
                            SqlParameter paraGoodsMakerNm = sqlCommand.Parameters.Add("@GOODSMAKERNM", SqlDbType.NVarChar);  // 商品メーカー名称
                            SqlParameter paraPureGoodsMakerCd = sqlCommand.Parameters.Add("@PUREGOODSMAKERCD", SqlDbType.Int);  // 純正商品メーカーコード
                            SqlParameter paraInqPureGoodsNo = sqlCommand.Parameters.Add("@INQPUREGOODSNO", SqlDbType.NVarChar);  // 問発純正商品番号
                            SqlParameter paraAnsPureGoodsNo = sqlCommand.Parameters.Add("@ANSPUREGOODSNO", SqlDbType.NVarChar);  // 回答純正商品番号
                            SqlParameter paraListPrice = sqlCommand.Parameters.Add("@LISTPRICE", SqlDbType.BigInt);  // 定価
                            SqlParameter paraUnitPrice = sqlCommand.Parameters.Add("@UNITPRICE", SqlDbType.BigInt);  // 単価
                            SqlParameter paraGoodsAddInfo = sqlCommand.Parameters.Add("@GOODSADDINFO", SqlDbType.NVarChar);  // 商品補足情報
                            SqlParameter paraRoughRrofit = sqlCommand.Parameters.Add("@ROUGHRROFIT", SqlDbType.BigInt);  // 粗利額
                            SqlParameter paraRoughRate = sqlCommand.Parameters.Add("@ROUGHRATE", SqlDbType.Float);  // 粗利率
                            SqlParameter paraAnswerLimitDate = sqlCommand.Parameters.Add("@ANSWERLIMITDATE", SqlDbType.Int);  // 回答期限
                            SqlParameter paraCommentDtl = sqlCommand.Parameters.Add("@COMMENTDTL", SqlDbType.NVarChar);  // 備考(明細)
                            SqlParameter paraAppendingFileDtl = sqlCommand.Parameters.Add("@APPENDINGFILEDTL", SqlDbType.VarBinary);  // 添付ファイル(明細)
                            SqlParameter paraAppendingFileNmDtl = sqlCommand.Parameters.Add("@APPENDINGFILENMDTL", SqlDbType.NVarChar);  // 添付ファイル名(明細)
                            SqlParameter paraShelfNo = sqlCommand.Parameters.Add("@SHELFNO", SqlDbType.NVarChar);  // 棚番
                            SqlParameter paraAdditionalDivCd = sqlCommand.Parameters.Add("@ADDITIONALDIVCD", SqlDbType.Int);  // 追加区分
                            SqlParameter paraCorrectDivCD = sqlCommand.Parameters.Add("@CORRECTDIVCD", SqlDbType.Int);  // 訂正区分
                            SqlParameter paraAcptAnOdrStatus = sqlCommand.Parameters.Add("@ACPTANODRSTATUS", SqlDbType.Int);  // 受注ステータス
                            SqlParameter paraSalesSlipNum = sqlCommand.Parameters.Add("@SALESSLIPNUM", SqlDbType.NChar);  // 売上伝票番号
                            SqlParameter paraSalesRowNo = sqlCommand.Parameters.Add("@SALESROWNO", SqlDbType.Int);  // 売上行番号
                            SqlParameter paraCampaignCode = sqlCommand.Parameters.Add("@CAMPAIGNCODE", SqlDbType.Int);  // キャンペーンコード
                            SqlParameter paraStockDiv = sqlCommand.Parameters.Add("@STOCKDIV", SqlDbType.Int);  // 在庫区分
                            SqlParameter paraInqOrdDivCd = sqlCommand.Parameters.Add("@INQORDDIVCD", SqlDbType.Int);  // 問合せ・発注種別
                            SqlParameter paraDisplayOrder = sqlCommand.Parameters.Add("@DISPLAYORDER", SqlDbType.Int);  // 表示順位
                            SqlParameter paraGoodsMngNo = sqlCommand.Parameters.Add("@GOODSMNGNO", SqlDbType.Int);  // 商品管理番号
                            // 2010/05/26 Add >>>
                            SqlParameter paraCancelCndtinDiv = sqlCommand.Parameters.Add("@CANCELCNDTINDIV", SqlDbType.SmallInt);  // キャンセル状態区分
                            // 2010/05/26 Add <<<
                            // 2011/02/09 Add >>>
                            SqlParameter paraDtlTakeinDivCd = sqlCommand.Parameters.Add("@DTLTAKEINDIVCD", SqlDbType.Int);  // 明細取込区分
                            // 2011/02/09 Add <<<
                            //--- ADD 2011/05/20 --->>>
                            SqlParameter paraWarehouseCode = sqlCommand.Parameters.Add("@WAREHOUSECODE", SqlDbType.NChar);  // 倉庫コード
                            SqlParameter paraWarehouseName = sqlCommand.Parameters.Add("@WAREHOUSENAME", SqlDbType.NVarChar);  // 倉庫名称
                            SqlParameter paraWarehouseShelfNo = sqlCommand.Parameters.Add("@WAREHOUSESHELFNO", SqlDbType.NVarChar);  // 倉庫棚番
                            //--- ADD 2011/05/20 ---<<<
                            // -- ADD 2011/08/10   ------ >>>>>>
                            SqlParameter paraPMPrsntCount = sqlCommand.Parameters.Add("@PMPRSNTCOUNTRF", SqlDbType.NChar);              // PM現在庫数
                            SqlParameter paraSetPartsMkrCd = sqlCommand.Parameters.Add("@SETPARTSMKRCDRF", SqlDbType.NVarChar);         // セット部品メーカーコード
                            SqlParameter paraSetPartsNumber = sqlCommand.Parameters.Add("@SETPARTSNUMBERRF", SqlDbType.NVarChar);       // セット部品番号
                            SqlParameter paraSetPartsMainSubNo = sqlCommand.Parameters.Add("@SETPARTSMAINSUBNORF", SqlDbType.NChar);    // セット部品親子番号
                            // -- ADD 2011/08/10   ------ <<<<<<
                            //--- ADD 2012/01/10 --->>>
                            SqlParameter paraGoodsSpecialNote = sqlCommand.Parameters.Add("@GOODSSPECIALNOTE", SqlDbType.NVarChar);    // 商品規格・特記事項
                            //--- ADD 2012/01/10 ---<<<
                            //--- ADD 2012/04/12 --->>> 
                            SqlParameter paraPsMngNo = sqlCommand.Parameters.Add("@PSMNGNO", SqlDbType.Int);  // PS管理番号
                            //--- ADD 2012/04/12 ---<<<
                            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                            SqlParameter paraAutoEstimatePartsCd = sqlCommand.Parameters.Add("@AUTOESTIMATEPARTSCD", SqlDbType.NVarChar);    // 自動見積部品コード
                            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            SqlParameter paraSalesTotalTaxInc = sqlCommand.Parameters.Add("@SALESTOTALTAXINC", SqlDbType.BigInt);  // 売上伝票合計（税込）
                            SqlParameter paraSalesTotalTaxExc = sqlCommand.Parameters.Add("@SALESTOTALTAXEXC", SqlDbType.BigInt);  // 売上伝票合計（税抜）
                            SqlParameter paraScmConsTaxLayMethod = sqlCommand.Parameters.Add("@SCMCONSTAXLAYMETHOD", SqlDbType.Int);  // SCM消費税転嫁方式
                            SqlParameter paraConsTaxRate = sqlCommand.Parameters.Add("@CONSTAXRATE", SqlDbType.Float);  // 消費税税率
                            SqlParameter paraScmFractionProcCd = sqlCommand.Parameters.Add("@SCMFRACTIONPROCCD", SqlDbType.Int);  // SCM端数処理区分
                            SqlParameter paraAccRecConsTax = sqlCommand.Parameters.Add("@ACCRECCONSTAX", SqlDbType.BigInt);  // 売掛消費税
                            SqlParameter paraPMSalesDate = sqlCommand.Parameters.Add("@PMSALESDATE", SqlDbType.Int);  // PM売上日
                            SqlParameter paraSuppSlpPrtTime = sqlCommand.Parameters.Add("@SUPPSLPPRTTIME", SqlDbType.Int);  // 仕入先伝票発行時刻
                            SqlParameter paraSalesMoneyTaxInc = sqlCommand.Parameters.Add("@SALESMONEYTAXINC", SqlDbType.BigInt);  // 売上金額（税込み）
                            SqlParameter paraSalesMoneyTaxExc = sqlCommand.Parameters.Add("@SALESMONEYTAXEXC", SqlDbType.BigInt);  // 売上金額（税抜き）
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            SqlParameter paraDataInputSystem = sqlCommand.Parameters.Add("@DATAINPUTSYSTEM", SqlDbType.Int);  // データ入力システム
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            SqlParameter paraPmMainMngWarehouseCd = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSECD", SqlDbType.NVarChar);
                            SqlParameter paraPmMainMngWarehouseName = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSENAME", SqlDbType.NVarChar);
                            SqlParameter paraPmMainMngShelfNo = sqlCommand.Parameters.Add("@PMMAINMNGSHELFNO", SqlDbType.NVarChar);
                            SqlParameter paraPmMainMngPrsntCount = sqlCommand.Parameters.Add("@PMMAINMNGPRSNTCOUNT", SqlDbType.Float);
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                            SqlParameter paraPrmSetDtlNo2 = sqlCommand.Parameters.Add("@PRMSETDTLNO2", SqlDbType.Int); // 優良設定詳細コード２
                            SqlParameter paraPrmSetDtlName2 = sqlCommand.Parameters.Add("@PRMSETDTLNAME2", SqlDbType.NVarChar); // 優良設定詳細名称２
                            SqlParameter paraStockStatusDiv = sqlCommand.Parameters.Add("@STOCKSTATUSDIV", SqlDbType.SmallInt); // 在庫状況区分
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                            SqlParameter paraRentDiv = sqlCommand.Parameters.Add("@RENTDIV", SqlDbType.SmallInt); // 貸出区分            
                            SqlParameter paraMkrSuggestRtPric = sqlCommand.Parameters.Add("@MKRSUGGESTRTPRIC", SqlDbType.BigInt); // メーカー希望小売価格
                            SqlParameter paraOpenPriceDiv = sqlCommand.Parameters.Add("@OPENPRICEDIV", SqlDbType.Int); // オープン価格区分    
                            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                            // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                            SqlParameter paraBgnGoodsDiv = sqlCommand.Parameters.Add("@BGNGOODSDIV", SqlDbType.SmallInt);  // お買得商品選択区分
                            // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                            SqlParameter paraModelPrtsAdptYm = sqlCommand.Parameters.Add("@MODELPRTSADPTYM", SqlDbType.Int); // 型式別部品採用年月    
                            SqlParameter paraModelPrtsAblsYm = sqlCommand.Parameters.Add("@MODELPRTSABLSYM", SqlDbType.Int); // 型式別部品廃止年月    
                            SqlParameter paraModelPrtsAdptFrameNo = sqlCommand.Parameters.Add("@MODELPRTSADPTFRAMENO", SqlDbType.Int); // 型式別部品採用車台番号    
                            SqlParameter paraModelPrtsAblsFrameNo = sqlCommand.Parameters.Add("@MODELPRTSABLSFRAMENO", SqlDbType.Int); // 型式別部品廃止車台番号    
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            SqlParameter paraAnsDeliDateDiv = sqlCommand.Parameters.Add("@ANSDELIDATEDIV", SqlDbType.SmallInt);  // 回答納期区分
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            SqlParameter paraGoodsSpecialNtForFac = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORFAC", SqlDbType.NVarChar);  // 商品規格・特記事項(工場向け)
                            SqlParameter paraGoodsSpecialNtForCOw = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORCOW", SqlDbType.NVarChar);  // 商品規格・特記事項(カーオーナー向け)
                            SqlParameter paraPrmSetDtlName2ForFac = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORFAC", SqlDbType.NVarChar);  // 優良設定詳細名称２(工場向け)
                            SqlParameter paraPrmSetDtlName2ForCOw = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORCOW", SqlDbType.NVarChar);  // 優良設定詳細名称２(カーオーナー向け)
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            SqlParameter paraInqBlUtyPtThCd = sqlCommand.Parameters.Add("@INQBLUTYPTTHCD", SqlDbType.NChar);  // 問発BL統一部品コード(スリーコード版)
                            SqlParameter paraInqBlUtyPtSbCd = sqlCommand.Parameters.Add("@INQBLUTYPTSBCD", SqlDbType.Int);  // 問発BL統一部品サブコード
                            SqlParameter paraAnsBlUtyPtThCd = sqlCommand.Parameters.Add("@ANSBLUTYPTTHCD", SqlDbType.NChar);  // 回答BL統一部品コード(スリーコード版)
                            SqlParameter paraAnsBlUtyPtSbCd = sqlCommand.Parameters.Add("@ANSBLUTYPTSBCD", SqlDbType.Int);  // 回答BL統一部品サブコード
                            SqlParameter paraAnsBLGoodsCode = sqlCommand.Parameters.Add("@ANSBLGOODSCODE", SqlDbType.Int);  // 回答BL商品コード
                            SqlParameter paraAnsBLGoodsDrCode = sqlCommand.Parameters.Add("@ANSBLGOODSDRCODE", SqlDbType.Int);  // 回答BL商品コード枝番
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                            //Parameterオブジェクトへ値設定
                            paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtlAsWork.CreateDateTime);  // 作成日時
                            paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(sCMAcOdrDtlAsWork.UpdateDateTime);  // 更新日時
                            paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.EnterpriseCode);  // 企業コード
                            paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtlAsWork.FileHeaderGuid);  // GUID
                            paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.UpdEmployeeCode);  // 更新従業員コード
                            paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.UpdAssemblyId1);  // 更新アセンブリID1
                            paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.UpdAssemblyId2);  // 更新アセンブリID2
                            paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.LogicalDeleteCode);  // 論理削除区分
                            paraInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOriginalEpCd);  // 問合せ元企業コード
                            paraInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOriginalSecCd);  // 問合せ元拠点コード
                            paraInqOtherEpCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOtherEpCd);  // 問合せ先企業コード
                            paraInqOtherSecCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqOtherSecCd);  // 問合せ先拠点コード
                            paraInquiryNumber.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.InquiryNumber);  // 問合せ番号

                            if (sCMAcOdrDtlAsWork.UpdateDate == DateTime.MinValue)
                            {
                                paraUpdateDate.Value = 0;  // 更新年月日
                            }
                            else
                            {
                                paraUpdateDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlAsWork.UpdateDate);  // 更新年月日
                            }
                            paraUpdateTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.UpdateTime);  // 更新時間
                            paraInqRowNumber.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqRowNumber);  // 問合せ行番号
                            paraInqRowNumDerivedNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqRowNumDerivedNo);  // 問合せ行番号枝番
                            paraInqOrgDtlDiscGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtlAsWork.InqOrgDtlDiscGuid);  // 問合せ元明細識別GUID
                            paraInqOthDtlDiscGuid.Value = SqlDataMediator.SqlSetGuid(sCMAcOdrDtlAsWork.InqOthDtlDiscGuid);  // 問合せ先明細識別GUID
                            paraGoodsDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.GoodsDivCd);  // 商品種別
                            paraRecyclePrtKindCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.RecyclePrtKindCode);  // リサイクル部品種別
                            paraRecyclePrtKindName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.RecyclePrtKindName);  // リサイクル部品種別名称
                            paraDeliveredGoodsDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.DeliveredGoodsDiv);  // 納品区分
                            paraHandleDivCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.HandleDivCode);  // 取扱区分
                            paraGoodsShape.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.GoodsShape);  // 商品形態
                            paraDelivrdGdsConfCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.DelivrdGdsConfCd);  // 納品確認区分
                            paraDeliGdsCmpltDueDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlAsWork.DeliGdsCmpltDueDate);  // 納品完了予定日
                            paraAnswerDeliveryDate.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AnswerDeliveryDate);  // 回答納期
                            paraBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.BLGoodsCode);  // BL商品コード
                            paraBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.BLGoodsDrCode);  // BL商品コード枝番
                            paraInqGoodsName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqGoodsName);  // 問発商品名
                            paraAnsGoodsName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AnsGoodsName);  // 回答商品名
                            paraSalesOrderCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.SalesOrderCount);  // 発注数
                            paraDeliveredGoodsCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.DeliveredGoodsCount);  // 納品数
                            paraGoodsNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsNo);  // 商品番号
                            paraGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.GoodsMakerCd);  // 商品メーカーコード
                            paraGoodsMakerNm.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsMakerNm);  // 商品メーカー名称
                            paraPureGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.PureGoodsMakerCd);  // 純正商品メーカーコード
                            paraInqPureGoodsNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqPureGoodsNo);  // 問発純正商品番号
                            paraAnsPureGoodsNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AnsPureGoodsNo);  // 回答純正商品番号
                            paraListPrice.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.ListPrice);  // 定価
                            paraUnitPrice.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.UnitPrice);  // 単価
                            paraGoodsAddInfo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsAddInfo);  // 商品補足情報
                            paraRoughRrofit.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.RoughRrofit);  // 粗利額
                            paraRoughRate.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.RoughRate);  // 粗利率
                            paraAnswerLimitDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(sCMAcOdrDtlAsWork.AnswerLimitDate);  // 回答期限
                            paraCommentDtl.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.CommentDtl);  // 備考(明細)
                            paraAppendingFileDtl.Value = SqlDataMediator.SqlSetBinary(sCMAcOdrDtlAsWork.AppendingFileDtl);  // 添付ファイル(明細)
                            paraAppendingFileNmDtl.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AppendingFileNmDtl);  // 添付ファイル名(明細)
                            paraShelfNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.ShelfNo);  // 棚番
                            paraAdditionalDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AdditionalDivCd);  // 追加区分
                            paraCorrectDivCD.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.CorrectDivCD);  // 訂正区分
                            paraAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AcptAnOdrStatus);  // 受注ステータス
                            paraSalesSlipNum.Value = sCMAcOdrDtlAsWork.SalesSlipNum;  // 売上伝票番号
                            paraSalesRowNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SalesRowNo);  // 売上行番号
                            paraCampaignCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.CampaignCode);  // キャンペーンコード
                            paraStockDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.StockDiv);  // 在庫区分
                            paraInqOrdDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqOrdDivCd);  // 問合せ・発注種別
                            paraDisplayOrder.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.DisplayOrder);  // 表示順位
                            paraGoodsMngNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.GoodsMngNo);  // 商品管理番号
                            // 2010/05/26 Add >>>
                            paraCancelCndtinDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlAsWork.CancelCndtinDiv);  // キャンセル状態区分
                            // 2010/05/26 Add <<<
                            // 2011/02/09 Add >>>
                            paraDtlTakeinDivCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.DtlTakeinDivCd);  // 明細取込区分
                            // 2011/02/09 Add <<<
                            //--- ADD 2011/05/20 --->>>
                            paraWarehouseCode.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.WarehouseCode);  // 倉庫コード
                            paraWarehouseName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.WarehouseName);  // 倉庫名称
                            paraWarehouseShelfNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.WarehouseShelfNo);  // 倉庫棚番
                            //--- ADD 2011/05/20 ---<<<
                            // -- ADD 2011/08/10   ------ >>>>>>
                            paraPMPrsntCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.PmPrsntCount);              // PM現在庫数
                            paraSetPartsMkrCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SetPartsMkrCd);             // セット部品メーカーコード
                            paraSetPartsNumber.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.SetPartsNumber);          // セット部品番号
                            paraSetPartsMainSubNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SetPartsMainSubNo);     // セット部品親子番号
                            // -- ADD 2011/08/10   ------ <<<<<<
                            //--- ADD 2012/01/10 --->>>
                            paraGoodsSpecialNote.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsSpecialNote);     // 商品規格・特記事項
                            //--- ADD 2012/01/10 ---<<<
                            //--- ADD 2012/04/12 --->>> 
                            paraPsMngNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.PSMngNo);  // PS管理番号
                            //--- ADD 2012/04/12 ---<<<
                            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                            paraAutoEstimatePartsCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AutoEstimatePartsCd);     // 自動見積部品コード
                            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            paraSalesTotalTaxInc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.SalesTotalTaxInc);  // 売上伝票合計（税込）
                            paraSalesTotalTaxExc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.SalesTotalTaxExc);  // 売上伝票合計（税抜）
                            paraScmConsTaxLayMethod.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ScmConsTaxLayMethod);  // SCM消費税転嫁方式
                            paraConsTaxRate.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.ConsTaxRate);  // 消費税税率
                            paraScmFractionProcCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ScmFractionProcCd);  // SCM端数処理区分
                            paraAccRecConsTax.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.AccRecConsTax);  // 売掛消費税
                            paraPMSalesDate.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.PMSalesDate);  // PM売上日
                            paraSuppSlpPrtTime.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.SuppSlpPrtTime);  // 仕入先伝票発行時刻
                            paraSalesMoneyTaxInc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.SalesMoneyTaxInc);  // 売上金額（税込み）
                            paraSalesMoneyTaxExc.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.SalesMoneyTaxExc);  // 売上金額（税抜き）
                            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            paraDataInputSystem.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.DataInputSystem);  // データ入力システム
                            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            paraPmMainMngWarehouseCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PmMainMngWarehouseCd);
                            paraPmMainMngWarehouseName.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PmMainMngWarehouseName);
                            paraPmMainMngShelfNo.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PmMainMngShelfNo);
                            paraPmMainMngPrsntCount.Value = SqlDataMediator.SqlSetDouble(sCMAcOdrDtlAsWork.PmMainMngPrsntCount);
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                            paraPrmSetDtlNo2.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.PrmSetDtlNo2); // 優良設定詳細コード２
                            paraPrmSetDtlName2.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PrmSetDtlName2); // 優良設定詳細名称２
                            paraStockStatusDiv.Value = SqlDataMediator.SqlSetShort(sCMAcOdrDtlAsWork.StockStatusDiv); // 在庫状況区分
                            // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                            paraRentDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlAsWork.RentDiv); // 貸出区分            
                            paraMkrSuggestRtPric.Value = SqlDataMediator.SqlSetInt64(sCMAcOdrDtlAsWork.MkrSuggestRtPric); // メーカー希望小売価格
                            paraOpenPriceDiv.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.OpenPriceDiv); // オープン価格区分    
                            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                            // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                            paraBgnGoodsDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlAsWork.BgnGoodsDiv); // お買得商品選択区分
                            // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                            paraModelPrtsAdptYm.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ModelPrtsAdptYm); // 型式別部品採用年月    
                            paraModelPrtsAblsYm.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ModelPrtsAblsYm); // 型式別部品廃止年月    
                            paraModelPrtsAdptFrameNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ModelPrtsAdptFrameNo); // 型式別部品採用車台番号    
                            paraModelPrtsAblsFrameNo.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.ModelPrtsAblsFrameNo); // 型式別部品廃止車台番号    
                            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            paraAnsDeliDateDiv.Value = SqlDataMediator.SqlSetInt16(sCMAcOdrDtlAsWork.AnsDeliDateDiv); // 回答納期区分
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            paraGoodsSpecialNtForFac.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsSpecialNtForFac); // 商品規格・特記事項(工場向け)
                            paraGoodsSpecialNtForCOw.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.GoodsSpecialNtForCOw); // 商品規格・特記事項(カーオーナー向け)
                            paraPrmSetDtlName2ForFac.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PrmSetDtlName2ForFac); // 優良設定詳細名称２(工場向け)
                            paraPrmSetDtlName2ForCOw.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.PrmSetDtlName2ForCOw); // 優良設定詳細名称２(カーオーナー向け)
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            paraInqBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.InqBlUtyPtThCd);  // 問発BL統一部品コード(スリーコード版)
                            paraInqBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.InqBlUtyPtSbCd);  // 問発BL統一部品サブコード
                            paraAnsBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(sCMAcOdrDtlAsWork.AnsBlUtyPtThCd);  // 回答BL統一部品コード(スリーコード版)
                            paraAnsBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AnsBlUtyPtSbCd);  // 回答BL統一部品サブコード
                            paraAnsBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AnsBLGoodsCode);  // 回答BL商品コード
                            paraAnsBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(sCMAcOdrDtlAsWork.AnsBLGoodsDrCode);  // 回答BL商品コード枝番
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                            sqlCommand.ExecuteNonQuery();
                            al.Add(sCMAcOdrDtlAsWork);
                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------>>>>>
                        }
                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------<<<<<
                    }
                }

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            scmAcOdrDtlAsWorkList = al;

            return status;
        }
        # endregion

        # region [クラス格納処理]
        /// <summary>
        /// クラス格納処理 Reader → SCMAcOdrDataWork
        /// </summary>
        /// <param name="myReader">SqlDataReader</param>
        /// <returns>SCMAcOdrDataWork オブジェクト</returns>
        /// <remarks>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        /// </remarks>
        private SCMAcOdrDataWork CopyToSCMAcOdrDataWorkFromReader(ref SqlDataReader myReader)
        {
            SCMAcOdrDataWork sCMAcOdrDataWork = new SCMAcOdrDataWork();

            if (myReader != null && sCMAcOdrDataWork != null)
            {
                # region クラスへ格納
                sCMAcOdrDataWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF"));  // 作成日時
                sCMAcOdrDataWork.UpdateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));  // 更新日時
                sCMAcOdrDataWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));  // 企業コード
                sCMAcOdrDataWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF"));  // GUID
                sCMAcOdrDataWork.UpdEmployeeCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDEMPLOYEECODERF"));  // 更新従業員コード
                sCMAcOdrDataWork.UpdAssemblyId1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID1RF"));  // 更新アセンブリID1
                sCMAcOdrDataWork.UpdAssemblyId2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID2RF"));  // 更新アセンブリID2
                sCMAcOdrDataWork.LogicalDeleteCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LOGICALDELETECODERF"));  // 論理削除区分
                sCMAcOdrDataWork.InqOriginalEpCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQORIGINALEPCDRF")).Trim();  // 問合せ元企業コード//@@@@20230303
                sCMAcOdrDataWork.InqOriginalSecCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQORIGINALSECCDRF"));  // 問合せ元拠点コード
                sCMAcOdrDataWork.InqOtherEpCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQOTHEREPCDRF"));  // 問合せ先企業コード
                sCMAcOdrDataWork.InqOtherSecCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQOTHERSECCDRF"));  // 問合せ先拠点コード
                sCMAcOdrDataWork.InquiryNumber = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("INQUIRYNUMBERRF"));  // 問合せ番号
                sCMAcOdrDataWork.CustomerCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CUSTOMERCODERF"));  // 得意先コード
                sCMAcOdrDataWork.UpdateDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("UPDATEDATERF"));  // 更新年月日
                sCMAcOdrDataWork.UpdateTime = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("UPDATETIMERF"));  // 更新時間
                sCMAcOdrDataWork.AnswerDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ANSWERDIVCDRF"));  // 回答区分
                sCMAcOdrDataWork.JudgementDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("JUDGEMENTDATERF"));  // 確定日
                sCMAcOdrDataWork.InqOrdNote = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQORDNOTERF"));  // 問合せ・発注備考
                sCMAcOdrDataWork.AppendingFile = SqlDataMediator.SqlGetBinaly(myReader, myReader.GetOrdinal("APPENDINGFILERF"));  // 添付ファイル
                sCMAcOdrDataWork.AppendingFileNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("APPENDINGFILENMRF"));  // 添付ファイル名
                sCMAcOdrDataWork.InqEmployeeCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQEMPLOYEECDRF"));  // 問合せ従業員コード
                sCMAcOdrDataWork.InqEmployeeNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQEMPLOYEENMRF"));  // 問合せ従業員名称
                sCMAcOdrDataWork.AnsEmployeeCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSEMPLOYEECDRF"));  // 回答従業員コード
                sCMAcOdrDataWork.AnsEmployeeNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSEMPLOYEENMRF"));  // 回答従業員名称
                sCMAcOdrDataWork.InquiryDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("INQUIRYDATERF"));  // 問合せ日
                sCMAcOdrDataWork.AcptAnOdrStatus = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ACPTANODRSTATUSRF"));  // 受注ステータス
                sCMAcOdrDataWork.SalesSlipNum = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SALESSLIPNUMRF"));  // 売上伝票番号
                sCMAcOdrDataWork.SalesTotalTaxInc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESTOTALTAXINCRF"));  // 売上伝票合計（税込み）
                sCMAcOdrDataWork.SalesSubtotalTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESSUBTOTALTAXRF"));  // 売上小計（税）
                sCMAcOdrDataWork.InqOrdDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("INQORDDIVCDRF"));  // 問合せ・発注種別
                sCMAcOdrDataWork.InqOrdAnsDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("INQORDANSDIVCDRF"));  // 問発・回答種別
                sCMAcOdrDataWork.ReceiveDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("RECEIVEDATETIMERF"));  // 受信日時
                sCMAcOdrDataWork.AnswerCreateDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ANSWERCREATEDIVRF"));  // 回答作成区分
                // 2010/05/26 Add >>>
                sCMAcOdrDataWork.CancelDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("CANCELDIVRF"));  // キャンセル区分
                sCMAcOdrDataWork.CMTCooprtDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("CMTCOOPRTDIVRF"));  // CMT連携区分
                // 2010/05/26 Add <<<
                sCMAcOdrDataWork.SfPmCprtInstSlipNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SFPMCPRTINSTSLIPNORF"));  // SF-PM連携指示書番号  //ADD 2011/05/20

                sCMAcOdrDataWork.AcceptOrOrderKind = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("ACCEPTORORDERKINDRF"));  // 受発注種別  //ADD 2011/08/10
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDataWork.TabUseDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("TABUSEDIVRF"));  // タブレット使用区分
                // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                sCMAcOdrDataWork.CarMngCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CARMNGCODERF"));  // 車両管理コード
                // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sCMAcOdrDataWork.AutoAnsMthd = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("AUTOANSMTHDRF"));  // 自動回答方式
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                # endregion

            }

            return sCMAcOdrDataWork;
        }

        /// <summary>
        /// クラス格納処理 Reader → SCMAcOdrDtCarWork
        /// </summary>
        /// <param name="myReader">SqlDataReader</param>
        /// <returns>SCMAcOdrDtCarWork オブジェクト</returns>
        /// <remarks>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        /// </remarks>
        private SCMAcOdrDtCarWork CopyToSCMAcOdrDtCarWorkFromReader(ref SqlDataReader myReader)
        {
            SCMAcOdrDtCarWork sCMAcOdrDtCarWork = new SCMAcOdrDtCarWork();

            if (myReader != null && sCMAcOdrDtCarWork != null)
            {
                # region クラスへ格納
                sCMAcOdrDtCarWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF"));  // 作成日時
                sCMAcOdrDtCarWork.UpdateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));  // 更新日時
                sCMAcOdrDtCarWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));  // 企業コード
                sCMAcOdrDtCarWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF"));  // GUID
                sCMAcOdrDtCarWork.UpdEmployeeCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDEMPLOYEECODERF"));  // 更新従業員コード
                sCMAcOdrDtCarWork.UpdAssemblyId1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID1RF"));  // 更新アセンブリID1
                sCMAcOdrDtCarWork.UpdAssemblyId2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID2RF"));  // 更新アセンブリID2
                sCMAcOdrDtCarWork.LogicalDeleteCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LOGICALDELETECODERF"));  // 論理削除区分
                sCMAcOdrDtCarWork.InqOriginalEpCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQORIGINALEPCDRF")).Trim();  // 問合せ元企業コード//@@@@20230303
                sCMAcOdrDtCarWork.InqOriginalSecCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQORIGINALSECCDRF"));  // 問合せ元拠点コード
                sCMAcOdrDtCarWork.InquiryNumber = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("INQUIRYNUMBERRF"));  // 問合せ番号
                sCMAcOdrDtCarWork.NumberPlate1Code = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("NUMBERPLATE1CODERF"));  // 陸運事務所番号
                sCMAcOdrDtCarWork.NumberPlate1Name = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("NUMBERPLATE1NAMERF"));  // 陸運事務局名称
                sCMAcOdrDtCarWork.NumberPlate2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("NUMBERPLATE2RF"));  // 車両登録番号（種別）
                sCMAcOdrDtCarWork.NumberPlate3 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("NUMBERPLATE3RF"));  // 車両登録番号（カナ）
                sCMAcOdrDtCarWork.NumberPlate4 = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("NUMBERPLATE4RF"));  // 車両登録番号（プレート番号）
                sCMAcOdrDtCarWork.ModelDesignationNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELDESIGNATIONNORF"));  // 型式指定番号
                sCMAcOdrDtCarWork.CategoryNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CATEGORYNORF"));  // 類別番号
                sCMAcOdrDtCarWork.MakerCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MAKERCODERF"));  // メーカーコード
                sCMAcOdrDtCarWork.ModelCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELCODERF"));  // 車種コード
                sCMAcOdrDtCarWork.ModelSubCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELSUBCODERF"));  // 車種サブコード
                sCMAcOdrDtCarWork.ModelName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("MODELNAMERF"));  // 車種名
                sCMAcOdrDtCarWork.CarInspectCertModel = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CARINSPECTCERTMODELRF"));  // 車検証型式
                sCMAcOdrDtCarWork.FullModel = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("FULLMODELRF"));  // 型式（フル型）
                sCMAcOdrDtCarWork.FrameNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("FRAMENORF"));  // 車台番号
                sCMAcOdrDtCarWork.FrameModel = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("FRAMEMODELRF"));  // 車台型式
                sCMAcOdrDtCarWork.ChassisNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CHASSISNORF"));  // シャシーNo
                sCMAcOdrDtCarWork.CarProperNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CARPROPERNORF"));  // 車両固有番号
                sCMAcOdrDtCarWork.ProduceTypeOfYearNum = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PRODUCETYPEOFYEARNUMRF"));  // 生産年式（NUMタイプ）
                sCMAcOdrDtCarWork.Comment = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("COMMENTRF"));  // コメント
                sCMAcOdrDtCarWork.RpColorCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("RPCOLORCODERF"));  // リペアカラーコード
                sCMAcOdrDtCarWork.ColorName1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("COLORNAME1RF"));  // カラー名称1
                sCMAcOdrDtCarWork.TrimCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("TRIMCODERF"));  // トリムコード
                sCMAcOdrDtCarWork.TrimName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("TRIMNAMERF"));  // トリム名称
                sCMAcOdrDtCarWork.Mileage = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MILEAGERF"));  // 車両走行距離
                sCMAcOdrDtCarWork.EquipObj = SqlDataMediator.SqlGetBinaly(myReader, myReader.GetOrdinal("EQUIPOBJRF"));  // 装備オブジェクト
                // ADD 2012/05/31 ------------------>>>>>
                if (sCMAcOdrDtCarWork.EquipObj == null)
                {
                    sCMAcOdrDtCarWork.EquipObj = new byte[0];
                }
                // ADD 2012/05/31 ------------------<<<<<
                sCMAcOdrDtCarWork.AcptAnOdrStatus = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ACPTANODRSTATUSRF"));  // 受注ステータス
                sCMAcOdrDtCarWork.SalesSlipNum = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SALESSLIPNUMRF"));  // 売上伝票番号
                // -- ADD 2011/08/10   ------ >>>>>>
                sCMAcOdrDtCarWork.CarNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CARNORF"));  // 号車
                sCMAcOdrDtCarWork.MakerName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("MAKERNAMERF"));  // メーカー名称
                sCMAcOdrDtCarWork.GradeName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GRADENAMERF"));  // グレード名称
                sCMAcOdrDtCarWork.BodyName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("BODYNAMERF"));  // ボディー名称
                sCMAcOdrDtCarWork.DoorCount = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DOORCOUNTRF"));  // ドア数
                sCMAcOdrDtCarWork.EngineModelNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENGINEMODELNMRF"));  // エンジン型式名称
                sCMAcOdrDtCarWork.CmnNmEngineDisPlace = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CMNNMENGINEDISPLACERF"));  // 通称排気量
                sCMAcOdrDtCarWork.EngineModel = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENGINEMODELRF"));  // 原動機型式（エンジン）
                sCMAcOdrDtCarWork.NumberOfGear = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("NUMBEROFGEARRF")); // 変速段数
                sCMAcOdrDtCarWork.GearNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GEARNMRF"));  // 変速機名称
                sCMAcOdrDtCarWork.EDivNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("EDIVNMRF"));  // E区分名称
                sCMAcOdrDtCarWork.TransmissionNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("TRANSMISSIONNMRF"));  // ミッション名称
                sCMAcOdrDtCarWork.ShiftNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SHIFTNMRF"));  // シフト名称
                // -- ADD 2011/08/10   ------ <<<<<<
                // ADD 2012/05/31 ------------------>>>>>
                sCMAcOdrDtCarWork.FirstEntryDateNumTyp = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FIRSTENTRYDATENUMTYPRF"));  // 初年度（NUMタイプ）
                sCMAcOdrDtCarWork.CarAddInf = SqlDataMediator.SqlGetBinaly(myReader, myReader.GetOrdinal("CARADDINFRF"));  // 車両付加情報オブジェクト
                if (sCMAcOdrDtCarWork.CarAddInf == null)
                {
                    sCMAcOdrDtCarWork.CarAddInf = new byte[0];
                }
                sCMAcOdrDtCarWork.EquipPrtsObj = SqlDataMediator.SqlGetBinaly(myReader, myReader.GetOrdinal("EQUIPPRTSOBJRF"));  // 装備部品オブジェクト
                if (sCMAcOdrDtCarWork.EquipPrtsObj == null)
                {
                    sCMAcOdrDtCarWork.EquipPrtsObj = new byte[0];
                }
                // ADD 2012/05/31 ------------------<<<<<
                // --- ADD 2013/05/02 2013/05/22配信分 SCM障害№10521デグレ対応 ------------------>>>>>
                sCMAcOdrDtCarWork.CarMngCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CARMNGCODERF"));  // 車両管理コード
                // --- ADD 2013/05/02 2013/05/22配信分 SCM障害№10521デグレ対応 ------------------<<<<<
                // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                sCMAcOdrDtCarWork.ExpectedCeDate = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("EXPECTEDCEDATERF"));  // 入庫予定日
                // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<
                # endregion

            }

            return sCMAcOdrDtCarWork;
        }

        /// <summary>
        /// クラス格納処理 Reader → SCMAcOdrDtlIqWork
        /// </summary>
        /// <param name="myReader">SqlDataReader</param>
        /// <returns>SCMAcOdrDtlIqWork オブジェクト</returns>
        /// <remarks>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        /// </remarks>
        private SCMAcOdrDtlIqWork CopyToSCMAcOdrDtlIqWorkFromReader(ref SqlDataReader myReader)
        {
            SCMAcOdrDtlIqWork sCMAcOdrDtlIqWork = new SCMAcOdrDtlIqWork();

            if (myReader != null && sCMAcOdrDtlIqWork != null)
            {
                # region クラスへ格納
                sCMAcOdrDtlIqWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF"));  // 作成日時
                sCMAcOdrDtlIqWork.UpdateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));  // 更新日時
                sCMAcOdrDtlIqWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));  // 企業コード
                sCMAcOdrDtlIqWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF"));  // GUID
                sCMAcOdrDtlIqWork.UpdEmployeeCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDEMPLOYEECODERF"));  // 更新従業員コード
                sCMAcOdrDtlIqWork.UpdAssemblyId1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID1RF"));  // 更新アセンブリID1
                sCMAcOdrDtlIqWork.UpdAssemblyId2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID2RF"));  // 更新アセンブリID2
                sCMAcOdrDtlIqWork.LogicalDeleteCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LOGICALDELETECODERF"));  // 論理削除区分
                sCMAcOdrDtlIqWork.InqOriginalEpCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQORIGINALEPCDRF")).Trim();  // 問合せ元企業コード//@@@@20230303
                sCMAcOdrDtlIqWork.InqOriginalSecCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQORIGINALSECCDRF"));  // 問合せ元拠点コード
                sCMAcOdrDtlIqWork.InqOtherEpCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQOTHEREPCDRF"));  // 問合せ先企業コード
                sCMAcOdrDtlIqWork.InqOtherSecCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQOTHERSECCDRF"));  // 問合せ先拠点コード
                sCMAcOdrDtlIqWork.InquiryNumber = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("INQUIRYNUMBERRF"));  // 問合せ番号
                sCMAcOdrDtlIqWork.UpdateDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("UPDATEDATERF"));  // 更新年月日
                sCMAcOdrDtlIqWork.UpdateTime = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("UPDATETIMERF"));  // 更新時間
                sCMAcOdrDtlIqWork.InqRowNumber = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("INQROWNUMBERRF"));  // 問合せ行番号
                sCMAcOdrDtlIqWork.InqRowNumDerivedNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("INQROWNUMDERIVEDNORF"));  // 問合せ行番号枝番
                sCMAcOdrDtlIqWork.InqOrgDtlDiscGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("INQORGDTLDISCGUIDRF"));  // 問合せ元明細識別GUID
                sCMAcOdrDtlIqWork.InqOthDtlDiscGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("INQOTHDTLDISCGUIDRF"));  // 問合せ先明細識別GUID
                sCMAcOdrDtlIqWork.GoodsDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSDIVCDRF"));  // 商品種別
                sCMAcOdrDtlIqWork.RecyclePrtKindCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("RECYCLEPRTKINDCODERF"));  // リサイクル部品種別
                sCMAcOdrDtlIqWork.RecyclePrtKindName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("RECYCLEPRTKINDNAMERF"));  // リサイクル部品種別名称
                sCMAcOdrDtlIqWork.DeliveredGoodsDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DELIVEREDGOODSDIVRF"));  // 納品区分
                sCMAcOdrDtlIqWork.HandleDivCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("HANDLEDIVCODERF"));  // 取扱区分
                sCMAcOdrDtlIqWork.GoodsShape = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSSHAPERF"));  // 商品形態
                sCMAcOdrDtlIqWork.DelivrdGdsConfCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DELIVRDGDSCONFCDRF"));  // 納品確認区分
                sCMAcOdrDtlIqWork.DeliGdsCmpltDueDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("DELIGDSCMPLTDUEDATERF"));  // 納品完了予定日
                sCMAcOdrDtlIqWork.AnswerDeliveryDate = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSWERDELIVERYDATERF"));  // 回答納期
                sCMAcOdrDtlIqWork.BLGoodsCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("BLGOODSCODERF"));  // BL商品コード
                sCMAcOdrDtlIqWork.BLGoodsDrCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("BLGOODSDRCODERF"));  // BL商品コード枝番
                sCMAcOdrDtlIqWork.InqGoodsName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQGOODSNAMERF"));  // 問発商品名
                sCMAcOdrDtlIqWork.AnsGoodsName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSGOODSNAMERF"));  // 回答商品名
                sCMAcOdrDtlIqWork.SalesOrderCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("SALESORDERCOUNTRF"));  // 発注数
                sCMAcOdrDtlIqWork.DeliveredGoodsCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("DELIVEREDGOODSCOUNTRF"));  // 納品数
                sCMAcOdrDtlIqWork.GoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSNORF"));  // 商品番号
                sCMAcOdrDtlIqWork.GoodsMakerCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSMAKERCDRF"));  // 商品メーカーコード
                sCMAcOdrDtlIqWork.GoodsMakerNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSMAKERNMRF"));  // 商品メーカー名称
                sCMAcOdrDtlIqWork.PureGoodsMakerCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PUREGOODSMAKERCDRF"));  // 純正商品メーカーコード
                sCMAcOdrDtlIqWork.InqPureGoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQPUREGOODSNORF"));  // 問発純正商品番号
                sCMAcOdrDtlIqWork.AnsPureGoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSPUREGOODSNORF"));  // 回答純正商品番号
                sCMAcOdrDtlIqWork.ListPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("LISTPRICERF"));  // 定価
                sCMAcOdrDtlIqWork.UnitPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("UNITPRICERF"));  // 単価
                sCMAcOdrDtlIqWork.GoodsAddInfo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSADDINFORF"));  // 商品補足情報
                sCMAcOdrDtlIqWork.RoughRrofit = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ROUGHRROFITRF"));  // 粗利額
                sCMAcOdrDtlIqWork.RoughRate = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("ROUGHRATERF"));  // 粗利率
                sCMAcOdrDtlIqWork.AnswerLimitDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("ANSWERLIMITDATERF"));  // 回答期限
                sCMAcOdrDtlIqWork.CommentDtl = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("COMMENTDTLRF"));  // 備考(明細)
                sCMAcOdrDtlIqWork.AppendingFileDtl = SqlDataMediator.SqlGetBinaly(myReader, myReader.GetOrdinal("APPENDINGFILEDTLRF"));  // 添付ファイル(明細)
                sCMAcOdrDtlIqWork.AppendingFileNmDtl = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("APPENDINGFILENMDTLRF"));  // 添付ファイル名(明細)
                sCMAcOdrDtlIqWork.ShelfNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SHELFNORF"));  // 棚番
                sCMAcOdrDtlIqWork.AdditionalDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ADDITIONALDIVCDRF"));  // 追加区分
                sCMAcOdrDtlIqWork.CorrectDivCD = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CORRECTDIVCDRF"));  // 訂正区分
                sCMAcOdrDtlIqWork.InqOrdDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("INQORDDIVCDRF"));  // 問合せ・発注種別
                sCMAcOdrDtlIqWork.DisplayOrder = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DISPLAYORDERRF"));  // 表示順位
                // 2010/05/26 Add >>>
                sCMAcOdrDtlIqWork.CancelCndtinDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("CANCELCNDTINDIVRF"));  // キャンセル状態区分
                sCMAcOdrDtlIqWork.AcptAnOdrStatus = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ACPTANODRSTATUSRF"));  // 受注ステータス
                sCMAcOdrDtlIqWork.SalesSlipNum = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SALESSLIPNUMRF"));  // 売上伝票番号
                sCMAcOdrDtlIqWork.SalesRowNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SALESROWNORF"));  // 売上行番号
                // 2010/05/26 Add <<<
                // 2011/02/09 Add >>>
                sCMAcOdrDtlIqWork.DtlTakeinDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DTLTAKEINDIVCDRF"));  // 明細取込区分
                // 2011/02/09 Add <<<
                //--- ADD 2011/05/20 --->>>
                sCMAcOdrDtlIqWork.WarehouseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("WAREHOUSECODERF"));  // 倉庫コード
                sCMAcOdrDtlIqWork.WarehouseName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("WAREHOUSENAMERF"));  // 倉庫名称
                sCMAcOdrDtlIqWork.WarehouseShelfNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("WAREHOUSESHELFNORF"));  // 倉庫棚番
                //--- ADD 2011/05/20 ---<<<
                // -- ADD 2011/08/10   ------ >>>>>>
                sCMAcOdrDtlIqWork.PmPrsntCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("PMPRSNTCOUNTRF"));  // PM現在庫数
                sCMAcOdrDtlIqWork.SetPartsMkrCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SETPARTSMKRCDRF"));  // セット部品メーカーコード
                sCMAcOdrDtlIqWork.SetPartsNumber = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SETPARTSNUMBERRF"));  // セット部品番号
                sCMAcOdrDtlIqWork.SetPartsMainSubNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SETPARTSMAINSUBNORF"));  // セット部品親子番号
                // -- ADD 2011/08/10   ------ <<<<<<
                // -- ADD 2011/10/10   ------ >>>>>>
                sCMAcOdrDtlIqWork.CampaignCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CAMPAIGNCODERF"));  // キャンペーンコード
                // -- ADD 2011/10/10   ------ <<<<<<
                // -- ADD 2012/01/10   ------ >>>>>>
                sCMAcOdrDtlIqWork.GoodsSpecialNote = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSSPECIALNOTERF"));  //商品規格・特記事項
                // -- ADD 2012/01/10   ------ <<<<<<
                // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                sCMAcOdrDtlIqWork.AutoEstimatePartsCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("AUTOESTIMATEPARTSCDRF"));  // 自動見積部品コード
                // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDtlIqWork.SalesTotalTaxInc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESTOTALTAXINCRF"));  // 売上伝票合計（税込）
                sCMAcOdrDtlIqWork.SalesTotalTaxExc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESTOTALTAXEXCRF"));  // 売上伝票合計（税抜）
                sCMAcOdrDtlIqWork.ScmConsTaxLayMethod = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SCMCONSTAXLAYMETHODRF"));  // SCM消費税転嫁方式
                sCMAcOdrDtlIqWork.ConsTaxRate = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("CONSTAXRATERF"));  // 消費税税率
                sCMAcOdrDtlIqWork.ScmFractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SCMFRACTIONPROCCDRF"));  // SCM端数処理区分
                sCMAcOdrDtlIqWork.AccRecConsTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ACCRECCONSTAXRF"));  // 売掛消費税
                sCMAcOdrDtlIqWork.PMSalesDate = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PMSALESDATERF"));  // PM売上日
                sCMAcOdrDtlIqWork.SuppSlpPrtTime = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPSLPPRTTIMERF"));  // 仕入先伝票発行時刻
                sCMAcOdrDtlIqWork.SalesMoneyTaxInc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESMONEYTAXINCRF"));  // 売上金額（税込み）
                sCMAcOdrDtlIqWork.SalesMoneyTaxExc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESMONEYTAXEXCRF"));  // 売上金額（税抜き）
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDtlIqWork.DataInputSystem = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DATAINPUTSYSTEMRF")); // データ入力システム
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                sCMAcOdrDtlIqWork.PmMainMngWarehouseCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PMMAINMNGWAREHOUSECDRF"));  // PM主管倉庫コード
                sCMAcOdrDtlIqWork.PmMainMngWarehouseName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PMMAINMNGWAREHOUSENAMERF"));  // PM主管倉庫名称
                sCMAcOdrDtlIqWork.PmMainMngShelfNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PMMAINMNGSHELFNORF"));  // PM主管棚番
                sCMAcOdrDtlIqWork.PmMainMngPrsntCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("PMMAINMNGPRSNTCOUNTRF"));  // PM主管現在個数
                // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                sCMAcOdrDtlIqWork.PrmSetDtlNo2 = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PRMSETDTLNO2RF")); // 優良設定詳細コード２ 
                sCMAcOdrDtlIqWork.PrmSetDtlName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PRMSETDTLNAME2RF")); // 優良設定詳細名称２ 
                sCMAcOdrDtlIqWork.StockStatusDiv = SqlDataMediator.SqlGetShort(myReader, myReader.GetOrdinal("STOCKSTATUSDIVRF")); // 在庫状況区分 
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sCMAcOdrDtlIqWork.RentDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("RENTDIVRF")); // 貸出区分            
                sCMAcOdrDtlIqWork.MkrSuggestRtPric = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("MKRSUGGESTRTPRICRF")); // メーカー希望小売価格
                sCMAcOdrDtlIqWork.OpenPriceDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("OPENPRICEDIVRF")); // オープン価格区分    
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                sCMAcOdrDtlIqWork.BgnGoodsDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("BGNGOODSDIVRF")); // お買得商品選択区分
                // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                sCMAcOdrDtlIqWork.ModelPrtsAdptYm = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELPRTSADPTYMRF")); // 型式別部品採用年月    
                sCMAcOdrDtlIqWork.ModelPrtsAblsYm = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELPRTSABLSYMRF")); // 型式別部品廃止年月    
                sCMAcOdrDtlIqWork.ModelPrtsAdptFrameNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELPRTSADPTFRAMENORF")); // 型式別部品採用車台番号    
                sCMAcOdrDtlIqWork.ModelPrtsAblsFrameNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELPRTSABLSFRAMENORF")); // 型式別部品廃止車台番号    
                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDtlIqWork.AnsDeliDateDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("ANSDELIDATEDIVRF")); // 回答納期区分
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDtlIqWork.GoodsSpecialNtForFac = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSSPECIALNTFORFACRF")); // 商品規格・特記事項(工場向け)
                sCMAcOdrDtlIqWork.GoodsSpecialNtForCOw = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSSPECIALNTFORCOWRF")); // 商品規格・特記事項(カーオーナー向け)
                sCMAcOdrDtlIqWork.PrmSetDtlName2ForFac = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PRMSETDTLNAME2FORFACRF")); // 優良設定詳細名称２(工場向け)
                sCMAcOdrDtlIqWork.PrmSetDtlName2ForCOw = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PRMSETDTLNAME2FORCOWRF")); // 優良設定詳細名称２(カーオーナー向け)
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDtlIqWork.InqBlUtyPtThCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQBLUTYPTTHCDRF")); // 問発BL統一部品コード(スリーコード版)
                sCMAcOdrDtlIqWork.InqBlUtyPtSbCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("INQBLUTYPTSBCDRF")); // 問発BL統一部品サブコード
                sCMAcOdrDtlIqWork.AnsBlUtyPtThCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSBLUTYPTTHCDRF")); // 回答BL統一部品コード(スリーコード版)
                sCMAcOdrDtlIqWork.AnsBlUtyPtSbCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ANSBLUTYPTSBCDRF")); // 回答BL統一部品サブコード
                sCMAcOdrDtlIqWork.AnsBLGoodsCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ANSBLGOODSCODERF")); // 回答BL商品コード 
                sCMAcOdrDtlIqWork.AnsBLGoodsDrCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ANSBLGOODSDRCODERF")); // 回答BL商品コード枝番
                // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                # endregion

            }

            return sCMAcOdrDtlIqWork;
        }
        
        /// <summary>
        /// クラス格納処理 Reader → SCMAcOdrDtlAsWork
        /// </summary>
        /// <param name="myReader">SqlDataReader</param>
        /// <returns>SCMAcOdrDtlAsWork オブジェクト</returns>
        /// <remarks>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        /// </remarks>
        private SCMAcOdrDtlAsWork CopyToSCMAcOdrDtlAsWorkFromReader(ref SqlDataReader myReader)
        {
            SCMAcOdrDtlAsWork sCMAcOdrDtlAsWork = new SCMAcOdrDtlAsWork();

            if (myReader != null && sCMAcOdrDtlAsWork != null)
            {
                # region クラスへ格納
                sCMAcOdrDtlAsWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF"));  // 作成日時
                sCMAcOdrDtlAsWork.UpdateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));  // 更新日時
                sCMAcOdrDtlAsWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));  // 企業コード
                sCMAcOdrDtlAsWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF"));  // GUID
                sCMAcOdrDtlAsWork.UpdEmployeeCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDEMPLOYEECODERF"));  // 更新従業員コード
                sCMAcOdrDtlAsWork.UpdAssemblyId1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID1RF"));  // 更新アセンブリID1
                sCMAcOdrDtlAsWork.UpdAssemblyId2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID2RF"));  // 更新アセンブリID2
                sCMAcOdrDtlAsWork.LogicalDeleteCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LOGICALDELETECODERF"));  // 論理削除区分
                sCMAcOdrDtlAsWork.InqOriginalEpCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQORIGINALEPCDRF")).Trim();  // 問合せ元企業コード//@@@@20230303
                sCMAcOdrDtlAsWork.InqOriginalSecCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQORIGINALSECCDRF"));  // 問合せ元拠点コード
                sCMAcOdrDtlAsWork.InqOtherEpCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQOTHEREPCDRF"));  // 問合せ先企業コード
                sCMAcOdrDtlAsWork.InqOtherSecCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQOTHERSECCDRF"));  // 問合せ先拠点コード
                sCMAcOdrDtlAsWork.InquiryNumber = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("INQUIRYNUMBERRF"));  // 問合せ番号
                sCMAcOdrDtlAsWork.UpdateDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("UPDATEDATERF"));  // 更新年月日
                sCMAcOdrDtlAsWork.UpdateTime = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("UPDATETIMERF"));  // 更新時間
                sCMAcOdrDtlAsWork.InqRowNumber = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("INQROWNUMBERRF"));  // 問合せ行番号
                sCMAcOdrDtlAsWork.InqRowNumDerivedNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("INQROWNUMDERIVEDNORF"));  // 問合せ行番号枝番
                sCMAcOdrDtlAsWork.InqOrgDtlDiscGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("INQORGDTLDISCGUIDRF"));  // 問合せ元明細識別GUID
                sCMAcOdrDtlAsWork.InqOthDtlDiscGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("INQOTHDTLDISCGUIDRF"));  // 問合せ先明細識別GUID
                sCMAcOdrDtlAsWork.GoodsDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSDIVCDRF"));  // 商品種別
                sCMAcOdrDtlAsWork.RecyclePrtKindCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("RECYCLEPRTKINDCODERF"));  // リサイクル部品種別
                sCMAcOdrDtlAsWork.RecyclePrtKindName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("RECYCLEPRTKINDNAMERF"));  // リサイクル部品種別名称
                sCMAcOdrDtlAsWork.DeliveredGoodsDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DELIVEREDGOODSDIVRF"));  // 納品区分
                sCMAcOdrDtlAsWork.HandleDivCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("HANDLEDIVCODERF"));  // 取扱区分
                sCMAcOdrDtlAsWork.GoodsShape = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSSHAPERF"));  // 商品形態
                sCMAcOdrDtlAsWork.DelivrdGdsConfCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DELIVRDGDSCONFCDRF"));  // 納品確認区分
                sCMAcOdrDtlAsWork.DeliGdsCmpltDueDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("DELIGDSCMPLTDUEDATERF"));  // 納品完了予定日
                sCMAcOdrDtlAsWork.AnswerDeliveryDate = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSWERDELIVERYDATERF"));  // 回答納期
                sCMAcOdrDtlAsWork.BLGoodsCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("BLGOODSCODERF"));  // BL商品コード
                sCMAcOdrDtlAsWork.BLGoodsDrCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("BLGOODSDRCODERF"));  // BL商品コード枝番
                sCMAcOdrDtlAsWork.InqGoodsName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQGOODSNAMERF"));  // 問発商品名
                sCMAcOdrDtlAsWork.AnsGoodsName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSGOODSNAMERF"));  // 回答商品名
                sCMAcOdrDtlAsWork.SalesOrderCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("SALESORDERCOUNTRF"));  // 発注数
                sCMAcOdrDtlAsWork.DeliveredGoodsCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("DELIVEREDGOODSCOUNTRF"));  // 納品数
                sCMAcOdrDtlAsWork.GoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSNORF"));  // 商品番号
                sCMAcOdrDtlAsWork.GoodsMakerCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSMAKERCDRF"));  // 商品メーカーコード
                sCMAcOdrDtlAsWork.GoodsMakerNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSMAKERNMRF"));  // 商品メーカー名称
                sCMAcOdrDtlAsWork.PureGoodsMakerCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PUREGOODSMAKERCDRF"));  // 純正商品メーカーコード
                sCMAcOdrDtlAsWork.InqPureGoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQPUREGOODSNORF"));  // 問発純正商品番号
                sCMAcOdrDtlAsWork.AnsPureGoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSPUREGOODSNORF"));  // 回答純正商品番号
                sCMAcOdrDtlAsWork.ListPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("LISTPRICERF"));  // 定価
                sCMAcOdrDtlAsWork.UnitPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("UNITPRICERF"));  // 単価
                sCMAcOdrDtlAsWork.GoodsAddInfo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSADDINFORF"));  // 商品補足情報
                sCMAcOdrDtlAsWork.RoughRrofit = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ROUGHRROFITRF"));  // 粗利額
                sCMAcOdrDtlAsWork.RoughRate = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("ROUGHRATERF"));  // 粗利率
                sCMAcOdrDtlAsWork.AnswerLimitDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("ANSWERLIMITDATERF"));  // 回答期限
                sCMAcOdrDtlAsWork.CommentDtl = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("COMMENTDTLRF"));  // 備考(明細)
                sCMAcOdrDtlAsWork.AppendingFileDtl = SqlDataMediator.SqlGetBinaly(myReader, myReader.GetOrdinal("APPENDINGFILEDTLRF"));  // 添付ファイル(明細)
                sCMAcOdrDtlAsWork.AppendingFileNmDtl = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("APPENDINGFILENMDTLRF"));  // 添付ファイル名(明細)
                sCMAcOdrDtlAsWork.ShelfNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SHELFNORF"));  // 棚番
                sCMAcOdrDtlAsWork.AdditionalDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ADDITIONALDIVCDRF"));  // 追加区分
                sCMAcOdrDtlAsWork.CorrectDivCD = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CORRECTDIVCDRF"));  // 訂正区分
                sCMAcOdrDtlAsWork.AcptAnOdrStatus = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ACPTANODRSTATUSRF"));  // 受注ステータス
                sCMAcOdrDtlAsWork.SalesSlipNum = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SALESSLIPNUMRF"));  // 売上伝票番号
                sCMAcOdrDtlAsWork.SalesRowNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SALESROWNORF"));  // 売上行番号
                sCMAcOdrDtlAsWork.CampaignCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CAMPAIGNCODERF"));  // キャンペーンコード
                sCMAcOdrDtlAsWork.StockDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("STOCKDIVRF"));  // 在庫区分
                sCMAcOdrDtlAsWork.InqOrdDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("INQORDDIVCDRF"));  // 問合せ・発注種別
                sCMAcOdrDtlAsWork.DisplayOrder = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DISPLAYORDERRF"));  // 表示順位
                sCMAcOdrDtlAsWork.GoodsMngNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSMNGNORF"));  // 商品管理番号
                // 2010/05/26 Add >>>
                sCMAcOdrDtlAsWork.CancelCndtinDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("CANCELCNDTINDIVRF"));  // キャンセル状態区分
                // 2010/05/26 Add <<<
                // 2011/02/09 Add >>>
                sCMAcOdrDtlAsWork.DtlTakeinDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DTLTAKEINDIVCDRF"));  // 明細取込区分
                // 2011/02/09 Add <<<
                //--- ADD 2011/05/20 --->>>
                sCMAcOdrDtlAsWork.WarehouseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("WAREHOUSECODERF"));  // 倉庫コード
                sCMAcOdrDtlAsWork.WarehouseName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("WAREHOUSENAMERF"));  // 倉庫名称
                sCMAcOdrDtlAsWork.WarehouseShelfNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("WAREHOUSESHELFNORF"));  // 倉庫棚番
                //--- ADD 2011/05/20 ---<<<
                // -- ADD 2011/08/10   ------ >>>>>>
                sCMAcOdrDtlAsWork.PmPrsntCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("PMPRSNTCOUNTRF"));  // PM現在庫数
                sCMAcOdrDtlAsWork.SetPartsMkrCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SETPARTSMKRCDRF"));  // セット部品メーカーコード
                sCMAcOdrDtlAsWork.SetPartsNumber = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SETPARTSNUMBERRF"));  // セット部品番号
                sCMAcOdrDtlAsWork.SetPartsMainSubNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SETPARTSMAINSUBNORF"));  // セット部品親子番号
                // -- ADD 2011/08/10   ------ <<<<<<
                //--- ADD 2012/01/10 --->>>
                sCMAcOdrDtlAsWork.GoodsSpecialNote = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSSPECIALNOTERF"));  // 商品規格・特記事項
                //--- ADD 2012/01/10 ---<<<
                //--- ADD 2012/04/12 --->>> 
                sCMAcOdrDtlAsWork.PSMngNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PSMNGNORF"));  // PS管理番号
                //--- ADD 2012/04/12 ---<<<
                // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                sCMAcOdrDtlAsWork.AutoEstimatePartsCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("AUTOESTIMATEPARTSCDRF"));  // 自動見積部品コード
                // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDtlAsWork.SalesTotalTaxInc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESTOTALTAXINCRF"));  // 売上伝票合計（税込）
                sCMAcOdrDtlAsWork.SalesTotalTaxExc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESTOTALTAXEXCRF"));  // 売上伝票合計（税抜）
                sCMAcOdrDtlAsWork.ScmConsTaxLayMethod = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SCMCONSTAXLAYMETHODRF"));  // SCM消費税転嫁方式
                sCMAcOdrDtlAsWork.ConsTaxRate = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("CONSTAXRATERF"));  // 消費税税率
                sCMAcOdrDtlAsWork.ScmFractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SCMFRACTIONPROCCDRF"));  // SCM端数処理区分
                sCMAcOdrDtlAsWork.AccRecConsTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ACCRECCONSTAXRF"));  // 売掛消費税
                sCMAcOdrDtlAsWork.PMSalesDate = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PMSALESDATERF"));  // PM売上日
                sCMAcOdrDtlAsWork.SuppSlpPrtTime = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPSLPPRTTIMERF"));  // 仕入先伝票発行時刻
                sCMAcOdrDtlAsWork.SalesMoneyTaxInc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESMONEYTAXINCRF"));  // 売上金額（税込み）
                sCMAcOdrDtlAsWork.SalesMoneyTaxExc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESMONEYTAXEXCRF"));  // 売上金額（税抜き）
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDtlAsWork.DataInputSystem = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DATAINPUTSYSTEMRF")); // データ入力システム
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                sCMAcOdrDtlAsWork.PmMainMngWarehouseCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PMMAINMNGWAREHOUSECDRF"));  // PM主管倉庫コード
                sCMAcOdrDtlAsWork.PmMainMngWarehouseName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PMMAINMNGWAREHOUSENAMERF"));  // PM主管倉庫名称
                sCMAcOdrDtlAsWork.PmMainMngShelfNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PMMAINMNGSHELFNORF"));  // PM主管棚番
                sCMAcOdrDtlAsWork.PmMainMngPrsntCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("PMMAINMNGPRSNTCOUNTRF"));  // PM主管現在個数
                // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                sCMAcOdrDtlAsWork.PrmSetDtlNo2 = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PRMSETDTLNO2RF")); // 優良設定詳細コード２
                sCMAcOdrDtlAsWork.PrmSetDtlName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PRMSETDTLNAME2RF")); // 優良設定詳細名称２
                sCMAcOdrDtlAsWork.StockStatusDiv = SqlDataMediator.SqlGetShort(myReader, myReader.GetOrdinal("STOCKSTATUSDIVRF")); // 在庫状況区分
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<

                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sCMAcOdrDtlAsWork.RentDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("RENTDIVRF")); // 貸出区分            
                sCMAcOdrDtlAsWork.MkrSuggestRtPric = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("MKRSUGGESTRTPRICRF")); // メーカー希望小売価格
                sCMAcOdrDtlAsWork.OpenPriceDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("OPENPRICEDIVRF")); // オープン価格区分    
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
                // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                sCMAcOdrDtlAsWork.BgnGoodsDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("BGNGOODSDIVRF")); // お買得商品選択区分
                // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                sCMAcOdrDtlAsWork.ModelPrtsAdptYm = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELPRTSADPTYMRF")); // 型式別部品採用年月    
                sCMAcOdrDtlAsWork.ModelPrtsAblsYm = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELPRTSABLSYMRF")); // 型式別部品廃止年月    
                sCMAcOdrDtlAsWork.ModelPrtsAdptFrameNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELPRTSADPTFRAMENORF")); // 型式別部品採用車台番号    
                sCMAcOdrDtlAsWork.ModelPrtsAblsFrameNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELPRTSABLSFRAMENORF")); // 型式別部品廃止車台番号    
                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDtlAsWork.AnsDeliDateDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("ANSDELIDATEDIVRF")); // 回答納期区分
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDtlAsWork.GoodsSpecialNtForFac = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSSPECIALNTFORFACRF")); // 商品規格・特記事項(工場向け)
                sCMAcOdrDtlAsWork.GoodsSpecialNtForCOw = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSSPECIALNTFORCOWRF")); // 商品規格・特記事項(カーオーナー向け)
                sCMAcOdrDtlAsWork.PrmSetDtlName2ForFac = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PRMSETDTLNAME2FORFACRF")); // 優良設定詳細名称２(工場向け)
                sCMAcOdrDtlAsWork.PrmSetDtlName2ForCOw = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PRMSETDTLNAME2FORCOWRF")); // 優良設定詳細名称２(カーオーナー向け)
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDtlAsWork.InqBlUtyPtThCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQBLUTYPTTHCDRF")); // 問発BL統一部品コード(スリーコード版)
                sCMAcOdrDtlAsWork.InqBlUtyPtSbCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("INQBLUTYPTSBCDRF")); // 問発BL統一部品サブコード
                sCMAcOdrDtlAsWork.AnsBlUtyPtThCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSBLUTYPTTHCDRF")); // 回答BL統一部品コード(スリーコード版)
                sCMAcOdrDtlAsWork.AnsBlUtyPtSbCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ANSBLUTYPTSBCDRF")); // 回答BL統一部品サブコード
                sCMAcOdrDtlAsWork.AnsBLGoodsCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ANSBLGOODSCODERF")); // 回答BL商品コード 
                sCMAcOdrDtlAsWork.AnsBLGoodsDrCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ANSBLGOODSDRCODERF")); // 回答BL商品コード枝番
                // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                # endregion

            }

            return sCMAcOdrDtlAsWork;
        }

        // -- ADD 2011/08/10   ------ >>>>>>
        /// <summary>
        /// クラス格納処理 Reader → ScmAcOdSetDtWork
        /// </summary>
        /// <param name="myReader">SqlDataReader</param>
        /// <returns>ScmAcOdSetDtWork オブジェクト</returns>
        /// <remarks>
        /// <br>Programmer : 高峰</br>
        /// <br>Date       : 2011/08/10</br>
        /// <br>UpdateNote : 2018/04/16 田建委</br>
        /// <br>管理番号   : 11470007-00</br>
        /// <br>           : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        /// </remarks>
        private SCMAcOdSetDtWork CopyToSCMAcOdSetDtAsWorkFromReader(ref SqlDataReader myReader)
        {
            SCMAcOdSetDtWork scmAcOdSetDtWork = new SCMAcOdSetDtWork();

            if (myReader != null && scmAcOdSetDtWork != null)
            {
                # region クラスへ格納
                scmAcOdSetDtWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF"));  // 作成日時
                scmAcOdSetDtWork.UpdateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));  // 更新日時
                scmAcOdSetDtWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));  // 企業コード
                scmAcOdSetDtWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF"));  // GUID
                scmAcOdSetDtWork.UpdEmployeeCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDEMPLOYEECODERF"));  // 更新従業員コード
                scmAcOdSetDtWork.UpdAssemblyId1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID1RF"));  // 更新アセンブリID1
                scmAcOdSetDtWork.UpdAssemblyId2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID2RF"));  // 更新アセンブリID2
                scmAcOdSetDtWork.LogicalDeleteCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LOGICALDELETECODERF"));  // 論理削除区分
                scmAcOdSetDtWork.InqOriginalEpCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQORIGINALEPCDRF")).Trim();  // 問合せ元企業コード//@@@@20230303
                scmAcOdSetDtWork.InqOriginalSecCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQORIGINALSECCDRF"));  // 問合せ元拠点コード
                scmAcOdSetDtWork.InqOtherEpCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQOTHEREPCDRF"));  // 問合せ先企業コード
                scmAcOdSetDtWork.InqOtherSecCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQOTHERSECCDRF"));  // 問合せ先拠点コード
                scmAcOdSetDtWork.InquiryNumber = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("INQUIRYNUMBERRF"));  // 問合せ番号
                scmAcOdSetDtWork.SetPartsMkrCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SETPARTSMKRCDRF"));  // セット部品メーカーコード
                scmAcOdSetDtWork.SetPartsNumber = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SETPARTSNUMBERRF"));  // セット部品番号
                scmAcOdSetDtWork.SetPartsMainSubNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SETPARTSMAINSUBNORF"));  // セット部品親子番号
                scmAcOdSetDtWork.GoodsDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSDIVCDRF"));  // 商品種別
                scmAcOdSetDtWork.RecyclePrtKindCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("RECYCLEPRTKINDCODERF"));  // リサイクル部品種別
                scmAcOdSetDtWork.RecyclePrtKindName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("RECYCLEPRTKINDNAMERF"));  // リサイクル部品種別名称
                scmAcOdSetDtWork.DeliveredGoodsDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DELIVEREDGOODSDIVRF"));  // 納品区分
                scmAcOdSetDtWork.HandleDivCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("HANDLEDIVCODERF"));  // 取扱区分
                scmAcOdSetDtWork.GoodsShape = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSSHAPERF"));  // 商品形態
                scmAcOdSetDtWork.DelivrdGdsConfCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DELIVRDGDSCONFCDRF"));  // 納品確認区分
                scmAcOdSetDtWork.DeliGdsCmpltDueDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("DELIGDSCMPLTDUEDATERF"));  // 納品完了予定日
                scmAcOdSetDtWork.AnswerDeliveryDate = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSWERDELIVERYDATERF"));  // 回答納期
                scmAcOdSetDtWork.BLGoodsCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("BLGOODSCODERF"));  // BL商品コード
                scmAcOdSetDtWork.BLGoodsDrCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("BLGOODSDRCODERF"));  // BL商品コード枝番
                scmAcOdSetDtWork.InqGoodsName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQGOODSNAMERF"));  // 問発商品名
                scmAcOdSetDtWork.AnsGoodsName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSGOODSNAMERF"));  // 問発商品名
                scmAcOdSetDtWork.SalesOrderCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("SALESORDERCOUNTRF"));  // 発注数
                scmAcOdSetDtWork.DeliveredGoodsCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("DELIVEREDGOODSCOUNTRF"));  // 納品数
                scmAcOdSetDtWork.GoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSNORF"));  // 商品番号
                scmAcOdSetDtWork.GoodsMakerCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSMAKERCDRF"));  // 商品メーカーコード
                scmAcOdSetDtWork.GoodsMakerNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSMAKERNMRF"));  // 商品メーカー名称
                scmAcOdSetDtWork.PureGoodsMakerCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PUREGOODSMAKERCDRF"));  // 商品メーカー名称
                scmAcOdSetDtWork.InqPureGoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQPUREGOODSNORF"));  // 問発純正商品番号
                scmAcOdSetDtWork.AnsPureGoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSPUREGOODSNORF"));  // 回答純正商品番号
                scmAcOdSetDtWork.ListPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("LISTPRICERF"));  // 回答純正商品番号
                scmAcOdSetDtWork.UnitPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("UNITPRICERF"));  // 単価
                scmAcOdSetDtWork.GoodsAddInfo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSADDINFORF"));  // 商品補足情報
                scmAcOdSetDtWork.RoughRrofit = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ROUGHRROFITRF"));  // 粗利額
                scmAcOdSetDtWork.RoughRate = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("ROUGHRATERF"));  // 粗利率
                scmAcOdSetDtWork.AnswerLimitDate = SqlDataMediator.SqlGetDateTimeFromYYYYMM(myReader, myReader.GetOrdinal("ANSWERLIMITDATERF"));  // 回答期限
                scmAcOdSetDtWork.CommentDtl = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("COMMENTDTLRF"));  // 備考(明細)
                scmAcOdSetDtWork.ShelfNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SHELFNORF"));  // 備考(明細)
                scmAcOdSetDtWork.PMAcptAnOdrStatus = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PMACPTANODRSTATUSRF"));  // PM受注ステータス
                scmAcOdSetDtWork.PMSalesSlipNum = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PMSALESSLIPNUMRF"));  // PM売上伝票番号
                scmAcOdSetDtWork.PMSalesRowNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PMSALESROWNORF"));  // PM売上行番号
                scmAcOdSetDtWork.PmWarehouseCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PMWAREHOUSECDRF"));  // PM倉庫コード
                scmAcOdSetDtWork.PmWarehouseName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PMWAREHOUSENAMERF"));  // PM倉庫名称
                scmAcOdSetDtWork.PmShelfNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PMSHELFNORF"));  // PM棚番
                scmAcOdSetDtWork.PmPrsntCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("PMPRSNTCOUNTRF"));  // PM現在個数
                // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                scmAcOdSetDtWork.PmMainMngWarehouseCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PMMAINMNGWAREHOUSECDRF"));  // PM主管倉庫コード
                scmAcOdSetDtWork.PmMainMngWarehouseName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PMMAINMNGWAREHOUSENAMERF"));  // PM主管倉庫名称
                scmAcOdSetDtWork.PmMainMngShelfNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PMMAINMNGSHELFNORF"));  // PM主管棚番
                scmAcOdSetDtWork.PmMainMngPrsntCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("PMMAINMNGPRSNTCOUNTRF"));  // PM主管現在個数
                // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                scmAcOdSetDtWork.GoodsSpclInstruction = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSSPCLINSTRUCTIONRF"));  // 商品規格・特記事項
                // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------->>>>>
                scmAcOdSetDtWork.MkrSuggestRtPric = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("MKRSUGGESTRTPRICRF"));  // メーカー希望小売価格
                scmAcOdSetDtWork.OpenPriceDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("OPENPRICEDIVRF"));  // オープン価格区分
                // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------<<<<<
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                scmAcOdSetDtWork.AnsDeliDateDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("ANSDELIDATEDIVRF")); // 回答納期区分
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                scmAcOdSetDtWork.GoodsSpecialNtForFac = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSSPECIALNTFORFACRF")); // 商品規格・特記事項(工場向け)
                scmAcOdSetDtWork.GoodsSpecialNtForCOw = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSSPECIALNTFORCOWRF")); // 商品規格・特記事項(カーオーナー向け)
                scmAcOdSetDtWork.PrmSetDtlName2ForFac = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PRMSETDTLNAME2FORFACRF")); // 優良設定詳細名称２(工場向け)
                scmAcOdSetDtWork.PrmSetDtlName2ForCOw = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PRMSETDTLNAME2FORCOWRF")); // 優良設定詳細名称２(カーオーナー向け)
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                scmAcOdSetDtWork.PrmSetDtlNo2 = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PRMSETDTLNO2RF")); // 優良設定詳細コード２
                scmAcOdSetDtWork.PrmSetDtlName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PRMSETDTLNAME2RF")); // 優良設定詳細名称２
                scmAcOdSetDtWork.StockStatusDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("STOCKSTATUSDIVRF")); // 在庫状況区分
                // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
                // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                scmAcOdSetDtWork.InqBlUtyPtThCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQBLUTYPTTHCDRF")); // 問発BL統一部品コード(スリーコード版)
                scmAcOdSetDtWork.InqBlUtyPtSbCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("INQBLUTYPTSBCDRF")); // 問発BL統一部品サブコード
                scmAcOdSetDtWork.AnsBlUtyPtThCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSBLUTYPTTHCDRF")); // 回答BL統一部品コード(スリーコード版)
                scmAcOdSetDtWork.AnsBlUtyPtSbCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ANSBLUTYPTSBCDRF")); // 回答BL統一部品サブコード
                scmAcOdSetDtWork.AnsBLGoodsCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ANSBLGOODSCODERF")); // 回答BL商品コード 
                scmAcOdSetDtWork.AnsBLGoodsDrCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ANSBLGOODSDRCODERF")); // 回答BL商品コード枝番
                // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                # endregion

            }

            return scmAcOdSetDtWork;
        }

        // -- ADD 2011/08/10   ------ <<<<<<

        // -- ADD 2010/02/26 ------------------------------------------->>>
        /// <summary>
        /// クラス格納処理 Reader → SCMAcOdrDtCarWork
        /// </summary>
        /// <param name="myReader">SqlDataReader</param>
        /// <returns>SCMAcOdrDtCarWork オブジェクト</returns>
        /// <remarks>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        /// </remarks>
        private SCMAcOdrDtCarWork CopyToSCMAcOdrDtCarWorkFromReader2(ref SqlDataReader myReader)
        {
            SCMAcOdrDtCarWork sCMAcOdrDtCarWork = new SCMAcOdrDtCarWork();

            if (myReader != null && sCMAcOdrDtCarWork != null)
            {
                # region クラスへ格納
                sCMAcOdrDtCarWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF_CAR"));  // 作成日時
                sCMAcOdrDtCarWork.UpdateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF_CAR"));  // 更新日時
                sCMAcOdrDtCarWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF_CAR"));  // 企業コード
                sCMAcOdrDtCarWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF_CAR"));  // GUID
                sCMAcOdrDtCarWork.UpdEmployeeCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDEMPLOYEECODERF_CAR"));  // 更新従業員コード
                sCMAcOdrDtCarWork.UpdAssemblyId1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID1RF_CAR"));  // 更新アセンブリID1
                sCMAcOdrDtCarWork.UpdAssemblyId2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID2RF_CAR"));  // 更新アセンブリID2
                sCMAcOdrDtCarWork.LogicalDeleteCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LOGICALDELETECODERF_CAR"));  // 論理削除区分
                sCMAcOdrDtCarWork.InqOriginalEpCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQORIGINALEPCDRF_CAR")).Trim();  // 問合せ元企業コード//@@@@20230303
                sCMAcOdrDtCarWork.InqOriginalSecCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQORIGINALSECCDRF_CAR"));  // 問合せ元拠点コード
                sCMAcOdrDtCarWork.InquiryNumber = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("INQUIRYNUMBERRF_CAR"));  // 問合せ番号
                sCMAcOdrDtCarWork.NumberPlate1Code = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("NUMBERPLATE1CODERF_CAR"));  // 陸運事務所番号
                sCMAcOdrDtCarWork.NumberPlate1Name = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("NUMBERPLATE1NAMERF_CAR"));  // 陸運事務局名称
                sCMAcOdrDtCarWork.NumberPlate2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("NUMBERPLATE2RF_CAR"));  // 車両登録番号（種別）
                sCMAcOdrDtCarWork.NumberPlate3 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("NUMBERPLATE3RF_CAR"));  // 車両登録番号（カナ）
                sCMAcOdrDtCarWork.NumberPlate4 = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("NUMBERPLATE4RF_CAR"));  // 車両登録番号（プレート番号）
                sCMAcOdrDtCarWork.ModelDesignationNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELDESIGNATIONNORF_CAR"));  // 型式指定番号
                sCMAcOdrDtCarWork.CategoryNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CATEGORYNORF_CAR"));  // 類別番号
                sCMAcOdrDtCarWork.MakerCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MAKERCODERF_CAR"));  // メーカーコード
                sCMAcOdrDtCarWork.ModelCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELCODERF_CAR"));  // 車種コード
                sCMAcOdrDtCarWork.ModelSubCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELSUBCODERF_CAR"));  // 車種サブコード
                sCMAcOdrDtCarWork.ModelName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("MODELNAMERF_CAR"));  // 車種名
                sCMAcOdrDtCarWork.CarInspectCertModel = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CARINSPECTCERTMODELRF_CAR"));  // 車検証型式
                sCMAcOdrDtCarWork.FullModel = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("FULLMODELRF_CAR"));  // 型式（フル型）
                sCMAcOdrDtCarWork.FrameNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("FRAMENORF_CAR"));  // 車台番号
                sCMAcOdrDtCarWork.FrameModel = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("FRAMEMODELRF_CAR"));  // 車台型式
                sCMAcOdrDtCarWork.ChassisNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CHASSISNORF_CAR"));  // シャシーNo
                sCMAcOdrDtCarWork.CarProperNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CARPROPERNORF_CAR"));  // 車両固有番号
                sCMAcOdrDtCarWork.ProduceTypeOfYearNum = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PRODUCETYPEOFYEARNUMRF_CAR"));  // 生産年式（NUMタイプ）
                sCMAcOdrDtCarWork.Comment = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("COMMENTRF_CAR"));  // コメント
                sCMAcOdrDtCarWork.RpColorCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("RPCOLORCODERF_CAR"));  // リペアカラーコード
                sCMAcOdrDtCarWork.ColorName1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("COLORNAME1RF_CAR"));  // カラー名称1
                sCMAcOdrDtCarWork.TrimCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("TRIMCODERF_CAR"));  // トリムコード
                sCMAcOdrDtCarWork.TrimName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("TRIMNAMERF_CAR"));  // トリム名称
                sCMAcOdrDtCarWork.Mileage = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MILEAGERF_CAR"));  // 車両走行距離
                sCMAcOdrDtCarWork.EquipObj = SqlDataMediator.SqlGetBinaly(myReader, myReader.GetOrdinal("EQUIPOBJRF_CAR"));  // 装備オブジェクト
                // ADD 2012/05/31 ------------------>>>>>
                if (sCMAcOdrDtCarWork.EquipObj == null)
                {
                    sCMAcOdrDtCarWork.EquipObj = new byte[0];
                }
                // ADD 2012/05/31 ------------------<<<<<
                sCMAcOdrDtCarWork.AcptAnOdrStatus = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ACPTANODRSTATUSRF_CAR"));  // 受注ステータス
                sCMAcOdrDtCarWork.SalesSlipNum = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SALESSLIPNUMRF_CAR"));  // 売上伝票番号
                // -- ADD 2011/08/10   ------ >>>>>>
                sCMAcOdrDtCarWork.CarNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CARNORF_CAR"));  // 号車
                sCMAcOdrDtCarWork.MakerName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("MAKERNAMERF_CAR"));  // メーカー名称
                sCMAcOdrDtCarWork.GradeName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GRADENAMERF_CAR"));  // グレード名称
                sCMAcOdrDtCarWork.BodyName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("BODYNAMERF_CAR"));  // ボディー名称
                sCMAcOdrDtCarWork.DoorCount = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DOORCOUNTRF_CAR"));  // ドア数
                sCMAcOdrDtCarWork.EngineModelNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENGINEMODELNMRF_CAR"));  // エンジン型式名称
                sCMAcOdrDtCarWork.CmnNmEngineDisPlace = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CMNNMENGINEDISPLACERF_CAR"));  // 通称排気量
                sCMAcOdrDtCarWork.EngineModel = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENGINEMODELRF_CAR"));  // 原動機型式（エンジン）
                sCMAcOdrDtCarWork.NumberOfGear = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("NUMBEROFGEARRF_CAR")); // 変速段数
                sCMAcOdrDtCarWork.GearNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GEARNMRF_CAR"));  // 変速機名称
                sCMAcOdrDtCarWork.EDivNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("EDIVNMRF_CAR"));  // E区分名称
                sCMAcOdrDtCarWork.TransmissionNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("TRANSMISSIONNMRF_CAR"));  // ミッション名称
                sCMAcOdrDtCarWork.ShiftNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SHIFTNMRF_CAR"));  // シフト名称
                // -- ADD 2011/08/10   ------ <<<<<<
                // ADD 2012/05/31 ------------------>>>>>
                sCMAcOdrDtCarWork.FirstEntryDateNumTyp = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("FIRSTENTRYDATENUMTYPRF_CAR"));  // 初年度（NUMタイプ）
                sCMAcOdrDtCarWork.CarAddInf = SqlDataMediator.SqlGetBinaly(myReader, myReader.GetOrdinal("CARADDINFRF_CAR"));  // 車両付加情報オブジェクト
                if (sCMAcOdrDtCarWork.CarAddInf == null)
                {
                    sCMAcOdrDtCarWork.CarAddInf = new byte[0];
                }
                sCMAcOdrDtCarWork.EquipPrtsObj = SqlDataMediator.SqlGetBinaly(myReader, myReader.GetOrdinal("EQUIPPRTSOBJRF_CAR"));  // 装備部品オブジェクト
                if (sCMAcOdrDtCarWork.EquipPrtsObj == null)
                {
                    sCMAcOdrDtCarWork.EquipPrtsObj = new byte[0];
                }
                // ADD 2012/05/31 ------------------<<<<<
                // --- ADD 2013/05/02 2013/05/22配信分 SCM障害№10521デグレ対応 ------------------>>>>>
                sCMAcOdrDtCarWork.CarMngCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("CARMNGCODERF"));  // 車両管理コード
                // --- ADD 2013/05/02 2013/05/22配信分 SCM障害№10521デグレ対応 ------------------<<<<<
                // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
                sCMAcOdrDtCarWork.ExpectedCeDate = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("EXPECTEDCEDATERF"));  // 入庫予定日
                // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<
                # endregion

            }

            return sCMAcOdrDtCarWork;
        }

        /// <summary>
        /// クラス格納処理 Reader → SCMAcOdrDtlAsWork
        /// </summary>
        /// <param name="myReader">SqlDataReader</param>
        /// <returns>SCMAcOdrDtlAsWork オブジェクト</returns>
        /// <remarks>
        /// <br>Programmer : 22008 長内 数馬</br>
        /// <br>Date       : 2009.05.13</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        /// </remarks>
        private SCMAcOdrDtlAsWork CopyToSCMAcOdrDtlAsWorkFromReader2(ref SqlDataReader myReader)
        {
            SCMAcOdrDtlAsWork sCMAcOdrDtlAsWork = new SCMAcOdrDtlAsWork();

            if (myReader != null && sCMAcOdrDtlAsWork != null)
            {
                # region クラスへ格納
                sCMAcOdrDtlAsWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF_ANS"));  // 作成日時
                sCMAcOdrDtlAsWork.UpdateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF_ANS"));  // 更新日時
                sCMAcOdrDtlAsWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF_ANS"));  // 企業コード
                sCMAcOdrDtlAsWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF_ANS"));  // GUID
                sCMAcOdrDtlAsWork.UpdEmployeeCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDEMPLOYEECODERF_ANS"));  // 更新従業員コード
                sCMAcOdrDtlAsWork.UpdAssemblyId1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID1RF_ANS"));  // 更新アセンブリID1
                sCMAcOdrDtlAsWork.UpdAssemblyId2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID2RF_ANS"));  // 更新アセンブリID2
                sCMAcOdrDtlAsWork.LogicalDeleteCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LOGICALDELETECODERF_ANS"));  // 論理削除区分
                sCMAcOdrDtlAsWork.InqOriginalEpCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQORIGINALEPCDRF_ANS")).Trim();  // 問合せ元企業コード//@@@@20230303
                sCMAcOdrDtlAsWork.InqOriginalSecCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQORIGINALSECCDRF_ANS"));  // 問合せ元拠点コード
                sCMAcOdrDtlAsWork.InqOtherEpCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQOTHEREPCDRF_ANS"));  // 問合せ先企業コード
                sCMAcOdrDtlAsWork.InqOtherSecCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQOTHERSECCDRF_ANS"));  // 問合せ先拠点コード
                sCMAcOdrDtlAsWork.InquiryNumber = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("INQUIRYNUMBERRF_ANS"));  // 問合せ番号
                sCMAcOdrDtlAsWork.UpdateDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("UPDATEDATERF_ANS"));  // 更新年月日
                sCMAcOdrDtlAsWork.UpdateTime = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("UPDATETIMERF_ANS"));  // 更新時間
                sCMAcOdrDtlAsWork.InqRowNumber = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("INQROWNUMBERRF_ANS"));  // 問合せ行番号
                sCMAcOdrDtlAsWork.InqRowNumDerivedNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("INQROWNUMDERIVEDNORF_ANS"));  // 問合せ行番号枝番
                sCMAcOdrDtlAsWork.InqOrgDtlDiscGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("INQORGDTLDISCGUIDRF_ANS"));  // 問合せ元明細識別GUID
                sCMAcOdrDtlAsWork.InqOthDtlDiscGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("INQOTHDTLDISCGUIDRF_ANS"));  // 問合せ先明細識別GUID
                sCMAcOdrDtlAsWork.GoodsDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSDIVCDRF_ANS"));  // 商品種別
                sCMAcOdrDtlAsWork.RecyclePrtKindCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("RECYCLEPRTKINDCODERF_ANS"));  // リサイクル部品種別
                sCMAcOdrDtlAsWork.RecyclePrtKindName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("RECYCLEPRTKINDNAMERF_ANS"));  // リサイクル部品種別名称
                sCMAcOdrDtlAsWork.DeliveredGoodsDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DELIVEREDGOODSDIVRF_ANS"));  // 納品区分
                sCMAcOdrDtlAsWork.HandleDivCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("HANDLEDIVCODERF_ANS"));  // 取扱区分
                sCMAcOdrDtlAsWork.GoodsShape = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSSHAPERF_ANS"));  // 商品形態
                sCMAcOdrDtlAsWork.DelivrdGdsConfCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DELIVRDGDSCONFCDRF_ANS"));  // 納品確認区分
                sCMAcOdrDtlAsWork.DeliGdsCmpltDueDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("DELIGDSCMPLTDUEDATERF_ANS"));  // 納品完了予定日
                sCMAcOdrDtlAsWork.AnswerDeliveryDate = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSWERDELIVERYDATERF_ANS"));  // 回答納期
                sCMAcOdrDtlAsWork.BLGoodsCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("BLGOODSCODERF_ANS"));  // BL商品コード
                sCMAcOdrDtlAsWork.BLGoodsDrCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("BLGOODSDRCODERF_ANS"));  // BL商品コード枝番
                sCMAcOdrDtlAsWork.InqGoodsName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQGOODSNAMERF_ANS"));  // 問発商品名
                sCMAcOdrDtlAsWork.AnsGoodsName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSGOODSNAMERF_ANS"));  // 回答商品名
                sCMAcOdrDtlAsWork.SalesOrderCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("SALESORDERCOUNTRF_ANS"));  // 発注数
                sCMAcOdrDtlAsWork.DeliveredGoodsCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("DELIVEREDGOODSCOUNTRF_ANS"));  // 納品数
                sCMAcOdrDtlAsWork.GoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSNORF_ANS"));  // 商品番号
                sCMAcOdrDtlAsWork.GoodsMakerCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSMAKERCDRF_ANS"));  // 商品メーカーコード
                sCMAcOdrDtlAsWork.GoodsMakerNm = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSMAKERNMRF_ANS"));  // 商品メーカー名称
                sCMAcOdrDtlAsWork.PureGoodsMakerCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PUREGOODSMAKERCDRF_ANS"));  // 純正商品メーカーコード
                sCMAcOdrDtlAsWork.InqPureGoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQPUREGOODSNORF_ANS"));  // 問発純正商品番号
                sCMAcOdrDtlAsWork.AnsPureGoodsNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSPUREGOODSNORF_ANS"));  // 回答純正商品番号
                sCMAcOdrDtlAsWork.ListPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("LISTPRICERF_ANS"));  // 定価
                sCMAcOdrDtlAsWork.UnitPrice = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("UNITPRICERF_ANS"));  // 単価
                sCMAcOdrDtlAsWork.GoodsAddInfo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSADDINFORF_ANS"));  // 商品補足情報
                sCMAcOdrDtlAsWork.RoughRrofit = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ROUGHRROFITRF_ANS"));  // 粗利額
                sCMAcOdrDtlAsWork.RoughRate = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("ROUGHRATERF_ANS"));  // 粗利率
                sCMAcOdrDtlAsWork.AnswerLimitDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("ANSWERLIMITDATERF_ANS"));  // 回答期限
                sCMAcOdrDtlAsWork.CommentDtl = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("COMMENTDTLRF_ANS"));  // 備考(明細)
                sCMAcOdrDtlAsWork.AppendingFileDtl = SqlDataMediator.SqlGetBinaly(myReader, myReader.GetOrdinal("APPENDINGFILEDTLRF_ANS"));  // 添付ファイル(明細)
                sCMAcOdrDtlAsWork.AppendingFileNmDtl = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("APPENDINGFILENMDTLRF_ANS"));  // 添付ファイル名(明細)
                sCMAcOdrDtlAsWork.ShelfNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SHELFNORF_ANS"));  // 棚番
                sCMAcOdrDtlAsWork.AdditionalDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ADDITIONALDIVCDRF_ANS"));  // 追加区分
                sCMAcOdrDtlAsWork.CorrectDivCD = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CORRECTDIVCDRF_ANS"));  // 訂正区分
                sCMAcOdrDtlAsWork.AcptAnOdrStatus = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ACPTANODRSTATUSRF_ANS"));  // 受注ステータス
                sCMAcOdrDtlAsWork.SalesSlipNum = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SALESSLIPNUMRF_ANS"));  // 売上伝票番号
                sCMAcOdrDtlAsWork.SalesRowNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SALESROWNORF_ANS"));  // 売上行番号
                sCMAcOdrDtlAsWork.CampaignCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CAMPAIGNCODERF_ANS"));  // キャンペーンコード
                sCMAcOdrDtlAsWork.StockDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("STOCKDIVRF_ANS"));  // 在庫区分
                sCMAcOdrDtlAsWork.InqOrdDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("INQORDDIVCDRF_ANS"));  // 問合せ・発注種別
                sCMAcOdrDtlAsWork.DisplayOrder = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DISPLAYORDERRF_ANS"));  // 表示順位
                sCMAcOdrDtlAsWork.GoodsMngNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("GOODSMNGNORF_ANS"));  // 商品管理番号
                // 2010/05/26 Add >>>
                sCMAcOdrDtlAsWork.CancelCndtinDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("CANCELCNDTINDIVRF_ANS"));  // キャンセル状態区分
                // 2010/05/26 Add <<<
                // 2011/02/09 Add >>>
                sCMAcOdrDtlAsWork.DtlTakeinDivCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DTLTAKEINDIVCDRF_ANS"));  // 明細取込区分
                // 2011/02/09 Add <<<
                //--- ADD 2011/05/20 --->>>
                sCMAcOdrDtlAsWork.WarehouseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("WAREHOUSECODERF"));  // 倉庫コード
                sCMAcOdrDtlAsWork.WarehouseName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("WAREHOUSENAMERF"));  // 倉庫名称
                sCMAcOdrDtlAsWork.WarehouseShelfNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("WAREHOUSESHELFNORF"));  // 倉庫棚番
                //--- ADD 2011/05/20 ---<<<
                //--- ADD 2012/01/10 --->>>
                sCMAcOdrDtlAsWork.GoodsSpecialNote = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSSPECIALNOTERF"));  // 商品規格・特記事項
                //--- ADD 2012/01/10 ---<<<
                //--- ADD 2012/04/12 --->>> 
                sCMAcOdrDtlAsWork.PSMngNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PSMNGNORF"));  // PS管理番号
                //--- ADD 2012/04/12 ---<<<
                // --- ADD T.Nishi 2012/05/30 ---------->>>>>
                sCMAcOdrDtlAsWork.AutoEstimatePartsCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("AUTOESTIMATEPARTSCDRF"));  // 自動見積部品コード
                // --- ADD T.Nishi 2012/05/30 ----------<<<<<
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDtlAsWork.SalesTotalTaxInc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESTOTALTAXINCRF"));  // 売上伝票合計（税込）
                sCMAcOdrDtlAsWork.SalesTotalTaxExc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESTOTALTAXEXCRF"));  // 売上伝票合計（税抜）
                sCMAcOdrDtlAsWork.ScmConsTaxLayMethod = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SCMCONSTAXLAYMETHODRF"));  // SCM消費税転嫁方式
                sCMAcOdrDtlAsWork.ConsTaxRate = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("CONSTAXRATERF"));  // 消費税税率
                sCMAcOdrDtlAsWork.ScmFractionProcCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SCMFRACTIONPROCCDRF"));  // SCM端数処理区分
                sCMAcOdrDtlAsWork.AccRecConsTax = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("ACCRECCONSTAXRF"));  // 売掛消費税
                sCMAcOdrDtlAsWork.PMSalesDate = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PMSALESDATERF"));  // PM売上日
                sCMAcOdrDtlAsWork.SuppSlpPrtTime = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("SUPPSLPPRTTIMERF"));  // 仕入先伝票発行時刻
                sCMAcOdrDtlAsWork.SalesMoneyTaxInc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESMONEYTAXINCRF"));  // 売上金額（税込み）
                sCMAcOdrDtlAsWork.SalesMoneyTaxExc = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("SALESMONEYTAXEXCRF"));  // 売上金額（税抜き）
                // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDtlAsWork.DataInputSystem = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("DATAINPUTSYSTEMRF")); // データ入力システム
                // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                sCMAcOdrDtlAsWork.PmMainMngWarehouseCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PMMAINMNGWAREHOUSECDRF"));  // PM主管倉庫コード
                sCMAcOdrDtlAsWork.PmMainMngWarehouseName = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PMMAINMNGWAREHOUSENAMERF"));  // PM主管倉庫名称
                sCMAcOdrDtlAsWork.PmMainMngShelfNo = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PMMAINMNGSHELFNORF"));  // PM主管棚番
                sCMAcOdrDtlAsWork.PmMainMngPrsntCount = SqlDataMediator.SqlGetDouble(myReader, myReader.GetOrdinal("PMMAINMNGPRSNTCOUNTRF"));  // PM主管現在個数
                // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
                sCMAcOdrDtlAsWork.PrmSetDtlNo2 = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("PRMSETDTLNO2RF")); // 優良設定詳細コード２
                sCMAcOdrDtlAsWork.PrmSetDtlName2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PRMSETDTLNAME2RF")); // 優良設定詳細名称２
                sCMAcOdrDtlAsWork.StockStatusDiv = SqlDataMediator.SqlGetShort(myReader, myReader.GetOrdinal("STOCKSTATUSDIVRF")); // 在庫状況区分
                // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<

                // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
                sCMAcOdrDtlAsWork.RentDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("RENTDIVRF")); // 貸出区分            
                sCMAcOdrDtlAsWork.MkrSuggestRtPric = SqlDataMediator.SqlGetInt64(myReader, myReader.GetOrdinal("MKRSUGGESTRTPRICRF")); // メーカー希望小売価格
                sCMAcOdrDtlAsWork.OpenPriceDiv = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("OPENPRICEDIVRF")); // オープン価格区分    
                // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<

                // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
                sCMAcOdrDtlAsWork.BgnGoodsDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("BGNGOODSDIVRF")); // お買得商品選択区分
                // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<

                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
                sCMAcOdrDtlAsWork.ModelPrtsAdptYm = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELPRTSADPTYMRF")); // 型式別部品採用年月    
                sCMAcOdrDtlAsWork.ModelPrtsAblsYm = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELPRTSABLSYMRF")); // 型式別部品廃止年月    
                sCMAcOdrDtlAsWork.ModelPrtsAdptFrameNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELPRTSADPTFRAMENORF")); // 型式別部品採用車台番号    
                sCMAcOdrDtlAsWork.ModelPrtsAblsFrameNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("MODELPRTSABLSFRAMENORF")); // 型式別部品廃止車台番号    
                // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<

                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDtlAsWork.AnsDeliDateDiv = SqlDataMediator.SqlGetInt16(myReader, myReader.GetOrdinal("ANSDELIDATEDIVRF")); // 回答納期区分
                // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDtlAsWork.GoodsSpecialNtForFac = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSSPECIALNTFORFACRF")); // 商品規格・特記事項(工場向け)
                sCMAcOdrDtlAsWork.GoodsSpecialNtForCOw = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("GOODSSPECIALNTFORCOWRF")); // 商品規格・特記事項(カーオーナー向け)
                sCMAcOdrDtlAsWork.PrmSetDtlName2ForFac = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PRMSETDTLNAME2FORFACRF")); // 優良設定詳細名称２(工場向け)
                sCMAcOdrDtlAsWork.PrmSetDtlName2ForCOw = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("PRMSETDTLNAME2FORCOWRF")); // 優良設定詳細名称２(カーオーナー向け)
                // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                sCMAcOdrDtlAsWork.InqBlUtyPtThCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("INQBLUTYPTTHCDRF"));  // 問発BL統一部品コード(スリーコード版)
                sCMAcOdrDtlAsWork.InqBlUtyPtSbCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("INQBLUTYPTSBCDRF"));  // 問発BL統一部品サブコード
                sCMAcOdrDtlAsWork.AnsBlUtyPtThCd = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ANSBLUTYPTTHCDRF"));  // 回答BL統一部品コード(スリーコード版)
                sCMAcOdrDtlAsWork.AnsBlUtyPtSbCd = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ANSBLUTYPTSBCDRF"));  // 回答BL統一部品サブコード
                sCMAcOdrDtlAsWork.AnsBLGoodsCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ANSBLGOODSCODERF"));  // 回答BL商品コード
                sCMAcOdrDtlAsWork.AnsBLGoodsDrCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("ANSBLGOODSDRCODERF"));  // 回答BL商品コード枝番
                // ADD 2018/04/16 田建委 新BLコード対応 SqlGetInt32
                # endregion

            }

            return sCMAcOdrDtlAsWork;
        }
        // -- ADD 2010/02/26 -------------------------------------------<<<

        # endregion
        // -- ADD 2011/08/10   ------ >>>>>>
        /// <summary>
        /// SCM受注セット部品データを削除・追加します。
        /// </summary>
        /// <param name="scmAcOdSetDtWorkList">追加するSCM受注セット部品データ情報を格納する ArrayList</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <param name="sqlTransaction">トランザクション情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : scmAcOdSetDtWorkList に格納されているSCM受注セット部品データ情報を追加します。</br>
        /// <br>Programmer : LDNS wangqx</br>
        /// <br>Date       : 2011.08.08</br>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        private int DelInsSCMAcOdSetDataWorkProc(ref ArrayList scmAcOdSetDtWorkList, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlCommand sqlCommand = null;

            ArrayList al = new ArrayList();

            try
            {
                if (scmAcOdSetDtWorkList != null)
                {
                    for (int i = 0; i < scmAcOdSetDtWorkList.Count; i++)
                    {
                        string sqlText = string.Empty;
                        sqlCommand = new SqlCommand(sqlText, sqlConnection, sqlTransaction);

                        SCMAcOdSetDtWork scmAcOdSetDtWork = scmAcOdSetDtWorkList[i] as SCMAcOdSetDtWork;
                        sqlCommand.Parameters.Clear();

                        sqlText += "  DELETE" + Environment.NewLine;
                        sqlText += "  FROM" + Environment.NewLine;
                        sqlText += "  SCMACODSETDTRF" + Environment.NewLine;
                        sqlText += "  WHERE" + Environment.NewLine;
                        sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALEPCDRF = @FINDINQORIGINALEPCD" + Environment.NewLine;
                        sqlText += "  AND INQORIGINALSECCDRF = @FINDINQORIGINALSECCD" + Environment.NewLine;
                        sqlText += "  AND INQOTHEREPCDRF = @FINDINQOTHEREPCD" + Environment.NewLine;
                        sqlText += "  AND INQOTHERSECCDRF = @FINDINQOTHERSECCD" + Environment.NewLine;
                        sqlText += "  AND INQUIRYNUMBERRF = @FINDINQUIRYNUMBERRF" + Environment.NewLine;
                        sqlText += "  AND SETPARTSMKRCDRF = @FINDSETPARTSMKRCD" + Environment.NewLine;
                        sqlText += "  AND SETPARTSNUMBERRF = @FINDSETPARTSNUMBER" + Environment.NewLine;
                        sqlText += "  AND SETPARTSMAINSUBNORF = @FINDSETPARTSMAINSUBNO" + Environment.NewLine;
                        sqlCommand.CommandText = sqlText;

                        sqlCommand.Parameters.Clear();

                        //Prameterオブジェクトの作成
                        SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);        // 企業コード
                        SqlParameter findInqOriginalEpCd = sqlCommand.Parameters.Add("@FINDINQORIGINALEPCD", SqlDbType.NChar);      // 問合せ元企業コード
                        SqlParameter findInqOriginalSecCd = sqlCommand.Parameters.Add("@FINDINQORIGINALSECCD", SqlDbType.NChar);    // 問合せ元拠点コード
                        SqlParameter findInqOtherEpCd = sqlCommand.Parameters.Add("@FINDINQOTHEREPCD", SqlDbType.NChar);            // 問合せ先企業コード
                        SqlParameter findInqOtherSecCd = sqlCommand.Parameters.Add("@FINDINQOTHERSECCD", SqlDbType.NChar);          // 問合せ先拠点コード
                        SqlParameter findInquiryNumber = sqlCommand.Parameters.Add("@FINDINQUIRYNUMBERRF", SqlDbType.Int);          // 問合せ番号
                        SqlParameter findParaSetPartsMkrCd = sqlCommand.Parameters.Add("@FINDSETPARTSMKRCD", SqlDbType.Int);        // セット部品メーカーコード
                        SqlParameter findParaSetPartsNumber = sqlCommand.Parameters.Add("@FINDSETPARTSNUMBER", SqlDbType.NVarChar); // セット部品番号
                        SqlParameter findParaSetPartsMainSubNo = sqlCommand.Parameters.Add("@FINDSETPARTSMAINSUBNO", SqlDbType.Int);// セット部品親子番号

                        //Parameterオブジェクトへ値設定
                        findEnterpriseCode.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.EnterpriseCode);                   // 企業コード
                        findInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOriginalEpCd);                 // 問合せ元企業コード
                        findInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOriginalSecCd);               // 問合せ元拠点コード
                        findInqOtherEpCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOtherEpCd);                       // 問合せ先企業コード
                        findInqOtherSecCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOtherSecCd);                     // 問合せ先拠点コード
                        findInquiryNumber.Value = SqlDataMediator.SqlSetInt64(scmAcOdSetDtWork.InquiryNumber);                      // 問合せ番号
                        findParaSetPartsMkrCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.SetPartsMkrCd);                  // セット部品メーカーコード
                        findParaSetPartsNumber.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.SetPartsNumber);               // セット部品番号
                        findParaSetPartsMainSubNo.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.SetPartsMainSubNo);          // セット部品親子番号

                        sqlCommand.ExecuteNonQuery();

                        sqlCommand.Parameters.Clear();
                        sqlText = string.Empty;

                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------>>>>>
                        // 論理削除済(LogicalDeleteCode=1)の時Insertしない
                        if (scmAcOdSetDtWork.LogicalDeleteCode == 0)
                        {
                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------<<<<<
                            # region [INSERT文]
                            sqlText += "  INSERT INTO SCMACODSETDTRF (" + Environment.NewLine;
                            sqlText += "  CREATEDATETIMERF" + Environment.NewLine;
                            sqlText += "  ,UPDATEDATETIMERF" + Environment.NewLine;
                            sqlText += "  ,ENTERPRISECODERF" + Environment.NewLine;
                            sqlText += "  ,FILEHEADERGUIDRF" + Environment.NewLine;
                            sqlText += "  ,UPDEMPLOYEECODERF" + Environment.NewLine;
                            sqlText += "  ,UPDASSEMBLYID1RF" + Environment.NewLine;
                            sqlText += "  ,UPDASSEMBLYID2RF" + Environment.NewLine;
                            sqlText += "  ,LOGICALDELETECODERF" + Environment.NewLine;
                            sqlText += "  ,INQORIGINALEPCDRF" + Environment.NewLine;
                            sqlText += "  ,INQORIGINALSECCDRF" + Environment.NewLine;
                            sqlText += "  ,INQOTHEREPCDRF" + Environment.NewLine;
                            sqlText += "  ,INQOTHERSECCDRF" + Environment.NewLine;
                            sqlText += "  ,INQUIRYNUMBERRF" + Environment.NewLine;
                            sqlText += "  ,SETPARTSMKRCDRF" + Environment.NewLine;
                            sqlText += "  ,SETPARTSNUMBERRF" + Environment.NewLine;
                            sqlText += "  ,SETPARTSMAINSUBNORF" + Environment.NewLine;
                            sqlText += "  ,GOODSDIVCDRF" + Environment.NewLine;
                            sqlText += "  ,RECYCLEPRTKINDCODERF" + Environment.NewLine;
                            sqlText += "  ,RECYCLEPRTKINDNAMERF" + Environment.NewLine;
                            sqlText += "  ,DELIVEREDGOODSDIVRF" + Environment.NewLine;
                            sqlText += "  ,HANDLEDIVCODERF" + Environment.NewLine;
                            sqlText += "  ,GOODSSHAPERF" + Environment.NewLine;
                            sqlText += "  ,DELIVRDGDSCONFCDRF" + Environment.NewLine;
                            sqlText += "  ,DELIGDSCMPLTDUEDATERF" + Environment.NewLine;
                            sqlText += "  ,ANSWERDELIVERYDATERF" + Environment.NewLine;
                            sqlText += "  ,BLGOODSCODERF" + Environment.NewLine;
                            sqlText += "  ,BLGOODSDRCODERF" + Environment.NewLine;
                            sqlText += "  ,INQGOODSNAMERF" + Environment.NewLine;
                            sqlText += "  ,ANSGOODSNAMERF" + Environment.NewLine;
                            sqlText += "  ,SALESORDERCOUNTRF" + Environment.NewLine;
                            sqlText += "  ,DELIVEREDGOODSCOUNTRF" + Environment.NewLine;
                            sqlText += "  ,GOODSNORF" + Environment.NewLine;
                            sqlText += "  ,GOODSMAKERCDRF" + Environment.NewLine;
                            sqlText += "  ,GOODSMAKERNMRF" + Environment.NewLine;
                            sqlText += "  ,PUREGOODSMAKERCDRF" + Environment.NewLine;
                            sqlText += "  ,INQPUREGOODSNORF" + Environment.NewLine;
                            sqlText += "  ,ANSPUREGOODSNORF" + Environment.NewLine;
                            sqlText += "  ,LISTPRICERF" + Environment.NewLine;
                            sqlText += "  ,UNITPRICERF" + Environment.NewLine;
                            sqlText += "  ,GOODSADDINFORF" + Environment.NewLine;
                            sqlText += "  ,ROUGHRROFITRF" + Environment.NewLine;
                            sqlText += "  ,ROUGHRATERF" + Environment.NewLine;
                            sqlText += "  ,ANSWERLIMITDATERF" + Environment.NewLine;
                            sqlText += "  ,COMMENTDTLRF" + Environment.NewLine;
                            sqlText += "  ,SHELFNORF" + Environment.NewLine;
                            sqlText += "  ,PMACPTANODRSTATUSRF" + Environment.NewLine;
                            sqlText += "  ,PMSALESSLIPNUMRF" + Environment.NewLine;
                            sqlText += "  ,PMSALESROWNORF" + Environment.NewLine;
                            sqlText += "  ,PMWAREHOUSECDRF" + Environment.NewLine;
                            sqlText += "  ,PMWAREHOUSENAMERF" + Environment.NewLine;
                            sqlText += "  ,PMSHELFNORF" + Environment.NewLine;
                            sqlText += "  ,PMPRSNTCOUNTRF" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            sqlText += "  ,PMMAINMNGWAREHOUSECDRF" + Environment.NewLine;
                            sqlText += "  ,PMMAINMNGWAREHOUSENAMERF" + Environment.NewLine;
                            sqlText += "  ,PMMAINMNGSHELFNORF" + Environment.NewLine;
                            sqlText += "  ,PMMAINMNGPRSNTCOUNTRF" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                            sqlText += "  ,GOODSSPCLINSTRUCTIONRF" + Environment.NewLine;
                            // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                            // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------->>>>>
                            sqlText += "  ,MKRSUGGESTRTPRICRF" + Environment.NewLine;
                            sqlText += "  ,OPENPRICEDIVRF" + Environment.NewLine;
                            // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------<<<<<
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,ANSDELIDATEDIVRF" + Environment.NewLine;     // 回答納期区分
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,GOODSSPECIALNTFORFACRF" + Environment.NewLine;     // 商品規格・特記事項(工場向け)
                            sqlText += " ,GOODSSPECIALNTFORCOWRF" + Environment.NewLine;     // 商品規格・特記事項(カーオーナー向け)
                            sqlText += " ,PRMSETDTLNAME2FORFACRF" + Environment.NewLine;     // 優良設定詳細名称２(工場向け)
                            sqlText += " ,PRMSETDTLNAME2FORCOWRF" + Environment.NewLine;     // 優良設定詳細名称２(カーオーナー向け)
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                            sqlText += " ,PRMSETDTLNO2RF" + Environment.NewLine;     // 優良設定詳細コード２
                            sqlText += " ,PRMSETDTLNAME2RF" + Environment.NewLine;     // 優良設定詳細名称２
                            sqlText += " ,STOCKSTATUSDIVRF" + Environment.NewLine;     // 在庫状況区分
                            // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,INQBLUTYPTTHCDRF" + Environment.NewLine;
                            sqlText += " ,INQBLUTYPTSBCDRF" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTTHCDRF" + Environment.NewLine;
                            sqlText += " ,ANSBLUTYPTSBCDRF" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSCODERF" + Environment.NewLine;
                            sqlText += " ,ANSBLGOODSDRCODERF" + Environment.NewLine;
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            sqlText += " )" + Environment.NewLine;
                            sqlText += "  VALUES" + Environment.NewLine;
                            sqlText += "  (@CREATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@UPDATEDATETIME" + Environment.NewLine;
                            sqlText += " ,@ENTERPRISECODE" + Environment.NewLine;
                            sqlText += " ,@FILEHEADERGUID" + Environment.NewLine;
                            sqlText += " ,@UPDEMPLOYEECODE" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID1" + Environment.NewLine;
                            sqlText += " ,@UPDASSEMBLYID2" + Environment.NewLine;
                            sqlText += " ,@LOGICALDELETECODE" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALEPCD" + Environment.NewLine;
                            sqlText += " ,@INQORIGINALSECCD" + Environment.NewLine;
                            sqlText += " ,@INQOTHEREPCD" + Environment.NewLine;
                            sqlText += " ,@INQOTHERSECCD" + Environment.NewLine;
                            sqlText += " ,@INQUIRYNUMBER" + Environment.NewLine;
                            sqlText += " ,@SETPARTSMKRCD" + Environment.NewLine;
                            sqlText += " ,@SETPARTSNUMBER" + Environment.NewLine;
                            sqlText += " ,@SETPARTSMAINSUBNO" + Environment.NewLine;
                            sqlText += " ,@GOODSDIVCD" + Environment.NewLine;
                            sqlText += " ,@RECYCLEPRTKINDCODE" + Environment.NewLine;
                            sqlText += " ,@RECYCLEPRTKINDNAME" + Environment.NewLine;
                            sqlText += " ,@DELIVEREDGOODSDIV" + Environment.NewLine;
                            sqlText += " ,@HANDLEDIVCODE" + Environment.NewLine;
                            sqlText += " ,@GOODSSHAPE" + Environment.NewLine;
                            sqlText += " ,@DELIVRDGDSCONFCD" + Environment.NewLine;
                            sqlText += " ,@DELIGDSCMPLTDUEDATE" + Environment.NewLine;
                            sqlText += " ,@ANSWERDELIVERYDATE" + Environment.NewLine;
                            sqlText += " ,@BLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,@BLGOODSDRCODE" + Environment.NewLine;
                            sqlText += " ,@INQGOODSNAME" + Environment.NewLine;
                            sqlText += " ,@ANSGOODSNAME" + Environment.NewLine;
                            sqlText += " ,@SALESORDERCOUNT" + Environment.NewLine;
                            sqlText += " ,@DELIVEREDGOODSCOUNT" + Environment.NewLine;
                            sqlText += " ,@GOODSNO" + Environment.NewLine;
                            sqlText += " ,@GOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,@GOODSMAKERNM" + Environment.NewLine;
                            sqlText += " ,@PUREGOODSMAKERCD" + Environment.NewLine;
                            sqlText += " ,@INQPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,@ANSPUREGOODSNO" + Environment.NewLine;
                            sqlText += " ,@LISTPRICE" + Environment.NewLine;
                            sqlText += " ,@UNITPRICE" + Environment.NewLine;
                            sqlText += " ,@GOODSADDINFO" + Environment.NewLine;
                            sqlText += " ,@ROUGHRROFIT" + Environment.NewLine;
                            sqlText += " ,@ROUGHRATE" + Environment.NewLine;
                            sqlText += " ,@ANSWERLIMITDATE" + Environment.NewLine;
                            sqlText += " ,@COMMENTDTL" + Environment.NewLine;
                            sqlText += " ,@SHELFNO" + Environment.NewLine;
                            sqlText += " ,@PMACPTANODRSTATUS" + Environment.NewLine;
                            sqlText += " ,@PMSALESSLIPNUM" + Environment.NewLine;
                            sqlText += " ,@PMSALESROWNO" + Environment.NewLine;
                            sqlText += " ,@PMWAREHOUSECD" + Environment.NewLine;
                            sqlText += " ,@PMWAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,@PMSHELFNO" + Environment.NewLine;
                            sqlText += " ,@PMPRSNTCOUNT" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            sqlText += " ,@PMMAINMNGWAREHOUSECD" + Environment.NewLine;
                            sqlText += " ,@PMMAINMNGWAREHOUSENAME" + Environment.NewLine;
                            sqlText += " ,@PMMAINMNGSHELFNO" + Environment.NewLine;
                            sqlText += " ,@PMMAINMNGPRSNTCOUNT" + Environment.NewLine;
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                            sqlText += " ,@GOODSSPCLINSTRUCTION" + Environment.NewLine;
                            // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                            // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------->>>>>
                            sqlText += " ,@MKRSUGGESTRTPRIC" + Environment.NewLine;
                            sqlText += " ,@OPENPRICEDIV" + Environment.NewLine;
                            // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------<<<<<
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@ANSDELIDATEDIV" + Environment.NewLine;    // 回答納期区分
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@GOODSSPECIALNTFORFAC" + Environment.NewLine;    // 商品規格・特記事項(工場向け)
                            sqlText += " ,@GOODSSPECIALNTFORCOW" + Environment.NewLine;    // 商品規格・特記事項(カーオーナー向け)
                            sqlText += " ,@PRMSETDTLNAME2FORFAC" + Environment.NewLine;    // 優良設定詳細名称２(工場向け)
                            sqlText += " ,@PRMSETDTLNAME2FORCOW" + Environment.NewLine;    // 優良設定詳細名称２(カーオーナー向け)
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                            sqlText += " ,@PRMSETDTLNO2" + Environment.NewLine;    // 優良設定詳細コード２
                            sqlText += " ,@PRMSETDTLNAME2" + Environment.NewLine;    // 優良設定詳細名称２
                            sqlText += " ,@STOCKSTATUSDIV" + Environment.NewLine;    // 在庫状況区分
                            // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            sqlText += " ,@INQBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,@INQBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,@ANSBLUTYPTTHCD" + Environment.NewLine;
                            sqlText += " ,@ANSBLUTYPTSBCD" + Environment.NewLine;
                            sqlText += " ,@ANSBLGOODSCODE" + Environment.NewLine;
                            sqlText += " ,@ANSBLGOODSDRCODE" + Environment.NewLine;
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            sqlText += " )" + Environment.NewLine;
                            sqlCommand.CommandText = sqlText;
                            # endregion

                            // 登録ヘッダ情報を設定
                            object obj = (object)this;
                            IFileHeader flhd = (IFileHeader)scmAcOdSetDtWork;
                            FileHeader fileHeader = new FileHeader(obj);
                            fileHeader.SetInsertHeader(ref flhd, obj);

                            //Prameterオブジェクトの作成
                            SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);
                            SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);
                            SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);
                            SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);
                            SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);
                            SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);
                            SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);
                            SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);
                            SqlParameter paraInqOriginalEpCd = sqlCommand.Parameters.Add("@INQORIGINALEPCD", SqlDbType.NChar);
                            SqlParameter paraInqOriginalSecCd = sqlCommand.Parameters.Add("@INQORIGINALSECCD", SqlDbType.NChar);
                            SqlParameter paraInqOtherEpCd = sqlCommand.Parameters.Add("@INQOTHEREPCD", SqlDbType.NChar);
                            SqlParameter paraInqOtherSecCd = sqlCommand.Parameters.Add("@INQOTHERSECCD", SqlDbType.NChar);
                            SqlParameter paraInquiryNumber = sqlCommand.Parameters.Add("@INQUIRYNUMBER", SqlDbType.BigInt);
                            SqlParameter paraSetPartsMkrCd = sqlCommand.Parameters.Add("@SETPARTSMKRCD", SqlDbType.Int);
                            SqlParameter paraSetPartsNumber = sqlCommand.Parameters.Add("@SETPARTSNUMBER", SqlDbType.NVarChar);
                            SqlParameter paraSetPartsMainSubNo = sqlCommand.Parameters.Add("@SETPARTSMAINSUBNO", SqlDbType.Int);
                            SqlParameter paraGoodsDivCd = sqlCommand.Parameters.Add("@GOODSDIVCD", SqlDbType.Int);
                            SqlParameter paraRecyclePrtKindCode = sqlCommand.Parameters.Add("@RECYCLEPRTKINDCODE", SqlDbType.Int);
                            SqlParameter paraRecyclePrtKindName = sqlCommand.Parameters.Add("@RECYCLEPRTKINDNAME", SqlDbType.NVarChar);
                            SqlParameter paraDeliveredGoodsDiv = sqlCommand.Parameters.Add("@DELIVEREDGOODSDIV", SqlDbType.Int);
                            SqlParameter paraHandleDivCode = sqlCommand.Parameters.Add("@HANDLEDIVCODE", SqlDbType.Int);
                            SqlParameter paraGoodsShape = sqlCommand.Parameters.Add("@GOODSSHAPE", SqlDbType.Int);
                            SqlParameter paraDelivrdGdsConfCd = sqlCommand.Parameters.Add("@DELIVRDGDSCONFCD", SqlDbType.Int);
                            SqlParameter paraDeliGdsCmpltDueDate = sqlCommand.Parameters.Add("@DELIGDSCMPLTDUEDATE", SqlDbType.Int);
                            SqlParameter paraAnswerDeliveryDate = sqlCommand.Parameters.Add("@ANSWERDELIVERYDATE", SqlDbType.NVarChar);
                            SqlParameter paraBLGoodsCode = sqlCommand.Parameters.Add("@BLGOODSCODE", SqlDbType.Int);
                            SqlParameter paraBLGoodsDrCode = sqlCommand.Parameters.Add("@BLGOODSDRCODE", SqlDbType.Int);
                            SqlParameter paraInqGoodsName = sqlCommand.Parameters.Add("@INQGOODSNAME", SqlDbType.NVarChar);
                            SqlParameter paraAnsGoodsName = sqlCommand.Parameters.Add("@ANSGOODSNAME", SqlDbType.NVarChar);
                            SqlParameter paraSalesOrderCount = sqlCommand.Parameters.Add("@SALESORDERCOUNT", SqlDbType.Float);
                            SqlParameter paraDeliveredGoodsCount = sqlCommand.Parameters.Add("@DELIVEREDGOODSCOUNT", SqlDbType.Float);
                            SqlParameter paraGoodsNo = sqlCommand.Parameters.Add("@GOODSNO", SqlDbType.NVarChar);
                            SqlParameter paraGoodsMakerCd = sqlCommand.Parameters.Add("@GOODSMAKERCD", SqlDbType.Int);
                            SqlParameter paraGoodsMakerNm = sqlCommand.Parameters.Add("@GOODSMAKERNM", SqlDbType.NVarChar);
                            SqlParameter paraPureGoodsMakerCd = sqlCommand.Parameters.Add("@PUREGOODSMAKERCD", SqlDbType.Int);
                            SqlParameter paraInqPureGoodsNo = sqlCommand.Parameters.Add("@INQPUREGOODSNO", SqlDbType.NVarChar);
                            SqlParameter paraAnsPureGoodsNo = sqlCommand.Parameters.Add("@ANSPUREGOODSNO", SqlDbType.NVarChar);
                            SqlParameter paraListPrice = sqlCommand.Parameters.Add("@LISTPRICE", SqlDbType.BigInt);
                            SqlParameter paraUnitPrice = sqlCommand.Parameters.Add("@UNITPRICE", SqlDbType.BigInt);
                            SqlParameter paraGoodsAddInfo = sqlCommand.Parameters.Add("@GOODSADDINFO", SqlDbType.NVarChar);
                            SqlParameter paraRoughRrofit = sqlCommand.Parameters.Add("@ROUGHRROFIT", SqlDbType.BigInt);
                            SqlParameter paraRoughRate = sqlCommand.Parameters.Add("@ROUGHRATE", SqlDbType.Float);
                            SqlParameter paraAnswerLimitDate = sqlCommand.Parameters.Add("@ANSWERLIMITDATE", SqlDbType.Int);
                            SqlParameter paraCommentDtl = sqlCommand.Parameters.Add("@COMMENTDTL", SqlDbType.NVarChar);
                            SqlParameter paraShelfNo = sqlCommand.Parameters.Add("@SHELFNO", SqlDbType.NVarChar);
                            SqlParameter paraPMAcptAnOdrStatus = sqlCommand.Parameters.Add("@PMACPTANODRSTATUS", SqlDbType.Int);
                            SqlParameter paraPMSalesSlipNum = sqlCommand.Parameters.Add("@PMSALESSLIPNUM", SqlDbType.Int);
                            SqlParameter paraPMSalesRowNo = sqlCommand.Parameters.Add("@PMSALESROWNO", SqlDbType.Int);
                            SqlParameter paraPmWarehouseCd = sqlCommand.Parameters.Add("@PMWAREHOUSECD", SqlDbType.NVarChar);
                            SqlParameter paraPmWarehouseName = sqlCommand.Parameters.Add("@PMWAREHOUSENAME", SqlDbType.NVarChar);
                            SqlParameter paraPmShelfNo = sqlCommand.Parameters.Add("@PMSHELFNO", SqlDbType.NVarChar);
                            SqlParameter paraPmPrsntCount = sqlCommand.Parameters.Add("@PMPRSNTCOUNT", SqlDbType.Float);
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            SqlParameter paraPmMainMngWarehouseCd = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSECD", SqlDbType.NVarChar);
                            SqlParameter paraPmMainMngWarehouseName = sqlCommand.Parameters.Add("@PMMAINMNGWAREHOUSENAME", SqlDbType.NVarChar);
                            SqlParameter paraPmMainMngShelfNo = sqlCommand.Parameters.Add("@PMMAINMNGSHELFNO", SqlDbType.NVarChar);
                            SqlParameter paraPmMainMngPrsntCount = sqlCommand.Parameters.Add("@PMMAINMNGPRSNTCOUNT", SqlDbType.Float);
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                            SqlParameter paraGoodsSpclInstruction = sqlCommand.Parameters.Add("@GOODSSPCLINSTRUCTION", SqlDbType.NVarChar);
                            // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                            // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------->>>>>
                            SqlParameter paraMkrSuggestRtPric = sqlCommand.Parameters.Add("@MKRSUGGESTRTPRIC", SqlDbType.BigInt);
                            SqlParameter paraOpenPriceDiv = sqlCommand.Parameters.Add("@OPENPRICEDIV", SqlDbType.Int);
                            // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------<<<<<
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            SqlParameter paraAnsDeliDateDiv = sqlCommand.Parameters.Add("@ANSDELIDATEDIV", SqlDbType.SmallInt);  // 回答納期区分
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            SqlParameter paraGoodsSpecialNtForFac = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORFAC", SqlDbType.NVarChar);  // 商品規格・特記事項(工場向け)
                            SqlParameter paraGoodsSpecialNtForCOw = sqlCommand.Parameters.Add("@GOODSSPECIALNTFORCOW", SqlDbType.NVarChar);  // 商品規格・特記事項(カーオーナー向け)
                            SqlParameter paraPrmSetDtlName2ForFac = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORFAC", SqlDbType.NVarChar);  // 優良設定詳細名称２(工場向け)
                            SqlParameter paraPrmSetDtlName2ForCOw = sqlCommand.Parameters.Add("@PRMSETDTLNAME2FORCOW", SqlDbType.NVarChar);  // 優良設定詳細名称２(カーオーナー向け)
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                            SqlParameter paraPrmSetDtlNo2 = sqlCommand.Parameters.Add("@PRMSETDTLNO2", SqlDbType.Int);  // 優良設定詳細コード２
                            SqlParameter paraPrmSetDtlName2 = sqlCommand.Parameters.Add("@PRMSETDTLNAME2", SqlDbType.NVarChar);  // 優良設定詳細名称２
                            SqlParameter paraStockStatusDiv = sqlCommand.Parameters.Add("@STOCKSTATUSDIV", SqlDbType.SmallInt);  // 在庫状況区分
                            // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            SqlParameter paraInqBlUtyPtThCd = sqlCommand.Parameters.Add("@INQBLUTYPTTHCD", SqlDbType.NChar);  // 問発BL統一部品コード(スリーコード版)
                            SqlParameter paraInqBlUtyPtSbCd = sqlCommand.Parameters.Add("@INQBLUTYPTSBCD", SqlDbType.Int);  // 問発BL統一部品サブコード
                            SqlParameter paraAnsBlUtyPtThCd = sqlCommand.Parameters.Add("@ANSBLUTYPTTHCD", SqlDbType.NChar);  // 回答BL統一部品コード(スリーコード版)
                            SqlParameter paraAnsBlUtyPtSbCd = sqlCommand.Parameters.Add("@ANSBLUTYPTSBCD", SqlDbType.Int);  // 回答BL統一部品サブコード
                            SqlParameter paraAnsBLGoodsCode = sqlCommand.Parameters.Add("@ANSBLGOODSCODE", SqlDbType.Int);  // 回答BL商品コード
                            SqlParameter paraAnsBLGoodsDrCode = sqlCommand.Parameters.Add("@ANSBLGOODSDRCODE", SqlDbType.Int);  // 回答BL商品コード枝番
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                            //Parameterオブジェクトへ値設定
                            paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(scmAcOdSetDtWork.CreateDateTime);
                            paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(scmAcOdSetDtWork.UpdateDateTime);
                            paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.EnterpriseCode);
                            paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(scmAcOdSetDtWork.FileHeaderGuid);
                            paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.UpdEmployeeCode);
                            paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.UpdAssemblyId1);
                            paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.UpdAssemblyId2);
                            paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.LogicalDeleteCode);
                            paraInqOriginalEpCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOriginalEpCd);
                            paraInqOriginalSecCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOriginalSecCd);
                            paraInqOtherEpCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOtherEpCd);
                            paraInqOtherSecCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqOtherSecCd);
                            paraInquiryNumber.Value = SqlDataMediator.SqlSetLong(scmAcOdSetDtWork.InquiryNumber);
                            paraSetPartsMkrCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.SetPartsMkrCd);
                            paraSetPartsNumber.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.SetPartsNumber);
                            paraSetPartsMainSubNo.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.SetPartsMainSubNo);
                            paraGoodsDivCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.GoodsDivCd);
                            paraRecyclePrtKindCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.RecyclePrtKindCode);
                            paraRecyclePrtKindName.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.RecyclePrtKindName);
                            paraDeliveredGoodsDiv.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.DeliveredGoodsDiv);
                            paraHandleDivCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.HandleDivCode);
                            paraGoodsShape.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.GoodsShape);
                            paraDelivrdGdsConfCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.DelivrdGdsConfCd);
                            paraDeliGdsCmpltDueDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(scmAcOdSetDtWork.DeliGdsCmpltDueDate);
                            paraAnswerDeliveryDate.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.AnswerDeliveryDate);
                            paraBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.BLGoodsCode);
                            paraBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.BLGoodsDrCode);
                            paraInqGoodsName.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqGoodsName);
                            paraAnsGoodsName.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.AnsGoodsName);
                            paraSalesOrderCount.Value = SqlDataMediator.SqlSetDouble(scmAcOdSetDtWork.SalesOrderCount);
                            paraDeliveredGoodsCount.Value = SqlDataMediator.SqlSetDouble(scmAcOdSetDtWork.DeliveredGoodsCount);
                            paraGoodsNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsNo);
                            paraGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.GoodsMakerCd);
                            paraGoodsMakerNm.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsMakerNm);
                            paraPureGoodsMakerCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.PureGoodsMakerCd);
                            paraInqPureGoodsNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqPureGoodsNo);
                            paraAnsPureGoodsNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.AnsPureGoodsNo);
                            paraListPrice.Value = SqlDataMediator.SqlSetLong(scmAcOdSetDtWork.ListPrice);
                            paraUnitPrice.Value = SqlDataMediator.SqlSetLong(scmAcOdSetDtWork.UnitPrice);
                            paraGoodsAddInfo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsAddInfo);
                            paraRoughRrofit.Value = SqlDataMediator.SqlSetLong(scmAcOdSetDtWork.RoughRrofit);
                            paraRoughRate.Value = SqlDataMediator.SqlSetDouble(scmAcOdSetDtWork.RoughRate);
                            paraAnswerLimitDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(scmAcOdSetDtWork.AnswerLimitDate);
                            paraCommentDtl.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.CommentDtl);
                            paraShelfNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.ShelfNo);
                            paraPMAcptAnOdrStatus.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.PMAcptAnOdrStatus);
                            paraPMSalesSlipNum.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.PMSalesSlipNum);
                            paraPMSalesRowNo.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.PMSalesRowNo);
                            paraPmWarehouseCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmWarehouseCd);
                            paraPmWarehouseName.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmWarehouseName);
                            paraPmShelfNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmShelfNo);
                            paraPmPrsntCount.Value = SqlDataMediator.SqlSetDouble(scmAcOdSetDtWork.PmPrsntCount);
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                            paraPmMainMngWarehouseCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmMainMngWarehouseCd);
                            paraPmMainMngWarehouseName.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmMainMngWarehouseName);
                            paraPmMainMngShelfNo.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PmMainMngShelfNo);
                            paraPmMainMngPrsntCount.Value = SqlDataMediator.SqlSetDouble(scmAcOdSetDtWork.PmMainMngPrsntCount);
                            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                            // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
                            paraGoodsSpclInstruction.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsSpclInstruction);
                            // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<
                            // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 --------------------->>>>>
                            paraMkrSuggestRtPric.Value = SqlDataMediator.SqlSetInt64(scmAcOdSetDtWork.MkrSuggestRtPric);
                            paraOpenPriceDiv.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.OpenPriceDiv);
                            // ADD 2015/01/19 豊沢 SCM高速化 PMNS対応 ---------------------<<<<<
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            paraAnsDeliDateDiv.Value = SqlDataMediator.SqlSetInt16(scmAcOdSetDtWork.AnsDeliDateDiv); // 回答納期区分
                            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            paraGoodsSpecialNtForFac.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsSpecialNtForFac); // 商品規格・特記事項(工場向け)
                            paraGoodsSpecialNtForCOw.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.GoodsSpecialNtForCOw); // 商品規格・特記事項(カーオーナー向け)
                            paraPrmSetDtlName2ForFac.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PrmSetDtlName2ForFac); // 優良設定詳細名称２(工場向け)
                            paraPrmSetDtlName2ForCOw.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PrmSetDtlName2ForCOw); // 優良設定詳細名称２(カーオーナー向け)
                            // ADD 2015/02/20 下口 SCM高速化 Ｃ向け種別特記対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
                            paraPrmSetDtlNo2.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.PrmSetDtlNo2); // 優良設定詳細コード２
                            paraPrmSetDtlName2.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.PrmSetDtlName2); // 優良設定詳細名称２
                            paraStockStatusDiv.Value = SqlDataMediator.SqlSetInt16(scmAcOdSetDtWork.StockStatusDiv); // 在庫状況区分
                            // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
                            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            paraInqBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.InqBlUtyPtThCd);  // 問発BL統一部品コード(スリーコード版)
                            paraInqBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.InqBlUtyPtSbCd);  // 問発BL統一部品サブコード
                            paraAnsBlUtyPtThCd.Value = SqlDataMediator.SqlSetString(scmAcOdSetDtWork.AnsBlUtyPtThCd);  // 回答BL統一部品コード(スリーコード版)
                            paraAnsBlUtyPtSbCd.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.AnsBlUtyPtSbCd);  // 回答BL統一部品サブコード
                            paraAnsBLGoodsCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.AnsBLGoodsCode);  // 回答BL商品コード
                            paraAnsBLGoodsDrCode.Value = SqlDataMediator.SqlSetInt32(scmAcOdSetDtWork.AnsBLGoodsDrCode);  // 回答BL商品コード枝番
                            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                            sqlCommand.ExecuteNonQuery();
                            al.Add(scmAcOdSetDtWork);
                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------>>>>>
                        }
                        // ADD 2014/04/09 SCM仕掛一覧№10641対応 ------------------------------------<<<<<

                    }
                }

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                string errmsg = NSDebug.GetExecutingMethodName(new System.Diagnostics.StackFrame());
                status = base.WriteSQLErrorLog(ex, errmsg, ex.Number);
            }
            finally
            {
                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            scmAcOdSetDtWorkList = al;

            return status;
        }

        // -- ADD 2011/08/10   ------ <<<<<<

        // ADD 2015/08/28 譚洪 Redmine#47284 SCM仕掛一覧№10722対応  --------->>>>>>>>>>>>>>>>>>>>>>>>>
        #region
        /// <summary>
        /// 新着最終取得日時
        /// </summary>
        /// <param name="paraScmTimeDataWork">抽出条件パラメータワーク</param>
        /// <param name="retscmTimeDataObj">検索結果(SCM新着データ表示管理インスタンス)</param>
        /// <returns>STATUS</returns>
        /// <br>Note       :新着最終取得日時を取得します</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : 2015/08/28</br>
        public int SearchScmTimeData(ScmTimeDataWork paraScmTimeDataWork, out object retscmTimeDataObj)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

            SqlConnection sqlConnection = null;
            retscmTimeDataObj = null;

            ScmTimeDataWork scmTimeDataWork = new ScmTimeDataWork();

            try
            {
                // コネクション生成
                sqlConnection = this.CreateSqlConnection(true);

                status = this.SearchScmTimeDataProc(out scmTimeDataWork, paraScmTimeDataWork, ref sqlConnection);

                retscmTimeDataObj = (object)scmTimeDataWork;
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "IOWriteScmDB.UpdateScmTimeData(ScmTimeDataWork scmReadWork)");
            }
            finally
            {
                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// SCM新着データ表示管理データ情報を取得します。
        /// </summary>
        /// <param name="retScmTimeDataWork">SCM新着データ表示管理データ情報結果</param>
        /// <param name="paraScmTimeDataWork">抽出条件パラメータワーク</param>
        /// <param name="sqlConnection">データベース接続情報</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM新着データ表示管理データ情報を取得します。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : 2015/08/28</br>
        private int SearchScmTimeDataProc(out ScmTimeDataWork retScmTimeDataWork, ScmTimeDataWork paraScmTimeDataWork, ref SqlConnection sqlConnection)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;

            retScmTimeDataWork = null;

            try
            {
                string sqlText = string.Empty;
                sqlCommand = new SqlCommand(sqlText, sqlConnection);

                # region [SELECT文]
                sqlText += "SELECT" + Environment.NewLine;
                sqlText += " CREATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,UPDATEDATETIMERF" + Environment.NewLine;
                sqlText += " ,ENTERPRISECODERF" + Environment.NewLine;
                sqlText += " ,FILEHEADERGUIDRF" + Environment.NewLine;
                sqlText += " ,UPDEMPLOYEECODERF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID1RF" + Environment.NewLine;
                sqlText += " ,UPDASSEMBLYID2RF" + Environment.NewLine;
                sqlText += " ,LOGICALDELETECODERF" + Environment.NewLine;
                sqlText += " ,SECTIONCODERF" + Environment.NewLine;
                sqlText += " ,CASHREGISTERNORF" + Environment.NewLine;
                sqlText += " ,LASTGETDATERF" + Environment.NewLine;
                sqlText += " ,LASTGETTIMERF " + Environment.NewLine;

                sqlText += "FROM" + Environment.NewLine;
                sqlText += "  SCMTIMEDATARF WITH (READUNCOMMITTED)" + Environment.NewLine;
                sqlText += "WHERE" + Environment.NewLine;
                //企業コード
                sqlText += "  ENTERPRISECODERF = @FINDENTERPRISECODE" + Environment.NewLine;

                SqlParameter findEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                findEnterpriseCode.Value = SqlDataMediator.SqlSetString(paraScmTimeDataWork.EnterpriseCode);
                sqlText += "  AND SECTIONCODERF = @FINDSECTIONCODE" + Environment.NewLine;

                SqlParameter findSectionCode = sqlCommand.Parameters.Add("@FINDSECTIONCODE", SqlDbType.NChar);
                findSectionCode.Value = SqlDataMediator.SqlSetString(paraScmTimeDataWork.SectionCode);

                sqlText += "  AND CASHREGISTERNORF = @FINDCASHREGISTERNO" + Environment.NewLine;

                SqlParameter findCashRegisterNo = sqlCommand.Parameters.Add("@FINDCASHREGISTERNO", SqlDbType.Int);
                findCashRegisterNo.Value = SqlDataMediator.SqlSetInt(paraScmTimeDataWork.CashRegisterNo);

                sqlCommand.CommandText = sqlText;
                # endregion

                myReader = sqlCommand.ExecuteReader();

                if (myReader.Read())
                {
                    ScmTimeDataWork scmTimeDataWork = new ScmTimeDataWork();

                    scmTimeDataWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF"));
                    scmTimeDataWork.UpdateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("UPDATEDATETIMERF"));
                    scmTimeDataWork.EnterpriseCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("ENTERPRISECODERF"));
                    scmTimeDataWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF"));
                    scmTimeDataWork.UpdEmployeeCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDEMPLOYEECODERF"));
                    scmTimeDataWork.UpdAssemblyId1 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID1RF"));
                    scmTimeDataWork.UpdAssemblyId2 = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("UPDASSEMBLYID2RF"));
                    scmTimeDataWork.LogicalDeleteCode = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LOGICALDELETECODERF"));
                    scmTimeDataWork.SectionCode = SqlDataMediator.SqlGetString(myReader, myReader.GetOrdinal("SECTIONCODERF"));
                    scmTimeDataWork.CashRegisterNo = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("CASHREGISTERNORF"));
                    scmTimeDataWork.LastGetDate = SqlDataMediator.SqlGetDateTimeFromYYYYMMDD(myReader, myReader.GetOrdinal("LASTGETDATERF"));
                    scmTimeDataWork.LastGetTime = SqlDataMediator.SqlGetInt32(myReader, myReader.GetOrdinal("LASTGETTIMERF"));

                    retScmTimeDataWork = scmTimeDataWork;
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

                }
            }
            catch (SqlException ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (myReader != null)
                {
                    if (!myReader.IsClosed)
                    {
                        myReader.Close();
                    }

                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// SCM新着データ表示管理情報を登録、更新します
        /// </summary>
        /// <param name="scmReadWork">scmReadWorkオブジェクト</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM新着データ表示管理情報を登録、更新します</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : 2015/08/28</br>
        public int UpdateScmTimeData(ScmTimeDataWork scmReadWork)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            SqlConnection sqlConnection = null;
            SqlTransaction sqlTransaction = null;
            try
            {
                if (scmReadWork == null) return status;

                // コネクション生成
                sqlConnection = this.CreateSqlConnection(true);

                // トランザクション開始
                sqlTransaction = this.CreateTransaction(ref sqlConnection);

                //write実行
                status = UpdateScmTimeDataProc(scmReadWork, ref sqlConnection, ref sqlTransaction);


                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // コミット
                    sqlTransaction.Commit();
                }
                else
                {
                    // ロールバック
                    if (sqlTransaction.Connection != null) sqlTransaction.Rollback();
                }
            }
            catch (Exception ex)
            {
                base.WriteErrorLog(ex, "IOWriteScmDB.UpdateScmTimeData(ScmTimeDataWork scmReadWork)");
                // ロールバック
                if (sqlTransaction != null && sqlTransaction.Connection != null) sqlTransaction.Rollback();
            }
            finally
            {
                if (sqlTransaction != null)
                {
                    sqlTransaction.Dispose();
                } 

                if (sqlConnection != null)
                {
                    sqlConnection.Close();
                    sqlConnection.Dispose();
                }
            }

            return status;
        }

        /// <summary>
        /// SCM新着データ表示管理情報を登録、更新します(外部からのSqlConnection + SqlTranactionを使用)
        /// </summary>
        /// <param name="scmReadWork">scmReadWorkオブジェクト</param>
        /// <param name="sqlConnection">sqlConnection</param>
        /// <param name="sqlTransaction">sqlTransaction</param>
        /// <returns>STATUS</returns>
        /// <br>Note       : SCM新着データ表示管理情報を登録、更新します(外部からのSqlConnection + SqlTranactionを使用)</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : 2015/08/28</br>
        private int UpdateScmTimeDataProc(ScmTimeDataWork scmReadWork, ref SqlConnection sqlConnection, ref SqlTransaction sqlTransaction)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            SqlDataReader myReader = null;
            SqlCommand sqlCommand = null;
            try
            {


                //Selectコマンドの生成
                sqlCommand = new SqlCommand("SELECT CREATEDATETIMERF,UPDATEDATETIMERF, FILEHEADERGUIDRF FROM SCMTIMEDATARF WHERE ENTERPRISECODERF=@FINDENTERPRISECODE AND SECTIONCODERF=@FINDSECTIONCODE AND CASHREGISTERNORF=@FINDCASHREGISTERNO", sqlConnection, sqlTransaction);

                //Prameterオブジェクトの作成
                SqlParameter findParaEnterpriseCode = sqlCommand.Parameters.Add("@FINDENTERPRISECODE", SqlDbType.NChar);
                SqlParameter findParaSectionCode = sqlCommand.Parameters.Add("@FINDSECTIONCODE", SqlDbType.NChar);
                SqlParameter findParaCashRegisterNo = sqlCommand.Parameters.Add("@FINDCASHREGISTERNO", SqlDbType.Int);

                //Parameterオブジェクトへ値設定
                findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(scmReadWork.EnterpriseCode);
                findParaSectionCode.Value = SqlDataMediator.SqlSetString(scmReadWork.SectionCode);
                findParaCashRegisterNo.Value = SqlDataMediator.SqlSetInt32(scmReadWork.CashRegisterNo);

                myReader = sqlCommand.ExecuteReader();
                if (myReader.Read())
                {
                    # region 更新時のSQL文生成
                    string sqlText = string.Empty;
                    sqlText += " UPDATE SCMTIMEDATARF  SET " + Environment.NewLine;
                    sqlText += "    CREATEDATETIMERF = @CREATEDATETIME " + Environment.NewLine;
                    sqlText += "  , UPDATEDATETIMERF = @UPDATEDATETIME " + Environment.NewLine;
                    sqlText += "  , ENTERPRISECODERF = @ENTERPRISECODE " + Environment.NewLine;
                    sqlText += "  , FILEHEADERGUIDRF = @FILEHEADERGUID " + Environment.NewLine;
                    sqlText += "  , UPDEMPLOYEECODERF = @UPDEMPLOYEECODE " + Environment.NewLine;
                    sqlText += "  , UPDASSEMBLYID1RF = @UPDASSEMBLYID1 " + Environment.NewLine;
                    sqlText += "  , UPDASSEMBLYID2RF = @UPDASSEMBLYID2 " + Environment.NewLine;
                    sqlText += "  , LOGICALDELETECODERF = @LOGICALDELETECODE " + Environment.NewLine;
                    sqlText += "  , SECTIONCODERF = @SECTIONCODE " + Environment.NewLine;
                    sqlText += "  , CASHREGISTERNORF=@CASHREGISTERNO  " + Environment.NewLine;
                    sqlText += "  , LASTGETDATERF=@LASTGETDATE " + Environment.NewLine;
                    sqlText += "  , LASTGETTIMERF=@LASTGETTIME " + Environment.NewLine;

                    sqlText += "  WHERE ENTERPRISECODERF = @FINDENTERPRISECODE " + Environment.NewLine;
                    sqlText += "         AND SECTIONCODERF = @FINDSECTIONCODE " + Environment.NewLine;
                    sqlText += "         AND CASHREGISTERNORF = @FINDCASHREGISTERNO " + Environment.NewLine;

                    sqlCommand.CommandText = sqlText;
                    # endregion

                    //KEYコマンドを再設定
                    findParaEnterpriseCode.Value = SqlDataMediator.SqlSetString(scmReadWork.EnterpriseCode);
                    findParaSectionCode.Value = SqlDataMediator.SqlSetString(scmReadWork.SectionCode);
                    findParaCashRegisterNo.Value = SqlDataMediator.SqlSetInt32(scmReadWork.CashRegisterNo);

                    scmReadWork.CreateDateTime = SqlDataMediator.SqlGetDateTimeFromTicks(myReader, myReader.GetOrdinal("CREATEDATETIMERF"));
                    scmReadWork.FileHeaderGuid = SqlDataMediator.SqlGetGuid(myReader, myReader.GetOrdinal("FILEHEADERGUIDRF"));

                    //更新ヘッダ情報を設定
                    object obj = (object)this;
                    IFileHeader flhd = (IFileHeader)scmReadWork;
                    FileHeader fileHeader = new FileHeader(obj);
                    fileHeader.SetUpdateHeader(ref flhd, obj);
                }
                else
                {

                    # region 新規作成時のSQL文を生成
                    string sqlText = string.Empty;
                    sqlText += " INSERT INTO SCMTIMEDATARF " + Environment.NewLine;
                    sqlText += "  (CREATEDATETIMERF " + Environment.NewLine;
                    sqlText += "         ,UPDATEDATETIMERF " + Environment.NewLine;
                    sqlText += "         ,ENTERPRISECODERF " + Environment.NewLine;
                    sqlText += "         ,FILEHEADERGUIDRF " + Environment.NewLine;
                    sqlText += "         ,UPDEMPLOYEECODERF " + Environment.NewLine;
                    sqlText += "         ,UPDASSEMBLYID1RF " + Environment.NewLine;
                    sqlText += "         ,UPDASSEMBLYID2RF " + Environment.NewLine;
                    sqlText += "         ,LOGICALDELETECODERF " + Environment.NewLine;
                    sqlText += "         ,SECTIONCODERF " + Environment.NewLine;
                    sqlText += "         ,CASHREGISTERNORF " + Environment.NewLine;
                    sqlText += "         ,LASTGETDATERF " + Environment.NewLine;
                    sqlText += "         ,LASTGETTIMERF " + Environment.NewLine;
                    sqlText += "  ) " + Environment.NewLine;
                    sqlText += "  VALUES " + Environment.NewLine;
                    sqlText += "  (@CREATEDATETIME " + Environment.NewLine;
                    sqlText += "         ,@UPDATEDATETIME " + Environment.NewLine;
                    sqlText += "         ,@ENTERPRISECODE " + Environment.NewLine;
                    sqlText += "         ,@FILEHEADERGUID " + Environment.NewLine;
                    sqlText += "         ,@UPDEMPLOYEECODE " + Environment.NewLine;
                    sqlText += "         ,@UPDASSEMBLYID1 " + Environment.NewLine;
                    sqlText += "         ,@UPDASSEMBLYID2 " + Environment.NewLine;
                    sqlText += "         ,@LOGICALDELETECODE " + Environment.NewLine;
                    sqlText += "         ,@SECTIONCODE " + Environment.NewLine;
                    sqlText += "         ,@CASHREGISTERNO " + Environment.NewLine;
                    sqlText += "         ,@LASTGETDATE " + Environment.NewLine;
                    sqlText += "         ,@LASTGETTIME " + Environment.NewLine;
                    sqlText += "  ) " + Environment.NewLine;

                    sqlCommand.CommandText = sqlText;
                    # endregion

                    //登録ヘッダ情報を設定
                    object obj = (object)this;
                    IFileHeader flhd = (IFileHeader)scmReadWork;
                    FileHeader fileHeader = new FileHeader(obj);
                    fileHeader.SetInsertHeader(ref flhd, obj);
                   
                }
                if (myReader.IsClosed == false) myReader.Close();

                #region Parameterオブジェクトの作成(更新用)
                SqlParameter paraCreateDateTime = sqlCommand.Parameters.Add("@CREATEDATETIME", SqlDbType.BigInt);  // 作成日時
                SqlParameter paraEnterpriseCode = sqlCommand.Parameters.Add("@ENTERPRISECODE", SqlDbType.NChar);  // 企業コード
                SqlParameter paraFileHeaderGuid = sqlCommand.Parameters.Add("@FILEHEADERGUID", SqlDbType.UniqueIdentifier);  // GUID
                SqlParameter paraUpdateDateTime = sqlCommand.Parameters.Add("@UPDATEDATETIME", SqlDbType.BigInt);  // 更新日時
                SqlParameter paraUpdEmployeeCode = sqlCommand.Parameters.Add("@UPDEMPLOYEECODE", SqlDbType.NChar);  // 更新従業員コード
                SqlParameter paraUpdAssemblyId1 = sqlCommand.Parameters.Add("@UPDASSEMBLYID1", SqlDbType.NVarChar);  // 更新アセンブリID1
                SqlParameter paraUpdAssemblyId2 = sqlCommand.Parameters.Add("@UPDASSEMBLYID2", SqlDbType.NVarChar);  // 更新アセンブリID2
                SqlParameter paraLogicalDeleteCode = sqlCommand.Parameters.Add("@LOGICALDELETECODE", SqlDbType.Int);  // 論理削除区分
                SqlParameter paraSectionCode = sqlCommand.Parameters.Add("@SECTIONCODE", SqlDbType.NChar);  // 拠点コード
                SqlParameter ParaCashRegisterNo = sqlCommand.Parameters.Add("@CASHREGISTERNO", SqlDbType.Int);  // 端末番号
                SqlParameter paraLastGetDate = sqlCommand.Parameters.Add("@LASTGETDATE", SqlDbType.Int);  // 最終取得日付
                SqlParameter paraLastGetTime = sqlCommand.Parameters.Add("@LASTGETTIME", SqlDbType.Int);  //最終取得時間
                #endregion

                #region Parameterオブジェクトへ値設定(更新用)
                paraCreateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(scmReadWork.CreateDateTime);  // 作成日時
                paraEnterpriseCode.Value = SqlDataMediator.SqlSetString(scmReadWork.EnterpriseCode);  // 企業コード
                paraFileHeaderGuid.Value = SqlDataMediator.SqlSetGuid(scmReadWork.FileHeaderGuid);  // GUID
                paraUpdateDateTime.Value = SqlDataMediator.SqlSetDateTimeFromTicks(scmReadWork.UpdateDateTime);  // 更新日時
                paraUpdEmployeeCode.Value = SqlDataMediator.SqlSetString(scmReadWork.UpdEmployeeCode);  // 更新従業員コード
                paraUpdAssemblyId1.Value = SqlDataMediator.SqlSetString(scmReadWork.UpdAssemblyId1);  // 更新アセンブリID1
                paraUpdAssemblyId2.Value = SqlDataMediator.SqlSetString(scmReadWork.UpdAssemblyId2);  // 更新アセンブリID2
                paraLogicalDeleteCode.Value = SqlDataMediator.SqlSetInt32(scmReadWork.LogicalDeleteCode);  // 論理削除区分
                paraSectionCode.Value = SqlDataMediator.SqlSetString(scmReadWork.SectionCode);  // 拠点コード
                ParaCashRegisterNo.Value = SqlDataMediator.SqlSetInt32(scmReadWork.CashRegisterNo);  // 端末番号
                paraLastGetDate.Value = SqlDataMediator.SqlSetDateTimeFromYYYYMMDD(scmReadWork.LastGetDate);  // 最終取得日付
                paraLastGetTime.Value = SqlDataMediator.SqlSetInt32(scmReadWork.LastGetTime);  // 最終取得時間

                #endregion

                sqlCommand.ExecuteNonQuery();

                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (SqlException ex)
            {
                //基底クラスに例外を渡して処理してもらう
                status = base.WriteSQLErrorLog(ex);
            }
            finally
            {
                if (myReader != null)
                {
                    if (myReader.IsClosed == false) myReader.Close();
                    myReader.Dispose();
                }

                if (sqlCommand != null)
                {
                    sqlCommand.Cancel();
                    sqlCommand.Dispose();
                }
            }

            return status;
        }
        #endregion 
        // ADD 2015/08/28 譚洪 Redmine#47284 SCM仕掛一覧№10722対応  ---------<<<<<<<<<<<<<<<<<<<<<<<<<
    }
}
