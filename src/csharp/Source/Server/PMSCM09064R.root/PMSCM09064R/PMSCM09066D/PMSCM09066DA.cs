using System;
using System.Collections;
using Broadleaf.Library.Data;
using Broadleaf.Library.Runtime.Serialization;

namespace Broadleaf.Application.Remoting.ParamData
{
    /// public class name:   SCMPriorStWork
    /// <summary>
    ///                      SCM優先設定ワーク
    /// </summary>
    /// <remarks>
    /// <br>note             :   SCM優先設定ワークヘッダファイル</br>
    /// <br>Programmer       :   自動生成</br>
    /// <br>Date             :   2009/4/13</br>
    /// <br>Genarated Date   :   2011/08/08  (CSharp File Generated Date)</br>
    /// <br>Update Note      :   2011/08/08  杉村</br>
    /// <br>                 :   ○項目変更</br>
    /// <br>                 :   優先設定コード６〜１０</br>
    /// <br>                 :   優先設定名称６〜１０</br>
    /// <br>                 :   ↓</br>
    /// <br>                 :   優先価格設定コード１〜５</br>
    /// <br>                 :   優先価格設定名称１〜５</br>
    /// </remarks>
    [Serializable]
    [Broadleaf.Library.Runtime.Serialization.CustomSerializationData]
    public class SCMPriorStWork : IFileHeader
    {
        /// <summary>作成日時</summary>
        /// <remarks>共通ファイルヘッダ（DateTime:精度は100ナノ秒）</remarks>
        private DateTime _createDateTime;

        /// <summary>更新日時</summary>
        /// <remarks>共通ファイルヘッダ（DateTime:精度は100ナノ秒）</remarks>
        private DateTime _updateDateTime;

        /// <summary>企業コード</summary>
        /// <remarks>共通ファイルヘッダ（国2桁+県2桁+業種2桁+ユーザーコード10桁）</remarks>
        private string _enterpriseCode = "";

        /// <summary>GUID</summary>
        /// <remarks>共通ファイルヘッダ</remarks>
        private Guid _fileHeaderGuid;

        /// <summary>更新従業員コード</summary>
        /// <remarks>共通ファイルヘッダ</remarks>
        private string _updEmployeeCode = "";

        /// <summary>更新アセンブリID1</summary>
        /// <remarks>共通ファイルヘッダ（UI側の更新アセンブリID+「:」+バージョン）</remarks>
        private string _updAssemblyId1 = "";

        /// <summary>更新アセンブリID2</summary>
        /// <remarks>共通ファイルヘッダ（Server側の更新アセンブリID+「:」+バージョン）</remarks>
        private string _updAssemblyId2 = "";

        /// <summary>論理削除区分</summary>
        /// <remarks>共通ファイルヘッダ(0:有効,1:論理削除,2:保留,3:完全削除)</remarks>
        private Int32 _logicalDeleteCode;

        /// <summary>拠点コード</summary>
        /// <remarks>00は全社</remarks>
        private string _sectionCode = "";

        /// <summary>優先設定コード１</summary>
        /// <remarks>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</remarks>
        private Int32 _prioritySettingCd1;

        /// <summary>優先設定名称１</summary>
        private string _prioritySettingNm1 = "";

        /// <summary>優先設定コード２</summary>
        /// <remarks>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</remarks>
        private Int32 _prioritySettingCd2;

        /// <summary>優先設定名称２</summary>
        private string _prioritySettingNm2 = "";

        /// <summary>優先設定コード３</summary>
        /// <remarks>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</remarks>
        private Int32 _prioritySettingCd3;

        /// <summary>優先設定名称３</summary>
        private string _prioritySettingNm3 = "";

        /// <summary>優先設定コード４</summary>
        /// <remarks>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</remarks>
        private Int32 _prioritySettingCd4;

        /// <summary>優先設定名称４</summary>
        private string _prioritySettingNm4 = "";

        /// <summary>優先設定コード５</summary>
        /// <remarks>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</remarks>
        private Int32 _prioritySettingCd5;

        /// <summary>優先設定名称５</summary>
        private string _prioritySettingNm5 = "";

        /// <summary>優先価格設定コード１</summary>
        /// <remarks>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</remarks>
        private Int32 _priorPriceSetCd1;

        /// <summary>優先価格設定名称１</summary>
        private string _priorPriceSetNm1 = "";

        /// <summary>優先価格設定コード２</summary>
        /// <remarks>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</remarks>
        private Int32 _priorPriceSetCd2;

        /// <summary>優先価格設定名称２</summary>
        private string _priorPriceSetNm2 = "";

        /// <summary>優先価格設定コード３</summary>
        /// <remarks>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</remarks>
        private Int32 _priorPriceSetCd3;

        /// <summary>優先価格設定名称３</summary>
        private string _priorPriceSetNm3 = "";

        /// <summary>優先価格設定コード４</summary>
        /// <remarks>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</remarks>
        private Int32 _priorPriceSetCd4;

        /// <summary>優先価格設定名称４</summary>
        private string _priorPriceSetNm4 = "";

        /// <summary>優先価格設定コード５</summary>
        /// <remarks>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</remarks>
        private Int32 _priorPriceSetCd5;

        /// <summary>優先価格設定名称５</summary>
        private string _priorPriceSetNm5 = "";

        /// <summary>優先適用区分</summary>
        /// <remarks>0:共通, 1:PCC, 2:PCCUOE</remarks>
        private Int32 _priorAppliDiv;

        /// <summary>得意先コード</summary>
        private Int32 _customerCode;

        /// <summary>選択時対象純優区分</summary>
        /// <remarks>0:全て, 1:純正</remarks>
        private Int32 _selTgtPureDiv;

        /// <summary>選択時対象在庫区分</summary>
        /// <remarks>0:全て, 1:在庫, 2:委託・優先倉庫, 3:委託</remarks>
        private Int32 _selTgtStckDiv;

        /// <summary>選択時対象キャンペーン区分</summary>
        /// <remarks>0:全て, 1:キャンペーン</remarks>
        private Int32 _selTgtCampDiv;

        /// <summary>選択時対象価格区分１</summary>
        /// <remarks>0:なし, 1:粗利率(高), 2:単価(高), 3:定価(高), 4:定価(低)</remarks>
        private Int32 _selTgtPricDiv1;

        /// <summary>選択時対象価格区分２</summary>
        /// <remarks>0:なし, 1:粗利率(高), 2:単価(高), 3:定価(高), 4:定価(低)</remarks>
        private Int32 _selTgtPricDiv2;

        /// <summary>選択時対象価格区分３</summary>
        /// <remarks>0:なし, 1:粗利率(高), 2:単価(高), 3:定価(高), 4:定価(低)</remarks>
        private Int32 _selTgtPricDiv3;

        /// <summary>非選択時対象純優区分</summary>
        /// <remarks>0:全て, 1:純正</remarks>
        private Int32 _unSelTgtPureDiv;

        /// <summary>非選択時対象在庫区分</summary>
        /// <remarks>0:全て, 1:在庫, 2:委託・優先倉庫, 3:委託</remarks>
        private Int32 _unSelTgtStckDiv;

        /// <summary>非選択時対象キャンペーン区分</summary>
        /// <remarks>0:全て, 1:キャンペーン</remarks>
        private Int32 _unSelTgtCampDiv;

        /// <summary>非選択時対象価格区分１</summary>
        /// <remarks>0:なし, 1:粗利率(高), 2:単価(高), 3:定価(高), 4:定価(低)</remarks>
        private Int32 _unSelTgtPricDiv1;

        /// <summary>非選択時対象価格区分２</summary>
        /// <remarks>0:なし, 1:粗利率(高), 2:単価(高), 3:定価(高), 4:定価(低)</remarks>
        private Int32 _unSelTgtPricDiv2;

        /// <summary>非選択時対象価格区分３</summary>
        /// <remarks>0:なし, 1:粗利率(高), 2:単価(高), 3:定価(高), 4:定価(低)</remarks>
        private Int32 _unSelTgtPricDiv3;

        /// public propaty name  :  CreateDateTime
        /// <summary>作成日時</summary>
        /// <value>共通ファイルヘッダ（DateTime:精度は100ナノ秒）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   作成日時</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public DateTime CreateDateTime
        {
            get { return _createDateTime; }
            set { _createDateTime = value; }
        }

        /// public propaty name  :  UpdateDateTime
        /// <summary>更新日時</summary>
        /// <value>共通ファイルヘッダ（DateTime:精度は100ナノ秒）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   更新日時</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public DateTime UpdateDateTime
        {
            get { return _updateDateTime; }
            set { _updateDateTime = value; }
        }

        /// public propaty name  :  EnterpriseCode
        /// <summary>企業コード</summary>
        /// <value>共通ファイルヘッダ（国2桁+県2桁+業種2桁+ユーザーコード10桁）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   企業コード</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string EnterpriseCode
        {
            get { return _enterpriseCode; }
            set { _enterpriseCode = value; }
        }

        /// public propaty name  :  FileHeaderGuid
        /// <summary>GUID</summary>
        /// <value>共通ファイルヘッダ</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   GUID</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Guid FileHeaderGuid
        {
            get { return _fileHeaderGuid; }
            set { _fileHeaderGuid = value; }
        }

        /// public propaty name  :  UpdEmployeeCode
        /// <summary>更新従業員コード</summary>
        /// <value>共通ファイルヘッダ</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   更新従業員コード</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string UpdEmployeeCode
        {
            get { return _updEmployeeCode; }
            set { _updEmployeeCode = value; }
        }

        /// public propaty name  :  UpdAssemblyId1
        /// <summary>更新アセンブリID1</summary>
        /// <value>共通ファイルヘッダ（UI側の更新アセンブリID+「:」+バージョン）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   更新アセンブリID1</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string UpdAssemblyId1
        {
            get { return _updAssemblyId1; }
            set { _updAssemblyId1 = value; }
        }

        /// public propaty name  :  UpdAssemblyId2
        /// <summary>更新アセンブリID2</summary>
        /// <value>共通ファイルヘッダ（Server側の更新アセンブリID+「:」+バージョン）</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   更新アセンブリID2</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string UpdAssemblyId2
        {
            get { return _updAssemblyId2; }
            set { _updAssemblyId2 = value; }
        }

        /// public propaty name  :  LogicalDeleteCode
        /// <summary>論理削除区分</summary>
        /// <value>共通ファイルヘッダ(0:有効,1:論理削除,2:保留,3:完全削除)</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   論理削除区分</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 LogicalDeleteCode
        {
            get { return _logicalDeleteCode; }
            set { _logicalDeleteCode = value; }
        }

        /// public propaty name  :  SectionCode
        /// <summary>拠点コード</summary>
        /// <value>00は全社</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   拠点コード</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string SectionCode
        {
            get { return _sectionCode; }
            set { _sectionCode = value; }
        }

        /// public propaty name  :  PrioritySettingCd1
        /// <summary>優先設定コード１</summary>
        /// <value>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先設定コード１</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 PrioritySettingCd1
        {
            get { return _prioritySettingCd1; }
            set { _prioritySettingCd1 = value; }
        }

        /// public propaty name  :  PrioritySettingNm1
        /// <summary>優先設定名称１</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先設定名称１</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string PrioritySettingNm1
        {
            get { return _prioritySettingNm1; }
            set { _prioritySettingNm1 = value; }
        }

        /// public propaty name  :  PrioritySettingCd2
        /// <summary>優先設定コード２</summary>
        /// <value>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先設定コード２</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 PrioritySettingCd2
        {
            get { return _prioritySettingCd2; }
            set { _prioritySettingCd2 = value; }
        }

        /// public propaty name  :  PrioritySettingNm2
        /// <summary>優先設定名称２</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先設定名称２</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string PrioritySettingNm2
        {
            get { return _prioritySettingNm2; }
            set { _prioritySettingNm2 = value; }
        }

        /// public propaty name  :  PrioritySettingCd3
        /// <summary>優先設定コード３</summary>
        /// <value>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先設定コード３</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 PrioritySettingCd3
        {
            get { return _prioritySettingCd3; }
            set { _prioritySettingCd3 = value; }
        }

        /// public propaty name  :  PrioritySettingNm3
        /// <summary>優先設定名称３</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先設定名称３</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string PrioritySettingNm3
        {
            get { return _prioritySettingNm3; }
            set { _prioritySettingNm3 = value; }
        }

        /// public propaty name  :  PrioritySettingCd4
        /// <summary>優先設定コード４</summary>
        /// <value>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先設定コード４</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 PrioritySettingCd4
        {
            get { return _prioritySettingCd4; }
            set { _prioritySettingCd4 = value; }
        }

        /// public propaty name  :  PrioritySettingNm4
        /// <summary>優先設定名称４</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先設定名称４</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string PrioritySettingNm4
        {
            get { return _prioritySettingNm4; }
            set { _prioritySettingNm4 = value; }
        }

        /// public propaty name  :  PrioritySettingCd5
        /// <summary>優先設定コード５</summary>
        /// <value>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先設定コード５</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 PrioritySettingCd5
        {
            get { return _prioritySettingCd5; }
            set { _prioritySettingCd5 = value; }
        }

        /// public propaty name  :  PrioritySettingNm5
        /// <summary>優先設定名称５</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先設定名称５</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string PrioritySettingNm5
        {
            get { return _prioritySettingNm5; }
            set { _prioritySettingNm5 = value; }
        }

        /// public propaty name  :  PriorPriceSetCd1
        /// <summary>優先価格設定コード１</summary>
        /// <value>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先価格設定コード１</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 PriorPriceSetCd1
        {
            get { return _priorPriceSetCd1; }
            set { _priorPriceSetCd1 = value; }
        }

        /// public propaty name  :  PriorPriceSetNm1
        /// <summary>優先価格設定名称１</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先価格設定名称１</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string PriorPriceSetNm1
        {
            get { return _priorPriceSetNm1; }
            set { _priorPriceSetNm1 = value; }
        }

        /// public propaty name  :  PriorPriceSetCd2
        /// <summary>優先価格設定コード２</summary>
        /// <value>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先価格設定コード２</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 PriorPriceSetCd2
        {
            get { return _priorPriceSetCd2; }
            set { _priorPriceSetCd2 = value; }
        }

        /// public propaty name  :  PriorPriceSetNm2
        /// <summary>優先価格設定名称２</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先価格設定名称２</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string PriorPriceSetNm2
        {
            get { return _priorPriceSetNm2; }
            set { _priorPriceSetNm2 = value; }
        }

        /// public propaty name  :  PriorPriceSetCd3
        /// <summary>優先価格設定コード３</summary>
        /// <value>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先価格設定コード３</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 PriorPriceSetCd3
        {
            get { return _priorPriceSetCd3; }
            set { _priorPriceSetCd3 = value; }
        }

        /// public propaty name  :  PriorPriceSetNm3
        /// <summary>優先価格設定名称３</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先価格設定名称３</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string PriorPriceSetNm3
        {
            get { return _priorPriceSetNm3; }
            set { _priorPriceSetNm3 = value; }
        }

        /// public propaty name  :  PriorPriceSetCd4
        /// <summary>優先価格設定コード４</summary>
        /// <value>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先価格設定コード４</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 PriorPriceSetCd4
        {
            get { return _priorPriceSetCd4; }
            set { _priorPriceSetCd4 = value; }
        }

        /// public propaty name  :  PriorPriceSetNm4
        /// <summary>優先価格設定名称４</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先価格設定名称４</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string PriorPriceSetNm4
        {
            get { return _priorPriceSetNm4; }
            set { _priorPriceSetNm4 = value; }
        }

        /// public propaty name  :  PriorPriceSetCd5
        /// <summary>優先価格設定コード５</summary>
        /// <value>0:なし1:粗利率,2:単価,3:定価(高),4:定価(低),5:キャンペーン,6:在庫,7:委託,8:優先倉庫,9:純正</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先価格設定コード５</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 PriorPriceSetCd5
        {
            get { return _priorPriceSetCd5; }
            set { _priorPriceSetCd5 = value; }
        }

        /// public propaty name  :  PriorPriceSetNm5
        /// <summary>優先価格設定名称５</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先価格設定名称５</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public string PriorPriceSetNm5
        {
            get { return _priorPriceSetNm5; }
            set { _priorPriceSetNm5 = value; }
        }

        /// public propaty name  :  PriorAppliDiv
        /// <summary>優先適用区分</summary>
        /// <value>0:共通, 1:PCC, 2:PCCUOE</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   優先適用区分</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 PriorAppliDiv
        {
            get { return _priorAppliDiv; }
            set { _priorAppliDiv = value; }
        }

        /// public propaty name  :  CustomerCode
        /// <summary>得意先コード</summary>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   得意先コード</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 CustomerCode
        {
            get { return _customerCode; }
            set { _customerCode = value; }
        }

        /// public propaty name  :  SelTgtPureDiv
        /// <summary>選択時対象純優区分</summary>
        /// <value>0:全て, 1:純正</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   選択時対象純優区分</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 SelTgtPureDiv
        {
            get { return _selTgtPureDiv; }
            set { _selTgtPureDiv = value; }
        }

        /// public propaty name  :  SelTgtStckDiv
        /// <summary>選択時対象在庫区分</summary>
        /// <value>0:全て, 1:在庫, 2:委託・優先倉庫, 3:委託</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   選択時対象在庫区分</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 SelTgtStckDiv
        {
            get { return _selTgtStckDiv; }
            set { _selTgtStckDiv = value; }
        }

        /// public propaty name  :  SelTgtCampDiv
        /// <summary>選択時対象キャンペーン区分</summary>
        /// <value>0:全て, 1:キャンペーン</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   選択時対象キャンペーン区分</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 SelTgtCampDiv
        {
            get { return _selTgtCampDiv; }
            set { _selTgtCampDiv = value; }
        }

        /// public propaty name  :  SelTgtPricDiv1
        /// <summary>選択時対象価格区分１</summary>
        /// <value>0:なし, 1:粗利率(高), 2:単価(高), 3:定価(高), 4:定価(低)</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   選択時対象価格区分１</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 SelTgtPricDiv1
        {
            get { return _selTgtPricDiv1; }
            set { _selTgtPricDiv1 = value; }
        }

        /// public propaty name  :  SelTgtPricDiv2
        /// <summary>選択時対象価格区分２</summary>
        /// <value>0:なし, 1:粗利率(高), 2:単価(高), 3:定価(高), 4:定価(低)</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   選択時対象価格区分２</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 SelTgtPricDiv2
        {
            get { return _selTgtPricDiv2; }
            set { _selTgtPricDiv2 = value; }
        }

        /// public propaty name  :  SelTgtPricDiv3
        /// <summary>選択時対象価格区分３</summary>
        /// <value>0:なし, 1:粗利率(高), 2:単価(高), 3:定価(高), 4:定価(低)</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   選択時対象価格区分３</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 SelTgtPricDiv3
        {
            get { return _selTgtPricDiv3; }
            set { _selTgtPricDiv3 = value; }
        }

        /// public propaty name  :  UnSelTgtPureDiv
        /// <summary>非選択時対象純優区分</summary>
        /// <value>0:全て, 1:純正</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   非選択時対象純優区分</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 UnSelTgtPureDiv
        {
            get { return _unSelTgtPureDiv; }
            set { _unSelTgtPureDiv = value; }
        }

        /// public propaty name  :  UnSelTgtStckDiv
        /// <summary>非選択時対象在庫区分</summary>
        /// <value>0:全て, 1:在庫, 2:委託・優先倉庫, 3:委託</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   非選択時対象在庫区分</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 UnSelTgtStckDiv
        {
            get { return _unSelTgtStckDiv; }
            set { _unSelTgtStckDiv = value; }
        }

        /// public propaty name  :  UnSelTgtCampDiv
        /// <summary>非選択時対象キャンペーン区分</summary>
        /// <value>0:全て, 1:キャンペーン</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   非選択時対象キャンペーン区分</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 UnSelTgtCampDiv
        {
            get { return _unSelTgtCampDiv; }
            set { _unSelTgtCampDiv = value; }
        }

        /// public propaty name  :  UnSelTgtPricDiv1
        /// <summary>非選択時対象価格区分１</summary>
        /// <value>0:なし, 1:粗利率(高), 2:単価(高), 3:定価(高), 4:定価(低)</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   非選択時対象価格区分１</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 UnSelTgtPricDiv1
        {
            get { return _unSelTgtPricDiv1; }
            set { _unSelTgtPricDiv1 = value; }
        }

        /// public propaty name  :  UnSelTgtPricDiv2
        /// <summary>非選択時対象価格区分２</summary>
        /// <value>0:なし, 1:粗利率(高), 2:単価(高), 3:定価(高), 4:定価(低)</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   非選択時対象価格区分２</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 UnSelTgtPricDiv2
        {
            get { return _unSelTgtPricDiv2; }
            set { _unSelTgtPricDiv2 = value; }
        }

        /// public propaty name  :  UnSelTgtPricDiv3
        /// <summary>非選択時対象価格区分３</summary>
        /// <value>0:なし, 1:粗利率(高), 2:単価(高), 3:定価(高), 4:定価(低)</value>
        /// ----------------------------------------------------------------------
        /// <remarks>
        /// <br>note             :   非選択時対象価格区分３</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public Int32 UnSelTgtPricDiv3
        {
            get { return _unSelTgtPricDiv3; }
            set { _unSelTgtPricDiv3 = value; }
        }



        /// <summary>
        /// SCM優先設定マスタメンテ抽出結果ワークワークコンストラクタ
        /// </summary>
        /// <returns>SCMPriorStWorkクラスのインスタンス</returns>
        /// <remarks>
        /// <br>Note　　　　　　 :   SCMPriorStWorkクラスの新しいインスタンスを生成します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public SCMPriorStWork()
        {
        }

    }

    /// <summary>
    ///  Ver8.10.1.0用のカスタムシライアライザです。
    /// </summary>
    /// <returns>SCMPriorStWorkクラスのインスタンス(object)</returns>
    /// <remarks>
    /// <br>Note　　　　　　 :   SCMPriorStWorkクラスのカスタムシリアライザを定義します</br>
    /// <br>Programer        :   自動生成</br>
    /// </remarks>
    public class SCMPriorStWork_SerializationSurrogate_For_V51010 : Broadleaf.Library.Runtime.Serialization.ICustomSerializationSurrogate
    {
        #region ICustomSerializationSurrogate メンバ

        /// <summary>
        ///  Ver8.10.1.0用のカスタムシリアライザです
        /// </summary>
        /// <remarks>
        /// <br>Note　　　　　　 :   SCMPriorStWorkクラスのカスタムシリアライザを定義します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public void Serialize(System.IO.BinaryWriter writer, object graph)
        {
            // TODO:  SCMPriorStWork_SerializationSurrogate_For_V51010.Serialize 実装を追加します。
            if (writer == null)
                throw new ArgumentNullException();

            if (graph != null && !(graph is SCMPriorStWork || graph is ArrayList || graph is SCMPriorStWork[]))
                throw new ArgumentException(string.Format("graphが{0}のインスタンスでありません", typeof(SCMPriorStWork).FullName));

            if (graph != null && graph is SCMPriorStWork)
            {
                Type t = graph.GetType();
                if (!CustomFormatterServices.NeedCustomSerialization(t))
                    throw new ArgumentException(string.Format("graphの型:{0}がカスタムシリアライズの対象でありません", t.FullName));
            }

            //SerializationTypeInfo
            Broadleaf.Library.Runtime.Serialization.TypeSerializationInfo serInfo = new Broadleaf.Library.Runtime.Serialization.TypeSerializationInfo(", Version=5.10.1.0, Culture=neutral, publicKeyToken=null", "Broadleaf.Application.Remoting.ParamData.SCMPriorStWork");

            //繰り返し数の判定を行います。この部分は適宜業務要件に応じて行ってください。
            int occurrence = 0;     //一般にゼロの場合もありえます
            if (graph is ArrayList)
            {
                serInfo.RetTypeInfo = 0;
                occurrence = ((ArrayList)graph).Count;
            }
            else if (graph is SCMPriorStWork[])
            {
                serInfo.RetTypeInfo = 2;
                occurrence = ((SCMPriorStWork[])graph).Length;
            }
            else if (graph is SCMPriorStWork)
            {
                serInfo.RetTypeInfo = 1;
                occurrence = 1;
            }

            serInfo.Occurrence = occurrence;		 //繰り返し数	

            //作成日時
            serInfo.MemberInfo.Add(typeof(Int64)); //CreateDateTime
            //更新日時
            serInfo.MemberInfo.Add(typeof(Int64)); //UpdateDateTime
            //企業コード
            serInfo.MemberInfo.Add(typeof(string)); //EnterpriseCode
            //GUID
            serInfo.MemberInfo.Add(typeof(byte[])); //FileHeaderGuid
            //更新従業員コード
            serInfo.MemberInfo.Add(typeof(string)); //UpdEmployeeCode
            //更新アセンブリID1
            serInfo.MemberInfo.Add(typeof(string)); //UpdAssemblyId1
            //更新アセンブリID2
            serInfo.MemberInfo.Add(typeof(string)); //UpdAssemblyId2
            //論理削除区分
            serInfo.MemberInfo.Add(typeof(Int32)); //LogicalDeleteCode
            //拠点コード
            serInfo.MemberInfo.Add(typeof(string)); //SectionCode
            //優先設定コード１
            serInfo.MemberInfo.Add(typeof(Int32)); //PrioritySettingCd1
            //優先設定名称１
            serInfo.MemberInfo.Add(typeof(string)); //PrioritySettingNm1
            //優先設定コード２
            serInfo.MemberInfo.Add(typeof(Int32)); //PrioritySettingCd2
            //優先設定名称２
            serInfo.MemberInfo.Add(typeof(string)); //PrioritySettingNm2
            //優先設定コード３
            serInfo.MemberInfo.Add(typeof(Int32)); //PrioritySettingCd3
            //優先設定名称３
            serInfo.MemberInfo.Add(typeof(string)); //PrioritySettingNm3
            //優先設定コード４
            serInfo.MemberInfo.Add(typeof(Int32)); //PrioritySettingCd4
            //優先設定名称４
            serInfo.MemberInfo.Add(typeof(string)); //PrioritySettingNm4
            //優先設定コード５
            serInfo.MemberInfo.Add(typeof(Int32)); //PrioritySettingCd5
            //優先設定名称５
            serInfo.MemberInfo.Add(typeof(string)); //PrioritySettingNm5
            //優先価格設定コード１
            serInfo.MemberInfo.Add(typeof(Int32)); //PriorPriceSetCd1
            //優先価格設定名称１
            serInfo.MemberInfo.Add(typeof(string)); //PriorPriceSetNm1
            //優先価格設定コード２
            serInfo.MemberInfo.Add(typeof(Int32)); //PriorPriceSetCd2
            //優先価格設定名称２
            serInfo.MemberInfo.Add(typeof(string)); //PriorPriceSetNm2
            //優先価格設定コード３
            serInfo.MemberInfo.Add(typeof(Int32)); //PriorPriceSetCd3
            //優先価格設定名称３
            serInfo.MemberInfo.Add(typeof(string)); //PriorPriceSetNm3
            //優先価格設定コード４
            serInfo.MemberInfo.Add(typeof(Int32)); //PriorPriceSetCd4
            //優先価格設定名称４
            serInfo.MemberInfo.Add(typeof(string)); //PriorPriceSetNm4
            //優先価格設定コード５
            serInfo.MemberInfo.Add(typeof(Int32)); //PriorPriceSetCd5
            //優先価格設定名称５
            serInfo.MemberInfo.Add(typeof(string)); //PriorPriceSetNm5
            //優先適用区分
            serInfo.MemberInfo.Add(typeof(Int32)); //PriorAppliDiv
            //得意先コード
            serInfo.MemberInfo.Add(typeof(Int32)); //CustomerCode
            //選択時対象純優区分
            serInfo.MemberInfo.Add(typeof(Int32)); //SelTgtPureDiv
            //選択時対象在庫区分
            serInfo.MemberInfo.Add(typeof(Int32)); //SelTgtStckDiv
            //選択時対象キャンペーン区分
            serInfo.MemberInfo.Add(typeof(Int32)); //SelTgtCampDiv
            //選択時対象価格区分１
            serInfo.MemberInfo.Add(typeof(Int32)); //SelTgtPricDiv1
            //選択時対象価格区分２
            serInfo.MemberInfo.Add(typeof(Int32)); //SelTgtPricDiv2
            //選択時対象価格区分３
            serInfo.MemberInfo.Add(typeof(Int32)); //SelTgtPricDiv3
            //非選択時対象純優区分
            serInfo.MemberInfo.Add(typeof(Int32)); //UnSelTgtPureDiv
            //非選択時対象在庫区分
            serInfo.MemberInfo.Add(typeof(Int32)); //UnSelTgtStckDiv
            //非選択時対象キャンペーン区分
            serInfo.MemberInfo.Add(typeof(Int32)); //UnSelTgtCampDiv
            //非選択時対象価格区分１
            serInfo.MemberInfo.Add(typeof(Int32)); //UnSelTgtPricDiv1
            //非選択時対象価格区分２
            serInfo.MemberInfo.Add(typeof(Int32)); //UnSelTgtPricDiv2
            //非選択時対象価格区分３
            serInfo.MemberInfo.Add(typeof(Int32)); //UnSelTgtPricDiv3



            serInfo.Serialize(writer, serInfo);
            if (graph is SCMPriorStWork)
            {
                SCMPriorStWork temp = (SCMPriorStWork)graph;

                SetSCMPriorStWork(writer, temp);
            }
            else
            {
                ArrayList lst = null;
                if (graph is SCMPriorStWork[])
                {
                    lst = new ArrayList();
                    lst.AddRange((SCMPriorStWork[])graph);
                }
                else
                {
                    lst = (ArrayList)graph;
                }

                foreach (SCMPriorStWork temp in lst)
                {
                    SetSCMPriorStWork(writer, temp);
                }

            }


        }


        /// <summary>
        /// SCMPriorStWorkメンバ数(publicプロパティ数)
        /// </summary>
        private const int currentMemberCount = 43;

        /// <summary>
        ///  SCMPriorStWorkインスタンス書き込み
        /// </summary>
        /// <remarks>
        /// <br>Note　　　　　　 :   SCMPriorStWorkのインスタンスを書き込み</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        private void SetSCMPriorStWork(System.IO.BinaryWriter writer, SCMPriorStWork temp)
        {
            //作成日時
            writer.Write((Int64)temp.CreateDateTime.Ticks);
            //更新日時
            writer.Write((Int64)temp.UpdateDateTime.Ticks);
            //企業コード
            writer.Write(temp.EnterpriseCode);
            //GUID
            byte[] fileHeaderGuidArray = temp.FileHeaderGuid.ToByteArray();
            writer.Write(fileHeaderGuidArray.Length);
            writer.Write(temp.FileHeaderGuid.ToByteArray());
            //更新従業員コード
            writer.Write(temp.UpdEmployeeCode);
            //更新アセンブリID1
            writer.Write(temp.UpdAssemblyId1);
            //更新アセンブリID2
            writer.Write(temp.UpdAssemblyId2);
            //論理削除区分
            writer.Write((Int32)temp.LogicalDeleteCode);
            //拠点コード
            writer.Write(temp.SectionCode);
            //優先設定コード１
            writer.Write((Int32)temp.PrioritySettingCd1);
            //優先設定名称１
            writer.Write(temp.PrioritySettingNm1);
            //優先設定コード２
            writer.Write((Int32)temp.PrioritySettingCd2);
            //優先設定名称２
            writer.Write(temp.PrioritySettingNm2);
            //優先設定コード３
            writer.Write((Int32)temp.PrioritySettingCd3);
            //優先設定名称３
            writer.Write(temp.PrioritySettingNm3);
            //優先設定コード４
            writer.Write((Int32)temp.PrioritySettingCd4);
            //優先設定名称４
            writer.Write(temp.PrioritySettingNm4);
            //優先設定コード５
            writer.Write((Int32)temp.PrioritySettingCd5);
            //優先設定名称５
            writer.Write(temp.PrioritySettingNm5);
            //優先価格設定コード１
            writer.Write((Int32)temp.PriorPriceSetCd1);
            //優先価格設定名称１
            writer.Write(temp.PriorPriceSetNm1);
            //優先価格設定コード２
            writer.Write((Int32)temp.PriorPriceSetCd2);
            //優先価格設定名称２
            writer.Write(temp.PriorPriceSetNm2);
            //優先価格設定コード３
            writer.Write((Int32)temp.PriorPriceSetCd3);
            //優先価格設定名称３
            writer.Write(temp.PriorPriceSetNm3);
            //優先価格設定コード４
            writer.Write((Int32)temp.PriorPriceSetCd4);
            //優先価格設定名称４
            writer.Write(temp.PriorPriceSetNm4);
            //優先価格設定コード５
            writer.Write((Int32)temp.PriorPriceSetCd5);
            //優先価格設定名称５
            writer.Write(temp.PriorPriceSetNm5);
            //優先適用区分
            writer.Write((Int32)temp.PriorAppliDiv);
            //得意先コード
            writer.Write((Int32)temp.CustomerCode);
            //選択時対象純優区分
            writer.Write((Int32)temp.SelTgtPureDiv);
            //選択時対象在庫区分
            writer.Write((Int32)temp.SelTgtStckDiv);
            //選択時対象キャンペーン区分
            writer.Write((Int32)temp.SelTgtCampDiv);
            //選択時対象価格区分１
            writer.Write((Int32)temp.SelTgtPricDiv1);
            //選択時対象価格区分２
            writer.Write((Int32)temp.SelTgtPricDiv2);
            //選択時対象価格区分３
            writer.Write((Int32)temp.SelTgtPricDiv3);
            //非選択時対象純優区分
            writer.Write((Int32)temp.UnSelTgtPureDiv);
            //非選択時対象在庫区分
            writer.Write((Int32)temp.UnSelTgtStckDiv);
            //非選択時対象キャンペーン区分
            writer.Write((Int32)temp.UnSelTgtCampDiv);
            //非選択時対象価格区分１
            writer.Write((Int32)temp.UnSelTgtPricDiv1);
            //非選択時対象価格区分２
            writer.Write((Int32)temp.UnSelTgtPricDiv2);
            //非選択時対象価格区分３
            writer.Write((Int32)temp.UnSelTgtPricDiv3);


        }

        /// <summary>
        ///  SCMPriorStWorkインスタンス取得
        /// </summary>
        /// <returns>SCMPriorStWorkクラスのインスタンス</returns>
        /// <remarks>
        /// <br>Note　　　　　　 :   SCMPriorStWorkのインスタンスを取得します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        private SCMPriorStWork GetSCMPriorStWork(System.IO.BinaryReader reader, Broadleaf.Library.Runtime.Serialization.TypeSerializationInfo serInfo)
        {
            // V5.1.0.0なので不要ですが、V5.1.0.1以降では
            // serInfo.MemberInfo.Count < currentMemberCount
            // のケースについての配慮が必要になります。

            SCMPriorStWork temp = new SCMPriorStWork();

            //作成日時
            temp.CreateDateTime = new DateTime(reader.ReadInt64());
            //更新日時
            temp.UpdateDateTime = new DateTime(reader.ReadInt64());
            //企業コード
            temp.EnterpriseCode = reader.ReadString();
            //GUID
            int lenOfFileHeaderGuidArray = reader.ReadInt32();
            byte[] fileHeaderGuidArray = reader.ReadBytes(lenOfFileHeaderGuidArray);
            temp.FileHeaderGuid = new Guid(fileHeaderGuidArray);
            //更新従業員コード
            temp.UpdEmployeeCode = reader.ReadString();
            //更新アセンブリID1
            temp.UpdAssemblyId1 = reader.ReadString();
            //更新アセンブリID2
            temp.UpdAssemblyId2 = reader.ReadString();
            //論理削除区分
            temp.LogicalDeleteCode = reader.ReadInt32();
            //拠点コード
            temp.SectionCode = reader.ReadString();
            //優先設定コード１
            temp.PrioritySettingCd1 = reader.ReadInt32();
            //優先設定名称１
            temp.PrioritySettingNm1 = reader.ReadString();
            //優先設定コード２
            temp.PrioritySettingCd2 = reader.ReadInt32();
            //優先設定名称２
            temp.PrioritySettingNm2 = reader.ReadString();
            //優先設定コード３
            temp.PrioritySettingCd3 = reader.ReadInt32();
            //優先設定名称３
            temp.PrioritySettingNm3 = reader.ReadString();
            //優先設定コード４
            temp.PrioritySettingCd4 = reader.ReadInt32();
            //優先設定名称４
            temp.PrioritySettingNm4 = reader.ReadString();
            //優先設定コード５
            temp.PrioritySettingCd5 = reader.ReadInt32();
            //優先設定名称５
            temp.PrioritySettingNm5 = reader.ReadString();
            //優先価格設定コード１
            temp.PriorPriceSetCd1 = reader.ReadInt32();
            //優先価格設定名称１
            temp.PriorPriceSetNm1 = reader.ReadString();
            //優先価格設定コード２
            temp.PriorPriceSetCd2 = reader.ReadInt32();
            //優先価格設定名称２
            temp.PriorPriceSetNm2 = reader.ReadString();
            //優先価格設定コード３
            temp.PriorPriceSetCd3 = reader.ReadInt32();
            //優先価格設定名称３
            temp.PriorPriceSetNm3 = reader.ReadString();
            //優先価格設定コード４
            temp.PriorPriceSetCd4 = reader.ReadInt32();
            //優先価格設定名称４
            temp.PriorPriceSetNm4 = reader.ReadString();
            //優先価格設定コード５
            temp.PriorPriceSetCd5 = reader.ReadInt32();
            //優先価格設定名称５
            temp.PriorPriceSetNm5 = reader.ReadString();
            //優先適用区分
            temp.PriorAppliDiv = reader.ReadInt32();
            //得意先コード
            temp.CustomerCode = reader.ReadInt32();
            //選択時対象純優区分
            temp.SelTgtPureDiv = reader.ReadInt32();
            //選択時対象在庫区分
            temp.SelTgtStckDiv = reader.ReadInt32();
            //選択時対象キャンペーン区分
            temp.SelTgtCampDiv = reader.ReadInt32();
            //選択時対象価格区分１
            temp.SelTgtPricDiv1 = reader.ReadInt32();
            //選択時対象価格区分２
            temp.SelTgtPricDiv2 = reader.ReadInt32();
            //選択時対象価格区分３
            temp.SelTgtPricDiv3 = reader.ReadInt32();
            //非選択時対象純優区分
            temp.UnSelTgtPureDiv = reader.ReadInt32();
            //非選択時対象在庫区分
            temp.UnSelTgtStckDiv = reader.ReadInt32();
            //非選択時対象キャンペーン区分
            temp.UnSelTgtCampDiv = reader.ReadInt32();
            //非選択時対象価格区分１
            temp.UnSelTgtPricDiv1 = reader.ReadInt32();
            //非選択時対象価格区分２
            temp.UnSelTgtPricDiv2 = reader.ReadInt32();
            //非選択時対象価格区分３
            temp.UnSelTgtPricDiv3 = reader.ReadInt32();



            //以下は読み飛ばしです。このバージョンが想定する EmployeeWork型以降のバージョンの
            //データをデシリアライズする場合、シリアライズしたフォーマッタが記述した
            //型情報にしたがって、ストリームから情報を読み出します...といっても
            //読み出して捨てることになります。
            for (int k = currentMemberCount; k < serInfo.MemberInfo.Count; ++k)
            {
                //byte[],char[]をデシリアライズする直前に、そのlengthが
                //デシリアライズされているケースがある、byte[],char[]の
                //デシリアライズにはlengthが必要なのでint型のデータをデ
                //シリアライズした場合は、この値をこの変数に退避します。
                int optCount = 0;
                object oMemberType = serInfo.MemberInfo[k];
                if (oMemberType is Type)
                {
                    Type t = (Type)oMemberType;
                    object oData = TypeDeserializer.DeserializePrimitiveType(reader, t, optCount);
                    if (t.Equals(typeof(int)))
                    {
                        optCount = Convert.ToInt32(oData);
                    }
                    else
                    {
                        optCount = 0;
                    }
                }
                else if (oMemberType is string)
                {
                    Broadleaf.Library.Runtime.Serialization.ICustomSerializationSurrogate formatter = CustomFormatterServices.GetSurrogate((string)oMemberType);
                    object userData = formatter.Deserialize(reader);  //読み飛ばし
                }
            }
            return temp;
        }

        /// <summary>
        ///  Ver8.10.1.0用のカスタムデシリアライザです
        /// </summary>
        /// <returns>SCMPriorStWorkクラスのインスタンス(object)</returns>
        /// <remarks>
        /// <br>Note　　　　　　 :   SCMPriorStWorkクラスのカスタムデシリアライザを定義します</br>
        /// <br>Programer        :   自動生成</br>
        /// </remarks>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            object retValue = null;
            Broadleaf.Library.Runtime.Serialization.TypeSerializationInfo serInfo = TypeSerializationInfo.DeserializedObject(reader);
            ArrayList lst = new ArrayList();
            for (int cnt = 0; cnt < serInfo.Occurrence; ++cnt)
            {
                SCMPriorStWork temp = GetSCMPriorStWork(reader, serInfo);
                lst.Add(temp);
            }
            switch (serInfo.RetTypeInfo)
            {
                case 0:
                    retValue = lst;
                    break;
                case 1:
                    retValue = lst[0];
                    break;
                case 2:
                    retValue = (SCMPriorStWork[])lst.ToArray(typeof(SCMPriorStWork));
                    break;
            }
            return retValue;
        }

        #endregion
    }
}