classDiagram
    %% コードレビューシステム クラス図 v2.1.0

    class CodexReviewSeverity {
        %% メインシステムクラス
        -VERSION: str = "2.1.0"
        -MAX_FILE_SIZE_MB: int = 4
        -BATCH_SIZE: int = 500
        +main(args: List~str~): void
        +parse_arguments(): ArgumentParser
        +handle_index_command(): void
        +handle_advise_command(): void
        +get_total_indexed_count(): int
    }

    class IndexManager {
        %% インデックス管理クラス
        -index_file: Path = ".advice_index.pickle"
        -meta_file: Path = ".advice_index.meta.json"
        -max_file_size_mb: float = 4
        -profile_output: Optional~Path~
        +create_index(path: str, profile: bool): Dict
        +load_index(): List~Document~
        +save_index(documents: List): void
        +save_metadata(stats: Dict): void
        -check_file_size(path: Path): bool
        -profile_performance(stats: Dict): void
    }

    class EncodingDetector {
        %% エンコーディング検出クラス（v2.1改善）
        -SUPPORTED_ENCODINGS: List~str~ = ["utf-8", "cp932", "shift-jis", "latin-1"]
        +detect_encoding(file_path: Path): str
        -try_decode_utf8(data: bytes): Optional~str~
        -try_decode_cp932(data: bytes): Optional~str~
        -try_decode_sjis(data: bytes): Optional~str~
        -try_decode_latin1(data: bytes): Optional~str~
    }

    class Document {
        %% ドキュメントモデル
        <<dataclass>>
        +file_path: str
        +content: str
        +encoding: str
        +size_bytes: int
        +language: str
        +indexed_at: datetime
    }

    class DangerAnalyzer {
        %% 危険度分析クラス（旧RuleAnalyzer）
        -PROBLEM_SCORES: Dict~str, int~
        +analyze_all_files(documents: List, use_all: bool): List~DangerResult~
        +calculate_severity_score(problems: List): int
        -detect_n_plus_one(text: str): bool
        -detect_select_star(text: str): bool
        -detect_float_money(text: str): bool
        -detect_xss(text: str): bool
        -detect_dialog_overuse(text: str): bool
    }

    class DangerResult {
        %% 危険度分析結果クラス
        <<dataclass>>
        +file_path: str
        +problems: List~str~
        +severity_score: int
        +language: str
        +category: str  # "緊急", "高", "中", "低"
    }

    class OverviewReportGenerator {
        %% 概要レポート生成クラス
        +input_file: Path = "src_complete_danger_analysis.md"
        +output_file: Path = "reports/AI分析.md"
        +generate(): void
        +parse_danger_analysis(): List~DangerResult~
        +categorize_by_priority(): Dict
        +write_overview_report(data: Dict): void
    }

    class DetailedAnalyzer {
        %% 詳細分析クラス
        -batch_size: int = 500
        -batch_num: int
        +analyze_batch(batch_num: int): void
        +read_source_file(path: str): str
        +analyze_problems(file_info: Dict): str
        +generate_improvements(problems: List): str
        +analyze_full_source(source: str): str
        +write_batch_report(analyses: List): void
    }

    class ReportMerger {
        %% レポート統合クラス（v2.1で絵文字削除）
        +batch_files: List~Path~
        +output_file: Path = "reports/AI分析_詳細_改善版_完全版.md"
        +merge_reports(): void
        +extract_content(batch_file: Path): str
        +create_header(): str
        +create_footer(stats: Dict): str
        -remove_emojis(text: str): str  # v2.1追加
    }

    class BatchController {
        %% バッチ処理制御クラス
        +auto_detect_files: bool
        +run_all_phases(): void
        +execute_index_phase(): int
        +execute_danger_analysis(file_count: int): void
        +execute_overview_generation(): void
        +execute_batch_analysis(): void
        +execute_report_merge(): void
    }

    class LargeFileLogger {
        %% 大容量ファイルログクラス
        +log_file: Path = "reports/large_files_over_limit.log"
        +log_large_file(path: Path, size: int): void
        +get_large_files(): List~Dict~
    }

    %% 関連
    CodexReviewSeverity --> IndexManager : uses
    CodexReviewSeverity --> DangerAnalyzer : uses
    CodexReviewSeverity --> BatchController : delegates

    BatchController --> IndexManager : controls
    BatchController --> DangerAnalyzer : controls
    BatchController --> OverviewReportGenerator : controls
    BatchController --> DetailedAnalyzer : controls
    BatchController --> ReportMerger : controls

    IndexManager --> EncodingDetector : uses
    IndexManager --> Document : creates
    IndexManager --> LargeFileLogger : uses

    DangerAnalyzer --> DangerResult : creates

    OverviewReportGenerator --> DangerResult : processes

    DetailedAnalyzer --> DangerResult : reads

    ReportMerger --> DetailedAnalyzer : merges output

    %% スタイル定義
    class CodexReviewSeverity {
        <<Main System>>
    }

    class BatchController {
        <<Controller>>
    }

    class IndexManager,EncodingDetector {
        <<Data Processing>>
    }

    class DangerAnalyzer,DetailedAnalyzer {
        <<Analysis Engine>>
    }

    class OverviewReportGenerator,ReportMerger,LargeFileLogger {
        <<Output Handler>>
    }

    class Document,DangerResult {
        <<Data Model>>
    }