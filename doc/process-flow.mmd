flowchart TD
    %% コードレビュー処理フロー図 v4.0.0 - 自動適用対応版

    Start([開始]) --> ENV_CHECK[環境設定確認<br/>.env: OPENAI_MODEL/ANTHROPIC_API_KEY]
    ENV_CHECK --> PROVIDER_ROUTE{AI Provider選択}

    PROVIDER_ROUTE -->|Anthropic| CLAUDE_API[Claude API<br/>Sonnet 4.5/Opus 4.1]
    PROVIDER_ROUTE -->|OpenAI| GPT_API[OpenAI API<br/>GPT-4o/GPT-5]
    PROVIDER_ROUTE -->|Auto| AUTO_FALLBACK[Anthropic優先<br/>→ OpenAI Fallback]

    CLAUDE_API --> INPUT{実行方法}
    GPT_API --> INPUT
    AUTO_FALLBACK --> INPUT

    INPUT -->|バッチファイル| BATCH[run_complete_full_analysis.bat]
    INPUT -->|コマンドライン| CMD{コマンド判定}

    BATCH --> AUTO_DETECT[ファイル数自動検出]
    AUTO_DETECT --> INDEX_START

    CMD -->|index| INDEX_START[インデックス作成開始]
    CMD -->|advise --all| REVIEW_ALL[全ファイル分析]
    CMD -->|advise --complete-all| REVIEW_COMPLETE[完全レポート生成]
    CMD -->|advise --topk N| REVIEW_TOPK[上位N件分析]

    %% インデックス処理フロー
    INDEX_START --> SCAN[ファイルスキャン<br/>6,089+ファイル]
    SCAN --> SIZE_CHECK{ファイルサイズ<br/>チェック}
    SIZE_CHECK -->|4MB以下| LANG_CHECK{言語チェック}
    SIZE_CHECK -->|4MB超| LOG_LARGE[large_files_over_limit.log<br/>に記録]
    LOG_LARGE --> NEXT_FILE

    LANG_CHECK -->|対象言語| DETECT_ENCODING[エンコーディング検出<br/>chardet統合]
    LANG_CHECK -->|除外言語| NEXT_FILE[次のファイル]

    DETECT_ENCODING --> CHECK_BOM{BOM検出}
    CHECK_BOM -->|UTF-8 BOM| READ_FILE[ファイル読み込み]
    CHECK_BOM -->|UTF-16| READ_FILE
    CHECK_BOM -->|なし| TRY_CHARDET{chardet<br/>インストール済み?}

    TRY_CHARDET -->|はい| AUTO_DETECT_ENC[自動検出<br/>confidence>0.7]
    TRY_CHARDET -->|いいえ| TRY_UTF8{UTF-8?}

    AUTO_DETECT_ENC -->|成功| READ_FILE
    AUTO_DETECT_ENC -->|失敗| TRY_UTF8

    TRY_UTF8 -->|成功| READ_FILE
    TRY_UTF8 -->|失敗| TRY_CP932{CP932?}
    TRY_CP932 -->|成功| READ_FILE
    TRY_CP932 -->|失敗| TRY_SJIS{Shift-JIS?}
    TRY_SJIS -->|成功| READ_FILE
    TRY_SJIS -->|失敗| TRY_LATIN1{Latin-1?}
    TRY_LATIN1 -->|成功| READ_FILE
    TRY_LATIN1 -->|失敗| SKIP_FILE[ファイルスキップ]

    READ_FILE --> SAVE_INDEX[.advice_index.jsonl<br/>保存]
    SKIP_FILE --> NEXT_FILE
    SAVE_INDEX --> NEXT_FILE

    NEXT_FILE --> MORE_FILES{残ファイル<br/>あり?}
    MORE_FILES -->|はい| SCAN
    MORE_FILES -->|いいえ| INDEX_COMPLETE[インデックス完了]

    %% 危険度分析フロー
    INDEX_COMPLETE --> DANGER_ANALYSIS[危険度分析開始]
    REVIEW_ALL --> DANGER_ANALYSIS
    REVIEW_COMPLETE --> DANGER_ANALYSIS
    REVIEW_TOPK --> DANGER_ANALYSIS

    DANGER_ANALYSIS --> LOAD_DATA[インデックス読み込み]
    LOAD_DATA --> APPLY_RULES[ルール適用<br/>全6,089+ファイル]

    APPLY_RULES --> CHECK_PROBLEMS{問題検出}
    CHECK_PROBLEMS --> CALC_SCORE[危険度スコア計算]

    CALC_SCORE --> CATEGORIZE[カテゴリ分類]
    CATEGORIZE --> CRITICAL[緊急: スコア15以上]
    CATEGORIZE --> HIGH[高: スコア10-14]
    CATEGORIZE --> MEDIUM[中: スコア5-9]
    CATEGORIZE --> LOW[低: スコア1-4]

    CRITICAL --> PARALLEL_PROCESS[並列AI分析<br/>extract_and_batch_parallel_enhanced.py]
    HIGH --> PARALLEL_PROCESS
    MEDIUM --> PARALLEL_PROCESS
    LOW --> PARALLEL_PROCESS

    %% 並列処理フロー（v3.1+）
    PARALLEL_PROCESS --> WORKER_POOL[ワーカープール<br/>10 workers]
    WORKER_POOL --> CACHE_CHECK{MD5キャッシュ<br/>存在?}
    CACHE_CHECK -->|はい| USE_CACHE[キャッシュ使用]
    CACHE_CHECK -->|いいえ| AI_CALL[AI API呼び出し]

    AI_CALL --> CACHE_SAVE[.cache/analysis/<br/>MD5.json保存]
    USE_CACHE --> GENERATE_REPORT
    CACHE_SAVE --> GENERATE_REPORT[レポート生成]

    GENERATE_REPORT --> COMPLETE_REPORT[完全レポート<br/>complete_analysis.md<br/>UTF-8 BOMなし]

    %% v4.0 新機能: 自動適用フロー
    COMPLETE_REPORT --> APPLY_DECISION{自動適用?}
    APPLY_DECISION -->|はい| APPLY_START[apply_improvements_from_report.py]
    APPLY_DECISION -->|いいえ| End

    APPLY_START --> PARSE_REPORT[レポート解析<br/>BOM/chardet/fallback]
    PARSE_REPORT --> EXTRACT_ENTRIES[改善エントリ抽出<br/>正規表現パターン]

    EXTRACT_ENTRIES --> FOREACH_ENTRY{エントリ処理}
    FOREACH_ENTRY --> VALIDATE_PATH[パス検証<br/>ホワイトリスト+lstat]

    VALIDATE_PATH -->|安全| CHECK_CODE[コード検証<br/>Unicode制御文字/NULL/サイズ]
    VALIDATE_PATH -->|危険| SKIP_ENTRY[エントリスキップ]

    CHECK_CODE -->|安全| CREATE_BACKUP[バックアップ作成<br/>タイムスタンプ+メタデータJSON]
    CHECK_CODE -->|不正| SKIP_ENTRY

    CREATE_BACKUP --> ACQUIRE_LOCK[ファイルロック取得<br/>msvcrt/fcntl]
    ACQUIRE_LOCK --> ATOMIC_WRITE[アトミック書き込み<br/>tempfile+fsync+rename]

    ATOMIC_WRITE --> RELEASE_LOCK[ロック解放]
    RELEASE_LOCK --> LOG_SUCCESS[.apply_log.jsonl<br/>記録]

    LOG_SUCCESS --> MORE_ENTRIES{残エントリ<br/>あり?}
    SKIP_ENTRY --> MORE_ENTRIES

    MORE_ENTRIES -->|はい| FOREACH_ENTRY
    MORE_ENTRIES -->|いいえ| APPLY_COMPLETE[適用完了]

    APPLY_COMPLETE --> ROLLBACK_OPTION{ロールバック<br/>必要?}
    ROLLBACK_OPTION -->|はい| ROLLBACK[メタデータベース復元]
    ROLLBACK_OPTION -->|いいえ| End

    ROLLBACK --> End([完了])

    %% スタイル定義
    classDef startEnd fill:#4caf50,stroke:#2e7d32,stroke-width:3px,color:#fff
    classDef process fill:#2196f3,stroke:#1565c0,stroke-width:2px,color:#fff
    classDef decision fill:#ff9800,stroke:#e65100,stroke-width:2px,color:#fff
    classDef batch fill:#9c27b0,stroke:#6a1b9a,stroke-width:2px,color:#fff
    classDef output fill:#00bcd4,stroke:#00838f,stroke-width:2px,color:#fff
    classDef danger fill:#f44336,stroke:#c62828,stroke-width:2px,color:#fff
    classDef v4new fill:#9c27b0,stroke:#4a148c,stroke-width:3px,color:#fff

    class Start,End startEnd
    class INDEX_START,SCAN,DETECT_ENCODING,READ_FILE,SAVE_INDEX,LOAD_DATA,APPLY_RULES,CALC_SCORE,PARALLEL_PROCESS,WORKER_POOL,AI_CALL,CACHE_SAVE,GENERATE_REPORT,PARSE_REPORT,EXTRACT_ENTRIES,VALIDATE_PATH,CHECK_CODE,CREATE_BACKUP,ACQUIRE_LOCK,ATOMIC_WRITE,RELEASE_LOCK,LOG_SUCCESS process
    class INPUT,CMD,SIZE_CHECK,LANG_CHECK,CHECK_BOM,TRY_CHARDET,TRY_UTF8,TRY_CP932,TRY_SJIS,TRY_LATIN1,MORE_FILES,CHECK_PROBLEMS,CACHE_CHECK,APPLY_DECISION,FOREACH_ENTRY,MORE_ENTRIES,ROLLBACK_OPTION decision
    class BATCH,AUTO_DETECT,PROVIDER_ROUTE batch
    class COMPLETE_REPORT,LOG_LARGE,USE_CACHE,SKIP_ENTRY,APPLY_COMPLETE,ROLLBACK output
    class CRITICAL,HIGH,MEDIUM,LOW danger
    class APPLY_START,REVIEW_COMPLETE,AUTO_DETECT_ENC v4new
