name: Code Review (v3.5.0)

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:  # 手動実行も可能

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
    - name: Checkout code
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
      with:
        fetch-depth: 2  # PR差分用に最小限の履歴のみ取得

    - name: Set up Python 3.11
      uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d  # v5.1.0
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Prepare working directories
      run: |
        mkdir -p reports
        echo "✅ Working directories created"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      continue-on-error: false

    - name: Verify environment
      run: |
        echo "🔍 Environment verification..."
        python --version

        # Verify core packages
        python -c "
try:
    import sklearn, joblib, chardet
    print('✅ Core packages: scikit-learn, joblib, chardet')
except ImportError as e:
    print(f'❌ Missing core package: {e}')
    exit(1)

# Check AI providers (non-fatal)
try:
    import openai
    print('✅ OpenAI SDK available')
except ImportError:
    print('⚠️  OpenAI SDK not available')

try:
    import anthropic
    print('✅ Anthropic SDK available')
except ImportError:
    print('⚠️  Anthropic SDK not available')
"

        ls -lh codex_review_severity.py
        echo "✅ Environment ready"

    - name: Validate API configuration
      id: validate_api
      run: |
        API_CONFIGURED=false

        # Check if at least one API key is configured
        if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
          echo "✅ OpenAI API key configured"
          API_CONFIGURED=true
        fi

        if [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
          echo "✅ Anthropic API key configured"
          API_CONFIGURED=true
        fi

        if [ "$API_CONFIGURED" = "false" ]; then
          echo "⚠️  WARNING: No AI provider API key configured"
          echo "Please set OPENAI_API_KEY or ANTHROPIC_API_KEY in repository secrets"
          echo "Falling back to rules-based analysis only"
          echo "ai_mode=rules" >> $GITHUB_OUTPUT
        else
          echo "ai_mode=ai" >> $GITHUB_OUTPUT
        fi

    - name: Index repository
      run: |
        echo "🔍 Indexing repository files..."
        python codex_review_severity.py index . \
          --exclude-langs delphi \
          --max-file-mb 4 \
          --worker-count 4

        # Validate index was created
        if [ ! -f .advice_index.jsonl ] || [ ! -s .advice_index.jsonl ]; then
          echo "❌ Error: Index is empty or missing"
          exit 1
        fi

        echo "✅ Indexing completed"
        ls -lh .advice_index.jsonl

    - name: Vectorize index (for semantic search)
      run: |
        echo "📊 Building TF-IDF vectors for semantic search..."
        python codex_review_severity.py vectorize || echo "⚠️  Vectorization skipped"
      continue-on-error: true

    - name: Run code review (high priority files)
      run: |
        START_TIME=$(date +%s)
        echo "🤖 Running code review on high-priority files..."

        # Try AI mode first if configured, fall back to rules
        if [ "${{ steps.validate_api.outputs.ai_mode }}" = "ai" ]; then
          echo "Using AI-powered review mode"
          if ! python codex_review_severity.py advise \
              --mode ai \
              --topk 200 \
              --out reports/priority_review.md; then
            echo "⚠️  AI review failed, falling back to rules-based analysis"
            python codex_review_severity.py advise \
              --mode rules \
              --topk 200 \
              --out reports/priority_review.md
          fi
        else
          echo "Using rules-based review mode"
          python codex_review_severity.py advise \
            --mode rules \
            --topk 200 \
            --out reports/priority_review.md
        fi

        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "⏱️  Review completed in ${DURATION}s"
      env:
        PYTHONUNBUFFERED: 1
        AI_PROVIDER: ${{ secrets.AI_PROVIDER || 'auto' }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENAI_MODEL: ${{ secrets.OPENAI_MODEL || 'gpt-4o' }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        ANTHROPIC_MODEL: ${{ secrets.ANTHROPIC_MODEL || 'claude-sonnet-4-5' }}
      continue-on-error: true

    - name: Sanitize GitHub context variables
      if: github.event_name == 'pull_request'
      id: sanitize
      run: |
        # Sanitize branch names - allow only safe characters
        BASE_REF="${{ github.base_ref }}"
        HEAD_REF="${{ github.head_ref }}"
        REPO="${{ github.repository }}"

        # Validate base_ref (alphanumeric, dash, underscore, slash, dot only)
        if [[ ! "$BASE_REF" =~ ^[a-zA-Z0-9/_.-]+$ ]]; then
          echo "❌ Invalid base_ref format: $BASE_REF"
          exit 1
        fi

        # Validate head_ref
        if [[ ! "$HEAD_REF" =~ ^[a-zA-Z0-9/_.-]+$ ]]; then
          echo "❌ Invalid head_ref format: $HEAD_REF"
          exit 1
        fi

        # Export sanitized values
        echo "base_ref=$BASE_REF" >> $GITHUB_OUTPUT
        echo "head_ref=$HEAD_REF" >> $GITHUB_OUTPUT
        echo "repo=$REPO" >> $GITHUB_OUTPUT
        echo "✅ Context variables sanitized"

    - name: Analyze PR changes
      if: github.event_name == 'pull_request'
      run: |
        echo "🔍 Analyzing PR-specific changes..."

        # Use commit SHAs for reliability (safer than branch names)
        BASE_SHA="${{ github.event.pull_request.base.sha }}"
        HEAD_SHA="${{ github.event.pull_request.head.sha }}"

        if [ -n "$BASE_SHA" ] && [ -n "$HEAD_SHA" ]; then
          git diff --name-only "$BASE_SHA..$HEAD_SHA" > reports/changed_files.txt 2>/dev/null || \
            git diff --name-only "origin/${{ steps.sanitize.outputs.base_ref }}...HEAD" > reports/changed_files.txt 2>/dev/null || \
            echo "⚠️  Could not determine changed files" > reports/changed_files.txt
        else
          echo "⚠️  SHA not available" > reports/changed_files.txt
        fi

        # Create PR changes report with safe variable expansion
        {
          echo "## 📝 PR変更ファイル一覧"
          echo ""
          echo '```'
          cat reports/changed_files.txt
          echo '```'
          echo ""
          echo "変更ファイル数: $(wc -l < reports/changed_files.txt)"
        } > reports/pr_changes.md
      continue-on-error: true

    - name: Search critical patterns
      run: |
        echo "🔍 Searching for critical code patterns..."

        # Run searches with proper quoting
        for keyword in "金額" "印刷" "削除" "SQL" "password" "api_key"; do
          # Sanitize keyword for safe filename
          safe_keyword=$(echo "$keyword" | tr -cd '[:alnum:]_-' | head -c 50)

          python codex_review_severity.py query "$keyword" \
            --mode semantic \
            --topk 20 \
            --out "reports/search_${safe_keyword}.md" 2>/dev/null || \
            echo "⚠️  Query for $keyword skipped" >> reports/search_log.txt
        done
      env:
        AI_PROVIDER: ${{ secrets.AI_PROVIDER || 'auto' }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      continue-on-error: true

    - name: Create summary report
      if: always()
      run: |
        echo "📝 Creating summary report..."

        # Use unquoted EOF for variable expansion
        cat > reports/summary.md << EOF
# 🤖 コードレビューサマリー (v3.5.0)

**実行時刻**: $(date '+%Y-%m-%d %H:%M:%S UTC')
**レビュー対象**: ${{ steps.sanitize.outputs.repo || github.repository }}
**ブランチ**: ${{ steps.sanitize.outputs.head_ref || github.ref_name }}
**AI モード**: ${{ steps.validate_api.outputs.ai_mode }}

---

## 📊 レビュー結果

EOF

        # Add main review results
        if [ -f reports/priority_review.md ]; then
          echo "### 🔴 高優先度の問題" >> reports/summary.md
          echo "" >> reports/summary.md
          head -n 150 reports/priority_review.md >> reports/summary.md
          echo "" >> reports/summary.md
        else
          echo "⚠️  優先度レビューが生成されませんでした。" >> reports/summary.md
          echo "" >> reports/summary.md
        fi

        # Add PR changes if available
        if [ -f reports/pr_changes.md ]; then
          echo "---" >> reports/summary.md
          cat reports/pr_changes.md >> reports/summary.md
        fi

        # Add footer
        cat >> reports/summary.md << 'EOF'

---

## 📁 詳細レポート

アーティファクト `code-review-reports` をダウンロードして全レポートを確認してください。

## 🔧 システム情報

- **ツール**: Codex Review System v3.5.0
- **AI Provider**: Auto (Anthropic Claude優先 → OpenAI GPT-4oフォールバック)
- **Python**: 3.11+
- **対応言語**: C#, PHP, Go, C++, Python, JavaScript/TypeScript
- **レビュー方式**: 重要度ベース（severity score）

🤖 Generated by [Codex Review](https://github.com/KEIEI-NET/BugSerch)
EOF

    - name: Generate workflow summary
      if: always()
      run: |
        echo "## 📊 Code Review Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f reports/summary.md ]; then
          head -n 50 reports/summary.md >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️  No summary generated" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📁 [Download full reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

    - name: Upload review artifacts
      if: always()
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3  # v4.3.1
      with:
        name: code-review-reports
        path: reports/
        retention-days: 90
        if-no-files-found: warn

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
      with:
        script: |
          const fs = require('fs');

          let comment = '## 🤖 Codex Code Review (v3.5.0)\n\n';

          try {
            const summary = fs.readFileSync('reports/summary.md', 'utf8');
            const maxLength = 65000;  # GitHub PR comment limit

            if (summary.length > maxLength) {
              comment += summary.substring(0, maxLength);
              comment += '\n\n... _(省略されました - 全レポートはアーティファクトをダウンロード)_';
            } else {
              comment += summary;
            }
          } catch (error) {
            // Log full error for debugging (visible only to maintainers)
            console.error('Error reading summary:', error);

            // Provide safe error message to PR
            comment += '⚠️  サマリーレポートの読み込みに失敗しました。\n\n';

            const safeError = error.code === 'ENOENT'
              ? 'ファイルが見つかりませんでした'
              : 'ファイル読み込みエラー';
            comment += `エラー: ${safeError}\n\n`;
            comment += 'アーティファクト `code-review-reports` をダウンロードして詳細を確認してください。';
          }

          // Post comment to PR
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });

    - name: Cleanup sensitive files
      if: always()
      run: |
        # Remove any potentially sensitive files
        rm -f .env 2>/dev/null || true
        rm -f .advice_*.pkl 2>/dev/null || true
        echo "✅ Cleanup completed"

    - name: Check review status
      if: always()
      run: |
        echo "📊 Checking review completion status..."

        if [ -f reports/priority_review.md ] || [ -f reports/summary.md ]; then
          echo "✅ Review completed successfully"
          ls -lh reports/
          exit 0
        else
          echo "⚠️  Review completed with warnings (no reports generated)"
          echo "This is non-fatal - workflow will not fail"
          exit 0
        fi
