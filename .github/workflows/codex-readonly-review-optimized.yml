name: Readonly Code Review (Optimized)

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 全体のタイムアウトを30分に設定

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install chromadb openai scikit-learn joblib regex
      continue-on-error: false

    - name: Create .env file
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
        echo "OPENAI_MODEL=${{ secrets.OPENAI_MODEL || 'gpt-5' }}" >> .env

    - name: Index repository
      run: |
        echo "🔍 Indexing repository files..."
        python codex_review_optimized.py index .
        echo "✅ Indexing completed"

    - name: Create TF-IDF vectors (optional)
      run: |
        echo "📊 Creating TF-IDF vectors for better search..."
        python codex_review_optimized.py vectorize --index .advice_index.jsonl || echo "⚠️ TF-IDF creation failed, will use naive search"
      continue-on-error: true

    - name: Run comprehensive advice (all files)
      run: |
        echo "🤖 Running comprehensive code review on all files..."
        mkdir -p reports

        # 全体的な横断チェック（最大100ファイル）
        python codex_review_optimized.py advise \
          --mode hybrid \
          --topk 100 \
          --out reports/advise.md

        echo "✅ Code review completed"
      env:
        PYTHONUNBUFFERED: 1  # リアルタイムログ出力

    - name: Generate PR-specific review
      if: github.event_name == 'pull_request'
      run: |
        echo "🔍 Analyzing PR-specific changes..."

        # PR変更ファイルリストを取得
        git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt

        # 変更ファイルに関連するレビューを生成
        echo "## PR変更ファイル" > reports/pr_specific.md
        echo "" >> reports/pr_specific.md
        cat changed_files.txt >> reports/pr_specific.md

        # 主要な懸念事項を検索
        for keyword in "金額" "印刷" "データベース" "UI"; do
          python codex_review_optimized.py query "$keyword" \
            --mode hybrid \
            --topk 10 \
            --out reports/pr_${keyword}.md || echo "Query for $keyword failed"
        done
      continue-on-error: true

    - name: Create summary report
      run: |
        echo "📝 Creating summary report..."

        # サマリーレポート作成
        echo "# 🔍 コードレビューサマリー" > reports/summary.md
        echo "" >> reports/summary.md
        echo "実行時刻: $(date '+%Y-%m-%d %H:%M:%S')" >> reports/summary.md
        echo "" >> reports/summary.md

        # メインレポートから重要部分を抽出
        if [ -f reports/advise.md ]; then
          echo "## 📊 重点チェック結果" >> reports/summary.md
          head -n 100 reports/advise.md >> reports/summary.md
        fi

        # 大容量ファイル警告
        if [ -f reports/large_files_over_limit.log ]; then
          echo "" >> reports/summary.md
          echo "## ⚠️ スキップされた大容量ファイル" >> reports/summary.md
          head -n 20 reports/large_files_over_limit.log >> reports/summary.md
        fi

    - name: Upload review artifacts
      uses: actions/upload-artifact@v3
      with:
        name: readonly-advice-optimized
        path: reports/
        retention-days: 30

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          // サマリーレポートを読み込み
          let comment = '## 🤖 Readonly Code Review (GPT-5 Optimized)\n\n';

          try {
            const summary = fs.readFileSync('reports/summary.md', 'utf8');
            // 最大文字数制限（GitHub PRコメントの制限）
            const maxLength = 65000;
            if (summary.length > maxLength) {
              comment += summary.substring(0, maxLength) + '\n\n... (省略)';
            } else {
              comment += summary;
            }
          } catch (error) {
            comment += '⚠️ サマリーレポートの読み込みに失敗しました。';
          }

          comment += '\n\n---\n';
          comment += '📁 **詳細レポート**: アーティファクト `readonly-advice-optimized` をダウンロードしてください。\n';
          comment += '🔧 **設定**: GPT-5, バッチ処理(10ファイル/バッチ), タイムアウト240秒\n';

          // PRにコメント投稿
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });

    - name: Set job status
      if: always()
      run: |
        if [ -f reports/advise.md ]; then
          echo "✅ Review completed successfully"
          exit 0
        else
          echo "❌ Review failed to generate report"
          exit 1
        fi