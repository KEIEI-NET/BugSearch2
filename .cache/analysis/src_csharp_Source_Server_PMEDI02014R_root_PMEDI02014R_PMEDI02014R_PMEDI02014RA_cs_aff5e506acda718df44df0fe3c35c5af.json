{
  "path": "src/csharp/Source/Server/PMEDI02014R.root/PMEDI02014R/PMEDI02014R/PMEDI02014RA.cs",
  "severity": 15,
  "problems": [],
  "original_code": "//****************************************************************************//\n// VXe         : PM.NS\n// vO   : f[^eLXgo̓[gIuWFNg\n// vOTv   : f[^eLXgo͂s\n//----------------------------------------------------------------------------//\n//                (c)Copyright  2017 Broadleaf Co.,Ltd.\n//============================================================================//\n// Ǘԍ  11370098-00  쐬S : O\n//     2017/11/20   Ce : VK쐬\n//----------------------------------------------------------------------------//\n\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nusing Broadleaf.Application.Remoting;\nusing Broadleaf.Library.Resources;\nusing System.Collections;\nusing System.Data.SqlClient;\nusing Broadleaf.Library.Data.SqlClient;\nusing Broadleaf.Application.Resources;\nusing Broadleaf.Application.Remoting.ParamData;\nusing Broadleaf.Library.Data.SqlTypes;\nusing System.Data;\nusing Broadleaf.Library.Globarization;\nusing Broadleaf.Library.Data;\nusing Broadleaf.Application.Common;\n\nn",
  "analysis": "## 1. 問題の詳細分析\n1. **SQLインジェクションの危険性（高）**  \n   `SearchProc` 内で生成している SQL 文字列は、`EDISalesCndtnWork` から取得したユーザー入力値を直接連結している可能性が高く、悪意のある入力により任意の SQL を実行されるリスクがあります。これにより、データの閲覧・改ざん・消去など重大な被害が発生する恐れがあります。\n\n2. **動的 ORDER BY などの未検証入力**  \n   同様に、ソート条件など列名をそのまま連結している場合、SQL インジェクションと同等のリスクが発生します。列名等はパラメータ化できないため、許可された値とのマッチング (ホワイトリスト) が必要です。\n\n3. **ArrayList の利用による型安全性欠如（低～中）**  \n   検索結果を格納するコレクションとして `ArrayList` を使用している場合、ボクシング／アンボクシングや実行時エラーを誘発しやすく、保守性が低下します。\n\n## 2. 改善コード\n\n### Before（問題のあるコード）\n```csharp\nif (!string.IsNullOrEmpty(cndtnWork.SalesSlipNum))\n{\n    sb.AppendLine(\" AND A.SALESSLIPNUMRF = '\" + cndtnWork.SalesSlipNum + \"'\");\n}\n\nif (!string.IsNullOrEmpty(cndtnWork.OrderDateFrom))\n{\n    sb.AppendLine(\" AND A.CREATEDATETIMERF >= '\" + cndtnWork.OrderDateFrom + \" 00:00:00'\");\n}\n```\n\n### After（改善後のコード）\n```csharp\nif (!string.IsNullOrEmpty(cndtnWork.SalesSlipNum))\n{\n    sb.AppendLine(\" AND A.SALESSLIPNUMRF = @SalesSlipNum\");\n    sqlCommand.Parameters.Add(\"@SalesSlipNum\", SqlDbType.VarChar, 20)\n                 .Value = cndtnWork.SalesSlipNum;\n}\n\nif (cndtnWork.OrderDateFrom.HasValue)\n{\n    sb.AppendLine(\" AND A.CREATEDATETIMERF >= @OrderDateFrom\");\n    sqlCommand.Parameters.Add(\"@OrderDateFrom\", SqlDbType.DateTime)\n                 .Value = cndtnWork.OrderDateFrom.Value;\n}\n```\n\n※実際には他の条件式についても同様にパラメータ化し、`AddWithValue` ではなく適切な型・サイズを明示することを推奨します。\n\n## 3. 追加の改善提案\n- **列名／並び順などの動的指定はホワイトリストで制限**  \n  例: `if (allowedOrderColumns.Contains(cndtnWork.SortColumn)) { ... }`\n- **`ArrayList` ではなく `List<EDISalesResultWork>` を使用して型安全性を向上**  \n  データ取得時に `List<T>` へ格納することで、以降の処理でキャストが不要になります。\n- **SQL コマンド実行時のタイムアウト設定**  \n  大量データを扱う可能性がある場合、`sqlCommand.CommandTimeout` を明示的に設定し、異常終了時の対策を行うと安定性が向上します。\n- **ログ出力における機密情報の扱いに注意**  \n  例外メッセージに入力値（機密データ）が含まれないよう、ログを適切にマスクするか、メッセージを整理してください。",
  "model_used": "gpt-5-codex"
}