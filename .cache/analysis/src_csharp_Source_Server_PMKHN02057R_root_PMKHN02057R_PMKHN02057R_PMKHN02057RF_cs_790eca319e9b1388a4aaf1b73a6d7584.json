{
  "path": "src/csharp/Source/Server/PMKHN02057R.root/PMKHN02057R/PMKHN02057R/PMKHN02057RF.cs",
  "severity": 15,
  "problems": [],
  "original_code": "//****************************************************************************//\n// VXe         : .NSV[Y\n// vO   : Ly[ѕ\\\n// vOTv   : Ly[ѕ\\@󒍎ҕʗp\n//----------------------------------------------------------------------------//\n//                (c)Copyright  2011 Broadleaf Co.,Ltd.\n//============================================================================//\n// \n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : c\n//     2011/05/19  Ce : VK쐬\n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : \n//     2011/07/05  Ce : Redmine Q #22746 ̑Ή\n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : \n//     2011/07/07  Ce : Redmine dlA #22792 ̑Ή\n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : \n//     2011/07/11  Ce : Redmine dlύX #22860 ̑Ή\n//------------------------------------------",
  "analysis": "## 1. 問題の詳細分析\n1. **SQLインジェクションのリスク（重大）**  \n   `MakeSalesSelectStringProc` 内の WHERE 句生成処理では、`CampaignstRsltListPrtWork` のユーザー入力値を文字列連結でそのまま SQL に埋め込んでいます。  \n   例：`AddUpSecCode` や `CustomerCode` 等の条件を `\" ... = '\" + CndtnWork.Xxx + \"' \"` という形で結合しており、攻撃者が特殊文字やサブクエリを入力するだけで任意の SQL が実行される状態です。  \n   影響として、認証情報の窃取、データ改ざん／破壊、システム全体の乗っ取り等が考えられます。\n\n2. **IN 句の組み立てにおける検証不足**  \n   複数コード条件（例：部門コードのリスト等）をそのまま `... IN (\" + CndtnWork.SomeList + \")` のように組み立てている箇所があり、各要素に対するエスケープ・検証が行われていません。  \n   このままでは 1 件目の SQL インジェクションだけでなく、IN 句を利用した一括改ざんが可能になります。\n\n3. **`SqlCommand` を利用したパラメータバインドが行われていない**  \n   メソッドシグネチャで `SqlCommand` を受け取っているにもかかわらず、`CommandText` に文字列を設定するだけで `Parameters` コレクションを利用していません。  \n   ・SQL ステートメントの再利用・チューニングができない  \n   ・入力値の型チェックが行われない  \n   ・上記 1,2 のようなインジェクション攻撃の温床  \n   といった悪影響があります。\n\n## 2. 改善コード\n### Before（問題のあるコード）\n```csharp\nif (!String.IsNullOrEmpty(CndtnWork.AddUpSecCode))\n{\n    bAddUpSecCode = true;\n    sbWhere.Append(\" AND CMPS.ADDUP_SEC_CD = '\" + CndtnWork.AddUpSecCode + \"'\");\n}\n\nif (!String.IsNullOrEmpty(CndtnWork.CustomerCodeList))\n{\n    sbWhere.Append(\" AND CMPS.CSTMR_CD IN (\" + CndtnWork.CustomerCodeList + \")\");\n}\n```\n\n### After（改善後のコード）\n```csharp\nif (!string.IsNullOrWhiteSpace(CndtnWork.AddUpSecCode))\n{\n    bAddUpSecCode = true;\n    var paramName = \"@AddUpSecCode\";\n    sbWhere.Append(\" AND CMPS.ADDUP_SEC_CD = \" + paramName);\n    sqlCommand.Parameters.Add(paramName, SqlDbType.NVarChar, 20)\n               .Value = CndtnWork.AddUpSecCode.Trim();\n}\n\nif (CndtnWork.CustomerCodes != null && CndtnWork.CustomerCodes.Count > 0)\n{\n    var parameterNames = new List<string>(CndtnWork.CustomerCodes.Count);\n    for (int i = 0; i < CndtnWork.CustomerCodes.Count; i++)\n    {\n        var paramName = $\"@CustomerCode{i}\";\n        parameterNames.Add(paramName);\n        sqlCommand.Parameters.Add(paramName, SqlDbType.NVarChar, 20)\n                   .Value = CndtnWork.CustomerCodes[i];\n    }\n\n    sbWhere.Append(\" AND CMPS.CSTMR_CD IN (\")\n           .Append(string.Join(\",\", parameterNames))\n           .Append(\")\");\n}\n```\n※ `CustomerCodeList` のようなカンマ区切り文字列ではなく、予め `List<string>` 等で受け取れるよう DTO を修正することを推奨します。\n\n## 3. 追加の改善提案\n- **DTO（`CampaignstRsltListPrtWork`）の入力バリデーション**  \n  Null/空文字/桁数/フォーマットの検証をサーバー側で必ず実施し、異常値は早期に排除してください。\n\n- **SQL ビルド処理の共通化**  \n  IN 句パラメータ生成などをヘルパーメソッド化し、重複コードの削減とバグ混入確率の低減を図りましょう。\n\n- **`SqlCommand` の責務見直し**  \n  メソッド内で `sqlCommand.CommandText` と `sqlCommand.Parameters` を一括設定する形に整理し、`return string` を廃止して `SqlCommand` 完成品を返すようにすると、利用側での設定漏れを防げます。\n\n- **ユニットテスト／結合テストの追加**  \n  典型的な攻撃パターン（`' OR 1=1 --` など）を入力した際に SQL が破綻しないかを検証するテストケースを追加してください。",
  "model_used": "gpt-5-codex"
}