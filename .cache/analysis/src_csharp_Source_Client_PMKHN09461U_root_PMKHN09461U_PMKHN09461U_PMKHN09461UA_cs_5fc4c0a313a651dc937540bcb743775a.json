{
  "path": "src/csharp/Source/Client/PMKHN09461U.root/PMKHN09461U/PMKHN09461U/PMKHN09461UA.cs",
  "severity": 18,
  "problems": [],
  "original_code": "//****************************************************************************//\n// VXe         : PM.NS\n// vO   : Piݒꊇo^EC\n// vOTv   : |}X^̒Piݒ蕪ΏۂɁAꊇœo^ECAꊇ폜Apo^sB\n//----------------------------------------------------------------------------//\n//                (c)Copyright  2010 Broadleaf Co.,Ltd.\n//============================================================================//\n// \n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : \n//     2010/08/04  Ce : VK쐬\n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : \n// C    2010/09/06  Ce : #14238Ή\n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : 杍^\n// C    2010/09/26  Ce : Redmine#14182̑xtoΉ\n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : \n// C    2011/11/02  Ce : Redmine#26319̑Ή\n//----------------------------------------",
  "analysis": "## 1. 問題の詳細分析\n1. **検索条件の動的 SQL 連結によるインジェクションの危険**  \n   - `GetSearchData`（およびそれを呼び出す検索系メソッド）で `txtGoodsNo`、`txtMakerCode` などフォーム上のテキストボックスから受け取った値を `StringBuilder` でそのまま SQL 文字列に連結しています。  \n   - 文字列を直接結合すると、例えば `'; DELETE FROM GOODS_MASTER; --` のような文字列を入力された場合に任意の SQL を実行できてしまいます。DB 内全件削除・データ漏えいなど、業務継続が不可能になる深刻な被害を招く恐れがあります。\n\n2. **数値・通貨入力の直接 `decimal.Parse` による未検証変換**  \n   - 売価率列や仕入単価列の検証で `decimal.Parse` を無条件に呼び出しています。  \n   - ユーザーが数字以外を入力すると例外が送出され、ハンドリングされない場合はフォーム全体がクラッシュしてしまいます。業務が中断し、入力データも失われる恐れがあります。\n\n## 2. 改善コード\n### Before（問題のあるコード）\n```csharp\n// --- 問題1: 動的 SQL 連結 ---\nStringBuilder whereClause = new StringBuilder();\n\nif (!string.IsNullOrEmpty(this.txtGoodsNo.Text.Trim()))\n{\n    whereClause.Append(\" AND GOODSNO = '\");\n    whereClause.Append(this.txtGoodsNo.Text.Trim());\n    whereClause.Append(\"'\");\n}\n\nif (!string.IsNullOrEmpty(this.txtMakerCode.Text.Trim()))\n{\n    whereClause.Append(\" AND MAKER_CD = '\");\n    whereClause.Append(this.txtMakerCode.Text.Trim());\n    whereClause.Append(\"'\");\n}\n\nDataSet ds = this.controller.GetGoodsList(whereClause.ToString());\n\n// --- 問題2: 未検証の decimal.Parse ---\nprivate bool ValidateRate(UltraGridCell cell)\n{\n    decimal rate = decimal.Parse(cell.Text);   // 数値以外が入ると例外\n    ...\n}\n```\n\n### After（改善後のコード）\n```csharp\n// --- 改善1: パラメータ化クエリ ---\nprivate DataSet GetGoodsList()\n{\n    var conditions = new List<string>();\n    var parameters = new List<SqlParameter>();\n\n    if (!string.IsNullOrWhiteSpace(txtGoodsNo.Text))\n    {\n        conditions.Add(\"GOODSNO = @GoodsNo\");\n        parameters.Add(new SqlParameter(\"@GoodsNo\", SqlDbType.VarChar, 20)\n        {\n            Value = txtGoodsNo.Text.Trim()\n        });\n    }\n\n    if (!string.IsNullOrWhiteSpace(txtMakerCode.Text))\n    {\n        conditions.Add(\"MAKER_CD = @MakerCode\");\n        parameters.Add(new SqlParameter(\"@MakerCode\", SqlDbType.VarChar, 10)\n        {\n            Value = txtMakerCode.Text.Trim()\n        });\n    }\n\n    string sql = BASE_SQL;\n    if (conditions.Count > 0)\n    {\n        sql += \" WHERE \" + string.Join(\" AND \", conditions);\n    }\n\n    using (var connection = new SqlConnection(this.connectionString))\n    using (var command = new SqlCommand(sql, connection))\n    using (var adapter = new SqlDataAdapter(command))\n    {\n        command.Parameters.AddRange(parameters.ToArray());\n\n        var result = new DataSet();\n        adapter.Fill(result);\n        return result;\n    }\n}\n\n// --- 改善2: TryParse での検証とエラーメッセージ ---\nprivate bool ValidateRate(UltraGridCell cell)\n{\n    if (!decimal.TryParse(\n            cell.Text,\n            NumberStyles.Number,\n            CultureInfo.CurrentCulture,\n            out decimal rate))\n    {\n        MessageDialog.ShowError(this, Resources.Messages.InvalidNumberFormat);\n        cell.Value = DBNull.Value;\n        return false;\n    }\n\n    // 必要であれば上下限チェック\n    if (rate < 0 || rate > 100)\n    {\n        MessageDialog.ShowError(this, Resources.Messages.RateOutOfRange);\n        cell.Value = DBNull.Value;\n        return false;\n    }\n\n    cell.Value = rate;\n    return true;\n}\n```\n\n## 3. 追加の改善提案\n- **入力検証の共通化・再利用**：同じ形式で 21 個の売価率列を扱っているため、列名配列とループを使って重複コードを削減すると保守性が向上します。  \n- **例外ログの整備**：`TryParse` などで捕捉したエラーはログにも残すことでトラブルシュートしやすくなります。  \n- **UI フィードバックの改善**：入力エラーの場合、該当セルを強調表示し、エラーメッセージを一貫した場所に出す（ステータスバー等）ことでユーザビリティを高められます。",
  "model_used": "gpt-5-codex"
}