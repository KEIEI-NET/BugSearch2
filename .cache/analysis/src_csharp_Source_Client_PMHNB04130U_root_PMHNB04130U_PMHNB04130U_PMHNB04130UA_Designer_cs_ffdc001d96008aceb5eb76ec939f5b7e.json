{
  "path": "src/csharp/Source/Client/PMHNB04130U.root/PMHNB04130U/PMHNB04130U/PMHNB04130UA.Designer.cs",
  "severity": 22,
  "problems": [],
  "original_code": "﻿namespace Broadleaf.Windows.Forms\n{\n    partial class PMHNB04130UA\n    {\n        /// <summary>\n        /// 必要なデザイナ変数です。\n        /// </summary>\n        private System.ComponentModel.IContainer components = null;\n\n        /// <summary>\n        /// 使用中のリソースをすべてクリーンアップします。\n        /// </summary>\n        /// <param name=\"disposing\">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>\n        protected override void Dispose(bool disposing)\n        {\n            if (disposing && (components != null))\n            {\n                components.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n\n        #region Windows フォーム デザイナで生成されたコード\n\n        /// <summary>\n        /// デザイナ サポートに必要なメソッドです。このメソッドの内容を\n        /// コード エディタで変更しないでください。\n        /// </summary>\n        private void InitializeComponent()\n        {\n            this.components = new System.ComponentModel.Container();\n            Infragistics.Win.ValueListItem valueListItem1 = new Infragistics.Win.ValueListItem();\n   ",
  "analysis": "## 1. 問題の詳細分析\n1. **ドメインロジックが Designer ファイルに直接書かれている**  \n   `InitializeComponent` 内で `ValueListItem` やツールチップ文言など、業務固有の値を直接生成・設定しています。Designer ファイルはフォームデザイナの再保存で簡単に書き換えられるため、こうした手動追記は変更が消えるリスクが高く、保守性が著しく低下します。\n\n2. **ValueListItem の “値” が文字列ベースのマジックナンバー**  \n   `ValueListItem` の `DataValue` に文字列や数値リテラルを直接埋め込むと、コード側と UI の値の整合性をコンパイル時に担保できません。バインド先のロジックと不整合が起きた場合、実行時に初めて不具合として顕在化します。\n\n3. **Appearance 設定の重複生成によるメンテ負荷／パフォーマンス低下**  \n   `InitializeComponent` 内で `Infragistics.Win.Appearance` オブジェクトを大量に生成している箇所が複数あります。同じ外観設定を毎回 new しているため、コードが読みづらくなるだけでなくインスタンス生成コストも増えます。\n\n## 2. 改善コード\n### Before（問題のあるコード）\n```csharp\nprivate void InitializeComponent()\n{\n    this.components = new System.ComponentModel.Container();\n    Infragistics.Win.ValueListItem valueListItem1 = new Infragistics.Win.ValueListItem();\n    Infragistics.Win.ValueListItem valueListItem2 = new Infragistics.Win.ValueListItem();\n    // …中略…\n    valueListItem1.DataValue = \"0\";\n    valueListItem1.DisplayText = \"通常\";\n    valueListItem2.DataValue = \"1\";\n    valueListItem2.DisplayText = \"停止\";\n    this.cmbStatus.Items.AddRange(new object[] { valueListItem1, valueListItem2 });\n\n    Infragistics.Win.Appearance appearance260 = new Infragistics.Win.Appearance();\n    appearance260.ForeColor = System.Drawing.Color.Red;\n    this.lblError.Appearance = appearance260;\n    // …さらに同様の Appearance が多数生成される…\n}\n```\n\n### After（改善後のコード）\n```csharp\n// Designer ファイル側\nprivate void InitializeComponent()\n{\n    this.components = new System.ComponentModel.Container();\n    this.cmbStatus = new Infragistics.Win.UltraWinEditors.UltraComboEditor();\n    this.lblError = new Infragistics.Win.Misc.UltraLabel();\n    // …デザイナ生成コード…\n\n    this.Load += PMHNB04130UA_Load;\n}\n\n// Designer とは別の partial クラス側（PMHNB04130UA.cs 等）\nprivate void PMHNB04130UA_Load(object sender, EventArgs e)\n{\n    InitializeValueLists();\n    ApplyAppearance();\n}\n\nprivate void InitializeValueLists()\n{\n    cmbStatus.DisplayMember = nameof(StatusItem.DisplayText);\n    cmbStatus.ValueMember = nameof(StatusItem.Value);\n    cmbStatus.DataSource = new BindingList<StatusItem>\n    {\n        new(Status.Active, Resources.Status_Active),\n        new(Status.Inactive, Resources.Status_Inactive)\n    };\n}\n\nprivate void ApplyAppearance()\n{\n    lblError.Appearance = AppearanceCatalog.ErrorLabel;\n    // 必要に応じて他のコントロールにも共通スタイルを適用\n}\n\nprivate enum Status\n{\n    Active,\n    Inactive\n}\n\nprivate sealed record StatusItem(Status Value, string DisplayText);\n\nprivate static class AppearanceCatalog\n{\n    public static Infragistics.Win.Appearance ErrorLabel { get; } = CreateErrorAppearance();\n\n    private static Infragistics.Win.Appearance CreateErrorAppearance()\n    {\n        return new Infragistics.Win.Appearance\n        {\n            ForeColor = Color.Red,\n            // ほか必要な共通設定\n        };\n    }\n}\n```\n\n## 3. 追加の改善提案\n- **リソース化による多言語対応**  \n  ツールチップやコンボボックスに表示する固定文字列は `Resources.resx` に移し、多言語化や文字列変更を容易にします。\n\n- **Designer ファイルの変更禁止を周知**  \n  ドキュメント化やレビュー運用で「デザイナファイルに業務ロジックを書かない」ルールを徹底し、再発を防止します。\n\n- **共通スタイルの再利用**  \n  `Appearance` やフォーマットの共通化を進め、アプリ全体で統一テーマを持たせると同時に、個別調整によるバラつきを減らします。",
  "model_used": "gpt-5-codex"
}