{
  "path": "src/csharp/Source/Server/PMKHN09284R.root/PMKHN09284R/PMKHN09286D/PMKHN09286DI.cs",
  "severity": 15,
  "problems": [],
  "original_code": "//****************************************************************************//\n// VXe         : PM.NS\n// vO   : akR[hwʕϊ\n// vOTv   : akR[hwʕϊs\n//----------------------------------------------------------------------------//\n//                (c)Copyright  2010 Broadleaf Co.,Ltd.\n//============================================================================//\n// \n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : M\n//     2010/01/12  Ce : VK쐬\n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S :\n// C                Ce :\n//----------------------------------------------------------------------------//\nusing System;\nusing System.Collections;\n\nnamespace Broadleaf.Application.Remoting.ParamData\n{\n    /// public class name:   ExcellentSetParaBWork\n    /// <summary>\n    ///                      Dǐݒp[^a[N\n    /// </summary>\n    /// <remarks>\n    /// <br>note             :   Dǐݒp[^a[Nwb_t@C",
  "analysis": "## 1. 問題の詳細分析\n\n1. **FileName プロパティに入力検証がない**\n   - 外部から自由に設定できるため、`../` や `C:\\` などのパス要素を含めた値がそのまま格納される可能性があります。後続処理でファイルアクセスに利用されると、ディレクトリ トラバーサル等による意図しないファイルへのアクセスが発生し得ます。\n\n2. **文字列プロパティ全般が null/空文字を許容している**\n   - すべてのコード値が既定値 `\"\"` のままでもインスタンスが生成可能で、利用側が値の妥当性を確認しないまま処理を進めると、想定外の空データでの検索や DB 更新が行われるリスクがあります（例：パラメータ未設定による全件更新）。\n\n3. **引数なしコンストラクタのみで不完全な状態を許容**\n   - シリアライズ専用クラスだったとしても、通常利用時に必須項目が設定されないままのインスタンス生成を助長します。これにより業務ロジックでの不正パラメータ利用を誘発し、障害やデータ汚染につながります。\n\n## 2. 改善コード\n\n### Before（問題のあるコード）\n```csharp\npublic string FileName\n{\n    get { return _fileName; }\n    set { _fileName = value; }\n}\n```\n\n```csharp\npublic ExcellentSetParaBWork()\n{\n}\n```\n\n### After（改善後のコード）\n```csharp\nusing System;\nusing System.IO;\n\nnamespace Broadleaf.Application.Remoting.ParamData\n{\n    [Serializable]\n    [Broadleaf.Library.Runtime.Serialization.CustomSerializationData]\n    public sealed class ExcellentSetParaBWork\n    {\n        private string _fileName = string.Empty;\n        private string _sectionName = string.Empty;\n        private string _beforeBlCd = string.Empty;\n        private string _afterSelectCd = string.Empty;\n        private string _beforeSelectCd = string.Empty;\n        private string _makerCd = string.Empty;\n\n        public ExcellentSetParaBWork(\n            string fileName,\n            string sectionName,\n            string beforeBlCd,\n            string afterSelectCd,\n            string beforeSelectCd,\n            string makerCd)\n        {\n            FileName = fileName;\n            SectionName = sectionName;\n            BeforeBlCd = beforeBlCd;\n            AfterSelectCd = afterSelectCd;\n            BeforeSelectCd = beforeSelectCd;\n            MakerCd = makerCd;\n        }\n\n        public string FileName\n        {\n            get => _fileName;\n            set => _fileName = ValidateFileName(value);\n        }\n\n        public string SectionName\n        {\n            get => _sectionName;\n            set => _sectionName = RequireNonEmpty(value, nameof(SectionName));\n        }\n\n        public string BeforeBlCd\n        {\n            get => _beforeBlCd;\n            set => _beforeBlCd = RequireNonEmpty(value, nameof(BeforeBlCd));\n        }\n\n        public string AfterSelectCd\n        {\n            get => _afterSelectCd;\n            set => _afterSelectCd = RequireNonEmpty(value, nameof(AfterSelectCd));\n        }\n\n        public string BeforeSelectCd\n        {\n            get => _beforeSelectCd;\n            set => _beforeSelectCd = RequireNonEmpty(value, nameof(BeforeSelectCd));\n        }\n\n        public string MakerCd\n        {\n            get => _makerCd;\n            set => _makerCd = RequireNonEmpty(value, nameof(MakerCd));\n        }\n\n        // シリアライザ用に parameterless ctor を用意する場合は internal/protected に制限する\n        internal ExcellentSetParaBWork()\n        {\n        }\n\n        private static string ValidateFileName(string? value)\n        {\n            string candidate = RequireNonEmpty(value, nameof(FileName));\n\n            if (candidate.IndexOfAny(Path.GetInvalidFileNameChars()) >= 0)\n            {\n                throw new ArgumentException(\"FileName contains invalid characters.\", nameof(value));\n            }\n\n            if (candidate.Contains(Path.DirectorySeparatorChar) ||\n                candidate.Contains(Path.AltDirectorySeparatorChar))\n            {\n                throw new ArgumentException(\"FileName must not contain path separators.\", nameof(value));\n            }\n\n            return candidate;\n        }\n\n        private static string RequireNonEmpty(string? value, string propertyName)\n        {\n            if (string.IsNullOrWhiteSpace(value))\n            {\n                throw new ArgumentException($\"{propertyName} must not be null or whitespace.\", propertyName);\n            }\n\n            return value.Trim();\n        }\n    }\n}\n```\n\n## 3. 追加の改善提案\n- **メタデータ導入**：`DataAnnotations`（例：`[Required]`, `[StringLength]`）を併用すると、UI やサーバーサイドのバリデーションを統一的に扱えます。\n- **コード体系のバリデーション**：`BeforeBlCd` 等がコード値であるなら、許容文字（半角英数字など）を正規表現で制限することを検討してください。\n- **不変オブジェクト（イミュータブル化）**：必要に応じて `init` アクセサを利用するか `record` に置き換え、生成後の変更を抑制すると、状態不整合をさらに防げます。\n- **ロギングとの連携**：バリデーション例外発生時にログへ記録することで、不正パラメータの流入源・頻度を把握しやすくなります。",
  "model_used": "gpt-5-codex"
}