{
  "path": "src/csharp/Source/Server/PMKHN08635R.root/PMKHN08635R/PMKHN08635R/PMKHN08635RE.cs",
  "severity": 15,
  "problems": [],
  "original_code": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Text;\nusing Broadleaf.Application.Remoting.ParamData;\nusing Broadleaf.Library.Resources;\nusing Broadleaf.Library.Data;\nusing Broadleaf.Library.Data.SqlTypes;\nusing Broadleaf.Library.Data.SqlClient;\nusing Broadleaf.Xml.Serialization;\nusing Broadleaf.Application.Resources;\nusing Broadleaf.Library.Globarization;\n\nnamespace Broadleaf.Application.Remoting\n{\n    class MTtlSaSlipEmp : MTtlSaSlipBase, IMTtlSaSlip\n    {\n        #region [Sҕʗp Select]\n        /// <summary>\n        /// SҕʗpSELECT \n        /// </summary>\n        /// <param name=\"sqlCommand\">SqlCommandIuWFNg</param>\n        /// <param name=\"CndtnWork\"></param>\n        /// <returns>SҕʗpSELECT</returns>\n        /// <br>Note       : SҕʗpSELECT쐬Ė߂܂</br>\n        /// <br>Programmer : 23012  [N</br>\n        /// <br>Date       : 2008.11.11</br>\n        public string MakeSelectString(ref SqlCommand sqlCommand",
  "analysis": "## 1. 問題の詳細分析\n1. **SQLインジェクションの危険性（重大）**  \n   `MakeSelectStringProc` メソッドでは、`CndtnWork` から受け取ったパラメータ値を `selectTxt += \"... '\" + CndtnWork.XXX + \"' ...\"` のように直接文字列へ連結して SQL を生成しています。ユーザー入力を含むオブジェクトから値をそのまま SQL に埋め込むと、攻撃者が `'; DROP TABLE ...` などを注入して任意の SQL を実行できるため、データの窃取や破壊に直結します。危険度 15 の主因はこれに該当します。\n\n2. **SqlCommand のパラメータ未初期化・再利用問題（中）**  \n   `SqlCommand` を `ref` 経由で受け取りながら `Parameters.Clear()` をしていないため、同一コマンドを再利用した場合に前回クエリのパラメータが残存します。これにより意図しない値がバインドされ、検索結果の不正やエラー・例外発生の原因になります。\n\n3. **引数の null チェック不足（軽微〜中）**  \n   `sqlCommand` や `CndtnWork` が `null` のまま渡された場合、`NullReferenceException` が発生します。障害発生時にスタックトレースから原因が把握しにくく、安定稼働性を欠きます。\n\n## 2. 改善コード\n### Before（問題のあるコード）\n```csharp\nprivate string MakeSelectStringProc(ref SqlCommand sqlCommand, SalTrgtPrintParamWork CndtnWork, ConstantManagement.LogicalMode logicalMode)\n{\n    string selectTxt = \"\";\n    string Tblnm = \"SCINF\";\n\n    switch (CndtnWork.PrintType)\n    {\n        case 10:\n            Tblnm = \"SCINF\";\n            break;\n        case 20:\n            Tblnm = \"SBSEC\";\n            break;\n        case 22:\n            Tblnm = \"EMPLY\";\n            break;\n    }\n\n    selectTxt += \"SELECT\" + Environment.NewLine;\n    selectTxt += \"   \" + Tblnm + \".UPDATEDATETIMERF\" + Environment.NewLine;\n    // ...\n    selectTxt += \"WHERE SCINF.SECTIONCODERF = '\" + CndtnWork.SectionCode + \"'\" + Environment.NewLine;\n    // ほかにもユーザー入力が直接結合されている\n\n    sqlCommand.CommandText = selectTxt;\n    return selectTxt;\n}\n```\n\n### After（改善後のコード）\n```csharp\nprivate string MakeSelectStringProc(ref SqlCommand sqlCommand, SalTrgtPrintParamWork condition, ConstantManagement.LogicalMode logicalMode)\n{\n    if (sqlCommand == null) throw new ArgumentNullException(nameof(sqlCommand));\n    if (condition == null) throw new ArgumentNullException(nameof(condition));\n\n    sqlCommand.Parameters.Clear();\n\n    string tableName = condition.PrintType switch\n    {\n        20 => \"SBSEC\",\n        22 => \"EMPLY\",\n        _  => \"SCINF\"\n    };\n\n    var query = new StringBuilder()\n        .AppendLine(\"SELECT\")\n        .AppendLine($\"   {tableName}.UPDATEDATETIMERF\")\n        .AppendLine(\"  ,ESLST.SECTIONCODERF\")\n        .AppendLine(\"  ,SCINF.SECTIONGUIDESNMRF\")\n        .AppendLine(\"  ,ESLST.SUBSECTIONCODERF\")\n        .AppendLine(\"  ,SBSEC.SUBSECTIONNAMERF\")\n        .AppendLine(\"  ,CASE WHEN ESLST.EMPLOYEEDIVCDRF = 10 THEN ESLST.EMPLOYEECODERF ELSE '' END AS SALESEMPLOYEECD\")\n        .AppendLine(\"  ,CASE WHEN ESLST.EMPLOYEEDIVCDRF = 10 THEN EMPLY.NAMERF         ELSE '' END AS SALESEMPLOYEENM\")\n        .AppendLine(\"  ,CASE WHEN ESLST.EMPLOYEEDIVCDRF = 20 THEN ESLST.EMPLOYEECODERF ELSE '' END AS FRONTEMPLOYEECD\")\n        .AppendLine(\"  ,CASE WHEN ESLST.EMPLOYEEDIVCDRF = 20 THEN EMPLY.NAMERF         ELSE '' END AS FRONTEMPLOYEENM\")\n        .AppendLine(\"  ,CASE WHEN ESLST.EMPLOYEEDIVCDRF = 30 THEN ESLST.EMPLOYEECODERF ELSE '' END AS SALESINPUTCODE\")\n        .AppendLine(\"  ,CASE WHEN ESLST.EMPLOYEEDIVCDRF = 30 THEN EMPLY.NAMERF         ELSE '' END AS SALESINPUTNAME\")\n        .AppendLine(\"  ,ESLST.SALESTARGETMONEY1\")\n        .AppendLine(\"  ,ESLST.SALESTARGETMONEY2\")\n        .AppendLine(\"  ,ESLST.SALESTARGETMONEY3\")\n        .AppendLine(\"  ,ESLST.SALESTARGETMONEY4\")\n        .AppendLine(\"  ,ESLST.SALESTARGETMONEY5\")\n        .AppendLine(\"  ,ESLST.SALESTARGETMONEY6\")\n        .AppendLine(\"  ,ESLST.SALESTARGETMONEY7\")\n        .AppendLine(\"  ,ESLST.SALESTARGETMONEY8\")\n        .AppendLine(\"  ,ESLST.SALESTARGETMONEY9\")\n        .AppendLine(\"  ,ESLST.SALESTARGETMONEY10\")\n        .AppendLine(\"  ,ESLST.SALESTARGETMONEY11\")\n        .AppendLine(\"  ,ESLST.SALESTARGETMONEY12\")\n        .AppendLine(\"  ,ESLST.SALESTARGETPROFIT1\")\n        .AppendLine(\"  ,ESLST.SALESTARGETPROFIT2\")\n        .AppendLine(\"  ,ESLST.SALESTARGETPROFIT3\")\n        .AppendLine(\"  ,ESLST.SALESTARGETPROFIT4\")\n        .AppendLine(\"  ,ESLST.SALESTARGETPROFIT5\")\n        .AppendLine(\"  ,ESLST.SALESTARGETPROFIT6\")\n        .AppendLine(\"  ,ESLST.SALESTARGETPROFIT7\")\n        .AppendLine(\"  ,ESLST.SALESTARGETPROFIT8\")\n        .AppendLine(\"  ,ESLST.SALESTARGETPROFIT9\")\n        .AppendLine(\"  ,ESLST.SALESTARGETPROFIT10\")\n        .AppendLine(\"  ,ESLST.SALESTARGETPROFIT11\")\n        .AppendLine(\"  ,ESLST.SALESTARGETPROFIT12\")\n        .AppendLine(\"FROM EMPLYSALARYLIST ESLST\")\n        .AppendLine(\"LEFT JOIN SCINF ON ESLST.SECTIONCODERF = SCINF.SECTIONCODERF\")\n        .AppendLine(\"LEFT JOIN SBSEC ON ESLST.SUBSECTIONCODERF = SBSEC.SUBSECTIONCODERF\")\n        .AppendLine(\"LEFT JOIN EMPLY ON ESLST.EMPLOYEECODERF = EMPLY.EMPLOYEECODERF\")\n        .AppendLine(\"WHERE 1 = 1\");\n\n    if (!string.IsNullOrWhiteSpace(condition.SectionCode))\n    {\n        query.AppendLine(\"  AND ESLST.SECTIONCODERF = @SectionCode\");\n        sqlCommand.Parameters.Add(\"@SectionCode\", SqlDbType.NVarChar, 10).Value = condition.SectionCode;\n    }\n\n    if (!string.IsNullOrWhiteSpace(condition.SubSectionCode))\n    {\n        query.AppendLine(\"  AND ESLST.SUBSECTIONCODERF = @SubSectionCode\");\n        sqlCommand.Parameters.Add(\"@SubSectionCode\", SqlDbType.NVarChar, 10).Value = condition.SubSectionCode;\n    }\n\n    if (!string.IsNullOrWhiteSpace(condition.EmployeeCode))\n    {\n        query.AppendLine(\"  AND ESLST.EMPLOYEECODERF = @EmployeeCode\");\n        sqlCommand.Parameters.Add(\"@EmployeeCode\", SqlDbType.NVarChar, 10).Value = condition.EmployeeCode;\n    }\n\n    sqlCommand.CommandType = CommandType.Text;\n    sqlCommand.CommandText  = query.ToString();\n\n    return sqlCommand.CommandText;\n}\n```\n\nポイント:\n- 文字列連結による SQL インジェクションを排除するため、すべての可変値を `SqlParameter` に置換。\n- `sqlCommand.Parameters.Clear()` を最初に呼び出し、前回のパラメータを破棄。\n- `tableName` は `switch` 式で限定されたリテラルのみを使用し、外部入力を介さずに選択。\n- `StringBuilder` で可読性を確保しつつ、`CommandType`/`CommandText` を最後に設定するよう明示的に記述。\n\n## 3. 追加の改善提案\n- **PrintType の列挙型化**：`10/20/22` などのマジックナンバーは `enum` を導入して可読性と保守性を向上させる。\n- **SqlCommand のライフサイクル管理**：本メソッドの外側で `using` 句を利用し、例外時にも確実にリソースが解放されるよう統一する。\n- **入力検証レイヤーの導入**：`SalTrgtPrintParamWork` の各プロパティにバリデーションを追加し、異常値を早期に弾く。\n- **ロギングと監査の整備**：SQL 例外や入力例外発生時にロギングを行い、監査証跡を残す。\n- **ユニットテストの整備**：正規パターン／境界入力／悪意ある入力（シングルクォート等）を対象にしたテストを用意し、回帰を防ぐ。\n\nこれらの対策により、SQL インジェクションの危険を排除するとともに、保守性と信頼性が大幅に向上します。",
  "model_used": "gpt-5-codex"
}