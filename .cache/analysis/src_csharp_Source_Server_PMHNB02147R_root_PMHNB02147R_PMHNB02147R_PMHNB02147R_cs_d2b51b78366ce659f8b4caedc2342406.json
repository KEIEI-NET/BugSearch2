{
  "path": "src/csharp/Source/Server/PMHNB02147R.root/PMHNB02147R/PMHNB02147R/PMHNB02147R.cs",
  "severity": 15,
  "problems": [],
  "original_code": "using System;\nusing System.Collections;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Text;\nusing Broadleaf.Application.Remoting.ParamData;\nusing Broadleaf.Library.Resources;\nusing Broadleaf.Library.Data;\nusing Broadleaf.Library.Data.SqlTypes;\nusing Broadleaf.Library.Data.SqlClient;\nusing Broadleaf.Xml.Serialization;\nusing Broadleaf.Application.Resources;\nusing Broadleaf.Library.Globarization;\n\nnamespace Broadleaf.Application.Remoting\n{\n    /// <summary>\n    /// o׏iDǑΉ\\DB[gIuWFNg\n    /// </summary>\n    /// <remarks>\n    /// <br>Note       : o׏iDǑΉ\\̎f[^sNXłB</br>\n    /// <br>Programmer : 22008  n</br>\n    /// <br>Date       : 2008.9.10</br>\n    /// <br></br>\n    /// <br>UpdateNote : CXRΉEREADUNCOMMITTEDΉ</br>\n    /// <br>Programmer : 30517 Ė x</br>\n    /// <br>Date       : 2011/08/01</br>\n    /// <br>UpdateNote : 2014/12/30 </br>\n    /// <br>Ǘԍ   : 11070263-00</br>\n    /// <br>           : YƗlSeikeniԕύX</br>\n    /// <br>UpdateNote : 2015/05/08 c</br>\n    /// <br>Ǘԍ  : 110",
  "analysis": "## 1. 問題の詳細分析\n- **SQLインジェクションの危険性（`SearchProc`メソッド）**  \n  `StringBuilder`で生成している SELECT 文に `_shipGdsPrimeListCndtnWork` から受け取った値を直接連結しており、ユーザー入力がそのまま SQL 文に混入します。悪意ある入力を与えることで任意の SQL を実行でき、機密情報の取得やデータ改ざん、削除などの被害が発生する恐れがあります。またアプリケーション側で例外が発生した場合、エラーメッセージからシステム内部構造が推測されるリスクも高まります。\n\n- **データアクセスオブジェクトのリソースリーク**  \n  `SqlConnection` / `SqlCommand` / `SqlDataReader` を `using` 句で確実に Dispose していないため、例外時に接続が開放されず接続プール枯渇・アプリケーション停止につながる危険があります。  \n\n- **古いコレクション型の使用**  \n  結果格納に `ArrayList` を使用しており、ボクシング・アンボクシングや型安全性の欠如から実行時エラーを招く危険があります。Generics へ移行することで処理の安全性・保守性が向上します。\n\n## 2. 改善コード\n### Before（問題のあるコード）\n```csharp\nStringBuilder sql = new StringBuilder();\nsql.AppendLine(\"SELECT ... FROM MTTLSALESSLIPRF WITH (READUNCOMMITTED) WHERE 1 = 1\");\n\nif (!string.IsNullOrEmpty(_shipGdsPrimeListCndtnWork.SlipNo))\n{\n    sql.AppendLine(\"    AND SALESSLIPNO = '\" + _shipGdsPrimeListCndtnWork.SlipNo + \"'\");\n}\n\nif (!string.IsNullOrEmpty(_shipGdsPrimeListCndtnWork.CustomerCd))\n{\n    sql.AppendLine(\"    AND CUSTOMERCODE = '\" + _shipGdsPrimeListCndtnWork.CustomerCd + \"'\");\n}\n\nSqlCommand sqlCommand = new SqlCommand(sql.ToString(), sqlConnection);\nSqlDataReader reader = sqlCommand.ExecuteReader();\n```\n\n### After（改善後のコード）\n```csharp\nvar results = new List<ShipGdsPrimeListResultWork>();\nusing (var sqlConnection = new SqlConnection(GetConnectionString()))\n{\n    sqlConnection.Open();\n    using (var sqlCommand = sqlConnection.CreateCommand())\n    {\n        var sql = new StringBuilder();\n        sql.AppendLine(\"SELECT ... FROM MTTLSALESSLIPRF WITH (READUNCOMMITTED) WHERE 1 = 1\");\n\n        if (!string.IsNullOrWhiteSpace(_shipGdsPrimeListCndtnWork.SlipNo))\n        {\n            sql.AppendLine(\"    AND SALESSLIPNO = @SlipNo\");\n            sqlCommand.Parameters.Add(\"@SlipNo\", SqlDbType.NVarChar, 20)\n                                 .Value = _shipGdsPrimeListCndtnWork.SlipNo;\n        }\n\n        if (!string.IsNullOrWhiteSpace(_shipGdsPrimeListCndtnWork.CustomerCd))\n        {\n            sql.AppendLine(\"    AND CUSTOMERCODE = @CustomerCd\");\n            sqlCommand.Parameters.Add(\"@CustomerCd\", SqlDbType.NVarChar, 10)\n                                 .Value = _shipGdsPrimeListCndtnWork.CustomerCd;\n        }\n\n        sqlCommand.CommandText = sql.ToString();\n\n        using (var reader = sqlCommand.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                results.Add(MapShipGdsPrimeListResult(reader));\n            }\n        }\n    }\n    shipGdsPrimeListResultList = results;\n}\n```\n（※ `MapShipGdsPrimeListResult` は DataReader から結果エンティティへ変換するヘルパーメソッドを想定）\n\n## 3. 追加の改善提案\n- 例外処理ではスタックトレースを保持しつつ、ユーザー向けには一般化したメッセージを返すことで情報漏えいを抑止する。\n- `ShipGdsPrimeListResultList` には `List<T>` を使用し、戻り値の型を具体化する（`object` や `ArrayList` を排除）。\n- 読み取り専用の検索であっても、必要に応じて `CommandType.StoredProcedure` を利用してアクセス制御を強化する。\n- ログ出力には入力値をそのまま記録せず、機微情報をマスキングする。\n- `GetConnectionString()` 部分は構成ファイルから取得し、接続文字列をハードコーディングしない（既存実装に合わせて SecureString や Secrets 管理の導入を検討）。\n- コードコメントは現在の仕様・実装に合わせて整理し、古い履歴（DEL/ADD コメント）を削除して保守性を高める。",
  "model_used": "gpt-5-codex"
}