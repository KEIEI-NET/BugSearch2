{
  "path": "src/csharp/Source/Server/MAKON02412R.root/MAKON02412R/MAKON02412R/MAKON02412RA.cs",
  "severity": 15,
  "problems": [],
  "original_code": "using System;\nusing System.Collections;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Text;\nusing Broadleaf.Application.Remoting.ParamData;\nusing Broadleaf.Library.Resources;\nusing Broadleaf.Library.Data;\nusing Broadleaf.Library.Data.SqlTypes;\nusing Broadleaf.Library.Data.SqlClient;\nusing Broadleaf.Xml.Serialization;\nusing Broadleaf.Application.Resources;\nusing Broadleaf.Library.Globarization;\n\nnamespace Broadleaf.Application.Remoting\n{\n    /// <summary>\n    /// d挳x`[oDB[gIuWFNg\n    /// </summary>\n    /// <remarks>\n    /// <br>Note       : d挳x`[o̎f[^sNXłB</br>\n    /// <br>Programmer : 22035 O O</br>\n    /// <br>Date       : 2007.05.08</br>\n    /// <br></br>\n    /// <br>Update Note: 980081  Rc F</br>\n    /// <br>           : 2007.12.04 ʊΉ</br>\n    /// <br>Update Note: FSI֓ aG</br>\n    /// <br>           : 2012/11/01 xf[^ɒlzE萔zfĂȂΉ</br>\n    /// </remarks>\n    [Serializable]\n    public class LedgerPaymentSlpWorkDB : RemoteDB\n    {\n        /// <summary>\n        /// d挳x`[oDB",
  "analysis": "## 1. 問題の詳細分析\n1. **SQLインジェクションのリスク（危険度: 高）**  \n   `SearchProc` メソッド内で `enterpriseCode` や `addUpSecCodeList` などの入力値を文字列連結で直接 SQL 文に埋め込んでいます。これらの値が外部から渡される場合、悪意ある SQL 文を混入させることでデータベースの改ざん・情報漏洩が発生する恐れがあります。\n\n2. **入力値検証の欠如による不正パラメータ混入リスク**  \n   `addUpSecCodeList` の中身の型・値を確認せずにすべて SQL の `IN` 句に展開していると、不正な文字列や危険な構文が混入して SQL を破壊する可能性があります。\n\n## 2. 改善コード\n### Before（問題のあるコード）\n```csharp\nstring sqlText = string.Empty;\n\ntry\n{\n    sqlText += \"SELECT\" + Environment.NewLine;\n    sqlText += \"   MAIN.ENTERPRISECODERF\" + Environment.NewLine;\n    sqlText += \"  ,MAIN.DEBITNOTEDIVRF\" + Environment.NewLine;\n    sqlText += \"  ,MAIN.PAYMENTSLIPNORF\" + Environment.NewLine;\n    sqlText += \"  ,MAIN.SUPPLIERFORMALRF\" + Environment.NewLine;\n    sqlText += \"  ,MAIN.SUPPLIERSLIPNORF\" + Environment.NewLine;\n    sqlText += \"  ,MAIN.SUPPLIERCDRF\" + Environment.NewLine;\n    // 略: この後も文字列連結で WHERE 句を構築している\n```\n\n### After（改善後のコード）\n```csharp\nprivate int SearchProc(\n    out object ledgerPaymentSlpWork,\n    string enterpriseCode,\n    ArrayList addUpSecCodeList,\n    int startSupplierCd,\n    int endSupplierCd,\n    int startAddUpDate,\n    int endAddUpDate,\n    ref SqlConnection sqlConnection)\n{\n    if (sqlConnection == null) throw new ArgumentNullException(nameof(sqlConnection));\n\n    ledgerPaymentSlpWork = null;\n    var resultList = new ArrayList();\n    var status = (int)ConstantManagement.DB_Status.ctDB_EOF;\n\n    try\n    {\n        if (sqlConnection.State != ConnectionState.Open)\n        {\n            sqlConnection.Open();\n        }\n\n        using var command = sqlConnection.CreateCommand();\n        var sb = new StringBuilder();\n        sb.AppendLine(\"SELECT\");\n        sb.AppendLine(\"   MAIN.ENTERPRISECODERF\");\n        sb.AppendLine(\"  ,MAIN.DEBITNOTEDIVRF\");\n        sb.AppendLine(\"  ,MAIN.PAYMENTSLIPNORF\");\n        sb.AppendLine(\"  ,MAIN.SUPPLIERFORMALRF\");\n        sb.AppendLine(\"  ,MAIN.SUPPLIERSLIPNORF\");\n        sb.AppendLine(\"  ,MAIN.SUPPLIERCDRF\");\n        sb.AppendLine(\"FROM   PAYMENTSLPRF MAIN\");\n        sb.AppendLine(\"WHERE  MAIN.ENTERPRISECODERF = @EnterpriseCode\");\n        sb.AppendLine(\"   AND MAIN.SUPPLIERCDRF BETWEEN @StartSupplierCd AND @EndSupplierCd\");\n        sb.AppendLine(\"   AND MAIN.ADDUPDATE BETWEEN @StartAddUpDate AND @EndAddUpDate\");\n\n        command.Parameters.Add(\"@EnterpriseCode\", SqlDbType.VarChar, 10).Value = enterpriseCode;\n        command.Parameters.Add(\"@StartSupplierCd\", SqlDbType.Int).Value = startSupplierCd;\n        command.Parameters.Add(\"@EndSupplierCd\", SqlDbType.Int).Value = endSupplierCd;\n        command.Parameters.Add(\"@StartAddUpDate\", SqlDbType.Int).Value = startAddUpDate;\n        command.Parameters.Add(\"@EndAddUpDate\", SqlDbType.Int).Value = endAddUpDate;\n\n        if (addUpSecCodeList != null && addUpSecCodeList.Count > 0)\n        {\n            var validCodes = new List<string>();\n            var paramNames = new List<string>();\n\n            for (int i = 0; i < addUpSecCodeList.Count; i++)\n            {\n                if (addUpSecCodeList[i] is string code && !string.IsNullOrWhiteSpace(code))\n                {\n                    var parameterName = $\"@AddUpSecCode{i}\";\n                    paramNames.Add(parameterName);\n                    command.Parameters.Add(parameterName, SqlDbType.VarChar, 10).Value = code;\n                }\n            }\n\n            if (paramNames.Count > 0)\n            {\n                sb.AppendLine($\"   AND MAIN.ADDUPSECCODERF IN ({string.Join(\",\", paramNames)})\");\n            }\n        }\n\n        command.CommandText = sb.ToString();\n\n        using var reader = command.ExecuteReader();\n        while (reader.Read())\n        {\n            // 必要に応じて実体クラスへマッピングする\n            resultList.Add(new\n            {\n                EnterpriseCode = reader[\"ENTERPRISECODERF\"],\n                DebitNoteDiv = reader[\"DEBITNOTEDIVRF\"],\n                PaymentSlipNo = reader[\"PAYMENTSLIPNORF\"],\n                SupplierFormal = reader[\"SUPPLIERFORMALRF\"],\n                SupplierSlipNo = reader[\"SUPPLIERSLIPNORF\"],\n                SupplierCd = reader[\"SUPPLIERCDRF\"]\n            });\n        }\n\n        ledgerPaymentSlpWork = resultList;\n        status = resultList.Count > 0\n            ? (int)ConstantManagement.DB_Status.ctDB_OK\n            : (int)ConstantManagement.DB_Status.ctDB_EOF;\n    }\n    catch (SqlException ex)\n    {\n        WriteErrorLog(ex, $\"LedgerPaymentSlpWorkDB.SearchProc SqlException={ex.Message}\");\n        status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;\n    }\n    catch (Exception ex)\n    {\n        WriteErrorLog(ex, $\"LedgerPaymentSlpWorkDB.SearchProc Exception={ex.Message}\");\n        status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;\n    }\n\n    return status;\n}\n```\n\n## 3. 追加の改善提案\n- **強い型付けの導入**：`ArrayList` ではなく `List<LedgerPaymentSlpWorkDto>` のようにジェネリックコレクションと DTO を使用すると、変換時のエラーを減らし可読性も向上します。\n- **入力値の事前バリデーション**：日付・コードなどのフォーマットを呼び出し元で検証し、無効な値は早期に弾くことで、不正リクエストをさらに減らせます。\n- **ログの詳細化**：SQL例外と一般例外を分けてログに記録するようにし、必要に応じてパラメータ値をマスキングした上でログ出力すると、監査や障害調査が容易になります。\n- **非同期実行の検討**：高トラフィック環境では `await command.ExecuteReaderAsync()` を用いた非同期化によりスレッド効率を改善できます。",
  "model_used": "gpt-5-codex"
}