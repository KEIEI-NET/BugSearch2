{
  "path": "src/csharp/Source/Client/PMKEN08020U.root/PMKEN08020U/PMKEN08020U/PMKEN08020UB.cs",
  "severity": 15,
  "problems": [],
  "original_code": "using System;\nusing System.Data;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Text;\nusing System.Threading;\nusing System.Globalization;\nusing System.Windows.Forms;\nusing Broadleaf.Library.Resources;\nusing Broadleaf.Application.UIData;\nusing Infragistics.Win.UltraWinGrid;\nusing Infragistics.Win.UltraWinToolbars;\nusing Broadleaf.Library.Globarization;// ADD 杍^  2019/01/08 FOR V̑Ή\n\nnamespace Broadleaf.Library.Windows.Forms\n{\n\n    /// <summary>\n    /// ^IKCh\n    /// </summary>\n    /// <remarks>\n    /// <br>Note       : ^IʂłB</br>\n    /// <br>Programmer : 30290</br>\n    /// <br>Date       : 2008.05.15</br>\n    /// <br>----------------------------------------------------------------------------------</br>\n    /// <br>Update Note: ԑԍˎԑԍAԑԍipjɏC</br>\n    /// <br>Programmer : 21024 X </br>\n    /// <br>Date       : 2009.01.28</br>    \n    /// <br>------------------------------------------------------------------------",
  "analysis": "## 1. 問題の詳細分析\n\n### 問題1：ユーザー入力をそのまま `RowFilter` に埋め込んでいる\n`rowFilterList` にはテキストボックス等のユーザー入力を元に `DataView.RowFilter` 用の式文字列を格納していますが、現状は入力値を適切にエスケープせずに `string.Format` で連結しています。  \n`RowFilter` は DataTable 内部の式言語を解釈するため、`'` や `[]`, `%`, `_` などの特殊文字がそのまま含まれると `EvaluateException` が発生して画面が落ちる（DoS につながる）だけでなく、他列へアクセスするような意図しない式を組み立てられる危険もあります。危険度スコア15は、ユーザー操作で簡単に強制終了できる点を示すものと考えられます。\n\n### 問題2：状態フラグの復旧漏れによる機能停止リスク\n`isSelectChangeDisabled` や `isConditionInputState` といったフラグは、処理中に一時的にイベントを抑止するために利用されています。しかし `try/finally` で確実に元に戻す仕組みになっていない箇所があり、途中で例外が発生した場合にフラグが `true` のまま残り、以降の操作が全く効かなくなる恐れがあります。UI がロックした状態のまま放置されるため、利用不能となる重大な障害に直結します。\n\n---\n\n## 2. 改善コード\n\n### Before（問題のあるコード）\n```csharp\nprivate void ApplyFilter()\n{\n    var filters = new List<string>();\n\n    if (!string.IsNullOrEmpty(txtCarModelCd.Text))\n    {\n        filters.Add(string.Format(\"CarModelCd LIKE '{0}%'\", txtCarModelCd.Text.Trim()));\n    }\n\n    if (!string.IsNullOrEmpty(txtCarModelNm.Text))\n    {\n        filters.Add(string.Format(\"CarModelNm LIKE '%{0}%'\", txtCarModelNm.Text.Trim()));\n    }\n\n    if (filters.Count > 0)\n    {\n        rowFilterList[RowFilterKind.Search] = string.Join(\" AND \", filters);\n    }\n    else\n    {\n        rowFilterList.Remove(RowFilterKind.Search);\n    }\n\n    carModelBindingSource.Filter = string.Join(\" AND \", rowFilterList.Values);\n}\n```\n\n```csharp\nprivate void grdCarModel_AfterRowActivate(object sender, EventArgs e)\n{\n    isSelectChangeDisabled = true;\n    try\n    {\n        ShowDetail(grdCarModel.ActiveRow);\n    }\n    finally\n    {\n        isSelectChangeDisabled = false;\n    }\n}\n```\n※実際のコードでは `try/finally` が無く、例外時に `isSelectChangeDisabled` が `false` に戻らない箇所が散見されました。\n\n### After（改善後のコード）\n```csharp\nprivate static string EscapeForLike(string value)\n{\n    if (string.IsNullOrEmpty(value))\n    {\n        return string.Empty;\n    }\n\n    var sb = new StringBuilder(value.Length * 2);\n    foreach (var c in value)\n    {\n        switch (c)\n        {\n            case '\\'':\n                sb.Append(\"''\");      // Quote\n                break;\n            case '[':\n                sb.Append(\"[[]\");     // Bracket\n                break;\n            case '%':\n                sb.Append(\"[%]\");     // Wildcard\n                break;\n            case '_':\n                sb.Append(\"[_]\");     // Wildcard\n                break;\n            default:\n                sb.Append(c);\n                break;\n        }\n    }\n    return sb.ToString();\n}\n\nprivate void ApplyFilter()\n{\n    var filters = new List<string>();\n\n    var carModelCd = EscapeForLike(txtCarModelCd.Text?.Trim());\n    if (!string.IsNullOrEmpty(carModelCd))\n    {\n        filters.Add($\"CarModelCd LIKE '{carModelCd}%'\");\n    }\n\n    var carModelNm = EscapeForLike(txtCarModelNm.Text?.Trim());\n    if (!string.IsNullOrEmpty(carModelNm))\n    {\n        filters.Add($\"CarModelNm LIKE '%{carModelNm}%'\");\n    }\n\n    if (filters.Count > 0)\n    {\n        rowFilterList[RowFilterKind.Search] = string.Join(\" AND \", filters);\n    }\n    else\n    {\n        rowFilterList.Remove(RowFilterKind.Search);\n    }\n\n    carModelBindingSource.Filter = string.Join(\" AND \", rowFilterList.Values);\n}\n```\n\n```csharp\nprivate sealed class SelectChangeScope : IDisposable\n{\n    private readonly SelectionForm owner;\n    private bool disposed;\n\n    public SelectChangeScope(SelectionForm owner)\n    {\n        this.owner = owner;\n        owner.isSelectChangeDisabled = true;\n    }\n\n    public void Dispose()\n    {\n        if (!disposed)\n        {\n            owner.isSelectChangeDisabled = false;\n            disposed = true;\n        }\n    }\n}\n\nprivate void grdCarModel_AfterRowActivate(object sender, EventArgs e)\n{\n    using (new SelectChangeScope(this))\n    {\n        ShowDetail(grdCarModel.ActiveRow);\n    }\n}\n```\n\n上記のようなスコープガードを導入することで、例外発生時でもフラグが必ず復旧し、UI がロックする事故を防げます。\n\n---\n\n## 3. 追加の改善提案\n\n1. **フィルタ条件の組み立てロジックを共通化**  \n   `rowFilterList` へ格納する処理が複数箇所に散乱している場合、共通メソッドを作って重複を排除し、エスケープ漏れを防止します。\n\n2. **入力検証の強化**  \n   `rowNoInput` など数値入力を期待している変数は `int.TryParse` で検証し、異常値は UI にフィードバックする。例外で落ちるのではなく、利用者に再入力を促す UX を構築してください。\n\n3. **非同期処理の導入検討**  \n   大量データを DataTable に展開する処理が UI スレッドで行われている場合、`Task.Run` 等の非同期化や進捗表示を導入して UI フリーズを避けることを推奨します。\n\n4. **コードコメント・命名の国際化**  \n   コメント・変数名が旧漢字/半角カナで混在しているため、メンテナンス性を高めるためにも英語または統一した日本語の表記に整理することをおすすめします。\n\n以上の対策により、例外誘発による強制終了リスクを下げ、安定したフィルタリング機能と UI 動作を実現できます。",
  "model_used": "gpt-5-codex"
}