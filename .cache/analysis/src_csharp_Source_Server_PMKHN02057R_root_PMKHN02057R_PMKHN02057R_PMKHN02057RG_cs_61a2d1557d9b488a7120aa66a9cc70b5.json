{
  "path": "src/csharp/Source/Server/PMKHN02057R.root/PMKHN02057R/PMKHN02057R/PMKHN02057RG.cs",
  "severity": 15,
  "problems": [],
  "original_code": "//****************************************************************************//\n// VXe         : .NSV[Y\n// vO   : Ly[ѕ\\\n// vOTv   : Ly[ѕ\\@sҕʗp\n//----------------------------------------------------------------------------//\n//                (c)Copyright  2011 Broadleaf Co.,Ltd.\n//============================================================================//\n// \n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : c\n//     2011/05/19  Ce : VK쐬\n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : \n//     2011/07/05  Ce : Redmine Q #22746 ̑Ή\n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : \n//     2011/07/07  Ce : Redmine dlA #22792 ̑Ή\n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : \n//     2011/07/11  Ce : Redmine dlύX #22860 ̑Ή\n//------------------------------------------",
  "analysis": "## 1. 問題の詳細分析\n- **SQLインジェクションの危険性 (MakeSalesSelectStringProc)**  \n  `CampaignstRsltListPrtWork` から渡される `AddUpSectionCode`・`BelongSectionCode`・`CustomerCode`・`BLGroupCode` などの値を、そのまま文字列連結して SQL を生成しています。  \n  リモート呼び出し経由で外部から設定できる値を引用符付き文字列に埋め込んでいるため、`' OR 1=1 --` 等を差し込まれるだけで任意の SQL が実行され、機密データの漏洩や改ざんが発生するリスクがあります。危険度スコア 15 はこの想定に合致します。\n\n## 2. 改善コード\n### Before（問題のあるコード）\n```csharp\nif (!string.IsNullOrEmpty(CndtnWork.CustomerCode))\n{\n    sqlBuilder.Append(\" AND CUS.CUSTOMER_CODE = '\" + CndtnWork.CustomerCode + \"'\");\n}\nif (!string.IsNullOrEmpty(CndtnWork.BLGroupCode))\n{\n    sqlBuilder.Append(\" AND GRP.GROUP_CODE = '\" + CndtnWork.BLGroupCode + \"'\");\n}\nif (!string.IsNullOrEmpty(CndtnWork.GoodsNo))\n{\n    sqlBuilder.Append(\" AND GDS.GOODS_NO = '\" + CndtnWork.GoodsNo + \"'\");\n}\n```\n\n### After（改善後のコード）\n```csharp\nif (!string.IsNullOrEmpty(CndtnWork.CustomerCode))\n{\n    sqlBuilder.Append(\" AND CUS.CUSTOMER_CODE = @CustomerCode\");\n    sqlCommand.Parameters.Add(\"@CustomerCode\", SqlDbType.VarChar, 20).Value = CndtnWork.CustomerCode.Trim();\n}\nif (!string.IsNullOrEmpty(CndtnWork.BLGroupCode))\n{\n    sqlBuilder.Append(\" AND GRP.GROUP_CODE = @BlGroupCode\");\n    sqlCommand.Parameters.Add(\"@BlGroupCode\", SqlDbType.VarChar, 20).Value = CndtnWork.BLGroupCode.Trim();\n}\nif (!string.IsNullOrEmpty(CndtnWork.GoodsNo))\n{\n    sqlBuilder.Append(\" AND GDS.GOODS_NO = @GoodsNo\");\n    sqlCommand.Parameters.Add(\"@GoodsNo\", SqlDbType.VarChar, 30).Value = CndtnWork.GoodsNo.Trim();\n}\n```\n- すべての動的条件を `SqlParameter` でバインドし、SQL 文内では `@ParamName` を使用することでインジェクションを防いでいます。\n- 適切な桁数 (`SqlDbType` とサイズ) を設定し、`Trim()` などで異常データを除去しています。\n\n## 3. 追加の改善提案\n- **パラメータのバインド共通化**：条件が多数あるため、辞書やヘルパーメソッドを用いて繰り返しを削減すると保守性が向上します。\n- **入力検証の追加**：数値や日付は `int.TryParse` / `DateTime.TryParse` などで形式チェックし、無効な値は即座にリジェクトします。\n- **Null 安全性**：`MakeSalesSelectStringProc` 冒頭で毎回状態フラグ (`bAddUpSecCode` など) をリセットし、再利用時の誤動作を防止してください。\n- **SqlCommand の明示的設定**：`sqlCommand.CommandText = sqlBuilder.ToString()` や `CommandType = CommandType.Text` を確実に設定し、SQL 実行側の誤設定を回避します。\n- **例外ハンドリングとログ**：パラメータ追加時・SQL 実行時の例外を捕捉し、監査ログに残すことで不正アクセスの検知力を高められます。",
  "model_used": "gpt-5-codex"
}