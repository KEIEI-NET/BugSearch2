{
  "path": "src/csharp/Source/Server/PMKHN08635R.root/PMKHN08635R/PMKHN08635R/PMKHN08635RC.cs",
  "severity": 15,
  "problems": [],
  "original_code": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Text;\nusing Broadleaf.Application.Remoting.ParamData;\nusing Broadleaf.Library.Resources;\nusing Broadleaf.Library.Data;\nusing Broadleaf.Library.Data.SqlTypes;\nusing Broadleaf.Library.Data.SqlClient;\nusing Broadleaf.Xml.Serialization;\nusing Broadleaf.Application.Resources;\nusing Broadleaf.Library.Globarization;\n\nnamespace Broadleaf.Application.Remoting\n{\n    class MTtlSaSlipGoods : MTtlSaSlipBase, IMTtlSaSlip\n    {\n        #region [iʗp Select]\n        /// <summary>\n        /// iʗpSELECT \n        /// </summary>\n        /// <param name=\"sqlCommand\">SqlCommandIuWFNg</param>\n        /// <param name=\"CndtnWork\"></param>\n        /// <returns>iʗpSELECT</returns>\n        /// <br>Note       : iʗpSELECT쐬Ė߂܂</br>\n        /// <br>Programmer : 23012  [N</br>\n        /// <br>Date       : 2008.09.08</br>\n        public string MakeSelectString(ref SqlCommand sqlCommand, ",
  "analysis": "## 1. 問題の詳細分析\n1. **SQLインジェクションの危険性（重大）**  \n   `MakeSelectStringProc` では、`CndtnWork` 内の値をそのまま文字列連結で SQL 文に挿入しています。`SalTrgtPrintParamWork` は画面や外部インターフェースから渡される入力値であるため、悪意ある文字列（例: `' OR 1=1 --`）を与えられると、意図しないデータ取得・改ざんや情報漏えいが発生する恐れがあります。危険度スコア 15 の主因です。\n\n2. **SQL 文の文字列連結によるメンテナンス性・保守性の低下（中）**  \n   `Environment.NewLine` を多用しつつ `+=` で長大な SQL を組み立てており、条件の追加や改修時にヒューマンエラーが起きやすい構造になっています。引数の追加や条件分岐が複雑になるほどバグが混入しやすくなります。\n\n## 2. 改善コード\n### Before（問題のあるコード）\n```csharp\n// 一例: 画面入力値がそのまま SQL に埋め込まれている\nselectTxt += \" WHERE GSLSTSUB.ENTERPRISECODERF = '\" + CndtnWork.EnterpriseCode + \"'\" + Environment.NewLine;\nselectTxt += \"   AND GSLSTSUB.SALESCODERF = '\" + CndtnWork.SalesCode + \"'\" + Environment.NewLine;\nselectTxt += \"   AND GSLSTSUB.ACCOUNTINGMONTH BETWEEN '\" + CndtnWork.StartMonth + \"' AND '\" + CndtnWork.EndMonth + \"'\" + Environment.NewLine;\n\nsqlCommand.CommandText = selectTxt;\nreturn selectTxt;\n```\n\n### After（改善後のコード）\n```csharp\nprivate string MakeSelectStringProc(ref SqlCommand sqlCommand,\n                                    SalTrgtPrintParamWork cndtnWork,\n                                    ConstantManagement.LogicalMode logicalMode)\n{\n    var sb = new StringBuilder();\n    var where = new StringBuilder();\n\n    string tableName = \"SCINF\";\n    switch (cndtnWork.PrintType)\n    {\n        case 44: tableName = \"USGDUS\"; break;\n        case 45: tableName = \"USGDUE\"; break;\n    }\n\n    sb.AppendLine(\"SELECT\")\n      .AppendLine($\"  {tableName}.UPDATEDATETIMERF\")\n      .AppendLine(\" ,GSLST.SECTIONCODERF\")\n      .AppendLine(\" ,SCINF.SECTIONGUIDESNMRF\")\n      .AppendLine(\" ,GSLST.SALESCODERF\")\n      .AppendLine(\" ,USGDUS.GUIDENAMERF AS SALESCODENAME\")\n      .AppendLine(\" ,GSLST.ENTERPRISEGANRECODERF\")\n      .AppendLine(\" ,USGDUE.GUIDENAMERF AS ENTERPRISEGANRECODENAME\")\n      .AppendLine(\" ,GSLST.SALESTARGETMONEY1\")\n      .AppendLine(\" ,GSLST.SALESTARGETMONEY2\")\n      .AppendLine(\" ,GSLST.SALESTARGETMONEY3\")\n      // … 省略 …\n      .AppendLine(\"FROM (\")\n      .AppendLine(\"  SELECT\")\n      .AppendLine(\"    GSLSTSUB.ENTERPRISECODERF\")\n      .AppendLine(\"  FROM GSLST GSLSTSUB\")\n      .AppendLine(\") GSLST\")\n      .AppendLine(\"INNER JOIN SCINF ON SCINF.SECTIONCODERF = GSLST.SECTIONCODERF\")\n      .AppendLine(\"LEFT JOIN USGDUS ON USGDUS.GUIDECODERF = GSLST.SALESCODERF\")\n      .AppendLine(\"LEFT JOIN USGDUE ON USGDUE.GUIDECODERF = GSLST.ENTERPRISEGANRECODERF\");\n\n    // 以降、WHERE 句はパラメータで制御\n    if (!string.IsNullOrWhiteSpace(cndtnWork.EnterpriseCode))\n    {\n        where.AppendLine(\" AND GSLST.ENTERPRISECODERF = @EnterpriseCode\");\n        sqlCommand.Parameters.Add(\"@EnterpriseCode\", SqlDbType.VarChar, 12)\n                   .Value = cndtnWork.EnterpriseCode;\n    }\n\n    if (!string.IsNullOrWhiteSpace(cndtnWork.SalesCode))\n    {\n        where.AppendLine(\" AND GSLST.SALESCODERF = @SalesCode\");\n        sqlCommand.Parameters.Add(\"@SalesCode\", SqlDbType.VarChar, 12)\n                   .Value = cndtnWork.SalesCode;\n    }\n\n    if (!string.IsNullOrWhiteSpace(cndtnWork.StartMonth) &&\n        !string.IsNullOrWhiteSpace(cndtnWork.EndMonth))\n    {\n        where.AppendLine(\" AND GSLST.ACCOUNTINGMONTH BETWEEN @StartMonth AND @EndMonth\");\n        sqlCommand.Parameters.Add(\"@StartMonth\", SqlDbType.Char, 6)\n                   .Value = cndtnWork.StartMonth;\n        sqlCommand.Parameters.Add(\"@EndMonth\", SqlDbType.Char, 6)\n                   .Value = cndtnWork.EndMonth;\n    }\n\n    if (where.Length > 0)\n    {\n        sb.AppendLine(\"WHERE 1 = 1\");\n        sb.Append(where.ToString());\n    }\n\n    sqlCommand.CommandText = sb.ToString();\n    return sqlCommand.CommandText;\n}\n```\n\n**ポイント**\n- `StringBuilder` を利用し、SQL の組み立てを読みやすくした。\n- すべての外部入力値を `SqlParameter` としてバインドし、SQL インジェクションを防止。\n- 条件が増減しても `WHERE 1=1` + 追記方式で比較的安全に維持できるようにした。\n\n## 3. 追加の改善提案\n1. **入力検証の強化**  \n   `CndtnWork` の各値に対して、文字種や形式（年月フォーマットなど）を SQL を組み立てる前に検証してください。不正値は早期に弾くことで攻撃面をさらに狭められます。\n\n2. **`SqlCommand` の生成責務の見直し**  \n   `ref SqlCommand` に組み立てを任せるのではなく、メソッド内部で `using var command = new SqlCommand();` を生成して返すようにすると、リソース管理や責務の分離が明確になります。\n\n3. **テストの追加**  \n   SQL インジェクション防止が期待通りに動作するか、例えばシングルクォートなど危険文字を含む入力を使ったユニットテスト／統合テストを整備すると、安全性が継続的に確認できます。\n\n4. **ロギングと監査**  \n   望ましくない入力が渡された際に警告ログを残すなど、異常検知を行う仕組みを追加することで侵入の早期発見につながります。",
  "model_used": "gpt-5-codex"
}