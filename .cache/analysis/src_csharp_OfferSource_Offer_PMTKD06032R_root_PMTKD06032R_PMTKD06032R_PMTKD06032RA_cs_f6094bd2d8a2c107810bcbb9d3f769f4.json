{
  "path": "src/csharp/OfferSource/Offer/PMTKD06032R.root/PMTKD06032R/PMTKD06032R/PMTKD06032RA.cs",
  "severity": 18,
  "problems": [],
  "original_code": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Text;\nusing Broadleaf.Application.Remoting.ParamData;\nusing Broadleaf.Library.Resources;\nusing Broadleaf.Library.Data;\nusing Broadleaf.Library.Data.SqlTypes;\nusing Broadleaf.Library.Data.SqlClient;\nusing Broadleaf.Xml.Serialization;\nusing Broadleaf.Application.Remoting;\nusing Broadleaf.Application.Resources;\n\nnamespace Broadleaf.Application.Remoting\n{\n    /// <summary>\n    /// DǂakR[hDB[gIuWFNg\n    /// </summary>\n    /// <remarks>\n    /// <br>Note       : DǂakR[h̎f[^sNXłB</br>\n    /// <br>Programmer : 30290</br>\n    /// <br>Date       : 2008.05.15</br>\n    /// <br></br>\n    /// <br>Update Note: ւ̌C</br>\n    /// <br>Programmer : 21024@X </br>\n    /// <br>Date       : 2009/10/19</br>\n    /// <br></br>\n    /// <br>Update Note: ĩ}X^̑S[J[p̑Ή</br>\n    /// <br>Programmer : 21024@X </br>\n    /// <br>Date       : 2009/10/22</br>\n    /// </remarks>\n    [Serializ",
  "analysis": "## 1. 問題の詳細分析\n1. **SQLインジェクションの危険性**  \n   - `PrimeSearchSelect` や `PrimeSearchSubstSelect` をベースに、外部から渡される検索条件パラメータを文字列連結で追加しているため（`\" ... = '\" + param.Value + \"'\"` のようなコード）、ユーザー入力に悪意がある場合に SQL 文を書き換えられ、データ改ざん・漏えい・システム障害を引き起こす可能性が非常に高いです。危険度スコア 18 の主因です。\n\n2. **SqlConnection / SqlCommand の明示的な close・dispose 漏れ**  \n   - 実行部で `SqlConnection` や `SqlCommand` が `using` ブロックを使わずに生成されているため、例外発生時に接続が解放されないリスクがあります。コネクションプール枯渇・パフォーマンス低下につながります。\n\n3. **例外処理が不十分で詳細情報が露出する可能性**  \n   - 例外を catch せず上位に丸投げしている、または例外メッセージをそのままクライアントに返却しているため、データベース構造など内部情報が漏れる可能性があります。\n\n## 2. 改善コード\n### Before（問題のあるコード）\n```csharp\nstring sql = PrimeSearchSelect;\n\nif (!string.IsNullOrEmpty(param.PrimeKind))\n{\n    sql += \" AND ORGPARTSNORF.PRMSETDTLNO2RF = '\" + param.PrimeKind + \"'\";\n}\n\nif (!string.IsNullOrEmpty(param.PartNo))\n{\n    sql += \" AND PRIMEPARTSRF.PRIMEPARTSNOWITHHRF LIKE '%\" + param.PartNo + \"%'\";\n}\n\nSqlConnection connection = new SqlConnection(this.ConnectionString);\nSqlCommand command = new SqlCommand(sql, connection);\n\nconnection.Open();\nSqlDataAdapter adapter = new SqlDataAdapter(command);\nDataSet ds = new DataSet();\nadapter.Fill(ds);\nconnection.Close();\n\nreturn ds;\n```\n\n### After（改善後のコード）\n```csharp\nstring sql = PrimeSearchSelect;\nvar command = new SqlCommand();\nvar conditions = new List<string>();\n\nif (!string.IsNullOrEmpty(param.PrimeKind))\n{\n    conditions.Add(\"ORGPARTSNORF.PRMSETDTLNO2RF = @PrimeKind\");\n    command.Parameters.Add(\"@PrimeKind\", SqlDbType.VarChar, 20).Value = param.PrimeKind;\n}\n\nif (!string.IsNullOrEmpty(param.PartNo))\n{\n    conditions.Add(\"PRIMEPARTSRF.PRIMEPARTSNOWITHHRF LIKE @PartNo\");\n    command.Parameters.Add(\"@PartNo\", SqlDbType.VarChar, 50).Value = $\"%{param.PartNo}%\";\n}\n\nif (conditions.Count > 0)\n{\n    sql += \" WHERE \" + string.Join(\" AND \", conditions);\n}\n\ncommand.CommandText = sql;\n\nusing (var connection = new SqlConnection(this.ConnectionString))\nusing (command)\nusing (var adapter = new SqlDataAdapter(command))\n{\n    command.Connection = connection;\n    var ds = new DataSet();\n    adapter.Fill(ds);\n    return ds;\n}\n```\n\n## 3. 追加の改善提案\n- **クエリビルダーの整理**：`PrimeSearchSelect` / `PrimeSearchSubstSelect` を `StringBuilder` もしくはリソース化して管理し、条件節を共通化することで保守性を向上。\n- **データアクセス層の共通化**：ORM（例：Entity Framework）や Dapper の導入、もしくはラッパーを用意してパラメータ化を強制する。\n- **ログ出力の強化**：例外は内部ログにのみ記録し、クライアントには汎用メッセージを返す。  \n- **入力バリデーション**：パラメータの型・長さ・フォーマットチェックを行い、そもそも危険な値が到達しないようにする。",
  "model_used": "gpt-5-codex"
}