{
  "path": "src/csharp/OfferSource/Web/PMChangeInfo/SFCMN00773W.aspx.cs",
  "severity": 15,
  "problems": [],
  "original_code": "﻿using System;\nusing System.Data;\nusing System.Configuration;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Web;\nusing System.Web.Security;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\nusing System.Web.UI.WebControls.WebParts;\nusing System.Web.UI.HtmlControls;\n\nusing Broadleaf.Application.Common;\nusing Broadleaf.Application.Remoting.ParamData;\nusing Broadleaf.Application.Resources;\nusing Broadleaf.Library.Globarization;\nusing Broadleaf.Library.Resources;\nusing Broadleaf.Web.UI.WebControls;\n\n// Global.aspx アクセス用\nusing Globals = ASP.global_asax;\n\nnamespace Broadleaf.Web.UI\n{\n\tpublic partial class SFCMN00773W : System.Web.UI.Page\n\t{\n\t\t#region << Private Constant >>\n\t\t\n\t\t#region ■URL\n\n\t\t/// <summary>トップページURL</summary>\n\t\tprivate const string ctTopPageUrl            = \"SFCMN00771W.aspx\";\n\t\t/// <summary>.NS 配信詳細情報URL</summary>\n\t\tprivate const string ctMulticastDetailUrl    = \"SFCMN00772W.aspx\";\n\t\t///",
  "analysis": "## 1. 問題の詳細分析\n\n### 問題1：HTMLエンコードを行わずに検索結果を画面表示している  \n検索結果（変更内容など）を `Label` や `Literal` の `Text` プロパティへそのまま代入している場合、  \nDB に保存されたスクリプト（例：`<script>alert(1)</script>`）がそのまま出力され、ストアド XSS が発生します。  \n利用者が入力した値が別ユーザーの画面に表示されるページなので、被害範囲が大きく危険度が高いです。\n\n### 問題2：別紙ファイル名を検証せず相対パスへ連結している  \n`ctAnotherSheetsDirUrl` に対し、DB やリクエストから取得したファイル名をそのまま `NavigateUrl` などに連結すると、  \n`../` などを含む不正な値を指定された場合にディレクトリトラバーサルで任意のファイルを指定できる恐れがあります。  \nIIS では相対 URL の解決時に上位ディレクトリへ到達できてしまうケースがあり、情報漏えいにつながります。\n\n## 2. 改善コード\n\n### Before（問題のあるコード）\n```csharp\n// 変更内容をそのまま出力\nlblChangeContents.Text = row[\"CHANGE_CONTENTS\"].ToString();\n\n// 別紙の相対パスをそのまま連結\nlnkAnotherSheet.NavigateUrl = ctAnotherSheetsDirUrl + row[\"ANOTHER_SHEET_NAME\"].ToString();\n```\n\n### After（改善後のコード）\n```csharp\nusing System.IO;\nusing System.Web;\n\n// …\n\n// HTML エンコードを行って XSS を防止\nvar rawChangeContents = row[\"CHANGE_CONTENTS\"]?.ToString() ?? string.Empty;\nlblChangeContents.Text = HttpUtility.HtmlEncode(rawChangeContents);\n\n// ファイル名を検証し、安全な相対パスに変換\nvar rawSheetName = row[\"ANOTHER_SHEET_NAME\"]?.ToString() ?? string.Empty;\nvar safeSheetName = Path.GetFileName(rawSheetName); // ディレクトリトラバーサル防止\nif (!string.IsNullOrEmpty(safeSheetName))\n{\n    var combinedPath = VirtualPathUtility.Combine(ctAnotherSheetsDirUrl, safeSheetName);\n    lnkAnotherSheet.NavigateUrl = ResolveUrl(combinedPath);\n}\nelse\n{\n    lnkAnotherSheet.Visible = false; // 不正値の場合はリンクを非表示にするなどの対応\n}\n```\n\n## 3. 追加の改善提案\n\n- 画面初期化処理（`ScreenInitialize`）で `try-catch` を設け、例外をログ出力したうえでユーザーへわかりやすいメッセージを表示する。\n- 自前で保持しているヘルパークラス（`ChangeInfoSearchManager` など）が `IDisposable` を実装している場合は `using` ブロックで明示的に破棄する。\n- `ViewState` を使って検索条件を保持しているので、`ViewStateUserKey = Session.SessionID;` を `OnInit` などで設定し CSRF に備える。\n- クライアントスクリプトの読み込みは `ClientScriptManager.RegisterClientScriptInclude` と `ResolveClientUrl` を使って、仮想ディレクトリ配下でも正しいパスを解決するようにする。",
  "model_used": "gpt-5-codex"
}