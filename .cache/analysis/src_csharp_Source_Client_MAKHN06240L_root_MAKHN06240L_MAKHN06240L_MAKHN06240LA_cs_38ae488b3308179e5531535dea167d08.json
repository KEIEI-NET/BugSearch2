{
  "path": "src/csharp/Source/Client/MAKHN06240L.root/MAKHN06240L/MAKHN06240L/MAKHN06240LA.cs",
  "severity": 23,
  "problems": [],
  "original_code": "using System;\nusing System.Collections;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Text;\nusing System.Collections.Generic;\nusing Broadleaf.Library.Resources;\nusing Broadleaf.Library.Data;\nusing Broadleaf.Library.Data.SqlTypes;\nusing Broadleaf.Library.Data.SqlClient;\nusing Broadleaf.Library.Diagnostics;\nusing Broadleaf.Application.Resources;\nusing Broadleaf.Application.Remoting.ParamData;\nusing Broadleaf.Application.Common;\n\nnamespace Broadleaf.Application.LocalAccess\n{\n    /// <summary>\n    /// Ж̐ݒLC[JDBIuWFNg\n    /// </summary>\n    /// <remarks>\n    /// <br>Note       : Ж̐ݒLC̃[JDBf[^sNXłB</br>\n    /// <br>Programmer : 20096@@</br>\n    /// <br>Date       : 2007.05.09</br>\n    /// <br></br>\n    /// <br>Update Note: 2008.02.05 980081 Rc F</br>\n    /// <br>           : ʊΉ</br>\n    /// <br></br>\n    /// <br>Update Note: 2008.05.27 20081 Dc El</br>\n    /// <br>           : PM.NSpɕύX</br>\n    /// </remarks>\n    public class CompanyNmLcDB : IWriteSyncLocalData\n    {\n       ",
  "analysis": "## 1. 問題の詳細分析\n1. **SQLインジェクションの危険性（高リスク）**  \n   `SearchCompanyNmWorkProcProc` 内で `StringBuilder` を使った SQL 文の組み立て時に、`companyNmWork` の各プロパティ値を文字列連結で直接埋め込んでいます。これらの値がユーザー入力に由来する場合、特殊文字や悪意ある SQL をそのまま取り込んでしまい、認証回避やデータ改ざん・漏えいにつながる SQL インジェクションの重大なリスクがあります。\n\n2. **コマンド／リーダーの未解放によるリソースリーク（中リスク）**  \n   `SqlCommand` や `SqlDataReader` を `using` でラップせず、明示的な `Dispose` も行っていません。例外発生時にリソースが解放されない可能性があり、接続枯渇やパフォーマンス劣化の恐れがあります。\n\n3. **入力検証の欠如（中リスク）**  \n   `companyNmWork` の各プロパティが null／空文字、あるいは想定外の長さの場合でも、そのまま SQL 句に組み込んでいます。検索条件の異常化だけでなく、意図しない SQL の構築にも繋がります。\n\n## 2. 改善コード\n### Before（問題のあるコード）\n```csharp\nStringBuilder sbSql = new StringBuilder();\nsbSql.Append(\" SELECT ... FROM COMPANY_NM_WORK WHERE 1 = 1 \");\n\nif (!string.IsNullOrEmpty(companyNmWork.CompanyCd))\n{\n    sbSql.Append(\" AND COMPANY_CD = '\" + companyNmWork.CompanyCd + \"'\");\n}\nif (!string.IsNullOrEmpty(companyNmWork.BranchCd))\n{\n    sbSql.Append(\" AND BRANCH_CD = '\" + companyNmWork.BranchCd + \"'\");\n}\nif (!string.IsNullOrEmpty(companyNmWork.CompanyNm))\n{\n    sbSql.Append(\" AND COMPANY_NM LIKE '%\" + companyNmWork.CompanyNm + \"%'\");\n}\n\nSqlCommand sqlCommand = new SqlCommand(sbSql.ToString(), sqlConnection);\nSqlDataReader reader = sqlCommand.ExecuteReader();\n\nwhile (reader.Read())\n{\n    // ...\n}\nreader.Close();\n```\n\n### After（改善後のコード）\n```csharp\nStringBuilder sbSql = new StringBuilder();\nsbSql.Append(\" SELECT ... FROM COMPANY_NM_WORK WHERE 1 = 1 \");\n\nusing (SqlCommand sqlCommand = new SqlCommand())\n{\n    sqlCommand.Connection = sqlConnection;\n\n    if (!string.IsNullOrWhiteSpace(companyNmWork.CompanyCd))\n    {\n        sbSql.Append(\" AND COMPANY_CD = @CompanyCd \");\n        sqlCommand.Parameters.Add(\"@CompanyCd\", SqlDbType.VarChar, 12)\n                   .Value = companyNmWork.CompanyCd.Trim();\n    }\n\n    if (!string.IsNullOrWhiteSpace(companyNmWork.BranchCd))\n    {\n        sbSql.Append(\" AND BRANCH_CD = @BranchCd \");\n        sqlCommand.Parameters.Add(\"@BranchCd\", SqlDbType.VarChar, 12)\n                   .Value = companyNmWork.BranchCd.Trim();\n    }\n\n    if (!string.IsNullOrWhiteSpace(companyNmWork.CompanyNm))\n    {\n        sbSql.Append(\" AND COMPANY_NM LIKE @CompanyNm \");\n        sqlCommand.Parameters.Add(\"@CompanyNm\", SqlDbType.NVarChar, 100)\n                   .Value = $\"%{companyNmWork.CompanyNm.Trim()}%\";\n    }\n\n    sqlCommand.CommandText = sbSql.ToString();\n\n    using (SqlDataReader reader = sqlCommand.ExecuteReader())\n    {\n        while (reader.Read())\n        {\n            // ...\n        }\n    }\n}\n```\n\n## 3. 追加の改善提案\n- **入力値検証の強化**：桁数・文字種・ビジネスルールに合致するかを事前に確認し、異常値は検索対象にしない（ログに記録してクライアントへ適切に通知）。\n- **コネクションも `using` で管理**：`Search` メソッド内の `SqlConnection` も `using` を用いてより確実にリソースを解放する。\n- **例外ハンドリングの明確化**：障害時に返すステータスとログ内容を整理し、呼び出し側が復旧策を取りやすい情報を残す。\n- **ユニットテストの整備**：SQL 条件付けの分岐を網羅するテストを追加し、パラメータ化の抜け漏れや境界値を確認する。",
  "model_used": "gpt-5-codex"
}