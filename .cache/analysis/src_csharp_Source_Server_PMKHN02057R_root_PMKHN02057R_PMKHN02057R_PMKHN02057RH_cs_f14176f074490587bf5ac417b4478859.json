{
  "path": "src/csharp/Source/Server/PMKHN02057R.root/PMKHN02057R/PMKHN02057R/PMKHN02057RH.cs",
  "severity": 15,
  "problems": [],
  "original_code": "//****************************************************************************//\n// VXe         : .NSV[Y\n// vO   : Ly[ѕ\\\n// vOTv   : Ly[ѕ\\@nʗp\n//----------------------------------------------------------------------------//\n//                (c)Copyright  2011 Broadleaf Co.,Ltd.\n//============================================================================//\n// \n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : c\n//     2011/05/19  Ce : VK쐬\n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : \n//     2011/07/07  Ce : Redmine dlA #22792 ̑Ή\n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : \n//     2011/07/11  Ce : Redmine dlύX #22860 ̑Ή\n//----------------------------------------------------------------------------//\n// Ǘԍ              쐬S : \n//     2011/07/27  Ce : Redmine Q #23232 ̑Ή\n//-------------------------------------------",
  "analysis": "## 1. 問題の詳細分析\n- **SQL インジェクションの危険性**  \n  `MakeSalesSelectStringProc` 内では、`CampaignstRsltListPrtWork` から受け取った値を `StringBuilder` に文字列連結し、SELECT 文を生成しています。たとえば `AddUpSecCode` や `CustomerCode`、`CampaignCode` など複数の条件値が `... = '\" + CndtnWork.XXX + \"'` という形でそのまま SQL に挿入されており、外部入力にシングルクォートや SQL キーワードを仕込まれると、任意の SQL を実行させられる可能性があります。これにより、情報漏えいやデータ改ざんなど重大な被害が発生し得ます。\n\n## 2. 改善コード\n### Before（問題のあるコード）\n```csharp\nif (!string.IsNullOrEmpty(CndtnWork.AddUpSecCode))\n{\n    strSQL.Append(\" AND MK.ADDUPSEC_CD = '\" + CndtnWork.AddUpSecCode + \"'\");\n}\n\nif (!string.IsNullOrEmpty(CndtnWork.CustomerCode))\n{\n    strSQL.Append(\" AND MK.CUSTOMER_CD = '\" + CndtnWork.CustomerCode + \"'\");\n}\n\n// ...\nsqlCommand.CommandText = strSQL.ToString();\n```\n\n### After（改善後のコード）\n```csharp\nif (!string.IsNullOrEmpty(CndtnWork.AddUpSecCode))\n{\n    const string paramName = \"@AddUpSecCode\";\n    strSQL.Append(\" AND MK.ADDUPSEC_CD = \" + paramName);\n    sqlCommand.Parameters.Add(paramName, SqlDbType.VarChar, 20)\n              .Value = CndtnWork.AddUpSecCode;\n}\n\nif (!string.IsNullOrEmpty(CndtnWork.CustomerCode))\n{\n    const string paramName = \"@CustomerCode\";\n    strSQL.Append(\" AND MK.CUSTOMER_CD = \" + paramName);\n    sqlCommand.Parameters.Add(paramName, SqlDbType.VarChar, 20)\n              .Value = CndtnWork.CustomerCode;\n}\n\n// ...\nsqlCommand.CommandText = strSQL.ToString();\n```\n\n**ポイント**\n- すべてのユーザー入力値を `SqlParameter` 経由でバインドし、SQL 文字列へ直接連結しない。\n- パラメータ名が衝突しないよう、用途ごとに固有名（`@AddUpSecCode` など）を付ける。\n- 文字型以外の日付・数値なども `SqlParameter` で型指定し、DB 側の型と一致させる。\n\n## 3. 追加の改善提案\n- **入力検証**：ビジネスルール上許容される値かを事前にチェックし、想定外の値は除外する。\n- **コマンド実行周りの保守性向上**：`SqlCommand` の生成・パラメータ追加をヘルパーメソッド化し、今後の変更で連結が紛れ込まないよう統一的に管理する。\n- **ロギング**：不正な入力や SQL 実行エラーを検知できるよう、監査ログやアラートを整備する。",
  "model_used": "gpt-5-codex"
}