{
  "path": "src/csharp/Source/Server/PMKHN08635R.root/PMKHN08635R/PMKHN08635R/PMKHN08635RD.cs",
  "severity": 15,
  "problems": [],
  "original_code": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Text;\nusing Broadleaf.Application.Remoting.ParamData;\nusing Broadleaf.Library.Resources;\nusing Broadleaf.Library.Data;\nusing Broadleaf.Library.Data.SqlTypes;\nusing Broadleaf.Library.Data.SqlClient;\nusing Broadleaf.Xml.Serialization;\nusing Broadleaf.Application.Resources;\nusing Broadleaf.Library.Globarization;\n\nnamespace Broadleaf.Application.Remoting\n{\n    class MTtlSaSlipCust : MTtlSaSlipBase, IMTtlSaSlip\n    {\n\n        #region [Ӑʗp Select]\n        /// <summary>\n        /// ӐʗpSELECT \n        /// </summary>\n        /// <param name=\"sqlCommand\">SqlCommandIuWFNg</param>\n        /// <param name=\"CndtnWork\"></param>\n        /// <returns>ӐʗpSELECT</returns>\n        /// <br>Note       : ӐʗpSELECT쐬Ė߂܂</br>\n        /// <br>Programmer : 23012  [N</br>\n        /// <br>Date       : 2008.11.11</br>\n        public string MakeSelectString(ref SqlCommand sqlCommand, ",
  "analysis": "## 1. 問題の詳細分析\n- **SQL インジェクションの危険**  \n  `MakeSelectStringProc` では、`SalTrgtPrintParamWork` から渡される値（ユーザー入力が入り得る）をそのまま文字列連結で SQL に埋め込んでいます。  \n  例：`selectTxt += \" AND CSLST.SECTIONCODERF = '\" + CndtnWork.SectionCode + \"'\"`  \n  この形では、`SectionCode` に `\"' OR 1=1 --\"` のような値を与えることで、任意の SQL を挿入できるため、情報漏えいや破壊的操作が可能になります。  \n  `SqlCommand` が `ref` で渡されているにもかかわらずパラメータを設定していないことからも、現状が文字列連結ベースの動的 SQL であることがわかります。\n\n- **入力値の検証不足**  \n  `PrintType` に対して 30/31/32 以外の値が渡された場合でも既定値の `\"CSTMR\"` が使われるため、想定外の問い合わせが実行される可能性があります。\n\n- **文字列連結による可読性・保守性の低下**  \n  1 行ずつ `selectTxt += ...` で SQL を組み上げているため、SQL の構造が把握しにくく、条件を追加・変更するたびに脆弱なコードが増えやすい状況です。\n\n## 2. 改善コード\n### Before（問題のあるコード）\n```csharp\nprivate string MakeSelectStringProc(ref SqlCommand sqlCommand, SalTrgtPrintParamWork CndtnWork, ConstantManagement.LogicalMode logicalMode)\n{\n    string selectTxt = \"\";\n    string Tblnm = \"CSTMR\";\n\n    switch (CndtnWork.PrintType)\n    {\n        case 30:\n            Tblnm = \"CSTMR\";\n            break;\n        case 31:\n            Tblnm = \"USGDUB\";\n            break;\n        case 32:\n            Tblnm = \"USGDUS\";\n            break;\n    }\n\n    selectTxt += \"SELECT\" + Environment.NewLine;\n    selectTxt += \"   \" + Tblnm + \".UPDATEDATETIMERF\" + Environment.NewLine;\n    ...\n    if (!string.IsNullOrEmpty(CndtnWork.SectionCode))\n    {\n        selectTxt += \" AND CSLST.SECTIONCODERF = '\" + CndtnWork.SectionCode + \"'\" + Environment.NewLine;\n    }\n    if (!string.IsNullOrEmpty(CndtnWork.CustomerCodeFrom))\n    {\n        selectTxt += \" AND CSLST.CUSTOMERCODERF >= '\" + CndtnWork.CustomerCodeFrom + \"'\" + Environment.NewLine;\n    }\n    ...\n    return selectTxt;\n}\n```\n\n### After（改善後のコード）\n```csharp\nprivate string MakeSelectStringProc(\n    ref SqlCommand sqlCommand,\n    SalTrgtPrintParamWork condition,\n    ConstantManagement.LogicalMode logicalMode)\n{\n    if (sqlCommand == null) throw new ArgumentNullException(nameof(sqlCommand));\n    if (condition == null) throw new ArgumentNullException(nameof(condition));\n\n    var tableName = condition.PrintType switch\n    {\n        30 => \"CSTMR\",\n        31 => \"USGDUB\",\n        32 => \"USGDUS\",\n        _  => throw new ArgumentOutOfRangeException(nameof(condition.PrintType), condition.PrintType, \"Unsupported print type.\")\n    };\n\n    var query = new StringBuilder();\n    query.AppendLine(\"SELECT\");\n    query.AppendLine($\"   {tableName}.UPDATEDATETIMERF\");\n    query.AppendLine(\"  ,CSLST.SECTIONCODERF\");\n    query.AppendLine(\"  ,SCINF.SECTIONGUIDESNMRF\");\n    query.AppendLine(\"  ,CSLST.CUSTOMERCODERF\");\n    query.AppendLine(\"  ,CSTMR.CUSTOMERSNMRF\");\n    query.AppendLine(\"  ,CSLST.BUSINESSTYPECODERF\");\n    query.AppendLine(\"  ,USGDUB.GUIDENAMERF AS BUSINESSTYPECODENAME\");\n    query.AppendLine(\"  ,CSLST.SALESAREACODERF\");\n    query.AppendLine(\"  ,USGDUS.GUIDENAMERF AS SALESAREACODENAME\");\n    query.AppendLine(\"  ,CSLST.SALESTARGETMONEY1\");\n    // ...（残りの SELECT 句は同様に追加）\n\n    query.AppendLine(\"FROM CSLST\");\n    query.AppendLine(\"INNER JOIN CSTMR ON CSLST.CUSTOMERCODERF = CSTMR.CUSTOMERCODERF\");\n    query.AppendLine(\"LEFT JOIN SCINF ON CSLST.SECTIONCODERF = SCINF.SECTIONCODERF\");\n    query.AppendLine(\"LEFT JOIN USGDUB ON CSLST.BUSINESSTYPECODERF = USGDUB.GUIDECODERF\");\n    query.AppendLine(\"LEFT JOIN USGDUS ON CSLST.SALESAREACODERF = USGDUS.GUIDECODERF\");\n    query.AppendLine(\"WHERE 1 = 1\");\n\n    if (!string.IsNullOrWhiteSpace(condition.SectionCode))\n    {\n        query.AppendLine(\"  AND CSLST.SECTIONCODERF = @SectionCode\");\n        sqlCommand.Parameters.Add(\"@SectionCode\", SqlDbType.VarChar, 10).Value = condition.SectionCode.Trim();\n    }\n\n    if (!string.IsNullOrWhiteSpace(condition.CustomerCodeFrom))\n    {\n        query.AppendLine(\"  AND CSLST.CUSTOMERCODERF >= @CustomerCodeFrom\");\n        sqlCommand.Parameters.Add(\"@CustomerCodeFrom\", SqlDbType.VarChar, 10).Value = condition.CustomerCodeFrom.Trim();\n    }\n\n    if (!string.IsNullOrWhiteSpace(condition.CustomerCodeTo))\n    {\n        query.AppendLine(\"  AND CSLST.CUSTOMERCODERF <= @CustomerCodeTo\");\n        sqlCommand.Parameters.Add(\"@CustomerCodeTo\", SqlDbType.VarChar, 10).Value = condition.CustomerCodeTo.Trim();\n    }\n\n    if (condition.UpdatedFrom.HasValue)\n    {\n        query.AppendLine(\"  AND CSLST.UPDATEDATETIMERF >= @UpdatedFrom\");\n        sqlCommand.Parameters.Add(\"@UpdatedFrom\", SqlDbType.DateTime).Value = condition.UpdatedFrom.Value;\n    }\n\n    if (condition.UpdatedTo.HasValue)\n    {\n        query.AppendLine(\"  AND CSLST.UPDATEDATETIMERF < @UpdatedTo\");\n        sqlCommand.Parameters.Add(\"@UpdatedTo\", SqlDbType.DateTime).Value = condition.UpdatedTo.Value.AddDays(1);\n    }\n\n    sqlCommand.CommandText = query.ToString();\n    return sqlCommand.CommandText;\n}\n```\n※ `SalTrgtPrintParamWork` に存在するプロパティ名は、実際の定義に合わせて置き換えてください。\n\n## 3. 追加の改善提案\n- **入力値の正規化・バリデーション**  \n  `PrintType` 以外の文字列入力も、禁止文字や最大長をサーバー側で必ず検証・制限してください。\n- **共通ロジックの切り出し**  \n  SELECT 句の組み立てや JOIN 句は `StringBuilder` を用いたテンプレート化でメンテナンスしやすくできます。\n- **ログと監査**  \n  実行 SQL をパラメータ値付きで監査ログに残すことで、万が一の不正アクセスの早期発見に繋がります。\n- **ユニットテスト整備**  \n  正常／異常系（特に空文字・最大長・不正文字等）を網羅するテストを追加し、SQL 注入が再発しないようにします。\n- **Nullable への対応**  \n  `SalTrgtPrintParamWork` の日付等が `null` の場合にも安全に扱えるように Nullable を活用し、不要な `DateTime.MinValue` 判定を排除してください。\n\nこれらの修正によって、SQL インジェクションの脅威を除去しつつ、保守性の高い安全なコードに改善できます。",
  "model_used": "gpt-5-codex"
}